(()=>{var t={8236:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(4015),o=r.n(n),a=r(3645),s=r.n(a)()(o());s.push([t.id,'.link{font-family:"Montserrat",Arial,sans-serif;font-style:normal;font-weight:600;font-size:12px;line-height:15px;height:15px;color:#bc9cff;text-transform:uppercase;cursor:pointer;margin:15px 20px 15px 0;-webkit-user-select:none;text-decoration:none}.link.link_clean{color:rgba(31,32,65,.5)}.link.link_lux{margin:0 0 0 3px}.link:hover{text-decoration:underline}',"",{version:3,sources:["webpack://./src/blocks/link/link.scss"],names:[],mappings:"AAAA,MACE,yCAAA,CACA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,WAAA,CACA,aAAA,CACA,wBAAA,CACA,cAAA,CACA,uBAAA,CACA,wBAAA,CACA,oBAAA,CAEA,iBACE,uBAAA,CAGF,eACE,gBAAA,CAGF,YACE,yBAAA",sourcesContent:[".link {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  height: 15px;\r\n  color: #bc9cff;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  -webkit-user-select: none;\r\n  text-decoration: none;\r\n\r\n  &.link_clean {\r\n    color: rgba(31, 32, 65, 0.5);\r\n  }\r\n\r\n  &.link_lux {\r\n    margin: 0 0 0 3px;\r\n  }\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const i=s},4800:(t,e,r)=>{"use strict";r.d(e,{Z:()=>_});var n=r(4015),o=r.n(n),a=r(3645),s=r.n(a),i=r(1667),l=r.n(i),c=r(1694),f=r(8843),A=r(351),p=r(1237),u=r(8512),d=r(8758),m=r(7422),h=r(7705),C=r(3360),b=r(4349),g=r(9802),y=r(1302),w=s()(o()),x=l()(c),v=l()(f),M=l()(A),B=l()(p),k=l()(u),E=l()(d),S=l()(m),T=l()(h),j=l()(C),O=l()(b),F=l()(g),I=l()(y);w.push([t.id,'@font-face{font-family:"Montserrat";src:local("Montserrat Bold"),local("Montserrat-Bold"),url('+x+') format("woff2"),url('+v+') format("woff"),url('+M+') format("truetype");font-weight:bold;font-style:normal;font-display:swap}@font-face{font-family:"Montserrat";src:local("Montserrat Regular"),local("Montserrat-Regular"),url('+B+') format("woff2"),url('+k+') format("woff"),url('+E+') format("truetype");font-weight:400;font-style:normal;font-display:swap}@font-face{font-family:"Montserrat";src:local("Montserrat Medium"),local("Montserrat-Medium"),url('+S+') format("woff2"),url('+T+') format("woff"),url('+j+') format("truetype");font-weight:500;font-style:normal;font-display:swap}@font-face{font-family:"Montserrat";src:local("Montserrat SemiBold"),local("Montserrat-SemiBold"),url('+O+') format("woff2"),url('+F+') format("woff"),url('+I+') format("truetype");font-weight:600;font-style:normal;font-display:swap}.start-page{padding:80px 8.4%}.start-page .start-page__links{display:flex;flex-direction:column}body{margin:0;padding:0;font-family:"Montserrat",Arial,sans-serif;font-style:normal;font-weight:normal;font-size:13.7px;line-height:24px;color:rgba(31,32,65,.75);min-width:320px}h1{font-family:"Montserrat",Arial,sans-serif;font-size:24px;line-height:30px}h2{font-family:"Montserrat",Arial,sans-serif;font-size:19px;line-height:24px}h3{font-family:"Montserrat",Arial,sans-serif;font-size:12px;line-height:15px;text-transform:uppercase}h1,h2,h3{margin:0;color:#1f2041}body,p{font-family:"Montserrat",Arial,sans-serif;font-style:normal;font-weight:normal;font-size:14px;line-height:24px}a{cursor:pointer}a :hover{text-decoration:underline}img{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}span{white-space:nowrap}',"",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,WACE,wBAAA,CACA,+NAAA,CAIA,gBAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,wBAAA,CACA,qOAAA,CAIA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,wBAAA,CACA,mOAAA,CAIA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,WACE,wBAAA,CACA,yOAAA,CAIA,eAAA,CACA,iBAAA,CACA,iBAAA,CAGF,YACE,iBAAA,CAEA,+BACE,YAAA,CACA,qBAAA,CAIJ,KACE,QAAA,CACA,SAAA,CACA,yCAAA,CACA,iBAAA,CACA,kBAAA,CACA,gBAAA,CACA,gBAAA,CACA,wBAAA,CACA,eAAA,CAGF,GACE,yCAAA,CACA,cAAA,CACA,gBAAA,CAGF,GACE,yCAAA,CACA,cAAA,CACA,gBAAA,CAGF,GACE,yCAAA,CACA,cAAA,CACA,gBAAA,CACA,wBAAA,CAGF,SAGE,QAAA,CACA,aAAA,CAGF,OAEE,yCAAA,CACA,iBAAA,CACA,kBAAA,CACA,cAAA,CACA,gBAAA,CAGF,EACE,cAAA,CACA,SACE,yBAAA,CAIJ,IACE,gBAAA,CACA,qBAAA,CACA,wBAAA,CACA,oBAAA,CAGF,KACE,kBAAA",sourcesContent:["@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Bold'), local('Montserrat-Bold'),\r\n    url('./fonts/montserrat/montserrat-bold.woff2') format('woff2'),\r\n    url('./fonts/montserrat/montserrat-bold.woff') format('woff'),\r\n    url('./fonts/montserrat/montserrat-bold.ttf') format('truetype');\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n    url('./fonts/montserrat/montserrat-regular.woff2') format('woff2'),\r\n    url('./fonts/montserrat/montserrat-regular.woff') format('woff'),\r\n    url('./fonts/montserrat/montserrat-regular.ttf') format('truetype');\r\n  font-weight: 400;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Medium'), local('Montserrat-Medium'),\r\n    url('./fonts/montserrat/montserrat-medium.woff2') format('woff2'),\r\n    url('./fonts/montserrat/montserrat-medium.woff') format('woff'),\r\n    url('./fonts/montserrat/montserrat-medium.ttf') format('truetype');\r\n  font-weight: 500;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat SemiBold'), local('Montserrat-SemiBold'),\r\n    url('./fonts/montserrat/montserrat-semi-bold.woff2') format('woff2'),\r\n    url('./fonts/montserrat/montserrat-semi-bold.woff') format('woff'),\r\n    url('./fonts/montserrat/montserrat-semi-bold.ttf') format('truetype');\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n.start-page {\r\n  padding: 80px 8.4%;\r\n\r\n  .start-page__links {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 13.7px;\r\n  line-height: 24px;\r\n  color: rgba(31, 32, 65, 0.75);\r\n  min-width: 320px;\r\n}\r\n\r\nh1 {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n}\r\n\r\nh2 {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-size: 19px;\r\n  line-height: 24px;\r\n}\r\n\r\nh3 {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-transform: uppercase;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3 {\r\n  margin: 0;\r\n  color: rgba(31, 32, 65, 1);\r\n}\r\n\r\nbody,\r\np {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n}\r\n\r\na {\r\n  cursor: pointer;\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\nimg {\r\n  user-select: none;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n}\r\n\r\nspan {\r\n  white-space: nowrap;\r\n}\r\n"],sourceRoot:""}]);const _=w},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r=t(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(t,r,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<t.length;i++){var l=[].concat(t[i]);n&&o[l[0]]||(r&&(l[2]?l[2]="".concat(r," and ").concat(l[2]):l[2]=r),e.push(l))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}t.exports=function(t){var r,n,o=(n=4,function(t){if(Array.isArray(t))return t}(r=t)||function(t,e){var r=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=r){var n,o,a=[],s=!0,i=!1;try{for(r=r.call(t);!(s=(n=r.next()).done)&&(a.push(n.value),!e||a.length!==e);s=!0);}catch(t){i=!0,o=t}finally{try{s||null==r.return||r.return()}finally{if(i)throw o}}return a}}(r,n)||function(t,r){if(t){if("string"==typeof t)return e(t,r);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],s=o[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(l," */"),f=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[a].concat(f).concat([c]).join("\n")}return[a].join("\n")}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},9200:t=>{"use strict";t.exports=JSON.parse('{"additionalProperties":true,"properties":{"name":{"description":"The filename template for the target file(s) (https://github.com/webpack-contrib/file-loader#name).","anyOf":[{"type":"string"},{"instanceof":"Function"}]},"outputPath":{"description":"A filesystem path where the target file(s) will be placed (https://github.com/webpack-contrib/file-loader#outputpath).","anyOf":[{"type":"string"},{"instanceof":"Function"}]},"publicPath":{"description":"A custom public path for the target file(s) (https://github.com/webpack-contrib/file-loader#publicpath).","anyOf":[{"type":"string"},{"instanceof":"Function"}]},"postTransformPublicPath":{"description":"A custom transformation function for post-processing the publicPath (https://github.com/webpack-contrib/file-loader#posttransformpublicpath).","instanceof":"Function"},"context":{"description":"A custom file context (https://github.com/webpack-contrib/file-loader#context).","type":"string"},"emitFile":{"description":"Enables/Disables emit files (https://github.com/webpack-contrib/file-loader#emitfile).","type":"boolean"},"regExp":{"description":"A Regular Expression to one or many parts of the target file path. The capture groups can be reused in the name property using [N] placeholder (https://github.com/webpack-contrib/file-loader#regexp).","anyOf":[{"type":"string"},{"instanceof":"RegExp"}]},"esModule":{"description":"By default, file-loader generates JS modules that use the ES modules syntax.","type":"boolean"}},"type":"object"}')},1787:t=>{"use strict";t.exports=JSON.parse('{"name":"file-loader","version":"6.2.0","description":"A file loader module for webpack","license":"MIT","repository":"webpack-contrib/file-loader","author":"Tobias Koppers @sokra","homepage":"https://github.com/webpack-contrib/file-loader","bugs":"https://github.com/webpack-contrib/file-loader/issues","funding":{"type":"opencollective","url":"https://opencollective.com/webpack"},"main":"dist/cjs.js","engines":{"node":">= 10.13.0"},"scripts":{"start":"npm run build -- -w","clean":"del-cli dist","prebuild":"npm run clean","build":"cross-env NODE_ENV=production babel src -d dist --copy-files","commitlint":"commitlint --from=master","security":"npm audit","lint:prettier":"prettier --list-different .","lint:js":"eslint --cache .","lint":"npm-run-all -l -p \\"lint:**\\"","test:only":"cross-env NODE_ENV=test jest","test:watch":"npm run test:only -- --watch","test:coverage":"npm run test:only -- --collectCoverageFrom=\\"src/**/*.js\\" --coverage","pretest":"npm run lint","test":"npm run test:coverage","prepare":"npm run build","release":"standard-version","defaults":"webpack-defaults"},"files":["dist"],"peerDependencies":{"webpack":"^4.0.0 || ^5.0.0"},"dependencies":{"loader-utils":"^2.0.0","schema-utils":"^3.0.0"},"devDependencies":{"@babel/cli":"^7.11.6","@babel/core":"^7.11.6","@babel/preset-env":"^7.11.5","@commitlint/cli":"^11.0.0","@commitlint/config-conventional":"^11.0.0","@webpack-contrib/defaults":"^6.3.0","@webpack-contrib/eslint-config-webpack":"^3.0.0","babel-jest":"^26.5.2","cross-env":"^7.0.2","del":"^6.0.0","del-cli":"^3.0.1","eslint":"^7.10.0","eslint-config-prettier":"^6.12.0","eslint-plugin-import":"^2.22.1","husky":"^4.3.0","jest":"^26.5.2","lint-staged":"^10.4.0","memfs":"^3.2.0","npm-run-all":"^4.1.5","prettier":"^2.1.2","standard-version":"^9.0.0","url-loader":"^4.1.0","webpack":"^4.44.2"},"keywords":["webpack"]}')},3366:(t,e,r)=>{var n={"./dist/options.json":9200,"./package.json":1787};function o(t){var e=a(t);return r(e)}function a(t){if(!r.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}o.keys=function(){return Object.keys(n)},o.resolve=a,t.exports=o,o.id=3366},7323:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>u});var n=r(3379),o=r.n(n),a=r(7795),s=r.n(a),i=r(695),l=r.n(i),c=r(9216),f=r.n(c),A=r(8236),p={styleTagTransform:function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}},setAttributes:function(t){var e=r.nc;e&&t.setAttribute("nonce",e)},insert:function(t){var e=l()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}};p.domAPI=s(),p.insertStyleElement=f(),o()(A.Z,p);const u=A.Z&&A.Z.locals?A.Z.locals:void 0},9620:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>u});var n=r(3379),o=r.n(n),a=r(7795),s=r.n(a),i=r(695),l=r.n(i),c=r(9216),f=r.n(c),A=r(4800),p={styleTagTransform:function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}},setAttributes:function(t){var e=r.nc;e&&t.setAttribute("nonce",e)},insert:function(t){var e=l()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}};p.domAPI=s(),p.insertStyleElement=f(),o()(A.Z,p);const u=A.Z&&A.Z.locals?A.Z.locals:void 0},695:t=>{"use strict";var e={};t.exports=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}},3379:t=>{"use strict";var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var a={},s=[],i=0;i<t.length;i++){var l=t[i],c=n.base?l[0]+n.base:l[0],f=a[c]||0,A="".concat(c," ").concat(f);a[c]=f+1;var p=r(A),u={css:l[1],media:l[2],sourceMap:l[3]};-1!==p?(e[p].references++,e[p].updater(u)):e.push({identifier:A,updater:o(u,n),references:1}),s.push(A)}return s}function o(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var a=n(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<a.length;s++){var i=r(a[s]);e[i].references--}for(var l=n(t,o),c=0;c<a.length;c++){var f=r(a[c]);0===e[f].references&&(e[f].updater(),e.splice(f,1))}a=l}}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n=r.css,o=r.media,a=r.sourceMap;o?t.setAttribute("media",o):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(n,t)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},3309:(t,e,r)=>{var n=r(3366);n.keys().forEach(n)},351:(t,e,r)=>{"use strict";t.exports=r.p+"cfaa6b8889aa2a3864bd.ttf"},8843:(t,e,r)=>{"use strict";t.exports=r.p+"0329bf8fcbfdd06caa24.woff"},1694:(t,e,r)=>{"use strict";t.exports=r.p+"dbf9cc3b5d0be6860367.woff2"},3360:(t,e,r)=>{"use strict";t.exports=r.p+"b2e5fcdebc2bb4364eea.ttf"},7705:(t,e,r)=>{"use strict";t.exports=r.p+"1415d3efde4fddeccbca.woff"},7422:(t,e,r)=>{"use strict";t.exports=r.p+"c416eeaec33891f7c008.woff2"},8758:(t,e,r)=>{"use strict";t.exports=r.p+"d4f770a49dfa69890fd4.ttf"},8512:(t,e,r)=>{"use strict";t.exports=r.p+"498c8cdbbcd5264ad13c.woff"},1237:(t,e,r)=>{"use strict";t.exports=r.p+"518803d3e08549d2d704.woff2"},1302:(t,e,r)=>{"use strict";t.exports=r.p+"feb9a9ab44bccb4cc66e.ttf"},9802:(t,e,r)=>{"use strict";t.exports=r.p+"fa5f925d970d6332a140.woff"},4349:(t,e,r)=>{"use strict";t.exports=r.p+"53b31a44d4132debc087.woff2"}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={id:n,exports:{}};return t[n](a,a.exports,r),a.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{"use strict";r(3309),r(9620),r(7323)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,