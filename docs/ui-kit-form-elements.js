/*! For license information please see ui-kit-form-elements.js.LICENSE.txt */
(()=>{var e={3450:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>g});var r="undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},a=function(e,t,n,r,i,s,o,d,l,u){var c=this;c.numeralDecimalMark=e||".",c.numeralIntegerScale=t>0?t:0,c.numeralDecimalScale=n>=0?n:2,c.numeralThousandsGroupStyle=r||a.groupStyle.thousand,c.numeralPositiveOnly=!!i,c.stripLeadingZeroes=!1!==s,c.prefix=o||""===o?o:"",c.signBeforePrefix=!!d,c.tailPrefix=!!l,c.delimiter=u||""===u?u:",",c.delimiterRE=u?new RegExp("\\"+u,"g"):""};a.groupStyle={thousand:"thousand",lakh:"lakh",wan:"wan",none:"none"},a.prototype={getRawValue:function(e){return e.replace(this.delimiterRE,"").replace(this.numeralDecimalMark,".")},format:function(e){var t,n,r,i,s=this,o="";switch(e=e.replace(/[A-Za-z]/g,"").replace(s.numeralDecimalMark,"M").replace(/[^\dM-]/g,"").replace(/^\-/,"N").replace(/\-/g,"").replace("N",s.numeralPositiveOnly?"":"-").replace("M",s.numeralDecimalMark),s.stripLeadingZeroes&&(e=e.replace(/^(-)?0+(?=\d)/,"$1")),n="-"===e.slice(0,1)?"-":"",r=void 0!==s.prefix?s.signBeforePrefix?n+s.prefix:s.prefix+n:n,i=e,e.indexOf(s.numeralDecimalMark)>=0&&(i=(t=e.split(s.numeralDecimalMark))[0],o=s.numeralDecimalMark+t[1].slice(0,s.numeralDecimalScale)),"-"===n&&(i=i.slice(1)),s.numeralIntegerScale>0&&(i=i.slice(0,s.numeralIntegerScale)),s.numeralThousandsGroupStyle){case a.groupStyle.lakh:i=i.replace(/(\d)(?=(\d\d)+\d$)/g,"$1"+s.delimiter);break;case a.groupStyle.wan:i=i.replace(/(\d)(?=(\d{4})+$)/g,"$1"+s.delimiter);break;case a.groupStyle.thousand:i=i.replace(/(\d)(?=(\d{3})+$)/g,"$1"+s.delimiter)}return s.tailPrefix?n+i.toString()+(s.numeralDecimalScale>0?o.toString():"")+s.prefix:r+i.toString()+(s.numeralDecimalScale>0?o.toString():"")}};var i=a,s=function(e,t,n){var r=this;r.date=[],r.blocks=[],r.datePattern=e,r.dateMin=t.split("-").reverse().map((function(e){return parseInt(e,10)})),2===r.dateMin.length&&r.dateMin.unshift(0),r.dateMax=n.split("-").reverse().map((function(e){return parseInt(e,10)})),2===r.dateMax.length&&r.dateMax.unshift(0),r.initBlocks()};s.prototype={initBlocks:function(){var e=this;e.datePattern.forEach((function(t){"Y"===t?e.blocks.push(4):e.blocks.push(2)}))},getISOFormatDate:function(){var e=this,t=e.date;return t[2]?t[2]+"-"+e.addLeadingZero(t[1])+"-"+e.addLeadingZero(t[0]):""},getBlocks:function(){return this.blocks},getValidatedDate:function(e){var t=this,n="";return e=e.replace(/[^\d]/g,""),t.blocks.forEach((function(r,a){if(e.length>0){var i=e.slice(0,r),s=i.slice(0,1),o=e.slice(r);switch(t.datePattern[a]){case"d":"00"===i?i="01":parseInt(s,10)>3?i="0"+s:parseInt(i,10)>31&&(i="31");break;case"m":"00"===i?i="01":parseInt(s,10)>1?i="0"+s:parseInt(i,10)>12&&(i="12")}n+=i,e=o}})),this.getFixedDateString(n)},getFixedDateString:function(e){var t,n,r,a=this,i=a.datePattern,s=[],o=0,d=0,l=0,u=0,c=0,m=0,_=!1;return 4===e.length&&"y"!==i[0].toLowerCase()&&"y"!==i[1].toLowerCase()&&(c=2-(u="d"===i[0]?0:2),t=parseInt(e.slice(u,u+2),10),n=parseInt(e.slice(c,c+2),10),s=this.getFixedDate(t,n,0)),8===e.length&&(i.forEach((function(e,t){switch(e){case"d":o=t;break;case"m":d=t;break;default:l=t}})),m=2*l,u=o<=l?2*o:2*o+2,c=d<=l?2*d:2*d+2,t=parseInt(e.slice(u,u+2),10),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(m,m+4),10),_=4===e.slice(m,m+4).length,s=this.getFixedDate(t,n,r)),4!==e.length||"y"!==i[0]&&"y"!==i[1]||(m=2-(c="m"===i[0]?0:2),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(m,m+2),10),_=2===e.slice(m,m+2).length,s=[0,n,r]),6!==e.length||"Y"!==i[0]&&"Y"!==i[1]||(m=2-.5*(c="m"===i[0]?0:4),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(m,m+4),10),_=4===e.slice(m,m+4).length,s=[0,n,r]),s=a.getRangeFixedDate(s),a.date=s,0===s.length?e:i.reduce((function(e,t){switch(t){case"d":return e+(0===s[0]?"":a.addLeadingZero(s[0]));case"m":return e+(0===s[1]?"":a.addLeadingZero(s[1]));case"y":return e+(_?a.addLeadingZeroForYear(s[2],!1):"");case"Y":return e+(_?a.addLeadingZeroForYear(s[2],!0):"")}}),"")},getRangeFixedDate:function(e){var t=this,n=t.datePattern,r=t.dateMin||[],a=t.dateMax||[];return!e.length||r.length<3&&a.length<3||n.find((function(e){return"y"===e.toLowerCase()}))&&0===e[2]?e:a.length&&(a[2]<e[2]||a[2]===e[2]&&(a[1]<e[1]||a[1]===e[1]&&a[0]<e[0]))?a:r.length&&(r[2]>e[2]||r[2]===e[2]&&(r[1]>e[1]||r[1]===e[1]&&r[0]>e[0]))?r:e},getFixedDate:function(e,t,n){return e=Math.min(e,31),t=Math.min(t,12),n=parseInt(n||0,10),(t<7&&t%2==0||t>8&&t%2==1)&&(e=Math.min(e,2===t?this.isLeapYear(n)?29:28:30)),[e,t,n]},isLeapYear:function(e){return e%4==0&&e%100!=0||e%400==0},addLeadingZero:function(e){return(e<10?"0":"")+e},addLeadingZeroForYear:function(e,t){return t?(e<10?"000":e<100?"00":e<1e3?"0":"")+e:(e<10?"0":"")+e}};var o=s,d=function(e,t){var n=this;n.time=[],n.blocks=[],n.timePattern=e,n.timeFormat=t,n.initBlocks()};d.prototype={initBlocks:function(){var e=this;e.timePattern.forEach((function(){e.blocks.push(2)}))},getISOFormatTime:function(){var e=this,t=e.time;return t[2]?e.addLeadingZero(t[0])+":"+e.addLeadingZero(t[1])+":"+e.addLeadingZero(t[2]):""},getBlocks:function(){return this.blocks},getTimeFormatOptions:function(){return"12"===String(this.timeFormat)?{maxHourFirstDigit:1,maxHours:12,maxMinutesFirstDigit:5,maxMinutes:60}:{maxHourFirstDigit:2,maxHours:23,maxMinutesFirstDigit:5,maxMinutes:60}},getValidatedTime:function(e){var t=this,n="";e=e.replace(/[^\d]/g,"");var r=t.getTimeFormatOptions();return t.blocks.forEach((function(a,i){if(e.length>0){var s=e.slice(0,a),o=s.slice(0,1),d=e.slice(a);switch(t.timePattern[i]){case"h":parseInt(o,10)>r.maxHourFirstDigit?s="0"+o:parseInt(s,10)>r.maxHours&&(s=r.maxHours+"");break;case"m":case"s":parseInt(o,10)>r.maxMinutesFirstDigit?s="0"+o:parseInt(s,10)>r.maxMinutes&&(s=r.maxMinutes+"")}n+=s,e=d}})),this.getFixedTimeString(n)},getFixedTimeString:function(e){var t,n,r,a=this,i=a.timePattern,s=[],o=0,d=0,l=0,u=0,c=0,m=0;return 6===e.length&&(i.forEach((function(e,t){switch(e){case"s":o=2*t;break;case"m":d=2*t;break;case"h":l=2*t}})),m=l,c=d,u=o,t=parseInt(e.slice(u,u+2),10),n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(m,m+2),10),s=this.getFixedTime(r,n,t)),4===e.length&&a.timePattern.indexOf("s")<0&&(i.forEach((function(e,t){switch(e){case"m":d=2*t;break;case"h":l=2*t}})),m=l,c=d,t=0,n=parseInt(e.slice(c,c+2),10),r=parseInt(e.slice(m,m+2),10),s=this.getFixedTime(r,n,t)),a.time=s,0===s.length?e:i.reduce((function(e,t){switch(t){case"s":return e+a.addLeadingZero(s[2]);case"m":return e+a.addLeadingZero(s[1]);case"h":return e+a.addLeadingZero(s[0])}}),"")},getFixedTime:function(e,t,n){return n=Math.min(parseInt(n||0,10),60),t=Math.min(t,60),[e=Math.min(e,60),t,n]},addLeadingZero:function(e){return(e<10?"0":"")+e}};var l=d,u=function(e,t){var n=this;n.delimiter=t||""===t?t:" ",n.delimiterRE=t?new RegExp("\\"+t,"g"):"",n.formatter=e};u.prototype={setFormatter:function(e){this.formatter=e},format:function(e){var t=this;t.formatter.clear();for(var n,r="",a=!1,i=0,s=(e=(e=(e=e.replace(/[^\d+]/g,"")).replace(/^\+/,"B").replace(/\+/g,"").replace("B","+")).replace(t.delimiterRE,"")).length;i<s;i++)n=t.formatter.inputDigit(e.charAt(i)),/[\s()-]/g.test(n)?(r=n,a=!0):a||(r=n);return(r=r.replace(/[()]/g,"")).replace(/[\s-]/g,t.delimiter)}};var c=u,m={blocks:{uatp:[4,5,6],amex:[4,6,5],diners:[4,6,4],discover:[4,4,4,4],mastercard:[4,4,4,4],dankort:[4,4,4,4],instapayment:[4,4,4,4],jcb15:[4,6,5],jcb:[4,4,4,4],maestro:[4,4,4,4],visa:[4,4,4,4],mir:[4,4,4,4],unionPay:[4,4,4,4],general:[4,4,4,4]},re:{uatp:/^(?!1800)1\d{0,14}/,amex:/^3[47]\d{0,13}/,discover:/^(?:6011|65\d{0,2}|64[4-9]\d?)\d{0,12}/,diners:/^3(?:0([0-5]|9)|[689]\d?)\d{0,11}/,mastercard:/^(5[1-5]\d{0,2}|22[2-9]\d{0,1}|2[3-7]\d{0,2})\d{0,12}/,dankort:/^(5019|4175|4571)\d{0,12}/,instapayment:/^63[7-9]\d{0,13}/,jcb15:/^(?:2131|1800)\d{0,11}/,jcb:/^(?:35\d{0,2})\d{0,12}/,maestro:/^(?:5[0678]\d{0,2}|6304|67\d{0,2})\d{0,12}/,mir:/^220[0-4]\d{0,12}/,visa:/^4\d{0,15}/,unionPay:/^(62|81)\d{0,14}/},getStrictBlocks:function(e){var t=e.reduce((function(e,t){return e+t}),0);return e.concat(19-t)},getInfo:function(e,t){var n=m.blocks,r=m.re;for(var a in t=!!t,r)if(r[a].test(e)){var i=n[a];return{type:a,blocks:t?this.getStrictBlocks(i):i}}return{type:"unknown",blocks:t?this.getStrictBlocks(n.general):n.general}}},_=m,p={noop:function(){},strip:function(e,t){return e.replace(t,"")},getPostDelimiter:function(e,t,n){if(0===n.length)return e.slice(-t.length)===t?t:"";var r="";return n.forEach((function(t){e.slice(-t.length)===t&&(r=t)})),r},getDelimiterREByDelimiter:function(e){return new RegExp(e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1"),"g")},getNextCursorPosition:function(e,t,n,r,a){return t.length===e?n.length:e+this.getPositionOffset(e,t,n,r,a)},getPositionOffset:function(e,t,n,r,a){var i,s,o;return i=this.stripDelimiters(t.slice(0,e),r,a),s=this.stripDelimiters(n.slice(0,e),r,a),0!=(o=i.length-s.length)?o/Math.abs(o):0},stripDelimiters:function(e,t,n){var r=this;if(0===n.length){var a=t?r.getDelimiterREByDelimiter(t):"";return e.replace(a,"")}return n.forEach((function(t){t.split("").forEach((function(t){e=e.replace(r.getDelimiterREByDelimiter(t),"")}))})),e},headStr:function(e,t){return e.slice(0,t)},getMaxLength:function(e){return e.reduce((function(e,t){return e+t}),0)},getPrefixStrippedValue:function(e,t,n,r,a,i,s,o,d){if(0===n)return e;if(e===t&&""!==e)return"";if(d&&"-"==e.slice(0,1)){var l="-"==r.slice(0,1)?r.slice(1):r;return"-"+this.getPrefixStrippedValue(e.slice(1),t,n,l,a,i,s,o,d)}if(r.slice(0,n)!==t&&!o)return s&&!r&&e?e:"";if(r.slice(-n)!==t&&o)return s&&!r&&e?e:"";var u=this.stripDelimiters(r,a,i);return e.slice(0,n)===t||o?e.slice(-n)!==t&&o?u.slice(0,-n-1):o?e.slice(0,-n):e.slice(n):u.slice(n)},getFirstDiffIndex:function(e,t){for(var n=0;e.charAt(n)===t.charAt(n);)if(""===e.charAt(n++))return-1;return n},getFormattedValue:function(e,t,n,r,a,i){var s="",o=a.length>0,d="";return 0===n?e:(t.forEach((function(t,l){if(e.length>0){var u=e.slice(0,t),c=e.slice(t);d=o?a[i?l-1:l]||d:r,i?(l>0&&(s+=d),s+=u):(s+=u,u.length===t&&l<n-1&&(s+=d)),e=c}})),s)},fixPrefixCursor:function(e,t,n,r){if(e){var a=e.value,i=n||r[0]||" ";if(e.setSelectionRange&&t&&!(t.length+i.length<=a.length)){var s=2*a.length;setTimeout((function(){e.setSelectionRange(s,s)}),1)}}},checkFullSelection:function(e){try{return(window.getSelection()||document.getSelection()||{}).toString().length===e.length}catch(e){}return!1},setSelection:function(e,t,n){if(e===this.getActiveElement(n)&&!(e&&e.value.length<=t))if(e.createTextRange){var r=e.createTextRange();r.move("character",t),r.select()}else try{e.setSelectionRange(t,t)}catch(e){console.warn("The input element type does not support selection")}},getActiveElement:function(e){var t=e.activeElement;return t&&t.shadowRoot?this.getActiveElement(t.shadowRoot):t},isAndroid:function(){return navigator&&/android/i.test(navigator.userAgent)},isAndroidBackspaceKeydown:function(e,t){return!!(this.isAndroid()&&e&&t)&&t===e.slice(0,-1)}},f={assign:function(e,t){return t=t||{},(e=e||{}).creditCard=!!t.creditCard,e.creditCardStrictMode=!!t.creditCardStrictMode,e.creditCardType="",e.onCreditCardTypeChanged=t.onCreditCardTypeChanged||function(){},e.phone=!!t.phone,e.phoneRegionCode=t.phoneRegionCode||"AU",e.phoneFormatter={},e.time=!!t.time,e.timePattern=t.timePattern||["h","m","s"],e.timeFormat=t.timeFormat||"24",e.timeFormatter={},e.date=!!t.date,e.datePattern=t.datePattern||["d","m","Y"],e.dateMin=t.dateMin||"",e.dateMax=t.dateMax||"",e.dateFormatter={},e.numeral=!!t.numeral,e.numeralIntegerScale=t.numeralIntegerScale>0?t.numeralIntegerScale:0,e.numeralDecimalScale=t.numeralDecimalScale>=0?t.numeralDecimalScale:2,e.numeralDecimalMark=t.numeralDecimalMark||".",e.numeralThousandsGroupStyle=t.numeralThousandsGroupStyle||"thousand",e.numeralPositiveOnly=!!t.numeralPositiveOnly,e.stripLeadingZeroes=!1!==t.stripLeadingZeroes,e.signBeforePrefix=!!t.signBeforePrefix,e.tailPrefix=!!t.tailPrefix,e.swapHiddenInput=!!t.swapHiddenInput,e.numericOnly=e.creditCard||e.date||!!t.numericOnly,e.uppercase=!!t.uppercase,e.lowercase=!!t.lowercase,e.prefix=e.creditCard||e.date?"":t.prefix||"",e.noImmediatePrefix=!!t.noImmediatePrefix,e.prefixLength=e.prefix.length,e.rawValueTrimPrefix=!!t.rawValueTrimPrefix,e.copyDelimiter=!!t.copyDelimiter,e.initValue=void 0!==t.initValue&&null!==t.initValue?t.initValue.toString():"",e.delimiter=t.delimiter||""===t.delimiter?t.delimiter:t.date?"/":t.time?":":t.numeral?",":(t.phone," "),e.delimiterLength=e.delimiter.length,e.delimiterLazyShow=!!t.delimiterLazyShow,e.delimiters=t.delimiters||[],e.blocks=t.blocks||[],e.blocksLength=e.blocks.length,e.root="object"==typeof r&&r?r:window,e.document=t.document||e.root.document,e.maxLength=0,e.backspace=!1,e.result="",e.onValueChanged=t.onValueChanged||function(){},e}},h=function(e,t){var n=this,r=!1;if("string"==typeof e?(n.element=document.querySelector(e),r=document.querySelectorAll(e).length>1):void 0!==e.length&&e.length>0?(n.element=e[0],r=e.length>1):n.element=e,!n.element)throw new Error("[cleave.js] Please check the element");if(r)try{console.warn("[cleave.js] Multiple input fields matched, cleave.js will only take the first one.")}catch(e){}t.initValue=n.element.value,n.properties=h.DefaultProperties.assign({},t),n.init()};h.prototype={init:function(){var e=this,t=e.properties;t.numeral||t.phone||t.creditCard||t.time||t.date||0!==t.blocksLength||t.prefix?(t.maxLength=h.Util.getMaxLength(t.blocks),e.isAndroid=h.Util.isAndroid(),e.lastInputValue="",e.isBackward="",e.onChangeListener=e.onChange.bind(e),e.onKeyDownListener=e.onKeyDown.bind(e),e.onFocusListener=e.onFocus.bind(e),e.onCutListener=e.onCut.bind(e),e.onCopyListener=e.onCopy.bind(e),e.initSwapHiddenInput(),e.element.addEventListener("input",e.onChangeListener),e.element.addEventListener("keydown",e.onKeyDownListener),e.element.addEventListener("focus",e.onFocusListener),e.element.addEventListener("cut",e.onCutListener),e.element.addEventListener("copy",e.onCopyListener),e.initPhoneFormatter(),e.initDateFormatter(),e.initTimeFormatter(),e.initNumeralFormatter(),(t.initValue||t.prefix&&!t.noImmediatePrefix)&&e.onInput(t.initValue)):e.onInput(t.initValue)},initSwapHiddenInput:function(){var e=this;if(e.properties.swapHiddenInput){var t=e.element.cloneNode(!0);e.element.parentNode.insertBefore(t,e.element),e.elementSwapHidden=e.element,e.elementSwapHidden.type="hidden",e.element=t,e.element.id=""}},initNumeralFormatter:function(){var e=this.properties;e.numeral&&(e.numeralFormatter=new h.NumeralFormatter(e.numeralDecimalMark,e.numeralIntegerScale,e.numeralDecimalScale,e.numeralThousandsGroupStyle,e.numeralPositiveOnly,e.stripLeadingZeroes,e.prefix,e.signBeforePrefix,e.tailPrefix,e.delimiter))},initTimeFormatter:function(){var e=this.properties;e.time&&(e.timeFormatter=new h.TimeFormatter(e.timePattern,e.timeFormat),e.blocks=e.timeFormatter.getBlocks(),e.blocksLength=e.blocks.length,e.maxLength=h.Util.getMaxLength(e.blocks))},initDateFormatter:function(){var e=this.properties;e.date&&(e.dateFormatter=new h.DateFormatter(e.datePattern,e.dateMin,e.dateMax),e.blocks=e.dateFormatter.getBlocks(),e.blocksLength=e.blocks.length,e.maxLength=h.Util.getMaxLength(e.blocks))},initPhoneFormatter:function(){var e=this.properties;if(e.phone)try{e.phoneFormatter=new h.PhoneFormatter(new e.root.Cleave.AsYouTypeFormatter(e.phoneRegionCode),e.delimiter)}catch(e){throw new Error("[cleave.js] Please include phone-type-formatter.{country}.js lib")}},onKeyDown:function(e){var t=this,n=e.which||e.keyCode;t.lastInputValue=t.element.value,t.isBackward=8===n},onChange:function(e){var t=this,n=t.properties,r=h.Util;t.isBackward=t.isBackward||"deleteContentBackward"===e.inputType;var a=r.getPostDelimiter(t.lastInputValue,n.delimiter,n.delimiters);t.isBackward&&a?n.postDelimiterBackspace=a:n.postDelimiterBackspace=!1,this.onInput(this.element.value)},onFocus:function(){var e=this,t=e.properties;e.lastInputValue=e.element.value,t.prefix&&t.noImmediatePrefix&&!e.element.value&&this.onInput(t.prefix),h.Util.fixPrefixCursor(e.element,t.prefix,t.delimiter,t.delimiters)},onCut:function(e){h.Util.checkFullSelection(this.element.value)&&(this.copyClipboardData(e),this.onInput(""))},onCopy:function(e){h.Util.checkFullSelection(this.element.value)&&this.copyClipboardData(e)},copyClipboardData:function(e){var t,n=this.properties,r=h.Util,a=this.element.value;t=n.copyDelimiter?a:r.stripDelimiters(a,n.delimiter,n.delimiters);try{e.clipboardData?e.clipboardData.setData("Text",t):window.clipboardData.setData("Text",t),e.preventDefault()}catch(e){}},onInput:function(e){var t=this,n=t.properties,r=h.Util,a=r.getPostDelimiter(e,n.delimiter,n.delimiters);return n.numeral||!n.postDelimiterBackspace||a||(e=r.headStr(e,e.length-n.postDelimiterBackspace.length)),n.phone?(!n.prefix||n.noImmediatePrefix&&!e.length?n.result=n.phoneFormatter.format(e):n.result=n.prefix+n.phoneFormatter.format(e).slice(n.prefix.length),void t.updateValueState()):n.numeral?(n.prefix&&n.noImmediatePrefix&&0===e.length?n.result="":n.result=n.numeralFormatter.format(e),void t.updateValueState()):(n.date&&(e=n.dateFormatter.getValidatedDate(e)),n.time&&(e=n.timeFormatter.getValidatedTime(e)),e=r.stripDelimiters(e,n.delimiter,n.delimiters),e=r.getPrefixStrippedValue(e,n.prefix,n.prefixLength,n.result,n.delimiter,n.delimiters,n.noImmediatePrefix,n.tailPrefix,n.signBeforePrefix),e=n.numericOnly?r.strip(e,/[^\d]/g):e,e=n.uppercase?e.toUpperCase():e,e=n.lowercase?e.toLowerCase():e,n.prefix&&(n.tailPrefix?e+=n.prefix:e=n.prefix+e,0===n.blocksLength)?(n.result=e,void t.updateValueState()):(n.creditCard&&t.updateCreditCardPropsByValue(e),e=r.headStr(e,n.maxLength),n.result=r.getFormattedValue(e,n.blocks,n.blocksLength,n.delimiter,n.delimiters,n.delimiterLazyShow),void t.updateValueState()))},updateCreditCardPropsByValue:function(e){var t,n=this.properties,r=h.Util;r.headStr(n.result,4)!==r.headStr(e,4)&&(t=h.CreditCardDetector.getInfo(e,n.creditCardStrictMode),n.blocks=t.blocks,n.blocksLength=n.blocks.length,n.maxLength=r.getMaxLength(n.blocks),n.creditCardType!==t.type&&(n.creditCardType=t.type,n.onCreditCardTypeChanged.call(this,n.creditCardType)))},updateValueState:function(){var e=this,t=h.Util,n=e.properties;if(e.element){var r=e.element.selectionEnd,a=e.element.value,i=n.result;r=t.getNextCursorPosition(r,a,i,n.delimiter,n.delimiters),e.isAndroid?window.setTimeout((function(){e.element.value=i,t.setSelection(e.element,r,n.document,!1),e.callOnValueChanged()}),1):(e.element.value=i,n.swapHiddenInput&&(e.elementSwapHidden.value=e.getRawValue()),t.setSelection(e.element,r,n.document,!1),e.callOnValueChanged())}},callOnValueChanged:function(){var e=this,t=e.properties;t.onValueChanged.call(e,{target:{name:e.element.name,value:t.result,rawValue:e.getRawValue()}})},setPhoneRegionCode:function(e){var t=this;t.properties.phoneRegionCode=e,t.initPhoneFormatter(),t.onChange()},setRawValue:function(e){var t=this,n=t.properties;e=null!=e?e.toString():"",n.numeral&&(e=e.replace(".",n.numeralDecimalMark)),n.postDelimiterBackspace=!1,t.element.value=e,t.onInput(e)},getRawValue:function(){var e=this.properties,t=h.Util,n=this.element.value;return e.rawValueTrimPrefix&&(n=t.getPrefixStrippedValue(n,e.prefix,e.prefixLength,e.result,e.delimiter,e.delimiters,e.noImmediatePrefix,e.tailPrefix,e.signBeforePrefix)),e.numeral?e.numeralFormatter.getRawValue(n):t.stripDelimiters(n,e.delimiter,e.delimiters)},getISOFormatDate:function(){var e=this.properties;return e.date?e.dateFormatter.getISOFormatDate():""},getISOFormatTime:function(){var e=this.properties;return e.time?e.timeFormatter.getISOFormatTime():""},getFormattedValue:function(){return this.element.value},destroy:function(){var e=this;e.element.removeEventListener("input",e.onChangeListener),e.element.removeEventListener("keydown",e.onKeyDownListener),e.element.removeEventListener("focus",e.onFocusListener),e.element.removeEventListener("cut",e.onCutListener),e.element.removeEventListener("copy",e.onCopyListener)},toString:function(){return"[Cleave Object]"}},h.NumeralFormatter=i,h.DateFormatter=o,h.TimeFormatter=l,h.PhoneFormatter=c,h.CreditCardDetector=_,h.Util=p,h.DefaultProperties=f,("object"==typeof r&&r?r:window).Cleave=h;const g=h},2777:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(1403),u=n(5113),c=s()(a()),m=d()(l.Z),_=d()(u.Z);c.push([e.id,".btn{border-radius:22px;height:26px;padding:4px 0;cursor:pointer;margin:15px 20px 15px 0;position:relative;text-align:center}.btn.btn_border{background-color:#fff;border:1px #bc9cff solid;height:22px;border-width:2px}.btn.btn_border .btn__link{color:#bc9cff}.btn.btn_gradient{background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);color:#ffffff}.btn.btn_gradient.btn_gradient_pay{width:320px}.btn:hover,.btn:focus,.btn.btn_hover{opacity:0.5}.btn .btn__link{color:#ffffff;font-family:'Montserrat', Arial, sans-serif;font-style:normal;font-weight:600;font-size:12px;text-align:center;text-transform:uppercase;text-decoration:none;-webkit-user-select:none}.btn .btn__arrow{position:absolute;bottom:12px;right:15px;content:'';width:20px;height:20px;cursor:pointer;position:absolute;top:13px;right:11px;background-repeat:no-repeat;background-image:url("+m+")}.btn .btn__arrow.btn__arrow_white{background-image:url("+_+")}\n","",{version:3,sources:["webpack://./src/blocks/btn/btn.scss"],names:[],mappings:"AAAA,KACE,kBAAmB,CACnB,WAAY,CACZ,aAAc,CACd,cAAe,CACf,uBAAwB,CACxB,iBAAkB,CAClB,iBAAkB,CAPpB,gBAUI,qBAAsB,CACtB,wBAAyB,CAEzB,WAAY,CACZ,gBAAiB,CAdrB,2BAiBM,aAAc,CAjBpB,kBAsBI,4DAA6D,CAC7D,aAAc,CAvBlB,mCA0BM,WAAY,CA1BlB,qCAiCI,WAAY,CAjChB,gBAqCI,aAAc,CACd,2CAA4C,CAC5C,iBAAkB,CAClB,eAAgB,CAChB,cAAe,CACf,iBAAkB,CAClB,wBAAyB,CACzB,oBAAqB,CACrB,wBAAyB,CA7C7B,iBAiDI,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,2BAA4B,CAC5B,wDAA8C,CA5DlD,kCA+DM,wDAAoD",sourcesContent:[".btn {\r\n  border-radius: 22px;\r\n  height: 26px;\r\n  padding: 4px 0;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  &.btn_border {\r\n    background-color: #fff;\r\n    border: 1px #bc9cff solid;\r\n\r\n    height: 22px;\r\n    border-width: 2px;\r\n\r\n    .btn__link {\r\n      color: #bc9cff;\r\n    }\r\n  }\r\n\r\n  &.btn_gradient {\r\n    background: linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);\r\n    color: #ffffff;\r\n\r\n    &.btn_gradient_pay {\r\n      width: 320px;\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &.btn_hover {\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .btn__link {\r\n    color: #ffffff;\r\n    font-family: 'Montserrat', Arial, sans-serif;\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    -webkit-user-select: none;\r\n  }\r\n\r\n  .btn__arrow {\r\n    position: absolute;\r\n    bottom: 12px;\r\n    right: 15px;\r\n    content: '';\r\n    width: 20px;\r\n    height: 20px;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 13px;\r\n    right: 11px;\r\n    background-repeat: no-repeat;\r\n    background-image: url('@Blocks/btn/arrow.svg');\r\n\r\n    &.btn__arrow_white {\r\n      background-image: url('@Blocks/btn/arrow-white.svg');\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const p=c},6403:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(9048),u=s()(a()),c=d()(l.Z);u.push([e.id,".calendar-block{position:absolute;z-index:100;margin-top:5px;border-radius:4px}.calendar-block.calendar-block_hide{display:none}.calendar-block .calendar{width:322px;z-index:5;border:1px solid rgba(31,32,65,0.25);border-width:1px 1px 0 1px;box-sizing:border-box;box-shadow:0px -20px 20px rgba(31,32,65,0.05);border-radius:4px;background:#fff;left:-1px;margin-left:-1px;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.calendar-block .calendar .pignose-calendar{width:100%;height:auto;border:none;box-shadow:none;background:#fff;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;border-radius:4px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top{border:none;box-shadow:none;background:#fff;padding:0px 0 54px 0;height:20px;display:flex;justify-content:space-between}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav{width:24px;height:24px;margin:19px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon{width:24px;height:24px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-left,.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-right{display:block;background:url("+c+") no-repeat center;width:24px;height:24px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-left{transform:rotate(180deg)}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date{padding:20px 0 30px 0;display:flex;justify-content:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date .pignose-calendar-top-month{font-size:20px;line-height:21px;padding-right:5px;margin:0 2px;text-transform:none;color:#1f2041;font-weight:700;letter-spacing:-1px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date .pignose-calendar-top-year{font-size:20px;line-height:21px;font-weight:700;color:#1f2041;letter-spacing:-2px}.calendar-block .calendar .pignose-calendar .pignose-calendar-header{display:flex;justify-content:space-between;margin:0 20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-header .pignose-calendar-week{font-size:10px;width:38px;height:40px;color:#bc9cff;text-transform:none;display:flex;justify-content:center;align-items:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-body{padding-top:0;margin:0 20px 20px 20px;overflow:hidden}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row a{text-decoration:none}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit{height:40px;width:40px;float:left}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-date a{font-size:12px;color:rgba(31,32,65,0.5);height:40px;width:40px;display:flex;justify-content:center;align-items:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active a{background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);color:#fff}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-first-active{border-radius:50% 0 0 50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-first-active a{border-radius:50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-second-active{border-radius:0 50% 50% 0}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-second-active a{border-radius:50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.active-first,.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.active-second{background:linear-gradient(180deg, #eee6ff 0%, #e6eafe 100%)}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.active-first a,.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.active-second a{background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%)}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-range a{background:linear-gradient(180deg, #eee6ff 0%, #e6eafe 100%);color:rgba(31,32,65,0.5);border-radius:0}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group{display:flex;justify-content:space-between;box-shadow:0px 10px 20px 0px rgba(31,32,65,0.05);border:1px solid rgba(31,32,65,0.25);border-width:0 0 1px 0}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group .pignose-calendar-button{font-family:'Montserrat', Arial, sans-serif;font-style:normal;font-weight:700;font-size:12px;line-height:15px;height:15px;color:#bc9cff;text-transform:uppercase;cursor:pointer;-webkit-user-select:none;text-decoration:none}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group .pignose-calendar-button.pignose-calendar-button-cancel{color:rgba(31,32,65,0.5);margin:0 0 18px 19px;color:#bc9cff}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group .pignose-calendar-button.pignose-calendar-button-apply{color:#bc9cff;margin:0 20px 18px 0}\n","",{version:3,sources:["webpack://./src/blocks/calendar/calendar.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,iBAAkB,CAJpB,oCAOI,YAAa,CAPjB,0BAWI,WAAY,CACZ,SAAU,CACV,oCAAwC,CACxC,0BAA2B,CAC3B,qBAAsB,CACtB,6CAAiD,CACjD,iBAAkB,CAClB,eAAgB,CAChB,SAAU,CAEV,gBAAiB,CACjB,4CAAgD,CAtBpD,4CAyBM,UAAW,CACX,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CACrB,iBAAkB,CAlCxB,kEAqCQ,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,oBAAqB,CACrB,WAAY,CACZ,YAAa,CACb,6BAA8B,CA3CtC,4FA8CU,UAAW,CACX,WAAY,CACZ,WAAY,CAhDtB,uHAmDY,UAAW,CACX,WAAY,CApDxB,+QAwDc,aAAc,CACd,mEAAsE,CACtE,UAAW,CACX,WAAY,CA3D1B,uIA+Dc,wBAAyB,CA/DvC,6FAqEU,qBAAsB,CACtB,YAAa,CACb,sBAAuB,CAvEjC,yHA0EY,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,mBAAoB,CACpB,aAAc,CACd,eAAgB,CAChB,mBAAoB,CAjFhC,wHAqFY,cAAe,CACf,gBAAiB,CACjB,eAAgB,CAChB,aAAc,CACd,mBAAoB,CAzFhC,qEA+FQ,YAAa,CACb,6BAA8B,CAC9B,aAAc,CAjGtB,4FAoGU,cAAe,CACf,UAAW,CACX,WAAY,CACZ,aAAc,CACd,mBAAoB,CACpB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CA3G7B,mEAgHQ,aAAc,CACd,uBAAwB,CACxB,eAAgB,CAlHxB,2FAsHY,oBAAqB,CAtHjC,gHA0HY,WAAY,CACZ,UAAW,CACX,UAAW,CA5HvB,6IAgIgB,cAAe,CACf,wBAA4B,CAC5B,WAAY,CACZ,UAAW,CACX,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CAtInC,+IA4IgB,4DAA6D,CAC7D,UAAW,CA7I3B,gLAiJgB,yBAA0B,CAjJ1C,kLAoJkB,iBAAkB,CApJpC,iLAyJgB,yBAA0B,CAzJ1C,mLA4JkB,iBAAkB,CA5JpC,qTAkKgB,4DAA6D,CAlK7E,yTAqKkB,4DAA6D,CArK/E,8IA4KgB,4DAA6D,CAC7D,wBAA4B,CAC5B,eAAgB,CA9KhC,2EAsLQ,YAAa,CACb,6BAA8B,CAC9B,gDAAoD,CACpD,oCAAwC,CACxC,sBAAuB,CA1L/B,oGA6LU,2CAA4C,CAC5C,iBAAkB,CAClB,eAAgB,CAChB,cAAe,CACf,gBAAiB,CACjB,WAAY,CACZ,aAAc,CACd,wBAAyB,CACzB,cAAe,CACf,wBAAyB,CACzB,oBAAqB,CAvM/B,mIA0MY,wBAA4B,CAC5B,oBAAqB,CACrB,aAAc,CA5M1B,kIAgNY,aAAc,CACd,oBAAqB",sourcesContent:[".calendar-block {\r\n  position: absolute;\r\n  z-index: 100;\r\n  margin-top: 5px;\r\n  border-radius: 4px;\r\n\r\n  &.calendar-block_hide {\r\n    display: none;\r\n  }\r\n\r\n  .calendar {\r\n    width: 322px;\r\n    z-index: 5;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    border-width: 1px 1px 0 1px;\r\n    box-sizing: border-box;\r\n    box-shadow: 0px -20px 20px rgba(31, 32, 65, 0.05);\r\n    border-radius: 4px;\r\n    background: #fff;\r\n    left: -1px;\r\n\r\n    margin-left: -1px;\r\n    box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n    .pignose-calendar {\r\n      width: 100%;\r\n      height: auto;\r\n      border: none;\r\n      box-shadow: none;\r\n      background: #fff;\r\n      user-select: none;\r\n      -moz-user-select: none;\r\n      -webkit-user-select: none;\r\n      -ms-user-select: none;\r\n      border-radius: 4px;\r\n\r\n      .pignose-calendar-top {\r\n        border: none;\r\n        box-shadow: none;\r\n        background: #fff;\r\n        padding: 0px 0 54px 0;\r\n        height: 20px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n\r\n        .pignose-calendar-top-nav {\r\n          width: 24px;\r\n          height: 24px;\r\n          margin: 19px;\r\n\r\n          .pignose-calendar-top-icon {\r\n            width: 24px;\r\n            height: 24px;\r\n\r\n            &.icon-arrow-left,\r\n            &.icon-arrow-right {\r\n              display: block;\r\n              background: url('@Blocks/calendar/arrow_forward.svg') no-repeat center;\r\n              width: 24px;\r\n              height: 24px;\r\n            }\r\n\r\n            &.icon-arrow-left {\r\n              transform: rotate(180deg);\r\n            }\r\n          }\r\n        }\r\n\r\n        .pignose-calendar-top-date {\r\n          padding: 20px 0 30px 0;\r\n          display: flex;\r\n          justify-content: center;\r\n\r\n          .pignose-calendar-top-month {\r\n            font-size: 20px;\r\n            line-height: 21px;\r\n            padding-right: 5px;\r\n            margin: 0 2px;\r\n            text-transform: none;\r\n            color: #1f2041;\r\n            font-weight: 700;\r\n            letter-spacing: -1px;\r\n          }\r\n\r\n          .pignose-calendar-top-year {\r\n            font-size: 20px;\r\n            line-height: 21px;\r\n            font-weight: 700;\r\n            color: #1f2041;\r\n            letter-spacing: -2px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-header {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 0 20px;\r\n\r\n        .pignose-calendar-week {\r\n          font-size: 10px;\r\n          width: 38px;\r\n          height: 40px;\r\n          color: #bc9cff;\r\n          text-transform: none;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-body {\r\n        padding-top: 0;\r\n        margin: 0 20px 20px 20px;\r\n        overflow: hidden;\r\n\r\n        .pignose-calendar-row {\r\n          a {\r\n            text-decoration: none;\r\n          }\r\n\r\n          .pignose-calendar-unit {\r\n            height: 40px;\r\n            width: 40px;\r\n            float: left;\r\n\r\n            &.pignose-calendar-unit-date {\r\n              a {\r\n                font-size: 12px;\r\n                color: rgba(31, 32, 65, 0.5);\r\n                height: 40px;\r\n                width: 40px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n              }\r\n            }\r\n\r\n            &.pignose-calendar-unit-active {\r\n              a {\r\n                background: linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);\r\n                color: #fff;\r\n              }\r\n\r\n              &.pignose-calendar-unit-first-active {\r\n                border-radius: 50% 0 0 50%;\r\n\r\n                a {\r\n                  border-radius: 50%;\r\n                }\r\n              }\r\n\r\n              &.pignose-calendar-unit-second-active {\r\n                border-radius: 0 50% 50% 0;\r\n\r\n                a {\r\n                  border-radius: 50%;\r\n                }\r\n              }\r\n\r\n              &.active-first,\r\n              &.active-second {\r\n                background: linear-gradient(180deg, #eee6ff 0%, #e6eafe 100%);\r\n\r\n                a {\r\n                  background: linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);\r\n                }\r\n              }\r\n            }\r\n\r\n            &.pignose-calendar-unit-range {\r\n              a {\r\n                background: linear-gradient(180deg, #eee6ff 0%, #e6eafe 100%);\r\n                color: rgba(31, 32, 65, 0.5);\r\n                border-radius: 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-button-group {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        box-shadow: 0px 10px 20px 0px rgba(31, 32, 65, 0.05);\r\n        border: 1px solid rgba(31, 32, 65, 0.25);\r\n        border-width: 0 0 1px 0;\r\n\r\n        .pignose-calendar-button {\r\n          font-family: 'Montserrat', Arial, sans-serif;\r\n          font-style: normal;\r\n          font-weight: 700;\r\n          font-size: 12px;\r\n          line-height: 15px;\r\n          height: 15px;\r\n          color: #bc9cff;\r\n          text-transform: uppercase;\r\n          cursor: pointer;\r\n          -webkit-user-select: none;\r\n          text-decoration: none;\r\n\r\n          &.pignose-calendar-button-cancel {\r\n            color: rgba(31, 32, 65, 0.5);\r\n            margin: 0 0 18px 19px;\r\n            color: #bc9cff;\r\n          }\r\n\r\n          &.pignose-calendar-button-apply {\r\n            color: #bc9cff;\r\n            margin: 0 20px 18px 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const m=u},6114:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".checkbox-list-expandable{margin:50px 0 17px 0}.checkbox-list-expandable .checkbox-list-expandable__topicBlock{position:relative;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.checkbox-list-expandable .checkbox-list-expandable__topicBlock .checkbox-list-expandable__expand{width:12px;height:10px;position:absolute;bottom:2px;right:15px;cursor:pointer}.checkbox-list-expandable .checkbox-list-expandable__topicBlock .checkbox-list-expandable__expand.checkbox-list-expandable__expand_open{transform:rotate(180deg)}.checkbox-list-expandable .checkbox-list-expandable__topicBlock h3{margin:0;cursor:pointer;font-size:12px;letter-spacing:-0.1px}.checkbox-list-expandable .checkbox-list .checkbox-list__label:before{left:0;top:0}.checkbox-list-expandable .checkbox-list .checkbox-list__input:checked+.checkbox-list__label:after{top:4px}\n","",{version:3,sources:["webpack://./src/blocks/checkbox-list-expandable/checkbox-list-expandable.scss"],names:[],mappings:"AAAA,0BACE,oBAAqB,CADvB,gEAII,iBAAkB,CAClB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CARzB,kGAWM,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,UAAW,CACX,UAAW,CACX,cAAe,CAhBrB,wIAmBQ,wBAAyB,CAnBjC,mEAwBM,QAAS,CACT,cAAe,CACf,cAAe,CACf,qBAAsB,CA3B5B,sEAkCQ,MAAO,CACP,KAAM,CAnCd,mGA0CU,OAAQ",sourcesContent:[".checkbox-list-expandable {\r\n  margin: 50px 0 17px 0;\r\n\r\n  .checkbox-list-expandable__topicBlock {\r\n    position: relative;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n\r\n    .checkbox-list-expandable__expand {\r\n      width: 12px;\r\n      height: 10px;\r\n      position: absolute;\r\n      bottom: 2px;\r\n      right: 15px;\r\n      cursor: pointer;\r\n\r\n      &.checkbox-list-expandable__expand_open {\r\n        transform: rotate(180deg);\r\n      }\r\n    }\r\n\r\n    h3 {\r\n      margin: 0;\r\n      cursor: pointer;\r\n      font-size: 12px;\r\n      letter-spacing: -0.1px;\r\n    }\r\n  }\r\n\r\n  .checkbox-list {\r\n    .checkbox-list__label {\r\n      &:before {\r\n        left: 0;\r\n        top: 0;\r\n      }\r\n    }\r\n\r\n    .checkbox-list__input {\r\n      &:checked + .checkbox-list__label {\r\n        &:after {\r\n          top: 4px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},698:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".checkbox-list{margin-top:14px;width:230px}.checkbox-list.checkbox-list_hide{display:none}.checkbox-list .checkbox-list__item .checkbox-list__input{display:none}.checkbox-list .checkbox-list__item .checkbox-list__input:checked+.checkbox-list__label:after{content:'';position:absolute;width:4px;height:6px;border-style:solid;border-width:0 2px 2px 0;border-color:#bc9cff;transform:rotate(45deg);left:7px;top:6px}.checkbox-list .checkbox-list__item .checkbox-list__input:checked+.checkbox-list__label:before{border-color:#bc9cff}.checkbox-list .checkbox-list__item .checkbox-list__label{display:inline-block;cursor:pointer;position:relative;padding:2px 0 10px 30px;font-size:14px;line-height:18px;color:rgba(31,32,65,0.5);width:auto;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.checkbox-list .checkbox-list__item .checkbox-list__label:before{content:'';display:inline-block;position:absolute;left:1px;top:1px;background-color:#fff;width:20px;height:20px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:4px}.checkbox-list .checkbox-list__item .checkbox-list__label.checkbox-list__label_bold{color:rgba(31,32,65,0.75);font-weight:700;font-size:14.5px;line-height:18px;white-space:nowrap;letter-spacing:-0.5px}.checkbox-list .checkbox-list__item p{padding-left:30px;color:rgba(31,32,65,0.5);font-size:12px;line-height:14px;margin:-4px 0 7px 0}.checkbox-list .checkbox-list__item p.checkbox-list__p_width200{width:200px}.checkbox-list .checkbox-list__item p.checkbox-list__p_width225{width:225px}\n","",{version:3,sources:["webpack://./src/blocks/checkbox-list/checkbox-list.scss"],names:[],mappings:"AAAA,eACE,eAAgB,CAChB,WAAY,CAFd,kCAKI,YAAa,CALjB,0DAUM,YAAa,CAVnB,8FAcU,UAAW,CACX,iBAAkB,CAClB,SAAU,CACV,UAAW,CACX,kBAAmB,CACnB,wBAAyB,CACzB,oBAAqB,CACrB,uBAAwB,CACxB,QAAS,CACT,OAAQ,CAvBlB,+FA2BU,oBAAqB,CA3B/B,0DAiCM,oBAAqB,CACrB,cAAe,CACf,iBAAkB,CAClB,uBAAwB,CACxB,cAAe,CACf,gBAAiB,CACjB,wBAA4B,CAC5B,UAAW,CACX,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CA5C3B,iEA+CQ,UAAW,CACX,oBAAqB,CACrB,iBAAkB,CAClB,QAAS,CACT,OAAQ,CACR,qBAAsB,CACtB,UAAW,CACX,WAAY,CACZ,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAzD1B,oFA6DQ,yBAA6B,CAC7B,eAAgB,CAChB,gBAAiB,CACjB,gBAAiB,CACjB,kBAAmB,CACnB,qBAAsB,CAlE9B,sCAuEM,iBAAkB,CAClB,wBAA4B,CAC5B,cAAe,CACf,gBAAiB,CACjB,mBAAoB,CA3E1B,gEA8EQ,WAAY,CA9EpB,gEAkFQ,WAAY",sourcesContent:[".checkbox-list {\r\n  margin-top: 14px;\r\n  width: 230px;\r\n\r\n  &.checkbox-list_hide {\r\n    display: none;\r\n  }\r\n\r\n  .checkbox-list__item {\r\n    .checkbox-list__input {\r\n      display: none;\r\n\r\n      &:checked + .checkbox-list__label {\r\n        &:after {\r\n          content: '';\r\n          position: absolute;\r\n          width: 4px;\r\n          height: 6px;\r\n          border-style: solid;\r\n          border-width: 0 2px 2px 0;\r\n          border-color: #bc9cff;\r\n          transform: rotate(45deg);\r\n          left: 7px;\r\n          top: 6px;\r\n        }\r\n\r\n        &:before {\r\n          border-color: #bc9cff;\r\n        }\r\n      }\r\n    }\r\n\r\n    .checkbox-list__label {\r\n      display: inline-block;\r\n      cursor: pointer;\r\n      position: relative;\r\n      padding: 2px 0 10px 30px;\r\n      font-size: 14px;\r\n      line-height: 18px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      width: auto;\r\n      user-select: none;\r\n      -moz-user-select: none;\r\n      -webkit-user-select: none;\r\n      -ms-user-select: none;\r\n\r\n      &:before {\r\n        content: '';\r\n        display: inline-block;\r\n        position: absolute;\r\n        left: 1px;\r\n        top: 1px;\r\n        background-color: #fff;\r\n        width: 20px;\r\n        height: 20px;\r\n        border: 1px solid rgba(31, 32, 65, 0.25);\r\n        box-sizing: border-box;\r\n        border-radius: 4px;\r\n      }\r\n\r\n      &.checkbox-list__label_bold {\r\n        color: rgba(31, 32, 65, 0.75);\r\n        font-weight: 700;\r\n        font-size: 14.5px;\r\n        line-height: 18px;\r\n        white-space: nowrap;\r\n        letter-spacing: -0.5px;\r\n      }\r\n    }\r\n\r\n    p {\r\n      padding-left: 30px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      font-size: 12px;\r\n      line-height: 14px;\r\n      margin: -4px 0 7px 0;\r\n\r\n      &.checkbox-list__p_width200 {\r\n        width: 200px;\r\n      }\r\n\r\n      &.checkbox-list__p_width225 {\r\n        width: 225px;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},1169:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".comment-block{width:100%;margin:13px 0 33px 0}.comment-block .comment-block__title{display:flex;justify-content:space-between;margin:0;height:22px}.comment-block .comment-block__title h2{line-height:21px}.comment-block .comment-block__title p{margin:0 44px 0 0}.comment-block .comment-block__comment{margin:23px 0}.comment-block .comment-block__comment:last-child{margin-bottom:0}.comment-block .comment-block__comment .comment-block__person{display:flex;flex-direction:row;align-items:flex-start}.comment-block .comment-block__comment .comment-block__person .comment-block__photo{width:48px;height:48px;margin-bottom:10px;width:44px;height:44px;border-radius:50%;border:2px solid #ffffff;filter:drop-shadow(0px 10px 20px rgba(31,32,65,0.1))}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time{display:flex;flex-direction:column;margin-left:10px}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time .comment-block__name{font-weight:700;margin:0;letter-spacing:-0.2px}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time .comment-block__time{margin-bottom:12px;margin:0}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time p{font-size:14px}.comment-block .comment-block__comment .comment-block__comment-text{display:flex}.comment-block .comment-block__comment .comment-block__comment-text .like{margin:2px 0 0 3px}.comment-block .comment-block__comment .comment-block__comment-text .comment-block__text{margin:0;margin-left:15px}.comment-block .comment-block__comment .comment-block__comment-text p{width:86.5%;font-size:14px}\n","",{version:3,sources:["webpack://./src/blocks/comment-block/comment-block.scss"],names:[],mappings:"AAAA,eACE,UAAW,CACX,oBAAqB,CAFvB,qCAKI,YAAa,CACb,6BAA8B,CAC9B,QAAS,CACT,WAAY,CARhB,wCAWM,gBAAiB,CAXvB,uCAeM,iBAAkB,CAfxB,uCAoBI,aAAc,CApBlB,kDAuBM,eAAgB,CAvBtB,8DA2BM,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CA7B7B,oFAgCQ,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,wBAAyB,CACzB,oDAAwD,CAvChE,wFA2CQ,YAAa,CACb,qBAAsB,CACtB,gBAAiB,CA7CzB,6GAgDU,eAAgB,CAChB,QAAS,CACT,qBAAsB,CAlDhC,6GAsDU,kBAAmB,CACnB,QAAS,CAvDnB,0FA2DU,cAAe,CA3DzB,oEAiEM,YAAa,CAjEnB,0EAoEQ,kBAAmB,CApE3B,yFAwEQ,QAAS,CACT,gBAAiB,CAzEzB,sEA6EQ,WAAY,CACZ,cAAe",sourcesContent:[".comment-block {\r\n  width: 100%;\r\n  margin: 13px 0 33px 0;\r\n\r\n  .comment-block__title {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 0;\r\n    height: 22px;\r\n\r\n    h2 {\r\n      line-height: 21px;\r\n    }\r\n\r\n    p {\r\n      margin: 0 44px 0 0;\r\n    }\r\n  }\r\n\r\n  .comment-block__comment {\r\n    margin: 23px 0;\r\n\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n\r\n    .comment-block__person {\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: flex-start;\r\n\r\n      .comment-block__photo {\r\n        width: 48px;\r\n        height: 48px;\r\n        margin-bottom: 10px;\r\n        width: 44px;\r\n        height: 44px;\r\n        border-radius: 50%;\r\n        border: 2px solid #ffffff;\r\n        filter: drop-shadow(0px 10px 20px rgba(31, 32, 65, 0.1));\r\n      }\r\n\r\n      .comment-block__name-time {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-left: 10px;\r\n\r\n        .comment-block__name {\r\n          font-weight: 700;\r\n          margin: 0;\r\n          letter-spacing: -0.2px;\r\n        }\r\n\r\n        .comment-block__time {\r\n          margin-bottom: 12px;\r\n          margin: 0;\r\n        }\r\n\r\n        p {\r\n          font-size: 14px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .comment-block__comment-text {\r\n      display: flex;\r\n\r\n      .like {\r\n        margin: 2px 0 0 3px;\r\n      }\r\n\r\n      .comment-block__text {\r\n        margin: 0;\r\n        margin-left: 15px;\r\n      }\r\n\r\n      p {\r\n        width: 86.5%;\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},3353:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(783),u=s()(a()),c=d()(l.Z);u.push([e.id,".dropdown-block{position:relative;width:100%}.dropdown-block .dropdown-block__dropdown{position:relative;color:rgba(31,32,65,0.75);border-radius:4px;width:100%;cursor:pointer;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;height:44px;padding:8px 14px 8px 15px;margin-top:5px;font-family:'Montserrat', Arial, sans-serif;font-weight:normal;font-style:normal;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.dropdown-block .dropdown-block__dropdown:hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_date{width:150px;-webkit-appearance:none;font-size:14px;font-weight:500;letter-spacing:0;padding:8px 14px}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_date:before{width:15px;height:11px;bottom:14px;right:11px}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_items-show{border:1px solid rgba(31,32,65,0.5);border-radius:4px 4px 0 0}.dropdown-block .dropdown-block__dropdown::before{content:'';width:14px;height:11px;position:absolute;bottom:15px;right:12px;cursor:pointer;-webkit-user-select:none;background-image:url("+c+");background-repeat:no-repeat}.dropdown-block .dropdown-block__dropdown-items{display:flex;flex-wrap:wrap;background:#fff;border-radius:0 0 4px 4px;border:1px solid rgba(31,32,65,0.5);margin-top:-1px;z-index:1;position:absolute}.dropdown-block .dropdown-block__dropdown-items.dropdown-block__dropdown-items_hide{display:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{display:flex;justify-content:space-between;color:rgba(31,32,65,0.5);margin-top:-1px;width:100%;height:40px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3{padding:13px 15px;margin:0;letter-spacing:-0.5px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns span{color:#1f2041}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty{display:flex;justify-content:space-between;align-items:center;width:92px;margin-right:7px;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus{border:1px solid rgba(31,32,65,0.25);border-radius:50%;width:30px;height:30px;font-size:20px;display:flex;justify-content:center;box-sizing:border-box;padding-top:2px;cursor:pointer}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable{cursor:default;border-color:rgba(31,32,65,0.15);color:rgba(31,32,65,0.15)}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty span{font-weight:700}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_clean,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_clean{margin:auto 15px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_ok,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_ok{margin:auto 7px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{height:48px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns.dropdown-block__btns_flex-end{justify-content:flex-end}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns.dropdown-block__btns_flex-end>.link_clean{display:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_clean{margin:21px 0 0 14px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_ok{margin:21px 7px 0 0}.dropdown-dates{width:100%}.dropdown-dates .dropdown-dates__dates{display:flex;justify-content:space-between}.dropdown-dates .dropdown-dates__dates .dropdown-block{width:auto}.dropdown-dates .dropdown-dates__dates .dropdown-block .dropdown-block__dropdown_items-show{border-radius:4px}\n","",{version:3,sources:["webpack://./src/blocks/dropdown/dropdown.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,UAAW,CAFb,0CAKI,iBAAkB,CAClB,yBAA6B,CAC7B,iBAAkB,CAClB,UAAW,CACX,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,WAAY,CACZ,yBAA0B,CAC1B,cAAe,CACf,2CAA4C,CAC5C,kBAAmB,CACnB,iBAAkB,CAClB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CArBzB,gDAwBM,yBAA6B,CAC7B,mCAAuC,CAzB7C,wEA6BM,WAAY,CACZ,uBAAwB,CACxB,cAAe,CACf,eAAgB,CAChB,gBAAiB,CACjB,gBAAiB,CAlCvB,+EAqCQ,UAAW,CACX,WAAY,CACZ,WAAY,CACZ,UAAW,CAxCnB,8EA6CM,mCAAuC,CACvC,yBAA0B,CA9ChC,kDAkDM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,cAAe,CACf,wBAAyB,CACzB,wDAAyD,CACzD,2BAA4B,CA3DlC,gDAgEI,YAAa,CACb,cAAe,CACf,eAAgB,CAChB,yBAA0B,CAC1B,mCAAuC,CACvC,eAAgB,CAChB,SAAU,CACV,iBAAkB,CAvEtB,oFA0EM,YAAa,CA1EnB,kJA+EM,YAAa,CACb,6BAA8B,CAC9B,wBAA4B,CAC5B,eAAgB,CAChB,UAAW,CACX,WAAY,CApFlB,wJAuFQ,iBAAkB,CAClB,QAAS,CACT,qBAAsB,CAzF9B,oTA8FQ,aAA0B,CA9FlC,wMAkGQ,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,UAAW,CACX,gBAAiB,CACjB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CA1G7B,0gBA8GU,oCAAwC,CACxC,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,cAAe,CACf,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CACtB,eAAgB,CAChB,cAAe,CAvHzB,0oBA0HY,cAAe,CACf,gCAAoC,CACpC,yBAA6B,CA5HzC,kNAiIU,eAAgB,CAjI1B,oLAuIU,gBAAiB,CAvI3B,8KA2IU,eAAgB,CA3I1B,sEAiJM,WAAY,CAjJlB,oGAoJQ,wBAAyB,CApJjC,gHAuJU,YAAa,CAvJvB,kFA4JQ,oBAAqB,CA5J7B,+EAgKQ,mBAAoB,CACrB,gBAML,UAAW,CADb,uCAII,YAAa,CACb,6BAA8B,CALlC,uDAQM,UAAW,CARjB,4FAWQ,iBAAkB",sourcesContent:[".dropdown-block {\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  .dropdown-block__dropdown {\r\n    position: relative;\r\n    color: rgba(31, 32, 65, 0.75);\r\n    border-radius: 4px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    height: 44px;\r\n    padding: 8px 14px 8px 15px;\r\n    margin-top: 5px;\r\n    font-family: 'Montserrat', Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n\r\n    &:hover {\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n\r\n    &.dropdown-block__dropdown_date {\r\n      width: 150px;\r\n      -webkit-appearance: none;\r\n      font-size: 14px;\r\n      font-weight: 500;\r\n      letter-spacing: 0;\r\n      padding: 8px 14px;\r\n\r\n      &:before {\r\n        width: 15px;\r\n        height: 11px;\r\n        bottom: 14px;\r\n        right: 11px;\r\n      }\r\n    }\r\n\r\n    &.dropdown-block__dropdown_items-show {\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      border-radius: 4px 4px 0 0;\r\n    }\r\n\r\n    &::before {\r\n      content: '';\r\n      width: 14px;\r\n      height: 11px;\r\n      position: absolute;\r\n      bottom: 15px;\r\n      right: 12px;\r\n      cursor: pointer;\r\n      -webkit-user-select: none;\r\n      background-image: url('@Blocks/dropdown/expand-more.svg');\r\n      background-repeat: no-repeat;\r\n    }\r\n  }\r\n\r\n  .dropdown-block__dropdown-items {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    background: #fff;\r\n    border-radius: 0 0 4px 4px;\r\n    border: 1px solid rgba(31, 32, 65, 0.5);\r\n    margin-top: -1px;\r\n    z-index: 1;\r\n    position: absolute;\r\n\r\n    &.dropdown-block__dropdown-items_hide {\r\n      display: none;\r\n    }\r\n\r\n    .dropdown-block__items-line,\r\n    .dropdown-block__btns {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      margin-top: -1px;\r\n      width: 100%;\r\n      height: 40px;\r\n\r\n      h3 {\r\n        padding: 13px 15px;\r\n        margin: 0;\r\n        letter-spacing: -0.5px;\r\n      }\r\n\r\n      h3,\r\n      span {\r\n        color: rgba(31, 32, 65, 1);\r\n      }\r\n\r\n      .dropdown-block__block-qty {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 92px;\r\n        margin-right: 7px;\r\n        user-select: none;\r\n        -moz-user-select: none;\r\n        -webkit-user-select: none;\r\n        -ms-user-select: none;\r\n\r\n        .dropdown-block__inc-qty-minus,\r\n        .dropdown-block__inc-qty-plus {\r\n          border: 1px solid rgba(31, 32, 65, 0.25);\r\n          border-radius: 50%;\r\n          width: 30px;\r\n          height: 30px;\r\n          font-size: 20px;\r\n          display: flex;\r\n          justify-content: center;\r\n          box-sizing: border-box;\r\n          padding-top: 2px;\r\n          cursor: pointer;\r\n\r\n          &.dropdown-block__inc-qty_disable {\r\n            cursor: default;\r\n            border-color: rgba(31, 32, 65, 0.15);\r\n            color: rgba(31, 32, 65, 0.15);\r\n          }\r\n        }\r\n\r\n        span {\r\n          font-weight: 700;\r\n        }\r\n      }\r\n\r\n      .link {\r\n        &.link_clean {\r\n          margin: auto 15px;\r\n        }\r\n\r\n        &.link_ok {\r\n          margin: auto 7px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .dropdown-block__btns {\r\n      height: 48px;\r\n\r\n      &.dropdown-block__btns_flex-end {\r\n        justify-content: flex-end;\r\n\r\n        > .link_clean {\r\n          display: none;\r\n        }\r\n      }\r\n\r\n      .link_clean {\r\n        margin: 21px 0 0 14px;\r\n      }\r\n\r\n      .link_ok {\r\n        margin: 21px 7px 0 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-dates {\r\n  width: 100%;\r\n\r\n  .dropdown-dates__dates {\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .dropdown-block {\r\n      width: auto;\r\n\r\n      .dropdown-block__dropdown_items-show {\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const m=u},6498:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".info-block{min-width:280px;margin-right:10.7%}.info-block .info-block__item{display:flex;flex-wrap:wrap;margin:21px 0 22px}.info-block .info-block__item .info-block__icon.info-block__icon_emoticon{width:40px;height:40px;margin:2px 14px 2px 4px}.info-block .info-block__item .info-block__icon.info-block__icon_city{width:38px;height:38px;margin:2px 15px 2px 5px}.info-block .info-block__item .info-block__icon.info-block__icon_whatshot{width:44px;height:44px;margin:2px 12px 2px 2px}.info-block .info-block__item .info-block__text{display:flex;flex-direction:column;justify-content:space-between}.info-block .info-block__item .info-block__text p{margin:0;font-size:14px;line-height:20px}.info-block .info-block__hr{width:100%;margin:0;border:0.5px solid rgba(31,32,65,0.1)}\n","",{version:3,sources:["webpack://./src/blocks/info-block/info-block.scss"],names:[],mappings:"AAAA,YACE,eAAgB,CAChB,kBAAmB,CAFrB,8BAKI,YAAa,CACb,cAAe,CACf,kBAAmB,CAPvB,0EAWQ,UAAW,CACX,WAAY,CACZ,uBAAwB,CAbhC,sEAiBQ,UAAW,CACX,WAAY,CACZ,uBAAwB,CAnBhC,0EAuBQ,UAAW,CACX,WAAY,CACZ,uBAAwB,CAzBhC,gDA8BM,YAAa,CACb,qBAAsB,CACtB,6BAA8B,CAhCpC,kDAmCQ,QAAS,CACT,cAAe,CACf,gBAAiB,CArCzB,4BA2CI,UAAW,CACX,QAAS,CACT,qCAAyC",sourcesContent:[".info-block {\r\n  min-width: 280px;\r\n  margin-right: 10.7%;\r\n\r\n  .info-block__item {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin: 21px 0 22px;\r\n\r\n    .info-block__icon {\r\n      &.info-block__icon_emoticon {\r\n        width: 40px;\r\n        height: 40px;\r\n        margin: 2px 14px 2px 4px;\r\n      }\r\n\r\n      &.info-block__icon_city {\r\n        width: 38px;\r\n        height: 38px;\r\n        margin: 2px 15px 2px 5px;\r\n      }\r\n\r\n      &.info-block__icon_whatshot {\r\n        width: 44px;\r\n        height: 44px;\r\n        margin: 2px 12px 2px 2px;\r\n      }\r\n    }\r\n\r\n    .info-block__text {\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: space-between;\r\n\r\n      p {\r\n        margin: 0;\r\n        font-size: 14px;\r\n        line-height: 20px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .info-block__hr {\r\n    width: 100%;\r\n    margin: 0;\r\n    border: 0.5px solid rgba(31, 32, 65, 0.1);\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},6263:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(1932),u=s()(a()),c=d()(l.Z);u.push([e.id,".input-text{position:relative;width:100%}.input-text.input-text_subscription{margin-top:10px}.input-text.input-text_subscription .input-text__input{letter-spacing:0}.input-text.input-text_subscription:after{content:'';width:20px;height:20px;cursor:pointer;position:absolute;bottom:11px;right:11px;background-repeat:no-repeat;background-image:url("+c+")}.input-text .input-text__input{width:100%;color:#1f2041;outline:none;font-size:14px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:4px;height:44px;padding:8px 14px;margin-top:5px;font-family:'Montserrat', Arial, sans-serif;font-weight:normal;font-style:normal;letter-spacing:0.5px}.input-text .input-text__input:hover,.input-text .input-text__input:focus,.input-text .input-text__input.input-text__input_hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5);font-weight:600;font-size:14px;letter-spacing:-0.5px;padding:8px 15px 10px 15px}.input-text .input-text__input.input-text__input_date{padding:5px 14px 8px 14px;letter-spacing:0.1px}.input-text ::-webkit-input-placeholder{color:rgba(31,32,65,0.25)}.input-text :-ms-input-placeholder{color:rgba(31,32,65,0.25)}.input-text ::-moz-placeholder{color:rgba(31,32,65,0.25)}.input-text :-moz-placeholder{color:rgba(31,32,65,0.25)}\n","",{version:3,sources:["webpack://./src/blocks/input-text/input-text.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CAClB,UAAW,CAFb,oCAKI,eAAgB,CALpB,uDAQM,gBAAiB,CARvB,0CAYM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,2BAA4B,CAC5B,wDAAqD,CApB3D,+BAyBI,UAAW,CACX,aAA0B,CAC1B,YAAa,CACb,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,2CAA4C,CAC5C,kBAAmB,CACnB,iBAAkB,CAClB,oBAAqB,CAtCzB,iIA2CM,yBAA6B,CAC7B,mCAAuC,CACvC,eAAgB,CAChB,cAAe,CACf,qBAAsB,CACtB,0BAA2B,CAhDjC,sDAoDM,yBAA0B,CAC1B,oBAAqB,CArD3B,wCA2DI,yBAA6B,CA3DjC,mCA+DI,yBAA6B,CA/DjC,+BAmEI,yBAA6B,CAnEjC,8BAuEI,yBAA6B",sourcesContent:[".input-text {\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  &.input-text_subscription {\r\n    margin-top: 10px;\r\n\r\n    .input-text__input {\r\n      letter-spacing: 0;\r\n    }\r\n\r\n    &:after {\r\n      content: '';\r\n      width: 20px;\r\n      height: 20px;\r\n      cursor: pointer;\r\n      position: absolute;\r\n      bottom: 11px;\r\n      right: 11px;\r\n      background-repeat: no-repeat;\r\n      background-image: url('@Blocks/input-text/arrow.svg');\r\n    }\r\n  }\r\n\r\n  .input-text__input {\r\n    width: 100%;\r\n    color: rgba(31, 32, 65, 1);\r\n    outline: none;\r\n    font-size: 14px;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: 'Montserrat', Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;\r\n    letter-spacing: 0.5px;\r\n\r\n    &:hover,\r\n    &:focus,\r\n    &.input-text__input_hover {\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      font-weight: 600;\r\n      font-size: 14px;\r\n      letter-spacing: -0.5px;\r\n      padding: 8px 15px 10px 15px;\r\n    }\r\n\r\n    &.input-text__input_date {\r\n      padding: 5px 14px 8px 14px;\r\n      letter-spacing: 0.1px;\r\n    }\r\n  }\r\n\r\n  ::-webkit-input-placeholder {\r\n    /* Chrome */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-ms-input-placeholder {\r\n    /* IE 10+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  ::-moz-placeholder {\r\n    /* Firefox 19+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-moz-placeholder {\r\n    /* Firefox 4 - 18 */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n}\r\n"],sourceRoot:""}]);const m=u},8622:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(1694),u=n(7055),c=s()(a()),m=d()(l.Z),_=d()(u.Z);c.push([e.id,".like{display:flex;justify-content:space-between;width:38px;height:18px;border-radius:10px;border:1px solid rgba(31,32,65,0.25);margin:15px 10px 0 0;cursor:pointer}.like.like_liked{border-color:#bc9cff}.like .like__ico{width:10px;height:10px;margin:4px 0 5px 4px;cursor:pointer;background-image:url("+m+");background-repeat:no-repeat;background-position:50%;background-size:contain}.like .like__ico.like__ico_liked{background-image:url("+_+")}.like .like__sum{margin:4px 10px 5px 0;font-size:9.6px;display:flex;align-items:center;color:rgba(31,32,65,0.25);cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.like .like__sum.like__sum_liked{color:#bc9cff}\n","",{version:3,sources:["webpack://./src/blocks/like/like.scss"],names:[],mappings:"AAAA,MACE,YAAa,CACb,6BAA8B,CAC9B,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,oCAAwC,CACxC,oBAAqB,CACrB,cAAe,CARjB,iBAWI,oBAAqB,CAXzB,iBAeI,UAAW,CACX,WAAY,CACZ,oBAAqB,CACrB,cAAe,CACf,wDAA4C,CAC5C,2BAA4B,CAC5B,uBAAwB,CACxB,uBAAwB,CAtB5B,iCAyBM,wDAAqC,CAzB3C,iBA8BI,qBAAsB,CACtB,eAAgB,CAChB,YAAa,CACb,kBAAmB,CACnB,yBAA6B,CAC7B,cAAe,CACf,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CAvCzB,iCA0CM,aAAc",sourcesContent:[".like {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 38px;\r\n  height: 18px;\r\n  border-radius: 10px;\r\n  border: 1px solid rgba(31, 32, 65, 0.25);\r\n  margin: 15px 10px 0 0;\r\n  cursor: pointer;\r\n\r\n  &.like_liked {\r\n    border-color: #bc9cff;\r\n  }\r\n\r\n  .like__ico {\r\n    width: 10px;\r\n    height: 10px;\r\n    margin: 4px 0 5px 4px;\r\n    cursor: pointer;\r\n    background-image: url('favorite_border.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: 50%;\r\n    background-size: contain;\r\n\r\n    &.like__ico_liked {\r\n      background-image: url('favorite.svg');\r\n    }\r\n  }\r\n\r\n  .like__sum {\r\n    margin: 4px 10px 5px 0;\r\n    font-size: 9.6px;\r\n    display: flex;\r\n    align-items: center;\r\n    color: rgba(31, 32, 65, 0.25);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n\r\n    &.like__sum_liked {\r\n      color: #bc9cff;\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const p=c},8236:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".link{font-family:'Montserrat', Arial, sans-serif;font-style:normal;font-weight:600;font-size:12px;line-height:15px;height:15px;color:#bc9cff;text-transform:uppercase;cursor:pointer;margin:15px 20px 15px 0;-webkit-user-select:none;text-decoration:none}.link.link_clean{color:rgba(31,32,65,0.5)}.link.link_lux{margin:0 0 0 3px}.link:hover{text-decoration:underline}\n","",{version:3,sources:["webpack://./src/blocks/link/link.scss"],names:[],mappings:"AAAA,MACE,2CAA4C,CAC5C,iBAAkB,CAClB,eAAgB,CAChB,cAAe,CACf,gBAAiB,CACjB,WAAY,CACZ,aAAc,CACd,wBAAyB,CACzB,cAAe,CACf,uBAAwB,CACxB,wBAAyB,CACzB,oBAAqB,CAZvB,iBAeI,wBAA4B,CAfhC,eAmBI,gBAAiB,CAnBrB,YAuBI,yBAA0B",sourcesContent:[".link {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  height: 15px;\r\n  color: #bc9cff;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  -webkit-user-select: none;\r\n  text-decoration: none;\r\n\r\n  &.link_clean {\r\n    color: rgba(31, 32, 65, 0.5);\r\n  }\r\n\r\n  &.link_lux {\r\n    margin: 0 0 0 3px;\r\n  }\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},9402:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".list-block{width:361px}.list-block .list-block__list{margin:0;padding:0}.list-block .list-block__item{position:relative;margin:10px 0;display:flex}.list-block .list-block__item .list-block__point{width:10px;height:10px;border-radius:50%;margin:7px 10px 7px 0;background:rgba(31,32,65,0.25)}.list-block .list-block__item p{width:240px;margin:0}\n","",{version:3,sources:["webpack://./src/blocks/list-block/list-block.scss"],names:[],mappings:"AAAA,YACE,WAAY,CADd,8BAII,QAAS,CACT,SAAU,CALd,8BASI,iBAAkB,CAClB,aAAc,CACd,YAAa,CAXjB,iDAcM,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,qBAAsB,CACtB,8BAAkC,CAlBxC,gCAsBM,WAAY,CACZ,QAAS",sourcesContent:[".list-block {\r\n  width: 361px;\r\n\r\n  .list-block__list {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  .list-block__item {\r\n    position: relative;\r\n    margin: 10px 0;\r\n    display: flex;\r\n\r\n    .list-block__point {\r\n      width: 10px;\r\n      height: 10px;\r\n      border-radius: 50%;\r\n      margin: 7px 10px 7px 0;\r\n      background: rgba(31, 32, 65, 0.25);\r\n    }\r\n\r\n    p {\r\n      width: 240px;\r\n      margin: 0;\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},1798:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(6580),u=s()(a()),c=d()(l.Z);u.push([e.id,".pagination{width:100%;margin:30px 0 10px 0}.pagination .pagination__num-block{width:100%;display:flex;justify-content:center;margin:10px 0 9px}.pagination .pagination__num-block .pagination__num{width:40px;height:40px;color:rgba(31,32,65,0.5);font-size:11.5px;font-weight:500;border-radius:50%;display:flex;justify-content:center;align-items:center;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.pagination .pagination__num-block .pagination__num.pagination__num_active{background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);color:#fff}.pagination .pagination__num-block .pagination__num.pagination__num_next{background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);color:#fff;position:relative}.pagination .pagination__num-block .pagination__num.pagination__num_next .pagination__arrow{width:20px;height:20px;cursor:pointer;position:absolute;top:12px;right:9px;background-repeat:no-repeat}.pagination .pagination__num-block .pagination__num.pagination__num_next .pagination__arrow.pagination__arrow_white{background-image:url("+c+")}.pagination .pagination__label{width:100%;display:flex;justify-content:center}\n","",{version:3,sources:["webpack://./src/blocks/pagination/pagination.scss"],names:[],mappings:"AAAA,YACE,UAAW,CACX,oBAAqB,CAFvB,mCAKI,UAAW,CACX,YAAa,CACb,sBAAuB,CACvB,iBAAkB,CARtB,oDAWM,UAAW,CACX,WAAY,CACZ,wBAA4B,CAC5B,gBAAiB,CACjB,eAAgB,CAChB,iBAAkB,CAClB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CAxB3B,2EA2BQ,4DAA6D,CAC7D,UAAW,CA5BnB,yEAgCQ,4DAA6D,CAC7D,UAAW,CACX,iBAAkB,CAlC1B,4FAqCU,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,2BAA4B,CA3CtC,oHA8CY,wDAA2D,CA9CvE,+BAsDI,UAAW,CACX,YAAa,CACb,sBAAuB",sourcesContent:[".pagination {\r\n  width: 100%;\r\n  margin: 30px 0 10px 0;\r\n\r\n  .pagination__num-block {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 10px 0 9px;\r\n\r\n    .pagination__num {\r\n      width: 40px;\r\n      height: 40px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      font-size: 11.5px;\r\n      font-weight: 500;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      cursor: pointer;\r\n      user-select: none;\r\n      -moz-user-select: none;\r\n      -webkit-user-select: none;\r\n      -ms-user-select: none;\r\n\r\n      &.pagination__num_active {\r\n        background: linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);\r\n        color: #fff;\r\n      }\r\n\r\n      &.pagination__num_next {\r\n        background: linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);\r\n        color: #fff;\r\n        position: relative;\r\n\r\n        .pagination__arrow {\r\n          width: 20px;\r\n          height: 20px;\r\n          cursor: pointer;\r\n          position: absolute;\r\n          top: 12px;\r\n          right: 9px;\r\n          background-repeat: no-repeat;\r\n\r\n          &.pagination__arrow_white {\r\n            background-image: url('@Blocks/pagination/arrow-white.svg');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination__label {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const m=u},1189:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".radiogroup{display:flex;flex-wrap:wrap;width:100%;justify-content:flex-start}.radiogroup .radiogroup__radio-btn{vertical-align:center}.radiogroup .radiogroup__radio-btn .radiogroup__input{margin:auto 10px auto 0;width:20px;height:20px;display:none}.radiogroup .radiogroup__radio-btn .radiogroup__input:checked+.radiogroup__label:after{content:'';background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);display:inline-block;width:12px;height:12px;border-radius:50%;position:absolute;left:5px;top:4px}.radiogroup .radiogroup__radio-btn .radiogroup__input:checked+.radiogroup__label:before{border:1px solid #bc9cff}.radiogroup .radiogroup__radio-btn .radiogroup__label{display:inline-block;cursor:pointer;position:relative;margin-right:0;line-height:18px;user-select:none;margin:11px 20px 5px 0;padding-left:30px}.radiogroup .radiogroup__radio-btn .radiogroup__label:before{content:'';background-color:#fff;display:inline-block;width:20px;height:20px;border-radius:50%;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;position:absolute;left:1px}\n","",{version:3,sources:["webpack://./src/blocks/radiogroup/radiogroup.scss"],names:[],mappings:"AAAA,YACE,YAAa,CACb,cAAe,CACf,UAAW,CACX,0BAA2B,CAJ7B,mCAOI,qBAAsB,CAP1B,sDAUM,uBAAwB,CACxB,UAAW,CACX,WAAY,CACZ,YAAa,CAbnB,uFAkBY,UAAW,CACX,4DAA6D,CAC7D,oBAAqB,CACrB,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,iBAAkB,CAClB,QAAS,CACT,OAAQ,CA1BpB,wFA8BY,wBAAyB,CA9BrC,sDAqCM,oBAAqB,CACrB,cAAe,CACf,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,gBAAiB,CACjB,sBAAuB,CACvB,iBAAkB,CA5CxB,6DA+CQ,UAAW,CACX,qBAAsB,CACtB,oBAAqB,CACrB,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAClB,QAAS",sourcesContent:[".radiogroup {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  justify-content: flex-start;\r\n\r\n  .radiogroup__radio-btn {\r\n    vertical-align: center;\r\n\r\n    .radiogroup__input {\r\n      margin: auto 10px auto 0;\r\n      width: 20px;\r\n      height: 20px;\r\n      display: none;\r\n\r\n      &:checked {\r\n        + .radiogroup__label {\r\n          &:after {\r\n            content: '';\r\n            background: linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);\r\n            display: inline-block;\r\n            width: 12px;\r\n            height: 12px;\r\n            border-radius: 50%;\r\n            position: absolute;\r\n            left: 5px;\r\n            top: 4px;\r\n          }\r\n\r\n          &:before {\r\n            border: 1px solid #bc9cff;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .radiogroup__label {\r\n      display: inline-block;\r\n      cursor: pointer;\r\n      position: relative;\r\n      margin-right: 0;\r\n      line-height: 18px;\r\n      user-select: none;\r\n      margin: 11px 20px 5px 0;\r\n      padding-left: 30px;\r\n\r\n      &:before {\r\n        content: '';\r\n        background-color: #fff;\r\n        display: inline-block;\r\n        width: 20px;\r\n        height: 20px;\r\n        border-radius: 50%;\r\n        border: 1px solid rgba(31, 32, 65, 0.25);\r\n        box-sizing: border-box;\r\n        position: absolute;\r\n        left: 1px;\r\n      }\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},8043:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".range-slider{width:100%}.range-slider .range-slider__topic-label{display:flex;justify-content:space-between;align-items:center}.range-slider .range-slider__slider{width:calc(100% - 11px);height:6px;margin:18px 0 10px;transform:translate(5px, 0);position:relative}.range-slider .range-slider__slider:hover{cursor:pointer}.range-slider .range-slider__slider:before{content:'';border:1px solid rgba(31,32,65,0.25);border-radius:3px;box-sizing:border-box;position:absolute;width:calc(100% + 11px);transform:translate(-5px, 0);height:6px}.range-slider .range-slider__slider .range-slider__scale{position:absolute;z-index:-1}.range-slider .range-slider__slider .range-slider__scale .range-slider__scale-line{width:1px;height:10px;background:rgba(31,32,65,0.25)}.range-slider .range-slider__slider .range-slider__scale .range-slider__scale-val{transform:translateX(-50%);font-size:10px}.range-slider .range-slider__slider .range-slider__range{height:calc(100% + 0px);width:85px;background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);border-radius:3px;box-sizing:border-box;transform:translate(78px, 0px)}.range-slider .range-slider__slider .range-slider__left,.range-slider .range-slider__slider .range-slider__right{width:12px;height:12px;background:linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);border:2px solid #fff;border-radius:50px;display:inline-block;position:absolute;cursor:pointer;top:7px}.range-slider .range-slider__slider .range-slider__left{left:78px;transform:translate(-50%, -12px)}.range-slider .range-slider__slider .range-slider__right{left:163px;transform:translate(-50%, -12px)}.range-slider .range-slider__postText{margin-top:5px}.moving-slider{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}\n","",{version:3,sources:["webpack://./src/blocks/range-slider/range-slider.scss"],names:[],mappings:"AAAA,cACE,UAAW,CADb,yCAII,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CANvB,oCAUI,uBAAwB,CACxB,UAAW,CACX,kBAAmB,CACnB,2BAA4B,CAC5B,iBAAkB,CAdtB,0CAiBM,cAAe,CAjBrB,2CAqBM,UAAW,CACX,oCAAwC,CACxC,iBAAkB,CAClB,qBAAsB,CACtB,iBAAkB,CAClB,uBAAwB,CACxB,4BAA6B,CAC7B,UAAW,CA5BjB,yDAgCM,iBAAkB,CAClB,UAAW,CAjCjB,mFAoCQ,SAAU,CACV,WAAY,CACZ,8BAAkC,CAtC1C,kFA0CQ,0BAA2B,CAC3B,cAAe,CA3CvB,yDAgDM,uBAAwB,CACxB,UAAW,CACX,4DAA6D,CAC7D,iBAAkB,CAClB,qBAAsB,CACtB,8BAA+B,CArDrC,iHA0DM,UAAW,CACX,WAAY,CACZ,4DAA6D,CAC7D,qBAAsB,CACtB,kBAAmB,CACnB,oBAAqB,CACrB,iBAAkB,CAClB,cAAe,CACf,OAAQ,CAlEd,wDAsEM,SAAU,CACV,gCAAiC,CAvEvC,yDA2EM,UAAW,CACX,gCAAiC,CA5EvC,sCAiFI,cAAe,CAChB,eAID,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB",sourcesContent:[".range-slider {\r\n  width: 100%;\r\n\r\n  .range-slider__topic-label {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .range-slider__slider {\r\n    width: calc(100% - 11px);\r\n    height: 6px;\r\n    margin: 18px 0 10px;\r\n    transform: translate(5px, 0);\r\n    position: relative;\r\n\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n\r\n    &:before {\r\n      content: '';\r\n      border: 1px solid rgba(31, 32, 65, 0.25);\r\n      border-radius: 3px;\r\n      box-sizing: border-box;\r\n      position: absolute;\r\n      width: calc(100% + 11px);\r\n      transform: translate(-5px, 0);\r\n      height: 6px;\r\n    }\r\n\r\n    .range-slider__scale {\r\n      position: absolute;\r\n      z-index: -1;\r\n\r\n      .range-slider__scale-line {\r\n        width: 1px;\r\n        height: 10px;\r\n        background: rgba(31, 32, 65, 0.25);\r\n      }\r\n\r\n      .range-slider__scale-val {\r\n        transform: translateX(-50%);\r\n        font-size: 10px;\r\n      }\r\n    }\r\n\r\n    .range-slider__range {\r\n      height: calc(100% + 0px);\r\n      width: 85px;\r\n      background: linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);\r\n      border-radius: 3px;\r\n      box-sizing: border-box;\r\n      transform: translate(78px, 0px);\r\n    }\r\n\r\n    .range-slider__left,\r\n    .range-slider__right {\r\n      width: 12px;\r\n      height: 12px;\r\n      background: linear-gradient(180deg, #6fcf97 0%, #66d2ea 100%);\r\n      border: 2px solid #fff;\r\n      border-radius: 50px;\r\n      display: inline-block;\r\n      position: absolute;\r\n      cursor: pointer;\r\n      top: 7px;\r\n    }\r\n\r\n    .range-slider__left {\r\n      left: 78px;\r\n      transform: translate(-50%, -12px);\r\n    }\r\n\r\n    .range-slider__right {\r\n      left: 163px;\r\n      transform: translate(-50%, -12px);\r\n    }\r\n  }\r\n\r\n  .range-slider__postText {\r\n    margin-top: 5px;\r\n  }\r\n}\r\n\r\n.moving-slider {\r\n  user-select: none;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n}\r\n"],sourceRoot:""}]);const o=s},4456:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(3646),u=n(9872),c=s()(a()),m=d()(l.Z),_=d()(u.Z);c.push([e.id,".rate-btn{display:flex;justify-content:flex-start;margin:15px 20px 0 0}.rate-btn .rate-btn__star{width:20px;height:20px;margin:0 2px;cursor:pointer;background-image:url("+m+");background-repeat:no-repeat;background-position:50%;background-size:contain}.rate-btn .rate-btn__star.rate-btn__star_active{background-image:url("+_+")}\n","",{version:3,sources:["webpack://./src/blocks/rate-btn/rate-btn.scss"],names:[],mappings:"AAAA,UACE,YAAa,CACb,0BAA2B,CAC3B,oBAAqB,CAHvB,0BAMI,UAAW,CACX,WAAY,CACZ,YAAa,CACb,cAAe,CACf,wDAAwC,CACxC,2BAA4B,CAC5B,uBAAwB,CACxB,uBAAwB,CAb5B,gDAgBM,wDAAiC",sourcesContent:[".rate-btn {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  margin: 15px 20px 0 0;\r\n\r\n  .rate-btn__star {\r\n    width: 20px;\r\n    height: 20px;\r\n    margin: 0 2px;\r\n    cursor: pointer;\r\n    background-image: url('star_border.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: 50%;\r\n    background-size: contain;\r\n\r\n    &.rate-btn__star_active {\r\n      background-image: url('star.svg');\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const p=c},978:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".toggle-block{display:flex;justify-content:flex-start;cursor:pointer;margin:3px 0 5px}.toggle-block .toggle-block__toggle{display:flex;width:38px;height:18px;border-radius:10px;border:1px solid rgba(31,32,65,0.25);margin:8px 0 0 1px}.toggle-block .toggle-block__toggle.toggle-block__toggle_off{justify-content:flex-start}.toggle-block .toggle-block__toggle.toggle-block__toggle_off>.toggle-block__item{background:rgba(31,32,65,0.25)}.toggle-block .toggle-block__toggle.toggle-block__toggle_on{justify-content:flex-end;border:1px solid #bc9cff}.toggle-block .toggle-block__toggle.toggle-block__toggle_on>.toggle-block__item{background:linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%)}.toggle-block .toggle-block__toggle .toggle-block__item{width:12px;height:12px;border-radius:50%;margin:3px}.toggle-block p{margin:5px 0 0 10px;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}\n","",{version:3,sources:["webpack://./src/blocks/toggle-block/toggle-block.scss"],names:[],mappings:"AAAA,cACE,YAAa,CACb,0BAA2B,CAC3B,cAAe,CACf,gBAAiB,CAJnB,oCAOI,YAAa,CACb,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,oCAAwC,CACxC,kBAAmB,CAZvB,6DAeM,0BAA2B,CAfjC,iFAkBQ,8BAAkC,CAlB1C,4DAuBM,wBAAyB,CACzB,wBAAyB,CAxB/B,gFA2BQ,4DAA6D,CA3BrE,wDAgCM,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,UAAW,CAnCjB,gBAwCI,mBAAoB,CACpB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB",sourcesContent:[".toggle-block {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  cursor: pointer;\r\n  margin: 3px 0 5px;\r\n\r\n  .toggle-block__toggle {\r\n    display: flex;\r\n    width: 38px;\r\n    height: 18px;\r\n    border-radius: 10px;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    margin: 8px 0 0 1px;\r\n\r\n    &.toggle-block__toggle_off {\r\n      justify-content: flex-start;\r\n\r\n      > .toggle-block__item {\r\n        background: rgba(31, 32, 65, 0.25);\r\n      }\r\n    }\r\n\r\n    &.toggle-block__toggle_on {\r\n      justify-content: flex-end;\r\n      border: 1px solid #bc9cff;\r\n\r\n      > .toggle-block__item {\r\n        background: linear-gradient(180deg, #bc9cff 0%, #8ba4f9 100%);\r\n      }\r\n    }\r\n\r\n    .toggle-block__item {\r\n      width: 12px;\r\n      height: 12px;\r\n      border-radius: 50%;\r\n      margin: 3px;\r\n    }\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0 0 10px;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".topic-label{display:flex;justify-content:space-between}.topic-label h3,.topic-label p{margin:0}.topic-label p{font-size:12px;line-height:11px;text-transform:uppercase;color:#1f2041;letter-spacing:-0.1px}\n","",{version:3,sources:["webpack://./src/blocks/topic-label/topic-label.scss"],names:[],mappings:"AAAA,aACE,YAAa,CACb,6BAA8B,CAFhC,+BAMI,QAAS,CANb,eAUI,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CACzB,aAAc,CACd,qBAAsB",sourcesContent:[".topic-label {\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  h3,\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  p {\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n    text-transform: uppercase;\r\n    color: #1f2041;\r\n    letter-spacing: -0.1px;\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},4800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".start-page{padding:80px 8.4%}.start-page .start-page__links{display:flex;flex-direction:column}body{margin:0;padding:0;font-family:'Montserrat', Arial, sans-serif;font-style:normal;font-weight:normal;font-size:13.7px;line-height:24px;color:rgba(31,32,65,0.75);min-width:320px}h1{font-family:'Montserrat', Arial, sans-serif;font-size:24px;line-height:30px}h2{font-family:'Montserrat', Arial, sans-serif;font-size:19px;line-height:24px}h3{font-family:'Montserrat', Arial, sans-serif;font-size:12px;line-height:15px;text-transform:uppercase}h1,h2,h3{margin:0}body,p{font-family:'Montserrat', Arial, sans-serif;font-style:normal;font-weight:normal;font-size:14px;line-height:24px}a{cursor:pointer}a :hover{text-decoration:underline}img{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}\n","",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CADpB,+BAII,YAAa,CACb,qBAAsB,CACvB,KAID,QAAS,CACT,SAAU,CACV,2CAA4C,CAC5C,iBAAkB,CAClB,kBAAmB,CACnB,gBAAiB,CACjB,gBAAiB,CACjB,yBAA6B,CAC7B,eAAgB,CACjB,GAGC,2CAA4C,CAC5C,cAAe,CACf,gBAAiB,CAClB,GAGC,2CAA4C,CAC5C,cAAe,CACf,gBAAiB,CAClB,GAGC,2CAA4C,CAC5C,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CAC1B,SAKC,QAAS,CACV,OAIC,2CAA4C,CAC5C,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CAClB,EAGC,cAAe,CADjB,SAGI,yBAA0B,CAC3B,IAID,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB",sourcesContent:[".start-page {\r\n  padding: 80px 8.4%;\r\n\r\n  .start-page__links {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 13.7px;\r\n  line-height: 24px;\r\n  color: rgba(31, 32, 65, 0.75);\r\n  min-width: 320px;\r\n}\r\n\r\nh1 {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n}\r\n\r\nh2 {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-size: 19px;\r\n  line-height: 24px;\r\n}\r\n\r\nh3 {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-transform: uppercase;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3 {\r\n  margin: 0;\r\n}\r\n\r\nbody,\r\np {\r\n  font-family: 'Montserrat', Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n}\r\n\r\na {\r\n  cursor: pointer;\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\nimg {\r\n  user-select: none;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n}\r\n"],sourceRoot:""}]);const o=s},3962:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i)()(a());s.push([e.id,".ui-kit-form-elements{display:flex;flex-wrap:wrap;padding:123px 50px 130px 120px;position:relative;box-sizing:border-box;width:1440px}.ui-kit-form-elements .ui-kit-form-elements__ico-logo{width:48px;height:48px;position:absolute;left:31px;top:30px}.ui-kit-form-elements h3{font-size:12.5px;letter-spacing:-0.4px}.ui-kit-form-elements .ui-kit-form-elements__blk{margin:20px 20px 39px 20px;width:320px}.ui-kit-form-elements .ui-kit-form-elements__blk .ui-kit-form-elements__flex-block{display:flex;width:100%;justify-content:flex-start}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1{margin-right:106px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .input-text{margin-bottom:20px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .input-text:nth-child(2) .topic-label p{line-height:16px;font-size:11.7px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .dropdown-block{margin-bottom:23px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .dropdown-dates{margin-top:39px;margin-bottom:18px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .dropdown-dates .calendar-block .calendar-block__btns{width:301px;transform:translateX(-1.2px)}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .ui-kit-form-elements__input-blk-narrow{width:267px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .ui-kit-form-elements__input-blk-narrow .input-text_subscription{margin:41px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_1 .ui-kit-form-elements__input-blk-narrow .input-text_subscription .input-text__input{width:100%}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2{margin-right:52px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .checkbox-list{margin-bottom:31px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .radiogroup__radio-btn{margin-bottom:26px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .radiogroup__radio-btn .radiogroup__label{padding-left:30px;margin:16px 20px 16px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 h3:nth-child(5){font-size:12px;line-height:17px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .toggle-block:nth-child(6){margin-top:7px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .toggle-block:nth-child(7){margin-bottom:43px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .like{margin:16px 9px 40px 1px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_2 .rate-btn{margin:17px 19px 0 1px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .btn{margin:16px 17px 14px 1px;height:36px;line-height:35px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .btn.btn_gradient{width:100px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .btn.btn_border{width:95px;height:32px;line-height:32px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .btn.btn_gradient_pay{width:100%;margin:15px 20px 40px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .btn.btn_gradient_pay .btn__link{letter-spacing:0.1px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .btn .btn__link{letter-spacing:-0.3px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .link{font-size:12px;margin-top:17px;margin-left:2px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .pagination{margin:16px 0 9px 1px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .pagination .pagination__num-block,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .pagination .pagination__label{justify-content:flex-start}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_3 .pagination .pagination__label{margin-left:6px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_slider{width:320px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_slider .ui-kit-form-elements__slider-blk{width:266px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_slider .ui-kit-form-elements__slider-blk .range-slider{margin-bottom:8px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_slider .ui-kit-form-elements__slider-blk .range-slider .range-slider__topic-label{align-items:flex-start}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_slider .ui-kit-form-elements__slider-blk .range-slider .range-slider__topic-label .range-slider__label-block{margin:2px 0 6px 0;font-size:12px;line-height:12px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4{width:265px;height:261px;margin:20px 161px 39px 20px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block__dropdown-items{padding-bottom:5px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block{margin-bottom:20px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .topic-label,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .topic-label,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .topic-label{display:flex;justify-content:space-between}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .topic-label h3,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .topic-label p,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .topic-label h3,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .topic-label p,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .topic-label h3,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .topic-label p{margin:0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .topic-label p,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .topic-label p,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .topic-label p{font-size:12px;line-height:15px;text-transform:uppercase;color:#1f2041}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .dropdown-block__dropdown,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .dropdown-block__dropdown,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .dropdown-block__dropdown{border-radius:4px 4px 0 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line{height:auto}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3{padding:13px 13px 10px 14px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty{margin:5px 5px 0 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_4 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span,.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span{font-size:12px;margin-bottom:3px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5{margin:20px 52px 20px 20px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block__dropdown-items{padding-bottom:0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block__dropdown-items .dropdown-block__btns{height:auto}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_5 .dropdown-block__dropdown-items .dropdown-block__btns .link_ok{margin:20px 6px 11px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block__dropdown-items .dropdown-block__btns{height:auto}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block__dropdown-items .dropdown-block__btns .link_clean{margin:20px 0 11px 14px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_6 .dropdown-block__dropdown-items .dropdown-block__btns .link_ok{margin:20px 6px 11px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_7{width:265px;margin-right:161px;margin:20px 161px 5px 20px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_7 .checkbox-list-expandable{margin:0 0 50px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_7 .checkbox-list-expandable .checkbox-list.checkbox-list_hide+.checkbox-list-expandable__topicBlock .checkbox-list-expandable__expand{transform:rotate(180deg)}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_7 .checkbox-list-expandable .checkbox-list .checkbox-list__label{padding:0 0 9px 29px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_8{width:260px;margin-right:112px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_8 .checkbox-list{margin-top:14px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_8 .checkbox-list .checkbox-list__item:nth-child(1){width:220px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_8 .checkbox-list .checkbox-list__label{padding:1px 0 10px 30px;white-space:nowrap;letter-spacing:-0.4px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_9 .list-block h3{margin-bottom:13px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_9 .list-block .list-block__item:before{margin:7px 12px 7px 0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_10{width:278px;margin:19px 149px 39px 20px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_10 .info-block{width:100%;min-width:unset;margin:0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_10 .info-block .info-block__item{margin:24px 0 22px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_10 .info-block .info-block__item .info-block__icon{margin-left:4px;margin-top:0}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_10 .info-block .info-block__item .info-block__text p{line-height:14px;margin-bottom:2px}.ui-kit-form-elements .ui-kit-form-elements__blk.ui-kit-form-elements__blk_11{margin:26px 20px 39px 20px;width:755px}\n","",{version:3,sources:["webpack://./src/pages/ui-kit-form-elements/ui-kit-form-elements.scss"],names:[],mappings:"AAAA,sBACE,YAAa,CACb,cAAe,CACf,8BAA+B,CAC/B,iBAAkB,CAClB,qBAAsB,CACtB,YAAa,CANf,sDASI,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,SAAU,CACV,QAAS,CAbb,yBAiBI,gBAAiB,CACjB,qBAAsB,CAlB1B,iDAsBI,0BAA2B,CAC3B,WAAY,CAvBhB,mFA0BM,YAAa,CACb,UAAW,CACX,0BAA2B,CA5BjC,6EAgCM,kBAAmB,CAhCzB,yFAmCQ,kBAAmB,CAnC3B,qHAwCc,gBAAiB,CACjB,gBAAiB,CAzC/B,6FAgDQ,kBAAmB,CAhD3B,6FAoDQ,eAAgB,CAChB,kBAAmB,CArD3B,mIAyDY,WAAY,CACZ,4BAA6B,CA1DzC,qHAgEQ,WAAY,CAhEpB,8IAmEU,aAAc,CAnExB,iKAsEY,UAAW,CAtEvB,6EA+EM,iBAAkB,CA/ExB,4FAkFQ,kBAAmB,CAlF3B,oGAsFQ,kBAAmB,CAtF3B,uHAyFU,iBAAkB,CAClB,uBAAwB,CA1FlC,6FAgGQ,cAAe,CACf,gBAAiB,CAjGzB,wGAsGU,cAAe,CAtGzB,wGAyGU,kBAAmB,CAzG7B,mFA8GQ,wBAAyB,CA9GjC,uFAkHQ,sBAAuB,CAlH/B,kFA0HQ,yBAA0B,CAC1B,WAAY,CACZ,gBAAiB,CA5HzB,+FA+HU,WAAY,CA/HtB,6FAmIU,UAAW,CACX,WAAY,CACZ,gBAAiB,CArI3B,mGAyIU,UAAW,CACX,uBAAwB,CA1IlC,8GA6IY,oBAAqB,CA7IjC,6FAkJU,qBAAsB,CAlJhC,mFAuJQ,cAAe,CACf,eAAgB,CAChB,eAAgB,CAzJxB,yFA6JQ,qBAAsB,CA7J9B,4NAiKU,0BAA2B,CAjKrC,4GAqKU,eAAgB,CArK1B,kFA2KM,WAAY,CA3KlB,oHA8KQ,WAAY,CA9KpB,kIAiLU,iBAAkB,CAjL5B,6JAoLY,sBAAuB,CApLnC,wLAuLc,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CAzL/B,6EAmMM,WAAY,CACZ,YAAa,CACb,2BAA4B,CArMlC,6GAwMQ,kBAAmB,CAxM3B,uRAgNQ,kBAAmB,CAhN3B,8TAmNU,YAAa,CACb,6BAA8B,CApNxC,2oBAwNY,QAAS,CAxNrB,oUA4NY,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CACzB,aAAc,CA/N1B,qWAoOU,yBAA0B,CApOpC,2cAyOY,WAAY,CAzOxB,odA4Oc,2BAA4B,CA5O1C,4hBAgPc,kBAAmB,CAhPjC,2iBAmPgB,cAAe,CACf,iBAAkB,CApPlC,6EA6PM,0BAA2B,CA7PjC,6GAgQQ,gBAAiB,CAhQzB,mIAmQU,WAAY,CAnQtB,4IAsQY,sBAAuB,CAtQnC,mIA+QU,WAAY,CA/QtB,+IAkRY,uBAAwB,CAlRpC,4IAsRY,sBAAuB,CAtRnC,6EA+RM,WAAY,CACZ,kBAAmB,CACnB,0BAA2B,CAjSjC,uGAoSQ,iBAAkB,CApS1B,iNA0SgB,wBAAyB,CA1SzC,4IAgTY,oBAAqB,CAhTjC,6EAyTM,WAAY,CACZ,kBAAmB,CA1TzB,4FA6TQ,eAAgB,CA7TxB,8HAgUU,WAAY,CAhUtB,kHAoUU,uBAAwB,CACxB,kBAAmB,CACnB,qBAAsB,CAtUhC,4FAgVU,kBAAmB,CAhV7B,kHAoVU,qBAAsB,CApVhC,8EA4VM,WAAY,CACZ,2BAA4B,CA7VlC,0FAgWQ,UAAW,CACX,eAAgB,CAChB,QAAS,CAlWjB,4GAqWU,kBAAmB,CArW7B,8HAwWY,eAAgB,CAChB,YAAa,CAzWzB,gIA6WY,gBAAiB,CACjB,iBAAkB,CA9W9B,8EAuXM,0BAA2B,CAC3B,WAAY",sourcesContent:[".ui-kit-form-elements {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding: 123px 50px 130px 120px;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  width: 1440px;\r\n\r\n  .ui-kit-form-elements__ico-logo {\r\n    width: 48px;\r\n    height: 48px;\r\n    position: absolute;\r\n    left: 31px;\r\n    top: 30px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 12.5px;\r\n    letter-spacing: -0.4px;\r\n  }\r\n\r\n  .ui-kit-form-elements__blk {\r\n    margin: 20px 20px 39px 20px;\r\n    width: 320px;\r\n\r\n    .ui-kit-form-elements__flex-block {\r\n      display: flex;\r\n      width: 100%;\r\n      justify-content: flex-start;\r\n    }\r\n\r\n    &.ui-kit-form-elements__blk_1 {\r\n      margin-right: 106px;\r\n\r\n      .input-text {\r\n        margin-bottom: 20px;\r\n\r\n        &:nth-child(2) {\r\n          .topic-label {\r\n            p {\r\n              line-height: 16px;\r\n              font-size: 11.7px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .dropdown-block {\r\n        margin-bottom: 23px;\r\n      }\r\n\r\n      .dropdown-dates {\r\n        margin-top: 39px;\r\n        margin-bottom: 18px;\r\n\r\n        .calendar-block {\r\n          .calendar-block__btns {\r\n            width: 301px;\r\n            transform: translateX(-1.2px);\r\n          }\r\n        }\r\n      }\r\n\r\n      .ui-kit-form-elements__input-blk-narrow {\r\n        width: 267px;\r\n\r\n        .input-text_subscription {\r\n          margin: 41px 0;\r\n\r\n          .input-text__input {\r\n            width: 100%;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_2 {\r\n      margin-right: 52px;\r\n\r\n      .checkbox-list {\r\n        margin-bottom: 31px;\r\n      }\r\n\r\n      .radiogroup__radio-btn {\r\n        margin-bottom: 26px;\r\n\r\n        .radiogroup__label {\r\n          padding-left: 30px;\r\n          margin: 16px 20px 16px 0;\r\n        }\r\n      }\r\n\r\n      h3:nth-child(5) {\r\n        //Toggle\r\n        font-size: 12px;\r\n        line-height: 17px;\r\n      }\r\n\r\n      .toggle-block {\r\n        &:nth-child(6) {\r\n          margin-top: 7px;\r\n        }\r\n        &:nth-child(7) {\r\n          margin-bottom: 43px;\r\n        }\r\n      }\r\n\r\n      .like {\r\n        margin: 16px 9px 40px 1px;\r\n      }\r\n\r\n      .rate-btn {\r\n        margin: 17px 19px 0 1px;\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_3 {\r\n      .btn {\r\n        margin: 16px 17px 14px 1px;\r\n        height: 36px;\r\n        line-height: 35px;\r\n\r\n        &.btn_gradient {\r\n          width: 100px;\r\n        }\r\n\r\n        &.btn_border {\r\n          width: 95px;\r\n          height: 32px;\r\n          line-height: 32px;\r\n        }\r\n\r\n        &.btn_gradient_pay {\r\n          width: 100%;\r\n          margin: 15px 20px 40px 0;\r\n\r\n          .btn__link {\r\n            letter-spacing: 0.1px;\r\n          }\r\n        }\r\n\r\n        .btn__link {\r\n          letter-spacing: -0.3px;\r\n        }\r\n      }\r\n\r\n      .link {\r\n        font-size: 12px;\r\n        margin-top: 17px;\r\n        margin-left: 2px;\r\n      }\r\n\r\n      .pagination {\r\n        margin: 16px 0 9px 1px;\r\n\r\n        .pagination__num-block,\r\n        .pagination__label {\r\n          justify-content: flex-start;\r\n        }\r\n\r\n        .pagination__label {\r\n          margin-left: 6px;\r\n        }\r\n      }\r\n    }\r\n\r\n    &.ui-kit-form-elements__blk_slider {\r\n      width: 320px;\r\n\r\n      .ui-kit-form-elements__slider-blk {\r\n        width: 266px;\r\n\r\n        .range-slider {\r\n          margin-bottom: 8px;\r\n\r\n          .range-slider__topic-label {\r\n            align-items: flex-start;\r\n\r\n            .range-slider__label-block {\r\n              margin: 2px 0 6px 0;\r\n              font-size: 12px;\r\n              line-height: 12px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_4 {\r\n      width: 265px;\r\n      height: 261px;\r\n      margin: 20px 161px 39px 20px;\r\n\r\n      .dropdown-block__dropdown-items {\r\n        padding-bottom: 5px;\r\n      }\r\n    }\r\n\r\n    &.ui-kit-form-elements__blk_4,\r\n    &.ui-kit-form-elements__blk_5,\r\n    &.ui-kit-form-elements__blk_6 {\r\n      .dropdown-block {\r\n        margin-bottom: 20px;\r\n\r\n        .topic-label {\r\n          display: flex;\r\n          justify-content: space-between;\r\n\r\n          h3,\r\n          p {\r\n            margin: 0;\r\n          }\r\n\r\n          p {\r\n            font-size: 12px;\r\n            line-height: 15px;\r\n            text-transform: uppercase;\r\n            color: #1f2041;\r\n          }\r\n        }\r\n\r\n        .dropdown-block__dropdown {\r\n          border-radius: 4px 4px 0 0;\r\n        }\r\n\r\n        .dropdown-block__dropdown-items {\r\n          .dropdown-block__items-line {\r\n            height: auto;\r\n\r\n            h3 {\r\n              padding: 13px 13px 10px 14px;\r\n            }\r\n\r\n            .dropdown-block__block-qty {\r\n              margin: 5px 5px 0 0;\r\n\r\n              span {\r\n                font-size: 12px;\r\n                margin-bottom: 3px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    &.ui-kit-form-elements__blk_5 {\r\n      margin: 20px 52px 20px 20px;\r\n\r\n      .dropdown-block__dropdown-items {\r\n        padding-bottom: 0;\r\n\r\n        .dropdown-block__btns {\r\n          height: auto;\r\n\r\n          .link_ok {\r\n            margin: 20px 6px 11px 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    &.ui-kit-form-elements__blk_6 {\r\n      .dropdown-block__dropdown-items {\r\n        .dropdown-block__btns {\r\n          height: auto;\r\n\r\n          .link_clean {\r\n            margin: 20px 0 11px 14px;\r\n          }\r\n\r\n          .link_ok {\r\n            margin: 20px 6px 11px 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_7 {\r\n      width: 265px;\r\n      margin-right: 161px;\r\n      margin: 20px 161px 5px 20px;\r\n\r\n      .checkbox-list-expandable {\r\n        margin: 0 0 50px 0;\r\n\r\n        .checkbox-list {\r\n          &.checkbox-list_hide {\r\n            + .checkbox-list-expandable__topicBlock {\r\n              .checkbox-list-expandable__expand {\r\n                transform: rotate(180deg);\r\n              }\r\n            }\r\n          }\r\n\r\n          .checkbox-list__label {\r\n            padding: 0 0 9px 29px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_8 {\r\n      width: 260px;\r\n      margin-right: 112px;\r\n\r\n      .checkbox-list {\r\n        margin-top: 14px;\r\n\r\n        .checkbox-list__item:nth-child(1) {\r\n          width: 220px;\r\n        }\r\n\r\n        .checkbox-list__label {\r\n          padding: 1px 0 10px 30px;\r\n          white-space: nowrap;\r\n          letter-spacing: -0.4px;\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_9 {\r\n      .list-block {\r\n        h3 {\r\n          margin-bottom: 13px;\r\n        }\r\n\r\n        .list-block__item:before {\r\n          margin: 7px 12px 7px 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_10 {\r\n      width: 278px;\r\n      margin: 19px 149px 39px 20px;\r\n\r\n      .info-block {\r\n        width: 100%;\r\n        min-width: unset;\r\n        margin: 0;\r\n\r\n        .info-block__item {\r\n          margin: 24px 0 22px;\r\n\r\n          .info-block__icon {\r\n            margin-left: 4px;\r\n            margin-top: 0;\r\n          }\r\n\r\n          .info-block__text p {\r\n            line-height: 14px;\r\n            margin-bottom: 2px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //----------------------------------------------------\r\n\r\n    &.ui-kit-form-elements__blk_11 {\r\n      margin: 26px 20px 39px 20px;\r\n      width: 755px;\r\n    }\r\n  }\r\n}\r\n"],sourceRoot:""}]);const o=s},6647:(e,t,n)=>{"use strict";n.d(t,{Z:()=>ut});var r=n(4015),a=n.n(r),i=n(3645),s=n.n(i),o=n(1667),d=n.n(o),l=n(5564),u=n(556),c=n(5092),m=n(827),_=n(8296),p=n(5669),f=n(8215),h=n(3439),g=n(6191),y=n(4306),k=n(6308),b=n(9780),M=n(3572),A=n(9298),w=n(9643),L=n(1774),Y=n(152),x=n(4294),v=n(3752),C=n(7525),D=n(1505),T=n(3712),B=n(1077),S=n(5890),j=n(7590),H=n(584),E=n(3999),W=n(1130),O=n(1417),P=n(1560),F=n(113),z=n(4892),N=n(779),I=n(970),R=n(1182),q=n(754),U=n(3385),J=n(9009),Z=n(3867),V=n(880),G=n(6182),Q=n(5145),X=n(4156),$=n(5192),K=n(8519),ee=n(821),te=n(5419),ne=n(1637),re=n(8959),ae=n(5589),ie=n(5651),se=n(9575),oe=n(5323),de=n(1686),le=s()(a()),ue=d()(l),ce=d()(u),me=d()(c),_e=d()(m),pe=d()(_),fe=d()(p),he=d()(f),ge=d()(h),ye=d()(g),ke=d()(y),be=d()(k),Me=d()(b),Ae=d()(M),we=d()(A),Le=d()(w),Ye=d()(L),xe=d()(Y),ve=d()(x),Ce=d()(v),De=d()(C),Te=d()(D),Be=d()(T),Se=d()(B),je=d()(S),He=d()(j),Ee=d()(H),We=d()(E),Oe=d()(W),Pe=d()(O),Fe=d()(P),ze=d()(F),Ne=d()(z),Ie=d()(N),Re=d()(I),qe=d()(R),Ue=d()(q),Je=d()(U),Ze=d()(J),Ve=d()(Z),Ge=d()(V),Qe=d()(G),Xe=d()(Q),$e=d()(X),Ke=d()($),et=d()(K),tt=d()(ee),nt=d()(te),rt=d()(ne),at=d()(re),it=d()(ae),st=d()(ie),ot=d()(se),dt=d()(oe),lt=d()(de);le.push([e.id,"/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+ue+") format('woff2'), url("+ce+") format('woff'),\r\n    url("+me+") format('truetype');\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+_e+") format('woff2'),\r\n    url("+pe+") format('woff'), url("+fe+") format('truetype');\r\n  font-weight: 900;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+he+") format('woff2'), url("+ge+") format('woff'),\r\n    url("+ye+") format('truetype');\r\n  font-weight: 200;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+ke+") format('woff2'), url("+be+") format('woff'),\r\n    url("+Me+") format('truetype');\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Ae+") format('woff2'), url("+we+") format('woff'),\r\n    url("+Le+") format('truetype');\r\n  font-weight: 300;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Ye+") format('woff2'),\r\n    url("+xe+") format('woff'),\r\n    url("+ve+") format('truetype');\r\n  font-weight: 200;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Ce+") format('woff2'), url("+De+") format('woff'),\r\n    url("+Te+") format('truetype');\r\n  font-weight: normal;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Be+") format('woff2'), url("+Se+") format('woff'),\r\n    url("+je+") format('truetype');\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+He+") format('woff2'),\r\n    url("+Ee+") format('woff'),\r\n    url("+We+") format('truetype');\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Oe+") format('woff2'), url("+Pe+") format('woff'),\r\n    url("+Fe+") format('truetype');\r\n  font-weight: 900;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+ze+") format('woff2'), url("+Ne+") format('woff'),\r\n    url("+Ie+") format('truetype');\r\n  font-weight: 100;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Re+") format('woff2'),\r\n    url("+qe+") format('woff'),\r\n    url("+Ue+") format('truetype');\r\n  font-weight: 600;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Je+") format('woff2'), url("+Ze+") format('woff'),\r\n    url("+Ve+") format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+Ge+") format('woff2'), url("+Qe+") format('woff'),\r\n    url("+Xe+") format('truetype');\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+$e+") format('woff2'),\r\n    url("+Ke+") format('woff'), url("+et+") format('truetype');\r\n  font-weight: 300;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+tt+") format('woff2'),\r\n    url("+nt+") format('woff'),\r\n    url("+rt+") format('truetype');\r\n  font-weight: 500;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+at+") format('woff2'), url("+it+") format('woff'),\r\n    url("+st+") format('truetype');\r\n  font-weight: 500;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url("+ot+") format('woff2'), url("+dt+") format('woff'),\r\n    url("+lt+") format('truetype');\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n","",{version:3,sources:["webpack://./src/font/fonts.css"],names:[],mappings:"AAAA,aAAa;;AAEb;EACE,yBAAyB;EACzB;8DAC+C;EAC/C,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;sHAC2G;EAC3G,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;8DACsD;EACtD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACsD;EACtD,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACgD;EAChD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;;+DAE6D;EAC7D,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACiD;EACjD,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACqD;EACrD,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;;+DAE4D;EAC5D,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACgD;EAChD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACsD;EACtD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;;+DAE2D;EAC3D,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DAC+C;EAC/C,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACkD;EAClD,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;wHAC2G;EAC3G,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;;+DAEwD;EACxD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACiD;EACjD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB;+DACoD;EACpD,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;AACpB",sourcesContent:["/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-bold.woff2') format('woff2'), url('montserrat-bold.woff') format('woff'),\r\n    url('montserrat-bold.ttf') format('truetype');\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-black-italic.woff2') format('woff2'),\r\n    url('montserrat-black-italic.woff') format('woff'), url('montserrat-black-italic.ttf') format('truetype');\r\n  font-weight: 900;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-extra-light.woff2') format('woff2'), url('montserrat-extra-light.woff') format('woff'),\r\n    url('montserrat-extra-light.ttf') format('truetype');\r\n  font-weight: 200;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-bold-italic.woff2') format('woff2'), url('montserrat-bold-italic.woff') format('woff'),\r\n    url('montserrat-bold-italic.ttf') format('truetype');\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-light.woff2') format('woff2'), url('montserrat-light.woff') format('woff'),\r\n    url('montserrat-light.ttf') format('truetype');\r\n  font-weight: 300;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-extra-light-italic.woff2') format('woff2'),\r\n    url('montserrat-extra-light-italic.woff') format('woff'),\r\n    url('montserrat-extra-light-italic.ttf') format('truetype');\r\n  font-weight: 200;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-italic.woff2') format('woff2'), url('montserrat-italic.woff') format('woff'),\r\n    url('montserrat-italic.ttf') format('truetype');\r\n  font-weight: normal;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-extra-bold.woff2') format('woff2'), url('montserrat-extra-bold.woff') format('woff'),\r\n    url('montserrat-extra-bold.ttf') format('truetype');\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-extra-bold-italic.woff2') format('woff2'),\r\n    url('montserrat-extra-bold-italic.woff') format('woff'),\r\n    url('montserrat-extra-bold-italic.ttf') format('truetype');\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-black.woff2') format('woff2'), url('montserrat-black.woff') format('woff'),\r\n    url('montserrat-black.ttf') format('truetype');\r\n  font-weight: 900;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-thin-italic.woff2') format('woff2'), url('montserrat-thin-italic.woff') format('woff'),\r\n    url('montserrat-thin-italic.ttf') format('truetype');\r\n  font-weight: 100;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-semi-bold-italic.woff2') format('woff2'),\r\n    url('montserrat-semi-bold-italic.woff') format('woff'),\r\n    url('montserrat-semi-bold-italic.ttf') format('truetype');\r\n  font-weight: 600;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-thin.woff2') format('woff2'), url('montserrat-thin.woff') format('woff'),\r\n    url('montserrat-thin.ttf') format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-regular.woff2') format('woff2'), url('montserrat-regular.woff') format('woff'),\r\n    url('montserrat-regular.ttf') format('truetype');\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-light-italic.woff2') format('woff2'),\r\n    url('montserrat-light-italic.woff') format('woff'), url('montserrat-light-italic.ttf') format('truetype');\r\n  font-weight: 300;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-medium-italic.woff2') format('woff2'),\r\n    url('montserrat-medium-italic.woff') format('woff'),\r\n    url('montserrat-medium-italic.ttf') format('truetype');\r\n  font-weight: 500;\r\n  font-style: italic;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-medium.woff2') format('woff2'), url('montserrat-medium.woff') format('woff'),\r\n    url('montserrat-medium.ttf') format('truetype');\r\n  font-weight: 500;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: url('montserrat-semi-bold.woff2') format('woff2'), url('montserrat-semi-bold.woff') format('woff'),\r\n    url('montserrat-semi-bold.ttf') format('truetype');\r\n  font-weight: 600;\r\n  font-style: normal;\r\n  font-display: swap;\r\n}\r\n"],sourceRoot:""}]);const ut=le},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var o=0;o<e.length;o++){var d=[].concat(e[o]);r&&a[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,a,i=[],s=!0,o=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);s=!0);}catch(e){o=!0,a=e}finally{try{s||null==n.return||n.return()}finally{if(o)throw a}}return i}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],s=a[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),l="/*# ".concat(d," */"),u=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(u).concat([l]).join("\n")}return[i].join("\n")}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},5113:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d00fde534b9a762845437465e1545a24.svg"},1403:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},9048:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},783:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"afc284d3c92092876cda0422f86ad37f.svg"},1932:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},7055:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"acdbe098fa549bbb607f0a7dd8d75cad.svg"},1694:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"521d319ee4d28d3f4355d188bb7c3fef.svg"},6580:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d00fde534b9a762845437465e1545a24.svg"},9872:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"6e74da705e57d1046996312dd5208507.svg"},3646:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"ba295ad459417d5f157ea6aeb689f74a.svg"},9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,a){"use strict";var i=[],s=Object.getPrototypeOf,o=i.slice,d=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},l=i.push,u=i.indexOf,c={},m=c.toString,_=c.hasOwnProperty,p=_.toString,f=p.call(Object),h={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},k=r.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function M(e,t,n){var r,a,i=(n=n||k).createElement("script");if(i.text=e,t)for(r in b)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);n.head.appendChild(i).parentNode.removeChild(i)}function A(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[m.call(e)]||"object":typeof e}var w="3.6.0",L=function(e,t){return new L.fn.init(e,t)};function Y(e){var t=!!e&&"length"in e&&e.length,n=A(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}L.fn=L.prototype={jquery:w,constructor:L,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=L.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return L.each(this,e)},map:function(e){return this.pushStack(L.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(L.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(L.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:i.sort,splice:i.splice},L.extend=L.fn.extend=function(){var e,t,n,r,a,i,s=arguments[0]||{},o=1,d=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[o]||{},o++),"object"==typeof s||g(s)||(s={}),o===d&&(s=this,o--);o<d;o++)if(null!=(e=arguments[o]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(l&&r&&(L.isPlainObject(r)||(a=Array.isArray(r)))?(n=s[t],i=a&&!Array.isArray(n)?[]:a||L.isPlainObject(n)?n:{},a=!1,s[t]=L.extend(l,i,r)):void 0!==r&&(s[t]=r));return s},L.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==m.call(e)||(t=s(e))&&("function"!=typeof(n=_.call(t,"constructor")&&t.constructor)||p.call(n)!==f))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){M(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(Y(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(Y(Object(e))?L.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,s=!n;a<i;a++)!t(e[a],a)!==s&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,s=[];if(Y(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&s.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&s.push(a);return d(s)},guid:1,support:h}),"function"==typeof Symbol&&(L.fn[Symbol.iterator]=i[Symbol.iterator]),L.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var x=function(e){var t,n,r,a,i,s,o,d,l,u,c,m,_,p,f,h,g,y,k,b="sizzle"+1*new Date,M=e.document,A=0,w=0,L=de(),Y=de(),x=de(),v=de(),C=function(e,t){return e===t&&(c=!0),0},D={}.hasOwnProperty,T=[],B=T.pop,S=T.push,j=T.push,H=T.slice,E=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},W="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\[[\\x20\\t\\r\\n\\f]*("+P+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+O+"*\\]",z=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",N=new RegExp(O+"+","g"),I=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),R=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),q=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(O+"|>"),J=new RegExp(z),Z=new RegExp("^"+P+"$"),V={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+W+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},G=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){m()},se=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(T=H.call(M.childNodes),M.childNodes),T[M.childNodes.length].nodeType}catch(e){j={apply:T.length?function(e,t){S.apply(e,H.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,a){var i,o,l,u,c,p,g,y=t&&t.ownerDocument,M=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==M&&9!==M&&11!==M)return r;if(!a&&(m(t),t=t||_,f)){if(11!==M&&(c=K.exec(e)))if(i=c[1]){if(9===M){if(!(l=t.getElementById(i)))return r;if(l.id===i)return r.push(l),r}else if(y&&(l=y.getElementById(i))&&k(t,l)&&l.id===i)return r.push(l),r}else{if(c[2])return j.apply(r,t.getElementsByTagName(e)),r;if((i=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!v[e+" "]&&(!h||!h.test(e))&&(1!==M||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===M&&(U.test(e)||q.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(re,ae):t.setAttribute("id",u=b)),o=(p=s(e)).length;o--;)p[o]=(u?"#"+u:":scope")+" "+ke(p[o]);g=p.join(",")}try{return j.apply(r,y.querySelectorAll(g)),r}catch(t){v(e,!0)}finally{u===b&&t.removeAttribute("id")}}}return d(e.replace(I,"$1"),t,r,a)}function de(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function le(e){return e[b]=!0,e}function ue(e){var t=_.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function me(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function _e(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return le((function(t){return t=+t,le((function(n,r){for(var a,i=e([],n.length,t),s=i.length;s--;)n[a=i[s]]&&(n[a]=!(r[a]=n[a]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},i=oe.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!G.test(t||n&&n.nodeName||"HTML")},m=oe.setDocument=function(e){var t,a,s=e?e.ownerDocument||e:M;return s!=_&&9===s.nodeType&&s.documentElement?(p=(_=s).documentElement,f=!i(_),M!=_&&(a=_.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",ie,!1):a.attachEvent&&a.attachEvent("onunload",ie)),n.scope=ue((function(e){return p.appendChild(e).appendChild(_.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(_.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=$.test(_.getElementsByClassName),n.getById=ue((function(e){return p.appendChild(e).id=b,!_.getElementsByName||!_.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[a++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&f)return t.getElementsByClassName(e)},g=[],h=[],(n.qsa=$.test(_.querySelectorAll))&&(ue((function(e){var t;p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+W+")"),e.querySelectorAll("[id~="+b+"-]").length||h.push("~="),(t=_.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=_.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")}))),(n.matchesSelector=$.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",z)})),h=h.length&&new RegExp(h.join("|")),g=g.length&&new RegExp(g.join("|")),t=$.test(p.compareDocumentPosition),k=t||$.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return c=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==_||e.ownerDocument==M&&k(M,e)?-1:t==_||t.ownerDocument==M&&k(M,t)?1:u?E(u,e)-E(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,r=0,a=e.parentNode,i=t.parentNode,s=[e],o=[t];if(!a||!i)return e==_?-1:t==_?1:a?-1:i?1:u?E(u,e)-E(u,t):0;if(a===i)return me(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[r]===o[r];)r++;return r?me(s[r],o[r]):s[r]==M?-1:o[r]==M?1:0},_):_},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(m(e),n.matchesSelector&&f&&!v[t+" "]&&(!g||!g.test(t))&&(!h||!h.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){v(t,!0)}return oe(t,_,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!=_&&m(e),k(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=_&&m(e);var a=r.attrHandle[t.toLowerCase()],i=a&&D.call(r.attrHandle,t.toLowerCase())?a(e,t,!f):void 0;return void 0!==i?i:n.attributes||!f?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(re,ae)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],a=0,i=0;if(c=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(C),c){for(;t=e[i++];)t===e[i]&&(a=r.push(i));for(;a--;)e.splice(r[a],1)}return u=null,e},a=oe.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:le,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&J.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=L[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+O+"|$)"))&&L(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var a=oe.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(N," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,d){var l,u,c,m,_,p,f=i!==s?"nextSibling":"previousSibling",h=t.parentNode,g=o&&t.nodeName.toLowerCase(),y=!d&&!o,k=!1;if(h){if(i){for(;f;){for(m=t;m=m[f];)if(o?m.nodeName.toLowerCase()===g:1===m.nodeType)return!1;p=f="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?h.firstChild:h.lastChild],s&&y){for(k=(_=(l=(u=(c=(m=h)[b]||(m[b]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===A&&l[1])&&l[2],m=_&&h.childNodes[_];m=++_&&m&&m[f]||(k=_=0)||p.pop();)if(1===m.nodeType&&++k&&m===t){u[e]=[A,_,k];break}}else if(y&&(k=_=(l=(u=(c=(m=t)[b]||(m[b]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===A&&l[1]),!1===k)for(;(m=++_&&m&&m[f]||(k=_=0)||p.pop())&&((o?m.nodeName.toLowerCase()!==g:1!==m.nodeType)||!++k||(y&&((u=(c=m[b]||(m[b]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]=[A,k]),m!==t)););return(k-=a)===r||k%r==0&&k/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return a[b]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var r,i=a(e,t),s=i.length;s--;)e[r=E(e,i[s])]=!(n[r]=i[s])})):function(e){return a(e,0,n)}):a}},pseudos:{not:le((function(e){var t=[],n=[],r=o(e.replace(I,"$1"));return r[b]?le((function(e,t,n,a){for(var i,s=r(e,null,a,[]),o=e.length;o--;)(i=s[o])&&(e[o]=!(t[o]=i))})):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return oe(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||a(t)).indexOf(e)>-1}})),lang:le((function(e){return Z.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=f?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===_.activeElement&&(!_.hasFocus||_.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he((function(){return[0]})),last:he((function(e,t){return[t-1]})),eq:he((function(e,t,n){return[n<0?n+t:n]})),even:he((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:he((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:he((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:he((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=_e(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}function ke(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,a=t.next,i=a||r,s=n&&"parentNode"===i,o=w++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,a);return!1}:function(t,n,d){var l,u,c,m=[A,o];if(d){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,d))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(u=(c=t[b]||(t[b]={}))[t.uniqueID]||(c[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=u[i])&&l[0]===A&&l[1]===o)return m[2]=l[2];if(u[i]=m,m[2]=e(t,n,d))return!0}return!1}}function Me(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function Ae(e,t,n,r,a){for(var i,s=[],o=0,d=e.length,l=null!=t;o<d;o++)(i=e[o])&&(n&&!n(i,r,a)||(s.push(i),l&&t.push(o)));return s}function we(e,t,n,r,a,i){return r&&!r[b]&&(r=we(r)),a&&!a[b]&&(a=we(a,i)),le((function(i,s,o,d){var l,u,c,m=[],_=[],p=s.length,f=i||function(e,t,n){for(var r=0,a=t.length;r<a;r++)oe(e,t[r],n);return n}(t||"*",o.nodeType?[o]:o,[]),h=!e||!i&&t?f:Ae(f,m,e,o,d),g=n?a||(i?e:p||r)?[]:s:h;if(n&&n(h,g,o,d),r)for(l=Ae(g,_),r(l,[],o,d),u=l.length;u--;)(c=l[u])&&(g[_[u]]=!(h[_[u]]=c));if(i){if(a||e){if(a){for(l=[],u=g.length;u--;)(c=g[u])&&l.push(h[u]=c);a(null,g=[],l,d)}for(u=g.length;u--;)(c=g[u])&&(l=a?E(i,c):m[u])>-1&&(i[l]=!(s[l]=c))}}else g=Ae(g===s?g.splice(p,g.length):g),a?a(null,s,g,d):j.apply(s,g)}))}function Le(e){for(var t,n,a,i=e.length,s=r.relative[e[0].type],o=s||r.relative[" "],d=s?1:0,u=be((function(e){return e===t}),o,!0),c=be((function(e){return E(t,e)>-1}),o,!0),m=[function(e,n,r){var a=!s&&(r||n!==l)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,a}];d<i;d++)if(n=r.relative[e[d].type])m=[be(Me(m),n)];else{if((n=r.filter[e[d].type].apply(null,e[d].matches))[b]){for(a=++d;a<i&&!r.relative[e[a].type];a++);return we(d>1&&Me(m),d>1&&ke(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(I,"$1"),n,d<a&&Le(e.slice(d,a)),a<i&&Le(e=e.slice(a)),a<i&&ke(e))}m.push(n)}return Me(m)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,s=oe.tokenize=function(e,t){var n,a,i,s,o,d,l,u=Y[e+" "];if(u)return t?0:u.slice(0);for(o=e,d=[],l=r.preFilter;o;){for(s in n&&!(a=R.exec(o))||(a&&(o=o.slice(a[0].length)||o),d.push(i=[])),n=!1,(a=q.exec(o))&&(n=a.shift(),i.push({value:n,type:a[0].replace(I," ")}),o=o.slice(n.length)),r.filter)!(a=V[s].exec(o))||l[s]&&!(a=l[s](a))||(n=a.shift(),i.push({value:n,type:s,matches:a}),o=o.slice(n.length));if(!n)break}return t?o.length:o?oe.error(e):Y(e,d).slice(0)},o=oe.compile=function(e,t){var n,a=[],i=[],o=x[e+" "];if(!o){for(t||(t=s(e)),n=t.length;n--;)(o=Le(t[n]))[b]?a.push(o):i.push(o);(o=x(e,function(e,t){var n=t.length>0,a=e.length>0,i=function(i,s,o,d,u){var c,p,h,g=0,y="0",k=i&&[],b=[],M=l,w=i||a&&r.find.TAG("*",u),L=A+=null==M?1:Math.random()||.1,Y=w.length;for(u&&(l=s==_||s||u);y!==Y&&null!=(c=w[y]);y++){if(a&&c){for(p=0,s||c.ownerDocument==_||(m(c),o=!f);h=e[p++];)if(h(c,s||_,o)){d.push(c);break}u&&(A=L)}n&&((c=!h&&c)&&g--,i&&k.push(c))}if(g+=y,n&&y!==g){for(p=0;h=t[p++];)h(k,b,s,o);if(i){if(g>0)for(;y--;)k[y]||b[y]||(b[y]=B.call(d));b=Ae(b)}j.apply(d,b),u&&!i&&b.length>0&&g+t.length>1&&oe.uniqueSort(d)}return u&&(A=L,l=M),k};return n?le(i):i}(i,a))).selector=e}return o},d=oe.select=function(e,t,n,a){var i,d,l,u,c,m="function"==typeof e&&e,_=!a&&s(e=m.selector||e);if(n=n||[],1===_.length){if((d=_[0]=_[0].slice(0)).length>2&&"ID"===(l=d[0]).type&&9===t.nodeType&&f&&r.relative[d[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;m&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(i=V.needsContext.test(e)?0:d.length;i--&&(l=d[i],!r.relative[u=l.type]);)if((c=r.find[u])&&(a=c(l.matches[0].replace(te,ne),ee.test(d[0].type)&&ge(t.parentNode)||t))){if(d.splice(i,1),!(e=a.length&&ke(d)))return j.apply(n,a),n;break}}return(m||o(e,_))(a,t,!f,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(C).join("")===b,n.detectDuplicates=!!c,m(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(_.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||ce(W,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),oe}(r);L.find=x,L.expr=x.selectors,L.expr[":"]=L.expr.pseudos,L.uniqueSort=L.unique=x.uniqueSort,L.text=x.getText,L.isXMLDoc=x.isXML,L.contains=x.contains,L.escapeSelector=x.escape;var v=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&L(e).is(n))break;r.push(e)}return r},C=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=L.expr.match.needsContext;function T(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var B=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function S(e,t,n){return g(t)?L.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?L.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?L.grep(e,(function(e){return u.call(t,e)>-1!==n})):L.filter(t,e,n)}L.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?L.find.matchesSelector(r,e)?[r]:[]:L.find.matches(e,L.grep(t,(function(e){return 1===e.nodeType})))},L.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(L(e).filter((function(){for(t=0;t<r;t++)if(L.contains(a[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)L.find(e,a[t],n);return r>1?L.uniqueSort(n):n},filter:function(e){return this.pushStack(S(this,e||[],!1))},not:function(e){return this.pushStack(S(this,e||[],!0))},is:function(e){return!!S(this,"string"==typeof e&&D.test(e)?L(e):e||[],!1).length}});var j,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(L.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||j,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:H.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof L?t[0]:t,L.merge(this,L.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:k,!0)),B.test(r[1])&&L.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=k.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(L):L.makeArray(e,this)}).prototype=L.fn,j=L(k);var E=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}L.fn.extend({has:function(e){var t=L(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(L.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,a=this.length,i=[],s="string"!=typeof e&&L(e);if(!D.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&L.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?L.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(L(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(L.uniqueSort(L.merge(this.get(),L(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),L.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return v(e,"parentNode")},parentsUntil:function(e,t,n){return v(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return v(e,"nextSibling")},prevAll:function(e){return v(e,"previousSibling")},nextUntil:function(e,t,n){return v(e,"nextSibling",n)},prevUntil:function(e,t,n){return v(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(T(e,"template")&&(e=e.content||e),L.merge([],e.childNodes))}},(function(e,t){L.fn[e]=function(n,r){var a=L.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=L.filter(r,a)),this.length>1&&(W[e]||L.uniqueSort(a),E.test(e)&&a.reverse()),this.pushStack(a)}}));var P=/[^\x20\t\r\n\f]+/g;function F(e){return e}function z(e){throw e}function N(e,t,n,r){var a;try{e&&g(a=e.promise)?a.call(e).done(t).fail(n):e&&g(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}L.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return L.each(e.match(P)||[],(function(e,n){t[n]=!0})),t}(e):L.extend({},e);var t,n,r,a,i=[],s=[],o=-1,d=function(){for(a=a||e.once,r=t=!0;s.length;o=-1)for(n=s.shift();++o<i.length;)!1===i[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=i.length,n=!1);e.memory||(n=!1),t=!1,a&&(i=n?[]:"")},l={add:function(){return i&&(n&&!t&&(o=i.length-1,s.push(n)),function t(n){L.each(n,(function(n,r){g(r)?e.unique&&l.has(r)||i.push(r):r&&r.length&&"string"!==A(r)&&t(r)}))}(arguments),n&&!t&&d()),this},remove:function(){return L.each(arguments,(function(e,t){for(var n;(n=L.inArray(t,i,n))>-1;)i.splice(n,1),n<=o&&o--})),this},has:function(e){return e?L.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return a=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return a=s=[],n||t||(i=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||d()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},L.extend({Deferred:function(e){var t=[["notify","progress",L.Callbacks("memory"),L.Callbacks("memory"),2],["resolve","done",L.Callbacks("once memory"),L.Callbacks("once memory"),0,"resolved"],["reject","fail",L.Callbacks("once memory"),L.Callbacks("once memory"),1,"rejected"]],n="pending",a={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return L.Deferred((function(n){L.each(t,(function(t,r){var a=g(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=a&&a.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,a){var i=0;function s(e,t,n,a){return function(){var o=this,d=arguments,l=function(){var r,l;if(!(e<i)){if((r=n.apply(o,d))===t.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,g(l)?a?l.call(r,s(i,t,F,a),s(i,t,z,a)):(i++,l.call(r,s(i,t,F,a),s(i,t,z,a),s(i,t,F,t.notifyWith))):(n!==F&&(o=void 0,d=[r]),(a||t.resolveWith)(o,d))}},u=a?l:function(){try{l()}catch(r){L.Deferred.exceptionHook&&L.Deferred.exceptionHook(r,u.stackTrace),e+1>=i&&(n!==z&&(o=void 0,d=[r]),t.rejectWith(o,d))}};e?u():(L.Deferred.getStackHook&&(u.stackTrace=L.Deferred.getStackHook()),r.setTimeout(u))}}return L.Deferred((function(r){t[0][3].add(s(0,r,g(a)?a:F,r.notifyWith)),t[1][3].add(s(0,r,g(e)?e:F)),t[2][3].add(s(0,r,g(n)?n:z))})).promise()},promise:function(e){return null!=e?L.extend(e,a):a}},i={};return L.each(t,(function(e,r){var s=r[2],o=r[5];a[r[1]]=s.add,o&&s.add((function(){n=o}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=s.fireWith})),a.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),a=o.call(arguments),i=L.Deferred(),s=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?o.call(arguments):n,--t||i.resolveWith(r,a)}};if(t<=1&&(N(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||g(a[n]&&a[n].then)))return i.then();for(;n--;)N(a[n],s(n),i.reject);return i.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;L.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&I.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},L.readyException=function(e){r.setTimeout((function(){throw e}))};var R=L.Deferred();function q(){k.removeEventListener("DOMContentLoaded",q),r.removeEventListener("load",q),L.ready()}L.fn.ready=function(e){return R.then(e).catch((function(e){L.readyException(e)})),this},L.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--L.readyWait:L.isReady)||(L.isReady=!0,!0!==e&&--L.readyWait>0||R.resolveWith(k,[L]))}}),L.ready.then=R.then,"complete"===k.readyState||"loading"!==k.readyState&&!k.documentElement.doScroll?r.setTimeout(L.ready):(k.addEventListener("DOMContentLoaded",q),r.addEventListener("load",q));var U=function(e,t,n,r,a,i,s){var o=0,d=e.length,l=null==n;if("object"===A(n))for(o in a=!0,n)U(e,t,o,n[o],!0,i,s);else if(void 0!==r&&(a=!0,g(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(L(e),n)})),t))for(;o<d;o++)t(e[o],n,s?r:r.call(e[o],o,t(e[o],n)));return a?e:l?t.call(e):d?t(e[0],n):i},J=/^-ms-/,Z=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(J,"ms-").replace(Z,V)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=L.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[G(t)]=n;else for(r in t)a[G(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(P)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||L.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!L.isEmptyObject(t)}};var $=new X,K=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}L.extend({hasData:function(e){return K.hasData(e)||$.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return $.access(e,t,n)},_removeData:function(e,t){$.remove(e,t)}}),L.fn.extend({data:function(e,t){var n,r,a,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(a=K.get(i),1===i.nodeType&&!$.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(i,r,a[r]));$.set(i,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each((function(){K.set(this,e)})):U(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=K.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),L.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=$.get(e,t),n&&(!r||Array.isArray(n)?r=$.access(e,t,L.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=L.queue(e,t),r=n.length,a=n.shift(),i=L._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,(function(){L.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $.get(e,n)||$.access(e,n,{empty:L.Callbacks("once memory").add((function(){$.remove(e,[t+"queue",n])}))})}}),L.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?L.queue(this[0],e):void 0===t?this:this.each((function(){var n=L.queue(this,e,t);L._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&L.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){L.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=L.Deferred(),i=this,s=this.length,o=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=$.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(o));return o(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=k.documentElement,oe=function(e){return L.contains(e.ownerDocument,e)},de={composed:!0};se.getRootNode&&(oe=function(e){return L.contains(e.ownerDocument,e)||e.getRootNode(de)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===L.css(e,"display")};function ue(e,t,n,r){var a,i,s=20,o=r?function(){return r.cur()}:function(){return L.css(e,t,"")},d=o(),l=n&&n[3]||(L.cssNumber[t]?"":"px"),u=e.nodeType&&(L.cssNumber[t]||"px"!==l&&+d)&&ae.exec(L.css(e,t));if(u&&u[3]!==l){for(d/=2,l=l||u[3],u=+d||1;s--;)L.style(e,t,u+l),(1-i)*(1-(i=o()/d||.5))<=0&&(s=0),u/=i;u*=2,L.style(e,t,u+l),n=n||[]}return n&&(u=+u||+d||0,a=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=u,r.end=a)),a}var ce={};function me(e){var t,n=e.ownerDocument,r=e.nodeName,a=ce[r];return a||(t=n.body.appendChild(n.createElement(r)),a=L.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),ce[r]=a,a)}function _e(e,t){for(var n,r,a=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=$.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&le(r)&&(a[i]=me(r))):"none"!==n&&(a[i]="none",$.set(r,"display",n)));for(i=0;i<s;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}L.fn.extend({show:function(){return _e(this,!0)},hide:function(){return _e(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?L(this).show():L(this).hide()}))}});var pe,fe,he=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;pe=k.createDocumentFragment().appendChild(k.createElement("div")),(fe=k.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),pe.appendChild(fe),h.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",h.option=!!pe.lastChild;var ke={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&T(e,t)?L.merge([e],n):n}function Me(e,t){for(var n=0,r=e.length;n<r;n++)$.set(e[n],"globalEval",!t||$.get(t[n],"globalEval"))}ke.tbody=ke.tfoot=ke.colgroup=ke.caption=ke.thead,ke.th=ke.td,h.option||(ke.optgroup=ke.option=[1,"<select multiple='multiple'>","</select>"]);var Ae=/<|&#?\w+;/;function we(e,t,n,r,a){for(var i,s,o,d,l,u,c=t.createDocumentFragment(),m=[],_=0,p=e.length;_<p;_++)if((i=e[_])||0===i)if("object"===A(i))L.merge(m,i.nodeType?[i]:i);else if(Ae.test(i)){for(s=s||c.appendChild(t.createElement("div")),o=(ge.exec(i)||["",""])[1].toLowerCase(),d=ke[o]||ke._default,s.innerHTML=d[1]+L.htmlPrefilter(i)+d[2],u=d[0];u--;)s=s.lastChild;L.merge(m,s.childNodes),(s=c.firstChild).textContent=""}else m.push(t.createTextNode(i));for(c.textContent="",_=0;i=m[_++];)if(r&&L.inArray(i,r)>-1)a&&a.push(i);else if(l=oe(i),s=be(c.appendChild(i),"script"),l&&Me(s),n)for(u=0;i=s[u++];)ye.test(i.type||"")&&n.push(i);return c}var Le=/^([^.]*)(?:\.(.+)|)/;function Ye(){return!0}function xe(){return!1}function ve(e,t){return e===function(){try{return k.activeElement}catch(e){}}()==("focus"===t)}function Ce(e,t,n,r,a,i){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(r=r||n,n=void 0),t)Ce(e,o,n,r,t[o],i);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=xe;else if(!a)return e;return 1===i&&(s=a,(a=function(e){return L().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=L.guid++)),e.each((function(){L.event.add(this,t,a,r,n)}))}function De(e,t,n){n?($.set(e,t,!1),L.event.add(e,t,{namespace:!1,handler:function(e){var r,a,i=$.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(L.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),$.set(this,t,i),r=n(this,t),this[t](),i!==(a=$.get(this,t))||r?$.set(this,t,!1):a={},i!==a)return e.stopImmediatePropagation(),e.preventDefault(),a&&a.value}else i.length&&($.set(this,t,{value:L.event.trigger(L.extend(i[0],L.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===$.get(e,t)&&L.event.add(e,t,Ye)}L.event={global:{},add:function(e,t,n,r,a){var i,s,o,d,l,u,c,m,_,p,f,h=$.get(e);if(Q(e))for(n.handler&&(n=(i=n).handler,a=i.selector),a&&L.find.matchesSelector(se,a),n.guid||(n.guid=L.guid++),(d=h.events)||(d=h.events=Object.create(null)),(s=h.handle)||(s=h.handle=function(t){return void 0!==L&&L.event.triggered!==t.type?L.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(P)||[""]).length;l--;)_=f=(o=Le.exec(t[l])||[])[1],p=(o[2]||"").split(".").sort(),_&&(c=L.event.special[_]||{},_=(a?c.delegateType:c.bindType)||_,c=L.event.special[_]||{},u=L.extend({type:_,origType:f,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&L.expr.match.needsContext.test(a),namespace:p.join(".")},i),(m=d[_])||((m=d[_]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,r,p,s)||e.addEventListener&&e.addEventListener(_,s)),c.add&&(c.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),a?m.splice(m.delegateCount++,0,u):m.push(u),L.event.global[_]=!0)},remove:function(e,t,n,r,a){var i,s,o,d,l,u,c,m,_,p,f,h=$.hasData(e)&&$.get(e);if(h&&(d=h.events)){for(l=(t=(t||"").match(P)||[""]).length;l--;)if(_=f=(o=Le.exec(t[l])||[])[1],p=(o[2]||"").split(".").sort(),_){for(c=L.event.special[_]||{},m=d[_=(r?c.delegateType:c.bindType)||_]||[],o=o[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=m.length;i--;)u=m[i],!a&&f!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(m.splice(i,1),u.selector&&m.delegateCount--,c.remove&&c.remove.call(e,u));s&&!m.length&&(c.teardown&&!1!==c.teardown.call(e,p,h.handle)||L.removeEvent(e,_,h.handle),delete d[_])}else for(_ in d)L.event.remove(e,_+t[l],n,r,!0);L.isEmptyObject(d)&&$.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,s,o=new Array(arguments.length),d=L.event.fix(e),l=($.get(this,"events")||Object.create(null))[d.type]||[],u=L.event.special[d.type]||{};for(o[0]=d,t=1;t<arguments.length;t++)o[t]=arguments[t];if(d.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,d)){for(s=L.event.handlers.call(this,d,l),t=0;(a=s[t++])&&!d.isPropagationStopped();)for(d.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==i.namespace&&!d.rnamespace.test(i.namespace)||(d.handleObj=i,d.data=i.data,void 0!==(r=((L.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,o))&&!1===(d.result=r)&&(d.preventDefault(),d.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,d),d.result}},handlers:function(e,t){var n,r,a,i,s,o=[],d=t.delegateCount,l=e.target;if(d&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(i=[],s={},n=0;n<d;n++)void 0===s[a=(r=t[n]).selector+" "]&&(s[a]=r.needsContext?L(a,this).index(l)>-1:L.find(a,this,null,[l]).length),s[a]&&i.push(r);i.length&&o.push({elem:l,handlers:i})}return l=this,d<t.length&&o.push({elem:l,handlers:t.slice(d)}),o},addProp:function(e,t){Object.defineProperty(L.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[L.expando]?e:new L.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&T(t,"input")&&De(t,"click",Ye),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&T(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&T(t,"input")&&$.get(t,"click")||T(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},L.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},L.Event=function(e,t){if(!(this instanceof L.Event))return new L.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ye:xe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&L.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[L.expando]=!0},L.Event.prototype={constructor:L.Event,isDefaultPrevented:xe,isPropagationStopped:xe,isImmediatePropagationStopped:xe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ye,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ye,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ye,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},L.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},L.event.addProp),L.each({focus:"focusin",blur:"focusout"},(function(e,t){L.event.special[e]={setup:function(){return De(this,e,ve),!1},trigger:function(){return De(this,e),!0},_default:function(){return!0},delegateType:t}})),L.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){L.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,a=e.relatedTarget,i=e.handleObj;return a&&(a===r||L.contains(r,a))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),L.fn.extend({on:function(e,t,n,r){return Ce(this,e,t,n,r)},one:function(e,t,n,r){return Ce(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,L(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=xe),this.each((function(){L.event.remove(this,e,n,t)}))}});var Te=/<script|<style|<link/i,Be=/checked\s*(?:[^=]|=\s*.checked.)/i,Se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return T(e,"table")&&T(11!==t.nodeType?t:t.firstChild,"tr")&&L(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ee(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,t){var n,r,a,i,s,o;if(1===t.nodeType){if($.hasData(e)&&(o=$.get(e).events))for(a in $.remove(t,"handle events"),o)for(n=0,r=o[a].length;n<r;n++)L.event.add(t,a,o[a][n]);K.hasData(e)&&(i=K.access(e),s=L.extend({},i),K.set(t,s))}}function Oe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&he.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Pe(e,t,n,r){t=d(t);var a,i,s,o,l,u,c=0,m=e.length,_=m-1,p=t[0],f=g(p);if(f||m>1&&"string"==typeof p&&!h.checkClone&&Be.test(p))return e.each((function(a){var i=e.eq(a);f&&(t[0]=p.call(this,a,i.html())),Pe(i,t,n,r)}));if(m&&(i=(a=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=i),i||r)){for(o=(s=L.map(be(a,"script"),He)).length;c<m;c++)l=a,c!==_&&(l=L.clone(l,!0,!0),o&&L.merge(s,be(l,"script"))),n.call(e[c],l,c);if(o)for(u=s[s.length-1].ownerDocument,L.map(s,Ee),c=0;c<o;c++)l=s[c],ye.test(l.type||"")&&!$.access(l,"globalEval")&&L.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?L._evalUrl&&!l.noModule&&L._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):M(l.textContent.replace(Se,""),l,u))}return e}function Fe(e,t,n){for(var r,a=t?L.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||L.cleanData(be(r)),r.parentNode&&(n&&oe(r)&&Me(be(r,"script")),r.parentNode.removeChild(r));return e}L.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,a,i,s,o=e.cloneNode(!0),d=oe(e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||L.isXMLDoc(e)))for(s=be(o),r=0,a=(i=be(e)).length;r<a;r++)Oe(i[r],s[r]);if(t)if(n)for(i=i||be(e),s=s||be(o),r=0,a=i.length;r<a;r++)We(i[r],s[r]);else We(e,o);return(s=be(o,"script")).length>0&&Me(s,!d&&be(e,"script")),o},cleanData:function(e){for(var t,n,r,a=L.event.special,i=0;void 0!==(n=e[i]);i++)if(Q(n)){if(t=n[$.expando]){if(t.events)for(r in t.events)a[r]?L.event.remove(n,r):L.removeEvent(n,r,t.handle);n[$.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),L.fn.extend({detach:function(e){return Fe(this,e,!0)},remove:function(e){return Fe(this,e)},text:function(e){return U(this,(function(e){return void 0===e?L.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Pe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Pe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(L.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return L.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Te.test(e)&&!ke[(ge.exec(e)||["",""])[1].toLowerCase()]){e=L.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(L.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Pe(this,arguments,(function(t){var n=this.parentNode;L.inArray(this,e)<0&&(L.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),L.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){L.fn[e]=function(e){for(var n,r=[],a=L(e),i=a.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),L(a[s])[t](n),l.apply(r,n.get());return this.pushStack(r)}}));var ze=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ne=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Ie=function(e,t,n){var r,a,i={};for(a in t)i[a]=e.style[a],e.style[a]=t[a];for(a in r=n.call(e),t)e.style[a]=i[a];return r},Re=new RegExp(ie.join("|"),"i");function qe(e,t,n){var r,a,i,s,o=e.style;return(n=n||Ne(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||oe(e)||(s=L.style(e,t)),!h.pixelBoxStyles()&&ze.test(s)&&Re.test(t)&&(r=o.width,a=o.minWidth,i=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=r,o.minWidth=a,o.maxWidth=i)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(l).appendChild(u);var e=r.getComputedStyle(u);n="1%"!==e.top,d=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),a=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),se.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var n,a,i,s,o,d,l=k.createElement("div"),u=k.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===u.style.backgroundClip,L.extend(h,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),d},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,a;return null==o&&(e=k.createElement("table"),t=k.createElement("tr"),n=k.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),a=r.getComputedStyle(t),o=parseInt(a.height,10)+parseInt(a.borderTopWidth,10)+parseInt(a.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),o}}))}();var Je=["Webkit","Moz","ms"],Ze=k.createElement("div").style,Ve={};function Ge(e){return L.cssProps[e]||Ve[e]||(e in Ze?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in Ze)return e}(e)||e)}var Qe=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,$e={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,a,i){var s="width"===t?1:0,o=0,d=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(d+=L.css(e,n+ie[s],!0,a)),r?("content"===n&&(d-=L.css(e,"padding"+ie[s],!0,a)),"margin"!==n&&(d-=L.css(e,"border"+ie[s]+"Width",!0,a))):(d+=L.css(e,"padding"+ie[s],!0,a),"padding"!==n?d+=L.css(e,"border"+ie[s]+"Width",!0,a):o+=L.css(e,"border"+ie[s]+"Width",!0,a));return!r&&i>=0&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-d-o-.5))||0),d}function nt(e,t,n){var r=Ne(e),a=(!h.boxSizingReliable()||n)&&"border-box"===L.css(e,"boxSizing",!1,r),i=a,s=qe(e,t,r),o="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(s)){if(!n)return s;s="auto"}return(!h.boxSizingReliable()&&a||!h.reliableTrDimensions()&&T(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===L.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===L.css(e,"boxSizing",!1,r),(i=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+tt(e,t,n||(a?"border":"content"),i,r,s)+"px"}function rt(e,t,n,r,a){return new rt.prototype.init(e,t,n,r,a)}L.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,s,o=G(t),d=Xe.test(t),l=e.style;if(d||(t=Ge(o)),s=L.cssHooks[t]||L.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(a=s.get(e,!1,r))?a:l[t];"string"==(i=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=ue(e,t,a),i="number"),null!=n&&n==n&&("number"!==i||d||(n+=a&&a[3]||(L.cssNumber[o]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(d?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var a,i,s,o=G(t);return Xe.test(t)||(t=Ge(o)),(s=L.cssHooks[t]||L.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,n)),void 0===a&&(a=qe(e,t,r)),"normal"===a&&t in Ke&&(a=Ke[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),L.each(["height","width"],(function(e,t){L.cssHooks[t]={get:function(e,n,r){if(n)return!Qe.test(L.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):Ie(e,$e,(function(){return nt(e,t,r)}))},set:function(e,n,r){var a,i=Ne(e),s=!h.scrollboxSize()&&"absolute"===i.position,o=(s||r)&&"border-box"===L.css(e,"boxSizing",!1,i),d=r?tt(e,t,r,o,i):0;return o&&s&&(d-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),d&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=L.css(e,t)),et(0,n,d)}}})),L.cssHooks.marginLeft=Ue(h.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),L.each({margin:"",padding:"",border:"Width"},(function(e,t){L.cssHooks[e+t]={expand:function(n){for(var r=0,a={},i="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+ie[r]+t]=i[r]||i[r-2]||i[0];return a}},"margin"!==e&&(L.cssHooks[e+t].set=et)})),L.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var r,a,i={},s=0;if(Array.isArray(t)){for(r=Ne(e),a=t.length;s<a;s++)i[t[s]]=L.css(e,t[s],!1,r);return i}return void 0!==n?L.style(e,t,n):L.css(e,t)}),e,t,arguments.length>1)}}),L.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||L.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(L.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=L.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=L.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){L.fx.step[e.prop]?L.fx.step[e.prop](e):1!==e.elem.nodeType||!L.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:L.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},L.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},L.fx=rt.prototype.init,L.fx.step={};var at,it,st=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function dt(){it&&(!1===k.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(dt):r.setTimeout(dt,L.fx.interval),L.fx.tick())}function lt(){return r.setTimeout((function(){at=void 0})),at=Date.now()}function ut(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=ie[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function ct(e,t,n){for(var r,a=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),i=0,s=a.length;i<s;i++)if(r=a[i].call(n,t,e))return r}function mt(e,t,n){var r,a,i=0,s=mt.prefilters.length,o=L.Deferred().always((function(){delete d.elem})),d=function(){if(a)return!1;for(var t=at||lt(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),i=0,s=l.tweens.length;i<s;i++)l.tweens[i].run(r);return o.notifyWith(e,[l,r,n]),r<1&&s?n:(s||o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l]),!1)},l=o.promise({elem:e,props:L.extend({},t),opts:L.extend(!0,{specialEasing:{},easing:L.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=L.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)l.tweens[n].run(1);return t?(o.notifyWith(e,[l,1,0]),o.resolveWith(e,[l,t])):o.rejectWith(e,[l,t]),this}}),u=l.props;for(function(e,t){var n,r,a,i,s;for(n in e)if(a=t[r=G(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=L.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}(u,l.opts.specialEasing);i<s;i++)if(r=mt.prefilters[i].call(l,e,u,l.opts))return g(r.stop)&&(L._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return L.map(u,ct,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),L.fx.timer(L.extend(d,{elem:e,anim:l,queue:l.opts.queue})),l}L.Animation=L.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(P);for(var n,r=0,a=e.length;r<a;r++)n=e[r],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,i,s,o,d,l,u,c="width"in t||"height"in t,m=this,_={},p=e.style,f=e.nodeType&&le(e),h=$.get(e,"fxshow");for(r in n.queue||(null==(s=L._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,m.always((function(){m.always((function(){s.unqueued--,L.queue(e,"fx").length||s.empty.fire()}))}))),t)if(a=t[r],st.test(a)){if(delete t[r],i=i||"toggle"===a,a===(f?"hide":"show")){if("show"!==a||!h||void 0===h[r])continue;f=!0}_[r]=h&&h[r]||L.style(e,r)}if((d=!L.isEmptyObject(t))||!L.isEmptyObject(_))for(r in c&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(l=h&&h.display)&&(l=$.get(e,"display")),"none"===(u=L.css(e,"display"))&&(l?u=l:(_e([e],!0),l=e.style.display||l,u=L.css(e,"display"),_e([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===L.css(e,"float")&&(d||(m.done((function(){p.display=l})),null==l&&(u=p.display,l="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",m.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),d=!1,_)d||(h?"hidden"in h&&(f=h.hidden):h=$.access(e,"fxshow",{display:l}),i&&(h.hidden=!f),f&&_e([e],!0),m.done((function(){for(r in f||_e([e]),$.remove(e,"fxshow"),_)L.style(e,r,_[r])}))),d=ct(f?h[r]:0,r,m),r in h||(h[r]=d.start,f&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),L.speed=function(e,t,n){var r=e&&"object"==typeof e?L.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return L.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in L.fx.speeds?r.duration=L.fx.speeds[r.duration]:r.duration=L.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&L.dequeue(this,r.queue)},r},L.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=L.isEmptyObject(e),i=L.speed(t,n,r),s=function(){var t=mt(this,L.extend({},e),i);(a||$.get(this,"finish"))&&t.stop(!0)};return s.finish=s,a||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,a=null!=e&&e+"queueHooks",i=L.timers,s=$.get(this);if(a)s[a]&&s[a].stop&&r(s[a]);else for(a in s)s[a]&&s[a].stop&&ot.test(a)&&r(s[a]);for(a=i.length;a--;)i[a].elem!==this||null!=e&&i[a].queue!==e||(i[a].anim.stop(n),t=!1,i.splice(a,1));!t&&n||L.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=$.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],i=L.timers,s=r?r.length:0;for(n.finish=!0,L.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),L.each(["toggle","show","hide"],(function(e,t){var n=L.fn[t];L.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,a)}})),L.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){L.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),L.timers=[],L.fx.tick=function(){var e,t=0,n=L.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||L.fx.stop(),at=void 0},L.fx.timer=function(e){L.timers.push(e),L.fx.start()},L.fx.interval=13,L.fx.start=function(){it||(it=!0,dt())},L.fx.stop=function(){it=null},L.fx.speeds={slow:600,fast:200,_default:400},L.fn.delay=function(e,t){return e=L.fx&&L.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var a=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(a)}}))},function(){var e=k.createElement("input"),t=k.createElement("select").appendChild(k.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=k.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var _t,pt=L.expr.attrHandle;L.fn.extend({attr:function(e,t){return U(this,L.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){L.removeAttr(this,e)}))}}),L.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?L.prop(e,t,n):(1===i&&L.isXMLDoc(e)||(a=L.attrHooks[t.toLowerCase()]||(L.expr.match.bool.test(t)?_t:void 0)),void 0!==n?null===n?void L.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=L.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&T(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(P);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),_t={set:function(e,t,n){return!1===t?L.removeAttr(e,n):e.setAttribute(n,n),n}},L.each(L.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=pt[t]||L.find.attr;pt[t]=function(e,t,r){var a,i,s=t.toLowerCase();return r||(i=pt[s],pt[s]=a,a=null!=n(e,t,r)?s:null,pt[s]=i),a}}));var ft=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function gt(e){return(e.match(P)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(P)||[]}L.fn.extend({prop:function(e,t){return U(this,L.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[L.propFix[e]||e]}))}}),L.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&L.isXMLDoc(e)||(t=L.propFix[t]||t,a=L.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=L.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(L.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),L.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){L.propFix[this.toLowerCase()]=this})),L.fn.extend({addClass:function(e){var t,n,r,a,i,s,o,d=0;if(g(e))return this.each((function(t){L(this).addClass(e.call(this,t,yt(this)))}));if((t=kt(e)).length)for(;n=this[d++];)if(a=yt(n),r=1===n.nodeType&&" "+gt(a)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(o=gt(r))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,r,a,i,s,o,d=0;if(g(e))return this.each((function(t){L(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=kt(e)).length)for(;n=this[d++];)if(a=yt(n),r=1===n.nodeType&&" "+gt(a)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");a!==(o=gt(r))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){L(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,a,i,s;if(r)for(a=0,i=L(this),s=kt(e);t=s[a++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&$.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":$.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+gt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;L.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=g(e),this.each((function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,L(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=L.map(a,(function(e){return null==e?"":e+""}))),(t=L.valHooks[this.type]||L.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))}))):a?(t=L.valHooks[a.type]||L.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(bt,""):null==n?"":n:void 0}}),L.extend({valHooks:{option:{get:function(e){var t=L.find.attr(e,"value");return null!=t?t:gt(L.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,s="select-one"===e.type,o=s?null:[],d=s?i+1:a.length;for(r=i<0?d:s?i:0;r<d;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(t=L(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,r,a=e.options,i=L.makeArray(t),s=a.length;s--;)((r=a[s]).selected=L.inArray(L.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),L.each(["radio","checkbox"],(function(){L.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=L.inArray(L(e).val(),t)>-1}},h.checkOn||(L.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),h.focusin="onfocusin"in r;var Mt=/^(?:focusinfocus|focusoutblur)$/,At=function(e){e.stopPropagation()};L.extend(L.event,{trigger:function(e,t,n,a){var i,s,o,d,l,u,c,m,p=[n||k],f=_.call(e,"type")?e.type:e,h=_.call(e,"namespace")?e.namespace.split("."):[];if(s=m=o=n=n||k,3!==n.nodeType&&8!==n.nodeType&&!Mt.test(f+L.event.triggered)&&(f.indexOf(".")>-1&&(h=f.split("."),f=h.shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[L.expando]?e:new L.Event(f,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:L.makeArray(t,[e]),c=L.event.special[f]||{},a||!c.trigger||!1!==c.trigger.apply(n,t))){if(!a&&!c.noBubble&&!y(n)){for(d=c.delegateType||f,Mt.test(d+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),o=s;o===(n.ownerDocument||k)&&p.push(o.defaultView||o.parentWindow||r)}for(i=0;(s=p[i++])&&!e.isPropagationStopped();)m=s,e.type=i>1?d:c.bindType||f,(u=($.get(s,"events")||Object.create(null))[e.type]&&$.get(s,"handle"))&&u.apply(s,t),(u=l&&s[l])&&u.apply&&Q(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=f,a||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!Q(n)||l&&g(n[f])&&!y(n)&&((o=n[l])&&(n[l]=null),L.event.triggered=f,e.isPropagationStopped()&&m.addEventListener(f,At),n[f](),e.isPropagationStopped()&&m.removeEventListener(f,At),L.event.triggered=void 0,o&&(n[l]=o)),e.result}},simulate:function(e,t,n){var r=L.extend(new L.Event,n,{type:e,isSimulated:!0});L.event.trigger(r,null,t)}}),L.fn.extend({trigger:function(e,t){return this.each((function(){L.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return L.event.trigger(e,t,n,!0)}}),h.focusin||L.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){L.event.simulate(t,e.target,L.event.fix(e))};L.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,a=$.access(r,t);a||r.addEventListener(e,n,!0),$.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,a=$.access(r,t)-1;a?$.access(r,t,a):(r.removeEventListener(e,n,!0),$.remove(r,t))}}}));var wt=r.location,Lt={guid:Date.now()},Yt=/\?/;L.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||L.error("Invalid XML: "+(n?L.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var xt=/\[\]$/,vt=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Tt(e,t,n,r){var a;if(Array.isArray(t))L.each(t,(function(t,a){n||xt.test(e)?r(e,a):Tt(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)}));else if(n||"object"!==A(t))r(e,t);else for(a in t)Tt(e+"["+a+"]",t[a],n,r)}L.param=function(e,t){var n,r=[],a=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!L.isPlainObject(e))L.each(e,(function(){a(this.name,this.value)}));else for(n in e)Tt(n,e[n],t,a);return r.join("&")},L.fn.extend({serialize:function(){return L.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=L.prop(this,"elements");return e?L.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!L(this).is(":disabled")&&Dt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!he.test(e))})).map((function(e,t){var n=L(this).val();return null==n?null:Array.isArray(n)?L.map(n,(function(e){return{name:t.name,value:e.replace(vt,"\r\n")}})):{name:t.name,value:n.replace(vt,"\r\n")}})).get()}});var Bt=/%20/g,St=/#.*$/,jt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Et=/^(?:GET|HEAD)$/,Wt=/^\/\//,Ot={},Pt={},Ft="*/".concat("*"),zt=k.createElement("a");function Nt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,i=t.toLowerCase().match(P)||[];if(g(n))for(;r=i[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function It(e,t,n,r){var a={},i=e===Pt;function s(o){var d;return a[o]=!0,L.each(e[o]||[],(function(e,o){var l=o(t,n,r);return"string"!=typeof l||i||a[l]?i?!(d=l):void 0:(t.dataTypes.unshift(l),s(l),!1)})),d}return s(t.dataTypes[0])||!a["*"]&&s("*")}function Rt(e,t){var n,r,a=L.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&L.extend(!0,e,r),e}zt.href=wt.href,L.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ft,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":L.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Rt(Rt(e,L.ajaxSettings),t):Rt(L.ajaxSettings,e)},ajaxPrefilter:Nt(Ot),ajaxTransport:Nt(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,a,i,s,o,d,l,u,c,m,_=L.ajaxSetup({},t),p=_.context||_,f=_.context&&(p.nodeType||p.jquery)?L(p):L.event,h=L.Deferred(),g=L.Callbacks("once memory"),y=_.statusCode||{},b={},M={},A="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Ht.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(e,t){return null==l&&(e=M[e.toLowerCase()]=M[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==l&&(_.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)w.always(e[w.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||A;return n&&n.abort(t),Y(0,t),this}};if(h.promise(w),_.url=((e||_.url||wt.href)+"").replace(Wt,wt.protocol+"//"),_.type=t.method||t.type||_.method||_.type,_.dataTypes=(_.dataType||"*").toLowerCase().match(P)||[""],null==_.crossDomain){d=k.createElement("a");try{d.href=_.url,d.href=d.href,_.crossDomain=zt.protocol+"//"+zt.host!=d.protocol+"//"+d.host}catch(e){_.crossDomain=!0}}if(_.data&&_.processData&&"string"!=typeof _.data&&(_.data=L.param(_.data,_.traditional)),It(Ot,_,t,w),l)return w;for(c in(u=L.event&&_.global)&&0==L.active++&&L.event.trigger("ajaxStart"),_.type=_.type.toUpperCase(),_.hasContent=!Et.test(_.type),a=_.url.replace(St,""),_.hasContent?_.data&&_.processData&&0===(_.contentType||"").indexOf("application/x-www-form-urlencoded")&&(_.data=_.data.replace(Bt,"+")):(m=_.url.slice(a.length),_.data&&(_.processData||"string"==typeof _.data)&&(a+=(Yt.test(a)?"&":"?")+_.data,delete _.data),!1===_.cache&&(a=a.replace(jt,"$1"),m=(Yt.test(a)?"&":"?")+"_="+Lt.guid+++m),_.url=a+m),_.ifModified&&(L.lastModified[a]&&w.setRequestHeader("If-Modified-Since",L.lastModified[a]),L.etag[a]&&w.setRequestHeader("If-None-Match",L.etag[a])),(_.data&&_.hasContent&&!1!==_.contentType||t.contentType)&&w.setRequestHeader("Content-Type",_.contentType),w.setRequestHeader("Accept",_.dataTypes[0]&&_.accepts[_.dataTypes[0]]?_.accepts[_.dataTypes[0]]+("*"!==_.dataTypes[0]?", "+Ft+"; q=0.01":""):_.accepts["*"]),_.headers)w.setRequestHeader(c,_.headers[c]);if(_.beforeSend&&(!1===_.beforeSend.call(p,w,_)||l))return w.abort();if(A="abort",g.add(_.complete),w.done(_.success),w.fail(_.error),n=It(Pt,_,t,w)){if(w.readyState=1,u&&f.trigger("ajaxSend",[w,_]),l)return w;_.async&&_.timeout>0&&(o=r.setTimeout((function(){w.abort("timeout")}),_.timeout));try{l=!1,n.send(b,Y)}catch(e){if(l)throw e;Y(-1,e)}}else Y(-1,"No Transport");function Y(e,t,s,d){var c,m,k,b,M,A=t;l||(l=!0,o&&r.clearTimeout(o),n=void 0,i=d||"",w.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(b=function(e,t,n){for(var r,a,i,s,o=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in o)if(o[a]&&o[a].test(r)){d.unshift(a);break}if(d[0]in n)i=d[0];else{for(a in n){if(!d[0]||e.converters[a+" "+d[0]]){i=a;break}s||(s=a)}i=i||s}if(i)return i!==d[0]&&d.unshift(i),n[i]}(_,w,s)),!c&&L.inArray("script",_.dataTypes)>-1&&L.inArray("json",_.dataTypes)<0&&(_.converters["text script"]=function(){}),b=function(e,t,n,r){var a,i,s,o,d,l={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!d&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=i,i=u.shift())if("*"===i)i=d;else if("*"!==d&&d!==i){if(!(s=l[d+" "+i]||l["* "+i]))for(a in l)if((o=a.split(" "))[1]===i&&(s=l[d+" "+o[0]]||l["* "+o[0]])){!0===s?s=l[a]:!0!==l[a]&&(i=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+d+" to "+i}}}return{state:"success",data:t}}(_,b,w,c),c?(_.ifModified&&((M=w.getResponseHeader("Last-Modified"))&&(L.lastModified[a]=M),(M=w.getResponseHeader("etag"))&&(L.etag[a]=M)),204===e||"HEAD"===_.type?A="nocontent":304===e?A="notmodified":(A=b.state,m=b.data,c=!(k=b.error))):(k=A,!e&&A||(A="error",e<0&&(e=0))),w.status=e,w.statusText=(t||A)+"",c?h.resolveWith(p,[m,A,w]):h.rejectWith(p,[w,A,k]),w.statusCode(y),y=void 0,u&&f.trigger(c?"ajaxSuccess":"ajaxError",[w,_,c?m:k]),g.fireWith(p,[w,A]),u&&(f.trigger("ajaxComplete",[w,_]),--L.active||L.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return L.get(e,t,n,"json")},getScript:function(e,t){return L.get(e,void 0,t,"script")}}),L.each(["get","post"],(function(e,t){L[t]=function(e,n,r,a){return g(n)&&(a=a||r,r=n,n=void 0),L.ajax(L.extend({url:e,type:t,dataType:a,data:n,success:r},L.isPlainObject(e)&&e))}})),L.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),L._evalUrl=function(e,t,n){return L.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){L.globalEval(e,t,n)}})},L.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=L(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){L(this).wrapInner(e.call(this,t))})):this.each((function(){var t=L(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){L(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){L(this).replaceWith(this.childNodes)})),this}}),L.expr.pseudos.hidden=function(e){return!L.expr.pseudos.visible(e)},L.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},L.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Ut=L.ajaxSettings.xhr();h.cors=!!Ut&&"withCredentials"in Ut,h.ajax=Ut=!!Ut,L.ajaxTransport((function(e){var t,n;if(h.cors||Ut&&!e.crossDomain)return{send:function(a,i){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)o.setRequestHeader(s,a[s]);t=function(e){return function(){t&&(t=n=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?i(0,"error"):i(o.status,o.statusText):i(qt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=t(),n=o.onerror=o.ontimeout=t("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),L.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),L.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return L.globalEval(e),e}}}),L.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),L.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=L("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),k.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Jt,Zt=[],Vt=/(=)\?(?=&|$)|\?\?/;L.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Zt.pop()||L.expando+"_"+Lt.guid++;return this[e]=!0,e}}),L.ajaxPrefilter("json jsonp",(function(e,t,n){var a,i,s,o=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Vt,"$1"+a):!1!==e.jsonp&&(e.url+=(Yt.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return s||L.error(a+" was not called"),s[0]},e.dataTypes[0]="json",i=r[a],r[a]=function(){s=arguments},n.always((function(){void 0===i?L(r).removeProp(a):r[a]=i,e[a]&&(e.jsonpCallback=t.jsonpCallback,Zt.push(a)),s&&g(i)&&i(s[0]),s=i=void 0})),"script"})),h.createHTMLDocument=((Jt=k.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Jt.childNodes.length),L.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(h.createHTMLDocument?((r=(t=k.implementation.createHTMLDocument("")).createElement("base")).href=k.location.href,t.head.appendChild(r)):t=k),i=!n&&[],(a=B.exec(e))?[t.createElement(a[1])]:(a=we([e],t,i),i&&i.length&&L(i).remove(),L.merge([],a.childNodes)));var r,a,i},L.fn.load=function(e,t,n){var r,a,i,s=this,o=e.indexOf(" ");return o>-1&&(r=gt(e.slice(o)),e=e.slice(0,o)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),s.length>0&&L.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done((function(e){i=arguments,s.html(r?L("<div>").append(L.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},L.expr.pseudos.animated=function(e){return L.grep(L.timers,(function(t){return e===t.elem})).length},L.offset={setOffset:function(e,t,n){var r,a,i,s,o,d,l=L.css(e,"position"),u=L(e),c={};"static"===l&&(e.style.position="relative"),o=u.offset(),i=L.css(e,"top"),d=L.css(e,"left"),("absolute"===l||"fixed"===l)&&(i+d).indexOf("auto")>-1?(s=(r=u.position()).top,a=r.left):(s=parseFloat(i)||0,a=parseFloat(d)||0),g(t)&&(t=t.call(e,n,L.extend({},o))),null!=t.top&&(c.top=t.top-o.top+s),null!=t.left&&(c.left=t.left-o.left+a),"using"in t?t.using.call(e,c):u.css(c)}},L.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){L.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===L.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===L.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=L(e).offset()).top+=L.css(e,"borderTopWidth",!0),a.left+=L.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-L.css(r,"marginTop",!0),left:t.left-a.left-L.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===L.css(e,"position");)e=e.offsetParent;return e||se}))}}),L.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;L.fn[e]=function(r){return U(this,(function(e,r,a){var i;if(y(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===a)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:a,n?a:i.pageYOffset):e[r]=a}),e,r,arguments.length)}})),L.each(["top","left"],(function(e,t){L.cssHooks[t]=Ue(h.pixelPosition,(function(e,n){if(n)return n=qe(e,t),ze.test(n)?L(e).position()[t]+"px":n}))})),L.each({Height:"height",Width:"width"},(function(e,t){L.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){L.fn[r]=function(a,i){var s=arguments.length&&(n||"boolean"!=typeof a),o=n||(!0===a||!0===i?"margin":"border");return U(this,(function(t,n,a){var i;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===a?L.css(t,n,o):L.style(t,n,a,o)}),t,s?a:void 0,s)}}))})),L.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){L.fn[t]=function(e){return this.on(t,e)}})),L.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),L.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){L.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Gt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;L.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(o.call(arguments)))}).guid=e.guid=e.guid||L.guid++,a},L.holdReady=function(e){e?L.readyWait++:L.ready(!0)},L.isArray=Array.isArray,L.parseJSON=JSON.parse,L.nodeName=T,L.isFunction=g,L.isWindow=y,L.camelCase=G,L.type=A,L.now=Date.now,L.isNumeric=function(e){var t=L.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},L.trim=function(e){return null==e?"":(e+"").replace(Gt,"")},void 0===(n=function(){return L}.apply(t,[]))||(e.exports=n);var Qt=r.jQuery,Xt=r.$;return L.noConflict=function(e){return r.$===L&&(r.$=Xt),e&&r.jQuery===L&&(r.jQuery=Qt),L},void 0===a&&(r.jQuery=r.$=L),L}))},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,s){var o=t(r),d=n[e][t(r)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,s){var o=n(t),d=r[e][n(t)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=r(t),d=a[e][r(t)];return 2===o&&(d=d[n?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},5684:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var r=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":s=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},94:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},135:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(r(e)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return a+(1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return a+(1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami");case"d":return t||r?"en dan":"enim dnem";case"dd":return a+(1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi");case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+(1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci");case"y":return t||r?"eno leto":"enim letom";case"yy":return a+(1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},6700:(e,t,n)=>{var r={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":5684,"./bo.js":5684,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=6700},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function m(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function _(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function p(e,t,n,r){return Yt(e,t,n,r,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){if(null==e._isValid){var t=f(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function g(e){var t=p(NaN);return null!=e?_(f(t),e):f(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var y=a.momentProperties=[],k=!1;function b(e,t){var n,r,a;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=f(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)l(a=t[r=y[n]])||(e[r]=a);return e}function M(e){b(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===k&&(k=!0,a.updateOffset(this),k=!1)}function A(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function w(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function L(e,t){var n=!0;return _((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,s,d=[];for(i=0;i<arguments.length;i++){if(r="","object"==typeof arguments[i]){for(s in r+="\n["+i+"] ",arguments[0])o(arguments[0],s)&&(r+=s+": "+arguments[0][s]+", ");r=r.slice(0,-2)}else r=arguments[i];d.push(r)}w(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var Y,x={};function v(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),x[e]||(w(t),x[e]=!0)}function C(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function D(e,t){var n,r=_({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(r[n]={},_(r[n],e[n]),_(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(r[n]=_({},r[n]));return r}function T(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,Y=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function B(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var S=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,j=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,H={},E={};function W(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(E[e]=a),t&&(E[t[0]]=function(){return B(a.apply(this,arguments),t[1],t[2])}),n&&(E[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function O(e,t){return e.isValid()?(t=P(t,e.localeData()),H[t]=H[t]||function(e){var t,n,r,a=e.match(S);for(t=0,n=a.length;t<n;t++)E[a[t]]?a[t]=E[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=C(a[r])?a[r].call(t,e):a[r];return i}}(t),H[t](e)):e.localeData().invalidDate()}function P(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(j.lastIndex=0;n>=0&&j.test(e);)e=e.replace(j,r),j.lastIndex=0,n-=1;return e}var F={};function z(e,t){var n=e.toLowerCase();F[n]=F[n+"s"]=F[t]=e}function N(e){return"string"==typeof e?F[e]||F[e.toLowerCase()]:void 0}function I(e){var t,n,r={};for(n in e)o(e,n)&&(t=N(n))&&(r[t]=e[n]);return r}var R={};function q(e,t){R[e]=t}function U(e){return e%4==0&&e%100!=0||e%400==0}function J(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function Z(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=J(t)),n}function V(e,t){return function(n){return null!=n?(Q(this,e,n),a.updateOffset(this,t),this):G(this,e)}}function G(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Q(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&U(e.year())&&1===e.month()&&29===e.date()?(n=Z(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ae(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var X,$=/\d/,K=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,re=/\d\d?/,ae=/\d\d\d\d?/,ie=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,me=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function pe(e,t,n){X[e]=C(t)?t:function(e,r){return e&&n?n:t}}function fe(e,t){return o(X,e)?X[e](t._strict,t._locale):new RegExp(he(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function he(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}X={};var ge={};function ye(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=Z(e)}),n=0;n<e.length;n++)ge[e[n]]=r}function ke(e,t){ye(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function be(e,t,n){null!=t&&o(ge,e)&&ge[e](t,n._a,n,e)}var Me;function Ae(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?U(e)?29:28:31-r%7%2}Me=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},W("M",["MM",2],"Mo",(function(){return this.month()+1})),W("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),W("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),z("month","M"),q("month",8),pe("M",re),pe("MM",re,K),pe("MMM",(function(e,t){return t.monthsShortRegex(e)})),pe("MMMM",(function(e,t){return t.monthsRegex(e)})),ye(["M","MM"],(function(e,t){t[1]=Z(e)-1})),ye(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:f(n).invalidMonth=e}));var we="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Le="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Ye=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,xe=_e,ve=_e;function Ce(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=p([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,s))?a:null:-1!==(a=Me.call(this._longMonthsParse,s))?a:null:"MMM"===t?-1!==(a=Me.call(this._shortMonthsParse,s))||-1!==(a=Me.call(this._longMonthsParse,s))?a:null:-1!==(a=Me.call(this._longMonthsParse,s))||-1!==(a=Me.call(this._shortMonthsParse,s))?a:null}function De(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=Z(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ae(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Te(e){return null!=e?(De(this,e),a.updateOffset(this,!0),this):G(this,"Month")}function Be(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=p([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=he(r[t]),a[t]=he(a[t]);for(t=0;t<24;t++)i[t]=he(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Se(e){return U(e)?366:365}W("Y",0,0,(function(){var e=this.year();return e<=9999?B(e,4):"+"+e})),W(0,["YY",2],0,(function(){return this.year()%100})),W(0,["YYYY",4],0,"year"),W(0,["YYYYY",5],0,"year"),W(0,["YYYYYY",6,!0],0,"year"),z("year","y"),q("year",1),pe("Y",ue),pe("YY",re,K),pe("YYYY",oe,te),pe("YYYYY",de,ne),pe("YYYYYY",de,ne),ye(["YYYYY","YYYYYY"],0),ye("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):Z(e)})),ye("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),ye("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return Z(e)+(Z(e)>68?1900:2e3)};var je=V("FullYear",!0);function He(e,t,n,r,a,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,r,a,i,s),o}function Ee(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function We(e,t,n){var r=7+t-n;return-(7+Ee(e,0,r).getUTCDay()-t)%7+r-1}function Oe(e,t,n,r,a){var i,s,o=1+7*(t-1)+(7+n-r)%7+We(e,r,a);return o<=0?s=Se(i=e-1)+o:o>Se(e)?(i=e+1,s=o-Se(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Pe(e,t,n){var r,a,i=We(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?r=s+Fe(a=e.year()-1,t,n):s>Fe(e.year(),t,n)?(r=s-Fe(e.year(),t,n),a=e.year()+1):(a=e.year(),r=s),{week:r,year:a}}function Fe(e,t,n){var r=We(e,t,n),a=We(e+1,t,n);return(Se(e)-r+a)/7}W("w",["ww",2],"wo","week"),W("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),q("week",5),q("isoWeek",5),pe("w",re),pe("ww",re,K),pe("W",re),pe("WW",re,K),ke(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=Z(e)}));function ze(e,t){return e.slice(t,7).concat(e.slice(0,t))}W("d",0,"do","day"),W("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),W("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),W("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),W("e",0,0,"weekday"),W("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),q("day",11),q("weekday",11),q("isoWeekday",11),pe("d",re),pe("e",re),pe("E",re),pe("dd",(function(e,t){return t.weekdaysMinRegex(e)})),pe("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),pe("dddd",(function(e,t){return t.weekdaysRegex(e)})),ke(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:f(n).invalidWeekday=e})),ke(["d","e","E"],(function(e,t,n,r){t[r]=Z(e)}));var Ne="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ie="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Re="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),qe=_e,Ue=_e,Je=_e;function Ze(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=p([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,s))?a:null:"dddd"===t?-1!==(a=Me.call(this._weekdaysParse,s))||-1!==(a=Me.call(this._shortWeekdaysParse,s))||-1!==(a=Me.call(this._minWeekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Me.call(this._shortWeekdaysParse,s))||-1!==(a=Me.call(this._weekdaysParse,s))||-1!==(a=Me.call(this._minWeekdaysParse,s))?a:null:-1!==(a=Me.call(this._minWeekdaysParse,s))||-1!==(a=Me.call(this._weekdaysParse,s))||-1!==(a=Me.call(this._shortWeekdaysParse,s))?a:null}function Ve(){function e(e,t){return t.length-e.length}var t,n,r,a,i,s=[],o=[],d=[],l=[];for(t=0;t<7;t++)n=p([2e3,1]).day(t),r=he(this.weekdaysMin(n,"")),a=he(this.weekdaysShort(n,"")),i=he(this.weekdays(n,"")),s.push(r),o.push(a),d.push(i),l.push(r),l.push(a),l.push(i);s.sort(e),o.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function Ge(){return this.hours()%12||12}function Qe(e,t){W(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Xe(e,t){return t._meridiemParse}W("H",["HH",2],0,"hour"),W("h",["hh",2],0,Ge),W("k",["kk",2],0,(function(){return this.hours()||24})),W("hmm",0,0,(function(){return""+Ge.apply(this)+B(this.minutes(),2)})),W("hmmss",0,0,(function(){return""+Ge.apply(this)+B(this.minutes(),2)+B(this.seconds(),2)})),W("Hmm",0,0,(function(){return""+this.hours()+B(this.minutes(),2)})),W("Hmmss",0,0,(function(){return""+this.hours()+B(this.minutes(),2)+B(this.seconds(),2)})),Qe("a",!0),Qe("A",!1),z("hour","h"),q("hour",13),pe("a",Xe),pe("A",Xe),pe("H",re),pe("h",re),pe("k",re),pe("HH",re,K),pe("hh",re,K),pe("kk",re,K),pe("hmm",ae),pe("hmmss",ie),pe("Hmm",ae),pe("Hmmss",ie),ye(["H","HH"],3),ye(["k","kk"],(function(e,t,n){var r=Z(e);t[3]=24===r?0:r})),ye(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ye(["h","hh"],(function(e,t,n){t[3]=Z(e),f(n).bigHour=!0})),ye("hmm",(function(e,t,n){var r=e.length-2;t[3]=Z(e.substr(0,r)),t[4]=Z(e.substr(r)),f(n).bigHour=!0})),ye("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=Z(e.substr(0,r)),t[4]=Z(e.substr(r,2)),t[5]=Z(e.substr(a)),f(n).bigHour=!0})),ye("Hmm",(function(e,t,n){var r=e.length-2;t[3]=Z(e.substr(0,r)),t[4]=Z(e.substr(r))})),ye("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=Z(e.substr(0,r)),t[4]=Z(e.substr(r,2)),t[5]=Z(e.substr(a))}));var $e=V("Hours",!0);var Ke,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:we,monthsShort:Le,week:{dow:0,doy:6},weekdays:Ne,weekdaysMin:Re,weekdaysShort:Ie,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function it(t){var r=null;if(void 0===tt[t]&&e&&e.exports)try{r=Ke._abbr,n(6700)("./"+t),st(r)}catch(e){tt[t]=null}return tt[t]}function st(e,t){var n;return e&&((n=l(t)?dt(e):ot(e,t))?Ke=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ke._abbr}function ot(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])v("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=it(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new T(D(r,t)),nt[e]&&nt[e].forEach((function(e){ot(e.name,e.config)})),st(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ke;if(!i(e)){if(t=it(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=at(e[i]).split("-")).length,n=(n=at(e[i+1]))?n.split("-"):null;t>0;){if(r=it(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}i++}return Ke}(e)}function lt(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>Ae(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,f(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),f(e)._overflowWeeks&&-1===t&&(t=7),f(e)._overflowWeekday&&-1===t&&(t=8),f(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,mt=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],pt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ft=/^\/?Date\((-?\d+)/i,ht=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,r,a,i,s,o=e._i,d=ut.exec(o)||ct.exec(o);if(d){for(f(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[1])){a=_t[t][0],r=!1!==_t[t][2];break}if(null==a)return void(e._isValid=!1);if(d[3]){for(t=0,n=pt.length;t<n;t++)if(pt[t][1].exec(d[3])){i=(d[2]||" ")+pt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(d[4]){if(!mt.exec(d[4]))return void(e._isValid=!1);s="Z"}e._f=a+(i||"")+(s||""),wt(e)}else e._isValid=!1}function kt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function bt(e){var t,n,r,a,i,s,o,d,l=ht.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],i=l[5],s=l[6],o=l[7],d=[kt(n),Le.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(s,10)],o&&d.push(parseInt(o,10)),t=d,!function(e,t,n){return!e||Ie.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return gt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Ee.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Mt(e,t,n){return null!=e?e:null!=t?t:n}function At(e){var t,n,r,i,s,o=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,i,s,o,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,s=4,n=Mt(t.GG,e._a[0],Pe(xt(),1,4).year),r=Mt(t.W,1),((a=Mt(t.E,1))<1||a>7)&&(d=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,l=Pe(xt(),i,s),n=Mt(t.gg,e._a[0],l.year),r=Mt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(d=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(d=!0)):a=i),r<1||r>Fe(n,i,s)?f(e)._overflowWeeks=!0:null!=d?f(e)._overflowWeekday=!0:(o=Oe(n,r,a,i,s),e._a[0]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Mt(e._a[0],r[0]),(e._dayOfYear>Se(s)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Ee(s,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Ee:He).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(f(e).weekdayMismatch=!0)}}function wt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],f(e).empty=!0;var t,n,r,i,s,o,d=""+e._i,l=d.length,u=0;for(r=P(e._f,e._locale).match(S)||[],t=0;t<r.length;t++)i=r[t],(n=(d.match(fe(i,e))||[])[0])&&((s=d.substr(0,d.indexOf(n))).length>0&&f(e).unusedInput.push(s),d=d.slice(d.indexOf(n)+n.length),u+=n.length),E[i]?(n?f(e).empty=!1:f(e).unusedTokens.push(i),be(i,n,e)):e._strict&&!n&&f(e).unusedTokens.push(i);f(e).charsLeftOver=l-u,d.length>0&&f(e).unusedInput.push(d),e._a[3]<=12&&!0===f(e).bigHour&&e._a[3]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(o=f(e).era)&&(e._a[0]=e._locale.erasConvertYear(o,e._a[0])),At(e),lt(e)}else bt(e);else yt(e)}function Lt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),A(t)?new M(lt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,s,o=!1;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,s=!1,t=b({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],wt(t),h(t)&&(s=!0),i+=f(t).charsLeftOver,i+=10*f(t).unusedTokens.length,f(t).score=i,o?i<r&&(r=i,n=t):(null==r||i<r||s)&&(r=i,n=t,s&&(o=!0));_(e,n||t)}(e):n?wt(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ft.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,bt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=m(t.slice(0),(function(e){return parseInt(e,10)})),At(e)):s(t)?function(e){if(!e._d){var t=I(e._i),n=void 0===t.day?t.date:t.day;e._a=m([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),At(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),h(e)||(e._d=null),e))}function Yt(e,t,n,r,a){var o,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(s(e)&&d(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(o=new M(lt(Lt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function xt(e,t,n,r){return Yt(e,t,n,r,!1)}a.createFromInputFallback=L("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var vt=L("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=xt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Ct=L("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=xt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function Dt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return xt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Tt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Bt(e){var t=I(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1;for(t in e)if(o(e,t)&&(-1===Me.call(Tt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Tt.length;++n)if(e[Tt[n]]){if(r)return!1;parseFloat(e[Tt[n]])!==Z(e[Tt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=dt(),this._bubble()}function St(e){return e instanceof Bt}function jt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ht(e,t){W(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+B(~~(e/60),2)+t+B(~~e%60,2)}))}Ht("Z",":"),Ht("ZZ",""),pe("Z",me),pe("ZZ",me),ye(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Wt(me,e)}));var Et=/([\+\-]|\d\d)/gi;function Wt(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(Et)||["-",0,0])[1]+Z(n[2]))?0:"+"===n[0]?r:-r}function Ot(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(A(e)||c(e)?e.valueOf():xt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):xt(e).local()}function Pt(e){return-Math.round(e._d.getTimezoneOffset())}function Ft(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var zt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Nt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function It(e,t){var n,r,a,i,s,d,l=e,c=null;return St(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=zt.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:Z(c[2])*n,h:Z(c[3])*n,m:Z(c[4])*n,s:Z(c[5])*n,ms:Z(jt(1e3*c[6]))*n}):(c=Nt.exec(e))?(n="-"===c[1]?-1:1,l={y:Rt(c[2],n),M:Rt(c[3],n),w:Rt(c[4],n),d:Rt(c[5],n),h:Rt(c[6],n),m:Rt(c[7],n),s:Rt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=xt(l.from),s=xt(l.to),a=i.isValid()&&s.isValid()?(s=Ot(s,i),i.isBefore(s)?d=qt(i,s):((d=qt(s,i)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new Bt(l),St(e)&&o(e,"_locale")&&(r._locale=e._locale),St(e)&&o(e,"_isValid")&&(r._isValid=e._isValid),r}function Rt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function qt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Ut(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(v(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Jt(this,It(n,r),e),this}}function Jt(e,t,n,r){var i=t._milliseconds,s=jt(t._days),o=jt(t._months);e.isValid()&&(r=null==r||r,o&&De(e,G(e,"Month")+o*n),s&&Q(e,"Date",G(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,s||o))}It.fn=Bt.prototype,It.invalid=function(){return It(NaN)};var Zt=Ut(1,"add"),Vt=Ut(-1,"subtract");function Gt(e){return"string"==typeof e||e instanceof String}function Qt(e){return A(e)||c(e)||Gt(e)||u(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Gt(e)})).length),t&&n}(e)||function(e){var t,n,r=s(e)&&!d(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<i.length;t+=1)n=i[t],a=a||o(e,n);return r&&a}(e)||null==e}function Xt(e){var t,n=s(e)&&!d(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||o(e,a[t]);return n&&r}function $t(e,t){if(e.date()<t.date())return-$t(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Kt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=L("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,rn=6e4,an=36e5,sn=126227808e5;function on(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function un(e,t){return t.erasAbbrRegex(e)}function cn(){var e,t,n=[],r=[],a=[],i=[],s=this.eras();for(e=0,t=s.length;e<t;++e)r.push(he(s[e].name)),n.push(he(s[e].abbr)),a.push(he(s[e].narrow)),i.push(he(s[e].name)),i.push(he(s[e].abbr)),i.push(he(s[e].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+r.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+a.join("|")+")","i")}function mn(e,t){W(0,[e,e.length],0,t)}function _n(e,t,n,r,a){var i;return null==e?Pe(this,r,a).year:(t>(i=Fe(e,r,a))&&(t=i),pn.call(this,e,t,n,r,a))}function pn(e,t,n,r,a){var i=Oe(e,t,n,r,a),s=Ee(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}W("N",0,0,"eraAbbr"),W("NN",0,0,"eraAbbr"),W("NNN",0,0,"eraAbbr"),W("NNNN",0,0,"eraName"),W("NNNNN",0,0,"eraNarrow"),W("y",["y",1],"yo","eraYear"),W("y",["yy",2],0,"eraYear"),W("y",["yyy",3],0,"eraYear"),W("y",["yyyy",4],0,"eraYear"),pe("N",un),pe("NN",un),pe("NNN",un),pe("NNNN",(function(e,t){return t.erasNameRegex(e)})),pe("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ye(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?f(n).era=a:f(n).invalidEra=e})),pe("y",le),pe("yy",le),pe("yyy",le),pe("yyyy",le),pe("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ye(["y","yy","yyy","yyyy"],0),ye(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),W(0,["gg",2],0,(function(){return this.weekYear()%100})),W(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),mn("gggg","weekYear"),mn("ggggg","weekYear"),mn("GGGG","isoWeekYear"),mn("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),q("weekYear",1),q("isoWeekYear",1),pe("G",ue),pe("g",ue),pe("GG",re,K),pe("gg",re,K),pe("GGGG",oe,te),pe("gggg",oe,te),pe("GGGGG",de,ne),pe("ggggg",de,ne),ke(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=Z(e)})),ke(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),W("Q",0,"Qo","quarter"),z("quarter","Q"),q("quarter",7),pe("Q",$),ye("Q",(function(e,t){t[1]=3*(Z(e)-1)})),W("D",["DD",2],"Do","date"),z("date","D"),q("date",9),pe("D",re),pe("DD",re,K),pe("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ye(["D","DD"],2),ye("Do",(function(e,t){t[2]=Z(e.match(re)[0])}));var fn=V("Date",!0);W("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),q("dayOfYear",4),pe("DDD",se),pe("DDDD",ee),ye(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=Z(e)})),W("m",["mm",2],0,"minute"),z("minute","m"),q("minute",14),pe("m",re),pe("mm",re,K),ye(["m","mm"],4);var hn=V("Minutes",!1);W("s",["ss",2],0,"second"),z("second","s"),q("second",15),pe("s",re),pe("ss",re,K),ye(["s","ss"],5);var gn,yn,kn=V("Seconds",!1);for(W("S",0,0,(function(){return~~(this.millisecond()/100)})),W(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),W(0,["SSS",3],0,"millisecond"),W(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),W(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),W(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),W(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),W(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),W(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),z("millisecond","ms"),q("millisecond",16),pe("S",se,$),pe("SS",se,K),pe("SSS",se,ee),gn="SSSS";gn.length<=9;gn+="S")pe(gn,le);function bn(e,t){t[6]=Z(1e3*("0."+e))}for(gn="S";gn.length<=9;gn+="S")ye(gn,bn);yn=V("Milliseconds",!1),W("z",0,0,"zoneAbbr"),W("zz",0,0,"zoneName");var Mn=M.prototype;function An(e){return e}Mn.add=Zt,Mn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Qt(arguments[0])?(e=arguments[0],t=void 0):Xt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||xt(),r=Ot(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",s=t&&(C(t[i])?t[i].call(this,n):t[i]);return this.format(s||this.localeData().calendar(i,this,xt(n)))},Mn.clone=function(){return new M(this)},Mn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Ot(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=N(t)){case"year":i=$t(this,r)/12;break;case"month":i=$t(this,r);break;case"quarter":i=$t(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:J(i)},Mn.endOf=function(e){var t,n;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=an-on(t+(this._isUTC?0:this.utcOffset()*rn),an)-1;break;case"minute":t=this._d.valueOf(),t+=rn-on(t,rn)-1;break;case"second":t=this._d.valueOf(),t+=nn-on(t,nn)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},Mn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=O(this,e);return this.localeData().postformat(t)},Mn.from=function(e,t){return this.isValid()&&(A(e)&&e.isValid()||xt(e).isValid())?It({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Mn.fromNow=function(e){return this.from(xt(),e)},Mn.to=function(e,t){return this.isValid()&&(A(e)&&e.isValid()||xt(e).isValid())?It({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Mn.toNow=function(e){return this.to(xt(),e)},Mn.get=function(e){return C(this[e=N(e)])?this[e]():this},Mn.invalidAt=function(){return f(this).overflow},Mn.isAfter=function(e,t){var n=A(e)?e:xt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Mn.isBefore=function(e,t){var n=A(e)?e:xt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Mn.isBetween=function(e,t,n,r){var a=A(e)?e:xt(e),i=A(t)?t:xt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},Mn.isSame=function(e,t){var n,r=A(e)?e:xt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Mn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Mn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Mn.isValid=function(){return h(this)},Mn.lang=en,Mn.locale=Kt,Mn.localeData=tn,Mn.max=Ct,Mn.min=vt,Mn.parsingFlags=function(){return _({},f(this))},Mn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:R[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=I(e));for(n=0;n<r.length;n++)this[r[n].unit](e[r[n].unit])}else if(C(this[e=N(e)]))return this[e](t);return this},Mn.startOf=function(e){var t,n;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=on(t+(this._isUTC?0:this.utcOffset()*rn),an);break;case"minute":t=this._d.valueOf(),t-=on(t,rn);break;case"second":t=this._d.valueOf(),t-=on(t,nn)}return this._d.setTime(t),a.updateOffset(this,!0),this},Mn.subtract=Vt,Mn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Mn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Mn.toDate=function(){return new Date(this.valueOf())},Mn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?O(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):C(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",O(n,"Z")):O(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Mn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Mn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Mn.toJSON=function(){return this.isValid()?this.toISOString():null},Mn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Mn.unix=function(){return Math.floor(this.valueOf()/1e3)},Mn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Mn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Mn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},Mn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},Mn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},Mn.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},Mn.year=je,Mn.isLeapYear=function(){return U(this.year())},Mn.weekYear=function(e){return _n.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Mn.isoWeekYear=function(e){return _n.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Mn.quarter=Mn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Mn.month=Te,Mn.daysInMonth=function(){return Ae(this.year(),this.month())},Mn.week=Mn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Mn.isoWeek=Mn.isoWeeks=function(e){var t=Pe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Mn.weeksInYear=function(){var e=this.localeData()._week;return Fe(this.year(),e.dow,e.doy)},Mn.weeksInWeekYear=function(){var e=this.localeData()._week;return Fe(this.weekYear(),e.dow,e.doy)},Mn.isoWeeksInYear=function(){return Fe(this.year(),1,4)},Mn.isoWeeksInISOWeekYear=function(){return Fe(this.isoWeekYear(),1,4)},Mn.date=fn,Mn.day=Mn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Mn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Mn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Mn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Mn.hour=Mn.hours=$e,Mn.minute=Mn.minutes=hn,Mn.second=Mn.seconds=kn,Mn.millisecond=Mn.milliseconds=yn,Mn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Wt(me,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Pt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?Jt(this,It(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Pt(this)},Mn.utc=function(e){return this.utcOffset(0,e)},Mn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Pt(this),"m")),this},Mn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Wt(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Mn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?xt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Mn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Mn.isLocal=function(){return!!this.isValid()&&!this._isUTC},Mn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Mn.isUtc=Ft,Mn.isUTC=Ft,Mn.zoneAbbr=function(){return this._isUTC?"UTC":""},Mn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Mn.dates=L("dates accessor is deprecated. Use date instead.",fn),Mn.months=L("months accessor is deprecated. Use month instead",Te),Mn.years=L("years accessor is deprecated. Use year instead",je),Mn.zone=L("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Mn.isDSTShifted=L("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return b(t,this),(t=Lt(t))._a?(e=t._isUTC?p(t._a):xt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&Z(e[r])!==Z(t[r]))&&s++;return s+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var wn=T.prototype;function Ln(e,t,n,r){var a=dt(),i=p().set(r,t);return a[n](i,e)}function Yn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Ln(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Ln(e,r,n,"month");return a}function xn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,i=dt(),s=e?i._week.dow:0,o=[];if(null!=n)return Ln(t,(n+s)%7,r,"day");for(a=0;a<7;a++)o[a]=Ln(t,(a+s)%7,r,"day");return o}wn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return C(r)?r.call(t,n):r},wn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(S).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},wn.invalidDate=function(){return this._invalidDate},wn.ordinal=function(e){return this._ordinal.replace("%d",e)},wn.preparse=An,wn.postformat=An,wn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return C(a)?a(e,t,n,r):a.replace(/%d/i,e)},wn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return C(n)?n(t):n.replace(/%s/i,t)},wn.set=function(e){var t,n;for(n in e)o(e,n)&&(C(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},wn.eras=function(e,t){var n,r,i,s=this._eras||dt("en")._eras;for(n=0,r=s.length;n<r;++n){switch(typeof s[n].since){case"string":i=a(s[n].since).startOf("day"),s[n].since=i.valueOf()}switch(typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":i=a(s[n].until).startOf("day").valueOf(),s[n].until=i.valueOf()}}return s},wn.erasParse=function(e,t,n){var r,a,i,s,o,d=this.eras();for(e=e.toUpperCase(),r=0,a=d.length;r<a;++r)if(i=d[r].name.toUpperCase(),s=d[r].abbr.toUpperCase(),o=d[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return d[r];break;case"NNNN":if(i===e)return d[r];break;case"NNNNN":if(o===e)return d[r]}else if([i,s,o].indexOf(e)>=0)return d[r]},wn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},wn.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||cn.call(this),e?this._erasAbbrRegex:this._erasRegex},wn.erasNameRegex=function(e){return o(this,"_erasNameRegex")||cn.call(this),e?this._erasNameRegex:this._erasRegex},wn.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||cn.call(this),e?this._erasNarrowRegex:this._erasRegex},wn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ye).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},wn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ye.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},wn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return Ce.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=p([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},wn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Be.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=ve),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},wn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||Be.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=xe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},wn.week=function(e){return Pe(e,this._week.dow,this._week.doy).week},wn.firstDayOfYear=function(){return this._week.doy},wn.firstDayOfWeek=function(){return this._week.dow},wn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?ze(n,this._week.dow):e?n[e.day()]:n},wn.weekdaysMin=function(e){return!0===e?ze(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},wn.weekdaysShort=function(e){return!0===e?ze(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},wn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Ze.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=p([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},wn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ve.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},wn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ve.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ue),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},wn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Ve.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Je),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},wn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},wn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},st("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===Z(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=L("moment.lang is deprecated. Use moment.locale instead.",st),a.langData=L("moment.langData is deprecated. Use moment.localeData instead.",dt);var vn=Math.abs;function Cn(e,t,n,r){var a=It(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Dn(e){return e<0?Math.floor(e):Math.ceil(e)}function Tn(e){return 4800*e/146097}function Bn(e){return 146097*e/4800}function Sn(e){return function(){return this.as(e)}}var jn=Sn("ms"),Hn=Sn("s"),En=Sn("m"),Wn=Sn("h"),On=Sn("d"),Pn=Sn("w"),Fn=Sn("M"),zn=Sn("Q"),Nn=Sn("y");function In(e){return function(){return this.isValid()?this._data[e]:NaN}}var Rn=In("milliseconds"),qn=In("seconds"),Un=In("minutes"),Jn=In("hours"),Zn=In("days"),Vn=In("months"),Gn=In("years");var Qn=Math.round,Xn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function $n(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Kn=Math.abs;function er(e){return(e>0)-(e<0)||+e}function tr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,s,o,d=Kn(this._milliseconds)/1e3,l=Kn(this._days),u=Kn(this._months),c=this.asSeconds();return c?(e=J(d/60),t=J(e/60),d%=60,e%=60,n=J(u/12),u%=12,r=d?d.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=er(this._months)!==er(c)?"-":"",s=er(this._days)!==er(c)?"-":"",o=er(this._milliseconds)!==er(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(u?i+u+"M":"")+(l?s+l+"D":"")+(t||e||d?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(d?o+r+"S":"")):"P0D"}var nr=Bt.prototype;return nr.isValid=function(){return this._isValid},nr.abs=function(){var e=this._data;return this._milliseconds=vn(this._milliseconds),this._days=vn(this._days),this._months=vn(this._months),e.milliseconds=vn(e.milliseconds),e.seconds=vn(e.seconds),e.minutes=vn(e.minutes),e.hours=vn(e.hours),e.months=vn(e.months),e.years=vn(e.years),this},nr.add=function(e,t){return Cn(this,e,t,1)},nr.subtract=function(e,t){return Cn(this,e,t,-1)},nr.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=N(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Tn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Bn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},nr.asMilliseconds=jn,nr.asSeconds=Hn,nr.asMinutes=En,nr.asHours=Wn,nr.asDays=On,nr.asWeeks=Pn,nr.asMonths=Fn,nr.asQuarters=zn,nr.asYears=Nn,nr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*Z(this._months/12):NaN},nr._bubble=function(){var e,t,n,r,a,i=this._milliseconds,s=this._days,o=this._months,d=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*Dn(Bn(o)+s),s=0,o=0),d.milliseconds=i%1e3,e=J(i/1e3),d.seconds=e%60,t=J(e/60),d.minutes=t%60,n=J(t/60),d.hours=n%24,s+=J(n/24),o+=a=J(Tn(s)),s-=Dn(Bn(a)),r=J(o/12),o%=12,d.days=s,d.months=o,d.years=r,this},nr.clone=function(){return It(this)},nr.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},nr.milliseconds=Rn,nr.seconds=qn,nr.minutes=Un,nr.hours=Jn,nr.days=Zn,nr.weeks=function(){return J(this.days()/7)},nr.months=Vn,nr.years=Gn,nr.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=Xn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},Xn,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),r=function(e,t,n,r){var a=It(e).abs(),i=Qn(a.as("s")),s=Qn(a.as("m")),o=Qn(a.as("h")),d=Qn(a.as("d")),l=Qn(a.as("M")),u=Qn(a.as("w")),c=Qn(a.as("y")),m=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(m=m||u<=1&&["w"]||u<n.w&&["ww",u]),(m=m||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,m[3]=+e>0,m[4]=r,$n.apply(null,m)}(this,!a,i,n=this.localeData()),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},nr.toISOString=tr,nr.toString=tr,nr.toJSON=tr,nr.locale=Kt,nr.localeData=tn,nr.toIsoString=L("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",tr),nr.lang=en,W("X",0,0,"unix"),W("x",0,0,"valueOf"),pe("x",ue),pe("X",/[+-]?\d+(\.\d{1,3})?/),ye("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ye("x",(function(e,t,n){n._d=new Date(Z(e))})),a.version="2.29.1",t=xt,a.fn=Mn,a.min=function(){return Dt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Dt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=p,a.unix=function(e){return xt(1e3*e)},a.months=function(e,t){return Yn(e,t,"months")},a.isDate=c,a.locale=st,a.invalid=g,a.duration=It,a.isMoment=A,a.weekdays=function(e,t,n){return xn(e,t,n,"weekdays")},a.parseZone=function(){return xt.apply(null,arguments).parseZone()},a.localeData=dt,a.isDuration=St,a.monthsShort=function(e,t){return Yn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return xn(e,t,n,"weekdaysMin")},a.defineLocale=ot,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(D(tt[e]._config,t)):(null!=(r=it(e))&&(a=r._config),t=D(a,t),null==r&&(t.abbr=e),(n=new T(t)).parentLocale=tt[e],tt[e]=n),st(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===st()&&st(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return Y(tt)},a.weekdaysShort=function(e,t,n){return xn(e,t,n,"weekdaysShort")},a.normalizeUnits=N,a.relativeTimeRounding=function(e){return void 0===e?Qn:"function"==typeof e&&(Qn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==Xn[e]&&(void 0===t?Xn[e]:(Xn[e]=t,"s"===e&&(Xn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=Mn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},2769:function(e,t,n){var r,a,i=n(9755);void 0===this&&void 0!==window&&window,r=[n(9755),n(381)],void 0===(a=function(e,t){return function(e,t){var n,r,a;function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}(function(e){var t,i,s,o,d={},l={},u={},c={},m=Object.prototype.hasOwnProperty,_=[].slice,p=/\.js$/;function f(e,t){return m.call(e,t)}function h(e,t){var n,r,a,i,s,o,d,l,c,m,_,f=t&&t.split("/"),h=u.map,g=h&&h["*"]||{};if(e){for(s=(e=e.split("/")).length-1,u.nodeIdCompat&&p.test(e[s])&&(e[s]=e[s].replace(p,"")),"."===e[0].charAt(0)&&f&&(e=f.slice(0,f.length-1).concat(e)),c=0;c<e.length;c++)if("."===(_=e[c]))e.splice(c,1),c-=1;else if(".."===_){if(0===c||1===c&&".."===e[2]||".."===e[c-1])continue;c>0&&(e.splice(c-1,2),c-=2)}e=e.join("/")}if((f||g)&&h){for(c=(n=e.split("/")).length;c>0;c-=1){if(r=n.slice(0,c).join("/"),f)for(m=f.length;m>0;m-=1)if((a=h[f.slice(0,m).join("/")])&&(a=a[r])){i=a,o=c;break}if(i)break;!d&&g&&g[r]&&(d=g[r],l=c)}!i&&d&&(i=d,o=l),i&&(n.splice(0,o,i),e=n.join("/"))}return e}function g(t,n){return function(){var r=_.call(arguments,0);return"string"!=typeof r[0]&&1===r.length&&r.push(null),i.apply(e,r.concat([t,n]))}}function y(e){return function(t){d[e]=t}}function k(n){if(f(l,n)){var r=l[n];delete l[n],c[n]=!0,t.apply(e,r)}if(!f(d,n)&&!f(c,n))throw new Error("No "+n);return d[n]}function b(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function M(e){return e?b(e):[]}function A(e){return function(){return u&&u.config&&u.config[e]||{}}}s=function(e,t){var n,r,a=b(e),i=a[0],s=t[1];return e=a[1],i&&(n=k(i=h(i,s))),i?e=n&&n.normalize?n.normalize(e,(r=s,function(e){return h(e,r)})):h(e,s):(i=(a=b(e=h(e,s)))[0],e=a[1],i&&(n=k(i))),{f:i?i+"!"+e:e,n:e,pr:i,p:n}},o={require:function(e){return g(e)},exports:function(e){var t=d[e];return void 0!==t?t:d[e]={}},module:function(e){return{id:e,uri:"",exports:d[e],config:A(e)}}},t=function(t,n,r,a){var i,u,m,_,p,h,b,A=[],w=typeof r;if(h=M(a=a||t),"undefined"===w||"function"===w){for(n=!n.length&&r.length?["require","exports","module"]:n,p=0;p<n.length;p+=1)if("require"===(u=(_=s(n[p],h)).f))A[p]=o.require(t);else if("exports"===u)A[p]=o.exports(t),b=!0;else if("module"===u)i=A[p]=o.module(t);else if(f(d,u)||f(l,u)||f(c,u))A[p]=k(u);else{if(!_.p)throw new Error(t+" missing "+u);_.p.load(_.n,g(a,!0),y(u),{}),A[p]=d[u]}m=r?r.apply(d[t],A):void 0,t&&(i&&i.exports!==e&&i.exports!==d[t]?d[t]=i.exports:m===e&&b||(d[t]=m))}else t&&(d[t]=r)},n=r=i=function(n,r,a,d,l){if("string"==typeof n)return o[n]?o[n](r):k(s(n,M(r)).f);if(!n.splice){if((u=n).deps&&i(u.deps,u.callback),!r)return;r.splice?(n=r,r=a,a=null):n=e}return r=r||function(){},"function"==typeof a&&(a=d,d=l),d?t(e,n,r,a):setTimeout((function(){t(e,n,r,a)}),4),i},i.config=function(e){return i(e)},n._defined=d,(a=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),f(d,e)||f(l,e)||(l[e]=[e,t,n])}).amd={jQuery:!0}})(),a("almond",(function(){})),a("component/models",[],(function(){return{name:"pignoseCalendar",version:"1.4.31",preference:{supports:{themes:["light","dark","blue"]}}}})),a("component/helper",["./models"],(function(e){var t={},n={},r={},a=/[A-Z]/,i=function(){};return i.format=function(e){if(e){var n=Array.prototype.slice.call(arguments,1),r=e+n.join(".");if(t[r])return t[r];for(var a=n.length,i=0;i<a;i++){var s=n[i];e=e.replace(new RegExp("((?!\\\\)?\\{"+i+"(?!\\\\)?\\})","g"),s)}return e=e.replace(new RegExp("\\\\{([0-9]+)\\\\}","g"),"{$1}"),t[r]=e,e}return""},i.getClass=function(t){var r=[e.name,t].join(".");if(n[r])return n[r];for(var i=t.split(""),s=[],o=i.length,d=0,l=0;d<o;d++){var u=i[d];!0===a.test(u)&&(s[l++]="-",u=u.toString().toLowerCase()),s[l++]=u}var c=s.join("");return n[r]=c,c},i.getSubClass=function(t){if(t&&t.length){var n=t.split("");n[0]=n[0].toUpperCase(),t=n.join("")}return r[t]||(r[t]=i.getClass(i.format("{0}{1}",e.name,t))),r[t]},i})),a("shim/utils",[],(function(){return{register:function(e,t,n){if(!n){var r="PIGNOSE Calendar needs ".concat(e," library.\nIf you want to use built-in plugin, Import dist/pignose.calendar.full.js.\nType below code in your command line to install the library.");console&&"function"==typeof console.error&&(console.warn(r),console.warn("$ ".concat(t)))}return n}}})),a("moment",["./shim/utils"],(function(e){var n;try{n=t}catch(e){}return e.register("moment","npm install moment --save",n)})),a("manager/index",["../component/helper","moment"],(function(e,t){var n={},r=function(e){if(!e)throw new Error("first parameter `date` must be gave");if(e instanceof t==0){if("string"!=typeof e&&"number"!=typeof e)throw new Error("`date` option is invalid type. (date: "+e+").");e=t(e)}this.year=parseInt(e.format("YYYY"),10),this.month=parseInt(e.format("MM"),10),this.prevMonth=parseInt(e.clone().add(-1,"months").format("MM"),10),this.nextMonth=parseInt(e.clone().add(1,"months").format("MM"),10),this.day=parseInt(e.format("DD"),10),this.firstDay=1,this.lastDay=parseInt(e.clone().endOf("month").format("DD"),10),this.weekDay=e.weekday(),this.date=e};return r.prototype.toString=function(){return this.date.format("YYYY-MM-DD")},r.Convert=function(r,a,i){var s=e.format("{0}-{1}-{2}",r,a,i);return n[s]||(n[s]=t(s,"YYYY-MM-DD")),n[s]},r})),a("component/classNames",["../component/helper"],(function(e){return{top:e.getSubClass("top"),header:e.getSubClass("header"),body:e.getSubClass("body"),button:e.getSubClass("button")}})),a("configures/i18n",[],(function(){return{defaultLanguage:"en",supports:["ar","en","ko","fr","ch","de","nl","jp","pt","da","pl","es","cs","uk","ru","ka","ca"],weeks:{ar:["أحد","إثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],en:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ko:["일","월","화","수","목","금","토"],fa:["شنبه","آدینه","پنج","چهار","سه","دو","یک"],fr:["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"],ch:["日","一","二","三","四","五","六"],de:["SO","MO","DI","MI","DO","FR","SA"],nl:["Zo","Ma","Di","Wo","Do","Vr","Za"],jp:["日","月","火","水","木","金","土"],pt:["Dom","Seg","Ter","Qua","Qui","Sex","Sab"],da:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],pl:["Nie","Pon","Wto","Śro","Czw","Pią","Sob"],es:["Dom","Lun","Mar","Mié","Jue","Vie","Sáb"],it:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],cs:["Ne","Po","Út","St","Čt","Pá","So"],uk:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],ru:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],ka:["კვ","ორ","სმ","ოთ","ხთ","პრ","შბ"],ca:["Dg","Dl","Dm","Dc","Dj","Dv","Ds"]},monthsLong:{ar:["يناير","فبراير","مارس","إبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],en:["January","February","March","April","May","Jun","July","August","September","October","November","December"],ko:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],fa:["آذر","آبان","مهر","شهریور","مرداد","تیر","خرداد","اردیبهشت","فروردین","اسفند","بهمن","دی"],fr:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],ch:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],de:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],nl:["Januari","Februari","Maart","April","Mei","Juni","Juli","Augustus","September","Oktober","November","December"],jp:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],pt:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],da:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],pl:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],es:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],it:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],cs:["Leden","Únor","Březen","Duben","Květen","Červen","Cervenec","Srpen","Září","Říjen","Listopad","Prosinec"],uk:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],ru:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],ka:["იანვარი","თებერვალი","მარტი","აპრილი","მაისი","ივნისი","ივლისი","აგვისტო","სექტემბერი","ოქტომბერი","ნოემბერი","დეკემბერი"],ca:["Gener","Febrer","Març","Abril","Maig","Juny","Juliol","Agost","Setembre","Octubre","Novembre","Desembre"]},months:{ar:["يناير","فبراير","مارس","إبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],en:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ko:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],fa:["آذر","آبان","مهر","شهریور","مرداد","تیر","خرداد","اردیبهشت","فروردین","اسفند","بهمن","دی"],fr:["Jan","Fév","Mar","Avr","Mai","Juin","Juil","Aoû","Sep","Oct","Nov","Déc"],ch:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],de:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],nl:["Jan","Feb","Mrt","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],jp:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],pt:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],da:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],pl:["Sty","Lut","Mar","Kwi","Maj","Cze","Lip","Sie","Wrz","Paź","Lis","Gru"],es:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dec"],it:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],cs:["Led","Úno","Bře","Dub","Kvě","Čvn","Čvc","Srp","Zář","Říj","Lis","Pro"],uk:["Січ","Лют","Бер","Квіт","Трав","Черв","Лип","Серп","Вер","Жовт","Лист","Груд"],ru:["Янв","Февр","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Нояб","Дек"],ka:["იან","თებ","მარ","აპრ","მაი","ივნ","ივლ","აგვ","სექ","ოქტ","ნოე","დეკ"],ca:["Gen","Feb","Mar","Abr","Mai","Jun","Jul","Ago","Set","Oct","Nov","Des"]},controls:{ar:{ok:"حسناً",cancel:"إلغاء"},en:{ok:"OK",cancel:"Cancel"},ko:{ok:"확인",cancel:"취소"},fa:{ok:"چک کنید",cancel:"لغو"},fr:{ok:"Vérifier",cancel:"Annuler"},ch:{ok:"确认",cancel:"取消"},de:{ok:"Okay",cancel:"Abbrechen"},nl:{ok:"Oké",cancel:"Annuleren"},jp:{ok:"確認",cancel:"キャンセル"},pt:{ok:"Verifique",cancel:"Cancelar"},da:{ok:"Bekræftelse",cancel:"aflyst"},pl:{ok:"Sprawdź",cancel:"Anuluj"},es:{ok:"Cheque",cancel:"Cancelar"},it:{ok:"conferma",cancel:"annullato"},cs:{ok:"Zkontrolujte",cancel:"Zrušit"},uk:{ok:"Вибрати",cancel:"Скасувати"},ru:{ok:"Выбрать",cancel:"Отмена"},ka:{ok:"არჩევა",cancel:"გაუქმება"},ca:{ok:"Confirmar",cancel:"Cancel·lar"}}}})),a("component/global",["../configures/i18n"],(function(e){return{language:e.defaultLanguage,languages:e,week:0,format:"YYYY-MM-DD"}})),a("component/options",["moment","./global"],(function(e,t){return{lang:null,languages:t.languages,theme:"light",date:e(),format:t.format,enabledDates:[],disabledDates:[],disabledWeekdays:[],disabledRanges:[],schedules:[],scheduleOptions:{colors:{}},week:t.week,weeks:t.languages.weeks.en,monthsLong:t.languages.monthsLong.en,months:t.languages.months.en,controls:t.languages.controls.en,pickWeeks:!1,initialize:!0,multiple:!1,toggle:!1,reverse:!1,buttons:!1,modal:!1,selectOver:!1,minDate:null,maxDate:null,init:null,select:null,apply:null,click:null,page:null,prev:null,next:null}})),a("jquery",["./shim/utils"],(function(e){var t;try{t=i||l}catch(e){}return e.register("jquery","npm install jquery --save",t)})),a("methods/configure",["../component/global","../component/models","../component/options","../configures/i18n","jquery"],(function(e,t,n,r,a){return function(i){var s=this;s.settings=a.extend(!0,{},n,i),s.settings.lang||(s.settings.lang=e.language),s.settings.lang!==r.defaultLanguage&&-1!==a.inArray(s.settings.lang,e.languages.supports)&&(s.settings.weeks=e.languages.weeks[s.settings.lang]||e.languages.weeks[r.defaultLanguage],s.settings.monthsLong=e.languages.monthsLong[s.settings.lang]||e.languages.monthsLong[r.defaultLanguage],s.settings.months=e.languages.months[s.settings.lang]||e.languages.months[r.defaultLanguage],s.settings.controls=e.languages.controls[s.settings.lang]||e.languages.controls[r.defaultLanguage]),"light"!==s.settings.theme&&-1===a.inArray(s.settings.theme,t.preference.supports.themes)&&(s.settings.theme="light"),!0===s.settings.pickWeeks&&(!1===s.settings.multiple?console.error("You must give true at settings.multiple options on PIGNOSE-Calendar for using in pickWeeks option."):!0===s.settings.toggle&&console.error("You must give false at settings.toggle options on PIGNOSE-Calendar for using in pickWeeks option.")),s.settings.week%=s.settings.weeks.length}})),a("methods/init",["../manager/index","../component/classNames","../component/helper","../component/models","../component/global","./configure","jquery","moment"],(function(e,t,n,r,a,i,o,d){var l=o(window);return o(document),function(u){var c=this;c.settings={},i.call(c,u),c.global={calendarHtml:n.format('<div class="{0} {0}-{4}">                                    <div class="{1}">                                      <a href="#" class="{1}-nav {1}-prev">                                          <span class="icon-arrow-left {1}-icon"></span>                                      </a>                                      <div class="{1}-date">                                          <span class="{1}-month"></span>                                          <span class="{1}-year"></span>                                      </div>                                      <a href="#" class="{1}-nav {1}-next">                                          <span class="icon-arrow-right {1}-icon"></span>                                      </a>                                    </div>                                    <div class="{2}"></div>                                    <div class="{3}"></div>                                  </div>',n.getClass(r.name),t.top,t.header,t.body,c.settings.theme),calendarButtonsHtml:n.format('<div class="{0}-group">                                            <a href="#" class="{0} {0}-cancel">{1}</a>                                            <a href="#" class="{0} {0}-apply">{2}</a>                                          </div>',t.button,c.settings.controls.cancel,c.settings.controls.ok),calendarScheduleContainerHtml:n.format('<div class="{0}-schedule-container"></div>',t.button),calendarSchedulePinHtml:n.format('<span class="{0}-schedule-pin {0}-schedule-pin-\\{0\\}" style="background-color: \\{1\\};"></span>',t.button)};var m=n.getSubClass("unitRange"),_=n.getSubClass("unitRangeFirst"),p=n.getSubClass("unitRangeLast"),f=n.getSubClass("unitActive"),h=[n.getSubClass("unitFirstActive"),n.getSubClass("unitSecondActive")],g=n.getSubClass("unitToggleActive"),y=n.getSubClass("unitToggleInactive"),k=null;return c.each((function(){var i=o(this),u={initialize:null,element:i,calendar:o(c.global.calendarHtml),input:i.is("input"),renderer:null,current:[null,null],date:{all:[],enabled:[],disabled:[]},storage:{activeDates:[],schedules:[]},dateManager:new e(c.settings.date),calendarWrapperHtml:n.format('<div class="{0}"></div>',n.getSubClass("wrapper")),calendarWrapperOverlayHtml:n.format('<div class="{0}"></div>',n.getSubClass("wrapperOverlay")),context:c},b=i;!0===c.settings.initialize&&(u.initialize=u.current[0]=u.dateManager.date.clone()),this.local=u,!0===c.settings.reverse?u.calendar.addClass(n.getSubClass("reverse")):u.calendar.addClass(n.getSubClass("default"));for(var M=c.settings.week;M<c.settings.weeks.length+c.settings.week;M++){M<0&&(M=a.languages.weeks.en.length-M);var A=c.settings.weeks[M%c.settings.weeks.length];"string"==typeof A&&(A=A.toUpperCase(),o(n.format('<div class="{0} {0}-{2}">{1}</div>',n.getSubClass("week"),A,a.languages.weeks.en[M%a.languages.weeks.en.length].toLowerCase())).appendTo(u.calendar.find("."+t.header)))}if(!0===c.settings.buttons&&(k=o(c.global.calendarButtonsHtml)).appendTo(u.calendar),!0===u.input||!0===c.settings.modal){var w,L=n.getSubClass("wrapperActive"),Y=n.getSubClass("wrapperOverlayActive");(b=o(u.calendarWrapperHtml)).bind("click",(function(e){e.stopPropagation()})),i.bind("click",(function(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),(w=o("."+n.getSubClass("wrapperOverlay"))).length<1&&(w=o(u.calendarWrapperOverlayHtml)).appendTo("body"),w.unbind("click."+n.getClass(r.name)).bind("click."+n.getClass(r.name),(function(e){e.stopPropagation(),b.trigger("cancel."+n.getClass(r.name))})),!1===b.parent().is("body")&&b.appendTo("body"),b.show(),w.show(),l.unbind("resize."+n.getClass(r.name)).bind("resize."+n.getClass(r.name),(function(){b.css({marginLeft:-b.outerWidth()/2,marginTop:-b.outerHeight()/2})})).triggerHandler("resize."+n.getClass(r.name)),i[r.name]("set",i.val()),setTimeout((function(){w.addClass(Y),b.addClass(L)}),25)})).bind("focus",(function(e){o(this).blur()})),b.unbind("cancel."+n.getClass(r.name)+" apply."+n.getClass(r.name)).bind("cancel."+n.getClass(r.name)+" apply."+n.getClass(r.name),(function(){w.removeClass(Y).hide(),b.removeClass(L).hide()}))}var x=function(){if(!u.current[0]||!u.current[1])return!1;var e=u.current[0].format("YYYY-MM-DD"),t=u.current[1].format("YYYY-MM-DD"),r=d(Math.max(u.current[0].valueOf(),u.dateManager.date.clone().startOf("month").valueOf())),a=d(Math.min(u.current[1].valueOf(),u.dateManager.date.clone().endOf("month").valueOf())),i=r.format("YYYY-MM-DD")!==e,s=a.format("YYYY-MM-DD")!==t;!1===i&&r.add(1,"days"),!1===s&&a.add(-1,"days");for(var o=r.format("YYYY-MM-DD"),l=a.format("YYYY-MM-DD");r.format("YYYY-MM-DD")<=a.format("YYYY-MM-DD");r.add(1,"days")){var c=r.format("YYYY-MM-DD"),f=u.calendar.find(n.format('.{0}[data-date="{1}"]',n.getSubClass("unit"),c)).addClass(m);c===o&&f.addClass(_),c===l&&f.addClass(p)}},v=function(e,t,n){return!!n&&e.diff(n)<0&&t.diff(n)>0};u.renderer=function(){if(u.calendar.appendTo(b.empty()),u.calendar.find("."+t.top+"-year").text(u.dateManager.year),u.calendar.find("."+t.top+"-month").text(c.settings.monthsLong[u.dateManager.month-1]),u.calendar.find(n.format(".{0}-prev .{0}-value",t.top)).text(c.settings.months[u.dateManager.prevMonth-1].toUpperCase()),u.calendar.find(n.format(".{0}-next .{0}-value",t.top)).text(c.settings.months[u.dateManager.nextMonth-1].toUpperCase()),!0===c.settings.buttons&&k){var l=i;k.find("."+t.button).bind("click",(function(e){e.preventDefault(),e.stopPropagation();var a=o(this);if(a.hasClass(t.button+"-apply")){a.trigger("apply."+r.name,u);var i="";if(!0===c.settings.toggle)i=u.storage.activeDates.join(", ");else if(!0===c.settings.multiple){var s=[];null!==u.current[0]&&s.push(u.current[0].format(c.settings.format)),null!==u.current[1]&&s.push(u.current[1].format(c.settings.format)),i=s.join(" ~ ")}else i=null===u.current[0]?"":d(u.current[0]).format(c.settings.format);!0===u.input&&l.val(i).triggerHandler("change"),"function"==typeof c.settings.apply&&c.settings.apply.call(u.calendar,u.current,u),b.triggerHandler("apply."+n.getClass(r.name))}else b.triggerHandler("cancel."+n.getClass(r.name))}))}var M=u.calendar.find("."+t.body).empty(),A=e.Convert(u.dateManager.year,u.dateManager.month,u.dateManager.firstDay),w=e.Convert(u.dateManager.year,u.dateManager.month,u.dateManager.lastDay),L=A.weekday()-c.settings.week,Y=w.weekday()-c.settings.week;L<0&&(L+=c.settings.weeks.length);for(var C=[],D=[null===u.current[0]?null:u.current[0].format("YYYY-MM-DD"),null===u.current[1]?null:u.current[1].format("YYYY-MM-DD")],T=null===c.settings.minDate?null:d(c.settings.minDate),B=null===c.settings.maxDate?null:d(c.settings.maxDate),S=0;S<L;S++){var j=o(n.format('<div class="{0} {0}-{1}"></div>',n.getSubClass("unit"),a.languages.weeks.en[S].toLowerCase()));C.push(j)}for(var H=function(t){var l=e.Convert(u.dateManager.year,u.dateManager.month,t),k=l.format("YYYY-MM-DD"),M=o(n.format('<div class="{0} {0}-date {0}-{3}" data-date="{1}"><a href="#">{2}</a></div>',n.getSubClass("unit"),l.format("YYYY-MM-DD"),t,a.languages.weeks.en[l.weekday()].toLowerCase()));if(c.settings.enabledDates.length>0)-1===o.inArray(k,c.settings.enabledDates)&&M.addClass(n.getSubClass("unitDisabled"));else if(c.settings.disabledWeekdays.length>0&&-1!==o.inArray(l.weekday(),c.settings.disabledWeekdays))M.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledWeekdays"));else if(null!==T&&T.diff(l)>0||null!==B&&B.diff(l)<0)M.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledRange"));else if(-1!==o.inArray(k,c.settings.disabledDates))M.addClass(n.getSubClass("unitDisabled"));else if(c.settings.disabledRanges.length>0)for(var A=c.settings.disabledRanges.length,w=0;w<A;w++){var L=c.settings.disabledRanges[w];if(L.length,l.diff(d(L[0]))>=0&&l.diff(d(L[1]))<=0){M.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledRange")).addClass(n.getSubClass("unitDisabledMultipleRange"));break}}if(c.settings.schedules.length>0&&"object"===s(c.settings.scheduleOptions)&&"object"===s(c.settings.scheduleOptions.colors)){var Y=c.settings.schedules.filter((function(e){return e.date===k})),S=o.unique(Y.map((function(e,t){return e.name})).sort());if(S.length>0){var j=o(c.global.calendarScheduleContainerHtml);j.appendTo(M),S.map((function(e,t){if(c.settings.scheduleOptions.colors[e]){var r=c.settings.scheduleOptions.colors[e];o(n.format(c.global.calendarSchedulePinHtml,e,r)).appendTo(j)}}))}}!0===c.settings.toggle?-1!==o.inArray(k,u.storage.activeDates)&&u.storage.activeDates.length>0?M.addClass(g):M.addClass(y):!1===M.hasClass(n.getSubClass("unitDisabled"))&&(!0===c.settings.multiple?(D[0]&&k===D[0]&&M.addClass(f).addClass(h[0]),D[1]&&k===D[1]&&M.addClass(f).addClass(h[1])):D[0]&&k===D[0]&&-1===o.inArray(D[0],c.settings.disabledDates)&&(c.settings.enabledDates.length<1||-1!==o.inArray(D[0],c.settings.enabledDates))&&M.addClass(f).addClass(h[0])),C.push(M);var H=i;M.bind("click",(function(e){e.preventDefault(),e.stopPropagation();var t=o(this),a=t.data("date"),i=0,s=!1;if(t.hasClass(n.getSubClass("unitDisabled")))s=!0;else if(!0===u.input&&!1===c.settings.multiple&&!1===c.settings.buttons)H.val(d(a).format(c.settings.format)),b.triggerHandler("apply."+n.getClass(r.name));else if(null!==u.initialize&&u.initialize.format("YYYY-MM-DD")===a&&!1===c.settings.toggle);else{if(!0===c.settings.toggle){var l=u.storage.activeDates.filter((function(e,t){return e===a}));if(u.current[i]=d(a),l.length<1)u.storage.activeDates.push(a),t.addClass(g).removeClass(y);else{for(var k=0,M=0;M<u.storage.activeDates.length;M++){var A=u.storage.activeDates[M];if(a===A){k=M;break}}u.storage.activeDates.splice(k,1),t.removeClass(g).addClass(y)}}else if(!0===t.hasClass(f)&&!1===c.settings.pickWeeks)!0===c.settings.multiple&&(t.hasClass(h[0])?i=0:h[1]&&(i=1)),t.removeClass(f).removeClass(h[i]),u.current[i]=null;else{if(!0===c.settings.pickWeeks)if(!0===t.hasClass(f)||!0===t.hasClass(m)){for(var w=0;w<2;w++)u.calendar.find("."+f+"."+h[w]).removeClass(f).removeClass(h[w]);u.current[0]=null,u.current[1]=null}else{u.current[0]=d(a).startOf("week").add(c.settings.week,"days"),u.current[1]=d(a).endOf("week").add(c.settings.week,"days");for(var L=0;L<2;L++)u.calendar.find("."+f+"."+h[L]).removeClass(f).removeClass(h[L]),u.calendar.find(n.format('.{0}[data-date="{1}"]',n.getSubClass("unit"),u.current[L].format("YYYY-MM-DD"))).addClass(f).addClass(h[L])}else!0===c.settings.multiple&&(null===u.current[0]?i=0:null===u.current[1]?i=1:(i=0,u.current[1]=null,u.calendar.find("."+f+"."+h[1]).removeClass(f).removeClass(h[1]))),u.calendar.find("."+f+"."+h[i]).removeClass(f).removeClass(h[i]),t.addClass(f).addClass(h[i]),u.current[i]=d(a);if(u.current[0]&&u.current[1]){if(u.current[0].diff(u.current[1])>0){var Y=u.current[0];u.current[0]=u.current[1],u.current[1]=Y,Y=null,u.calendar.find("."+f).each((function(){var e=o(this);for(var t in h){var n=h[t];e.toggleClass(n)}}))}if(!1===function(e,t){var n;for(var r in c.settings.disabledDates)if(n=d(c.settings.disabledDates[r]),v(e,t,n))return!1;if(v(e,t,c.settings.maxDate))return!1;if(v(e,t,c.settings.minDate))return!1;for(var a in c.settings.disabledRanges){var i=c.settings.disabledRanges[a],s=d(i[0]),o=d(i[1]);if(v(e,t,s)||v(e,t,o))return!1}var l,u=e.weekday(),m=t.weekday();u>m&&(l=u,u=m,m=l);for(var _=0,p=0;_<c.settings.disabledWeekdays.length&&p<7;_++){p++;var f=c.settings.disabledWeekdays[_];if(f>=u&&f<=m)return!1}return!0}(u.current[0],u.current[1])&&!1===c.settings.selectOver&&(u.current[0]=null,u.current[1]=null,u.calendar.find("."+f).removeClass(f).removeClass(h[0]).removeClass(h[1])),!0===u.input&&!1===c.settings.buttons){var C=[];null!==u.current[0]&&C.push(u.current[0].format(c.settings.format)),null!==u.current[1]&&C.push(u.current[1].format(c.settings.format)),t.val(C.join(", ")),b.trigger("apply."+n.getClass(r.name))}}}!0===c.settings.multiple&&(u.calendar.find("."+m).removeClass(m).removeClass(_).removeClass(p),x.call()),c.settings.schedules.length>0&&(u.storage.schedules=c.settings.schedules.filter((function(e){return e.date===a})))}var D=function(e){u.date.all.push(e),function(e){if(-1!==c.settings.disabledDates.indexOf(e))return!1;if(e.diff(c.settings.maxDate)>=0)return!1;if(e.diff(c.settings.minDate)<=0)return!1;for(var t in c.settings.disabledRanges){var n=c.settings.disabledRanges[t],r=d(n[0]),a=d(n[1]);if(v(r,a,e))return!1}var i=e.weekday();return-1===c.settings.disabledWeekdays.indexOf(i)}(d(e))?u.date.enabled.push(e):u.date.disabled.push(e)};if(u.current[0])if(u.current[1])for(var T=u.current[0].clone();T.format("YYYY-MM-DD")<=u.current[1].format("YYYY-MM-DD");T.add("1","days"))D(T.clone());else D(u.current[0].clone());!1===s&&(u.initialize=null,"function"==typeof c.settings.select&&c.settings.select.call(t,u.current,u)),"function"==typeof c.settings.click&&c.settings.click.call(t,e,u)}))},E=u.dateManager.firstDay;E<=u.dateManager.lastDay;E++)H(E);for(var W=Y+1;C.length<5*c.settings.weeks.length;W++){W<0&&(W=a.languages.weeks.en.length-W);var O=o(n.format('<div class="{0} {0}-{1}"></div>',n.getSubClass("unit"),a.languages.weeks.en[W%a.languages.weeks.en.length].toLowerCase()));C.push(O)}for(var P=null,F=0;F<C.length;F++){var z=C[F];(F%c.settings.weeks.length==0||F+1>=C.length)&&(null!==P&&P.appendTo(M),F+1<C.length&&(P=o(n.format('<div class="{0}"></div>',n.getSubClass("row"))))),P.append(z)}u.calendar.find("."+t.top+"-nav").bind("click",(function(n){n.preventDefault(),n.stopPropagation();var r=o(this),a="unkown";r.hasClass(t.top+"-prev")?(a="prev",u.dateManager=new e(u.dateManager.date.clone().add(-1,"months"))):r.hasClass(t.top+"-next")&&(a="next",u.dateManager=new e(u.dateManager.date.clone().add(1,"months"))),"function"==typeof c.settings.page&&c.settings.page.call(r,{type:a,year:u.dateManager.year,month:u.dateManager.month,day:u.dateManager.day},u),"function"==typeof c.settings[a]&&c.settings[a].call(r,{type:a,year:u.dateManager.year,month:u.dateManager.month,day:u.dateManager.day},u),u.renderer.call()})),!0===c.settings.multiple&&(u.calendar.find("."+m).removeClass(m).removeClass(_).removeClass(p),x.call())},u.renderer.call(),i[0][r.name]=u,"function"==typeof c.settings.init&&c.settings.init.call(i,u)}))}})),a("methods/setting",["../component/global","../configures/i18n","jquery"],(function(e,t,n){return function(t){var r=n.extend({language:e.language,languages:{},week:null,format:null},t),a=12;if(e.language=r.language,Object.keys(r.languages).length>0){var i=function(t){var n=r.languages[t];if("string"!=typeof t&&console.error("global configuration is failed.\nMessage: language key is not a string type.",t),!n.weeks)return console.warn("Warning: `weeks` option of `"+t+"` language is missing."),"break";if(!n.monthsLong)return console.warn("Warning: `monthsLong` option of `"+t+"` language is missing."),"break";if(!n.months)return console.warn("Warning: `months` option of `"+t+"` language is missing."),"break";if(!n.controls)return console.warn("Warning: `controls` option of `"+t+"` language is missing."),"break";if(n.weeks){if(n.weeks.length<7)return console.error("`weeks` must have least 7 items."),"break";7!==n.weeks.length&&console.warn("`weeks` option over 7 items. We recommend to give 7 items.")}if(n.monthsLong){if(n.monthsLong.length<a)return console.error("`monthsLong` must have least 12 items."),"break";n.monthsLong.length!==a&&console.warn("`monthsLong` option over 12 items. We recommend to give 12 items.")}if(n.months){if(n.months.length<a)return console.error("`months` must have least 12 items."),"break";n.months.length!==a&&console.warn("`months` option over 12 items. We recommend to give 12 items.")}if(n.controls){if(!n.controls.ok)return console.error("`controls.ok` value is missing in your language setting"),"break";if(!n.controls.cancel)return console.error("`controls.cancel` value is missing in your language setting"),"break"}-1===e.languages.supports.indexOf(t)&&e.languages.supports.push(t),["weeks","monthsLong","months","controls"].map((function(r){e.languages[r][t]&&console.warn("`"+t+"` language is already given however it will be overwriten."),e.languages[r][t]=n[r]||e.languages[r][t.defaultLanguage]}))};for(var s in r.languages)if("break"===i(s))break}r.week&&("number"==typeof r.week?e.week=r.week:console.error("global configuration is failed.\nMessage: You must give `week` option as number type.")),r.format&&("string"==typeof r.format?e.format=r.format:console.error("global configuration is failed.\nMessage: You must give `format` option as string type."))}})),a("methods/select",["../component/helper","jquery"],(function(e,t){return function(n){this.each((function(){var r=this.local.dateManager,a=e.format("{0}-{1}-{2}",r.year,r.month,n);t(this).find(e.format('.{0}[data-date="{1}"]',e.getSubClass("unit"),a)).triggerHandler("click")}))}})),a("methods/set",["jquery","moment","../manager/index","../component/models"],(function(e,t,n,r){return function(a){if(a){var i=a.split("~").map((function(t){return e.trim(t)||null}));this.each((function(){var a=e(this)[0][r.name],s=a.context,o=[i[0]?t(i[0],s.settings.format):null,i[1]?t(i[1],s.settings.format):null];if(a.dateManager=new n(o[0]),!0===s.settings.pickWeeks&&o[0]){var d=o[0];o[0]=d.clone().startOf("week"),o[1]=d.clone().endOf("week")}!0===s.settings.toggle?a.storage.activeDates=i:a.current=o,a.renderer.call()}))}}})),a("methods/index",["./init","./configure","./setting","./select","./set"],(function(e,t,n,r,a){return{init:e,configure:t,setting:n,select:r,set:a}})),a("component/polyfills",[],(function(){Array.prototype.filter||(Array.prototype.filter=function(e){"use strict";if(null===this)throw new TypeError;var t=Object(this),n=t.length>>>0;if("function"!=typeof e)return[];for(var r=[],a=arguments[1],i=0;i<n;i++)if(i in t){var s=t[i];e.call(a,s,i,t)&&r.push(s)}return r})})),a("core",["./methods/index","./component/models","./component/polyfills"],(function(e,t){"use strict";return window[t.name]={version:t.version},e})),a("main",["core","component/models"],(function(e,t){"use strict";var n=function(t,n){return void 0!==e[n]?e[n].apply(t,Array.prototype.slice.call(arguments,2)):"object"!==s(n)&&n?void console.error("Argument error are occured."):e.init.apply(t,Array.prototype.slice.call(arguments,1))};for(var r in n.component={},t)n.component[r]=t[r];return n}));var o=r("main"),d=r("component/models"),l=r("jquery"),u=window||{};for(var c in u.moment=r("moment"),l.fn[d.name]=function(e){return o.apply(o,[this,e].concat(Array.prototype.splice.call(arguments,1)))},d)l.fn[d.name][c]=d[c];a("plugins/jquery.js",(function(){}))}(0,t)}.apply(t,r))||(e.exports=a)},7025:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(2777);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},8967:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(6403);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},1266:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(6114);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},4543:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(698);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},9349:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(1169);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},4493:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(3353);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},9430:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(6498);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},3577:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(6263);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},7113:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(8622);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},7323:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(8236);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},5139:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(9402);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},5691:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(1798);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},4773:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(1189);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},9671:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(8043);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},1184:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(4456);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},2793:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(978);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},4277:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(215);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},9620:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(4800);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},4814:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(3962);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},3071:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n(3379),a=n.n(r),i=n(6647);a()(i.Z,{insert:"head",singleton:!1});const s=i.Z.locals||{}},3379:(e,t,n)=>{"use strict";var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function s(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function o(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],d=t.base?o[0]+t.base:o[0],l=n[d]||0,u="".concat(d," ").concat(l);n[d]=l+1;var c=s(u),m={css:o[1],media:o[2],sourceMap:o[3]};-1!==c?(i[c].references++,i[c].updater(m)):i.push({identifier:u,updater:f(m,t),references:1}),r.push(u)}return r}function d(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var s=a(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function c(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var i=document.createTextNode(a),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function m(e,t,n){var r=n.css,a=n.media,i=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var _=null,p=0;function f(e,t){var n,r,a;if(t.singleton){var i=p++;n=_||(_=d(t)),r=c.bind(null,n,i,!1),a=c.bind(null,n,i,!0)}else n=d(t),r=m.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=o(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=s(n[r]);i[a].references--}for(var d=o(e,t),l=0;l<n.length;l++){var u=s(n[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=d}}}},2675:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0}),n(2769),r((function(){var e={week:1,lang:"custom",multiple:!0,buttons:!0,format:"DD.MM.YYYY",weeks:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],monthsLong:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],months:["Янв","Февр","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Нояб","Дек"],controls:{cancel:"Очистить",ok:"Применить"}};function t(e){var t=e.closest(".pignose-calendar-body"),n=t.find(".pignose-calendar-unit-first-active"),r=t.find(".pignose-calendar-unit-second-active");0!=n.length&&0!=r.length?(n.addClass("active-first"),r.addClass("active-second")):(t.find(".active-first").removeClass("active-first"),t.find(".active-second").removeClass("active-second"))}r(".dropdown-dates .calendar").pignoseCalendar(r.extend(e,{apply:function(e,t){r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown:first").trigger("click")},select:function(e,n){null!=e[0]?(r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[0].innerText=e[0].format("DD.MM.YYYY"),t(r(this))):(r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[0].innerText="ДД.ММ.ГГГГ",t(r(this))),null!=e[1]?(r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[1].innerText=e[1].format("DD.MM.YYYY"),t(r(this))):(r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[1].innerText="ДД.ММ.ГГГГ",t(r(this)))}})),r(".dropdown-block .calendar").pignoseCalendar(r.extend(e,{apply:function(e,t){r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").trigger("click")},select:function(e,n){if(null!=e[0]&&null!=e[1]){var a=n.context.settings.months[e[0].format("M")-1],i=n.context.settings.months[e[1].format("M")-1];r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").html(e[0].format("D")+" "+a+" - "+e[1].format("D")+" "+i),t(r(this))}else r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").html("Выберите диапазон дат..."),t(r(this))}})),r(".ui-kit-cards__calendar-block .calendar").pignoseCalendar(e),r(".dropdown-block__dropdown").on("click",(function(){var e;0!=r(this).closest(".dropdown-dates").length?e=r(this).closest(".dropdown-dates").find(".calendar-block"):0!=r(this).closest(".dropdown-block").length&&(e=r(this).closest(".dropdown-block").find(".calendar-block")),e.hasClass("calendar-block_hide")?(e.removeClass("calendar-block_hide").addClass("calendar-block_open"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("calendar-block_hide").removeClass("calendar-block_open"),r(this).removeClass("dropdown-block__dropdown_items-show"))})),r(".pignose-calendar-button-cancel").on("click",(function(e){e.preventDefault(),0!=r(this).closest(".dropdown-dates").length?(r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[0].innerText="ДД.ММ.ГГГГ",r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[1].innerText="ДД.ММ.ГГГГ",r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown:first").trigger("click")):0!=r(this).closest(".dropdown-block").length&&(r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").html("Выберите диапазон дат..."),r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").trigger("click"))})),r(document).on("click",(function(e){var t=r(e.target),n=1==t.hasClass("dropdown-block__dropdown"),a=r(".calendar-block").hasClass("calendar-block_open");!n&&a&&(0!=t.closest(".calendar-block_open").length||t.hasClass("calendar-block_open")||(0!=r(".calendar-block_open").closest(".dropdown-dates").length&&r(".calendar-block_open").closest(".dropdown-dates").find(".dropdown-block__dropdown:first").trigger("click"),0!=r(".calendar-block_open").closest(".dropdown-block").length&&r(".calendar-block_open").closest(".dropdown-block").find(".dropdown-block__dropdown").trigger("click")))}))}))},2450:(e,t,n)=>{var r=n(9755);r((function(){r(".checkbox-list-expandable__topicBlock").on("click",(function(){var e=r(this).closest(".checkbox-list-expandable").find(".checkbox-list"),t=r(this).closest(".checkbox-list-expandable").find(".checkbox-list-expandable__expand");e.hasClass("checkbox-list_hide")?(e.removeClass("checkbox-list_hide"),t.addClass("checkbox-list-expandable__expand_open")):(e.addClass("checkbox-list_hide"),t.removeClass("checkbox-list-expandable__expand_open"))}))}))},9779:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9755);r((function(){function e(e){var n="";"guests"==e.attr("name")&&(n=function(e){for(var n,r,a,i,s=e.find(".dropdown-block__items-line"),o="",d=0,l=0,u=0;u<s.length;u++)n=s[u].querySelector(".dropdown-block__block-qty span"),r=s[u].querySelector("h3"),parseInt(n.innerHTML)>0&&"младенцы"!=r.innerHTML&&(d+=parseInt(n.innerHTML)),parseInt(n.innerHTML)>0&&"младенцы"==r.innerHTML&&(l+=parseInt(n.innerHTML));return a=t("гостя",d),i=t("младенца",l),0==d&&(o="Сколько гостей"),0!=d&&0!=l&&(o=d+" "+a+", "+l+" "+i),0!=d&&0==l&&(o=d+" "+a),o}(e)),"room"==e.attr("name")&&(n=function(e){for(var n,r,a=e.find(".dropdown-block__items-line"),i="",s=0;s<a.length;s++)n=a[s].querySelector(".dropdown-block__block-qty span"),r=t(a[s].querySelector("h3").innerHTML,parseInt(n.innerHTML)),parseInt(n.innerHTML)>0&&(i=i+n.innerHTML+" "+r+", ");return""==(i=i.substr(0,i.length-2))&&(i="Выберите удобства"),i}(e)),n.length>19&&(n=n.substr(0,20)+"..."),e.find(".dropdown-block__dropdown").html(n)}function t(e,t){var n={bedroom:["спальня","спальни","спален"],bed:["кровать","кровати","кроватей"],bathroom:["ванная комната","ванные комнаты","ванных комнат"],guest:["гость","гостя","гостей"],baby:["младенец","младенца","младенцев"]},r="";for(var a in n)e.toLowerCase()==n[a][1].toLowerCase()&&(t<=20&&t>=5?r=n[a][2]:(t%10!=0&&t%10!=5&&t%10!=6&&t%10!=7&&t%10!=8&&t%10!=9||(r=n[a][2]),t%10==1&&(r=n[a][0]),t%10!=2&&t%10!=3&&t%10!=4||(r=n[a][1])));return r}r(".dropdown-block__dropdown").on("click",(function(){var e=r(this).closest(".dropdown-block").find(".dropdown-block__dropdown-items");e.hasClass("dropdown-block__dropdown-items_hide")?(e.removeClass("dropdown-block__dropdown-items_hide"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("dropdown-block__dropdown-items_hide"),r(this).removeClass("dropdown-block__dropdown_items-show"))})),r(".dropdown-block__inc-qty-minus").on("click",(function(){var t,n,a=0;if(t=r(this).closest(".dropdown-block__block-qty").find("span"),(n=parseInt(t.html()))>0&&(a=n-1,t.html(a)),1==n||0==n)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var i=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-plus");i.hasClass("dropdown-block__inc-qty_disable")&&i.removeClass("dropdown-block__inc-qty_disable")}e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__inc-qty-plus").on("click",(function(){var t,n,a=0;if(t=r(this).closest(".dropdown-block__block-qty").find("span"),(n=parseInt(t.html()))<10&&(a=n+1,t.html(a)),9==n||10==n)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var i=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-minus");i.hasClass("dropdown-block__inc-qty_disable")&&i.removeClass("dropdown-block__inc-qty_disable")}e(r(this).closest(".dropdown-block")),r(this).closest(".dropdown-block__dropdown-items").find(".dropdown-block__btns .link_clean").css("display","block"),r(this).closest(".dropdown-block__dropdown-items").find(".dropdown-block__btns").removeClass("dropdown-block__btns_flex-end")})),r(".dropdown-block__btns .link_ok").on("click",(function(){event.preventDefault(),r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").click(),e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__btns .link_clean").on("click",(function(){event.preventDefault();var t=r(this).closest(".dropdown-block__dropdown-items");t.find(".dropdown-block__block-qty").find("span").html("0"),t.find(".dropdown-block__inc-qty-minus").addClass("dropdown-block__inc-qty_disable"),t.find(".dropdown-block__inc-qty-plus").removeClass("dropdown-block__inc-qty_disable"),e(r(this).closest(".dropdown-block")),r(this).css("display","none"),r(this).closest(".dropdown-block__btns").addClass("dropdown-block__btns_flex-end")}))}))},232:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(3450),new Cleave(".input-text__input_date",{date:!0,delimiter:".",datePattern:["d","m","Y"]})},1390:(e,t,n)=>{var r=n(9755);r((function(){r(".like").on("click",(function(){var e=parseInt(r(this).find(".like__sum").html());r(this).hasClass("like_liked")?(r(this).removeClass("like_liked"),r(this).find(".like__ico").removeClass("like__ico_liked"),r(this).find(".like__sum").removeClass("like__sum_liked"),r(this).find(".like__sum").html(e-1)):(r(this).addClass("like_liked"),r(this).find(".like__ico").addClass("like__ico_liked"),r(this).find(".like__sum").addClass("like__sum_liked"),r(this).find(".like__sum").html(e+1))}))}))},1700:(e,t,n)=>{var r=n(9755);r((function(){r(".rate-btn__star").on("click",(function(){r(this).closest(".rate-btn").find(".rate-btn__star").removeClass("rate-btn__star_active");for(var e=parseInt(r(this).attr("id")),t=1;t<=e;t++)r(this).closest(".rate-btn").find("#"+t).addClass("rate-btn__star_active")}))}))},2556:(e,t,n)=>{var r=n(9755);r((function(){r(".toggle-block").on("click",(function(){var e=r(this).find(".toggle-block__toggle"),t=0;e.hasClass("toggle-block__toggle_off")&&0==t&&(e.removeClass("toggle-block__toggle_off"),e.addClass("toggle-block__toggle_on"),t++),e.hasClass("toggle-block__toggle_on")&&0==t&&(e.removeClass("toggle-block__toggle_on"),e.addClass("toggle-block__toggle_off"),t++)}))}))},6085:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Controller=void 0;var n=function(){function e(e,t,n){this.model=t,this.view=n,this.thisSlider=e.element,this.idElement=e.idElement,this.min=e.min,this.max=e.max,this.minStart=e.minStart,this.maxStart=e.maxStart,this.step=e.step,this.type=e.type,this.orientation=e.orientation,this.scale=e.scale,this.scaleStep=e.scaleStep,this.value=e.value,this.settings=e.settings}return e.prototype.defineOrientation=function(e){return"horizontal"==e?"x":"y"},e.prototype.moveAt=function(e,t,n){document.body.classList.add("moving-slider");var r=parseInt(e.style.left),a=this.model.getWidthRange();switch(n){case"left":this.model.rangeLeft.style.zindex=15,this.model.rangeRight.style.zindex=10;break;case"right":this.model.rangeRight.style.zindex=15,this.model.rangeLeft.style.zindex=10}var i=this.thisSlider,s=this;i.onmousemove=function(e){document.onmousemove=function(e){var t,i,o;switch(s.defineOrientation(s.orientation)){case"x":1==s.step?(t=e.pageX-parseInt(s.model.slider.offsetLeft),s.movingRange(n,r,t,a)):(o=s.masStepsForMoving(),i=e.pageX-parseInt(s.model.slider.offsetLeft),-1!=o.indexOf(i)?(t=i,s.movingRange(n,r,t,a)):t=r);break;case"y":var d=s.getCoords(s.model.slider);1==s.step?(t=e.pageY-d.top,s.movingRange(n,r,t,a)):(o=s.masStepsForMoving(),i=e.pageY-d.top,-1!=o.indexOf(i)?(t=i,s.movingRange(n,r,t,a)):t=r)}}},document.onmouseup=function(e){i.onmousemove=null,i.onmouseup=null,document.onmousemove=null,document.onmouseup=null,document.body.classList.remove("moving-slider")}},e.prototype.getCoords=function(e){var t=e.getBoundingClientRect();return{top:t.top+pageYOffset,left:t.left+pageXOffset}},e.prototype.movingRange=function(e,t,n,r){var a,i=0;function s(e,t){var n=e/t.model.getWidth();return((t.max-t.min)*n+t.min).toFixed()}n<0&&(n=0),n>this.model.getWidth()&&(n=this.model.getWidth()),n>=0&&n<=this.model.getWidth()&&("left"==e&&(this.model.getPosRangeRight()>=n&&"from0to"!=this.type?(a=s(n,this),i=t-n,this.model.rangeLeft.style.left=n+"px",this.model.range.style.transform="translate("+n+"px, 0px)"):(a=this.maxStart,i=t-this.model.getPosRangeRight(),this.model.rangeLeft.style.left=this.model.getPosRangeRight()+"px",this.model.range.style.transform="translate("+this.model.getPosRangeRight()+"px, 0px)"),this.drawValueMin(a),"on"==this.settings&&this.changeConfigInputMin(a),this.writeDataSliderMin(a),this.model.range.style.width=r+i+"px"),"right"==e&&(this.model.getPosRangeLeft()<=n?(a=s(n,this),i=n-t,this.model.rangeRight.style.left=n+"px"):(a=this.minStart,i=this.model.getPosRangeLeft()-t,this.model.rangeRight.style.left=this.model.getPosRangeLeft()+"px"),this.drawValueMax(a),"on"==this.settings&&this.changeConfigInputMax(a),this.writeDataSliderMax(a),this.model.range.style.width=r+i+"px"))},e.prototype.drawValueMin=function(e){this.model.elemValueMin.innerHTML=new Intl.NumberFormat("ru-RU").format(e)},e.prototype.drawValueMax=function(e){this.model.elemValueMax.innerHTML=new Intl.NumberFormat("ru-RU").format(e)},e.prototype.writeDataSliderMin=function(e){this.minStart=e,this.view.minStart=e},e.prototype.writeDataSliderMax=function(e){this.maxStart=e,this.view.maxStart=e},e.prototype.changeConfigInputMin=function(e){e<this.min&&(e=this.min),this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextminStart"+this.idElement.substr(-1)).value=e},e.prototype.changeConfigInputMax=function(e){e>this.max&&(e=this.max),this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmaxStart"+this.idElement.substr(-1)).value=e},e.prototype.moveRangeOnclickSlider=function(){var e=this.model.slider,t=this.model.range,n=this;e.addEventListener("mousedown",(function(r){var a;if(r.target==e||r.target==t){switch(n.defineOrientation(n.orientation)){case"x":a=r.pageX-parseInt(n.model.slider.offsetLeft),1!=n.step&&(a=n.definePosStepClosestClick(a));break;case"y":a=r.pageY-n.getCoords(n.model.slider).top,1!=n.step&&(a=n.definePosStepClosestClick(a))}switch(n.type){case"interval":var i=n.model.getPosRangeLeft(),s=n.model.getPosRangeRight();Math.abs(i-a)<Math.abs(s-a)||Math.abs(i-a)==Math.abs(s-a)&&a<i?(n.model.getPosRangeLeft(),n.movingRange("left",n.model.getPosRangeLeft(),a,n.model.getWidthRange())):(n.model.getPosRangeRight(),n.movingRange("right",n.model.getPosRangeRight(),a,n.model.getWidthRange()));break;case"from0to":case"one":n.model.getPosRangeRight(),n.movingRange("right",n.model.getPosRangeRight(),a,n.model.getWidthRange())}}}))},e.prototype.definePosStepClosestClick=function(e){var t,n,r,a=0,i=this.model.getWidth();t=this.masStepsForMoving();for(var s=0;s<t.length;s++)n=Math.abs(t[s]-e),r=Math.abs(t[s+1]-e),n<i?(a=t[s],i=n):r<i&&(a=t[s+1],i=r);return a},e.prototype.masStepsForMoving=function(){for(var e=(this.max-this.min)/this.step,t=this.model.getWidth()/(this.max-this.min)*this.step,n=[],r=0;r<=e;r++)n[r]=t*r;return n},e.prototype.applyConfig=function(){var e=this.model.checkboxSettings,t=this;function n(e,t){for(var n=e.querySelectorAll(".range-slider#idSlider"+t+" .range-slider__slider .range-slider__scale"),r=0;r<n.length;r++)n[r].remove();e.querySelector(".range-slider#idSlider"+t+" .range-slider__left").style.opacity=1,e.querySelector(".range-slider#idSlider"+t+" .range-slider__range").style.opacity=1}e.onclick=function(r){1==e.checked?t.model.settingsBlock.style.display="block":t.model.settingsBlock.style.display="none";for(var a=t.thisSlider.getElementsByClassName("input-text__input"),i=0;i<a.length;i++)a[i].onblur=function(){var e,r,a,i,s,o,d=this.id,l=t.idElement.substr(-1);-1!=d.indexOf("min",0)&&-1==d.indexOf("minStart",0)&&(e=Number.parseInt(this.value),n(t.thisSlider,l),t.min=e,t.view.min=e),-1!=d.indexOf("max",0)&&-1==d.indexOf("maxStart",0)&&(r=Number.parseInt(this.value),n(t.thisSlider,l),t.max=r,t.view.max=r),-1!=d.indexOf("minStart",0)&&(a=Number.parseInt(this.value),n(t.thisSlider,l),a<=t.maxStart&&(t.minStart=a,t.view.minStart=a)),-1!=d.indexOf("maxStart",0)&&(i=Number.parseInt(this.value),n(t.thisSlider,l),i>=t.minStart&&(t.maxStart=i,t.view.maxStart=i)),-1!=d.indexOf("scaleStep",0)&&(o=Number.parseInt(this.value),n(t.thisSlider,l),t.scaleStep=o,t.view.scaleStep=o),-1!=d.indexOf("step",0)&&(s=Number.parseInt(this.value),n(t.thisSlider,l),t.step=s,t.view.step=s),t.checkMinMaxStart(),t.view.drawType(),t.view.drawScale(),t.view.drawRange(),t.view.drawValue(),"on"==t.settings&&t.writeDataInConfig()};var s=t.thisSlider.getElementsByClassName("radiogroup__input");for(i=0;i<s.length;i++)s[i].onclick=function(){var e,r,a,i,s=t.idElement.substr(-1),o=this.name;if(-1!=o.indexOf("Type",0)){switch(this.id.substr(-1)){case"1":e="interval";break;case"2":e="from0to",t.minStart=t.min;break;case"3":e="one",t.minStart=t.min;break;default:e="interval"}n(t.thisSlider,s),t.type=e,t.view.type=e}if(-1!=o.indexOf("Orientation",0)){switch(this.id.substr(-1)){case"1":r="horizontal";break;case"2":r="vertical";break;default:r="horizontal"}n(t.thisSlider,s),t.orientation=r,t.view.orientation=r}if(-1!=o.indexOf("Value",0)){switch(this.id.substr(-1)){case"1":a="on";break;case"2":a="off";break;default:a="on"}n(t.thisSlider,s),t.value=a,t.view.value=a}if(-1!=o.indexOf("Scale",0)){switch(this.id.substr(-1)){case"1":i="on";break;case"2":i="off";break;default:i="on"}n(t.thisSlider,s),t.scale=i,t.view.scale=i}t.checkMinMaxStart(),t.view.drawType(),t.view.drawScale(),t.view.drawOrientation(),t.view.drawValue(),t.view.drawRange(),"on"==t.settings&&t.writeDataInConfig()}}},e.prototype.checkMinMaxStart=function(){this.minStart<this.min&&(this.minStart=this.min,this.view.minStart=this.min),this.maxStart>this.max&&(this.maxStart=this.max,this.view.maxStart=this.max),this.minStart>this.max&&(this.minStart=this.max,this.view.minStart=this.max)},e.prototype.writeDataInConfig=function(){this.model.elemValueMin.innerHTML=new Intl.NumberFormat("ru-RU").format(this.minStart),this.model.elemValueMax.innerHTML=new Intl.NumberFormat("ru-RU").format(this.maxStart);var e,t,n,r,a=this.idElement.substr(-1);switch(this.type){case"interval":e="1";break;case"from0to":e="2",this.writeDataSliderMin(this.min);break;case"one":e="3",this.writeDataSliderMin(this.min);break;default:e="1"}switch(this.orientation){case"horizontal":t="1";break;case"vertical":t="2";break;default:t="1"}switch(this.value){case"on":n="1";break;case"off":n="2";break;default:n="1"}switch(this.scale){case"on":r="1";break;case"off":r="2";break;default:r="1"}this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmin"+a).value=this.min,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmax"+a).value=this.max,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextminStart"+a).value=this.minStart,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmaxStart"+a).value=this.maxStart,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextstep"+a).value=this.step,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextscaleStep"+a).value=this.scaleStep,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopType"+a+"]#rbrbGroopType"+a+a+e).checked=!0,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopOrientation"+a+"]#rbrbGroopOrientation"+a+a+t).checked=!0,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopValue"+a+"]#rbrbGroopValue"+a+a+n).checked=!0,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopScale"+a+"]#rbrbGroopScale"+a+a+r).checked=!0},e}();t.Controller=n},3469:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Model=void 0;var n=function(){function e(e){this.thisSlider=e.element,this.idElement=e.idElement,this.rangeSlider=this.thisSlider.querySelector(".range-slider#"+this.idElement),this.slider=this.rangeSlider.querySelector(".range-slider__slider"),this.range=this.slider.querySelector(".range-slider__range"),this.rangeLeft=this.slider.querySelector(".range-slider__left"),this.rangeRight=this.slider.querySelector(".range-slider__right"),this.elemValueMin=this.thisSlider.querySelector(".range-slider__label-min"),this.elemValueMax=this.thisSlider.querySelector(".range-slider__label-max"),this.checkboxSettings=this.thisSlider.querySelector(".slider-config .checkbox-list__input"),this.settingsBlock=this.thisSlider.querySelector(".slider-config .slider-config__block"),this.labelBlock=this.rangeSlider.querySelector(".range-slider__label-block"),this.labelMin=this.rangeSlider.querySelector("span.range-slider__label-min"),this.labelDash=this.rangeSlider.querySelector("span.range-slider__label-dash"),this.labelMax=this.rangeSlider.querySelector("span.range-slider__label-max"),this.blockScaleVals=this.slider.querySelectorAll(".range-slider__scale-val")}return e.prototype.getWidth=function(){return this.slider.clientWidth},e.prototype.getWidthRange=function(){return this.range.clientWidth},e.prototype.getPosRangeLeft=function(){return parseInt(getComputedStyle(this.rangeLeft).left)},e.prototype.getPosRangeRight=function(){return parseInt(getComputedStyle(this.rangeRight).left)},e}();t.Model=n},4358:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0});var a=n(3469),i=n(4229),s=n(6085);r.fn.slider=function(e){new(function(){function e(e){this.type="interval",this.orientation="horizontal",this.value="on",this.scale="on",this.settings="on",this.dataSlider={element:e.element,idElement:e.idElement,width:e.width||400,type:e.type||"interval",min:e.min||0,max:e.max||1e3,minStart:e.minStart||0,maxStart:e.maxStart||500,step:e.step||1,orientation:e.orientation||"horizontal",value:e.value||"on",scale:e.scale||"on",scaleStep:e.scaleStep||10,settings:e.settings||"on"}}return e.prototype.runSlider=function(){var e=new a.Model(this.dataSlider),t=new i.View(this.dataSlider,e),n=new s.Controller(this.dataSlider,e,t),r=this.dataSlider.settings;e.rangeSlider.style.width=this.dataSlider.width+"px",n.checkMinMaxStart(),"on"==this.dataSlider.settings&&n.writeDataInConfig(),t.drawRange(),n.moveRangeOnclickSlider(),"on"==r&&n.applyConfig(),e.rangeLeft.addEventListener("mousedown",(function(t){n.moveAt(e.rangeLeft,t,"left")})),e.rangeRight.addEventListener("mousedown",(function(t){n.moveAt(e.rangeRight,t,"right")})),t.drawType(),t.drawScale(),t.drawOrientation(),t.drawValue()},e}())(e).runSlider()}},4229:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var n=function(){function e(e,t){this.model=t,this.dataSlider=e,this.thisSlider=e.element,this.idElement=e.idElement,this.min=e.min,this.max=e.max,this.minStart=e.minStart,this.maxStart=e.maxStart,this.type=e.type,this.orientation=e.orientation,this.scale=e.scale,this.scaleStep=e.scaleStep,this.value=e.value}return e.prototype.drawRange=function(){var e,t;switch(t=this.model.getWidth()/(this.max-this.min)*(this.maxStart-this.min),this.model.rangeRight.style.left=t+"px",this.type){case"from0to":this.model.rangeLeft.style.left="0px",this.model.range.style.transform="translateX(-5px)",this.model.range.style.left="0px",this.model.range.style.width=t+"px";break;default:e=this.model.getWidth()/(this.max-this.min)*(this.minStart-this.min),this.model.rangeLeft.style.left=e+"px",this.model.range.style.transform="translateX("+e+"px)",this.model.range.style.left=e+"px",this.model.range.style.width=t-e+"px"}},e.prototype.drawType=function(){switch(this.type){case"interval":break;case"from0to":this.model.rangeLeft.style.opacity=0,this.model.range.style.transform="translate(-5px, 0px)",this.model.range.style.width=this.model.getPosRangeRight();break;case"one":this.model.rangeLeft.style.opacity=0,this.model.range.style.opacity=0,this.model.range.style.transform="translate(-5px, 0px)",this.model.labelMin.style.opacity=0,this.model.labelDash.style.opacity=0}},e.prototype.drawScale=function(){switch(this.scale){case"on":var e,t=void 0,n=this.min,r=void 0,a=void 0,i=void 0;this.scaleStep>0?t=this.scaleStep:(t=Math.floor(this.model.getWidth()/45),this.scaleStep=t),e=this.model.getWidth()/t;for(var s=0;s<=this.model.getWidth();)i='<div class="range-slider__scale">\n            <div class="range-slider__scale-line" id="scale'+(r=Math.floor(s))+'"></div>\n            </div>',this.model.slider.insertAdjacentHTML("beforeend",i),(a=this.model.slider.querySelector(".range-slider__scale-line#scale"+r).closest(".range-slider__scale")).style.left=r+"px",this.model.rangeSlider.style.marginBottom="35px",s+=e,a.insertAdjacentHTML("beforeend",'<div class="range-slider__scale-val">'+Math.floor(n)+"</div>"),n+=(this.max-this.min)/t}},e.prototype.drawOrientation=function(){var e,t="80px";switch(this.orientation){case"horizontal":this.model.slider.style.transform="translate(5px, 0) rotate(0deg)",this.model.rangeSlider.style.height=t;break;case"vertical":this.model.slider.style.transform="translate(5px, 0) rotate(90deg) translateX(50%)",this.model.rangeSlider.style.height=this.model.getWidth()+75+"px",e=this.model.blockScaleVals;for(var n=0;n<e.length;n++)e[n].style.transform="translate(5px, 0) rotate(-90deg)";break;default:this.model.slider.style.transform="translate(5px, 0) rotate(0deg)",this.model.rangeSlider.style.height=t}},e.prototype.drawValue=function(){switch(this.value){case"on":switch(this.model.labelBlock.style.opacity=1,this.model.labelMax.innerHTML=new Intl.NumberFormat("ru-RU").format(this.maxStart),this.type){case"interval":this.model.labelMin.innerHTML=new Intl.NumberFormat("ru-RU").format(this.minStart),this.model.labelMin.style.opacity=1,this.model.labelDash.style.opacity=1;break;case"from0to":this.model.labelMin.innerHTML=new Intl.NumberFormat("ru-RU").format(this.min),this.model.labelMin.style.opacity=1,this.model.labelDash.style.opacity=1;break;case"one":this.model.labelMin.innerHTML=new Intl.NumberFormat("ru-RU").format(this.minStart),this.model.labelMin.style.opacity=0,this.model.labelDash.style.opacity=0;break;default:this.model.labelMin.innerHTML=new Intl.NumberFormat("ru-RU").format(this.minStart),this.model.labelMin.style.opacity=1,this.model.labelDash.style.opacity=1}break;case"off":this.model.labelBlock.style.opacity=0}},e}();t.View=n},574:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0}),n(4358),r((function(){r(".ui-kit-form-elements").slider({element:document.querySelector(".ui-kit-form-elements__slider-blk"),idElement:"idSlider2",width:266,type:"interval",min:0,max:15948,minStart:5e3,maxStart:1e4,step:1,orientation:"horizontal",value:"on",scale:"off",scaleStep:10,settings:"off"})}))},5669:(e,t,n)=>{"use strict";e.exports=n.p+"fa1a72144ac2d38acadc.ttf"},8296:(e,t,n)=>{"use strict";e.exports=n.p+"11a8f9ccb449b7e2d396.woff"},827:(e,t,n)=>{"use strict";e.exports=n.p+"1b46ef391bfc4c1cd3c9.woff2"},1560:(e,t,n)=>{"use strict";e.exports=n.p+"41a74f586886634bd7b2.ttf"},1417:(e,t,n)=>{"use strict";e.exports=n.p+"b45e582577e958783349.woff"},1130:(e,t,n)=>{"use strict";e.exports=n.p+"518c6d83e38cb791a766.woff2"},9780:(e,t,n)=>{"use strict";e.exports=n.p+"6b4e920f77190de84640.ttf"},6308:(e,t,n)=>{"use strict";e.exports=n.p+"b547006cbe2561bcfd08.woff"},4306:(e,t,n)=>{"use strict";e.exports=n.p+"ac729c1b019a2870493d.woff2"},5092:(e,t,n)=>{"use strict";e.exports=n.p+"cfaa6b8889aa2a3864bd.ttf"},556:(e,t,n)=>{"use strict";e.exports=n.p+"0329bf8fcbfdd06caa24.woff"},5564:(e,t,n)=>{"use strict";e.exports=n.p+"dbf9cc3b5d0be6860367.woff2"},3999:(e,t,n)=>{"use strict";e.exports=n.p+"c6c20dcae6fec7f7d8d8.ttf"},584:(e,t,n)=>{"use strict";e.exports=n.p+"506bc4a1b94871060f27.woff"},7590:(e,t,n)=>{"use strict";e.exports=n.p+"58a12e29f98cf74223af.woff2"},5890:(e,t,n)=>{"use strict";e.exports=n.p+"1523a89666cba25358b0.ttf"},1077:(e,t,n)=>{"use strict";e.exports=n.p+"666df37fdf1c78ca22dd.woff"},3712:(e,t,n)=>{"use strict";e.exports=n.p+"95c2242ba06d2eb04005.woff2"},4294:(e,t,n)=>{"use strict";e.exports=n.p+"556b7c7932d5ceb9ad76.ttf"},152:(e,t,n)=>{"use strict";e.exports=n.p+"5b0c541e1805de383123.woff"},1774:(e,t,n)=>{"use strict";e.exports=n.p+"4a76cf9019fc26459d55.woff2"},6191:(e,t,n)=>{"use strict";e.exports=n.p+"bfee205d24288c541c60.ttf"},3439:(e,t,n)=>{"use strict";e.exports=n.p+"104190eff753f1f48305.woff"},8215:(e,t,n)=>{"use strict";e.exports=n.p+"0edffe13eb3520abb61f.woff2"},1505:(e,t,n)=>{"use strict";e.exports=n.p+"8c1bdca955e686bcf2cb.ttf"},7525:(e,t,n)=>{"use strict";e.exports=n.p+"3c654aa7f2065375464a.woff"},3752:(e,t,n)=>{"use strict";e.exports=n.p+"16bc8d656c91e8a76ba9.woff2"},8519:(e,t,n)=>{"use strict";e.exports=n.p+"2e3148e7bf07fa5c21bb.ttf"},5192:(e,t,n)=>{"use strict";e.exports=n.p+"1b9a451675040ad95dd4.woff"},4156:(e,t,n)=>{"use strict";e.exports=n.p+"d6ff863dbe7be962d2cc.woff2"},9643:(e,t,n)=>{"use strict";e.exports=n.p+"6bff27608003de04b59e.ttf"},9298:(e,t,n)=>{"use strict";e.exports=n.p+"05c8ae9716360e56163f.woff"},3572:(e,t,n)=>{"use strict";e.exports=n.p+"f7bb2606b3bb239169fe.woff2"},1637:(e,t,n)=>{"use strict";e.exports=n.p+"65fa68908e4fae2b067a.ttf"},5419:(e,t,n)=>{"use strict";e.exports=n.p+"a7bea9fcb5d2632f2e92.woff"},821:(e,t,n)=>{"use strict";e.exports=n.p+"8bd01fd0617233a136aa.woff2"},5651:(e,t,n)=>{"use strict";e.exports=n.p+"b2e5fcdebc2bb4364eea.ttf"},5589:(e,t,n)=>{"use strict";e.exports=n.p+"1415d3efde4fddeccbca.woff"},8959:(e,t,n)=>{"use strict";e.exports=n.p+"c416eeaec33891f7c008.woff2"},5145:(e,t,n)=>{"use strict";e.exports=n.p+"d4f770a49dfa69890fd4.ttf"},6182:(e,t,n)=>{"use strict";e.exports=n.p+"498c8cdbbcd5264ad13c.woff"},880:(e,t,n)=>{"use strict";e.exports=n.p+"518803d3e08549d2d704.woff2"},754:(e,t,n)=>{"use strict";e.exports=n.p+"4f81479dd27d841df169.ttf"},1182:(e,t,n)=>{"use strict";e.exports=n.p+"4c64e61a9bcaa39dd44b.woff"},970:(e,t,n)=>{"use strict";e.exports=n.p+"d64004d0d7925e305504.woff2"},1686:(e,t,n)=>{"use strict";e.exports=n.p+"feb9a9ab44bccb4cc66e.ttf"},5323:(e,t,n)=>{"use strict";e.exports=n.p+"fa5f925d970d6332a140.woff"},9575:(e,t,n)=>{"use strict";e.exports=n.p+"53b31a44d4132debc087.woff2"},779:(e,t,n)=>{"use strict";e.exports=n.p+"ef61e93fd5ee2045d2e1.ttf"},4892:(e,t,n)=>{"use strict";e.exports=n.p+"b9dbff6a0e2fe30c7c1f.woff"},113:(e,t,n)=>{"use strict";e.exports=n.p+"dc92a23654e3c4a3f287.woff2"},3867:(e,t,n)=>{"use strict";e.exports=n.p+"a64795151aa7b0cf5364.ttf"},9009:(e,t,n)=>{"use strict";e.exports=n.p+"fe19c1342817e2d388d2.woff"},3385:(e,t,n)=>{"use strict";e.exports=n.p+"a7117a0bcff24cc12689.woff2"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";n(3071),n(9620),n(7025),n(4543),n(1266),n(2450),n(9349),n(4493),n(9779),n(9430),n(3577),n(232),n(7113),n(1390),n(7323),n(5139),n(5691),n(4773),n(9671),n(1184),n(1700),n(2793),n(2556),n(4277),n(8967),n(2675),n(4814),n(574)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL2NsZWF2ZS5qcy9kaXN0L2NsZWF2ZS1lc20uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvYnRuL2J0bi5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NhbGVuZGFyL2NhbGVuZGFyLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdC5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NvbW1lbnQtYmxvY2svY29tbWVudC1ibG9jay5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaW5mby1ibG9jay9pbmZvLWJsb2NrLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvbGlrZS9saWtlLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvbGluay9saW5rLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvbGlzdC1ibG9jay9saXN0LWJsb2NrLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmFkaW9ncm91cC9yYWRpb2dyb3VwLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL3JhdGUtYnRuL3JhdGUtYnRuLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvdG9nZ2xlLWJsb2NrL3RvZ2dsZS1ibG9jay5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL3RvcGljLWxhYmVsL3RvcGljLWxhYmVsLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9pbmRleC5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvcGFnZXMvdWkta2l0LWZvcm0tZWxlbWVudHMvdWkta2l0LWZvcm0tZWxlbWVudHMuc2NzcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2ZvbnQvZm9udHMuY3NzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9idG4vYXJyb3ctd2hpdGUuc3ZnIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2J0bi9hcnJvdy5zdmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FsZW5kYXIvYXJyb3dfZm9yd2FyZC5zdmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvZHJvcGRvd24vZXhwYW5kLW1vcmUuc3ZnIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2lucHV0LXRleHQvYXJyb3cuc3ZnIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2xpa2UvZmF2b3JpdGUuc3ZnIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2xpa2UvZmF2b3JpdGVfYm9yZGVyLnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9wYWdpbmF0aW9uL2Fycm93LXdoaXRlLnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9zdGFyLnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9zdGFyX2JvcmRlci5zdmciLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FmLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIta3cuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWx5LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItc2EuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXRuLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JlLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JuLWJkLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm8uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JyLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY2EuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NzLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3kuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RhLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1hdC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtY2guanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWF1LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tZ2IuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWllLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taW4uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLW56LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1zZy5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLWRvLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1teC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXUuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZhLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmlsLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mby5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2EuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNoLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnkuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dhLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nZC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2wuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dvbS1kZXZhLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tbGF0bi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ3UuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hlLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oaS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHIuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h1LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oeS1hbS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaWQuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC1jaC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2phLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qdi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2EuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2trLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva24uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tvLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rdS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3kuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xiLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sby5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHQuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x2LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tZS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWkuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21rLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbW4uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21yLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL210LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9teS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmIuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25lLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25uLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9vYy1sbmMuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BhLWluLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQtYnIuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9yby5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcnUuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NkLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2kuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NrLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zbC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3EuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcy5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3YuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N3LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90YS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGUuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGcuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RoLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ay5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGwtcGguanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsaC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHIuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWctY24uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VrLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ci5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXouanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3ZpLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS94LXBzZXVkby5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveW8uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWNuLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1oay5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtbW8uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZXxzeW5jfC9eLy4qJCIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9wZy1jYWxlbmRhci9kaXN0L2pzL3BpZ25vc2UuY2FsZW5kYXIuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvYnRuL2J0bi5zY3NzPzZlMzciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FsZW5kYXIvY2FsZW5kYXIuc2Nzcz83MDI5Iiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuc2Nzcz9lMmVkIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdC5zY3NzPzllZDMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY29tbWVudC1ibG9jay9jb21tZW50LWJsb2NrLnNjc3M/Y2FmNSIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi5zY3NzPzg1YWEiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaW5mby1ibG9jay9pbmZvLWJsb2NrLnNjc3M/NmY3ZCIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9pbnB1dC10ZXh0L2lucHV0LXRleHQuc2Nzcz9lZWVkIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2xpa2UvbGlrZS5zY3NzPzY5ZjgiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvbGluay9saW5rLnNjc3M/MjljMyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9saXN0LWJsb2NrL2xpc3QtYmxvY2suc2Nzcz8wMWYwIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5zY3NzP2Y1NDMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmFkaW9ncm91cC9yYWRpb2dyb3VwLnNjc3M/NmUyZCIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYW5nZS1zbGlkZXIvcmFuZ2Utc2xpZGVyLnNjc3M/MDkzYiIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9yYXRlLWJ0bi5zY3NzPzdlM2EiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvdG9nZ2xlLWJsb2NrL3RvZ2dsZS1ibG9jay5zY3NzPzc0YzAiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvdG9waWMtbGFiZWwvdG9waWMtbGFiZWwuc2Nzcz82MjVjIiwid2VicGFjazovL3dlYnAvLi9zcmMvaW5kZXguc2Nzcz83MjIzIiwid2VicGFjazovL3dlYnAvLi9zcmMvcGFnZXMvdWkta2l0LWZvcm0tZWxlbWVudHMvdWkta2l0LWZvcm0tZWxlbWVudHMuc2Nzcz9hYzZiIiwid2VicGFjazovL3dlYnAvLi9zcmMvZm9udC9mb250cy5jc3M/MzBhYiIsIndlYnBhY2s6Ly93ZWJwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NhbGVuZGFyL2NhbGVuZGFyLmpzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvZHJvcGRvd24vZHJvcGRvd24udHMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LmpzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2xpa2UvbGlrZS5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9yYXRlLWJ0bi5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy90b2dnbGUtYmxvY2svdG9nZ2xlLWJsb2NrLmpzIiwid2VicGFjazovL3dlYnAvLi9zcmMvbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIuY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyLm1vZGVsLnRzIiwid2VicGFjazovL3dlYnAvLi9zcmMvbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIudHMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9tb2R1bGVzL3BsdWdpbi5zbGlkZXIvcGx1Z2luLnNsaWRlci52aWV3LnRzIiwid2VicGFjazovL3dlYnAvLi9zcmMvcGFnZXMvdWkta2l0LWZvcm0tZWxlbWVudHMvcmFuZ2Utc2xpZGVyLmpzIiwid2VicGFjazovL3dlYnAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VicC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93ZWJwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWJwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd2VicC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYnAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93ZWJwL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vd2VicC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL3BhZ2VzL3VpLWtpdC1mb3JtLWVsZW1lbnRzL3VpLWtpdC1mb3JtLWVsZW1lbnRzLmpzIl0sIm5hbWVzIjpbImNvbW1vbmpzR2xvYmFsIiwid2luZG93IiwiZyIsInNlbGYiLCJOdW1lcmFsRm9ybWF0dGVyIiwibnVtZXJhbERlY2ltYWxNYXJrIiwibnVtZXJhbEludGVnZXJTY2FsZSIsIm51bWVyYWxEZWNpbWFsU2NhbGUiLCJudW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSIsIm51bWVyYWxQb3NpdGl2ZU9ubHkiLCJzdHJpcExlYWRpbmdaZXJvZXMiLCJwcmVmaXgiLCJzaWduQmVmb3JlUHJlZml4IiwidGFpbFByZWZpeCIsImRlbGltaXRlciIsIm93bmVyIiwidGhpcyIsImdyb3VwU3R5bGUiLCJ0aG91c2FuZCIsImRlbGltaXRlclJFIiwiUmVnRXhwIiwibGFraCIsIndhbiIsIm5vbmUiLCJwcm90b3R5cGUiLCJnZXRSYXdWYWx1ZSIsInZhbHVlIiwicmVwbGFjZSIsImZvcm1hdCIsInBhcnRzIiwicGFydFNpZ24iLCJwYXJ0U2lnbkFuZFByZWZpeCIsInBhcnRJbnRlZ2VyIiwicGFydERlY2ltYWwiLCJzbGljZSIsImluZGV4T2YiLCJzcGxpdCIsInRvU3RyaW5nIiwiTnVtZXJhbEZvcm1hdHRlcl8xIiwiRGF0ZUZvcm1hdHRlciIsImRhdGVQYXR0ZXJuIiwiZGF0ZU1pbiIsImRhdGVNYXgiLCJkYXRlIiwiYmxvY2tzIiwicmV2ZXJzZSIsIm1hcCIsIngiLCJwYXJzZUludCIsImxlbmd0aCIsInVuc2hpZnQiLCJpbml0QmxvY2tzIiwiZm9yRWFjaCIsInB1c2giLCJnZXRJU09Gb3JtYXREYXRlIiwiYWRkTGVhZGluZ1plcm8iLCJnZXRCbG9ja3MiLCJnZXRWYWxpZGF0ZWREYXRlIiwicmVzdWx0IiwiaW5kZXgiLCJzdWIiLCJzdWIwIiwicmVzdCIsImdldEZpeGVkRGF0ZVN0cmluZyIsImRheSIsIm1vbnRoIiwieWVhciIsImRheUluZGV4IiwibW9udGhJbmRleCIsInllYXJJbmRleCIsImRheVN0YXJ0SW5kZXgiLCJtb250aFN0YXJ0SW5kZXgiLCJ5ZWFyU3RhcnRJbmRleCIsImZ1bGxZZWFyRG9uZSIsInRvTG93ZXJDYXNlIiwiZ2V0Rml4ZWREYXRlIiwidHlwZSIsImdldFJhbmdlRml4ZWREYXRlIiwicmVkdWNlIiwicHJldmlvdXMiLCJjdXJyZW50IiwiYWRkTGVhZGluZ1plcm9Gb3JZZWFyIiwiZmluZCIsIk1hdGgiLCJtaW4iLCJpc0xlYXBZZWFyIiwibnVtYmVyIiwiZnVsbFllYXJNb2RlIiwiRGF0ZUZvcm1hdHRlcl8xIiwiVGltZUZvcm1hdHRlciIsInRpbWVQYXR0ZXJuIiwidGltZUZvcm1hdCIsInRpbWUiLCJnZXRJU09Gb3JtYXRUaW1lIiwiZ2V0VGltZUZvcm1hdE9wdGlvbnMiLCJTdHJpbmciLCJtYXhIb3VyRmlyc3REaWdpdCIsIm1heEhvdXJzIiwibWF4TWludXRlc0ZpcnN0RGlnaXQiLCJtYXhNaW51dGVzIiwiZ2V0VmFsaWRhdGVkVGltZSIsInRpbWVGb3JtYXRPcHRpb25zIiwiZ2V0Rml4ZWRUaW1lU3RyaW5nIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsInNlY29uZEluZGV4IiwibWludXRlSW5kZXgiLCJob3VySW5kZXgiLCJzZWNvbmRTdGFydEluZGV4IiwibWludXRlU3RhcnRJbmRleCIsImhvdXJTdGFydEluZGV4IiwiZ2V0Rml4ZWRUaW1lIiwiVGltZUZvcm1hdHRlcl8xIiwiUGhvbmVGb3JtYXR0ZXIiLCJmb3JtYXR0ZXIiLCJzZXRGb3JtYXR0ZXIiLCJwaG9uZU51bWJlciIsImNsZWFyIiwidmFsaWRhdGVkIiwiaSIsImlNYXgiLCJpbnB1dERpZ2l0IiwiY2hhckF0IiwidGVzdCIsIlBob25lRm9ybWF0dGVyXzEiLCJDcmVkaXRDYXJkRGV0ZWN0b3IiLCJ1YXRwIiwiYW1leCIsImRpbmVycyIsImRpc2NvdmVyIiwibWFzdGVyY2FyZCIsImRhbmtvcnQiLCJpbnN0YXBheW1lbnQiLCJqY2IxNSIsImpjYiIsIm1hZXN0cm8iLCJ2aXNhIiwibWlyIiwidW5pb25QYXkiLCJnZW5lcmFsIiwicmUiLCJnZXRTdHJpY3RCbG9ja3MiLCJibG9jayIsInRvdGFsIiwicHJldiIsImNvbmNhdCIsImdldEluZm8iLCJzdHJpY3RNb2RlIiwia2V5IiwibWF0Y2hlZEJsb2NrcyIsIkNyZWRpdENhcmREZXRlY3Rvcl8xIiwiVXRpbF8xIiwibm9vcCIsInN0cmlwIiwiZ2V0UG9zdERlbGltaXRlciIsImRlbGltaXRlcnMiLCJtYXRjaGVkRGVsaW1pdGVyIiwiZ2V0RGVsaW1pdGVyUkVCeURlbGltaXRlciIsImdldE5leHRDdXJzb3JQb3NpdGlvbiIsInByZXZQb3MiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiZ2V0UG9zaXRpb25PZmZzZXQiLCJvbGRSYXdWYWx1ZSIsIm5ld1Jhd1ZhbHVlIiwibGVuZ3RoT2Zmc2V0Iiwic3RyaXBEZWxpbWl0ZXJzIiwiYWJzIiwibGV0dGVyIiwiaGVhZFN0ciIsInN0ciIsImdldE1heExlbmd0aCIsImdldFByZWZpeFN0cmlwcGVkVmFsdWUiLCJwcmVmaXhMZW5ndGgiLCJwcmV2UmVzdWx0Iiwibm9JbW1lZGlhdGVQcmVmaXgiLCJwcmV2VmFsdWUiLCJnZXRGaXJzdERpZmZJbmRleCIsImdldEZvcm1hdHRlZFZhbHVlIiwiYmxvY2tzTGVuZ3RoIiwiZGVsaW1pdGVyTGF6eVNob3ciLCJtdWx0aXBsZURlbGltaXRlcnMiLCJjdXJyZW50RGVsaW1pdGVyIiwiZml4UHJlZml4Q3Vyc29yIiwiZWwiLCJ2YWwiLCJhcHBlbmRpeCIsInNldFNlbGVjdGlvblJhbmdlIiwibGVuIiwic2V0VGltZW91dCIsImNoZWNrRnVsbFNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImRvY3VtZW50IiwiZXgiLCJzZXRTZWxlY3Rpb24iLCJlbGVtZW50IiwicG9zaXRpb24iLCJkb2MiLCJnZXRBY3RpdmVFbGVtZW50IiwiY3JlYXRlVGV4dFJhbmdlIiwicmFuZ2UiLCJtb3ZlIiwic2VsZWN0IiwiZSIsImNvbnNvbGUiLCJ3YXJuIiwicGFyZW50IiwiYWN0aXZlRWxlbWVudCIsInNoYWRvd1Jvb3QiLCJpc0FuZHJvaWQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0FuZHJvaWRCYWNrc3BhY2VLZXlkb3duIiwibGFzdElucHV0VmFsdWUiLCJjdXJyZW50SW5wdXRWYWx1ZSIsIkRlZmF1bHRQcm9wZXJ0aWVzXzEiLCJhc3NpZ24iLCJ0YXJnZXQiLCJvcHRzIiwiY3JlZGl0Q2FyZCIsImNyZWRpdENhcmRTdHJpY3RNb2RlIiwiY3JlZGl0Q2FyZFR5cGUiLCJvbkNyZWRpdENhcmRUeXBlQ2hhbmdlZCIsInBob25lIiwicGhvbmVSZWdpb25Db2RlIiwicGhvbmVGb3JtYXR0ZXIiLCJ0aW1lRm9ybWF0dGVyIiwiZGF0ZUZvcm1hdHRlciIsIm51bWVyYWwiLCJzd2FwSGlkZGVuSW5wdXQiLCJudW1lcmljT25seSIsInVwcGVyY2FzZSIsImxvd2VyY2FzZSIsInJhd1ZhbHVlVHJpbVByZWZpeCIsImNvcHlEZWxpbWl0ZXIiLCJpbml0VmFsdWUiLCJ1bmRlZmluZWQiLCJkZWxpbWl0ZXJMZW5ndGgiLCJyb290IiwibWF4TGVuZ3RoIiwiYmFja3NwYWNlIiwib25WYWx1ZUNoYW5nZWQiLCJDbGVhdmUiLCJoYXNNdWx0aXBsZUVsZW1lbnRzIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJFcnJvciIsInByb3BlcnRpZXMiLCJEZWZhdWx0UHJvcGVydGllcyIsImluaXQiLCJwcHMiLCJVdGlsIiwiaXNCYWNrd2FyZCIsIm9uQ2hhbmdlTGlzdGVuZXIiLCJvbkNoYW5nZSIsImJpbmQiLCJvbktleURvd25MaXN0ZW5lciIsIm9uS2V5RG93biIsIm9uRm9jdXNMaXN0ZW5lciIsIm9uRm9jdXMiLCJvbkN1dExpc3RlbmVyIiwib25DdXQiLCJvbkNvcHlMaXN0ZW5lciIsIm9uQ29weSIsImluaXRTd2FwSGlkZGVuSW5wdXQiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdFBob25lRm9ybWF0dGVyIiwiaW5pdERhdGVGb3JtYXR0ZXIiLCJpbml0VGltZUZvcm1hdHRlciIsImluaXROdW1lcmFsRm9ybWF0dGVyIiwib25JbnB1dCIsImlucHV0Rm9ybWF0dGVyIiwiY2xvbmVOb2RlIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImVsZW1lbnRTd2FwSGlkZGVuIiwiaWQiLCJudW1lcmFsRm9ybWF0dGVyIiwiQXNZb3VUeXBlRm9ybWF0dGVyIiwiZXZlbnQiLCJjaGFyQ29kZSIsIndoaWNoIiwia2V5Q29kZSIsImlucHV0VHlwZSIsInBvc3REZWxpbWl0ZXIiLCJwb3N0RGVsaW1pdGVyQmFja3NwYWNlIiwiY29weUNsaXBib2FyZERhdGEiLCJ0ZXh0VG9Db3B5IiwiaW5wdXRWYWx1ZSIsImNsaXBib2FyZERhdGEiLCJzZXREYXRhIiwicHJldmVudERlZmF1bHQiLCJwb3N0RGVsaW1pdGVyQWZ0ZXIiLCJ1cGRhdGVWYWx1ZVN0YXRlIiwidG9VcHBlckNhc2UiLCJ1cGRhdGVDcmVkaXRDYXJkUHJvcHNCeVZhbHVlIiwiY3JlZGl0Q2FyZEluZm8iLCJjYWxsIiwiZW5kUG9zIiwic2VsZWN0aW9uRW5kIiwiY2FsbE9uVmFsdWVDaGFuZ2VkIiwibmFtZSIsInJhd1ZhbHVlIiwic2V0UGhvbmVSZWdpb25Db2RlIiwic2V0UmF3VmFsdWUiLCJkZXN0cm95IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJtb2R1bGUiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEzX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE2X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xOF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE5X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMjBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzIyX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMjNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzI1X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMjZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzI4X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMjlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzMxX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzM0X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMzVfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzM3X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQwX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80Ml9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQzX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80NV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQ2X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDdfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80OF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQ5X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNTBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81MV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzUyX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNTNfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJpdGVtIiwiY29udGVudCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJuZXh0IiwiZG9uZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwiY29uc3RydWN0b3IiLCJmcm9tIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJ1cmwiLCJvcHRpb25zIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXNoIiwibmVlZFF1b3RlcyIsImdsb2JhbCIsImZhY3RvcnkiLCJ3Iiwibm9HbG9iYWwiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZmxhdCIsImFycmF5IiwiYXBwbHkiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwicmFuZG9tIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJsb2NhdGlvbiIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50Iiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJfIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93Iiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiaGVpZ2h0IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm9mZnNldEhlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJwYXJzZXJFcnJvckVsZW0iLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwicyIsInZhbHVlT3JGdW5jdGlvbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIm1vbWVudCIsImRlZmluZUxvY2FsZSIsIm1vbnRocyIsIm1vbnRoc1Nob3J0Iiwid2Vla2RheXMiLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXNNaW4iLCJtZXJpZGllbVBhcnNlIiwiaXNQTSIsIm1lcmlkaWVtIiwiaG91cnMiLCJtaW51dGVzIiwiaXNMb3dlciIsImxvbmdEYXRlRm9ybWF0IiwiTFQiLCJMVFMiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiY2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsIm5leHRXZWVrIiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJyZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0Iiwic3MiLCJtbSIsImgiLCJoaCIsImQiLCJkZCIsIk0iLCJNTSIsInkiLCJ5eSIsImRheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJvcmRpbmFsIiwid2VlayIsImRvdyIsImRveSIsInBsdXJhbEZvcm0iLCJwbHVyYWxzIiwicGx1cmFsaXplIiwidSIsIndpdGhvdXRTdWZmaXgiLCJpc0Z1dHVyZSIsImYiLCJ3ZWVrZGF5c1BhcnNlRXhhY3QiLCJwb3N0Zm9ybWF0Iiwic3ltYm9sTWFwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwicHJlcGFyc2UiLCJudW1iZXJNYXAiLCJzdWZmaXhlcyIsIjcwIiwiODAiLCIyMCIsIjUwIiwiMTAwIiwiMTAiLCIzMCIsIjYwIiwiOTAiLCJyZWxhdGl2ZVRpbWVXaXRoUGx1cmFsIiwiZm9ybXMiLCJzdGFuZGFsb25lIiwiaXNGb3JtYXQiLCJwZXJpb2QiLCJ3dyIsImxhc3REaWdpdCIsImxhc3QyRGlnaXRzIiwibWVyaWRpZW1Ib3VyIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1BhcnNlRXhhY3QiLCJyZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24iLCJtdXRhdGlvblRhYmxlIiwic3Vic3RyaW5nIiwic29mdE11dGF0aW9uIiwibXV0YXRpb24iLCJsYXN0TnVtYmVyIiwibW9udGhzUGFyc2UiLCJtb250aHNSZWdleCIsIm1pbldlZWtkYXlzUGFyc2UiLCJ3ZWVrZGF5c1BhcnNlIiwiZnVsbFdlZWtkYXlzUGFyc2UiLCJzaG9ydFdlZWtkYXlzUGFyc2UiLCJtb250aHNTdHJpY3RSZWdleCIsIm1vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJsb25nTW9udGhzUGFyc2UiLCJzaG9ydE1vbnRoc1BhcnNlIiwidHJhbnNsYXRlIiwibGwiLCJsbGwiLCJsbGxsIiwib3V0cHV0IiwicGx1cmFsIiwicHJvY2Vzc1JlbGF0aXZlVGltZSIsIm1vbnRoc05vbWluYXRpdmVFbCIsIm1vbnRoc0dlbml0aXZlRWwiLCJtb21lbnRUb0Zvcm1hdCIsIl9tb250aHNHZW5pdGl2ZUVsIiwiX21vbnRoc05vbWluYXRpdmVFbCIsImNhbGVuZGFyRWwiLCJtb20iLCJfY2FsZW5kYXJFbCIsIkZ1bmN0aW9uIiwibW9udGhzU2hvcnREb3QiLCJpbnZhbGlkRGF0ZSIsIm51bWJlcnNQYXN0IiwibnVtYmVyc0Z1dHVyZSIsInZlcmJhbE51bWJlciIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwid2Vla0VuZGluZ3MiLCJlcmFzIiwic2luY2UiLCJuYXJyb3ciLCJhYmJyIiwiZXJhWWVhck9yZGluYWxSZWdleCIsImVyYVllYXJPcmRpbmFsUGFyc2UiLCIkMCIsIiQxIiwiJDIiLCI0MCIsImlzVXBwZXIiLCJlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIiLCJzdWJzdHIiLCJ1bml0cyIsInRyYW5zbGF0ZVNpbmd1bGFyIiwicmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyIiwidHJhbnNsYXRvciIsIndvcmRzIiwiY29ycmVjdEdyYW1tYXRpY2FsQ2FzZSIsIndvcmRLZXkiLCJyZWxhdGl2ZVRpbWVNciIsIm1vbnRoc05vbWluYXRpdmUiLCJtb250aHNTdWJqZWN0aXZlIiwic2VwYXJhdG9yIiwiZGF5cyIsIjEyIiwiMTMiLCJudW1iZXJzTm91bnMiLCJudW1iZXJOb3VuIiwiaHVuZHJlZCIsImZsb29yIiwidGVuIiwid29yZCIsIm51bWJlckFzTm91biIsImhtIiwicHJvY2Vzc0hvdXJzRnVuY3Rpb24iLCJub21pbmF0aXZlIiwiYWNjdXNhdGl2ZSIsImdlbml0aXZlIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaG9va0NhbGxiYWNrIiwic29tZSIsImlzT2JqZWN0IiwiaGFzT3duUHJvcCIsImlzT2JqZWN0RW1wdHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiayIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJyZXMiLCJ2YWx1ZU9mIiwiY3JlYXRlVVRDIiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImdldFBhcnNpbmdGbGFncyIsIl9wZiIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRFcmEiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkRm9ybWF0IiwidXNlckludmFsaWRhdGVkIiwiaXNvIiwicGFyc2VkRGF0ZVBhcnRzIiwiZXJhIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImlzVmFsaWQiLCJfaXNWYWxpZCIsImZsYWdzIiwicGFyc2VkUGFydHMiLCJpc05vd1ZhbGlkIiwiZ2V0VGltZSIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsImJpZ0hvdXIiLCJpc0Zyb3plbiIsImNyZWF0ZUludmFsaWQiLCJOYU4iLCJmdW4iLCJtb21lbnRQcm9wZXJ0aWVzIiwidXBkYXRlSW5Qcm9ncmVzcyIsImNvcHlDb25maWciLCJfaXNBTW9tZW50T2JqZWN0IiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiZGVwcmVjYXRlIiwiZmlyc3RUaW1lIiwiZGVwcmVjYXRpb25IYW5kbGVyIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwicG93IiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJwYWRkZWQiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwicmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zIiwibGFzdEluZGV4IiwiYWxpYXNlcyIsImFkZFVuaXRBbGlhcyIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsIm5vcm1hbGl6ZVVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRQcm9wIiwibm9ybWFsaXplZElucHV0IiwicHJpb3JpdGllcyIsImFkZFVuaXRQcmlvcml0eSIsInByaW9yaXR5IiwiYWJzRmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJkYXlzSW5Nb250aCIsInJlZ2V4ZXMiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFdvcmQiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwicmVnZXhFc2NhcGUiLCJwMSIsInAyIiwicDMiLCJwNCIsImFkZFBhcnNlVG9rZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsIm1vZE1vbnRoIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsIk1PTlRIU19JTl9GT1JNQVQiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJfbW9udGhzUmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiZGF5c0luWWVhciIsInBhcnNlVHdvRGlnaXRZZWFyIiwiZ2V0U2V0WWVhciIsImNyZWF0ZURhdGUiLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImZpcnN0V2Vla09mZnNldCIsImZ3ZCIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWtkYXkiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwiZGF5T2ZZZWFyIiwid2Vla09mWWVhciIsInJlc1dlZWsiLCJ3ZWVrT2Zmc2V0Iiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsInNoaWZ0V2Vla2RheXMiLCJ3cyIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwiY29tcHV0ZVdlZWtkYXlzUGFyc2UiLCJtaW5wIiwic2hvcnRwIiwibG9uZ3AiLCJtaW5QaWVjZXMiLCJfd2Vla2RheXNSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJfd2Vla2RheXNNaW5SZWdleCIsIl93ZWVrZGF5c1N0cmljdFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiaEZvcm1hdCIsIm1hdGNoTWVyaWRpZW0iLCJfbWVyaWRpZW1QYXJzZSIsInNlY29uZHMiLCJrSW5wdXQiLCJfaXNQbSIsIl9tZXJpZGllbSIsInBvczEiLCJwb3MyIiwiZ2V0U2V0SG91ciIsImdsb2JhbExvY2FsZSIsImJhc2VDb25maWciLCJsb2NhbGVzIiwibG9jYWxlRmFtaWxpZXMiLCJjb21tb25QcmVmaXgiLCJhcnIxIiwibWlubCIsIm5vcm1hbGl6ZUxvY2FsZSIsImxvYWRMb2NhbGUiLCJvbGRMb2NhbGUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsImdldExvY2FsZSIsIl9jb25maWciLCJwYXJlbnRMb2NhbGUiLCJuYW1lcyIsImNob29zZUxvY2FsZSIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4Iiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbUlTTyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0ekZvcm1hdCIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJ1bnRydW5jYXRlWWVhciIsInllYXJTdHIiLCJjb25maWdGcm9tUkZDMjgyMiIsInBhcnNlZEFycmF5IiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwid2Vla2RheVN0ciIsInBhcnNlZElucHV0IiwiZ2V0RGF5IiwiY2hlY2tXZWVrZGF5Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJjYWxjdWxhdGVPZmZzZXQiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsImRlZmF1bHRzIiwiYyIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwibm93VmFsdWUiLCJfdXNlVVRDIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY3VycmVudERhdGVBcnJheSIsIndlZWtZZWFyIiwid2Vla2RheU92ZXJmbG93IiwiY3VyV2VlayIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiZ2ciLCJfZGF5T2ZZZWFyIiwiZGF5T2ZZZWFyRnJvbVdlZWtJbmZvIiwiX25leHREYXkiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJpc1BtIiwibWVyaWRpZW1GaXhXcmFwIiwiZXJhc0NvbnZlcnRZZWFyIiwicHJlcGFyZUNvbmZpZyIsInRlbXBDb25maWciLCJiZXN0TW9tZW50Iiwic2NvcmVUb0JlYXQiLCJjdXJyZW50U2NvcmUiLCJ2YWxpZEZvcm1hdEZvdW5kIiwiYmVzdEZvcm1hdElzVmFsaWQiLCJzY29yZSIsImNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheSIsImNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrIiwiY29uZmlnRnJvbVN0cmluZyIsImRheU9yRGF0ZSIsIm1pbGxpc2Vjb25kIiwiY29uZmlnRnJvbU9iamVjdCIsImNvbmZpZ0Zyb21JbnB1dCIsImlzVVRDIiwicHJvdG90eXBlTWluIiwib3RoZXIiLCJwcm90b3R5cGVNYXgiLCJwaWNrQnkiLCJtb21lbnRzIiwib3JkZXJpbmciLCJEdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJpc29XZWVrIiwibWlsbGlzZWNvbmRzIiwidW5pdEhhc0RlY2ltYWwiLCJpc0R1cmF0aW9uVmFsaWQiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfbW9udGhzIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInV0Y09mZnNldCIsInNpZ24iLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwiZGlmZlJlcyIsInBhcnNlSXNvIiwiaXNCZWZvcmUiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiaW5wIiwiaXNBZnRlciIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwiYWRkU3VidHJhY3QiLCJpc0FkZGluZyIsImludmFsaWQiLCJpc1N0cmluZyIsImlzTW9tZW50SW5wdXQiLCJhcnJheVRlc3QiLCJkYXRhVHlwZVRlc3QiLCJpc051bWJlck9yU3RyaW5nQXJyYXkiLCJwcm9wZXJ0eSIsIm9iamVjdFRlc3QiLCJwcm9wZXJ0eVRlc3QiLCJpc01vbWVudElucHV0T2JqZWN0IiwiaXNDYWxlbmRhclNwZWMiLCJtb250aERpZmYiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsIm5ld0xvY2FsZURhdGEiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsIk1TX1BFUl9TRUNPTkQiLCJNU19QRVJfTUlOVVRFIiwiTVNfUEVSX0hPVVIiLCJNU19QRVJfNDAwX1lFQVJTIiwibW9kJDEiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJsb2NhbFN0YXJ0T2ZEYXRlIiwidXRjU3RhcnRPZkRhdGUiLCJtYXRjaEVyYUFiYnIiLCJlcmFzQWJiclJlZ2V4IiwiY29tcHV0ZUVyYXNQYXJzZSIsImFiYnJQaWVjZXMiLCJuYW1lUGllY2VzIiwibmFycm93UGllY2VzIiwiX2VyYXNSZWdleCIsIl9lcmFzTmFtZVJlZ2V4IiwiX2VyYXNBYmJyUmVnZXgiLCJfZXJhc05hcnJvd1JlZ2V4IiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFySGVscGVyIiwid2Vla3NUYXJnZXQiLCJzZXRXZWVrQWxsIiwiZGF5T2ZZZWFyRGF0YSIsImVyYXNOYW1lUmVnZXgiLCJlcmFzTmFycm93UmVnZXgiLCJlcmFzUGFyc2UiLCJfZXJhWWVhck9yZGluYWxSZWdleCIsImlzb1dlZWtZZWFyIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJfb3JkaW5hbFBhcnNlIiwiX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50IiwiZ2V0U2V0RGF5T2ZNb250aCIsImdldFNldE1pbnV0ZSIsImdldFNldE1pbGxpc2Vjb25kIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsInByZVBhcnNlUG9zdEZvcm1hdCIsImZvcm1hdHMiLCJzb2QiLCJzdGFydE9mIiwiY2FsZW5kYXJGb3JtYXQiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJzdGFydE9mRGF0ZSIsImlzb1dlZWtkYXkiLCJpbnB1dFN0cmluZyIsImh1bWFuaXplIiwiZnJvbU5vdyIsInRvTm93IiwiaW52YWxpZEF0IiwibG9jYWxJbnB1dCIsImlzQmV0d2VlbiIsImluY2x1c2l2aXR5IiwibG9jYWxGcm9tIiwibG9jYWxUbyIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJwYXJzaW5nRmxhZ3MiLCJwcmlvcml0aXplZCIsInVuaXRzT2JqIiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvT2JqZWN0IiwidG9EYXRlIiwidG9JU09TdHJpbmciLCJrZWVwT2Zmc2V0Iiwiem9uZSIsImZvciIsInRvSlNPTiIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJlcmFOYW1lIiwiZXJhTmFycm93IiwiZXJhQWJiciIsImVyYVllYXIiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwid2Vla3NJbldlZWtZZWFyIiwiaXNvV2Vla3NJblllYXIiLCJpc29XZWVrc0luSVNPV2Vla1llYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJjb21wYXJlQXJyYXlzIiwicHJvdG8kMSIsImdldCQxIiwiZmllbGQiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJfY2FsZW5kYXIiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsInRvayIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiX3JlbGF0aXZlVGltZSIsInBhc3RGdXR1cmUiLCJfZXJhcyIsIl9tb250aHNTaG9ydCIsIl9tb250aHNQYXJzZUV4YWN0IiwiZmlyc3REYXlPZlllYXIiLCJmaXJzdERheU9mV2VlayIsIl93ZWVrZGF5cyIsIl93ZWVrZGF5c01pbiIsIl93ZWVrZGF5c1Nob3J0IiwiX3dlZWtkYXlzUGFyc2VFeGFjdCIsIl9mdWxsV2Vla2RheXNQYXJzZSIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiZGF5c1RvTW9udGhzIiwibW9udGhzVG9EYXlzIiwibWFrZUFzIiwiYWxpYXMiLCJhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsInRvdGFsU2lnbiIsInltU2lnbiIsImRheXNTaWduIiwiaG1zU2lnbiIsInRvRml4ZWQiLCJwcm90byQyIiwibW9udGhzRnJvbURheXMiLCJhcmdXaXRoU3VmZml4IiwiYXJnVGhyZXNob2xkcyIsIndpdGhTdWZmaXgiLCJwb3NOZWdEdXJhdGlvbiIsInJlbGF0aXZlVGltZSQxIiwidG9Jc29TdHJpbmciLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsIm15TW9tZW50IiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJEQVRFIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJXRUVLIiwiTU9OVEgiLCJyZXF1aXJlanMiLCJyZXF1aXJlIiwiZGVmaW5lIiwiX3R5cGVvZiIsInVuZGVmIiwibWFpbiIsIm1ha2VNYXAiLCJkZWZpbmVkIiwid2FpdGluZyIsImRlZmluaW5nIiwiYXBzIiwianNTdWZmaXhSZWdFeHAiLCJoYXNQcm9wIiwibm9ybWFsaXplIiwiYmFzZU5hbWUiLCJuYW1lUGFydHMiLCJuYW1lU2VnbWVudCIsIm1hcFZhbHVlIiwiZm91bmRNYXAiLCJmb3VuZEkiLCJmb3VuZFN0YXJNYXAiLCJzdGFySSIsInBhcnQiLCJiYXNlUGFydHMiLCJzdGFyTWFwIiwibm9kZUlkQ29tcGF0IiwibWFrZVJlcXVpcmUiLCJyZWxOYW1lIiwiZm9yY2VTeW5jIiwibWFrZUxvYWQiLCJkZXBOYW1lIiwiY2FsbERlcCIsInNwbGl0UHJlZml4IiwibWFrZVJlbFBhcnRzIiwibWFrZUNvbmZpZyIsInJlbFBhcnRzIiwicGx1Z2luIiwicmVsUmVzb3VyY2VOYW1lIiwicHIiLCJ1cmkiLCJkZXBzIiwiY2pzTW9kdWxlIiwidXNpbmdFeHBvcnRzIiwiY2FsbGJhY2tUeXBlIiwiYWx0IiwiY2ZnIiwiX2RlZmluZWQiLCJhbWQiLCJwcmVmZXJlbmNlIiwic3VwcG9ydHMiLCJ0aGVtZXMiLCJtb2RlbHMiLCJtX2Zvcm1hdENhY2hlIiwibV9jbGFzc0NhY2hlIiwibV9zdWJDbGFzc0NhY2hlIiwibV9yZWdleF91cHBlciIsImhlbHBlciIsImNoYXJzIiwiX2NoYXIiLCJnZXRTdWJDbGFzcyIsInJlZ2lzdGVyIiwiaW5zdGFsbCIsImxpYiIsInV0aWxzIiwibV9kYXRlQ2FjaGUiLCJEYXRlTWFuYWdlciIsInByZXZNb250aCIsIm5leHRNb250aCIsImZpcnN0RGF5Iiwid2Vla0RheSIsIkNvbnZlcnQiLCJoZWFkZXIiLCJkZWZhdWx0TGFuZ3VhZ2UiLCJhciIsImVuIiwia28iLCJmYSIsImZyIiwiZGUiLCJubCIsImpwIiwicHQiLCJkYSIsInBsIiwiZXMiLCJpdCIsImNzIiwidWsiLCJydSIsImthIiwiY2EiLCJtb250aHNMb25nIiwiY29udHJvbHMiLCJvayIsImNhbmNlbCIsImxhbmd1YWdlcyIsImxhbmd1YWdlIiwidGhlbWUiLCJlbmFibGVkRGF0ZXMiLCJkaXNhYmxlZERhdGVzIiwiZGlzYWJsZWRXZWVrZGF5cyIsImRpc2FibGVkUmFuZ2VzIiwic2NoZWR1bGVzIiwic2NoZWR1bGVPcHRpb25zIiwiY29sb3JzIiwicGlja1dlZWtzIiwiaW5pdGlhbGl6ZSIsIm11bHRpcGxlIiwibW9kYWwiLCJzZWxlY3RPdmVyIiwibWluRGF0ZSIsIm1heERhdGUiLCJwYWdlIiwibWV0aG9kQ29uZmlndXJlIiwiJHdpbmRvdyIsImNhbGVuZGFySHRtbCIsImNhbGVuZGFyQnV0dG9uc0h0bWwiLCJjYWxlbmRhclNjaGVkdWxlQ29udGFpbmVySHRtbCIsImNhbGVuZGFyU2NoZWR1bGVQaW5IdG1sIiwicmFuZ2VDbGFzcyIsInJhbmdlRmlyc3RDbGFzcyIsInJhbmdlTGFzdENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJhY3RpdmVQb3NpdGlvbkNsYXNzZXMiLCJ0b2dnbGVBY3RpdmVDbGFzcyIsInRvZ2dsZUluYWN0aXZlQ2xhc3MiLCIkY2FsZW5kYXJCdXR0b24iLCIkdGhpcyIsInJlbmRlcmVyIiwiYWxsIiwiZW5hYmxlZCIsInN0b3JhZ2UiLCJhY3RpdmVEYXRlcyIsImRhdGVNYW5hZ2VyIiwiY2FsZW5kYXJXcmFwcGVySHRtbCIsImNhbGVuZGFyV3JhcHBlck92ZXJsYXlIdG1sIiwiJHBhcmVudCIsIiRvdmVybGF5Iiwid3JhcHBlckFjdGl2ZUNsYXNzIiwib3ZlcmxheUFjdGl2ZUNsYXNzIiwib3V0ZXJXaWR0aCIsIm1hcmdpblRvcCIsIm91dGVySGVpZ2h0IiwiZ2VuZXJhdGVEYXRlUmFuZ2UiLCJmaXJzdFNlbGVjdERhdGUiLCJsYXN0U2VsZWN0RGF0ZSIsImZpcnN0RGF0ZSIsImxhc3REYXRlIiwiZmlyc3REYXRlSXNVbmRlcmVkIiwibGFzdERhdGVJc092ZXJlZCIsImZpcnN0RGF0ZUZpeGVkIiwibGFzdERhdGVGaXhlZCIsIiR0YXJnZXQiLCJleGlzdHNCZXR3ZWVuUmFuZ2UiLCJzdGFydERhdGUiLCJlbmREYXRlIiwidGFyZ2V0RGF0ZSIsIiRzdXBlciIsImRhdGVWYWx1ZXMiLCIkY2FsZW5kYXJCb2R5IiwiZmlyc3RXZWVrZGF5IiwibGFzdFdlZWtkYXkiLCIkdW5pdExpc3QiLCJjdXJyZW50Rm9ybWF0IiwiJHVuaXQiLCJfbG9vcCIsIl9pMiIsImlEYXRlIiwiaURhdGVGb3JtYXQiLCJkaXNhYmxlZFJhbmdlc0xlbmd0aCIsImRpc2FibGVkUmFuZ2UiLCJjdXJyZW50U2NoZWR1bGVzIiwibmFtZU9mU2NoZWR1bGVzIiwiJHNjaGVkdWxlUGluQ29udGFpbmVyIiwiY29sb3IiLCJwcmV2ZW50U2VsZWN0IiwiX2oiLCJfajIiLCJfaWR4MyIsIl9pZHgiLCJyYW5nZURhdGUiLCJzdGFydFJhbmdlRGF0ZSIsImVuZFJhbmdlRGF0ZSIsInN0YXJ0V2Vla2RheSIsImVuZFdlZWtkYXkiLCJfaWR4MiIsInZhbGlkRGF0ZUFyZWEiLCJjbGFzc2lmeURhdGUiLCJ2YWxpZERhdGUiLCJfZGF0ZSIsIl9pMyIsIl8kdW5pdCIsIiRyb3ciLCJfaTQiLCJtb250aHNDb3VudCIsIl9sYW5ndWFnZSIsImxhbmd1YWdlU2V0dGluZyIsImRhdGVTcGxpdCIsImRhdGVBcnJheSIsIm1ldGhvZEluaXQiLCJtZXRob2RTZXR0aW5nIiwibWV0aG9kU2VsZWN0IiwibWV0aG9kU2V0IiwiY29uZmlndXJlIiwic2V0dGluZyIsInRoaXNwIiwibWV0aG9kcyIsImNvbXBvbmVudCIsInBpZ25vc2VDYWxlbmRhciIsIm1lbW8iLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInN0eWxlU2hlZXQiLCJjc3NOb2RlIiwiYXBwbHlUb1RhZyIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwiYXRvYiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJtYWluT3B0aW9ucyIsImFjdGl2ZVVuaXRzIiwidGhpc0NsaWNrIiwiYWN0aXZlX2ZpcnN0IiwiYWN0aXZlX3NlY29uZCIsImlubmVyVGV4dCIsIm1vbnRoMSIsIm1vbnRoMiIsImJsb2NrX2NhbGVuZGFyIiwiZWxEcm9wZG93biIsImJsb2NrX2xpc3QiLCJleHBlbmQiLCJvdXRwdXRJbkRyb3Bkb3duIiwiZHJvcGRvd24iLCJxdHkiLCJ0ZXh0R3Vlc3QiLCJ0ZXh0QmFieSIsImxpbmVzIiwic3VtR3Vlc3RzIiwic3VtQmFieSIsImRlY2xlbnNpb25Xb3JkcyIsImNvdW50UXR5R3Vlc3RzIiwidGV4dEl0ZW0iLCJjb3VudFF0eUNvbWZvcnRSb29tIiwiYmVkcm9vbSIsImJlZCIsImJhdGhyb29tIiwiZ3Vlc3QiLCJiYWJ5IiwicXR5RWxlbSIsIm5ld1F0eSIsInBsdXMiLCJtaW51cyIsIml0ZW1zIiwic3VtIiwidGhpc1NsaWRlciIsImlkRWxlbWVudCIsIm1pblN0YXJ0IiwibWF4U3RhcnQiLCJvcmllbnRhdGlvbiIsInNjYWxlU3RlcCIsImRlZmluZU9yaWVudGF0aW9uIiwiZGF0YVNsaWRlck9yaWVudGF0aW9uIiwibW92ZUF0Iiwic2lkZSIsImNsYXNzTGlzdCIsInN0YXJ0UG9zIiwid2lkdGhSYW5nZSIsImdldFdpZHRoUmFuZ2UiLCJyYW5nZUxlZnQiLCJ6aW5kZXgiLCJyYW5nZVJpZ2h0IiwiY29udHIiLCJvbm1vdXNlbW92ZSIsInRlbXBQb3MiLCJtYXNTY2FsZSIsInNsaWRlciIsIm9mZnNldExlZnQiLCJtb3ZpbmdSYW5nZSIsIm1hc1N0ZXBzRm9yTW92aW5nIiwiY29vcmRzIiwiZ2V0Q29vcmRzIiwib25tb3VzZXVwIiwicHJpY2UiLCJjYWxjVmFsdWUiLCJjb25ydFRoaXMiLCJnZXRXaWR0aCIsImdldFBvc1JhbmdlUmlnaHQiLCJ0cmFuc2Zvcm0iLCJkcmF3VmFsdWVNaW4iLCJjaGFuZ2VDb25maWdJbnB1dE1pbiIsIndyaXRlRGF0YVNsaWRlck1pbiIsImdldFBvc1JhbmdlTGVmdCIsImRyYXdWYWx1ZU1heCIsImNoYW5nZUNvbmZpZ0lucHV0TWF4Iiwid3JpdGVEYXRhU2xpZGVyTWF4IiwiZWxlbVZhbHVlTWluIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImVsZW1WYWx1ZU1heCIsIm1vdmVSYW5nZU9uY2xpY2tTbGlkZXIiLCJ0aGlzQ2xpY2tTbGlkZXIiLCJ0aGlzQ2xpY2tSYW5nZSIsImRlZmluZVBvc1N0ZXBDbG9zZXN0Q2xpY2siLCJwb3NMIiwicG9zUiIsImxlbkwiLCJsZW5SIiwiZmluYWxQb3MiLCJxdHlEaXZpc2lvbiIsIndpZHRoU3RlcCIsImFwcGx5Q29uZmlnIiwiY2hlY2tib3hTZXR0aW5ncyIsImJsb2Nrc1NjYWxlIiwib25jbGljayIsInNldHRpbmdzQmxvY2siLCJpbnB1dFMiLCJvbmJsdXIiLCJpZElucHV0IiwiTnVtYmVyIiwiY2hlY2tNaW5NYXhTdGFydCIsImRyYXdUeXBlIiwiZHJhd1NjYWxlIiwiZHJhd1JhbmdlIiwiZHJhd1ZhbHVlIiwid3JpdGVEYXRhSW5Db25maWciLCJyYWRpb1MiLCJpZFN0ciIsImRyYXdPcmllbnRhdGlvbiIsInR5cGVJRCIsIm9yaWVudGF0aW9uSUQiLCJ2YWx1ZUlEIiwic2NhbGVJRCIsIkNvbnRyb2xsZXIiLCJyYW5nZVNsaWRlciIsImxhYmVsQmxvY2siLCJsYWJlbE1pbiIsImxhYmVsRGFzaCIsImxhYmVsTWF4IiwiYmxvY2tTY2FsZVZhbHMiLCJjbGllbnRXaWR0aCIsIk1vZGVsIiwiZGF0YVNsaWRlciIsInJ1blNsaWRlciIsIlZpZXciLCJjb250cm9sbGVyIiwicG9zTGVmdCIsInBvc1JpZ2h0Iiwic3RlcFdpZHRoIiwidmFsRGl2aXNpb24iLCJwb3NEaXZpc2lvbiIsImVsZW1EaXZpc2lvbiIsImJsb2NrU2NhbGUiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJtYXJnaW5Cb3R0b20iLCJibG9ja1ZhbHMiLCJoZWlnaHRCbG9ja1NsaWRlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwiciIsInRvU3RyaW5nVGFnIiwibm1kIiwicGF0aHMiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCJdLCJtYXBwaW5ncyI6Ijt1RUFBQSxJQUFJQSxFQUFtQyxvQkFBWEMsT0FBeUJBLFlBQTJCLElBQVgsRUFBQUMsRUFBeUIsRUFBQUEsRUFBeUIsb0JBQVRDLEtBQXVCQSxLQUFPLEdBRXhJQyxFQUFtQixTQUFVQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxHQUM3QixJQUFJQyxFQUFRQyxLQUVaRCxFQUFNVixtQkFBcUJBLEdBQXNCLElBQ2pEVSxFQUFNVCxvQkFBc0JBLEVBQXNCLEVBQUlBLEVBQXNCLEVBQzVFUyxFQUFNUixvQkFBc0JBLEdBQXVCLEVBQUlBLEVBQXNCLEVBQzdFUSxFQUFNUCwyQkFBNkJBLEdBQThCSixFQUFpQmEsV0FBV0MsU0FDN0ZILEVBQU1OLHNCQUF3QkEsRUFDOUJNLEVBQU1MLG9CQUE0QyxJQUF2QkEsRUFDM0JLLEVBQU1KLE9BQVVBLEdBQXFCLEtBQVhBLEVBQWlCQSxFQUFTLEdBQ3BESSxFQUFNSCxtQkFBcUJBLEVBQzNCRyxFQUFNRixhQUFlQSxFQUNyQkUsRUFBTUQsVUFBYUEsR0FBMkIsS0FBZEEsRUFBb0JBLEVBQVksSUFDaEVDLEVBQU1JLFlBQWNMLEVBQVksSUFBSU0sT0FBTyxLQUFPTixFQUFXLEtBQU8sSUFHeEVWLEVBQWlCYSxXQUFhLENBQzFCQyxTQUFVLFdBQ1ZHLEtBQVUsT0FDVkMsSUFBVSxNQUNWQyxLQUFVLFFBR2RuQixFQUFpQm9CLFVBQVksQ0FDekJDLFlBQWEsU0FBVUMsR0FDbkIsT0FBT0EsRUFBTUMsUUFBUVgsS0FBS0csWUFBYSxJQUFJUSxRQUFRWCxLQUFLWCxtQkFBb0IsTUFHaEZ1QixPQUFRLFNBQVVGLEdBQ2QsSUFBa0JHLEVBQU9DLEVBQVVDLEVBQW1CQyxFQUFsRGpCLEVBQVFDLEtBQXVEaUIsRUFBYyxHQXVEakYsT0FwREFQLEVBQVFBLEVBQU1DLFFBQVEsWUFBYSxJQUU5QkEsUUFBUVosRUFBTVYsbUJBQW9CLEtBSWxDc0IsUUFBUSxXQUFZLElBR3BCQSxRQUFRLE1BQU8sS0FHZkEsUUFBUSxNQUFPLElBR2ZBLFFBQVEsSUFBS1osRUFBTU4sb0JBQXNCLEdBQUssS0FHOUNrQixRQUFRLElBQUtaLEVBQU1WLG9CQUdwQlUsRUFBTUwscUJBQ05nQixFQUFRQSxFQUFNQyxRQUFRLGdCQUFpQixPQUczQ0csRUFBaUMsTUFBdEJKLEVBQU1RLE1BQU0sRUFBRyxHQUFhLElBQU0sR0FHckNILE9BRm1CLElBQWhCaEIsRUFBTUosT0FDVEksRUFBTUgsaUJBQ2NrQixFQUFXZixFQUFNSixPQUVqQkksRUFBTUosT0FBU21CLEVBR25CQSxFQUd4QkUsRUFBY04sRUFFVkEsRUFBTVMsUUFBUXBCLEVBQU1WLHFCQUF1QixJQUUzQzJCLEdBREFILEVBQVFILEVBQU1VLE1BQU1yQixFQUFNVixxQkFDTixHQUNwQjRCLEVBQWNsQixFQUFNVixtQkFBcUJ3QixFQUFNLEdBQUdLLE1BQU0sRUFBR25CLEVBQU1SLHNCQUdyRCxNQUFidUIsSUFDQ0UsRUFBY0EsRUFBWUUsTUFBTSxJQUdoQ25CLEVBQU1ULG9CQUFzQixJQUM5QjBCLEVBQWNBLEVBQVlFLE1BQU0sRUFBR25CLEVBQU1ULHNCQUduQ1MsRUFBTVAsNEJBQ2QsS0FBS0osRUFBaUJhLFdBQVdJLEtBQzdCVyxFQUFjQSxFQUFZTCxRQUFRLHNCQUF1QixLQUFPWixFQUFNRCxXQUV0RSxNQUVKLEtBQUtWLEVBQWlCYSxXQUFXSyxJQUM3QlUsRUFBY0EsRUFBWUwsUUFBUSxxQkFBc0IsS0FBT1osRUFBTUQsV0FFckUsTUFFSixLQUFLVixFQUFpQmEsV0FBV0MsU0FDN0JjLEVBQWNBLEVBQVlMLFFBQVEscUJBQXNCLEtBQU9aLEVBQU1ELFdBS3pFLE9BQUlDLEVBQU1GLFdBQ0NpQixFQUFXRSxFQUFZSyxZQUFjdEIsRUFBTVIsb0JBQXNCLEVBQUkwQixFQUFZSSxXQUFhLElBQU10QixFQUFNSixPQUc5R29CLEVBQW9CQyxFQUFZSyxZQUFjdEIsRUFBTVIsb0JBQXNCLEVBQUkwQixFQUFZSSxXQUFhLE1BSXRILElBQUlDLEVBQXFCbEMsRUFFckJtQyxFQUFnQixTQUFVQyxFQUFhQyxFQUFTQyxHQUNoRCxJQUFJM0IsRUFBUUMsS0FFWkQsRUFBTTRCLEtBQU8sR0FDYjVCLEVBQU02QixPQUFTLEdBQ2Y3QixFQUFNeUIsWUFBY0EsRUFDcEJ6QixFQUFNMEIsUUFBVUEsRUFDYkwsTUFBTSxLQUNOUyxVQUNBQyxLQUFJLFNBQVNDLEdBQ1osT0FBT0MsU0FBU0QsRUFBRyxPQUVNLElBQXpCaEMsRUFBTTBCLFFBQVFRLFFBQWNsQyxFQUFNMEIsUUFBUVMsUUFBUSxHQUV0RG5DLEVBQU0yQixRQUFVQSxFQUNiTixNQUFNLEtBQ05TLFVBQ0FDLEtBQUksU0FBU0MsR0FDWixPQUFPQyxTQUFTRCxFQUFHLE9BRU0sSUFBekJoQyxFQUFNMkIsUUFBUU8sUUFBY2xDLEVBQU0yQixRQUFRUSxRQUFRLEdBRXREbkMsRUFBTW9DLGNBR1ZaLEVBQWNmLFVBQVksQ0FDdEIyQixXQUFZLFdBQ1IsSUFBSXBDLEVBQVFDLEtBQ1pELEVBQU15QixZQUFZWSxTQUFRLFNBQVUxQixHQUNsQixNQUFWQSxFQUNBWCxFQUFNNkIsT0FBT1MsS0FBSyxHQUVsQnRDLEVBQU02QixPQUFPUyxLQUFLLE9BSzlCQyxpQkFBa0IsV0FDZCxJQUFJdkMsRUFBUUMsS0FDUjJCLEVBQU81QixFQUFNNEIsS0FFakIsT0FBT0EsRUFBSyxHQUNSQSxFQUFLLEdBQUssSUFBTTVCLEVBQU13QyxlQUFlWixFQUFLLElBQU0sSUFBTTVCLEVBQU13QyxlQUFlWixFQUFLLElBQ2hGLElBR1JhLFVBQVcsV0FDUCxPQUFPeEMsS0FBSzRCLFFBR2hCYSxpQkFBa0IsU0FBVS9CLEdBQ3hCLElBQUlYLEVBQVFDLEtBQU0wQyxFQUFTLEdBeUMzQixPQXZDQWhDLEVBQVFBLEVBQU1DLFFBQVEsU0FBVSxJQUVoQ1osRUFBTTZCLE9BQU9RLFNBQVEsU0FBVUgsRUFBUVUsR0FDbkMsR0FBSWpDLEVBQU11QixPQUFTLEVBQUcsQ0FDbEIsSUFBSVcsRUFBTWxDLEVBQU1RLE1BQU0sRUFBR2UsR0FDckJZLEVBQU9ELEVBQUkxQixNQUFNLEVBQUcsR0FDcEI0QixFQUFPcEMsRUFBTVEsTUFBTWUsR0FFdkIsT0FBUWxDLEVBQU15QixZQUFZbUIsSUFDMUIsSUFBSyxJQUNXLE9BQVJDLEVBQ0FBLEVBQU0sS0FDQ1osU0FBU2EsRUFBTSxJQUFNLEVBQzVCRCxFQUFNLElBQU1DLEVBQ0xiLFNBQVNZLEVBQUssSUFBTSxLQUMzQkEsRUFBTSxNQUdWLE1BRUosSUFBSyxJQUNXLE9BQVJBLEVBQ0FBLEVBQU0sS0FDQ1osU0FBU2EsRUFBTSxJQUFNLEVBQzVCRCxFQUFNLElBQU1DLEVBQ0xiLFNBQVNZLEVBQUssSUFBTSxLQUMzQkEsRUFBTSxNQU1kRixHQUFVRSxFQUdWbEMsRUFBUW9DLE1BSVQ5QyxLQUFLK0MsbUJBQW1CTCxJQUduQ0ssbUJBQW9CLFNBQVVyQyxHQUMxQixJQUdJc0MsRUFBS0MsRUFBT0MsRUFIWm5ELEVBQVFDLEtBQU13QixFQUFjekIsRUFBTXlCLFlBQWFHLEVBQU8sR0FDdER3QixFQUFXLEVBQUdDLEVBQWEsRUFBR0MsRUFBWSxFQUMxQ0MsRUFBZ0IsRUFBR0MsRUFBa0IsRUFBR0MsRUFBaUIsRUFDdkNDLEdBQWUsRUFpRnJDLE9BOUVxQixJQUFqQi9DLEVBQU11QixRQUFpRCxNQUFqQ1QsRUFBWSxHQUFHa0MsZUFBMEQsTUFBakNsQyxFQUFZLEdBQUdrQyxnQkFFN0VILEVBQWtCLEdBRGxCRCxFQUFtQyxNQUFuQjlCLEVBQVksR0FBYSxFQUFJLEdBRTdDd0IsRUFBTWhCLFNBQVN0QixFQUFNUSxNQUFNb0MsRUFBZUEsRUFBZ0IsR0FBSSxJQUM5REwsRUFBUWpCLFNBQVN0QixFQUFNUSxNQUFNcUMsRUFBaUJBLEVBQWtCLEdBQUksSUFFcEU1QixFQUFPM0IsS0FBSzJELGFBQWFYLEVBQUtDLEVBQU8sSUFJcEIsSUFBakJ2QyxFQUFNdUIsU0FDTlQsRUFBWVksU0FBUSxTQUFVd0IsRUFBTWpCLEdBQ2hDLE9BQVFpQixHQUNSLElBQUssSUFDRFQsRUFBV1IsRUFDWCxNQUNKLElBQUssSUFDRFMsRUFBYVQsRUFDYixNQUNKLFFBQ0lVLEVBQVlWLE1BS3BCYSxFQUE2QixFQUFaSCxFQUNqQkMsRUFBaUJILEdBQVlFLEVBQXdCLEVBQVhGLEVBQTJCLEVBQVhBLEVBQWUsRUFDekVJLEVBQW1CSCxHQUFjQyxFQUEwQixFQUFiRCxFQUErQixFQUFiQSxFQUFpQixFQUVqRkosRUFBTWhCLFNBQVN0QixFQUFNUSxNQUFNb0MsRUFBZUEsRUFBZ0IsR0FBSSxJQUM5REwsRUFBUWpCLFNBQVN0QixFQUFNUSxNQUFNcUMsRUFBaUJBLEVBQWtCLEdBQUksSUFDcEVMLEVBQU9sQixTQUFTdEIsRUFBTVEsTUFBTXNDLEVBQWdCQSxFQUFpQixHQUFJLElBRWpFQyxFQUEwRSxJQUEzRC9DLEVBQU1RLE1BQU1zQyxFQUFnQkEsRUFBaUIsR0FBR3ZCLE9BRS9ETixFQUFPM0IsS0FBSzJELGFBQWFYLEVBQUtDLEVBQU9DLElBSXBCLElBQWpCeEMsRUFBTXVCLFFBQW9DLE1BQW5CVCxFQUFZLElBQWlDLE1BQW5CQSxFQUFZLEtBRTdEZ0MsRUFBaUIsR0FEakJELEVBQXFDLE1BQW5CL0IsRUFBWSxHQUFhLEVBQUksR0FFL0N5QixFQUFRakIsU0FBU3RCLEVBQU1RLE1BQU1xQyxFQUFpQkEsRUFBa0IsR0FBSSxJQUNwRUwsRUFBT2xCLFNBQVN0QixFQUFNUSxNQUFNc0MsRUFBZ0JBLEVBQWlCLEdBQUksSUFFakVDLEVBQTBFLElBQTNEL0MsRUFBTVEsTUFBTXNDLEVBQWdCQSxFQUFpQixHQUFHdkIsT0FFL0ROLEVBQU8sQ0FBQyxFQUFHc0IsRUFBT0MsSUFJRCxJQUFqQnhDLEVBQU11QixRQUFvQyxNQUFuQlQsRUFBWSxJQUFpQyxNQUFuQkEsRUFBWSxLQUU3RGdDLEVBQWlCLEVBQUksSUFEckJELEVBQXFDLE1BQW5CL0IsRUFBWSxHQUFhLEVBQUksR0FFL0N5QixFQUFRakIsU0FBU3RCLEVBQU1RLE1BQU1xQyxFQUFpQkEsRUFBa0IsR0FBSSxJQUNwRUwsRUFBT2xCLFNBQVN0QixFQUFNUSxNQUFNc0MsRUFBZ0JBLEVBQWlCLEdBQUksSUFFakVDLEVBQTBFLElBQTNEL0MsRUFBTVEsTUFBTXNDLEVBQWdCQSxFQUFpQixHQUFHdkIsT0FFL0ROLEVBQU8sQ0FBQyxFQUFHc0IsRUFBT0MsSUFHdEJ2QixFQUFPNUIsRUFBTThELGtCQUFrQmxDLEdBQy9CNUIsRUFBTTRCLEtBQU9BLEVBRWdCLElBQWhCQSxFQUFLTSxPQUFldkIsRUFBUWMsRUFBWXNDLFFBQU8sU0FBVUMsRUFBVUMsR0FDNUUsT0FBUUEsR0FDUixJQUFLLElBQ0QsT0FBT0QsR0FBd0IsSUFBWnBDLEVBQUssR0FBVyxHQUFLNUIsRUFBTXdDLGVBQWVaLEVBQUssS0FDdEUsSUFBSyxJQUNELE9BQU9vQyxHQUF3QixJQUFacEMsRUFBSyxHQUFXLEdBQUs1QixFQUFNd0MsZUFBZVosRUFBSyxLQUN0RSxJQUFLLElBQ0QsT0FBT29DLEdBQVlOLEVBQWUxRCxFQUFNa0Usc0JBQXNCdEMsRUFBSyxJQUFJLEdBQVMsSUFDcEYsSUFBSyxJQUNELE9BQU9vQyxHQUFZTixFQUFlMUQsRUFBTWtFLHNCQUFzQnRDLEVBQUssSUFBSSxHQUFRLE9BRXBGLEtBS1BrQyxrQkFBbUIsU0FBVWxDLEdBQ3pCLElBQUk1QixFQUFRQyxLQUNSd0IsRUFBY3pCLEVBQU15QixZQUNwQkMsRUFBVTFCLEVBQU0wQixTQUFXLEdBQzNCQyxFQUFVM0IsRUFBTTJCLFNBQVcsR0FFL0IsT0FBS0MsRUFBS00sUUFBV1IsRUFBUVEsT0FBUyxHQUFLUCxFQUFRTyxPQUFTLEdBRzFEVCxFQUFZMEMsTUFBSyxTQUFTbkMsR0FDeEIsTUFBMkIsTUFBcEJBLEVBQUUyQixrQkFFQyxJQUFaL0IsRUFBSyxHQU5nRUEsRUFTbkVELEVBQVFPLFNBQVdQLEVBQVEsR0FBS0MsRUFBSyxJQUN2Q0QsRUFBUSxLQUFPQyxFQUFLLEtBQU9ELEVBQVEsR0FBS0MsRUFBSyxJQUMzQ0QsRUFBUSxLQUFPQyxFQUFLLElBQU1ELEVBQVEsR0FBS0MsRUFBSyxLQUVyQ0QsRUFFUEQsRUFBUVEsU0FBV1IsRUFBUSxHQUFLRSxFQUFLLElBQ3ZDRixFQUFRLEtBQU9FLEVBQUssS0FBT0YsRUFBUSxHQUFLRSxFQUFLLElBQzNDRixFQUFRLEtBQU9FLEVBQUssSUFBTUYsRUFBUSxHQUFLRSxFQUFLLEtBRXJDRixFQUVKRSxHQUdYZ0MsYUFBYyxTQUFVWCxFQUFLQyxFQUFPQyxHQVNoQyxPQVJBRixFQUFNbUIsS0FBS0MsSUFBSXBCLEVBQUssSUFDcEJDLEVBQVFrQixLQUFLQyxJQUFJbkIsRUFBTyxJQUN4QkMsRUFBT2xCLFNBQVVrQixHQUFRLEVBQUksS0FFeEJELEVBQVEsR0FBS0EsRUFBUSxHQUFNLEdBQU9BLEVBQVEsR0FBS0EsRUFBUSxHQUFNLEtBQzlERCxFQUFNbUIsS0FBS0MsSUFBSXBCLEVBQWUsSUFBVkMsRUFBZWpELEtBQUtxRSxXQUFXbkIsR0FBUSxHQUFLLEdBQU0sS0FHbkUsQ0FBQ0YsRUFBS0MsRUFBT0MsSUFHeEJtQixXQUFZLFNBQVVuQixHQUNsQixPQUFTQSxFQUFPLEdBQU0sR0FBT0EsRUFBTyxLQUFRLEdBQVFBLEVBQU8sS0FBUSxHQUd2RVgsZUFBZ0IsU0FBVStCLEdBQ3RCLE9BQVFBLEVBQVMsR0FBSyxJQUFNLElBQU1BLEdBR3RDTCxzQkFBdUIsU0FBVUssRUFBUUMsR0FDckMsT0FBSUEsR0FDUUQsRUFBUyxHQUFLLE1BQVNBLEVBQVMsSUFBTSxLQUFRQSxFQUFTLElBQU8sSUFBTSxJQUFRQSxHQUdoRkEsRUFBUyxHQUFLLElBQU0sSUFBTUEsSUFJMUMsSUFBSUUsRUFBa0JqRCxFQUVsQmtELEVBQWdCLFNBQVVDLEVBQWFDLEdBQ3ZDLElBQUk1RSxFQUFRQyxLQUVaRCxFQUFNNkUsS0FBTyxHQUNiN0UsRUFBTTZCLE9BQVMsR0FDZjdCLEVBQU0yRSxZQUFjQSxFQUNwQjNFLEVBQU00RSxXQUFhQSxFQUNuQjVFLEVBQU1vQyxjQUdWc0MsRUFBY2pFLFVBQVksQ0FDdEIyQixXQUFZLFdBQ1IsSUFBSXBDLEVBQVFDLEtBQ1pELEVBQU0yRSxZQUFZdEMsU0FBUSxXQUN0QnJDLEVBQU02QixPQUFPUyxLQUFLLE9BSTFCd0MsaUJBQWtCLFdBQ2QsSUFBSTlFLEVBQVFDLEtBQ1I0RSxFQUFPN0UsRUFBTTZFLEtBRWpCLE9BQU9BLEVBQUssR0FDUjdFLEVBQU13QyxlQUFlcUMsRUFBSyxJQUFNLElBQU03RSxFQUFNd0MsZUFBZXFDLEVBQUssSUFBTSxJQUFNN0UsRUFBTXdDLGVBQWVxQyxFQUFLLElBQ3RHLElBR1JwQyxVQUFXLFdBQ1AsT0FBT3hDLEtBQUs0QixRQUdoQmtELHFCQUFzQixXQUVsQixNQUFpQyxPQUE3QkMsT0FEUS9FLEtBQ0syRSxZQUNOLENBQ0hLLGtCQUFtQixFQUNuQkMsU0FBVSxHQUNWQyxxQkFBc0IsRUFDdEJDLFdBQVksSUFJYixDQUNISCxrQkFBbUIsRUFDbkJDLFNBQVUsR0FDVkMscUJBQXNCLEVBQ3RCQyxXQUFZLEtBSXBCQyxpQkFBa0IsU0FBVTFFLEdBQ3hCLElBQUlYLEVBQVFDLEtBQU0wQyxFQUFTLEdBRTNCaEMsRUFBUUEsRUFBTUMsUUFBUSxTQUFVLElBRWhDLElBQUkwRSxFQUFvQnRGLEVBQU0rRSx1QkFvQzlCLE9BbENBL0UsRUFBTTZCLE9BQU9RLFNBQVEsU0FBVUgsRUFBUVUsR0FDbkMsR0FBSWpDLEVBQU11QixPQUFTLEVBQUcsQ0FDbEIsSUFBSVcsRUFBTWxDLEVBQU1RLE1BQU0sRUFBR2UsR0FDckJZLEVBQU9ELEVBQUkxQixNQUFNLEVBQUcsR0FDcEI0QixFQUFPcEMsRUFBTVEsTUFBTWUsR0FFdkIsT0FBUWxDLEVBQU0yRSxZQUFZL0IsSUFFMUIsSUFBSyxJQUNHWCxTQUFTYSxFQUFNLElBQU13QyxFQUFrQkwsa0JBQ3ZDcEMsRUFBTSxJQUFNQyxFQUNMYixTQUFTWSxFQUFLLElBQU15QyxFQUFrQkosV0FDN0NyQyxFQUFNeUMsRUFBa0JKLFNBQVcsSUFHdkMsTUFFSixJQUFLLElBQ0wsSUFBSyxJQUNHakQsU0FBU2EsRUFBTSxJQUFNd0MsRUFBa0JILHFCQUN2Q3RDLEVBQU0sSUFBTUMsRUFDTGIsU0FBU1ksRUFBSyxJQUFNeUMsRUFBa0JGLGFBQzdDdkMsRUFBTXlDLEVBQWtCRixXQUFhLElBSzdDekMsR0FBVUUsRUFHVmxDLEVBQVFvQyxNQUlUOUMsS0FBS3NGLG1CQUFtQjVDLElBR25DNEMsbUJBQW9CLFNBQVU1RSxHQUMxQixJQUdJNkUsRUFBUUMsRUFBUUMsRUFIaEIxRixFQUFRQyxLQUFNMEUsRUFBYzNFLEVBQU0yRSxZQUFhRSxFQUFPLEdBQ3REYyxFQUFjLEVBQUdDLEVBQWMsRUFBR0MsRUFBWSxFQUM5Q0MsRUFBbUIsRUFBR0MsRUFBbUIsRUFBR0MsRUFBaUIsRUFxRGpFLE9BbERxQixJQUFqQnJGLEVBQU11QixTQUNOeUMsRUFBWXRDLFNBQVEsU0FBVXdCLEVBQU1qQixHQUNoQyxPQUFRaUIsR0FDUixJQUFLLElBQ0Q4QixFQUFzQixFQUFSL0MsRUFDZCxNQUNKLElBQUssSUFDRGdELEVBQXNCLEVBQVJoRCxFQUNkLE1BQ0osSUFBSyxJQUNEaUQsRUFBb0IsRUFBUmpELE1BS3BCb0QsRUFBaUJILEVBQ2pCRSxFQUFtQkgsRUFDbkJFLEVBQW1CSCxFQUVuQkgsRUFBU3ZELFNBQVN0QixFQUFNUSxNQUFNMkUsRUFBa0JBLEVBQW1CLEdBQUksSUFDdkVMLEVBQVN4RCxTQUFTdEIsRUFBTVEsTUFBTTRFLEVBQWtCQSxFQUFtQixHQUFJLElBQ3ZFTCxFQUFPekQsU0FBU3RCLEVBQU1RLE1BQU02RSxFQUFnQkEsRUFBaUIsR0FBSSxJQUVqRW5CLEVBQU81RSxLQUFLZ0csYUFBYVAsRUFBTUQsRUFBUUQsSUFHdEIsSUFBakI3RSxFQUFNdUIsUUFBZ0JsQyxFQUFNMkUsWUFBWXZELFFBQVEsS0FBTyxJQUN2RHVELEVBQVl0QyxTQUFRLFNBQVV3QixFQUFNakIsR0FDaEMsT0FBUWlCLEdBQ1IsSUFBSyxJQUNEK0IsRUFBc0IsRUFBUmhELEVBQ2QsTUFDSixJQUFLLElBQ0RpRCxFQUFvQixFQUFSakQsTUFLcEJvRCxFQUFpQkgsRUFDakJFLEVBQW1CSCxFQUVuQkosRUFBUyxFQUNUQyxFQUFTeEQsU0FBU3RCLEVBQU1RLE1BQU00RSxFQUFrQkEsRUFBbUIsR0FBSSxJQUN2RUwsRUFBT3pELFNBQVN0QixFQUFNUSxNQUFNNkUsRUFBZ0JBLEVBQWlCLEdBQUksSUFFakVuQixFQUFPNUUsS0FBS2dHLGFBQWFQLEVBQU1ELEVBQVFELElBRzNDeEYsRUFBTTZFLEtBQU9BLEVBRVUsSUFBaEJBLEVBQUszQyxPQUFldkIsRUFBUWdFLEVBQVlaLFFBQU8sU0FBVUMsRUFBVUMsR0FDdEUsT0FBUUEsR0FDUixJQUFLLElBQ0QsT0FBT0QsRUFBV2hFLEVBQU13QyxlQUFlcUMsRUFBSyxJQUNoRCxJQUFLLElBQ0QsT0FBT2IsRUFBV2hFLEVBQU13QyxlQUFlcUMsRUFBSyxJQUNoRCxJQUFLLElBQ0QsT0FBT2IsRUFBV2hFLEVBQU13QyxlQUFlcUMsRUFBSyxPQUVqRCxLQUdQb0IsYUFBYyxTQUFVUCxFQUFNRCxFQUFRRCxHQUtsQyxPQUpBQSxFQUFTcEIsS0FBS0MsSUFBSXBDLFNBQVN1RCxHQUFVLEVBQUcsSUFBSyxJQUM3Q0MsRUFBU3JCLEtBQUtDLElBQUlvQixFQUFRLElBR25CLENBRlBDLEVBQU90QixLQUFLQyxJQUFJcUIsRUFBTSxJQUVSRCxFQUFRRCxJQUcxQmhELGVBQWdCLFNBQVUrQixHQUN0QixPQUFRQSxFQUFTLEdBQUssSUFBTSxJQUFNQSxJQUkxQyxJQUFJMkIsRUFBa0J4QixFQUVsQnlCLEVBQWlCLFNBQVVDLEVBQVdyRyxHQUN0QyxJQUFJQyxFQUFRQyxLQUVaRCxFQUFNRCxVQUFhQSxHQUEyQixLQUFkQSxFQUFvQkEsRUFBWSxJQUNoRUMsRUFBTUksWUFBY0wsRUFBWSxJQUFJTSxPQUFPLEtBQU9OLEVBQVcsS0FBTyxHQUVwRUMsRUFBTW9HLFVBQVlBLEdBR3RCRCxFQUFlMUYsVUFBWSxDQUN2QjRGLGFBQWMsU0FBVUQsR0FDcEJuRyxLQUFLbUcsVUFBWUEsR0FHckJ2RixPQUFRLFNBQVV5RixHQUNkLElBQUl0RyxFQUFRQyxLQUVaRCxFQUFNb0csVUFBVUcsUUFhaEIsSUFGQSxJQUFpQnRDLEVBQWJ0QixFQUFTLEdBQWE2RCxHQUFZLEVBRTdCQyxFQUFJLEVBQUdDLEdBSmhCSixHQUhBQSxHQUhBQSxFQUFjQSxFQUFZMUYsUUFBUSxVQUFXLEtBR25CQSxRQUFRLE1BQU8sS0FBS0EsUUFBUSxNQUFPLElBQUlBLFFBQVEsSUFBSyxNQUdwREEsUUFBUVosRUFBTUksWUFBYSxLQUlsQjhCLE9BQVF1RSxFQUFJQyxFQUFNRCxJQUNqRHhDLEVBQVVqRSxFQUFNb0csVUFBVU8sV0FBV0wsRUFBWU0sT0FBT0gsSUFHcEQsV0FBV0ksS0FBSzVDLElBQ2hCdEIsRUFBU3NCLEVBRVR1QyxHQUFZLEdBRVBBLElBQ0Q3RCxFQUFTc0IsR0FhckIsT0FKQXRCLEVBQVNBLEVBQU8vQixRQUFRLFFBQVMsS0FFakJBLFFBQVEsU0FBVVosRUFBTUQsYUFNaEQsSUFBSStHLEVBQW1CWCxFQUVuQlksRUFBcUIsQ0FDckJsRixPQUFRLENBQ0ptRixLQUFlLENBQUMsRUFBRyxFQUFHLEdBQ3RCQyxLQUFlLENBQUMsRUFBRyxFQUFHLEdBQ3RCQyxPQUFlLENBQUMsRUFBRyxFQUFHLEdBQ3RCQyxTQUFlLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDekJDLFdBQWUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUN6QkMsUUFBZSxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ3pCQyxhQUFlLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDekJDLE1BQWUsQ0FBQyxFQUFHLEVBQUcsR0FDdEJDLElBQWUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUN6QkMsUUFBZSxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ3pCQyxLQUFlLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FDekJDLElBQWUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUN6QkMsU0FBZSxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQ3pCQyxRQUFlLENBQUMsRUFBRyxFQUFHLEVBQUcsSUFHN0JDLEdBQUksQ0FFQWQsS0FBTSxxQkFHTkMsS0FBTSxpQkFHTkUsU0FBVSx5Q0FHVkQsT0FBUSxvQ0FHUkUsV0FBWSx3REFHWkMsUUFBUyw0QkFHVEMsYUFBYyxtQkFHZEMsTUFBTyx5QkFHUEMsSUFBSyx5QkFHTEMsUUFBUyw2Q0FHVEUsSUFBSyxvQkFHTEQsS0FBTSxhQUdORSxTQUFVLG9CQUdkRyxnQkFBaUIsU0FBVUMsR0FDekIsSUFBSUMsRUFBUUQsRUFBTWpFLFFBQU8sU0FBVW1FLEVBQU1qRSxHQUN2QyxPQUFPaUUsRUFBT2pFLElBQ2IsR0FFSCxPQUFPK0QsRUFBTUcsT0FBTyxHQUFLRixJQUczQkcsUUFBUyxTQUFVekgsRUFBTzBILEdBQ3RCLElBQUl4RyxFQUFTa0YsRUFBbUJsRixPQUM1QmlHLEVBQUtmLEVBQW1CZSxHQVE1QixJQUFLLElBQUlRLEtBRlRELElBQWVBLEVBRUNQLEVBQ1osR0FBSUEsRUFBR1EsR0FBS3pCLEtBQUtsRyxHQUFRLENBQ3JCLElBQUk0SCxFQUFnQjFHLEVBQU95RyxHQUMzQixNQUFPLENBQ0h6RSxLQUFNeUUsRUFDTnpHLE9BQVF3RyxFQUFhcEksS0FBSzhILGdCQUFnQlEsR0FBaUJBLEdBS3ZFLE1BQU8sQ0FDSDFFLEtBQU0sVUFDTmhDLE9BQVF3RyxFQUFhcEksS0FBSzhILGdCQUFnQmxHLEVBQU9nRyxTQUFXaEcsRUFBT2dHLFdBSzNFVyxFQUF1QnpCLEVBMlF2QjBCLEVBelFPLENBQ1BDLEtBQU0sYUFHTkMsTUFBTyxTQUFVaEksRUFBT21ILEdBQ3BCLE9BQU9uSCxFQUFNQyxRQUFRa0gsRUFBSSxLQUc3QmMsaUJBQWtCLFNBQVVqSSxFQUFPWixFQUFXOEksR0FFMUMsR0FBMEIsSUFBdEJBLEVBQVczRyxPQUNYLE9BQU92QixFQUFNUSxPQUFPcEIsRUFBVW1DLFVBQVluQyxFQUFZQSxFQUFZLEdBSXRFLElBQUkrSSxFQUFtQixHQU92QixPQU5BRCxFQUFXeEcsU0FBUSxTQUFVNEIsR0FDckJ0RCxFQUFNUSxPQUFPOEMsRUFBUS9CLFVBQVkrQixJQUNqQzZFLEVBQW1CN0UsTUFJcEI2RSxHQUdYQywwQkFBMkIsU0FBVWhKLEdBQ2pDLE9BQU8sSUFBSU0sT0FBT04sRUFBVWEsUUFBUSx5QkFBMEIsUUFBUyxNQUczRW9JLHNCQUF1QixTQUFVQyxFQUFTQyxFQUFVQyxFQUFVcEosRUFBVzhJLEdBR3ZFLE9BQUlLLEVBQVNoSCxTQUFXK0csRUFDYkUsRUFBU2pILE9BR2IrRyxFQUFVaEosS0FBS21KLGtCQUFrQkgsRUFBU0MsRUFBVUMsRUFBVXBKLEVBQVc4SSxJQUdsRk8sa0JBQW1CLFNBQVVILEVBQVNDLEVBQVVDLEVBQVVwSixFQUFXOEksR0FDakUsSUFBSVEsRUFBYUMsRUFBYUMsRUFNOUIsT0FKQUYsRUFBY3BKLEtBQUt1SixnQkFBZ0JOLEVBQVMvSCxNQUFNLEVBQUc4SCxHQUFVbEosRUFBVzhJLEdBQzFFUyxFQUFjckosS0FBS3VKLGdCQUFnQkwsRUFBU2hJLE1BQU0sRUFBRzhILEdBQVVsSixFQUFXOEksR0FHakQsSUFGekJVLEVBQWVGLEVBQVluSCxPQUFTb0gsRUFBWXBILFFBRWpCcUgsRUFBZW5GLEtBQUtxRixJQUFJRixHQUFpQixHQUc1RUMsZ0JBQWlCLFNBQVU3SSxFQUFPWixFQUFXOEksR0FDekMsSUFBSTdJLEVBQVFDLEtBR1osR0FBMEIsSUFBdEI0SSxFQUFXM0csT0FBYyxDQUN6QixJQUFJOUIsRUFBY0wsRUFBWUMsRUFBTStJLDBCQUEwQmhKLEdBQWEsR0FFM0UsT0FBT1ksRUFBTUMsUUFBUVIsRUFBYSxJQVV0QyxPQU5BeUksRUFBV3hHLFNBQVEsU0FBVTRCLEdBQ3pCQSxFQUFRNUMsTUFBTSxJQUFJZ0IsU0FBUSxTQUFVcUgsR0FDaEMvSSxFQUFRQSxFQUFNQyxRQUFRWixFQUFNK0ksMEJBQTBCVyxHQUFTLFVBSWhFL0ksR0FHWGdKLFFBQVMsU0FBVUMsRUFBSzFILEdBQ3BCLE9BQU8wSCxFQUFJekksTUFBTSxFQUFHZSxJQUd4QjJILGFBQWMsU0FBVWhJLEdBQ3BCLE9BQU9BLEVBQU9rQyxRQUFPLFNBQVVDLEVBQVVDLEdBQ3JDLE9BQU9ELEVBQVdDLElBQ25CLElBU1A2Rix1QkFBd0IsU0FBVW5KLEVBQU9mLEVBQVFtSyxFQUFjQyxFQUFZakssRUFBVzhJLEVBQVlvQixFQUFtQm5LLEVBQVlELEdBRTdILEdBQXFCLElBQWpCa0ssRUFDRixPQUFPcEosRUFJVCxHQUFJQSxJQUFVZixHQUFvQixLQUFWZSxFQUN0QixNQUFPLEdBR1QsR0FBSWQsR0FBMEMsS0FBckJjLEVBQU1RLE1BQU0sRUFBRyxHQUFZLENBQ2hELElBQUkrRyxFQUFrQyxLQUExQjhCLEVBQVc3SSxNQUFNLEVBQUcsR0FBYTZJLEVBQVc3SSxNQUFNLEdBQUs2SSxFQUNuRSxNQUFPLElBQU0vSixLQUFLNkosdUJBQXVCbkosRUFBTVEsTUFBTSxHQUFJdkIsRUFBUW1LLEVBQWM3QixFQUFNbkksRUFBVzhJLEVBQVlvQixFQUFtQm5LLEVBQVlELEdBSS9JLEdBQUltSyxFQUFXN0ksTUFBTSxFQUFHNEksS0FBa0JuSyxJQUFXRSxFQUVqRCxPQUFJbUssSUFBc0JELEdBQWNySixFQUFjQSxFQUMvQyxHQUNKLEdBQUlxSixFQUFXN0ksT0FBTzRJLEtBQWtCbkssR0FBVUUsRUFFckQsT0FBSW1LLElBQXNCRCxHQUFjckosRUFBY0EsRUFDL0MsR0FHWCxJQUFJdUosRUFBWWpLLEtBQUt1SixnQkFBZ0JRLEVBQVlqSyxFQUFXOEksR0FJNUQsT0FBSWxJLEVBQU1RLE1BQU0sRUFBRzRJLEtBQWtCbkssR0FBV0UsRUFFckNhLEVBQU1RLE9BQU80SSxLQUFrQm5LLEdBQVVFLEVBQ3pDb0ssRUFBVS9JLE1BQU0sR0FBSTRJLEVBQWUsR0FJdkNqSyxFQUFhYSxFQUFNUSxNQUFNLEdBQUk0SSxHQUFnQnBKLEVBQU1RLE1BQU00SSxHQU5yREcsRUFBVS9JLE1BQU00SSxJQVMvQkksa0JBQW1CLFNBQVVqQyxFQUFNakUsR0FHL0IsSUFGQSxJQUFJckIsRUFBUSxFQUVMc0YsRUFBS3RCLE9BQU9oRSxLQUFXcUIsRUFBUTJDLE9BQU9oRSxJQUN6QyxHQUE2QixLQUF6QnNGLEVBQUt0QixPQUFPaEUsS0FDWixPQUFRLEVBSWhCLE9BQU9BLEdBR1h3SCxrQkFBbUIsU0FBVXpKLEVBQU9rQixFQUFRd0ksRUFBY3RLLEVBQVc4SSxFQUFZeUIsR0FDN0UsSUFBSTNILEVBQVMsR0FDVDRILEVBQXFCMUIsRUFBVzNHLE9BQVMsRUFDekNzSSxFQUFtQixHQUd2QixPQUFxQixJQUFqQkgsRUFDTzFKLEdBR1hrQixFQUFPUSxTQUFRLFNBQVVILEVBQVFVLEdBQzdCLEdBQUlqQyxFQUFNdUIsT0FBUyxFQUFHLENBQ2xCLElBQUlXLEVBQU1sQyxFQUFNUSxNQUFNLEVBQUdlLEdBQ3JCYSxFQUFPcEMsRUFBTVEsTUFBTWUsR0FHbkJzSSxFQURBRCxFQUNtQjFCLEVBQVd5QixFQUFxQjFILEVBQVEsRUFBS0EsSUFBVTRILEVBRXZEekssRUFHbkJ1SyxHQUNJMUgsRUFBUSxJQUNSRCxHQUFVNkgsR0FHZDdILEdBQVVFLElBRVZGLEdBQVVFLEVBRU5BLEVBQUlYLFNBQVdBLEdBQVVVLEVBQVF5SCxFQUFlLElBQ2hEMUgsR0FBVTZILElBS2xCN0osRUFBUW9DLE1BSVRKLElBS1g4SCxnQkFBaUIsU0FBVUMsRUFBSTlLLEVBQVFHLEVBQVc4SSxHQUM5QyxHQUFLNkIsRUFBTCxDQUlBLElBQUlDLEVBQU1ELEVBQUcvSixNQUNUaUssRUFBVzdLLEdBQWM4SSxFQUFXLElBQU0sSUFFOUMsR0FBSzZCLEVBQUdHLG1CQUFzQmpMLEtBQVdBLEVBQU9zQyxPQUFTMEksRUFBUzFJLFFBQVd5SSxFQUFJekksUUFBakYsQ0FJQSxJQUFJNEksRUFBbUIsRUFBYkgsRUFBSXpJLE9BR2Q2SSxZQUFXLFdBQ1BMLEVBQUdHLGtCQUFrQkMsRUFBS0EsS0FDM0IsTUFJUEUsbUJBQW9CLFNBQVNySyxHQUMzQixJQUVFLE9BRGdCekIsT0FBTytMLGdCQUFrQkMsU0FBU0QsZ0JBQWtCLElBQ25EM0osV0FBV1ksU0FBV3ZCLEVBQU11QixPQUM3QyxNQUFPaUosSUFJVCxPQUFPLEdBR1RDLGFBQWMsU0FBVUMsRUFBU0MsRUFBVUMsR0FDdkMsR0FBSUYsSUFBWXBMLEtBQUt1TCxpQkFBaUJELE1BS2xDRixHQUFXQSxFQUFRMUssTUFBTXVCLFFBQVVvSixHQUl2QyxHQUFJRCxFQUFRSSxnQkFBaUIsQ0FDekIsSUFBSUMsRUFBUUwsRUFBUUksa0JBRXBCQyxFQUFNQyxLQUFLLFlBQWFMLEdBQ3hCSSxFQUFNRSxjQUVOLElBQ0lQLEVBQVFSLGtCQUFrQlMsRUFBVUEsR0FDdEMsTUFBT08sR0FFTEMsUUFBUUMsS0FBSyx1REFLekJQLGlCQUFrQixTQUFTUSxHQUN2QixJQUFJQyxFQUFnQkQsRUFBT0MsY0FDM0IsT0FBSUEsR0FBaUJBLEVBQWNDLFdBQ3hCak0sS0FBS3VMLGlCQUFpQlMsRUFBY0MsWUFFeENELEdBR1hFLFVBQVcsV0FDUCxPQUFPQyxXQUFhLFdBQVd2RixLQUFLdUYsVUFBVUMsWUFPbERDLDBCQUEyQixTQUFVQyxFQUFnQkMsR0FDakQsU0FBS3ZNLEtBQUtrTSxhQUFnQkksR0FBbUJDLElBSXRDQSxJQUFzQkQsRUFBZXBMLE1BQU0sR0FBSSxLQWlHMURzTCxFQXRGb0IsQ0FHcEJDLE9BQVEsU0FBVUMsRUFBUUMsR0ErRXRCLE9BN0VBQSxFQUFPQSxHQUFRLElBRGZELEVBQVNBLEdBQVUsSUFJWkUsYUFBZUQsRUFBS0MsV0FDM0JGLEVBQU9HLHVCQUF5QkYsRUFBS0UscUJBQ3JDSCxFQUFPSSxlQUFpQixHQUN4QkosRUFBT0ssd0JBQTBCSixFQUFLSSx5QkFBMkIsYUFHakVMLEVBQU9NLFFBQVVMLEVBQUtLLE1BQ3RCTixFQUFPTyxnQkFBa0JOLEVBQUtNLGlCQUFtQixLQUNqRFAsRUFBT1EsZUFBaUIsR0FHeEJSLEVBQU85SCxPQUFTK0gsRUFBSy9ILEtBQ3JCOEgsRUFBT2hJLFlBQWNpSSxFQUFLakksYUFBZSxDQUFDLElBQUssSUFBSyxLQUNwRGdJLEVBQU8vSCxXQUFhZ0ksRUFBS2hJLFlBQWMsS0FDdkMrSCxFQUFPUyxjQUFnQixHQUd2QlQsRUFBTy9LLE9BQVNnTCxFQUFLaEwsS0FDckIrSyxFQUFPbEwsWUFBY21MLEVBQUtuTCxhQUFlLENBQUMsSUFBSyxJQUFLLEtBQ3BEa0wsRUFBT2pMLFFBQVVrTCxFQUFLbEwsU0FBVyxHQUNqQ2lMLEVBQU9oTCxRQUFVaUwsRUFBS2pMLFNBQVcsR0FDakNnTCxFQUFPVSxjQUFnQixHQUd2QlYsRUFBT1csVUFBWVYsRUFBS1UsUUFDeEJYLEVBQU9wTixvQkFBc0JxTixFQUFLck4sb0JBQXNCLEVBQUlxTixFQUFLck4sb0JBQXNCLEVBQ3ZGb04sRUFBT25OLG9CQUFzQm9OLEVBQUtwTixxQkFBdUIsRUFBSW9OLEVBQUtwTixvQkFBc0IsRUFDeEZtTixFQUFPck4sbUJBQXFCc04sRUFBS3ROLG9CQUFzQixJQUN2RHFOLEVBQU9sTiwyQkFBNkJtTixFQUFLbk4sNEJBQThCLFdBQ3ZFa04sRUFBT2pOLHNCQUF3QmtOLEVBQUtsTixvQkFDcENpTixFQUFPaE4sb0JBQWlELElBQTVCaU4sRUFBS2pOLG1CQUNqQ2dOLEVBQU85TSxtQkFBcUIrTSxFQUFLL00saUJBQ2pDOE0sRUFBTzdNLGFBQWU4TSxFQUFLOU0sV0FHM0I2TSxFQUFPWSxrQkFBb0JYLEVBQUtXLGdCQUVoQ1osRUFBT2EsWUFBY2IsRUFBT0UsWUFBY0YsRUFBTy9LLFFBQVVnTCxFQUFLWSxZQUVoRWIsRUFBT2MsWUFBY2IsRUFBS2EsVUFDMUJkLEVBQU9lLFlBQWNkLEVBQUtjLFVBRTFCZixFQUFPL00sT0FBVStNLEVBQU9FLFlBQWNGLEVBQU8vSyxLQUFRLEdBQU1nTCxFQUFLaE4sUUFBVSxHQUMxRStNLEVBQU8xQyxvQkFBc0IyQyxFQUFLM0Msa0JBQ2xDMEMsRUFBTzVDLGFBQWU0QyxFQUFPL00sT0FBT3NDLE9BQ3BDeUssRUFBT2dCLHFCQUF1QmYsRUFBS2UsbUJBQ25DaEIsRUFBT2lCLGdCQUFrQmhCLEVBQUtnQixjQUU5QmpCLEVBQU9rQixlQUFnQ0MsSUFBbkJsQixFQUFLaUIsV0FBOEMsT0FBbkJqQixFQUFLaUIsVUFBc0JqQixFQUFLaUIsVUFBVXZNLFdBQWEsR0FFM0dxTCxFQUFPNU0sVUFDRjZNLEVBQUs3TSxXQUFnQyxLQUFuQjZNLEVBQUs3TSxVQUFvQjZNLEVBQUs3TSxVQUM1QzZNLEVBQUtoTCxLQUFPLElBQ1JnTCxFQUFLL0gsS0FBTyxJQUNSK0gsRUFBS1UsUUFBVSxLQUNYVixFQUFLSyxNQUFRLEtBRWxDTixFQUFPb0IsZ0JBQWtCcEIsRUFBTzVNLFVBQVVtQyxPQUMxQ3lLLEVBQU9yQyxvQkFBc0JzQyxFQUFLdEMsa0JBQ2xDcUMsRUFBTzlELFdBQWErRCxFQUFLL0QsWUFBYyxHQUV2QzhELEVBQU85SyxPQUFTK0ssRUFBSy9LLFFBQVUsR0FDL0I4SyxFQUFPdEMsYUFBZXNDLEVBQU85SyxPQUFPSyxPQUVwQ3lLLEVBQU9xQixLQUFrQyxpQkFBbkIvTyxHQUErQkEsRUFBa0JBLEVBQWlCQyxPQUN4RnlOLEVBQU96QixTQUFXMEIsRUFBSzFCLFVBQVl5QixFQUFPcUIsS0FBSzlDLFNBRS9DeUIsRUFBT3NCLFVBQVksRUFFbkJ0QixFQUFPdUIsV0FBWSxFQUNuQnZCLEVBQU9oSyxPQUFTLEdBRWhCZ0ssRUFBT3dCLGVBQWlCdkIsRUFBS3VCLGdCQUFrQixhQUV4Q3hCLElBWVh5QixFQUFTLFNBQVUvQyxFQUFTdUIsR0FDNUIsSUFBSTVNLEVBQVFDLEtBQ1JvTyxHQUFzQixFQWMxQixHQVp1QixpQkFBWmhELEdBQ1ByTCxFQUFNcUwsUUFBVUgsU0FBU29ELGNBQWNqRCxHQUN2Q2dELEVBQXNCbkQsU0FBU3FELGlCQUFpQmxELEdBQVNuSixPQUFTLFFBRXRDLElBQW5CbUosRUFBUW5KLFFBQTBCbUosRUFBUW5KLE9BQVMsR0FDNURsQyxFQUFNcUwsUUFBVUEsRUFBUSxHQUN4QmdELEVBQXNCaEQsRUFBUW5KLE9BQVMsR0FFdkNsQyxFQUFNcUwsUUFBVUEsR0FJZnJMLEVBQU1xTCxRQUNQLE1BQU0sSUFBSW1ELE1BQU0sd0NBR3BCLEdBQUlILEVBQ0YsSUFFRXZDLFFBQVFDLEtBQUssc0ZBQ2IsTUFBT0YsSUFLWGUsRUFBS2lCLFVBQVk3TixFQUFNcUwsUUFBUTFLLE1BRS9CWCxFQUFNeU8sV0FBYUwsRUFBT00sa0JBQWtCaEMsT0FBTyxHQUFJRSxHQUV2RDVNLEVBQU0yTyxRQUdWUCxFQUFPM04sVUFBWSxDQUNma08sS0FBTSxXQUNGLElBQUkzTyxFQUFRQyxLQUFNMk8sRUFBTTVPLEVBQU15TyxXQUd6QkcsRUFBSXRCLFNBQVlzQixFQUFJM0IsT0FBVTJCLEVBQUkvQixZQUFlK0IsRUFBSS9KLE1BQVMrSixFQUFJaE4sTUFBOEIsSUFBckJnTixFQUFJdkUsY0FBdUJ1RSxFQUFJaFAsUUFNL0dnUCxFQUFJWCxVQUFZRyxFQUFPUyxLQUFLaEYsYUFBYStFLEVBQUkvTSxRQUU3QzdCLEVBQU1tTSxVQUFZaUMsRUFBT1MsS0FBSzFDLFlBQzlCbk0sRUFBTXVNLGVBQWlCLEdBQ3ZCdk0sRUFBTThPLFdBQWEsR0FFbkI5TyxFQUFNK08saUJBQW1CL08sRUFBTWdQLFNBQVNDLEtBQUtqUCxHQUM3Q0EsRUFBTWtQLGtCQUFvQmxQLEVBQU1tUCxVQUFVRixLQUFLalAsR0FDL0NBLEVBQU1vUCxnQkFBa0JwUCxFQUFNcVAsUUFBUUosS0FBS2pQLEdBQzNDQSxFQUFNc1AsY0FBZ0J0UCxFQUFNdVAsTUFBTU4sS0FBS2pQLEdBQ3ZDQSxFQUFNd1AsZUFBaUJ4UCxFQUFNeVAsT0FBT1IsS0FBS2pQLEdBRXpDQSxFQUFNMFAsc0JBRU4xUCxFQUFNcUwsUUFBUXNFLGlCQUFpQixRQUFTM1AsRUFBTStPLGtCQUM5Qy9PLEVBQU1xTCxRQUFRc0UsaUJBQWlCLFVBQVczUCxFQUFNa1AsbUJBQ2hEbFAsRUFBTXFMLFFBQVFzRSxpQkFBaUIsUUFBUzNQLEVBQU1vUCxpQkFDOUNwUCxFQUFNcUwsUUFBUXNFLGlCQUFpQixNQUFPM1AsRUFBTXNQLGVBQzVDdFAsRUFBTXFMLFFBQVFzRSxpQkFBaUIsT0FBUTNQLEVBQU13UCxnQkFHN0N4UCxFQUFNNFAscUJBQ041UCxFQUFNNlAsb0JBQ043UCxFQUFNOFAsb0JBQ045UCxFQUFNK1Asd0JBSUZuQixFQUFJZixXQUFjZSxFQUFJaFAsU0FBV2dQLEVBQUkzRSxvQkFDckNqSyxFQUFNZ1EsUUFBUXBCLEVBQUlmLFlBbENsQjdOLEVBQU1nUSxRQUFRcEIsRUFBSWYsWUFzQzFCNkIsb0JBQXFCLFdBQ2pCLElBQUkxUCxFQUFRQyxLQUNaLEdBRHdCRCxFQUFNeU8sV0FDckJsQixnQkFBVCxDQUVBLElBQUkwQyxFQUFpQmpRLEVBQU1xTCxRQUFRNkUsV0FBVSxHQUM3Q2xRLEVBQU1xTCxRQUFROEUsV0FBV0MsYUFBYUgsRUFBZ0JqUSxFQUFNcUwsU0FFNURyTCxFQUFNcVEsa0JBQW9CclEsRUFBTXFMLFFBQ2hDckwsRUFBTXFRLGtCQUFrQnhNLEtBQU8sU0FFL0I3RCxFQUFNcUwsUUFBVTRFLEVBQ2hCalEsRUFBTXFMLFFBQVFpRixHQUFLLEtBR3ZCUCxxQkFBc0IsV0FDbEIsSUFBa0JuQixFQUFOM08sS0FBa0J3TyxXQUV6QkcsRUFBSXRCLFVBSVRzQixFQUFJMkIsaUJBQW1CLElBQUluQyxFQUFPL08saUJBQzlCdVAsRUFBSXRQLG1CQUNKc1AsRUFBSXJQLG9CQUNKcVAsRUFBSXBQLG9CQUNKb1AsRUFBSW5QLDJCQUNKbVAsRUFBSWxQLG9CQUNKa1AsRUFBSWpQLG1CQUNKaVAsRUFBSWhQLE9BQ0pnUCxFQUFJL08saUJBQ0orTyxFQUFJOU8sV0FDSjhPLEVBQUk3TyxhQUlaK1Asa0JBQW1CLFdBQ2YsSUFBa0JsQixFQUFOM08sS0FBa0J3TyxXQUV6QkcsRUFBSS9KLE9BSVQrSixFQUFJeEIsY0FBZ0IsSUFBSWdCLEVBQU8xSixjQUFja0ssRUFBSWpLLFlBQWFpSyxFQUFJaEssWUFDbEVnSyxFQUFJL00sT0FBUytNLEVBQUl4QixjQUFjM0ssWUFDL0JtTSxFQUFJdkUsYUFBZXVFLEVBQUkvTSxPQUFPSyxPQUM5QjBNLEVBQUlYLFVBQVlHLEVBQU9TLEtBQUtoRixhQUFhK0UsRUFBSS9NLFVBR2pEZ08sa0JBQW1CLFdBQ2YsSUFBa0JqQixFQUFOM08sS0FBa0J3TyxXQUV6QkcsRUFBSWhOLE9BSVRnTixFQUFJdkIsY0FBZ0IsSUFBSWUsRUFBTzVNLGNBQWNvTixFQUFJbk4sWUFBYW1OLEVBQUlsTixRQUFTa04sRUFBSWpOLFNBQy9FaU4sRUFBSS9NLE9BQVMrTSxFQUFJdkIsY0FBYzVLLFlBQy9CbU0sRUFBSXZFLGFBQWV1RSxFQUFJL00sT0FBT0ssT0FDOUIwTSxFQUFJWCxVQUFZRyxFQUFPUyxLQUFLaEYsYUFBYStFLEVBQUkvTSxVQUdqRCtOLG1CQUFvQixXQUNoQixJQUFrQmhCLEVBQU4zTyxLQUFrQndPLFdBRTlCLEdBQUtHLEVBQUkzQixNQU1ULElBQ0kyQixFQUFJekIsZUFBaUIsSUFBSWlCLEVBQU9qSSxlQUM1QixJQUFJeUksRUFBSVosS0FBS0ksT0FBT29DLG1CQUFtQjVCLEVBQUkxQixpQkFDM0MwQixFQUFJN08sV0FFVixNQUFPb0wsR0FDTCxNQUFNLElBQUlxRCxNQUFNLHNFQUl4QlcsVUFBVyxTQUFVc0IsR0FDakIsSUFBSXpRLEVBQVFDLEtBQ1J5USxFQUFXRCxFQUFNRSxPQUFTRixFQUFNRyxRQUVwQzVRLEVBQU11TSxlQUFpQnZNLEVBQU1xTCxRQUFRMUssTUFDckNYLEVBQU04TyxXQUEwQixJQUFiNEIsR0FHdkIxQixTQUFVLFNBQVV5QixHQUNoQixJQUFJelEsRUFBUUMsS0FBTTJPLEVBQU01TyxFQUFNeU8sV0FDMUJJLEVBQU9ULEVBQU9TLEtBRWxCN08sRUFBTThPLFdBQWE5TyxFQUFNOE8sWUFBa0MsMEJBQXBCMkIsRUFBTUksVUFFN0MsSUFBSUMsRUFBZ0JqQyxFQUFLakcsaUJBQWlCNUksRUFBTXVNLGVBQWdCcUMsRUFBSTdPLFVBQVc2TyxFQUFJL0YsWUFFL0U3SSxFQUFNOE8sWUFBY2dDLEVBQ3BCbEMsRUFBSW1DLHVCQUF5QkQsRUFFN0JsQyxFQUFJbUMsd0JBQXlCLEVBR2pDOVEsS0FBSytQLFFBQVEvUCxLQUFLb0wsUUFBUTFLLFFBRzlCME8sUUFBUyxXQUNMLElBQUlyUCxFQUFRQyxLQUNSMk8sRUFBTTVPLEVBQU15TyxXQUNoQnpPLEVBQU11TSxlQUFpQnZNLEVBQU1xTCxRQUFRMUssTUFFakNpTyxFQUFJaFAsUUFBVWdQLEVBQUkzRSxvQkFBc0JqSyxFQUFNcUwsUUFBUTFLLE9BQ3REVixLQUFLK1AsUUFBUXBCLEVBQUloUCxRQUdyQndPLEVBQU9TLEtBQUtwRSxnQkFBZ0J6SyxFQUFNcUwsUUFBU3VELEVBQUloUCxPQUFRZ1AsRUFBSTdPLFVBQVc2TyxFQUFJL0YsYUFHOUUwRyxNQUFPLFNBQVUxRCxHQUNSdUMsRUFBT1MsS0FBSzdELG1CQUFtQi9LLEtBQUtvTCxRQUFRMUssU0FDakRWLEtBQUsrUSxrQkFBa0JuRixHQUN2QjVMLEtBQUsrUCxRQUFRLE1BR2pCUCxPQUFRLFNBQVU1RCxHQUNUdUMsRUFBT1MsS0FBSzdELG1CQUFtQi9LLEtBQUtvTCxRQUFRMUssUUFDakRWLEtBQUsrUSxrQkFBa0JuRixJQUczQm1GLGtCQUFtQixTQUFVbkYsR0FDekIsSUFJSW9GLEVBSEFyQyxFQURRM08sS0FDSXdPLFdBQ1pJLEVBQU9ULEVBQU9TLEtBQ2RxQyxFQUhRalIsS0FHV29MLFFBQVExSyxNQU0zQnNRLEVBSENyQyxFQUFJaEIsY0FHUXNELEVBRkFyQyxFQUFLckYsZ0JBQWdCMEgsRUFBWXRDLEVBQUk3TyxVQUFXNk8sRUFBSS9GLFlBS3JFLElBQ1FnRCxFQUFFc0YsY0FDRnRGLEVBQUVzRixjQUFjQyxRQUFRLE9BQVFILEdBRWhDL1IsT0FBT2lTLGNBQWNDLFFBQVEsT0FBUUgsR0FHekNwRixFQUFFd0YsaUJBQ0osTUFBT2xHLE1BS2I2RSxRQUFTLFNBQVVyUCxHQUNmLElBQUlYLEVBQVFDLEtBQU0yTyxFQUFNNU8sRUFBTXlPLFdBQzFCSSxFQUFPVCxFQUFPUyxLQU9keUMsRUFBcUJ6QyxFQUFLakcsaUJBQWlCakksRUFBT2lPLEVBQUk3TyxVQUFXNk8sRUFBSS9GLFlBTXpFLE9BTEsrRixFQUFJdEIsVUFBV3NCLEVBQUltQyx3QkFBMkJPLElBQy9DM1EsRUFBUWtPLEVBQUtsRixRQUFRaEosRUFBT0EsRUFBTXVCLE9BQVMwTSxFQUFJbUMsdUJBQXVCN08sU0FJdEUwTSxFQUFJM0IsUUFDQTJCLEVBQUloUCxRQUFZZ1AsRUFBSTNFLG9CQUFxQnRKLEVBQU11QixPQUcvQzBNLEVBQUlqTSxPQUFTaU0sRUFBSXpCLGVBQWV0TSxPQUFPRixHQUZ2Q2lPLEVBQUlqTSxPQUFTaU0sRUFBSWhQLE9BQVNnUCxFQUFJekIsZUFBZXRNLE9BQU9GLEdBQU9RLE1BQU15TixFQUFJaFAsT0FBT3NDLGFBSWhGbEMsRUFBTXVSLG9CQU1OM0MsRUFBSXRCLFNBR0FzQixFQUFJaFAsUUFBVWdQLEVBQUkzRSxtQkFBc0MsSUFBakJ0SixFQUFNdUIsT0FDN0MwTSxFQUFJak0sT0FBUyxHQUViaU0sRUFBSWpNLE9BQVNpTSxFQUFJMkIsaUJBQWlCMVAsT0FBT0YsUUFFN0NYLEVBQU11UixxQkFNTjNDLEVBQUloTixPQUNKakIsRUFBUWlPLEVBQUl2QixjQUFjM0ssaUJBQWlCL0IsSUFJM0NpTyxFQUFJL0osT0FDSmxFLEVBQVFpTyxFQUFJeEIsY0FBYy9ILGlCQUFpQjFFLElBSS9DQSxFQUFRa08sRUFBS3JGLGdCQUFnQjdJLEVBQU9pTyxFQUFJN08sVUFBVzZPLEVBQUkvRixZQUd2RGxJLEVBQVFrTyxFQUFLL0UsdUJBQXVCbkosRUFBT2lPLEVBQUloUCxPQUFRZ1AsRUFBSTdFLGFBQWM2RSxFQUFJak0sT0FBUWlNLEVBQUk3TyxVQUFXNk8sRUFBSS9GLFdBQVkrRixFQUFJM0Usa0JBQW1CMkUsRUFBSTlPLFdBQVk4TyxFQUFJL08sa0JBRy9KYyxFQUFRaU8sRUFBSXBCLFlBQWNxQixFQUFLbEcsTUFBTWhJLEVBQU8sVUFBWUEsRUFHeERBLEVBQVFpTyxFQUFJbkIsVUFBWTlNLEVBQU02USxjQUFnQjdRLEVBQzlDQSxFQUFRaU8sRUFBSWxCLFVBQVkvTSxFQUFNZ0QsY0FBZ0JoRCxFQUcxQ2lPLEVBQUloUCxTQUNBZ1AsRUFBSTlPLFdBQ0phLEdBQWdCaU8sRUFBSWhQLE9BRXBCZSxFQUFRaU8sRUFBSWhQLE9BQVNlLEVBS0EsSUFBckJpTyxFQUFJdkUsZUFDSnVFLEVBQUlqTSxPQUFTaEMsT0FDYlgsRUFBTXVSLHFCQU9WM0MsRUFBSS9CLFlBQ0o3TSxFQUFNeVIsNkJBQTZCOVEsR0FJdkNBLEVBQVFrTyxFQUFLbEYsUUFBUWhKLEVBQU9pTyxFQUFJWCxXQUdoQ1csRUFBSWpNLE9BQVNrTSxFQUFLekUsa0JBQ2R6SixFQUNBaU8sRUFBSS9NLE9BQVErTSxFQUFJdkUsYUFDaEJ1RSxFQUFJN08sVUFBVzZPLEVBQUkvRixXQUFZK0YsRUFBSXRFLHdCQUd2Q3RLLEVBQU11UixzQkFHVkUsNkJBQThCLFNBQVU5USxHQUNwQyxJQUVJK1EsRUFGYzlDLEVBQU4zTyxLQUFrQndPLFdBQzFCSSxFQUFPVCxFQUFPUyxLQUlkQSxFQUFLbEYsUUFBUWlGLEVBQUlqTSxPQUFRLEtBQU9rTSxFQUFLbEYsUUFBUWhKLEVBQU8sS0FJeEQrUSxFQUFpQnRELEVBQU9ySCxtQkFBbUJxQixRQUFRekgsRUFBT2lPLEVBQUk5QixzQkFFOUQ4QixFQUFJL00sT0FBUzZQLEVBQWU3UCxPQUM1QitNLEVBQUl2RSxhQUFldUUsRUFBSS9NLE9BQU9LLE9BQzlCME0sRUFBSVgsVUFBWVksRUFBS2hGLGFBQWErRSxFQUFJL00sUUFHbEMrTSxFQUFJN0IsaUJBQW1CMkUsRUFBZTdOLE9BQ3RDK0ssRUFBSTdCLGVBQWlCMkUsRUFBZTdOLEtBRXBDK0ssRUFBSTVCLHdCQUF3QjJFLEtBbkJwQjFSLEtBbUJnQzJPLEVBQUk3QixtQkFJcER3RSxpQkFBa0IsV0FDZCxJQUFJdlIsRUFBUUMsS0FDUjRPLEVBQU9ULEVBQU9TLEtBQ2RELEVBQU01TyxFQUFNeU8sV0FFaEIsR0FBS3pPLEVBQU1xTCxRQUFYLENBSUEsSUFBSXVHLEVBQVM1UixFQUFNcUwsUUFBUXdHLGFBQ3ZCM0ksRUFBV2xKLEVBQU1xTCxRQUFRMUssTUFDekJ3SSxFQUFXeUYsRUFBSWpNLE9BRW5CaVAsRUFBUy9DLEVBQUs3RixzQkFBc0I0SSxFQUFRMUksRUFBVUMsRUFBVXlGLEVBQUk3TyxVQUFXNk8sRUFBSS9GLFlBSS9FN0ksRUFBTW1NLFVBQ05qTixPQUFPNkwsWUFBVyxXQUNkL0ssRUFBTXFMLFFBQVExSyxNQUFRd0ksRUFDdEIwRixFQUFLekQsYUFBYXBMLEVBQU1xTCxRQUFTdUcsRUFBUWhELEVBQUkxRCxVQUFVLEdBQ3ZEbEwsRUFBTThSLHVCQUNQLElBS1A5UixFQUFNcUwsUUFBUTFLLE1BQVF3SSxFQUNsQnlGLEVBQUlyQixrQkFBaUJ2TixFQUFNcVEsa0JBQWtCMVAsTUFBUVgsRUFBTVUsZUFFL0RtTyxFQUFLekQsYUFBYXBMLEVBQU1xTCxRQUFTdUcsRUFBUWhELEVBQUkxRCxVQUFVLEdBQ3ZEbEwsRUFBTThSLHdCQUdWQSxtQkFBb0IsV0FDaEIsSUFBSTlSLEVBQVFDLEtBQ1IyTyxFQUFNNU8sRUFBTXlPLFdBRWhCRyxFQUFJVCxlQUFld0QsS0FBSzNSLEVBQU8sQ0FDM0IyTSxPQUFRLENBQ0pvRixLQUFNL1IsRUFBTXFMLFFBQVEwRyxLQUNwQnBSLE1BQU9pTyxFQUFJak0sT0FDWHFQLFNBQVVoUyxFQUFNVSxrQkFLNUJ1UixtQkFBb0IsU0FBVS9FLEdBQzFCLElBQUlsTixFQUFRQyxLQUFZRCxFQUFNeU8sV0FFMUJ2QixnQkFBa0JBLEVBQ3RCbE4sRUFBTTRQLHFCQUNONVAsRUFBTWdQLFlBR1ZrRCxZQUFhLFNBQVV2UixHQUNuQixJQUFJWCxFQUFRQyxLQUFNMk8sRUFBTTVPLEVBQU15TyxXQUU5QjlOLEVBQVFBLFFBQXdDQSxFQUFNVyxXQUFhLEdBRS9Ec04sRUFBSXRCLFVBQ0ozTSxFQUFRQSxFQUFNQyxRQUFRLElBQUtnTyxFQUFJdFAscUJBR25Dc1AsRUFBSW1DLHdCQUF5QixFQUU3Qi9RLEVBQU1xTCxRQUFRMUssTUFBUUEsRUFDdEJYLEVBQU1nUSxRQUFRclAsSUFHbEJELFlBQWEsV0FDVCxJQUNJa08sRUFEUTNPLEtBQ0l3TyxXQUNaSSxFQUFPVCxFQUFPUyxLQUNkbUQsRUFIUS9SLEtBR1NvTCxRQUFRMUssTUFZN0IsT0FWSWlPLEVBQUlqQixxQkFDSnFFLEVBQVduRCxFQUFLL0UsdUJBQXVCa0ksRUFBVXBELEVBQUloUCxPQUFRZ1AsRUFBSTdFLGFBQWM2RSxFQUFJak0sT0FBUWlNLEVBQUk3TyxVQUFXNk8sRUFBSS9GLFdBQVkrRixFQUFJM0Usa0JBQW1CMkUsRUFBSTlPLFdBQVk4TyxFQUFJL08sbUJBR3JLK08sRUFBSXRCLFFBQ09zQixFQUFJMkIsaUJBQWlCN1AsWUFBWXNSLEdBRWpDbkQsRUFBS3JGLGdCQUFnQndJLEVBQVVwRCxFQUFJN08sVUFBVzZPLEVBQUkvRixhQU1yRXRHLGlCQUFrQixXQUNkLElBQ0lxTSxFQURRM08sS0FDSXdPLFdBRWhCLE9BQU9HLEVBQUloTixLQUFPZ04sRUFBSXZCLGNBQWM5SyxtQkFBcUIsSUFHN0R1QyxpQkFBa0IsV0FDZCxJQUNJOEosRUFEUTNPLEtBQ0l3TyxXQUVoQixPQUFPRyxFQUFJL0osS0FBTytKLEVBQUl4QixjQUFjdEksbUJBQXFCLElBRzdEc0Ysa0JBQW1CLFdBQ2YsT0FBT25LLEtBQUtvTCxRQUFRMUssT0FHeEJ3UixRQUFTLFdBQ0wsSUFBSW5TLEVBQVFDLEtBRVpELEVBQU1xTCxRQUFRK0csb0JBQW9CLFFBQVNwUyxFQUFNK08sa0JBQ2pEL08sRUFBTXFMLFFBQVErRyxvQkFBb0IsVUFBV3BTLEVBQU1rUCxtQkFDbkRsUCxFQUFNcUwsUUFBUStHLG9CQUFvQixRQUFTcFMsRUFBTW9QLGlCQUNqRHBQLEVBQU1xTCxRQUFRK0csb0JBQW9CLE1BQU9wUyxFQUFNc1AsZUFDL0N0UCxFQUFNcUwsUUFBUStHLG9CQUFvQixPQUFRcFMsRUFBTXdQLGlCQUdwRGxPLFNBQVUsV0FDTixNQUFPLG9CQUlmOE0sRUFBTy9PLGlCQUFtQmtDLEVBQzFCNk0sRUFBTzVNLGNBQWdCaUQsRUFDdkIySixFQUFPMUosY0FBZ0J3QixFQUN2QmtJLEVBQU9qSSxlQUFpQlcsRUFDeEJzSCxFQUFPckgsbUJBQXFCeUIsRUFDNUI0RixFQUFPUyxLQUFPcEcsRUFDZDJGLEVBQU9NLGtCQUFvQmpDLEdBR0MsaUJBQW5CeE4sR0FBK0JBLEVBQWtCQSxFQUFpQkMsUUFBZ0IsT0FBSWtQLEVBSy9GLFFBRmVBLEcsOEhDN2dEWGlFLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxLQUNyRUMsRUFBcUMsSUFBZ0MsS0FFekVGLEVBQXdCL1AsS0FBSyxDQUFDa1EsRUFBT2xDLEdBQUksdzFCQUEwMUJnQyxFQUFxQyw0REFBOERDLEVBQXFDLE9BQVEsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsdUNBQXVDLE1BQVEsR0FBRyxTQUFXLDhmQUE4ZixlQUFpQixDQUFDLG80Q0FBbzRDLFdBQWEsTUFFNWdHLFcsb0hDUElGLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxLQUV6RUQsRUFBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSwwMkNBQTQyQ2dDLEVBQXFDLCtsSkFBZ21KLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGlEQUFpRCxNQUFRLEdBQUcsU0FBVyxta0RBQW1rRCxlQUFpQixDQUFDLDAzTEFBMDNMLFdBQWEsTUFFeGxiLFcsOEVDUElELEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCL1AsS0FBSyxDQUFDa1EsRUFBT2xDLEdBQUksMDJCQUEyMkIsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsaUZBQWlGLE1BQVEsR0FBRyxTQUFXLHdSQUF3UixlQUFpQixDQUFDLDgrQkFBOCtCLFdBQWEsTUFFM3pFLFcsNkVDSkkrQixFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLHloREFBMGhELEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDJEQUEyRCxNQUFRLEdBQUcsU0FBVyxpckJBQWlyQixlQUFpQixDQUFDLDZoRUFBNmhFLFdBQWEsTUFFNTVJLFcsOEVDSkkrQixFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLHdvREFBeW9ELEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDJEQUEyRCxNQUFRLEdBQUcsU0FBVyx5aEJBQXloQixlQUFpQixDQUFDLHlvREFBeW9ELFdBQWEsTUFFLzlILFcsbUhDRkkrQixFQUEwQixJQUE0QixLQUN0REMsRUFBcUMsSUFBZ0MsS0FFekVELEVBQXdCL1AsS0FBSyxDQUFDa1EsRUFBT2xDLEdBQUksc3FDQUF3cUNnQyxFQUFxQyxxdklBQXN2SSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxpREFBaUQsTUFBUSxHQUFHLFNBQVcseTBDQUF5MEMsZUFBaUIsQ0FBQyxpdUlBQWl1SSxXQUFhLE1BRXZwVyxXLDhFQ1BJRCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLDB3QkFBMndCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHFEQUFxRCxNQUFRLEdBQUcsU0FBVyw0VEFBNFQsZUFBaUIsQ0FBQyw2K0JBQTYrQixXQUFhLE1BRWx1RSxXLG9IQ0ZJK0IsRUFBMEIsSUFBNEIsS0FDdERDLEVBQXFDLElBQWdDLEtBRXpFRCxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLDZWQUErVmdDLEVBQXFDLDg1QkFBKzVCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHFEQUFxRCxNQUFRLEdBQUcsU0FBVyxpaUJBQWlpQixlQUFpQixDQUFDLG91REFBb3VELFdBQWEsTUFFdHRILFcsOEhDSklELEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxLQUNyRUMsRUFBcUMsSUFBZ0MsS0FFekVGLEVBQXdCL1AsS0FBSyxDQUFDa1EsRUFBT2xDLEdBQUksOFNBQWdUZ0MsRUFBcUMsdUlBQXlJQyxFQUFxQywyUUFBNFEsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMseUNBQXlDLE1BQVEsR0FBRyxTQUFXLHNZQUFzWSxlQUFpQixDQUFDLHloQ0FBeWhDLFdBQWEsTUFFaDFFLFcsOEVDVElGLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCL1AsS0FBSyxDQUFDa1EsRUFBT2xDLEdBQUksaVhBQWtYLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlDQUF5QyxNQUFRLEdBQUcsU0FBVywrTUFBK00sZUFBaUIsQ0FBQyxzaEJBQXNoQixXQUFhLE1BRXp2QyxXLDhFQ0pJK0IsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSw2VkFBOFYsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMscURBQXFELE1BQVEsR0FBRyxTQUFXLGdMQUFnTCxlQUFpQixDQUFDLHNlQUFzZSxXQUFhLE1BRWxxQyxXLG9IQ0ZJK0IsRUFBMEIsSUFBNEIsS0FDdERDLEVBQXFDLElBQWdDLEtBRXpFRCxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLHVrQ0FBeWtDZ0MsRUFBcUMscUZBQXNGLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHFEQUFxRCxNQUFRLEdBQUcsU0FBVyw4ZEFBOGQsZUFBaUIsQ0FBQyx1OUNBQXU5QyxXQUFhLE1BRXZ5RyxXLDhFQ1BJRCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLHVpQ0FBd2lDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHFEQUFxRCxNQUFRLEdBQUcsU0FBVyxrZUFBa2UsZUFBaUIsQ0FBQywrOENBQSs4QyxXQUFhLE1BRXZvRyxXLDhFQ0pJK0IsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSxrdURBQW11RCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx5REFBeUQsTUFBUSxHQUFHLFNBQVcsa3JCQUFrckIsZUFBaUIsQ0FBQyxrbEVBQWtsRSxXQUFhLE1BRXpwSixXLDhIQ0RJK0IsRUFBMEIsSUFBNEIsS0FDdERDLEVBQXFDLElBQWdDLEtBQ3JFQyxFQUFxQyxJQUFnQyxLQUV6RUYsRUFBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSw0S0FBOEtnQyxFQUFxQyxzSkFBd0pDLEVBQXFDLE9BQVEsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsaURBQWlELE1BQVEsR0FBRyxTQUFXLGdLQUFnSyxlQUFpQixDQUFDLHFkQUFxZCxXQUFhLE1BRXZyQyxXLDZFQ1RJRixFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3Qi9QLEtBQUssQ0FBQ2tRLEVBQU9sQyxHQUFJLHM1QkFBdTVCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlEQUF5RCxNQUFRLEdBQUcsU0FBVywwVkFBMFYsZUFBaUIsQ0FBQyw0aUNBQTRpQyxXQUFhLE1BRS84RSxXLDZFQ0pJK0IsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSxpTkFBa04sR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsdURBQXVELE1BQVEsR0FBRyxTQUFXLDZHQUE2RyxlQUFpQixDQUFDLGlTQUFpUyxXQUFhLE1BRWh4QixXLDhFQ0pJK0IsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSx1ekJBQXd6QixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw4QkFBOEIsTUFBUSxHQUFHLFNBQVcsd2RBQXdkLGVBQWlCLENBQUMscXNDQUFxc0MsV0FBYSxNQUU1bUYsVyw4RUNKSStCLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCL1AsS0FBSyxDQUFDa1EsRUFBT2xDLEdBQUksKzVZQUFnNlksR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsd0VBQXdFLE1BQVEsR0FBRyxTQUFXLDI3REFBMjdELGVBQWlCLENBQUMsaXpRQUFpelEsV0FBYSxNQUU3MHRCLFcsc29CQ21ESStCLEdBQTBCLElBQTRCLEtBQ3REQyxHQUFxQyxJQUFnQyxHQUNyRUMsR0FBcUMsSUFBZ0MsR0FDckVFLEdBQXFDLElBQWdDLEdBQ3JFQyxHQUFxQyxJQUFnQyxHQUNyRUMsR0FBcUMsSUFBZ0MsR0FDckVDLEdBQXFDLElBQWdDLEdBQ3JFQyxHQUFxQyxJQUFnQyxHQUNyRUMsR0FBcUMsSUFBZ0MsR0FDckVDLEdBQXFDLElBQWdDLEdBQ3JFQyxHQUFxQyxJQUFnQyxHQUNyRUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxHQUN0RUMsR0FBc0MsSUFBZ0MsR0FDdEVDLEdBQXNDLElBQWdDLEdBQ3RFQyxHQUFzQyxJQUFnQyxJQUN0RUMsR0FBc0MsSUFBZ0MsSUFDdEVDLEdBQXNDLElBQWdDLElBQ3RFQyxHQUFzQyxJQUFnQyxJQUN0RUMsR0FBc0MsSUFBZ0MsSUFDdEVDLEdBQXNDLElBQWdDLElBQ3RFQyxHQUFzQyxJQUFnQyxJQUN0RUMsR0FBc0MsSUFBZ0MsSUFDdEVDLEdBQXNDLElBQWdDLElBRTFFdkQsR0FBd0IvUCxLQUFLLENBQUNrUSxFQUFPbEMsR0FBSSxvRkFBc0ZnQyxHQUFxQywwQkFBNEJDLEdBQXFDLGdDQUFrQ0UsR0FBcUMsMEtBQTRLQyxHQUFxQyxpQ0FBbUNDLEdBQXFDLHlCQUEyQkMsR0FBcUMseUtBQTJLQyxHQUFxQywwQkFBNEJDLEdBQXFDLGdDQUFrQ0MsR0FBcUMseUtBQTJLQyxHQUFxQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MsMEtBQTRLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQyxpQ0FBbUNDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MsNEtBQThLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MsMEtBQTRLQyxHQUFzQyxpQ0FBbUNDLEdBQXNDLGdDQUFrQ0MsR0FBc0MsMEtBQTRLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQyxpQ0FBbUNDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MsNEtBQThLQyxHQUFzQyxpQ0FBbUNDLEdBQXNDLHlCQUEyQkMsR0FBc0MseUtBQTJLQyxHQUFzQyxpQ0FBbUNDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MseUtBQTJLQyxHQUFzQywwQkFBNEJDLEdBQXNDLGdDQUFrQ0MsR0FBc0MsMEdBQTJHLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGtDQUFrQyxNQUFRLEdBQUcsU0FBVyx3MkNBQXcyQyxlQUFpQixDQUFDLCsyS0FBKzJLLFdBQWEsTUFFMWdhLGEsc0JDNUdBcEQsRUFBT3FELFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS3pVLFNBQVcsV0FDZCxPQUFPckIsS0FBSzhCLEtBQUksU0FBVWlVLEdBQ3hCLElBQUlDLEVBQVVILEVBQXVCRSxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVTdOLE9BQU82TixFQUFLLEdBQUksTUFBTTdOLE9BQU84TixFQUFTLEtBR2xEQSxLQUNOQyxLQUFLLEtBS1ZILEVBQUt0UCxFQUFJLFNBQVUwUCxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJNVAsRUFBSSxFQUFHQSxFQUFJeEcsS0FBS2lDLE9BQVF1RSxJQUFLLENBRXBDLElBQUk2SixFQUFLclEsS0FBS3dHLEdBQUcsR0FFUCxNQUFONkosSUFDRmdHLEVBQXVCaEcsSUFBTSxHQUtuQyxJQUFLLElBQUlpRyxFQUFLLEVBQUdBLEVBQUtKLEVBQVFqVSxPQUFRcVUsSUFBTSxDQUMxQyxJQUFJUCxFQUFPLEdBQUc3TixPQUFPZ08sRUFBUUksSUFFekJGLEdBQVVDLEVBQXVCTixFQUFLLE1BS3RDSSxJQUNHSixFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHN04sT0FBT2lPLEVBQVksU0FBU2pPLE9BQU82TixFQUFLLElBRnJEQSxFQUFLLEdBQUtJLEdBTWRMLEVBQUt6VCxLQUFLMFQsTUFJUEQsSSxzQkN4RFQsU0FBU1MsRUFBa0JDLEVBQUszTCxJQUFrQixNQUFQQSxHQUFlQSxFQUFNMkwsRUFBSXZVLFVBQVE0SSxFQUFNMkwsRUFBSXZVLFFBQVEsSUFBSyxJQUFJdUUsRUFBSSxFQUFHaVEsRUFBTyxJQUFJQyxNQUFNN0wsR0FBTXJFLEVBQUlxRSxFQUFLckUsSUFBT2lRLEVBQUtqUSxHQUFLZ1EsRUFBSWhRLEdBQU0sT0FBT2lRLEVBTWhMbEUsRUFBT3FELFFBQVUsU0FBZ0NHLEdBQy9DLElBYnNCUyxFQUFLaFEsRUFhdkJtUSxHQWJ1Qm5RLEVBYU0sRUFIbkMsU0FBeUJnUSxHQUFPLEdBQUlFLE1BQU1FLFFBQVFKLEdBQU0sT0FBT0EsRUFWdEJLLENBQWpCTCxFQWFLVCxJQUw3QixTQUErQlMsRUFBS2hRLEdBQUssSUFBSThQLEVBQUtFLElBQTBCLG9CQUFYTSxRQUEwQk4sRUFBSU0sT0FBT0MsV0FBYVAsRUFBSSxlQUFnQixHQUFVLE1BQU5GLEVBQUosQ0FBd0IsSUFBa0RVLEVBQUlDLEVBQWxEQyxFQUFPLEdBQVFDLEdBQUssRUFBVUMsR0FBSyxFQUFtQixJQUFNLElBQUtkLEVBQUtBLEVBQUc1RSxLQUFLOEUsS0FBUVcsR0FBTUgsRUFBS1YsRUFBR2UsUUFBUUMsUUFBb0JKLEVBQUs3VSxLQUFLMlUsRUFBR3RXLFFBQVk4RixHQUFLMFEsRUFBS2pWLFNBQVd1RSxHQUEzRDJRLEdBQUssSUFBb0UsTUFBT0ksR0FBT0gsR0FBSyxFQUFNSCxFQUFLTSxFQUFPLFFBQVUsSUFBV0osR0FBc0IsTUFBaEJiLEVBQVcsUUFBV0EsRUFBVyxTQUFPLFFBQVUsR0FBSWMsRUFBSSxNQUFNSCxHQUFRLE9BQU9DLEdBUjdhTSxDQUFzQmhCLEVBQUtoUSxJQUk1RixTQUFxQ2lSLEVBQUdDLEdBQVUsR0FBS0QsRUFBTCxDQUFnQixHQUFpQixpQkFBTkEsRUFBZ0IsT0FBT2xCLEVBQWtCa0IsRUFBR0MsR0FBUyxJQUFJQyxFQUFJQyxPQUFPcFgsVUFBVWEsU0FBU3FRLEtBQUsrRixHQUFHdlcsTUFBTSxHQUFJLEdBQWlFLE1BQW5ELFdBQU55VyxHQUFrQkYsRUFBRUksY0FBYUYsRUFBSUYsRUFBRUksWUFBWS9GLE1BQWdCLFFBQU42RixHQUFxQixRQUFOQSxFQUFvQmpCLE1BQU1vQixLQUFLTCxHQUFjLGNBQU5FLEdBQXFCLDJDQUEyQy9RLEtBQUsrUSxHQUFXcEIsRUFBa0JrQixFQUFHQyxRQUF6RyxHQUozTUssQ0FBNEJ2QixFQUFLaFEsSUFFbkksV0FBOEIsTUFBTSxJQUFJd1IsVUFBVSw2SUFGdUZDLElBY25JakMsRUFBVVcsRUFBTSxHQUNoQnVCLEVBQWF2QixFQUFNLEdBRXZCLEdBQW9CLG1CQUFUd0IsS0FBcUIsQ0FFOUIsSUFBSUMsRUFBU0QsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTixNQUN6RE8sRUFBTywrREFBK0R2USxPQUFPa1EsR0FDN0VNLEVBQWdCLE9BQU94USxPQUFPdVEsRUFBTSxPQUNwQ0UsRUFBYVQsRUFBV1UsUUFBUTlXLEtBQUksU0FBVStXLEdBQ2hELE1BQU8saUJBQWlCM1EsT0FBT2dRLEVBQVdZLFlBQWMsSUFBSTVRLE9BQU8yUSxFQUFRLFVBRTdFLE1BQU8sQ0FBQzdDLEdBQVM5TixPQUFPeVEsR0FBWXpRLE9BQU8sQ0FBQ3dRLElBQWdCekMsS0FBSyxNQUduRSxNQUFPLENBQUNELEdBQVNDLEtBQUssUSxzQkM1QnhCMUQsRUFBT3FELFFBQVUsU0FBVW1ELEVBQUtDLEdBUzlCLE9BUktBLElBRUhBLEVBQVUsSUFNTyxpQkFGbkJELEVBQU1BLEdBQU9BLEVBQUlFLFdBQWFGLEVBQUlHLFFBQVVILEdBR25DQSxHQUlMLGVBQWVuUyxLQUFLbVMsS0FFdEJBLEVBQU1BLEVBQUk3WCxNQUFNLEdBQUksSUFHbEI4WCxFQUFRRyxPQUVWSixHQUFPQyxFQUFRRyxNQUtiLGNBQWN2UyxLQUFLbVMsSUFBUUMsRUFBUUksV0FDOUIsSUFBS2xSLE9BQU82USxFQUFJcFksUUFBUSxLQUFNLE9BQU9BLFFBQVEsTUFBTyxPQUFRLEtBRzlEb1ksSyw2Q0NoQ1QsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw0Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3Qyw2Q0NBekMsUUFBZSxJQUEwQix3QyxtQkNBekMsT0FhQSxTQUFZTSxFQUFRQyxHQUVuQixhQUU2RCxpQkFBbkIvRyxFQUFPcUQsUUFTaERyRCxFQUFPcUQsUUFBVXlELEVBQU9wTyxTQUN2QnFPLEVBQVNELEdBQVEsR0FDakIsU0FBVUUsR0FDVCxJQUFNQSxFQUFFdE8sU0FDUCxNQUFNLElBQUlzRCxNQUFPLDRDQUVsQixPQUFPK0ssRUFBU0MsSUFHbEJELEVBQVNELEdBdEJYLENBMEJ1QixvQkFBWHBhLE9BQXlCQSxPQUFTZSxNQUFNLFNBQVVmLEVBQVF1YSxHQU10RSxhQUVBLElBQUloRCxFQUFNLEdBRU5pRCxFQUFXN0IsT0FBTzhCLGVBRWxCeFksRUFBUXNWLEVBQUl0VixNQUVaeVksRUFBT25ELEVBQUltRCxLQUFPLFNBQVVDLEdBQy9CLE9BQU9wRCxFQUFJbUQsS0FBS2pJLEtBQU1rSSxJQUNuQixTQUFVQSxHQUNiLE9BQU9wRCxFQUFJdE8sT0FBTzJSLE1BQU8sR0FBSUQsSUFJMUJ2WCxFQUFPbVUsRUFBSW5VLEtBRVhsQixFQUFVcVYsRUFBSXJWLFFBRWQyWSxFQUFhLEdBRWJ6WSxFQUFXeVksRUFBV3pZLFNBRXRCMFksRUFBU0QsRUFBV0UsZUFFcEJDLEVBQWFGLEVBQU8xWSxTQUVwQjZZLEVBQXVCRCxFQUFXdkksS0FBTWtHLFFBRXhDdUMsRUFBVSxHQUVWQyxFQUFhLFNBQXFCQyxHQVNwQyxNQUFzQixtQkFBUkEsR0FBOEMsaUJBQWpCQSxFQUFJQyxVQUMxQixtQkFBYkQsRUFBSXRFLE1BSVZ3RSxFQUFXLFNBQW1CRixHQUNoQyxPQUFjLE1BQVBBLEdBQWVBLElBQVFBLEVBQUlwYixRQUloQ2dNLEVBQVdoTSxFQUFPZ00sU0FJakJ1UCxFQUE0QixDQUMvQjVXLE1BQU0sRUFDTjZXLEtBQUssRUFDTEMsT0FBTyxFQUNQQyxVQUFVLEdBR1gsU0FBU0MsRUFBU0MsRUFBTUMsRUFBTXhQLEdBRzdCLElBQUk5RSxFQUFHa0UsRUFDTnFRLEdBSER6UCxFQUFNQSxHQUFPTCxHQUdDK1AsY0FBZSxVQUc3QixHQURBRCxFQUFPRSxLQUFPSixFQUNUQyxFQUNKLElBQU10VSxLQUFLZ1UsR0FZVjlQLEVBQU1vUSxFQUFNdFUsSUFBT3NVLEVBQUtJLGNBQWdCSixFQUFLSSxhQUFjMVUsS0FFMUR1VSxFQUFPSSxhQUFjM1UsRUFBR2tFLEdBSTNCWSxFQUFJOFAsS0FBS0MsWUFBYU4sR0FBUzdLLFdBQVdvTCxZQUFhUCxHQUl6RCxTQUFTUSxFQUFRbEIsR0FDaEIsT0FBWSxNQUFQQSxFQUNHQSxFQUFNLEdBSVEsaUJBQVJBLEdBQW1DLG1CQUFSQSxFQUN4Q1AsRUFBWXpZLEVBQVNxUSxLQUFNMkksS0FBVyxnQkFDL0JBLEVBUVQsSUFDQ21CLEVBQVUsUUFHVkMsRUFBUyxTQUFVQyxFQUFVQyxHQUk1QixPQUFPLElBQUlGLEVBQU9HLEdBQUdsTixLQUFNZ04sRUFBVUMsSUEwVnZDLFNBQVNFLEVBQWF4QixHQU1yQixJQUFJcFksSUFBV29ZLEdBQU8sV0FBWUEsR0FBT0EsRUFBSXBZLE9BQzVDMkIsRUFBTzJYLEVBQVFsQixHQUVoQixPQUFLRCxFQUFZQyxLQUFTRSxFQUFVRixLQUlwQixVQUFUelcsR0FBK0IsSUFBWDNCLEdBQ1IsaUJBQVhBLEdBQXVCQSxFQUFTLEdBQU9BLEVBQVMsS0FBT29ZLEdBcldoRW9CLEVBQU9HLEdBQUtILEVBQU9qYixVQUFZLENBRzlCc2IsT0FBUU4sRUFFUjNELFlBQWE0RCxFQUdieFosT0FBUSxFQUVSOFosUUFBUyxXQUNSLE9BQU83YSxFQUFNd1EsS0FBTTFSLE9BS3BCZ2MsSUFBSyxTQUFVQyxHQUdkLE9BQVksTUFBUEEsRUFDRy9hLEVBQU13USxLQUFNMVIsTUFJYmljLEVBQU0sRUFBSWpjLEtBQU1pYyxFQUFNamMsS0FBS2lDLFFBQVdqQyxLQUFNaWMsSUFLcERDLFVBQVcsU0FBVUMsR0FHcEIsSUFBSUMsRUFBTVgsRUFBT1ksTUFBT3JjLEtBQUs2WCxjQUFlc0UsR0FNNUMsT0FIQUMsRUFBSUUsV0FBYXRjLEtBR1ZvYyxHQUlSRyxLQUFNLFNBQVVDLEdBQ2YsT0FBT2YsRUFBT2MsS0FBTXZjLEtBQU13YyxJQUczQjFhLElBQUssU0FBVTBhLEdBQ2QsT0FBT3hjLEtBQUtrYyxVQUFXVCxFQUFPM1osSUFBSzlCLE1BQU0sU0FBVXljLEVBQU1qVyxHQUN4RCxPQUFPZ1csRUFBUzlLLEtBQU0rSyxFQUFNalcsRUFBR2lXLFFBSWpDdmIsTUFBTyxXQUNOLE9BQU9sQixLQUFLa2MsVUFBV2hiLEVBQU0yWSxNQUFPN1osS0FBTTBjLGFBRzNDQyxNQUFPLFdBQ04sT0FBTzNjLEtBQUs0YyxHQUFJLElBR2pCQyxLQUFNLFdBQ0wsT0FBTzdjLEtBQUs0YyxJQUFLLElBR2xCRSxLQUFNLFdBQ0wsT0FBTzljLEtBQUtrYyxVQUFXVCxFQUFPc0IsS0FBTS9jLE1BQU0sU0FBVWdkLEVBQU94VyxHQUMxRCxPQUFTQSxFQUFJLEdBQU0sT0FJckJ5VyxJQUFLLFdBQ0osT0FBT2pkLEtBQUtrYyxVQUFXVCxFQUFPc0IsS0FBTS9jLE1BQU0sU0FBVWdkLEVBQU94VyxHQUMxRCxPQUFPQSxFQUFJLE9BSWJvVyxHQUFJLFNBQVVwVyxHQUNiLElBQUlxRSxFQUFNN0ssS0FBS2lDLE9BQ2RpYixHQUFLMVcsR0FBTUEsRUFBSSxFQUFJcUUsRUFBTSxHQUMxQixPQUFPN0ssS0FBS2tjLFVBQVdnQixHQUFLLEdBQUtBLEVBQUlyUyxFQUFNLENBQUU3SyxLQUFNa2QsSUFBUSxLQUc1REMsSUFBSyxXQUNKLE9BQU9uZCxLQUFLc2MsWUFBY3RjLEtBQUs2WCxlQUtoQ3hWLEtBQU1BLEVBQ04rYSxLQUFNNUcsRUFBSTRHLEtBQ1ZDLE9BQVE3RyxFQUFJNkcsUUFHYjVCLEVBQU82QixPQUFTN0IsRUFBT0csR0FBRzBCLE9BQVMsV0FDbEMsSUFBSXRFLEVBQVNsSCxFQUFNMkksRUFBSzhDLEVBQU1DLEVBQWFDLEVBQzFDL1EsRUFBU2dRLFVBQVcsSUFBTyxHQUMzQmxXLEVBQUksRUFDSnZFLEVBQVN5YSxVQUFVemEsT0FDbkJ5YixHQUFPLEVBc0JSLElBbkJ1QixrQkFBWGhSLElBQ1hnUixFQUFPaFIsRUFHUEEsRUFBU2dRLFVBQVdsVyxJQUFPLEdBQzNCQSxLQUlzQixpQkFBWGtHLEdBQXdCME4sRUFBWTFOLEtBQy9DQSxFQUFTLElBSUxsRyxJQUFNdkUsSUFDVnlLLEVBQVMxTSxLQUNUd0csS0FHT0EsRUFBSXZFLEVBQVF1RSxJQUduQixHQUFxQyxPQUE5QndTLEVBQVUwRCxVQUFXbFcsSUFHM0IsSUFBTXNMLEtBQVFrSCxFQUNidUUsRUFBT3ZFLEVBQVNsSCxHQUlGLGNBQVRBLEdBQXdCcEYsSUFBVzZRLElBS25DRyxHQUFRSCxJQUFVOUIsRUFBT2tDLGNBQWVKLEtBQzFDQyxFQUFjOUcsTUFBTUUsUUFBUzJHLE1BQy9COUMsRUFBTS9OLEVBQVFvRixHQUliMkwsRUFESUQsSUFBZ0I5RyxNQUFNRSxRQUFTNkQsR0FDM0IsR0FDSStDLEdBQWdCL0IsRUFBT2tDLGNBQWVsRCxHQUcxQ0EsRUFGQSxHQUlUK0MsR0FBYyxFQUdkOVEsRUFBUW9GLEdBQVMySixFQUFPNkIsT0FBUUksRUFBTUQsRUFBT0YsU0FHekIxUCxJQUFUMFAsSUFDWDdRLEVBQVFvRixHQUFTeUwsSUFPckIsT0FBTzdRLEdBR1IrTyxFQUFPNkIsT0FBUSxDQUdkTSxRQUFTLFVBQWFwQyxFQUFVclgsS0FBSzBaLFVBQVdsZCxRQUFTLE1BQU8sSUFHaEVtZCxTQUFTLEVBRVRDLE1BQU8sU0FBVUMsR0FDaEIsTUFBTSxJQUFJelAsTUFBT3lQLElBR2xCdlYsS0FBTSxhQUVOa1YsY0FBZSxTQUFVdEQsR0FDeEIsSUFBSTRELEVBQU9DLEVBSVgsU0FBTTdELEdBQWdDLG9CQUF6QmhaLEVBQVNxUSxLQUFNMkksS0FJNUI0RCxFQUFReEUsRUFBVVksTUFTSyxtQkFEdkI2RCxFQUFPbkUsRUFBT3JJLEtBQU11TSxFQUFPLGdCQUFtQkEsRUFBTXBHLGNBQ2ZvQyxFQUFXdkksS0FBTXdNLEtBQVdoRSxLQUdsRWlFLGNBQWUsU0FBVTlELEdBQ3hCLElBQUl2SSxFQUVKLElBQU1BLEtBQVF1SSxFQUNiLE9BQU8sRUFFUixPQUFPLEdBS1IrRCxXQUFZLFNBQVV2RCxFQUFNN0IsRUFBUzFOLEdBQ3BDc1AsRUFBU0MsRUFBTSxDQUFFSCxNQUFPMUIsR0FBV0EsRUFBUTBCLE9BQVNwUCxJQUdyRGlSLEtBQU0sU0FBVWxDLEVBQUttQyxHQUNwQixJQUFJdmEsRUFBUXVFLEVBQUksRUFFaEIsR0FBS3FWLEVBQWF4QixHQUVqQixJQURBcFksRUFBU29ZLEVBQUlwWSxPQUNMdUUsRUFBSXZFLElBQ3FDLElBQTNDdWEsRUFBUzlLLEtBQU0ySSxFQUFLN1QsR0FBS0EsRUFBRzZULEVBQUs3VCxJQURuQkEsVUFNcEIsSUFBTUEsS0FBSzZULEVBQ1YsSUFBZ0QsSUFBM0NtQyxFQUFTOUssS0FBTTJJLEVBQUs3VCxHQUFLQSxFQUFHNlQsRUFBSzdULElBQ3JDLE1BS0gsT0FBTzZULEdBSVJnRSxVQUFXLFNBQVU3SCxFQUFLOEgsR0FDekIsSUFBSWxDLEVBQU1rQyxHQUFXLEdBYXJCLE9BWFksTUFBUDlILElBQ0NxRixFQUFhakUsT0FBUXBCLElBQ3pCaUYsRUFBT1ksTUFBT0QsRUFDRSxpQkFBUjVGLEVBQ04sQ0FBRUEsR0FBUUEsR0FHWm5VLEVBQUtxUCxLQUFNMEssRUFBSzVGLElBSVg0RixHQUdSbUMsUUFBUyxTQUFVOUIsRUFBTWpHLEVBQUtoUSxHQUM3QixPQUFjLE1BQVBnUSxHQUFlLEVBQUlyVixFQUFRdVEsS0FBTThFLEVBQUtpRyxFQUFNalcsSUFLcEQ2VixNQUFPLFNBQVVNLEVBQU9wWCxHQUt2QixJQUpBLElBQUlzRixHQUFPdEYsRUFBT3RELE9BQ2pCaWIsRUFBSSxFQUNKMVcsRUFBSW1XLEVBQU0xYSxPQUVIaWIsRUFBSXJTLEVBQUtxUyxJQUNoQlAsRUFBT25XLEtBQVFqQixFQUFRMlgsR0FLeEIsT0FGQVAsRUFBTTFhLE9BQVN1RSxFQUVSbVcsR0FHUkksS0FBTSxTQUFVWixFQUFPSyxFQUFVZ0MsR0FTaEMsSUFSQSxJQUNDQyxFQUFVLEdBQ1ZqWSxFQUFJLEVBQ0p2RSxFQUFTa2EsRUFBTWxhLE9BQ2Z5YyxHQUFrQkYsRUFJWGhZLEVBQUl2RSxFQUFRdUUsS0FDQWdXLEVBQVVMLEVBQU8zVixHQUFLQSxLQUNoQmtZLEdBQ3hCRCxFQUFRcGMsS0FBTThaLEVBQU8zVixJQUl2QixPQUFPaVksR0FJUjNjLElBQUssU0FBVXFhLEVBQU9LLEVBQVVtQyxHQUMvQixJQUFJMWMsRUFBUXZCLEVBQ1g4RixFQUFJLEVBQ0o0VixFQUFNLEdBR1AsR0FBS1AsRUFBYU0sR0FFakIsSUFEQWxhLEVBQVNrYSxFQUFNbGEsT0FDUHVFLEVBQUl2RSxFQUFRdUUsSUFHTCxPQUZkOUYsRUFBUThiLEVBQVVMLEVBQU8zVixHQUFLQSxFQUFHbVksS0FHaEN2QyxFQUFJL1osS0FBTTNCLFFBTVosSUFBTThGLEtBQUsyVixFQUdJLE9BRmR6YixFQUFROGIsRUFBVUwsRUFBTzNWLEdBQUtBLEVBQUdtWSxLQUdoQ3ZDLEVBQUkvWixLQUFNM0IsR0FNYixPQUFPaVosRUFBTXlDLElBSWR3QyxLQUFNLEVBSU56RSxRQUFTQSxJQUdhLG1CQUFYckQsU0FDWDJFLEVBQU9HLEdBQUk5RSxPQUFPQyxVQUFhUCxFQUFLTSxPQUFPQyxXQUk1QzBFLEVBQU9jLEtBQU0sdUVBQXVFbmIsTUFBTyxNQUMxRixTQUFVa1YsRUFBSXhFLEdBQ2JnSSxFQUFZLFdBQWFoSSxFQUFPLEtBQVFBLEVBQUtwTyxpQkFtQi9DLElBQUltYixFQVdKLFNBQVk1ZixHQUNaLElBQUl1SCxFQUNIMlQsRUFDQTJFLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0F2VCxFQUNBd1QsRUFDQUMsRUFDQUMsRUFHQUMsRUFDQXJVLEVBQ0FzVSxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBakIsRUFDQWtCLEVBR0EvQixFQUFVLFNBQVcsRUFBSSxJQUFJZ0MsS0FDN0JDLEVBQWU1Z0IsRUFBT2dNLFNBQ3RCNlUsRUFBVSxFQUNWeEksRUFBTyxFQUNQeUksRUFBYUMsS0FDYkMsRUFBYUQsS0FDYkUsRUFBZ0JGLEtBQ2hCRyxFQUF5QkgsS0FDekJJLEVBQVksU0FBVUMsRUFBR0MsR0FJeEIsT0FIS0QsSUFBTUMsSUFDVmpCLEdBQWUsR0FFVCxHQUlSdEYsRUFBUyxHQUFPQyxlQUNoQnhELEVBQU0sR0FDTitKLEVBQU0vSixFQUFJK0osSUFDVkMsRUFBYWhLLEVBQUluVSxLQUNqQkEsRUFBT21VLEVBQUluVSxLQUNYbkIsRUFBUXNWLEVBQUl0VixNQUlaQyxFQUFVLFNBQVUyVSxFQUFNMkcsR0FHekIsSUFGQSxJQUFJalcsRUFBSSxFQUNQcUUsRUFBTWlMLEVBQUs3VCxPQUNKdUUsRUFBSXFFLEVBQUtyRSxJQUNoQixHQUFLc1AsRUFBTXRQLEtBQVFpVyxFQUNsQixPQUFPalcsRUFHVCxPQUFRLEdBR1RpYSxFQUFXLDZIQU1YQyxFQUFhLHNCQUdiQyxFQUFhLG9GQUliQyxFQUFhLDJCQUE0QkQsRUFBYSxPQUFTRCxFQUc5RCxnQkFBa0JBLEVBSWxCLDJEQUE2REMsRUFBYSxPQUMxRUQsRUFBYSxPQUVkRyxFQUFVLEtBQU9GLEVBQVAsd0ZBT29CQyxFQVBwQixlQWNWRSxFQUFjLElBQUkxZ0IsT0FBUXNnQixFQUFhLElBQUssS0FDNUNLLEVBQVEsSUFBSTNnQixPQUFRLHVFQUNBLEtBRXBCNGdCLEVBQVMsSUFBSTVnQixPQUFRLDhDQUNyQjZnQixFQUFlLElBQUk3Z0IsT0FBUSx3RUFFM0I4Z0IsRUFBVyxJQUFJOWdCLE9BQVFzZ0IsRUFBYSxNQUVwQ1MsRUFBVSxJQUFJL2dCLE9BQVF5Z0IsR0FDdEJPLEVBQWMsSUFBSWhoQixPQUFRLElBQU11Z0IsRUFBYSxLQUU3Q1UsRUFBWSxDQUNYLEdBQU0sSUFBSWpoQixPQUFRLE1BQVF1Z0IsRUFBYSxLQUN2QyxNQUFTLElBQUl2Z0IsT0FBUSxRQUFVdWdCLEVBQWEsS0FDNUMsSUFBTyxJQUFJdmdCLE9BQVEsS0FBT3VnQixFQUFhLFNBQ3ZDLEtBQVEsSUFBSXZnQixPQUFRLElBQU13Z0IsR0FDMUIsT0FBVSxJQUFJeGdCLE9BQVEsSUFBTXlnQixHQUM1QixNQUFTLElBQUl6Z0IsT0FBUSw0TEFFK0IsS0FDcEQsS0FBUSxJQUFJQSxPQUFRLE9BQVNxZ0IsRUFBVyxLQUFNLEtBSTlDLGFBQWdCLElBQUlyZ0IsT0FBUSw2SUFFMkIsTUFHeERraEIsRUFBUSxTQUNSQyxFQUFVLHNDQUNWQyxFQUFVLFNBRVZDLEVBQVUseUJBR1ZDLEVBQWEsbUNBRWJDLEdBQVcsT0FJWEMsR0FBWSxJQUFJeGhCLE9BQVEsOERBQThELEtBQ3RGeWhCLEdBQVksU0FBVUMsRUFBUUMsR0FDN0IsSUFBSUMsRUFBTyxLQUFPRixFQUFPNWdCLE1BQU8sR0FBTSxNQUV0QyxPQUFPNmdCLElBU05DLEVBQU8sRUFDTmpkLE9BQU9rZCxhQUFjRCxFQUFPLE9BQzVCamQsT0FBT2tkLGFBQWNELEdBQVEsR0FBSyxNQUFlLEtBQVBBLEVBQWUsU0FLNURFLEdBQWEsc0RBQ2JDLEdBQWEsU0FBVUMsRUFBSUMsR0FDMUIsT0FBS0EsRUFHUSxPQUFQRCxFQUNHLElBSURBLEVBQUdsaEIsTUFBTyxHQUFJLEdBQU0sS0FDMUJraEIsRUFBR0UsV0FBWUYsRUFBR25nQixPQUFTLEdBQUlaLFNBQVUsSUFBTyxJQUkzQyxLQUFPK2dCLEdBT2ZHLEdBQWdCLFdBQ2ZqRCxLQUdEa0QsR0FBcUJDLElBQ3BCLFNBQVVoRyxHQUNULE9BQXlCLElBQWxCQSxFQUFLaUcsVUFBcUQsYUFBaENqRyxFQUFLa0csU0FBU2pmLGdCQUVoRCxDQUFFa2YsSUFBSyxhQUFjdkwsS0FBTSxXQUk3QixJQUNDaFYsRUFBS3dYLE1BQ0ZyRCxFQUFNdFYsRUFBTXdRLEtBQU1tTyxFQUFhZ0QsWUFDakNoRCxFQUFhZ0QsWUFNZHJNLEVBQUtxSixFQUFhZ0QsV0FBVzVnQixRQUFTcVksU0FDckMsTUFBUTFPLEdBQ1R2SixFQUFPLENBQUV3WCxNQUFPckQsRUFBSXZVLE9BR25CLFNBQVV5SyxFQUFRb1csR0FDakJ0QyxFQUFXM0csTUFBT25OLEVBQVF4TCxFQUFNd1EsS0FBTW9SLEtBS3ZDLFNBQVVwVyxFQUFRb1csR0FLakIsSUFKQSxJQUFJNUYsRUFBSXhRLEVBQU96SyxPQUNkdUUsRUFBSSxFQUdLa0csRUFBUXdRLEtBQVE0RixFQUFLdGMsT0FDL0JrRyxFQUFPekssT0FBU2liLEVBQUksSUFLdkIsU0FBUzJCLEdBQVFuRCxFQUFVQyxFQUFTMkMsRUFBU3lFLEdBQzVDLElBQUlDLEVBQUd4YyxFQUFHaVcsRUFBTXdHLEVBQUtDLEVBQU9DLEVBQVFDLEVBQ25DQyxFQUFhMUgsR0FBV0EsRUFBUTJILGNBR2hDaEosRUFBV3FCLEVBQVVBLEVBQVFyQixTQUFXLEVBS3pDLEdBSEFnRSxFQUFVQSxHQUFXLEdBR0ksaUJBQWI1QyxJQUEwQkEsR0FDeEIsSUFBYnBCLEdBQStCLElBQWJBLEdBQStCLEtBQWJBLEVBRXBDLE9BQU9nRSxFQUlSLElBQU15RSxJQUNMekQsRUFBYTNELEdBQ2JBLEVBQVVBLEdBQVcxUSxFQUVoQnVVLEdBQWlCLENBSXJCLEdBQWtCLEtBQWJsRixJQUFxQjRJLEVBQVF4QixFQUFXNkIsS0FBTTdILElBR2xELEdBQU9zSCxFQUFJRSxFQUFPLElBR2pCLEdBQWtCLElBQWI1SSxFQUFpQixDQUNyQixLQUFPbUMsRUFBT2QsRUFBUTZILGVBQWdCUixJQVVyQyxPQUFPMUUsRUFMUCxHQUFLN0IsRUFBS3BNLEtBQU8yUyxFQUVoQixPQURBMUUsRUFBUWpjLEtBQU1vYSxHQUNQNkIsT0FZVCxHQUFLK0UsSUFBZ0I1RyxFQUFPNEcsRUFBV0csZUFBZ0JSLEtBQ3REckQsRUFBVWhFLEVBQVNjLElBQ25CQSxFQUFLcE0sS0FBTzJTLEVBR1osT0FEQTFFLEVBQVFqYyxLQUFNb2EsR0FDUDZCLE1BS0gsSUFBSzRFLEVBQU8sR0FFbEIsT0FEQTdnQixFQUFLd1gsTUFBT3lFLEVBQVMzQyxFQUFROEgscUJBQXNCL0gsSUFDNUM0QyxFQUdELElBQU8wRSxFQUFJRSxFQUFPLEtBQVMvSSxFQUFRdUosd0JBQ3pDL0gsRUFBUStILHVCQUdSLE9BREFyaEIsRUFBS3dYLE1BQU95RSxFQUFTM0MsRUFBUStILHVCQUF3QlYsSUFDOUMxRSxFQUtULEdBQUtuRSxFQUFRd0osTUFDWHhELEVBQXdCekUsRUFBVyxRQUNqQytELElBQWNBLEVBQVU3WSxLQUFNOFUsTUFJbEIsSUFBYnBCLEdBQXFELFdBQW5DcUIsRUFBUWdILFNBQVNqZixlQUErQixDQVlwRSxHQVZBMGYsRUFBYzFILEVBQ2QySCxFQUFhMUgsRUFTSyxJQUFickIsSUFDRjRHLEVBQVN0YSxLQUFNOFUsSUFBY3VGLEVBQWFyYSxLQUFNOFUsSUFBZSxDQXFCakUsS0FsQkEySCxFQUFhMUIsR0FBUy9hLEtBQU04VSxJQUFja0ksR0FBYWpJLEVBQVF6TCxhQUM5RHlMLEtBSW1CQSxHQUFZeEIsRUFBUTBKLFNBR2hDWixFQUFNdEgsRUFBUVQsYUFBYyxPQUNsQytILEVBQU1BLEVBQUl0aUIsUUFBU3VoQixHQUFZQyxJQUUvQnhHLEVBQVFSLGFBQWMsS0FBUThILEVBQU1yRixJQU10Q3BYLEdBREEyYyxFQUFTbEUsRUFBVXZELElBQ1J6WixPQUNIdUUsS0FDUDJjLEVBQVEzYyxJQUFReWMsRUFBTSxJQUFNQSxFQUFNLFVBQWEsSUFDOUNhLEdBQVlYLEVBQVEzYyxJQUV0QjRjLEVBQWNELEVBQU9sTixLQUFNLEtBRzVCLElBSUMsT0FIQTVULEVBQUt3WCxNQUFPeUUsRUFDWCtFLEVBQVcvVSxpQkFBa0I4VSxJQUV2QjlFLEVBQ04sTUFBUXlGLEdBQ1Q1RCxFQUF3QnpFLEdBQVUsR0FDakMsUUFDSXVILElBQVFyRixHQUNaakMsRUFBUXFJLGdCQUFpQixRQVE5QixPQUFPclksRUFBUStQLEVBQVMvYSxRQUFTb2dCLEVBQU8sTUFBUXBGLEVBQVMyQyxFQUFTeUUsR0FTbkUsU0FBUy9DLEtBQ1IsSUFBSWlFLEVBQU8sR0FZWCxPQVZBLFNBQVNDLEVBQU83YixFQUFLM0gsR0FRcEIsT0FMS3VqQixFQUFLNWhCLEtBQU1nRyxFQUFNLEtBQVF5VyxFQUFLcUYsb0JBRzNCRCxFQUFPRCxFQUFLRyxTQUVYRixFQUFPN2IsRUFBTSxLQUFRM0gsR0FTaEMsU0FBUzJqQixHQUFjekksR0FFdEIsT0FEQUEsRUFBSWdDLElBQVksRUFDVGhDLEVBT1IsU0FBUzBJLEdBQVExSSxHQUNoQixJQUFJblIsRUFBS1EsRUFBUytQLGNBQWUsWUFFakMsSUFDQyxRQUFTWSxFQUFJblIsR0FDWixNQUFRbUIsR0FDVCxPQUFPLEVBQ04sUUFHSW5CLEVBQUd5RixZQUNQekYsRUFBR3lGLFdBQVdvTCxZQUFhN1EsR0FJNUJBLEVBQUssTUFTUCxTQUFTOFosR0FBV0MsRUFBT0MsR0FJMUIsSUFIQSxJQUFJak8sRUFBTWdPLEVBQU1wakIsTUFBTyxLQUN0Qm9GLEVBQUlnUSxFQUFJdlUsT0FFRHVFLEtBQ1BzWSxFQUFLNEYsV0FBWWxPLEVBQUtoUSxJQUFRaWUsRUFVaEMsU0FBU0UsR0FBY3RFLEVBQUdDLEdBQ3pCLElBQUlzRSxFQUFNdEUsR0FBS0QsRUFDZHdFLEVBQU9ELEdBQXNCLElBQWZ2RSxFQUFFL0YsVUFBaUMsSUFBZmdHLEVBQUVoRyxVQUNuQytGLEVBQUV5RSxZQUFjeEUsRUFBRXdFLFlBR3BCLEdBQUtELEVBQ0osT0FBT0EsRUFJUixHQUFLRCxFQUNKLEtBQVVBLEVBQU1BLEVBQUlHLGFBQ25CLEdBQUtILElBQVF0RSxFQUNaLE9BQVEsRUFLWCxPQUFPRCxFQUFJLEdBQUssRUFPakIsU0FBUzJFLEdBQW1CcGhCLEdBQzNCLE9BQU8sU0FBVTZZLEdBRWhCLE1BQWdCLFVBRExBLEVBQUtrRyxTQUFTamYsZUFDRStZLEVBQUs3WSxPQUFTQSxHQVEzQyxTQUFTcWhCLEdBQW9CcmhCLEdBQzVCLE9BQU8sU0FBVTZZLEdBQ2hCLElBQUkzSyxFQUFPMkssRUFBS2tHLFNBQVNqZixjQUN6QixPQUFrQixVQUFUb08sR0FBNkIsV0FBVEEsSUFBdUIySyxFQUFLN1ksT0FBU0EsR0FRcEUsU0FBU3NoQixHQUFzQnhDLEdBRzlCLE9BQU8sU0FBVWpHLEdBS2hCLE1BQUssU0FBVUEsRUFTVEEsRUFBS3ZNLGFBQWdDLElBQWxCdU0sRUFBS2lHLFNBR3ZCLFVBQVdqRyxFQUNWLFVBQVdBLEVBQUt2TSxXQUNidU0sRUFBS3ZNLFdBQVd3UyxXQUFhQSxFQUU3QmpHLEVBQUtpRyxXQUFhQSxFQU1wQmpHLEVBQUswSSxhQUFlekMsR0FJMUJqRyxFQUFLMEksY0FBZ0J6QyxHQUNyQkYsR0FBb0IvRixLQUFXaUcsRUFHMUJqRyxFQUFLaUcsV0FBYUEsRUFLZCxVQUFXakcsR0FDZkEsRUFBS2lHLFdBQWFBLEdBWTVCLFNBQVMwQyxHQUF3QnhKLEdBQ2hDLE9BQU95SSxJQUFjLFNBQVVnQixHQUU5QixPQURBQSxHQUFZQSxFQUNMaEIsSUFBYyxTQUFVdEIsRUFBTXRFLEdBTXBDLElBTEEsSUFBSXZCLEVBQ0hvSSxFQUFlMUosRUFBSSxHQUFJbUgsRUFBSzlnQixPQUFRb2pCLEdBQ3BDN2UsRUFBSThlLEVBQWFyakIsT0FHVnVFLEtBQ0Z1YyxFQUFRN0YsRUFBSW9JLEVBQWM5ZSxNQUM5QnVjLEVBQU03RixLQUFTdUIsRUFBU3ZCLEdBQU02RixFQUFNN0YsV0FZekMsU0FBUzBHLEdBQWFqSSxHQUNyQixPQUFPQSxRQUFtRCxJQUFqQ0EsRUFBUThILHNCQUF3QzlILEVBa3JDMUUsSUFBTW5WLEtBOXFDTjJULEVBQVUwRSxHQUFPMUUsUUFBVSxHQU8zQjZFLEVBQVFILEdBQU9HLE1BQVEsU0FBVXZDLEdBQ2hDLElBQUk4SSxFQUFZOUksR0FBUUEsRUFBSytJLGFBQzVCakcsRUFBVTlDLElBQVVBLEVBQUs2RyxlQUFpQjdHLEdBQU9nSixnQkFLbEQsT0FBUW5FLEVBQU0xYSxLQUFNMmUsR0FBYWhHLEdBQVdBLEVBQVFvRCxVQUFZLFNBUWpFckQsRUFBY1QsR0FBT1MsWUFBYyxTQUFVeEUsR0FDNUMsSUFBSTRLLEVBQVlDLEVBQ2ZyYSxFQUFNd1AsRUFBT0EsRUFBS3dJLGVBQWlCeEksRUFBTytFLEVBTzNDLE9BQUt2VSxHQUFPTCxHQUE2QixJQUFqQkssRUFBSWdQLFVBQW1CaFAsRUFBSW1hLGlCQU1uRGxHLEdBREF0VSxFQUFXSyxHQUNRbWEsZ0JBQ25CakcsR0FBa0JSLEVBQU8vVCxHQVFwQjRVLEdBQWdCNVUsSUFDbEIwYSxFQUFZMWEsRUFBUzJhLGNBQWlCRCxFQUFVRSxNQUFRRixJQUdyREEsRUFBVWpXLGlCQUNkaVcsRUFBVWpXLGlCQUFrQixTQUFVNlMsSUFBZSxHQUcxQ29ELEVBQVVHLGFBQ3JCSCxFQUFVRyxZQUFhLFdBQVl2RCxLQVNyQ3BJLEVBQVEwSixNQUFRUyxJQUFRLFNBQVU3WixHQUVqQyxPQURBOFUsRUFBUWxFLFlBQWE1USxHQUFLNFEsWUFBYXBRLEVBQVMrUCxjQUFlLGFBQ3pCLElBQXhCdlEsRUFBRzZELG1CQUNmN0QsRUFBRzZELGlCQUFrQix1QkFBd0JyTSxVQVNoRGtZLEVBQVF5RyxXQUFhMEQsSUFBUSxTQUFVN1osR0FFdEMsT0FEQUEsRUFBR3NiLFVBQVksS0FDUHRiLEVBQUd5USxhQUFjLGdCQU8xQmYsRUFBUXNKLHFCQUF1QmEsSUFBUSxTQUFVN1osR0FFaEQsT0FEQUEsRUFBRzRRLFlBQWFwUSxFQUFTK2EsY0FBZSxNQUNoQ3ZiLEVBQUdnWixxQkFBc0IsS0FBTXhoQixVQUl4Q2tZLEVBQVF1Six1QkFBeUJqQyxFQUFRN2EsS0FBTXFFLEVBQVN5WSx3QkFNeER2SixFQUFROEwsUUFBVTNCLElBQVEsU0FBVTdaLEdBRW5DLE9BREE4VSxFQUFRbEUsWUFBYTVRLEdBQUs0RixHQUFLdU4sR0FDdkIzUyxFQUFTaWIsb0JBQXNCamIsRUFBU2liLGtCQUFtQnRJLEdBQVUzYixVQUl6RWtZLEVBQVE4TCxTQUNabkgsRUFBS3FILE9BQWEsR0FBSSxTQUFVOVYsR0FDL0IsSUFBSStWLEVBQVMvVixFQUFHMVAsUUFBU2loQixHQUFXQyxJQUNwQyxPQUFPLFNBQVVwRixHQUNoQixPQUFPQSxFQUFLdkIsYUFBYyxRQUFXa0wsSUFHdkN0SCxFQUFLNWEsS0FBVyxHQUFJLFNBQVVtTSxFQUFJc0wsR0FDakMsUUFBdUMsSUFBM0JBLEVBQVE2SCxnQkFBa0NoRSxFQUFpQixDQUN0RSxJQUFJL0MsRUFBT2QsRUFBUTZILGVBQWdCblQsR0FDbkMsT0FBT29NLEVBQU8sQ0FBRUEsR0FBUyxPQUkzQnFDLEVBQUtxSCxPQUFhLEdBQUssU0FBVTlWLEdBQ2hDLElBQUkrVixFQUFTL1YsRUFBRzFQLFFBQVNpaEIsR0FBV0MsSUFDcEMsT0FBTyxTQUFVcEYsR0FDaEIsSUFBSTNCLE9BQXdDLElBQTFCMkIsRUFBSzRKLGtCQUN0QjVKLEVBQUs0SixpQkFBa0IsTUFDeEIsT0FBT3ZMLEdBQVFBLEVBQUtwYSxRQUFVMGxCLElBTWhDdEgsRUFBSzVhLEtBQVcsR0FBSSxTQUFVbU0sRUFBSXNMLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFRNkgsZ0JBQWtDaEUsRUFBaUIsQ0FDdEUsSUFBSTFFLEVBQU10VSxFQUFHMlYsRUFDWk0sRUFBT2QsRUFBUTZILGVBQWdCblQsR0FFaEMsR0FBS29NLEVBQU8sQ0FJWCxJQURBM0IsRUFBTzJCLEVBQUs0SixpQkFBa0IsUUFDakJ2TCxFQUFLcGEsUUFBVTJQLEVBQzNCLE1BQU8sQ0FBRW9NLEdBTVYsSUFGQU4sRUFBUVIsRUFBUXVLLGtCQUFtQjdWLEdBQ25DN0osRUFBSSxFQUNNaVcsRUFBT04sRUFBTzNWLE1BRXZCLElBREFzVSxFQUFPMkIsRUFBSzRKLGlCQUFrQixRQUNqQnZMLEVBQUtwYSxRQUFVMlAsRUFDM0IsTUFBTyxDQUFFb00sR0FLWixNQUFPLE1BTVZxQyxFQUFLNWEsS0FBWSxJQUFJaVcsRUFBUXNKLHFCQUM1QixTQUFVNkMsRUFBSzNLLEdBQ2QsWUFBNkMsSUFBakNBLEVBQVE4SCxxQkFDWjlILEVBQVE4SCxxQkFBc0I2QyxHQUcxQm5NLEVBQVF3SixJQUNaaEksRUFBUXJOLGlCQUFrQmdZLFFBRDNCLEdBS1IsU0FBVUEsRUFBSzNLLEdBQ2QsSUFBSWMsRUFDSDhKLEVBQU0sR0FDTi9mLEVBQUksRUFHSjhYLEVBQVUzQyxFQUFROEgscUJBQXNCNkMsR0FHekMsR0FBYSxNQUFSQSxFQUFjLENBQ2xCLEtBQVU3SixFQUFPNkIsRUFBUzlYLE1BQ0YsSUFBbEJpVyxFQUFLbkMsVUFDVGlNLEVBQUlsa0IsS0FBTW9hLEdBSVosT0FBTzhKLEVBRVIsT0FBT2pJLEdBSVRRLEVBQUs1YSxLQUFjLE1BQUlpVyxFQUFRdUosd0JBQTBCLFNBQVVxQyxFQUFXcEssR0FDN0UsUUFBK0MsSUFBbkNBLEVBQVErSCx3QkFBMENsRSxFQUM3RCxPQUFPN0QsRUFBUStILHVCQUF3QnFDLElBVXpDckcsRUFBZ0IsR0FPaEJELEVBQVksSUFFTHRGLEVBQVF3SixJQUFNbEMsRUFBUTdhLEtBQU1xRSxFQUFTcUQscUJBSTNDZ1csSUFBUSxTQUFVN1osR0FFakIsSUFBSStiLEVBT0pqSCxFQUFRbEUsWUFBYTVRLEdBQUtnYyxVQUFZLFVBQVk3SSxFQUFaLHFCQUNwQkEsRUFEb0Isa0VBUWpDblQsRUFBRzZELGlCQUFrQix3QkFBeUJyTSxRQUNsRHdkLEVBQVVwZCxLQUFNLHlDQUtYb0ksRUFBRzZELGlCQUFrQixjQUFlck0sUUFDekN3ZCxFQUFVcGQsS0FBTSxtQ0FBb0NvZSxFQUFXLEtBSTFEaFcsRUFBRzZELGlCQUFrQixRQUFVc1AsRUFBVSxNQUFPM2IsUUFDckR3ZCxFQUFVcGQsS0FBTSxPQVFqQm1rQixFQUFRdmIsRUFBUytQLGNBQWUsVUFDMUJHLGFBQWMsT0FBUSxJQUM1QjFRLEVBQUc0USxZQUFhbUwsR0FDVi9iLEVBQUc2RCxpQkFBa0IsYUFBY3JNLFFBQ3hDd2QsRUFBVXBkLEtBQU0sbUZBT1hvSSxFQUFHNkQsaUJBQWtCLFlBQWFyTSxRQUN2Q3dkLEVBQVVwZCxLQUFNLFlBTVhvSSxFQUFHNkQsaUJBQWtCLEtBQU9zUCxFQUFVLE1BQU8zYixRQUNsRHdkLEVBQVVwZCxLQUFNLFlBS2pCb0ksRUFBRzZELGlCQUFrQixRQUNyQm1SLEVBQVVwZCxLQUFNLGtCQUdqQmlpQixJQUFRLFNBQVU3WixHQUNqQkEsRUFBR2djLFVBQVksb0ZBS2YsSUFBSUQsRUFBUXZiLEVBQVMrUCxjQUFlLFNBQ3BDd0wsRUFBTXJMLGFBQWMsT0FBUSxVQUM1QjFRLEVBQUc0USxZQUFhbUwsR0FBUXJMLGFBQWMsT0FBUSxLQUl6QzFRLEVBQUc2RCxpQkFBa0IsWUFBYXJNLFFBQ3RDd2QsRUFBVXBkLEtBQU0sc0NBS2lDLElBQTdDb0ksRUFBRzZELGlCQUFrQixZQUFhck0sUUFDdEN3ZCxFQUFVcGQsS0FBTSxXQUFZLGFBSzdCa2QsRUFBUWxFLFlBQWE1USxHQUFLaVksVUFBVyxFQUNjLElBQTlDalksRUFBRzZELGlCQUFrQixhQUFjck0sUUFDdkN3ZCxFQUFVcGQsS0FBTSxXQUFZLGFBSzdCb0ksRUFBRzZELGlCQUFrQixRQUNyQm1SLEVBQVVwZCxLQUFNLGFBSVg4WCxFQUFRdU0sZ0JBQWtCakYsRUFBUTdhLEtBQVE2WCxFQUFVYyxFQUFRZCxTQUNsRWMsRUFBUW9ILHVCQUNScEgsRUFBUXFILG9CQUNSckgsRUFBUXNILGtCQUNSdEgsRUFBUXVILHFCQUVSeEMsSUFBUSxTQUFVN1osR0FJakIwUCxFQUFRNE0sa0JBQW9CdEksRUFBUS9NLEtBQU1qSCxFQUFJLEtBSTlDZ1UsRUFBUS9NLEtBQU1qSCxFQUFJLGFBQ2xCaVYsRUFBY3JkLEtBQU0sS0FBTXdlLE1BSTVCcEIsRUFBWUEsRUFBVXhkLFFBQVUsSUFBSTdCLE9BQVFxZixFQUFVeEosS0FBTSxNQUM1RHlKLEVBQWdCQSxFQUFjemQsUUFBVSxJQUFJN0IsT0FBUXNmLEVBQWN6SixLQUFNLE1BSXhFeVAsRUFBYWpFLEVBQVE3YSxLQUFNMlksRUFBUXlILHlCQUtuQ3JILEVBQVcrRixHQUFjakUsRUFBUTdhLEtBQU0yWSxFQUFRSSxVQUM5QyxTQUFVVSxFQUFHQyxHQUNaLElBQUkyRyxFQUF1QixJQUFmNUcsRUFBRS9GLFNBQWlCK0YsRUFBRW9GLGdCQUFrQnBGLEVBQ2xENkcsRUFBTTVHLEdBQUtBLEVBQUVwUSxXQUNkLE9BQU9tUSxJQUFNNkcsTUFBV0EsR0FBd0IsSUFBakJBLEVBQUk1TSxZQUNsQzJNLEVBQU10SCxTQUNMc0gsRUFBTXRILFNBQVV1SCxHQUNoQjdHLEVBQUUyRyx5QkFBOEQsR0FBbkMzRyxFQUFFMkcsd0JBQXlCRSxNQUczRCxTQUFVN0csRUFBR0MsR0FDWixHQUFLQSxFQUNKLEtBQVVBLEVBQUlBLEVBQUVwUSxZQUNmLEdBQUtvUSxJQUFNRCxFQUNWLE9BQU8sRUFJVixPQUFPLEdBT1RELEVBQVlzRixFQUNaLFNBQVVyRixFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWpCLEdBQWUsRUFDUixFQUlSLElBQUk4SCxHQUFXOUcsRUFBRTJHLHlCQUEyQjFHLEVBQUUwRyx3QkFDOUMsT0FBS0csSUFnQlUsR0FQZkEsR0FBWTlHLEVBQUVpRCxlQUFpQmpELEtBQVNDLEVBQUVnRCxlQUFpQmhELEdBQzFERCxFQUFFMkcsd0JBQXlCMUcsR0FHM0IsS0FJR25HLEVBQVFpTixjQUFnQjlHLEVBQUUwRyx3QkFBeUIzRyxLQUFROEcsRUFPekQ5RyxHQUFLcFYsR0FBWW9WLEVBQUVpRCxlQUFpQnpELEdBQ3hDRixFQUFVRSxFQUFjUSxJQUNoQixFQU9KQyxHQUFLclYsR0FBWXFWLEVBQUVnRCxlQUFpQnpELEdBQ3hDRixFQUFVRSxFQUFjUyxHQUNqQixFQUlEbEIsRUFDSmplLEVBQVNpZSxFQUFXaUIsR0FBTWxmLEVBQVNpZSxFQUFXa0IsR0FDaEQsRUFHZSxFQUFWNkcsR0FBZSxFQUFJLElBRTNCLFNBQVU5RyxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWpCLEdBQWUsRUFDUixFQUdSLElBQUl1RixFQUNIcGUsRUFBSSxFQUNKNmdCLEVBQU1oSCxFQUFFblEsV0FDUmdYLEVBQU01RyxFQUFFcFEsV0FDUm9YLEVBQUssQ0FBRWpILEdBQ1BrSCxFQUFLLENBQUVqSCxHQUdSLElBQU0rRyxJQUFRSCxFQU1iLE9BQU83RyxHQUFLcFYsR0FBWSxFQUN2QnFWLEdBQUtyVixFQUFXLEVBRWhCb2MsR0FBTyxFQUNQSCxFQUFNLEVBQ045SCxFQUNFamUsRUFBU2llLEVBQVdpQixHQUFNbGYsRUFBU2llLEVBQVdrQixHQUNoRCxFQUdLLEdBQUsrRyxJQUFRSCxFQUNuQixPQUFPdkMsR0FBY3RFLEVBQUdDLEdBS3pCLElBREFzRSxFQUFNdkUsRUFDSXVFLEVBQU1BLEVBQUkxVSxZQUNuQm9YLEVBQUdwbEIsUUFBUzBpQixHQUdiLElBREFBLEVBQU10RSxFQUNJc0UsRUFBTUEsRUFBSTFVLFlBQ25CcVgsRUFBR3JsQixRQUFTMGlCLEdBSWIsS0FBUTBDLEVBQUk5Z0IsS0FBUStnQixFQUFJL2dCLElBQ3ZCQSxJQUdELE9BQU9BLEVBR05tZSxHQUFjMkMsRUFBSTlnQixHQUFLK2dCLEVBQUkvZ0IsSUFPM0I4Z0IsRUFBSTlnQixJQUFPcVosR0FBZ0IsRUFDM0IwSCxFQUFJL2dCLElBQU9xWixFQUFlLEVBRTFCLEdBR0s1VSxHQS9jQ0EsR0FrZFQ0VCxHQUFPSixRQUFVLFNBQVUrSSxFQUFNQyxHQUNoQyxPQUFPNUksR0FBUTJJLEVBQU0sS0FBTSxLQUFNQyxJQUdsQzVJLEdBQU82SCxnQkFBa0IsU0FBVWpLLEVBQU0rSyxHQUd4QyxHQUZBbEksRUFBYTdDLEdBRVJ0QyxFQUFRdU0saUJBQW1CbEgsSUFDOUJXLEVBQXdCcUgsRUFBTyxRQUM3QjlILElBQWtCQSxFQUFjOVksS0FBTTRnQixPQUN0Qy9ILElBQWtCQSxFQUFVN1ksS0FBTTRnQixJQUVyQyxJQUNDLElBQUlwTCxFQUFNcUMsRUFBUS9NLEtBQU0rSyxFQUFNK0ssR0FHOUIsR0FBS3BMLEdBQU9qQyxFQUFRNE0sbUJBSW5CdEssRUFBS3hSLFVBQXVDLEtBQTNCd1IsRUFBS3hSLFNBQVNxUCxTQUMvQixPQUFPOEIsRUFFUCxNQUFReFEsR0FDVHVVLEVBQXdCcUgsR0FBTSxHQUloQyxPQUFPM0ksR0FBUTJJLEVBQU12YyxFQUFVLEtBQU0sQ0FBRXdSLElBQVN4YSxPQUFTLEdBRzFENGMsR0FBT2MsU0FBVyxTQUFVaEUsRUFBU2MsR0FVcEMsT0FIT2QsRUFBUTJILGVBQWlCM0gsSUFBYTFRLEdBQzVDcVUsRUFBYTNELEdBRVBnRSxFQUFVaEUsRUFBU2MsSUFHM0JvQyxHQUFPNkksS0FBTyxTQUFVakwsRUFBTTNLLElBT3RCMkssRUFBSzZHLGVBQWlCN0csSUFBVXhSLEdBQ3RDcVUsRUFBYTdDLEdBR2QsSUFBSWIsRUFBS2tELEVBQUs0RixXQUFZNVMsRUFBS3BPLGVBRzlCZ0gsRUFBTWtSLEdBQU03QixFQUFPckksS0FBTW9OLEVBQUs0RixXQUFZNVMsRUFBS3BPLGVBQzlDa1ksRUFBSWEsRUFBTTNLLEdBQU8wTixRQUNqQjNSLEVBRUYsWUFBZUEsSUFBUm5ELEVBQ05BLEVBQ0F5UCxFQUFReUcsYUFBZXBCLEVBQ3RCL0MsRUFBS3ZCLGFBQWNwSixJQUNqQnBILEVBQU0rUixFQUFLNEosaUJBQWtCdlUsS0FBWXBILEVBQUlpZCxVQUM5Q2pkLEVBQUloSyxNQUNKLE1BR0ptZSxHQUFPaUQsT0FBUyxTQUFVOEYsR0FDekIsT0FBU0EsRUFBTSxJQUFLam5CLFFBQVN1aEIsR0FBWUMsS0FHMUN0RCxHQUFPZCxNQUFRLFNBQVVDLEdBQ3hCLE1BQU0sSUFBSXpQLE1BQU8sMENBQTRDeVAsSUFPOURhLEdBQU9nSixXQUFhLFNBQVV2SixHQUM3QixJQUFJN0IsRUFDSHFMLEVBQWEsR0FDYjVLLEVBQUksRUFDSjFXLEVBQUksRUFPTCxHQUpBNlksR0FBZ0JsRixFQUFRNE4saUJBQ3hCM0ksR0FBYWpGLEVBQVE2TixZQUFjMUosRUFBUXBkLE1BQU8sR0FDbERvZCxFQUFRbEIsS0FBTWdELEdBRVRmLEVBQWUsQ0FDbkIsS0FBVTVDLEVBQU82QixFQUFTOVgsTUFDcEJpVyxJQUFTNkIsRUFBUzlYLEtBQ3RCMFcsRUFBSTRLLEVBQVd6bEIsS0FBTW1FLElBR3ZCLEtBQVEwVyxLQUNQb0IsRUFBUWpCLE9BQVF5SyxFQUFZNUssR0FBSyxHQVFuQyxPQUZBa0MsRUFBWSxLQUVMZCxHQU9SUyxFQUFVRixHQUFPRSxRQUFVLFNBQVV0QyxHQUNwQyxJQUFJM0IsRUFDSHNCLEVBQU0sR0FDTjVWLEVBQUksRUFDSjhULEVBQVdtQyxFQUFLbkMsU0FFakIsR0FBTUEsR0FRQyxHQUFrQixJQUFiQSxHQUErQixJQUFiQSxHQUErQixLQUFiQSxFQUFrQixDQUlqRSxHQUFpQyxpQkFBckJtQyxFQUFLd0wsWUFDaEIsT0FBT3hMLEVBQUt3TCxZQUlaLElBQU14TCxFQUFPQSxFQUFLeUwsV0FBWXpMLEVBQU1BLEVBQU9BLEVBQUtzSSxZQUMvQzNJLEdBQU8yQyxFQUFTdEMsUUFHWixHQUFrQixJQUFibkMsR0FBK0IsSUFBYkEsRUFDN0IsT0FBT21DLEVBQUswTCxlQW5CWixLQUFVck4sRUFBTzJCLEVBQU1qVyxNQUd0QjRWLEdBQU8yQyxFQUFTakUsR0FxQmxCLE9BQU9zQixJQUdSMEMsRUFBT0QsR0FBT3VKLFVBQVksQ0FHekJqRSxZQUFhLEdBRWJrRSxhQUFjaEUsR0FFZG5CLE1BQU83QixFQUVQcUQsV0FBWSxHQUVaeGdCLEtBQU0sR0FFTm9rQixTQUFVLENBQ1QsSUFBSyxDQUFFMUYsSUFBSyxhQUFjakcsT0FBTyxHQUNqQyxJQUFLLENBQUVpRyxJQUFLLGNBQ1osSUFBSyxDQUFFQSxJQUFLLGtCQUFtQmpHLE9BQU8sR0FDdEMsSUFBSyxDQUFFaUcsSUFBSyxvQkFHYjJGLFVBQVcsQ0FDVixLQUFRLFNBQVVyRixHQVdqQixPQVZBQSxFQUFPLEdBQU1BLEVBQU8sR0FBSXZpQixRQUFTaWhCLEdBQVdDLElBRzVDcUIsRUFBTyxJQUFRQSxFQUFPLElBQU9BLEVBQU8sSUFDbkNBLEVBQU8sSUFBTyxJQUFLdmlCLFFBQVNpaEIsR0FBV0MsSUFFcEIsT0FBZnFCLEVBQU8sS0FDWEEsRUFBTyxHQUFNLElBQU1BLEVBQU8sR0FBTSxLQUcxQkEsRUFBTWhpQixNQUFPLEVBQUcsSUFHeEIsTUFBUyxTQUFVZ2lCLEdBaUNsQixPQXJCQUEsRUFBTyxHQUFNQSxFQUFPLEdBQUl4ZixjQUVVLFFBQTdCd2YsRUFBTyxHQUFJaGlCLE1BQU8sRUFBRyxJQUduQmdpQixFQUFPLElBQ1pyRSxHQUFPZCxNQUFPbUYsRUFBTyxJQUt0QkEsRUFBTyxLQUFTQSxFQUFPLEdBQ3RCQSxFQUFPLElBQVFBLEVBQU8sSUFBTyxHQUM3QixHQUFxQixTQUFmQSxFQUFPLElBQWlDLFFBQWZBLEVBQU8sS0FDdkNBLEVBQU8sS0FBV0EsRUFBTyxHQUFNQSxFQUFPLElBQXdCLFFBQWZBLEVBQU8sS0FHM0NBLEVBQU8sSUFDbEJyRSxHQUFPZCxNQUFPbUYsRUFBTyxJQUdmQSxHQUdSLE9BQVUsU0FBVUEsR0FDbkIsSUFBSXNGLEVBQ0hDLEdBQVl2RixFQUFPLElBQU9BLEVBQU8sR0FFbEMsT0FBSzdCLEVBQW1CLE1BQUV6YSxLQUFNc2MsRUFBTyxJQUMvQixNQUlIQSxFQUFPLEdBQ1hBLEVBQU8sR0FBTUEsRUFBTyxJQUFPQSxFQUFPLElBQU8sR0FHOUJ1RixHQUFZdEgsRUFBUXZhLEtBQU02aEIsS0FHbkNELEVBQVN2SixFQUFVd0osR0FBVSxNQUc3QkQsRUFBU0MsRUFBU3RuQixRQUFTLElBQUtzbkIsRUFBU3htQixPQUFTdW1CLEdBQVdDLEVBQVN4bUIsVUFHeEVpaEIsRUFBTyxHQUFNQSxFQUFPLEdBQUloaUIsTUFBTyxFQUFHc25CLEdBQ2xDdEYsRUFBTyxHQUFNdUYsRUFBU3ZuQixNQUFPLEVBQUdzbkIsSUFJMUJ0RixFQUFNaGlCLE1BQU8sRUFBRyxNQUl6QmlsQixPQUFRLENBRVAsSUFBTyxTQUFVdUMsR0FDaEIsSUFBSS9GLEVBQVcrRixFQUFpQi9uQixRQUFTaWhCLEdBQVdDLElBQVluZSxjQUNoRSxNQUE0QixNQUFyQmdsQixFQUNOLFdBQ0MsT0FBTyxHQUVSLFNBQVVqTSxHQUNULE9BQU9BLEVBQUtrRyxVQUFZbEcsRUFBS2tHLFNBQVNqZixnQkFBa0JpZixJQUkzRCxNQUFTLFNBQVVvRCxHQUNsQixJQUFJNEMsRUFBVTVJLEVBQVlnRyxFQUFZLEtBRXRDLE9BQU80QyxJQUNKQSxFQUFVLElBQUl2b0IsT0FBUSwwQkFDakIybEIsRUFBWSxJQUFNckYsRUFBYSxTQUFhWCxFQUNqRGdHLEdBQVcsU0FBVXRKLEdBQ3BCLE9BQU9rTSxFQUFRL2hCLEtBQ1ksaUJBQW5CNlYsRUFBS3NKLFdBQTBCdEosRUFBS3NKLGdCQUNkLElBQXRCdEosRUFBS3ZCLGNBQ1h1QixFQUFLdkIsYUFBYyxVQUNwQixRQUtOLEtBQVEsU0FBVXBKLEVBQU04VyxFQUFVQyxHQUNqQyxPQUFPLFNBQVVwTSxHQUNoQixJQUFJL1osRUFBU21jLEdBQU82SSxLQUFNakwsRUFBTTNLLEdBRWhDLE9BQWUsTUFBVnBQLEVBQ2dCLE9BQWJrbUIsR0FFRkEsSUFJTmxtQixHQUFVLEdBSVUsTUFBYmttQixFQUFtQmxtQixJQUFXbW1CLEVBQ3ZCLE9BQWJELEVBQW9CbG1CLElBQVdtbUIsRUFDbEIsT0FBYkQsRUFBb0JDLEdBQXFDLElBQTVCbm1CLEVBQU92QixRQUFTMG5CLEdBQ2hDLE9BQWJELEVBQW9CQyxHQUFTbm1CLEVBQU92QixRQUFTMG5CLElBQVcsRUFDM0MsT0FBYkQsRUFBb0JDLEdBQVNubUIsRUFBT3hCLE9BQVEybkIsRUFBTTVtQixVQUFhNG1CLEVBQ2xELE9BQWJELEdBQXNCLElBQU1sbUIsRUFBTy9CLFFBQVNtZ0IsRUFBYSxLQUFRLEtBQU0zZixRQUFTMG5CLElBQVcsRUFDOUUsT0FBYkQsSUFBb0JsbUIsSUFBV21tQixHQUFTbm1CLEVBQU94QixNQUFPLEVBQUcybkIsRUFBTTVtQixPQUFTLEtBQVE0bUIsRUFBUSxRQU8zRixNQUFTLFNBQVVqbEIsRUFBTWtsQixFQUFNQyxFQUFXcE0sRUFBT0UsR0FDaEQsSUFBSW1NLEVBQWdDLFFBQXZCcGxCLEVBQUsxQyxNQUFPLEVBQUcsR0FDM0IrbkIsRUFBK0IsU0FBckJybEIsRUFBSzFDLE9BQVEsR0FDdkJnb0IsRUFBa0IsWUFBVEosRUFFVixPQUFpQixJQUFWbk0sR0FBd0IsSUFBVEUsRUFHckIsU0FBVUosR0FDVCxRQUFTQSxFQUFLdk0sWUFHZixTQUFVdU0sRUFBTTBNLEVBQVVDLEdBQ3pCLElBQUlsRixFQUFPbUYsRUFBYUMsRUFBWXhPLEVBQU15TyxFQUFXQyxFQUNwRDVHLEVBQU1vRyxJQUFXQyxFQUFVLGNBQWdCLGtCQUMzQ2xkLEVBQVMwUSxFQUFLdk0sV0FDZDRCLEVBQU9vWCxHQUFVek0sRUFBS2tHLFNBQVNqZixjQUMvQitsQixHQUFZTCxJQUFRRixFQUNwQnJFLEdBQU8sRUFFUixHQUFLOVksRUFBUyxDQUdiLEdBQUtpZCxFQUFTLENBQ2IsS0FBUXBHLEdBQU0sQ0FFYixJQURBOUgsRUFBTzJCLEVBQ0czQixFQUFPQSxFQUFNOEgsSUFDdEIsR0FBS3NHLEVBQ0pwTyxFQUFLNkgsU0FBU2pmLGdCQUFrQm9PLEVBQ2QsSUFBbEJnSixFQUFLUixTQUVMLE9BQU8sRUFLVGtQLEVBQVE1RyxFQUFlLFNBQVRoZixJQUFvQjRsQixHQUFTLGNBRTVDLE9BQU8sRUFNUixHQUhBQSxFQUFRLENBQUVQLEVBQVVsZCxFQUFPbWMsV0FBYW5jLEVBQU8yZCxXQUcxQ1QsR0FBV1EsR0FrQmYsSUFIQTVFLEdBREEwRSxHQURBckYsR0FIQW1GLEdBSkFDLEdBREF4TyxFQUFPL08sR0FDWTZSLEtBQWU5QyxFQUFNOEMsR0FBWSxLQUkxQjlDLEVBQUs2TyxZQUM1QkwsRUFBWXhPLEVBQUs2TyxVQUFhLEtBRVovbEIsSUFBVSxJQUNaLEtBQVFrYyxHQUFXb0UsRUFBTyxLQUN6QkEsRUFBTyxHQUMzQnBKLEVBQU95TyxHQUFheGQsRUFBTzhXLFdBQVkwRyxHQUU3QnpPLElBQVN5TyxHQUFhek8sR0FBUUEsRUFBTThILEtBRzNDaUMsRUFBTzBFLEVBQVksSUFBT0MsRUFBTWpKLE9BR2xDLEdBQXVCLElBQWxCekYsRUFBS1IsWUFBb0J1SyxHQUFRL0osSUFBUzJCLEVBQU8sQ0FDckQ0TSxFQUFhemxCLEdBQVMsQ0FBRWtjLEVBQVN5SixFQUFXMUUsR0FDNUMsWUF5QkYsR0FsQks0RSxJQWFKNUUsRUFEQTBFLEdBREFyRixHQUhBbUYsR0FKQUMsR0FEQXhPLEVBQU8yQixHQUNZbUIsS0FBZTlDLEVBQU04QyxHQUFZLEtBSTFCOUMsRUFBSzZPLFlBQzVCTCxFQUFZeE8sRUFBSzZPLFVBQWEsS0FFWi9sQixJQUFVLElBQ1osS0FBUWtjLEdBQVdvRSxFQUFPLEtBTWhDLElBQVRXLEVBR0osTUFBVS9KLElBQVN5TyxHQUFhek8sR0FBUUEsRUFBTThILEtBQzNDaUMsRUFBTzBFLEVBQVksSUFBT0MsRUFBTWpKLFVBRTNCMkksRUFDTnBPLEVBQUs2SCxTQUFTamYsZ0JBQWtCb08sRUFDZCxJQUFsQmdKLEVBQUtSLGNBQ0h1SyxJQUdHNEUsS0FNSkosR0FMQUMsRUFBYXhPLEVBQU04QyxLQUNoQjlDLEVBQU04QyxHQUFZLEtBSUs5QyxFQUFLNk8sWUFDNUJMLEVBQVl4TyxFQUFLNk8sVUFBYSxLQUVwQi9sQixHQUFTLENBQUVrYyxFQUFTK0UsSUFHN0IvSixJQUFTMkIsTUFVbEIsT0FEQW9JLEdBQVFoSSxLQUNRRixHQUFXa0ksRUFBT2xJLEdBQVUsR0FBS2tJLEVBQU9sSSxHQUFTLEtBS3JFLE9BQVUsU0FBVWlOLEVBQVF2RSxHQU0zQixJQUFJd0UsRUFDSGpPLEVBQUtrRCxFQUFLK0IsUUFBUytJLElBQVk5SyxFQUFLZ0wsV0FBWUYsRUFBT2xtQixnQkFDdERtYixHQUFPZCxNQUFPLHVCQUF5QjZMLEdBS3pDLE9BQUtoTyxFQUFJZ0MsR0FDRGhDLEVBQUl5SixHQUlQekosRUFBRzNaLE9BQVMsR0FDaEI0bkIsRUFBTyxDQUFFRCxFQUFRQSxFQUFRLEdBQUl2RSxHQUN0QnZHLEVBQUtnTCxXQUFXOVAsZUFBZ0I0UCxFQUFPbG1CLGVBQzdDMmdCLElBQWMsU0FBVXRCLEVBQU10RSxHQUk3QixJQUhBLElBQUlzTCxFQUNIQyxFQUFVcE8sRUFBSW1ILEVBQU1zQyxHQUNwQjdlLEVBQUl3akIsRUFBUS9uQixPQUNMdUUsS0FFUHVjLEVBREFnSCxFQUFNNW9CLEVBQVM0aEIsRUFBTWlILEVBQVN4akIsT0FDYmlZLEVBQVNzTCxHQUFRQyxFQUFTeGpCLE9BRzdDLFNBQVVpVyxHQUNULE9BQU9iLEVBQUlhLEVBQU0sRUFBR29OLEtBSWhCak8sSUFJVGlGLFFBQVMsQ0FHUixJQUFPd0QsSUFBYyxTQUFVM0ksR0FLOUIsSUFBSThLLEVBQVEsR0FDWGxJLEVBQVUsR0FDVjJMLEVBQVUvSyxFQUFTeEQsRUFBUy9hLFFBQVNvZ0IsRUFBTyxPQUU3QyxPQUFPa0osRUFBU3JNLEdBQ2Z5RyxJQUFjLFNBQVV0QixFQUFNdEUsRUFBUzBLLEVBQVVDLEdBTWhELElBTEEsSUFBSTNNLEVBQ0h5TixFQUFZRCxFQUFTbEgsRUFBTSxLQUFNcUcsRUFBSyxJQUN0QzVpQixFQUFJdWMsRUFBSzlnQixPQUdGdUUsTUFDQWlXLEVBQU95TixFQUFXMWpCLE1BQ3hCdWMsRUFBTXZjLEtBQVNpWSxFQUFTalksR0FBTWlXLE9BSWpDLFNBQVVBLEVBQU0wTSxFQUFVQyxHQU16QixPQUxBNUMsRUFBTyxHQUFNL0osRUFDYndOLEVBQVN6RCxFQUFPLEtBQU00QyxFQUFLOUssR0FHM0JrSSxFQUFPLEdBQU0sTUFDTGxJLEVBQVFpQyxVQUluQixJQUFPOEQsSUFBYyxTQUFVM0ksR0FDOUIsT0FBTyxTQUFVZSxHQUNoQixPQUFPb0MsR0FBUW5ELEVBQVVlLEdBQU94YSxPQUFTLE1BSTNDLFNBQVlvaUIsSUFBYyxTQUFVcEosR0FFbkMsT0FEQUEsRUFBT0EsRUFBS3RhLFFBQVNpaEIsR0FBV0MsSUFDekIsU0FBVXBGLEdBQ2hCLE9BQVNBLEVBQUt3TCxhQUFlbEosRUFBU3RDLElBQVN0YixRQUFTOFosSUFBVSxNQVdwRSxLQUFRb0osSUFBYyxTQUFVOEYsR0FPL0IsT0FKTS9JLEVBQVl4YSxLQUFNdWpCLEdBQVEsS0FDL0J0TCxHQUFPZCxNQUFPLHFCQUF1Qm9NLEdBRXRDQSxFQUFPQSxFQUFLeHBCLFFBQVNpaEIsR0FBV0MsSUFBWW5lLGNBQ3JDLFNBQVUrWSxHQUNoQixJQUFJMk4sRUFDSixHQUNDLEdBQU9BLEVBQVc1SyxFQUNqQi9DLEVBQUswTixLQUNMMU4sRUFBS3ZCLGFBQWMsYUFBZ0J1QixFQUFLdkIsYUFBYyxRQUd0RCxPQURBa1AsRUFBV0EsRUFBUzFtQixpQkFDQXltQixHQUEyQyxJQUFuQ0MsRUFBU2pwQixRQUFTZ3BCLEVBQU8sWUFFM0MxTixFQUFPQSxFQUFLdk0sYUFBa0MsSUFBbEJ1TSxFQUFLbkMsVUFDN0MsT0FBTyxNQUtULE9BQVUsU0FBVW1DLEdBQ25CLElBQUl0RCxFQUFPbGEsRUFBT29yQixVQUFZcHJCLEVBQU9vckIsU0FBU2xSLEtBQzlDLE9BQU9BLEdBQVFBLEVBQUtqWSxNQUFPLEtBQVF1YixFQUFLcE0sSUFHekMsS0FBUSxTQUFVb00sR0FDakIsT0FBT0EsSUFBUzhDLEdBR2pCLE1BQVMsU0FBVTlDLEdBQ2xCLE9BQU9BLElBQVN4UixFQUFTZSxpQkFDckJmLEVBQVNxZixVQUFZcmYsRUFBU3FmLGdCQUM3QjdOLEVBQUs3WSxNQUFRNlksRUFBSzhOLE9BQVM5TixFQUFLK04sV0FJdEMsUUFBV3RGLElBQXNCLEdBQ2pDLFNBQVlBLElBQXNCLEdBRWxDLFFBQVcsU0FBVXpJLEdBSXBCLElBQUlrRyxFQUFXbEcsRUFBS2tHLFNBQVNqZixjQUM3QixNQUFzQixVQUFiaWYsS0FBMEJsRyxFQUFLZ08sU0FDeEIsV0FBYjlILEtBQTJCbEcsRUFBS2lPLFVBR3BDLFNBQVksU0FBVWpPLEdBU3JCLE9BTEtBLEVBQUt2TSxZQUVUdU0sRUFBS3ZNLFdBQVd5YSxlQUdRLElBQWxCbE8sRUFBS2lPLFVBSWIsTUFBUyxTQUFVak8sR0FNbEIsSUFBTUEsRUFBT0EsRUFBS3lMLFdBQVl6TCxFQUFNQSxFQUFPQSxFQUFLc0ksWUFDL0MsR0FBS3RJLEVBQUtuQyxTQUFXLEVBQ3BCLE9BQU8sRUFHVCxPQUFPLEdBR1IsT0FBVSxTQUFVbUMsR0FDbkIsT0FBUXFDLEVBQUsrQixRQUFpQixNQUFHcEUsSUFJbEMsT0FBVSxTQUFVQSxHQUNuQixPQUFPK0UsRUFBUTVhLEtBQU02VixFQUFLa0csV0FHM0IsTUFBUyxTQUFVbEcsR0FDbEIsT0FBTzhFLEVBQVEzYSxLQUFNNlYsRUFBS2tHLFdBRzNCLE9BQVUsU0FBVWxHLEdBQ25CLElBQUkzSyxFQUFPMkssRUFBS2tHLFNBQVNqZixjQUN6QixNQUFnQixVQUFUb08sR0FBa0MsV0FBZDJLLEVBQUs3WSxNQUE4QixXQUFUa08sR0FHdEQsS0FBUSxTQUFVMkssR0FDakIsSUFBSWlMLEVBQ0osTUFBdUMsVUFBaENqTCxFQUFLa0csU0FBU2pmLGVBQ04sU0FBZCtZLEVBQUs3WSxPQUl1QyxPQUF4QzhqQixFQUFPakwsRUFBS3ZCLGFBQWMsVUFDTixTQUF2QndNLEVBQUtoa0IsZ0JBSVIsTUFBUzBoQixJQUF3QixXQUNoQyxNQUFPLENBQUUsTUFHVixLQUFRQSxJQUF3QixTQUFVd0YsRUFBZTNvQixHQUN4RCxNQUFPLENBQUVBLEVBQVMsTUFHbkIsR0FBTW1qQixJQUF3QixTQUFVd0YsRUFBZTNvQixFQUFRb2pCLEdBQzlELE1BQU8sQ0FBRUEsRUFBVyxFQUFJQSxFQUFXcGpCLEVBQVNvakIsTUFHN0MsS0FBUUQsSUFBd0IsU0FBVUUsRUFBY3JqQixHQUV2RCxJQURBLElBQUl1RSxFQUFJLEVBQ0FBLEVBQUl2RSxFQUFRdUUsR0FBSyxFQUN4QjhlLEVBQWFqakIsS0FBTW1FLEdBRXBCLE9BQU84ZSxLQUdSLElBQU9GLElBQXdCLFNBQVVFLEVBQWNyakIsR0FFdEQsSUFEQSxJQUFJdUUsRUFBSSxFQUNBQSxFQUFJdkUsRUFBUXVFLEdBQUssRUFDeEI4ZSxFQUFhampCLEtBQU1tRSxHQUVwQixPQUFPOGUsS0FHUixHQUFNRixJQUF3QixTQUFVRSxFQUFjcmpCLEVBQVFvakIsR0FNN0QsSUFMQSxJQUFJN2UsRUFBSTZlLEVBQVcsRUFDbEJBLEVBQVdwakIsRUFDWG9qQixFQUFXcGpCLEVBQ1ZBLEVBQ0FvakIsSUFDUTdlLEdBQUssR0FDZDhlLEVBQWFqakIsS0FBTW1FLEdBRXBCLE9BQU84ZSxLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWNyakIsRUFBUW9qQixHQUU3RCxJQURBLElBQUk3ZSxFQUFJNmUsRUFBVyxFQUFJQSxFQUFXcGpCLEVBQVNvakIsSUFDakM3ZSxFQUFJdkUsR0FDYnFqQixFQUFhampCLEtBQU1tRSxHQUVwQixPQUFPOGUsUUFLTHpFLFFBQWUsSUFBSS9CLEVBQUsrQixRQUFjLEdBR2hDLENBQUVnSyxPQUFPLEVBQU1DLFVBQVUsRUFBTUMsTUFBTSxFQUFNQyxVQUFVLEVBQU1DLE9BQU8sR0FDNUVuTSxFQUFLK0IsUUFBU3JhLEdBQU13ZSxHQUFtQnhlLEdBRXhDLElBQU1BLElBQUssQ0FBRTBrQixRQUFRLEVBQU1DLE9BQU8sR0FDakNyTSxFQUFLK0IsUUFBU3JhLEdBQU15ZSxHQUFvQnplLEdBSXpDLFNBQVNzakIsTUEwRVQsU0FBU2hHLEdBQVlzSCxHQUlwQixJQUhBLElBQUk1a0IsRUFBSSxFQUNQcUUsRUFBTXVnQixFQUFPbnBCLE9BQ2J5WixFQUFXLEdBQ0psVixFQUFJcUUsRUFBS3JFLElBQ2hCa1YsR0FBWTBQLEVBQVE1a0IsR0FBSTlGLE1BRXpCLE9BQU9nYixFQUdSLFNBQVMrRyxHQUFld0gsRUFBU29CLEVBQVlDLEdBQzVDLElBQUkxSSxFQUFNeUksRUFBV3pJLElBQ3BCMkksRUFBT0YsRUFBV2hVLEtBQ2xCaFAsRUFBTWtqQixHQUFRM0ksRUFDZDRJLEVBQW1CRixHQUFnQixlQUFSampCLEVBQzNCb2pCLEVBQVduVSxJQUVaLE9BQU8rVCxFQUFXMU8sTUFHakIsU0FBVUYsRUFBTWQsRUFBU3lOLEdBQ3hCLEtBQVUzTSxFQUFPQSxFQUFNbUcsSUFDdEIsR0FBdUIsSUFBbEJuRyxFQUFLbkMsVUFBa0JrUixFQUMzQixPQUFPdkIsRUFBU3hOLEVBQU1kLEVBQVN5TixHQUdqQyxPQUFPLEdBSVIsU0FBVTNNLEVBQU1kLEVBQVN5TixHQUN4QixJQUFJc0MsRUFBVXJDLEVBQWFDLEVBQzFCcUMsRUFBVyxDQUFFN0wsRUFBUzJMLEdBR3ZCLEdBQUtyQyxHQUNKLEtBQVUzTSxFQUFPQSxFQUFNbUcsSUFDdEIsSUFBdUIsSUFBbEJuRyxFQUFLbkMsVUFBa0JrUixJQUN0QnZCLEVBQVN4TixFQUFNZCxFQUFTeU4sR0FDNUIsT0FBTyxPQUtWLEtBQVUzTSxFQUFPQSxFQUFNbUcsSUFDdEIsR0FBdUIsSUFBbEJuRyxFQUFLbkMsVUFBa0JrUixFQVEzQixHQUhBbkMsR0FKQUMsRUFBYTdNLEVBQU1tQixLQUFlbkIsRUFBTW1CLEdBQVksS0FJMUJuQixFQUFLa04sWUFDNUJMLEVBQVk3TSxFQUFLa04sVUFBYSxJQUU1QjRCLEdBQVFBLElBQVM5TyxFQUFLa0csU0FBU2pmLGNBQ25DK1ksRUFBT0EsRUFBTW1HLElBQVNuRyxNQUNoQixLQUFPaVAsRUFBV3JDLEVBQWFoaEIsS0FDckNxakIsRUFBVSxLQUFRNUwsR0FBVzRMLEVBQVUsS0FBUUQsRUFHL0MsT0FBU0UsRUFBVSxHQUFNRCxFQUFVLEdBT25DLEdBSEFyQyxFQUFhaGhCLEdBQVFzakIsRUFHZEEsRUFBVSxHQUFNMUIsRUFBU3hOLEVBQU1kLEVBQVN5TixHQUM5QyxPQUFPLEVBTVosT0FBTyxHQUlWLFNBQVN3QyxHQUFnQkMsR0FDeEIsT0FBT0EsRUFBUzVwQixPQUFTLEVBQ3hCLFNBQVV3YSxFQUFNZCxFQUFTeU4sR0FFeEIsSUFEQSxJQUFJNWlCLEVBQUlxbEIsRUFBUzVwQixPQUNUdUUsS0FDUCxJQUFNcWxCLEVBQVVybEIsR0FBS2lXLEVBQU1kLEVBQVN5TixHQUNuQyxPQUFPLEVBR1QsT0FBTyxHQUVSeUMsRUFBVSxHQVlaLFNBQVNDLEdBQVU1QixFQUFXcG9CLEVBQUtxa0IsRUFBUXhLLEVBQVN5TixHQU9uRCxJQU5BLElBQUkzTSxFQUNIc1AsRUFBZSxHQUNmdmxCLEVBQUksRUFDSnFFLEVBQU1xZixFQUFVam9CLE9BQ2hCK3BCLEVBQWdCLE1BQVBscUIsRUFFRjBFLEVBQUlxRSxFQUFLckUsS0FDVGlXLEVBQU95TixFQUFXMWpCLE1BQ2xCMmYsSUFBVUEsRUFBUTFKLEVBQU1kLEVBQVN5TixLQUN0QzJDLEVBQWExcEIsS0FBTW9hLEdBQ2R1UCxHQUNKbHFCLEVBQUlPLEtBQU1tRSxLQU1kLE9BQU91bEIsRUFHUixTQUFTRSxHQUFZMUQsRUFBVzdNLEVBQVV1TyxFQUFTaUMsRUFBWUMsRUFBWUMsR0FPMUUsT0FOS0YsSUFBZUEsRUFBWXRPLEtBQy9Cc08sRUFBYUQsR0FBWUMsSUFFckJDLElBQWVBLEVBQVl2TyxLQUMvQnVPLEVBQWFGLEdBQVlFLEVBQVlDLElBRS9CL0gsSUFBYyxTQUFVdEIsRUFBTXpFLEVBQVMzQyxFQUFTeU4sR0FDdEQsSUFBSWlELEVBQU03bEIsRUFBR2lXLEVBQ1o2UCxFQUFTLEdBQ1RDLEVBQVUsR0FDVkMsRUFBY2xPLEVBQVFyYyxPQUd0QmthLEVBQVE0RyxHQTVDWCxTQUEyQnJILEVBQVUrUSxFQUFVbk8sR0FHOUMsSUFGQSxJQUFJOVgsRUFBSSxFQUNQcUUsRUFBTTRoQixFQUFTeHFCLE9BQ1J1RSxFQUFJcUUsRUFBS3JFLElBQ2hCcVksR0FBUW5ELEVBQVUrUSxFQUFVam1CLEdBQUs4WCxHQUVsQyxPQUFPQSxFQXNDV29PLENBQ2ZoUixHQUFZLElBQ1pDLEVBQVFyQixTQUFXLENBQUVxQixHQUFZQSxFQUNqQyxJQUlEZ1IsR0FBWXBFLElBQWV4RixHQUFTckgsRUFFbkNTLEVBREEyUCxHQUFVM1AsRUFBT21RLEVBQVEvRCxFQUFXNU0sRUFBU3lOLEdBRzlDd0QsRUFBYTNDLEVBR1prQyxJQUFnQnBKLEVBQU93RixFQUFZaUUsR0FBZU4sR0FHakQsR0FHQTVOLEVBQ0RxTyxFQVFGLEdBTEsxQyxHQUNKQSxFQUFTMEMsRUFBV0MsRUFBWWpSLEVBQVN5TixHQUlyQzhDLEVBTUosSUFMQUcsRUFBT1AsR0FBVWMsRUFBWUwsR0FDN0JMLEVBQVlHLEVBQU0sR0FBSTFRLEVBQVN5TixHQUcvQjVpQixFQUFJNmxCLEVBQUtwcUIsT0FDRHVFLE1BQ0FpVyxFQUFPNFAsRUFBTTdsQixNQUNuQm9tQixFQUFZTCxFQUFTL2xCLE1BQVdtbUIsRUFBV0osRUFBUy9sQixJQUFRaVcsSUFLL0QsR0FBS3NHLEdBQ0osR0FBS29KLEdBQWM1RCxFQUFZLENBQzlCLEdBQUs0RCxFQUFhLENBS2pCLElBRkFFLEVBQU8sR0FDUDdsQixFQUFJb21CLEVBQVczcUIsT0FDUHVFLE1BQ0FpVyxFQUFPbVEsRUFBWXBtQixLQUd6QjZsQixFQUFLaHFCLEtBQVFzcUIsRUFBV25tQixHQUFNaVcsR0FHaEMwUCxFQUFZLEtBQVFTLEVBQWEsR0FBTVAsRUFBTWpELEdBSzlDLElBREE1aUIsRUFBSW9tQixFQUFXM3FCLE9BQ1B1RSxNQUNBaVcsRUFBT21RLEVBQVlwbUIsTUFDdkI2bEIsRUFBT0YsRUFBYWhyQixFQUFTNGhCLEVBQU10RyxHQUFTNlAsRUFBUTlsQixLQUFTLElBRS9EdWMsRUFBTXNKLEtBQVkvTixFQUFTK04sR0FBUzVQLFVBT3ZDbVEsRUFBYWQsR0FDWmMsSUFBZXRPLEVBQ2RzTyxFQUFXdlAsT0FBUW1QLEVBQWFJLEVBQVczcUIsUUFDM0MycUIsR0FFR1QsRUFDSkEsRUFBWSxLQUFNN04sRUFBU3NPLEVBQVl4RCxHQUV2Qy9tQixFQUFLd1gsTUFBT3lFLEVBQVNzTyxNQU16QixTQUFTQyxHQUFtQnpCLEdBeUIzQixJQXhCQSxJQUFJMEIsRUFBYzdDLEVBQVMvTSxFQUMxQnJTLEVBQU11Z0IsRUFBT25wQixPQUNiOHFCLEVBQWtCak8sRUFBS3dKLFNBQVU4QyxFQUFRLEdBQUl4bkIsTUFDN0NvcEIsRUFBbUJELEdBQW1Cak8sRUFBS3dKLFNBQVUsS0FDckQ5aEIsRUFBSXVtQixFQUFrQixFQUFJLEVBRzFCRSxFQUFleEssSUFBZSxTQUFVaEcsR0FDdkMsT0FBT0EsSUFBU3FRLElBQ2RFLEdBQWtCLEdBQ3JCRSxFQUFrQnpLLElBQWUsU0FBVWhHLEdBQzFDLE9BQU90YixFQUFTMnJCLEVBQWNyUSxJQUFVLElBQ3RDdVEsR0FBa0IsR0FDckJuQixFQUFXLENBQUUsU0FBVXBQLEVBQU1kLEVBQVN5TixHQUNyQyxJQUFJaE4sR0FBUzJRLElBQXFCM0QsR0FBT3pOLElBQVl3RCxNQUNsRDJOLEVBQWVuUixHQUFVckIsU0FDMUIyUyxFQUFjeFEsRUFBTWQsRUFBU3lOLEdBQzdCOEQsRUFBaUJ6USxFQUFNZCxFQUFTeU4sSUFJbEMsT0FEQTBELEVBQWUsS0FDUjFRLElBR0Q1VixFQUFJcUUsRUFBS3JFLElBQ2hCLEdBQU95akIsRUFBVW5MLEVBQUt3SixTQUFVOEMsRUFBUTVrQixHQUFJNUMsTUFDM0Npb0IsRUFBVyxDQUFFcEosR0FBZW1KLEdBQWdCQyxHQUFZNUIsUUFDbEQsQ0FJTixJQUhBQSxFQUFVbkwsRUFBS3FILE9BQVFpRixFQUFRNWtCLEdBQUk1QyxNQUFPaVcsTUFBTyxLQUFNdVIsRUFBUTVrQixHQUFJaVksVUFHckRiLEdBQVksQ0FJekIsSUFEQVYsSUFBTTFXLEVBQ0UwVyxFQUFJclMsSUFDTmlVLEVBQUt3SixTQUFVOEMsRUFBUWxPLEdBQUl0WixNQURoQnNaLEtBS2pCLE9BQU8rTyxHQUNOemxCLEVBQUksR0FBS29sQixHQUFnQkMsR0FDekJybEIsRUFBSSxHQUFLc2QsR0FHVHNILEVBQ0VscUIsTUFBTyxFQUFHc0YsRUFBSSxHQUNkMEIsT0FBUSxDQUFFeEgsTUFBZ0MsTUFBekIwcUIsRUFBUTVrQixFQUFJLEdBQUk1QyxLQUFlLElBQU0sTUFDdERqRCxRQUFTb2dCLEVBQU8sTUFDbEJrSixFQUNBempCLEVBQUkwVyxHQUFLMlAsR0FBbUJ6QixFQUFPbHFCLE1BQU9zRixFQUFHMFcsSUFDN0NBLEVBQUlyUyxHQUFPZ2lCLEdBQXFCekIsRUFBU0EsRUFBT2xxQixNQUFPZ2MsSUFDdkRBLEVBQUlyUyxHQUFPaVosR0FBWXNILElBR3pCUyxFQUFTeHBCLEtBQU00bkIsR0FJakIsT0FBTzJCLEdBQWdCQyxHQW9UeEIsT0F0cEJBL0IsR0FBV3RwQixVQUFZc2UsRUFBS3FPLFFBQVVyTyxFQUFLK0IsUUFDM0MvQixFQUFLZ0wsV0FBYSxJQUFJQSxHQUV0QjdLLEVBQVdKLEdBQU9JLFNBQVcsU0FBVXZELEVBQVUwUixHQUNoRCxJQUFJcEQsRUFBUzlHLEVBQU9rSSxFQUFReG5CLEVBQzNCeXBCLEVBQU9sSyxFQUFRbUssRUFDZkMsRUFBU3ROLEVBQVl2RSxFQUFXLEtBRWpDLEdBQUs2UixFQUNKLE9BQU9ILEVBQVksRUFBSUcsRUFBT3JzQixNQUFPLEdBT3RDLElBSkFtc0IsRUFBUTNSLEVBQ1J5SCxFQUFTLEdBQ1RtSyxFQUFheE8sRUFBS3lKLFVBRVY4RSxHQUFRLENBMkJmLElBQU16cEIsS0F4QkFvbUIsS0FBYTlHLEVBQVFsQyxFQUFPdUMsS0FBTThKLE1BQ2xDbkssSUFHSm1LLEVBQVFBLEVBQU1uc0IsTUFBT2dpQixFQUFPLEdBQUlqaEIsU0FBWW9yQixHQUU3Q2xLLEVBQU85Z0IsS0FBUStvQixFQUFTLEtBR3pCcEIsR0FBVSxHQUdIOUcsRUFBUWpDLEVBQWFzQyxLQUFNOEosTUFDakNyRCxFQUFVOUcsRUFBTWtCLFFBQ2hCZ0gsRUFBTy9vQixLQUFNLENBQ1ozQixNQUFPc3BCLEVBR1BwbUIsS0FBTXNmLEVBQU8sR0FBSXZpQixRQUFTb2dCLEVBQU8sT0FFbENzTSxFQUFRQSxFQUFNbnNCLE1BQU84b0IsRUFBUS9uQixTQUloQjZjLEVBQUtxSCxTQUNYakQsRUFBUTdCLEVBQVd6ZCxHQUFPMmYsS0FBTThKLEtBQWdCQyxFQUFZMXBCLE1BQ2hFc2YsRUFBUW9LLEVBQVkxcEIsR0FBUXNmLE1BQzlCOEcsRUFBVTlHLEVBQU1rQixRQUNoQmdILEVBQU8vb0IsS0FBTSxDQUNaM0IsTUFBT3NwQixFQUNQcG1CLEtBQU1BLEVBQ042YSxRQUFTeUUsSUFFVm1LLEVBQVFBLEVBQU1uc0IsTUFBTzhvQixFQUFRL25CLFNBSS9CLElBQU0rbkIsRUFDTCxNQU9GLE9BQU9vRCxFQUNOQyxFQUFNcHJCLE9BQ05vckIsRUFDQ3hPLEdBQU9kLE1BQU9yQyxHQUdkdUUsRUFBWXZFLEVBQVV5SCxHQUFTamlCLE1BQU8sSUE0WnpDZ2UsRUFBVUwsR0FBT0ssUUFBVSxTQUFVeEQsRUFBVXdILEdBQzlDLElBQUkxYyxFQUNIZ25CLEVBQWMsR0FDZEMsRUFBa0IsR0FDbEJGLEVBQVNyTixFQUFleEUsRUFBVyxLQUVwQyxJQUFNNlIsRUFBUyxDQU9kLElBSk1ySyxJQUNMQSxFQUFRakUsRUFBVXZELElBRW5CbFYsRUFBSTBjLEVBQU1qaEIsT0FDRnVFLE1BQ1ArbUIsRUFBU1YsR0FBbUIzSixFQUFPMWMsS0FDdEJvWCxHQUNaNFAsRUFBWW5yQixLQUFNa3JCLEdBRWxCRSxFQUFnQnByQixLQUFNa3JCLElBS3hCQSxFQUFTck4sRUFDUnhFLEVBckpILFNBQW1DK1IsRUFBaUJELEdBQ25ELElBQUlFLEVBQVFGLEVBQVl2ckIsT0FBUyxFQUNoQzByQixFQUFZRixFQUFnQnhyQixPQUFTLEVBQ3JDMnJCLEVBQWUsU0FBVTdLLEVBQU1wSCxFQUFTeU4sRUFBSzlLLEVBQVN1UCxHQUNyRCxJQUFJcFIsRUFBTVMsRUFBRytNLEVBQ1o2RCxFQUFlLEVBQ2Z0bkIsRUFBSSxJQUNKMGpCLEVBQVluSCxHQUFRLEdBQ3BCZ0wsRUFBYSxHQUNiQyxFQUFnQjdPLEVBR2hCaEQsRUFBUTRHLEdBQVE0SyxHQUFhN08sRUFBSzVhLEtBQVksSUFBRyxJQUFLMnBCLEdBR3RESSxFQUFrQm5PLEdBQTRCLE1BQWpCa08sRUFBd0IsRUFBSTdwQixLQUFLMFosVUFBWSxHQUMxRWhULEVBQU1zUixFQUFNbGEsT0FjYixJQVpLNHJCLElBTUoxTyxFQUFtQnhELEdBQVcxUSxHQUFZMFEsR0FBV2tTLEdBTTlDcm5CLElBQU1xRSxHQUFnQyxPQUF2QjRSLEVBQU9OLEVBQU8zVixJQUFlQSxJQUFNLENBQ3pELEdBQUttbkIsR0FBYWxSLEVBQU8sQ0FXeEIsSUFWQVMsRUFBSSxFQU1FdkIsR0FBV2MsRUFBSzZHLGVBQWlCclksSUFDdENxVSxFQUFhN0MsR0FDYjJNLEdBQU81SixHQUVFeUssRUFBVXdELEVBQWlCdlEsTUFDcEMsR0FBSytNLEVBQVN4TixFQUFNZCxHQUFXMVEsRUFBVW1lLEdBQVEsQ0FDaEQ5SyxFQUFRamMsS0FBTW9hLEdBQ2QsTUFHR29SLElBQ0ovTixFQUFVbU8sR0FLUFAsS0FHR2pSLEdBQVF3TixHQUFXeE4sSUFDekJxUixJQUlJL0ssR0FDSm1ILEVBQVU3bkIsS0FBTW9hLElBZ0JuQixHQVRBcVIsR0FBZ0J0bkIsRUFTWGtuQixHQUFTbG5CLElBQU1zbkIsRUFBZSxDQUVsQyxJQURBNVEsRUFBSSxFQUNNK00sRUFBVXVELEVBQWF0USxNQUNoQytNLEVBQVNDLEVBQVc2RCxFQUFZcFMsRUFBU3lOLEdBRzFDLEdBQUtyRyxFQUFPLENBR1gsR0FBSytLLEVBQWUsRUFDbkIsS0FBUXRuQixLQUNDMGpCLEVBQVcxakIsSUFBT3VuQixFQUFZdm5CLEtBQ3JDdW5CLEVBQVl2bkIsR0FBTStaLEVBQUk3TyxLQUFNNE0sSUFNL0J5UCxFQUFhakMsR0FBVWlDLEdBSXhCMXJCLEVBQUt3WCxNQUFPeUUsRUFBU3lQLEdBR2hCRixJQUFjOUssR0FBUWdMLEVBQVc5ckIsT0FBUyxHQUM1QzZyQixFQUFlTixFQUFZdnJCLE9BQVcsR0FFeEM0YyxHQUFPZ0osV0FBWXZKLEdBVXJCLE9BTEt1UCxJQUNKL04sRUFBVW1PLEVBQ1Y5TyxFQUFtQjZPLEdBR2I5RCxHQUdULE9BQU93RCxFQUNOckosR0FBY3VKLEdBQ2RBLEVBNEJDTSxDQUEwQlQsRUFBaUJELEtBSXJDOVIsU0FBV0EsRUFFbkIsT0FBTzZSLEdBWVI1aEIsRUFBU2tULEdBQU9sVCxPQUFTLFNBQVUrUCxFQUFVQyxFQUFTMkMsRUFBU3lFLEdBQzlELElBQUl2YyxFQUFHNGtCLEVBQVErQyxFQUFPdnFCLEVBQU1NLEVBQzNCa3FCLEVBQStCLG1CQUFiMVMsR0FBMkJBLEVBQzdDd0gsR0FBU0gsR0FBUTlELEVBQVl2RCxFQUFXMFMsRUFBUzFTLFVBQVlBLEdBTTlELEdBSkE0QyxFQUFVQSxHQUFXLEdBSUMsSUFBakI0RSxFQUFNamhCLE9BQWUsQ0FJekIsSUFEQW1wQixFQUFTbEksRUFBTyxHQUFNQSxFQUFPLEdBQUloaUIsTUFBTyxJQUM1QmUsT0FBUyxHQUFzQyxRQUEvQmtzQixFQUFRL0MsRUFBUSxJQUFNeG5CLE1BQzVCLElBQXJCK1gsRUFBUXJCLFVBQWtCa0YsR0FBa0JWLEVBQUt3SixTQUFVOEMsRUFBUSxHQUFJeG5CLE1BQVMsQ0FJaEYsS0FGQStYLEdBQVltRCxFQUFLNWEsS0FBVyxHQUFHaXFCLEVBQU0xUCxRQUFTLEdBQzVDOWQsUUFBU2loQixHQUFXQyxJQUFhbEcsSUFBYSxJQUFNLElBRXJELE9BQU8yQyxFQUdJOFAsSUFDWHpTLEVBQVVBLEVBQVF6TCxZQUduQndMLEVBQVdBLEVBQVN4YSxNQUFPa3FCLEVBQU9oSCxRQUFRMWpCLE1BQU11QixRQUtqRCxJQURBdUUsRUFBSTZhLEVBQTBCLGFBQUV6YSxLQUFNOFUsR0FBYSxFQUFJMFAsRUFBT25wQixPQUN0RHVFLE1BQ1AybkIsRUFBUS9DLEVBQVE1a0IsSUFHWHNZLEVBQUt3SixTQUFZMWtCLEVBQU91cUIsRUFBTXZxQixRQUduQyxJQUFPTSxFQUFPNGEsRUFBSzVhLEtBQU1OLE1BR2pCbWYsRUFBTzdlLEVBQ2JpcUIsRUFBTTFQLFFBQVMsR0FBSTlkLFFBQVNpaEIsR0FBV0MsSUFDdkNGLEdBQVMvYSxLQUFNd2tCLEVBQVEsR0FBSXhuQixPQUFVZ2dCLEdBQWFqSSxFQUFRekwsYUFDekR5TCxJQUNJLENBS0wsR0FGQXlQLEVBQU8vTixPQUFRN1csRUFBRyxLQUNsQmtWLEVBQVdxSCxFQUFLOWdCLFFBQVU2aEIsR0FBWXNILElBR3JDLE9BREEvb0IsRUFBS3dYLE1BQU95RSxFQUFTeUUsR0FDZHpFLEVBR1IsT0FlSixPQVBFOFAsR0FBWWxQLEVBQVN4RCxFQUFVd0gsSUFDaENILEVBQ0FwSCxHQUNDNkQsRUFDRGxCLEdBQ0MzQyxHQUFXZ0csR0FBUy9hLEtBQU04VSxJQUFja0ksR0FBYWpJLEVBQVF6TCxhQUFnQnlMLEdBRXhFMkMsR0FNUm5FLEVBQVE2TixXQUFhcEssRUFBUXhjLE1BQU8sSUFBS2djLEtBQU1nRCxHQUFZbkssS0FBTSxNQUFTMkgsRUFJMUV6RCxFQUFRNE4sbUJBQXFCMUksRUFHN0JDLElBSUFuRixFQUFRaU4sYUFBZTlDLElBQVEsU0FBVTdaLEdBR3hDLE9BQTRFLEVBQXJFQSxFQUFHdWMsd0JBQXlCL2IsRUFBUytQLGNBQWUsZ0JBTXREc0osSUFBUSxTQUFVN1osR0FFdkIsT0FEQUEsRUFBR2djLFVBQVksbUJBQ2lDLE1BQXpDaGMsRUFBR3lkLFdBQVdoTixhQUFjLFlBRW5DcUosR0FBVywwQkFBMEIsU0FBVTlILEVBQU0zSyxFQUFNa04sR0FDMUQsSUFBTUEsRUFDTCxPQUFPdkMsRUFBS3ZCLGFBQWNwSixFQUE2QixTQUF2QkEsRUFBS3BPLGNBQTJCLEVBQUksTUFPakV5VyxFQUFReUcsWUFBZTBELElBQVEsU0FBVTdaLEdBRzlDLE9BRkFBLEVBQUdnYyxVQUFZLFdBQ2ZoYyxFQUFHeWQsV0FBVy9NLGFBQWMsUUFBUyxJQUNZLEtBQTFDMVEsRUFBR3lkLFdBQVdoTixhQUFjLGFBRW5DcUosR0FBVyxTQUFTLFNBQVU5SCxFQUFNNFIsRUFBT3JQLEdBQzFDLElBQU1BLEdBQXlDLFVBQWhDdkMsRUFBS2tHLFNBQVNqZixjQUM1QixPQUFPK1ksRUFBSzZSLGdCQU9UaEssSUFBUSxTQUFVN1osR0FDdkIsT0FBd0MsTUFBakNBLEVBQUd5USxhQUFjLGdCQUV4QnFKLEdBQVc5RCxHQUFVLFNBQVVoRSxFQUFNM0ssRUFBTWtOLEdBQzFDLElBQUl0VSxFQUNKLElBQU1zVSxFQUNMLE9BQXdCLElBQWpCdkMsRUFBTTNLLEdBQWtCQSxFQUFLcE8sZUFDakNnSCxFQUFNK1IsRUFBSzRKLGlCQUFrQnZVLEtBQVlwSCxFQUFJaWQsVUFDOUNqZCxFQUFJaEssTUFDSixRQUtFbWUsR0ExNEVQLENBNDRFSzVmLEdBSUx3YyxFQUFPdlgsS0FBTzJhLEVBQ2RwRCxFQUFPK0wsS0FBTzNJLEVBQU91SixVQUdyQjNNLEVBQU8rTCxLQUFNLEtBQVEvTCxFQUFPK0wsS0FBSzNHLFFBQ2pDcEYsRUFBT29NLFdBQWFwTSxFQUFPOFMsT0FBUzFQLEVBQU9nSixXQUMzQ3BNLEVBQU9SLEtBQU80RCxFQUFPRSxRQUNyQnRELEVBQU8rUyxTQUFXM1AsRUFBT0csTUFDekJ2RCxFQUFPa0UsU0FBV2QsRUFBT2MsU0FDekJsRSxFQUFPZ1QsZUFBaUI1UCxFQUFPaUQsT0FLL0IsSUFBSWMsRUFBTSxTQUFVbkcsRUFBTW1HLEVBQUs4TCxHQUk5QixJQUhBLElBQUkxRSxFQUFVLEdBQ2IyRSxPQUFxQjlnQixJQUFWNmdCLEdBRUZqUyxFQUFPQSxFQUFNbUcsS0FBNkIsSUFBbEJuRyxFQUFLbkMsVUFDdEMsR0FBdUIsSUFBbEJtQyxFQUFLbkMsU0FBaUIsQ0FDMUIsR0FBS3FVLEdBQVlsVCxFQUFRZ0IsR0FBT21TLEdBQUlGLEdBQ25DLE1BRUQxRSxFQUFRM25CLEtBQU1vYSxHQUdoQixPQUFPdU4sR0FJSjZFLEVBQVcsU0FBVWxYLEVBQUc4RSxHQUczQixJQUZBLElBQUl1TixFQUFVLEdBRU5yUyxFQUFHQSxFQUFJQSxFQUFFb04sWUFDSSxJQUFmcE4sRUFBRTJDLFVBQWtCM0MsSUFBTThFLEdBQzlCdU4sRUFBUTNuQixLQUFNc1YsR0FJaEIsT0FBT3FTLEdBSUo4RSxFQUFnQnJULEVBQU8rTCxLQUFLdEUsTUFBTTZMLGFBSXRDLFNBQVNwTSxFQUFVbEcsRUFBTTNLLEdBRXhCLE9BQU8ySyxFQUFLa0csVUFBWWxHLEVBQUtrRyxTQUFTamYsZ0JBQWtCb08sRUFBS3BPLGNBRzlELElBQUlzckIsRUFBYSxrRUFLakIsU0FBU0MsRUFBUXhILEVBQVV5SCxFQUFXQyxHQUNyQyxPQUFLL1UsRUFBWThVLEdBQ1R6VCxFQUFPc0IsS0FBTTBLLEdBQVUsU0FBVWhMLEVBQU1qVyxHQUM3QyxRQUFTMG9CLEVBQVV4ZCxLQUFNK0ssRUFBTWpXLEVBQUdpVyxLQUFXMFMsS0FLMUNELEVBQVU1VSxTQUNQbUIsRUFBT3NCLEtBQU0wSyxHQUFVLFNBQVVoTCxHQUN2QyxPQUFTQSxJQUFTeVMsSUFBZ0JDLEtBS1YsaUJBQWRELEVBQ0p6VCxFQUFPc0IsS0FBTTBLLEdBQVUsU0FBVWhMLEdBQ3ZDLE9BQVN0YixFQUFRdVEsS0FBTXdkLEVBQVd6UyxJQUFVLElBQVEwUyxLQUsvQzFULEVBQU8wSyxPQUFRK0ksRUFBV3pILEVBQVUwSCxHQUc1QzFULEVBQU8wSyxPQUFTLFNBQVVxQixFQUFNckwsRUFBT2dULEdBQ3RDLElBQUkxUyxFQUFPTixFQUFPLEdBTWxCLE9BSktnVCxJQUNKM0gsRUFBTyxRQUFVQSxFQUFPLEtBR0gsSUFBakJyTCxFQUFNbGEsUUFBa0MsSUFBbEJ3YSxFQUFLbkMsU0FDeEJtQixFQUFPdlgsS0FBS3dpQixnQkFBaUJqSyxFQUFNK0ssR0FBUyxDQUFFL0ssR0FBUyxHQUd4RGhCLEVBQU92WCxLQUFLdWEsUUFBUytJLEVBQU0vTCxFQUFPc0IsS0FBTVosR0FBTyxTQUFVTSxHQUMvRCxPQUF5QixJQUFsQkEsRUFBS25DLGNBSWRtQixFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQnBaLEtBQU0sU0FBVXdYLEdBQ2YsSUFBSWxWLEVBQUc0VixFQUNOdlIsRUFBTTdLLEtBQUtpQyxPQUNYOUMsRUFBT2EsS0FFUixHQUF5QixpQkFBYjBiLEVBQ1gsT0FBTzFiLEtBQUtrYyxVQUFXVCxFQUFRQyxHQUFXeUssUUFBUSxXQUNqRCxJQUFNM2YsRUFBSSxFQUFHQSxFQUFJcUUsRUFBS3JFLElBQ3JCLEdBQUtpVixFQUFPa0UsU0FBVXhnQixFQUFNcUgsR0FBS3hHLE1BQ2hDLE9BQU8sTUFRWCxJQUZBb2MsRUFBTXBjLEtBQUtrYyxVQUFXLElBRWhCMVYsRUFBSSxFQUFHQSxFQUFJcUUsRUFBS3JFLElBQ3JCaVYsRUFBT3ZYLEtBQU13WCxFQUFVdmMsRUFBTXFILEdBQUs0VixHQUduQyxPQUFPdlIsRUFBTSxFQUFJNFEsRUFBT29NLFdBQVl6TCxHQUFRQSxHQUU3QytKLE9BQVEsU0FBVXpLLEdBQ2pCLE9BQU8xYixLQUFLa2MsVUFBVytTLEVBQVFqdkIsS0FBTTBiLEdBQVksSUFBSSxLQUV0RHlULElBQUssU0FBVXpULEdBQ2QsT0FBTzFiLEtBQUtrYyxVQUFXK1MsRUFBUWp2QixLQUFNMGIsR0FBWSxJQUFJLEtBRXREa1QsR0FBSSxTQUFVbFQsR0FDYixRQUFTdVQsRUFDUmp2QixLQUlvQixpQkFBYjBiLEdBQXlCb1QsRUFBY2xvQixLQUFNOFUsR0FDbkRELEVBQVFDLEdBQ1JBLEdBQVksSUFDYixHQUNDelosVUFTSixJQUFJbXRCLEVBTUgxTixFQUFhLHVDQUVOakcsRUFBT0csR0FBR2xOLEtBQU8sU0FBVWdOLEVBQVVDLEVBQVM1TixHQUNwRCxJQUFJbVYsRUFBT3pHLEVBR1gsSUFBTWYsRUFDTCxPQUFPMWIsS0FRUixHQUhBK04sRUFBT0EsR0FBUXFoQixFQUdVLGlCQUFiMVQsRUFBd0IsQ0FhbkMsS0FQQ3dILEVBTHNCLE1BQWxCeEgsRUFBVSxJQUNzQixNQUFwQ0EsRUFBVUEsRUFBU3paLE9BQVMsSUFDNUJ5WixFQUFTelosUUFBVSxFQUdYLENBQUUsS0FBTXlaLEVBQVUsTUFHbEJnRyxFQUFXNkIsS0FBTTdILE1BSVZ3SCxFQUFPLElBQVF2SCxFQTZDeEIsT0FBTUEsR0FBV0EsRUFBUUcsUUFDdEJILEdBQVc1TixHQUFPN0osS0FBTXdYLEdBSzFCMWIsS0FBSzZYLFlBQWE4RCxHQUFVelgsS0FBTXdYLEdBaER6QyxHQUFLd0gsRUFBTyxHQUFNLENBWWpCLEdBWEF2SCxFQUFVQSxhQUFtQkYsRUFBU0UsRUFBUyxHQUFNQSxFQUlyREYsRUFBT1ksTUFBT3JjLEtBQU15YixFQUFPNFQsVUFDMUJuTSxFQUFPLEdBQ1B2SCxHQUFXQSxFQUFRckIsU0FBV3FCLEVBQVEySCxlQUFpQjNILEVBQVUxUSxHQUNqRSxJQUlJK2pCLEVBQVdwb0IsS0FBTXNjLEVBQU8sS0FBU3pILEVBQU9rQyxjQUFlaEMsR0FDM0QsSUFBTXVILEtBQVN2SCxFQUdUdkIsRUFBWXBhLEtBQU1rakIsSUFDdEJsakIsS0FBTWtqQixHQUFTdkgsRUFBU3VILElBSXhCbGpCLEtBQUswbkIsS0FBTXhFLEVBQU92SCxFQUFTdUgsSUFLOUIsT0FBT2xqQixLQVlQLE9BUkF5YyxFQUFPeFIsRUFBU3VZLGVBQWdCTixFQUFPLE9BS3RDbGpCLEtBQU0sR0FBTXljLEVBQ1p6YyxLQUFLaUMsT0FBUyxHQUVSakMsS0FjSCxPQUFLMGIsRUFBU3BCLFVBQ3BCdGEsS0FBTSxHQUFNMGIsRUFDWjFiLEtBQUtpQyxPQUFTLEVBQ1BqQyxNQUlJb2EsRUFBWXNCLFFBQ0Q3TixJQUFmRSxFQUFLdWhCLE1BQ1h2aEIsRUFBS3VoQixNQUFPNVQsR0FHWkEsRUFBVUQsR0FHTEEsRUFBTzRDLFVBQVczQyxFQUFVMWIsUUFJaENRLFVBQVlpYixFQUFPRyxHQUd4QndULEVBQWEzVCxFQUFReFEsR0FHckIsSUFBSXNrQixFQUFlLGlDQUdsQkMsRUFBbUIsQ0FDbEJDLFVBQVUsRUFDVkMsVUFBVSxFQUNWclksTUFBTSxFQUNOcFAsTUFBTSxHQW9GUixTQUFTMG5CLEVBQVMvSyxFQUFLaEMsR0FDdEIsTUFBVWdDLEVBQU1BLEVBQUtoQyxLQUE0QixJQUFqQmdDLEVBQUl0SyxXQUNwQyxPQUFPc0ssRUFuRlJuSixFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQnNTLElBQUssU0FBVWxqQixHQUNkLElBQUltakIsRUFBVXBVLEVBQVEvTyxFQUFRMU0sTUFDN0I4dkIsRUFBSUQsRUFBUTV0QixPQUViLE9BQU9qQyxLQUFLbW1CLFFBQVEsV0FFbkIsSUFEQSxJQUFJM2YsRUFBSSxFQUNBQSxFQUFJc3BCLEVBQUd0cEIsSUFDZCxHQUFLaVYsRUFBT2tFLFNBQVUzZixLQUFNNnZCLEVBQVNycEIsSUFDcEMsT0FBTyxNQU1YdXBCLFFBQVMsU0FBVTNILEVBQVd6TSxHQUM3QixJQUFJaUosRUFDSHBlLEVBQUksRUFDSnNwQixFQUFJOXZCLEtBQUtpQyxPQUNUK25CLEVBQVUsR0FDVjZGLEVBQStCLGlCQUFkekgsR0FBMEIzTSxFQUFRMk0sR0FHcEQsSUFBTTBHLEVBQWNsb0IsS0FBTXdoQixHQUN6QixLQUFRNWhCLEVBQUlzcEIsRUFBR3RwQixJQUNkLElBQU1vZSxFQUFNNWtCLEtBQU13RyxHQUFLb2UsR0FBT0EsSUFBUWpKLEVBQVNpSixFQUFNQSxFQUFJMVUsV0FHeEQsR0FBSzBVLEVBQUl0SyxTQUFXLEtBQVF1VixFQUMzQkEsRUFBUWx0QixNQUFPaWlCLElBQVMsRUFHUCxJQUFqQkEsRUFBSXRLLFVBQ0htQixFQUFPdlgsS0FBS3dpQixnQkFBaUI5QixFQUFLd0QsSUFBZ0IsQ0FFbkQ0QixFQUFRM25CLEtBQU11aUIsR0FDZCxNQU1KLE9BQU81a0IsS0FBS2tjLFVBQVc4TixFQUFRL25CLE9BQVMsRUFBSXdaLEVBQU9vTSxXQUFZbUMsR0FBWUEsSUFJNUVybkIsTUFBTyxTQUFVOFosR0FHaEIsT0FBTUEsRUFLZSxpQkFBVEEsRUFDSnRiLEVBQVF1USxLQUFNK0osRUFBUWdCLEdBQVF6YyxLQUFNLElBSXJDbUIsRUFBUXVRLEtBQU0xUixLQUdwQnljLEVBQUtYLE9BQVNXLEVBQU0sR0FBTUEsR0FaakJ6YyxLQUFNLElBQU9BLEtBQU0sR0FBSWtRLFdBQWVsUSxLQUFLMmMsUUFBUXFULFVBQVUvdEIsUUFBVSxHQWdCbEZndUIsSUFBSyxTQUFVdlUsRUFBVUMsR0FDeEIsT0FBTzNiLEtBQUtrYyxVQUNYVCxFQUFPb00sV0FDTnBNLEVBQU9ZLE1BQU9yYyxLQUFLZ2MsTUFBT1AsRUFBUUMsRUFBVUMsT0FLL0N1VSxRQUFTLFNBQVV4VSxHQUNsQixPQUFPMWIsS0FBS2l3QixJQUFpQixNQUFadlUsRUFDaEIxYixLQUFLc2MsV0FBYXRjLEtBQUtzYyxXQUFXNkosT0FBUXpLLE9BVTdDRCxFQUFPYyxLQUFNLENBQ1p4USxPQUFRLFNBQVUwUSxHQUNqQixJQUFJMVEsRUFBUzBRLEVBQUt2TSxXQUNsQixPQUFPbkUsR0FBOEIsS0FBcEJBLEVBQU91TyxTQUFrQnZPLEVBQVMsTUFFcERva0IsUUFBUyxTQUFVMVQsR0FDbEIsT0FBT21HLEVBQUtuRyxFQUFNLGVBRW5CMlQsYUFBYyxTQUFVM1QsRUFBTW5HLEVBQUlvWSxHQUNqQyxPQUFPOUwsRUFBS25HLEVBQU0sYUFBY2lTLElBRWpDclgsS0FBTSxTQUFVb0YsR0FDZixPQUFPa1QsRUFBU2xULEVBQU0sZ0JBRXZCeFUsS0FBTSxTQUFVd1UsR0FDZixPQUFPa1QsRUFBU2xULEVBQU0sb0JBRXZCNFQsUUFBUyxTQUFVNVQsR0FDbEIsT0FBT21HLEVBQUtuRyxFQUFNLGdCQUVuQnVULFFBQVMsU0FBVXZULEdBQ2xCLE9BQU9tRyxFQUFLbkcsRUFBTSxvQkFFbkI2VCxVQUFXLFNBQVU3VCxFQUFNbkcsRUFBSW9ZLEdBQzlCLE9BQU85TCxFQUFLbkcsRUFBTSxjQUFlaVMsSUFFbEM2QixVQUFXLFNBQVU5VCxFQUFNbkcsRUFBSW9ZLEdBQzlCLE9BQU85TCxFQUFLbkcsRUFBTSxrQkFBbUJpUyxJQUV0Q0csU0FBVSxTQUFVcFMsR0FDbkIsT0FBT29TLEdBQVlwUyxFQUFLdk0sWUFBYyxJQUFLZ1ksV0FBWXpMLElBRXhEZ1QsU0FBVSxTQUFVaFQsR0FDbkIsT0FBT29TLEVBQVVwUyxFQUFLeUwsYUFFdkJ3SCxTQUFVLFNBQVVqVCxHQUNuQixPQUE2QixNQUF4QkEsRUFBSytULGlCQUtUL1csRUFBVWdELEVBQUsrVCxpQkFFUi9ULEVBQUsrVCxpQkFNUjdOLEVBQVVsRyxFQUFNLGNBQ3BCQSxFQUFPQSxFQUFLekcsU0FBV3lHLEdBR2pCaEIsRUFBT1ksTUFBTyxHQUFJSSxFQUFLb0csZ0JBRTdCLFNBQVUvUSxFQUFNOEosR0FDbEJILEVBQU9HLEdBQUk5SixHQUFTLFNBQVU0YyxFQUFPaFQsR0FDcEMsSUFBSXNPLEVBQVV2TyxFQUFPM1osSUFBSzlCLEtBQU00YixFQUFJOFMsR0F1QnBDLE1BckIwQixVQUFyQjVjLEVBQUs1USxPQUFRLEtBQ2pCd2EsRUFBV2dULEdBR1BoVCxHQUFnQyxpQkFBYkEsSUFDdkJzTyxFQUFVdk8sRUFBTzBLLE9BQVF6SyxFQUFVc08sSUFHL0JocUIsS0FBS2lDLE9BQVMsSUFHWnV0QixFQUFrQjFkLElBQ3ZCMkosRUFBT29NLFdBQVltQyxHQUlmdUYsRUFBYTNvQixLQUFNa0wsSUFDdkJrWSxFQUFRbm9CLFdBSUg3QixLQUFLa2MsVUFBVzhOLE9BR3pCLElBQUl5RyxFQUFnQixvQkFzT3BCLFNBQVNDLEVBQVVDLEdBQ2xCLE9BQU9BLEVBRVIsU0FBU0MsRUFBUzFsQixHQUNqQixNQUFNQSxFQUdQLFNBQVMybEIsRUFBWW53QixFQUFPb3dCLEVBQVNDLEVBQVFDLEdBQzVDLElBQUlDLEVBRUosSUFHTXZ3QixHQUFTMFosRUFBYzZXLEVBQVN2d0IsRUFBTXd3QixTQUMxQ0QsRUFBT3ZmLEtBQU1oUixHQUFRNFcsS0FBTXdaLEdBQVVLLEtBQU1KLEdBR2hDcndCLEdBQVMwWixFQUFjNlcsRUFBU3Z3QixFQUFNMHdCLE1BQ2pESCxFQUFPdmYsS0FBTWhSLEVBQU9vd0IsRUFBU0MsR0FRN0JELEVBQVFqWCxXQUFPaE0sRUFBVyxDQUFFbk4sR0FBUVEsTUFBTzh2QixJQU0zQyxNQUFRdHdCLEdBSVRxd0IsRUFBT2xYLFdBQU9oTSxFQUFXLENBQUVuTixLQXZPN0IrYSxFQUFPNFYsVUFBWSxTQUFVclksR0FJNUJBLEVBQTZCLGlCQUFaQSxFQWxDbEIsU0FBd0JBLEdBQ3ZCLElBQUlzWSxFQUFTLEdBSWIsT0FIQTdWLEVBQU9jLEtBQU12RCxFQUFRa0ssTUFBT3VOLElBQW1CLElBQUksU0FBVWMsRUFBR0MsR0FDL0RGLEVBQVFFLElBQVMsS0FFWEYsRUE4Qk5HLENBQWV6WSxHQUNmeUMsRUFBTzZCLE9BQVEsR0FBSXRFLEdBRXBCLElBQ0MwWSxFQUdBQyxFQUdBQyxFQUdBQyxFQUdBL2IsRUFBTyxHQUdQZ2MsRUFBUSxHQUdSQyxHQUFlLEVBR2ZDLEVBQU8sV0FRTixJQUxBSCxFQUFTQSxHQUFVN1ksRUFBUWlaLEtBSTNCTCxFQUFRRixHQUFTLEVBQ1RJLEVBQU03dkIsT0FBUTh2QixHQUFlLEVBRXBDLElBREFKLEVBQVNHLEVBQU0xTixVQUNMMk4sRUFBY2pjLEVBQUs3VCxTQUdtQyxJQUExRDZULEVBQU1pYyxHQUFjbFksTUFBTzhYLEVBQVEsR0FBS0EsRUFBUSxLQUNwRDNZLEVBQVFrWixjQUdSSCxFQUFjamMsRUFBSzdULE9BQ25CMHZCLEdBQVMsR0FNTjNZLEVBQVEyWSxTQUNiQSxHQUFTLEdBR1ZELEdBQVMsRUFHSkcsSUFJSC9iLEVBREk2YixFQUNHLEdBSUEsS0FNVnh5QixFQUFPLENBR044d0IsSUFBSyxXQTJCSixPQTFCS25hLElBR0M2YixJQUFXRCxJQUNmSyxFQUFjamMsRUFBSzdULE9BQVMsRUFDNUI2dkIsRUFBTXp2QixLQUFNc3ZCLElBR2IsU0FBVzFCLEVBQUtwRyxHQUNmcE8sRUFBT2MsS0FBTXNOLEdBQU0sU0FBVTBILEVBQUc1UyxHQUMxQnZFLEVBQVl1RSxHQUNWM0YsRUFBUXVWLFFBQVdwdkIsRUFBS3l3QixJQUFLalIsSUFDbEM3SSxFQUFLelQsS0FBTXNjLEdBRURBLEdBQU9BLEVBQUkxYyxRQUE0QixXQUFsQnNaLEVBQVFvRCxJQUd4Q3NSLEVBQUt0UixNQVRSLENBWUtqQyxXQUVBaVYsSUFBV0QsR0FDZk0sS0FHS2h5QixNQUlSbXlCLE9BQVEsV0FZUCxPQVhBMVcsRUFBT2MsS0FBTUcsV0FBVyxTQUFVNlUsRUFBRzVTLEdBRXBDLElBREEsSUFBSWhjLEdBQ01BLEVBQVE4WSxFQUFPOEMsUUFBU0ksRUFBSzdJLEVBQU1uVCxLQUFhLEdBQ3pEbVQsRUFBS3VILE9BQVExYSxFQUFPLEdBR2ZBLEdBQVNvdkIsR0FDYkEsT0FJSS94QixNQUtSNHZCLElBQUssU0FBVWhVLEdBQ2QsT0FBT0EsRUFDTkgsRUFBTzhDLFFBQVMzQyxFQUFJOUYsSUFBVSxFQUM5QkEsRUFBSzdULE9BQVMsR0FJaEJtd0IsTUFBTyxXQUlOLE9BSEt0YyxJQUNKQSxFQUFPLElBRUQ5VixNQU1ScXlCLFFBQVMsV0FHUixPQUZBUixFQUFTQyxFQUFRLEdBQ2pCaGMsRUFBTzZiLEVBQVMsR0FDVDN4QixNQUVSMGlCLFNBQVUsV0FDVCxPQUFRNU0sR0FNVHdjLEtBQU0sV0FLTCxPQUpBVCxFQUFTQyxFQUFRLEdBQ1hILEdBQVdELElBQ2hCNWIsRUFBTzZiLEVBQVMsSUFFVjN4QixNQUVSNnhCLE9BQVEsV0FDUCxRQUFTQSxHQUlWVSxTQUFVLFNBQVU1VyxFQUFTa08sR0FTNUIsT0FSTWdJLElBRUxoSSxFQUFPLENBQUVsTyxHQURUa08sRUFBT0EsR0FBUSxJQUNRM29CLE1BQVEyb0IsRUFBSzNvQixRQUFVMm9CLEdBQzlDaUksRUFBTXp2QixLQUFNd25CLEdBQ042SCxHQUNMTSxLQUdLaHlCLE1BSVJneUIsS0FBTSxXQUVMLE9BREE3eUIsRUFBS296QixTQUFVdnlCLEtBQU0wYyxXQUNkMWMsTUFJUjR4QixNQUFPLFdBQ04sUUFBU0EsSUFJWixPQUFPenlCLEdBNENSc2MsRUFBTzZCLE9BQVEsQ0FFZGtWLFNBQVUsU0FBVUMsR0FDbkIsSUFBSUMsRUFBUyxDQUlYLENBQUUsU0FBVSxXQUFZalgsRUFBTzRWLFVBQVcsVUFDekM1VixFQUFPNFYsVUFBVyxVQUFZLEdBQy9CLENBQUUsVUFBVyxPQUFRNVYsRUFBTzRWLFVBQVcsZUFDdEM1VixFQUFPNFYsVUFBVyxlQUFpQixFQUFHLFlBQ3ZDLENBQUUsU0FBVSxPQUFRNVYsRUFBTzRWLFVBQVcsZUFDckM1VixFQUFPNFYsVUFBVyxlQUFpQixFQUFHLGFBRXhDc0IsRUFBUSxVQUNSekIsRUFBVSxDQUNUeUIsTUFBTyxXQUNOLE9BQU9BLEdBRVJDLE9BQVEsV0FFUCxPQURBQyxFQUFTdmIsS0FBTW9GLFdBQVl5VSxLQUFNelUsV0FDMUIxYyxNQUVSLE1BQVMsU0FBVTRiLEdBQ2xCLE9BQU9zVixFQUFRRSxLQUFNLEtBQU14VixJQUk1QmtYLEtBQU0sV0FDTCxJQUFJQyxFQUFNclcsVUFFVixPQUFPakIsRUFBTytXLFVBQVUsU0FBVVEsR0FDakN2WCxFQUFPYyxLQUFNbVcsR0FBUSxTQUFVcGMsRUFBSTJjLEdBR2xDLElBQUlyWCxFQUFLeEIsRUFBWTJZLEVBQUtFLEVBQU8sTUFBV0YsRUFBS0UsRUFBTyxJQUt4REosRUFBVUksRUFBTyxLQUFPLFdBQ3ZCLElBQUlDLEVBQVd0WCxHQUFNQSxFQUFHL0IsTUFBTzdaLEtBQU0wYyxXQUNoQ3dXLEdBQVk5WSxFQUFZOFksRUFBU2hDLFNBQ3JDZ0MsRUFBU2hDLFVBQ1BpQyxTQUFVSCxFQUFTSSxRQUNuQjliLEtBQU0wYixFQUFTbEMsU0FDZkssS0FBTTZCLEVBQVNqQyxRQUVqQmlDLEVBQVVDLEVBQU8sR0FBTSxRQUN0Qmp6QixLQUNBNGIsRUFBSyxDQUFFc1gsR0FBYXhXLGlCQUt4QnFXLEVBQU0sUUFDSDdCLFdBRUxFLEtBQU0sU0FBVWlDLEVBQWFDLEVBQVlDLEdBQ3hDLElBQUlDLEVBQVcsRUFDZixTQUFTMUMsRUFBUzJDLEVBQU9aLEVBQVVwTyxFQUFTaVAsR0FDM0MsT0FBTyxXQUNOLElBQUlDLEVBQU8zekIsS0FDVjZwQixFQUFPbk4sVUFDUGtYLEVBQWEsV0FDWixJQUFJVixFQUFVOUIsRUFLZCxLQUFLcUMsRUFBUUQsR0FBYixDQVFBLElBSkFOLEVBQVd6TyxFQUFRNUssTUFBTzhaLEVBQU05SixNQUlkZ0osRUFBUzNCLFVBQzFCLE1BQU0sSUFBSWxaLFVBQVcsNEJBT3RCb1osRUFBTzhCLElBS2dCLGlCQUFiQSxHQUNZLG1CQUFiQSxJQUNSQSxFQUFTOUIsS0FHTGhYLEVBQVlnWCxHQUdYc0MsRUFDSnRDLEVBQUsxZixLQUNKd2hCLEVBQ0FwQyxFQUFTMEMsRUFBVVgsRUFBVW5DLEVBQVVnRCxHQUN2QzVDLEVBQVMwQyxFQUFVWCxFQUFVakMsRUFBUzhDLEtBT3ZDRixJQUVBcEMsRUFBSzFmLEtBQ0p3aEIsRUFDQXBDLEVBQVMwQyxFQUFVWCxFQUFVbkMsRUFBVWdELEdBQ3ZDNUMsRUFBUzBDLEVBQVVYLEVBQVVqQyxFQUFTOEMsR0FDdEM1QyxFQUFTMEMsRUFBVVgsRUFBVW5DLEVBQzVCbUMsRUFBU2dCLGVBU1BwUCxJQUFZaU0sSUFDaEJpRCxPQUFPOWxCLEVBQ1BnYyxFQUFPLENBQUVxSixLQUtSUSxHQUFXYixFQUFTaUIsYUFBZUgsRUFBTTlKLE1BSzdDa0ssRUFBVUwsRUFDVEUsRUFDQSxXQUNDLElBQ0NBLElBQ0MsTUFBUWhvQixHQUVKNlAsRUFBTytXLFNBQVN3QixlQUNwQnZZLEVBQU8rVyxTQUFTd0IsY0FBZXBvQixFQUM5Qm1vQixFQUFRRSxZQU1MUixFQUFRLEdBQUtELElBSVovTyxJQUFZbU0sSUFDaEIrQyxPQUFPOWxCLEVBQ1BnYyxFQUFPLENBQUVqZSxJQUdWaW5CLEVBQVNxQixXQUFZUCxFQUFNOUosTUFTM0I0SixFQUNKTSxLQUtLdFksRUFBTytXLFNBQVMyQixlQUNwQkosRUFBUUUsV0FBYXhZLEVBQU8rVyxTQUFTMkIsZ0JBRXRDbDFCLEVBQU82TCxXQUFZaXBCLEtBS3RCLE9BQU90WSxFQUFPK1csVUFBVSxTQUFVUSxHQUdqQ04sRUFBUSxHQUFLLEdBQUl6QyxJQUNoQmEsRUFDQyxFQUNBa0MsRUFDQTVZLEVBQVltWixHQUNYQSxFQUNBN0MsRUFDRHNDLEVBQVNhLGFBS1huQixFQUFRLEdBQUssR0FBSXpDLElBQ2hCYSxFQUNDLEVBQ0FrQyxFQUNBNVksRUFBWWlaLEdBQ1hBLEVBQ0EzQyxJQUtIZ0MsRUFBUSxHQUFLLEdBQUl6QyxJQUNoQmEsRUFDQyxFQUNBa0MsRUFDQTVZLEVBQVlrWixHQUNYQSxFQUNBMUMsT0FHQU0sV0FLTEEsUUFBUyxTQUFVN1csR0FDbEIsT0FBYyxNQUFQQSxFQUFjb0IsRUFBTzZCLE9BQVFqRCxFQUFLNlcsR0FBWUEsSUFHdkQyQixFQUFXLEdBa0VaLE9BL0RBcFgsRUFBT2MsS0FBTW1XLEdBQVEsU0FBVWxzQixFQUFHeXNCLEdBQ2pDLElBQUluZCxFQUFPbWQsRUFBTyxHQUNqQm1CLEVBQWNuQixFQUFPLEdBS3RCL0IsRUFBUytCLEVBQU8sSUFBUW5kLEVBQUttYSxJQUd4Qm1FLEdBQ0p0ZSxFQUFLbWEsS0FDSixXQUlDMEMsRUFBUXlCLElBS1QxQixFQUFRLEVBQUlsc0IsR0FBSyxHQUFJNnJCLFFBSXJCSyxFQUFRLEVBQUlsc0IsR0FBSyxHQUFJNnJCLFFBR3JCSyxFQUFRLEdBQUssR0FBSUosS0FHakJJLEVBQVEsR0FBSyxHQUFJSixNQU9uQnhjLEVBQUttYSxJQUFLZ0QsRUFBTyxHQUFJakIsTUFLckJhLEVBQVVJLEVBQU8sSUFBUSxXQUV4QixPQURBSixFQUFVSSxFQUFPLEdBQU0sUUFBVWp6QixPQUFTNnlCLE9BQVdobEIsRUFBWTdOLEtBQU0wYyxXQUNoRTFjLE1BTVI2eUIsRUFBVUksRUFBTyxHQUFNLFFBQVduZCxFQUFLeWMsWUFJeENyQixFQUFRQSxRQUFTMkIsR0FHWkosR0FDSkEsRUFBSy9nQixLQUFNbWhCLEVBQVVBLEdBSWZBLEdBSVJ3QixLQUFNLFNBQVVDLEdBQ2YsSUFHQ0MsRUFBWTdYLFVBQVV6YSxPQUd0QnVFLEVBQUkrdEIsRUFHSkMsRUFBa0I5ZCxNQUFPbFEsR0FDekJpdUIsRUFBZ0J2ekIsRUFBTXdRLEtBQU1nTCxXQUc1QmdZLEVBQVVqWixFQUFPK1csV0FHakJtQyxFQUFhLFNBQVVudUIsR0FDdEIsT0FBTyxTQUFVOUYsR0FDaEI4ekIsRUFBaUJodUIsR0FBTXhHLEtBQ3ZCeTBCLEVBQWVqdUIsR0FBTWtXLFVBQVV6YSxPQUFTLEVBQUlmLEVBQU13USxLQUFNZ0wsV0FBY2hjLElBQzVENnpCLEdBQ1RHLEVBQVFaLFlBQWFVLEVBQWlCQyxLQU0xQyxHQUFLRixHQUFhLElBQ2pCMUQsRUFBWXlELEVBQWFJLEVBQVFwZCxLQUFNcWQsRUFBWW51QixJQUFNc3FCLFFBQVM0RCxFQUFRM0QsUUFDeEV3RCxHQUd1QixZQUFwQkcsRUFBUS9CLFNBQ1p2WSxFQUFZcWEsRUFBZWp1QixJQUFPaXVCLEVBQWVqdUIsR0FBSTRxQixPQUVyRCxPQUFPc0QsRUFBUXRELE9BS2pCLEtBQVE1cUIsS0FDUHFxQixFQUFZNEQsRUFBZWp1QixHQUFLbXVCLEVBQVludUIsR0FBS2t1QixFQUFRM0QsUUFHMUQsT0FBTzJELEVBQVF4RCxhQU9qQixJQUFJMEQsRUFBYyx5REFFbEJuWixFQUFPK1csU0FBU3dCLGNBQWdCLFNBQVVqVyxFQUFPOFcsR0FJM0M1MUIsRUFBTzRNLFNBQVc1TSxFQUFPNE0sUUFBUUMsTUFBUWlTLEdBQVM2VyxFQUFZaHVCLEtBQU1tWCxFQUFNak0sT0FDOUU3UyxFQUFPNE0sUUFBUUMsS0FBTSw4QkFBZ0NpUyxFQUFNK1csUUFBUy9XLEVBQU04VyxNQUFPQSxJQU9uRnBaLEVBQU9zWixlQUFpQixTQUFVaFgsR0FDakM5ZSxFQUFPNkwsWUFBWSxXQUNsQixNQUFNaVQsTUFRUixJQUFJaVgsRUFBWXZaLEVBQU8rVyxXQWtEdkIsU0FBU3lDLElBQ1JocUIsRUFBU2tILG9CQUFxQixtQkFBb0I4aUIsR0FDbERoMkIsRUFBT2tULG9CQUFxQixPQUFROGlCLEdBQ3BDeFosRUFBTzZULFFBbkRSN1QsRUFBT0csR0FBRzBULE1BQVEsU0FBVTFULEdBWTNCLE9BVkFvWixFQUNFNUQsS0FBTXhWLEdBS05zWixPQUFPLFNBQVVuWCxHQUNqQnRDLEVBQU9zWixlQUFnQmhYLE1BR2xCL2QsTUFHUnliLEVBQU82QixPQUFRLENBR2RRLFNBQVMsRUFJVHFYLFVBQVcsRUFHWDdGLE1BQU8sU0FBVThGLEtBR0YsSUFBVEEsSUFBa0IzWixFQUFPMFosVUFBWTFaLEVBQU9xQyxXQUtqRHJDLEVBQU9xQyxTQUFVLEdBR0gsSUFBVHNYLEtBQW1CM1osRUFBTzBaLFVBQVksR0FLM0NILEVBQVVsQixZQUFhN29CLEVBQVUsQ0FBRXdRLFFBSXJDQSxFQUFPNlQsTUFBTThCLEtBQU80RCxFQUFVNUQsS0FhRCxhQUF4Qm5tQixFQUFTb3FCLFlBQ2EsWUFBeEJwcUIsRUFBU29xQixhQUE2QnBxQixFQUFTd2EsZ0JBQWdCNlAsU0FHakVyMkIsRUFBTzZMLFdBQVkyUSxFQUFPNlQsUUFLMUJya0IsRUFBU3lFLGlCQUFrQixtQkFBb0J1bEIsR0FHL0NoMkIsRUFBT3lRLGlCQUFrQixPQUFRdWxCLElBUWxDLElBQUlNLEVBQVMsU0FBVXBaLEVBQU9QLEVBQUl2VCxFQUFLM0gsRUFBTzgwQixFQUFXQyxFQUFVQyxHQUNsRSxJQUFJbHZCLEVBQUksRUFDUHFFLEVBQU1zUixFQUFNbGEsT0FDWjB6QixFQUFjLE1BQVB0dEIsRUFHUixHQUF1QixXQUFsQmtULEVBQVFsVCxHQUVaLElBQU03QixLQUROZ3ZCLEdBQVksRUFDRG50QixFQUNWa3RCLEVBQVFwWixFQUFPUCxFQUFJcFYsRUFBRzZCLEVBQUs3QixJQUFLLEVBQU1pdkIsRUFBVUMsUUFJM0MsUUFBZTduQixJQUFWbk4sSUFDWDgwQixHQUFZLEVBRU5wYixFQUFZMVosS0FDakJnMUIsR0FBTSxHQUdGQyxJQUdDRCxHQUNKOVosRUFBR2xLLEtBQU15SyxFQUFPemIsR0FDaEJrYixFQUFLLE9BSUwrWixFQUFPL1osRUFDUEEsRUFBSyxTQUFVYSxFQUFNbVosRUFBTWwxQixHQUMxQixPQUFPaTFCLEVBQUtqa0IsS0FBTStKLEVBQVFnQixHQUFRL2IsTUFLaENrYixHQUNKLEtBQVFwVixFQUFJcUUsRUFBS3JFLElBQ2hCb1YsRUFDQ08sRUFBTzNWLEdBQUs2QixFQUFLcXRCLEVBQ2hCaDFCLEVBQ0FBLEVBQU1nUixLQUFNeUssRUFBTzNWLEdBQUtBLEVBQUdvVixFQUFJTyxFQUFPM1YsR0FBSzZCLEtBTWhELE9BQUttdEIsRUFDR3JaLEVBSUh3WixFQUNHL1osRUFBR2xLLEtBQU15SyxHQUdWdFIsRUFBTStRLEVBQUlPLEVBQU8sR0FBSzlULEdBQVFvdEIsR0FLbENJLEVBQVksUUFDZkMsRUFBYSxZQUdkLFNBQVNDLEVBQVlDLEVBQU12c0IsR0FDMUIsT0FBT0EsRUFBTzhILGNBTWYsU0FBUzBrQixFQUFXQyxHQUNuQixPQUFPQSxFQUFPdjFCLFFBQVNrMUIsRUFBVyxPQUFRbDFCLFFBQVNtMUIsRUFBWUMsR0FFaEUsSUFBSUksRUFBYSxTQUFVcDJCLEdBUTFCLE9BQTBCLElBQW5CQSxFQUFNdWEsVUFBcUMsSUFBbkJ2YSxFQUFNdWEsWUFBc0J2YSxFQUFNdWEsVUFNbEUsU0FBUzhiLElBQ1JwMkIsS0FBSzRkLFFBQVVuQyxFQUFPbUMsUUFBVXdZLEVBQUtDLE1BR3RDRCxFQUFLQyxJQUFNLEVBRVhELEVBQUs1MUIsVUFBWSxDQUVoQjBqQixNQUFPLFNBQVVua0IsR0FHaEIsSUFBSVcsRUFBUVgsRUFBT0MsS0FBSzRkLFNBNEJ4QixPQXpCTWxkLElBQ0xBLEVBQVEsR0FLSHkxQixFQUFZcDJCLEtBSVhBLEVBQU11YSxTQUNWdmEsRUFBT0MsS0FBSzRkLFNBQVlsZCxFQU14QmtYLE9BQU8wZSxlQUFnQnYyQixFQUFPQyxLQUFLNGQsUUFBUyxDQUMzQ2xkLE1BQU9BLEVBQ1A2MUIsY0FBYyxNQU1YNzFCLEdBRVI4MUIsSUFBSyxTQUFVejJCLEVBQU8wWSxFQUFNL1gsR0FDM0IsSUFBSSsxQixFQUNIdlMsRUFBUWxrQixLQUFLa2tCLE1BQU9ua0IsR0FJckIsR0FBcUIsaUJBQVQwWSxFQUNYeUwsRUFBTytSLEVBQVd4ZCxJQUFXL1gsT0FNN0IsSUFBTSsxQixLQUFRaGUsRUFDYnlMLEVBQU8rUixFQUFXUSxJQUFXaGUsRUFBTWdlLEdBR3JDLE9BQU92UyxHQUVSbEksSUFBSyxTQUFVamMsRUFBT3NJLEdBQ3JCLFlBQWV3RixJQUFSeEYsRUFDTnJJLEtBQUtra0IsTUFBT25rQixHQUdaQSxFQUFPQyxLQUFLNGQsVUFBYTdkLEVBQU9DLEtBQUs0ZCxTQUFXcVksRUFBVzV0QixLQUU3RGt0QixPQUFRLFNBQVV4MUIsRUFBT3NJLEVBQUszSCxHQWE3QixZQUFhbU4sSUFBUnhGLEdBQ0NBLEdBQXNCLGlCQUFSQSxRQUFnQ3dGLElBQVZuTixFQUVsQ1YsS0FBS2djLElBQUtqYyxFQUFPc0ksSUFTekJySSxLQUFLdzJCLElBQUt6MkIsRUFBT3NJLEVBQUszSCxRQUlMbU4sSUFBVm5OLEVBQXNCQSxFQUFRMkgsSUFFdEM4cEIsT0FBUSxTQUFVcHlCLEVBQU9zSSxHQUN4QixJQUFJN0IsRUFDSDBkLEVBQVFua0IsRUFBT0MsS0FBSzRkLFNBRXJCLFFBQWUvUCxJQUFWcVcsRUFBTCxDQUlBLFFBQWFyVyxJQUFSeEYsRUFBb0IsQ0FrQnhCN0IsR0FYQzZCLEVBSklxTyxNQUFNRSxRQUFTdk8sR0FJYkEsRUFBSXZHLElBQUttMEIsSUFFZjV0QixFQUFNNHRCLEVBQVc1dEIsTUFJSjZiLEVBQ1osQ0FBRTdiLEdBQ0FBLEVBQUk2YSxNQUFPdU4sSUFBbUIsSUFHMUJ4dUIsT0FFUixLQUFRdUUsWUFDQTBkLEVBQU83YixFQUFLN0IsVUFLUnFILElBQVJ4RixHQUFxQm9ULEVBQU8wQyxjQUFlK0YsTUFNMUNua0IsRUFBTXVhLFNBQ1Z2YSxFQUFPQyxLQUFLNGQsY0FBWS9QLFNBRWpCOU4sRUFBT0MsS0FBSzRkLFlBSXRCOFksUUFBUyxTQUFVMzJCLEdBQ2xCLElBQUlta0IsRUFBUW5rQixFQUFPQyxLQUFLNGQsU0FDeEIsWUFBaUIvUCxJQUFWcVcsSUFBd0J6SSxFQUFPMEMsY0FBZStGLEtBR3ZELElBQUl5UyxFQUFXLElBQUlQLEVBRWZRLEVBQVcsSUFBSVIsRUFjZlMsR0FBUyxnQ0FDWkMsR0FBYSxTQTJCZCxTQUFTQyxHQUFVdGEsRUFBTXBVLEVBQUtvUSxHQUM3QixJQUFJM0csRUFJSixRQUFjakUsSUFBVDRLLEdBQXdDLElBQWxCZ0UsRUFBS25DLFNBSS9CLEdBSEF4SSxFQUFPLFFBQVV6SixFQUFJMUgsUUFBU20yQixHQUFZLE9BQVFwekIsY0FHN0IsaUJBRnJCK1UsRUFBT2dFLEVBQUt2QixhQUFjcEosSUFFTSxDQUMvQixJQUNDMkcsRUFwQ0osU0FBa0JBLEdBQ2pCLE1BQWMsU0FBVEEsR0FJUyxVQUFUQSxJQUlTLFNBQVRBLEVBQ0csS0FJSEEsS0FBVUEsRUFBTyxJQUNiQSxFQUdKb2UsR0FBT2p3QixLQUFNNlIsR0FDVkYsS0FBS3llLE1BQU92ZSxHQUdiQSxHQWNHd2UsQ0FBU3hlLEdBQ2YsTUFBUTdNLElBR1ZnckIsRUFBU0osSUFBSy9aLEVBQU1wVSxFQUFLb1EsUUFFekJBLE9BQU81SyxFQUdULE9BQU80SyxFQUdSZ0QsRUFBTzZCLE9BQVEsQ0FDZG9aLFFBQVMsU0FBVWphLEdBQ2xCLE9BQU9tYSxFQUFTRixRQUFTamEsSUFBVWthLEVBQVNELFFBQVNqYSxJQUd0RGhFLEtBQU0sU0FBVWdFLEVBQU0zSyxFQUFNMkcsR0FDM0IsT0FBT21lLEVBQVNyQixPQUFROVksRUFBTTNLLEVBQU0yRyxJQUdyQ3llLFdBQVksU0FBVXphLEVBQU0zSyxHQUMzQjhrQixFQUFTekUsT0FBUTFWLEVBQU0zSyxJQUt4QnFsQixNQUFPLFNBQVUxYSxFQUFNM0ssRUFBTTJHLEdBQzVCLE9BQU9rZSxFQUFTcEIsT0FBUTlZLEVBQU0zSyxFQUFNMkcsSUFHckMyZSxZQUFhLFNBQVUzYSxFQUFNM0ssR0FDNUI2a0IsRUFBU3hFLE9BQVExVixFQUFNM0ssTUFJekIySixFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQjdFLEtBQU0sU0FBVXBRLEVBQUszSCxHQUNwQixJQUFJOEYsRUFBR3NMLEVBQU0yRyxFQUNaZ0UsRUFBT3pjLEtBQU0sR0FDYndrQixFQUFRL0gsR0FBUUEsRUFBS21FLFdBR3RCLFFBQWEvUyxJQUFSeEYsRUFBb0IsQ0FDeEIsR0FBS3JJLEtBQUtpQyxTQUNUd1csRUFBT21lLEVBQVM1YSxJQUFLUyxHQUVFLElBQWxCQSxFQUFLbkMsV0FBbUJxYyxFQUFTM2EsSUFBS1MsRUFBTSxpQkFBbUIsQ0FFbkUsSUFEQWpXLEVBQUlnZSxFQUFNdmlCLE9BQ0Z1RSxLQUlGZ2UsRUFBT2hlLElBRXNCLEtBRGpDc0wsRUFBTzBTLEVBQU9oZSxHQUFJc0wsTUFDUjNRLFFBQVMsV0FDbEIyUSxFQUFPbWtCLEVBQVdua0IsRUFBSzVRLE1BQU8sSUFDOUI2MUIsR0FBVXRhLEVBQU0zSyxFQUFNMkcsRUFBTTNHLEtBSS9CNmtCLEVBQVNILElBQUsvWixFQUFNLGdCQUFnQixHQUl0QyxPQUFPaEUsRUFJUixNQUFvQixpQkFBUnBRLEVBQ0pySSxLQUFLdWMsTUFBTSxXQUNqQnFhLEVBQVNKLElBQUt4MkIsS0FBTXFJLE1BSWZrdEIsRUFBUXYxQixNQUFNLFNBQVVVLEdBQzlCLElBQUkrWCxFQU9KLEdBQUtnRSxRQUFrQjVPLElBQVZuTixFQUtaLFlBQWNtTixLQURkNEssRUFBT21lLEVBQVM1YSxJQUFLUyxFQUFNcFUsVUFRYndGLEtBRGQ0SyxFQUFPc2UsR0FBVXRhLEVBQU1wVSxJQUxmb1EsT0FXUixFQUlEelksS0FBS3VjLE1BQU0sV0FHVnFhLEVBQVNKLElBQUt4MkIsS0FBTXFJLEVBQUszSCxRQUV4QixLQUFNQSxFQUFPZ2MsVUFBVXphLE9BQVMsRUFBRyxNQUFNLElBRzdDaTFCLFdBQVksU0FBVTd1QixHQUNyQixPQUFPckksS0FBS3VjLE1BQU0sV0FDakJxYSxFQUFTekUsT0FBUW55QixLQUFNcUksU0FNMUJvVCxFQUFPNkIsT0FBUSxDQUNkd1UsTUFBTyxTQUFVclYsRUFBTTdZLEVBQU02VSxHQUM1QixJQUFJcVosRUFFSixHQUFLclYsRUFZSixPQVhBN1ksR0FBU0EsR0FBUSxNQUFTLFFBQzFCa3VCLEVBQVE2RSxFQUFTM2EsSUFBS1MsRUFBTTdZLEdBR3ZCNlUsS0FDRXFaLEdBQVNwYixNQUFNRSxRQUFTNkIsR0FDN0JxWixFQUFRNkUsRUFBU3BCLE9BQVE5WSxFQUFNN1ksRUFBTTZYLEVBQU80QyxVQUFXNUYsSUFFdkRxWixFQUFNenZCLEtBQU1vVyxJQUdQcVosR0FBUyxJQUlsQnVGLFFBQVMsU0FBVTVhLEVBQU03WSxHQUN4QkEsRUFBT0EsR0FBUSxLQUVmLElBQUlrdUIsRUFBUXJXLEVBQU9xVyxNQUFPclYsRUFBTTdZLEdBQy9CMHpCLEVBQWN4RixFQUFNN3ZCLE9BQ3BCMlosRUFBS2tXLEVBQU0xTixRQUNYbVQsRUFBUTliLEVBQU8rYixZQUFhL2EsRUFBTTdZLEdBTXZCLGVBQVBnWSxJQUNKQSxFQUFLa1csRUFBTTFOLFFBQ1hrVCxLQUdJMWIsSUFJVSxPQUFUaFksR0FDSmt1QixFQUFNNXZCLFFBQVMscUJBSVRxMUIsRUFBTUUsS0FDYjdiLEVBQUdsSyxLQUFNK0ssR0FwQkYsV0FDTmhCLEVBQU80YixRQUFTNWEsRUFBTTdZLEtBbUJGMnpCLEtBR2hCRCxHQUFlQyxHQUNwQkEsRUFBTW5GLE1BQU1KLFFBS2R3RixZQUFhLFNBQVUvYSxFQUFNN1ksR0FDNUIsSUFBSXlFLEVBQU16RSxFQUFPLGFBQ2pCLE9BQU8reUIsRUFBUzNhLElBQUtTLEVBQU1wVSxJQUFTc3VCLEVBQVNwQixPQUFROVksRUFBTXBVLEVBQUssQ0FDL0QrcEIsTUFBTzNXLEVBQU80VixVQUFXLGVBQWdCcEIsS0FBSyxXQUM3QzBHLEVBQVN4RSxPQUFRMVYsRUFBTSxDQUFFN1ksRUFBTyxRQUFTeUUsWUFNN0NvVCxFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQndVLE1BQU8sU0FBVWx1QixFQUFNNlUsR0FDdEIsSUFBSWlmLEVBQVMsRUFRYixNQU5xQixpQkFBVDl6QixJQUNYNlUsRUFBTzdVLEVBQ1BBLEVBQU8sS0FDUDh6QixLQUdJaGIsVUFBVXphLE9BQVN5MUIsRUFDaEJqYyxFQUFPcVcsTUFBTzl4QixLQUFNLEdBQUs0RCxRQUdqQmlLLElBQVQ0SyxFQUNOelksS0FDQUEsS0FBS3VjLE1BQU0sV0FDVixJQUFJdVYsRUFBUXJXLEVBQU9xVyxNQUFPOXhCLEtBQU00RCxFQUFNNlUsR0FHdENnRCxFQUFPK2IsWUFBYXgzQixLQUFNNEQsR0FFWixPQUFUQSxHQUFnQyxlQUFma3VCLEVBQU8sSUFDNUJyVyxFQUFPNGIsUUFBU3IzQixLQUFNNEQsT0FJMUJ5ekIsUUFBUyxTQUFVenpCLEdBQ2xCLE9BQU81RCxLQUFLdWMsTUFBTSxXQUNqQmQsRUFBTzRiLFFBQVNyM0IsS0FBTTRELE9BR3hCK3pCLFdBQVksU0FBVS96QixHQUNyQixPQUFPNUQsS0FBSzh4QixNQUFPbHVCLEdBQVEsS0FBTSxLQUtsQ3N0QixRQUFTLFNBQVV0dEIsRUFBTXlXLEdBQ3hCLElBQUlrTSxFQUNIcVIsRUFBUSxFQUNSQyxFQUFRcGMsRUFBTytXLFdBQ2YvSyxFQUFXem5CLEtBQ1h3RyxFQUFJeEcsS0FBS2lDLE9BQ1Q2dUIsRUFBVSxhQUNDOEcsR0FDVEMsRUFBTS9ELFlBQWFyTSxFQUFVLENBQUVBLEtBVWxDLElBTnFCLGlCQUFUN2pCLElBQ1h5VyxFQUFNelcsRUFDTkEsT0FBT2lLLEdBRVJqSyxFQUFPQSxHQUFRLEtBRVA0QyxNQUNQK2YsRUFBTW9RLEVBQVMzYSxJQUFLeUwsRUFBVWpoQixHQUFLNUMsRUFBTyxnQkFDOUIyaUIsRUFBSTZMLFFBQ2Z3RixJQUNBclIsRUFBSTZMLE1BQU1uQyxJQUFLYSxJQUlqQixPQURBQSxJQUNPK0csRUFBTTNHLFFBQVM3VyxNQUd4QixJQUFJeWQsR0FBTyxzQ0FBMENqZixPQUVqRGtmLEdBQVUsSUFBSTMzQixPQUFRLGlCQUFtQjAzQixHQUFPLGNBQWUsS0FHL0RFLEdBQVksQ0FBRSxNQUFPLFFBQVMsU0FBVSxRQUV4Q3ZTLEdBQWtCeGEsRUFBU3dhLGdCQUkxQndTLEdBQWEsU0FBVXhiLEdBQ3pCLE9BQU9oQixFQUFPa0UsU0FBVWxELEVBQUs2RyxjQUFlN0csSUFFN0N5YixHQUFXLENBQUVBLFVBQVUsR0FPbkJ6UyxHQUFnQjBTLGNBQ3BCRixHQUFhLFNBQVV4YixHQUN0QixPQUFPaEIsRUFBT2tFLFNBQVVsRCxFQUFLNkcsY0FBZTdHLElBQzNDQSxFQUFLMGIsWUFBYUQsTUFBZXpiLEVBQUs2RyxnQkFHMUMsSUFBSThVLEdBQXFCLFNBQVUzYixFQUFNaFMsR0FPdkMsTUFBOEIsVUFIOUJnUyxFQUFPaFMsR0FBTWdTLEdBR0Q0YixNQUFNQyxTQUNNLEtBQXZCN2IsRUFBSzRiLE1BQU1DLFNBTVhMLEdBQVl4YixJQUVzQixTQUFsQ2hCLEVBQU84YyxJQUFLOWIsRUFBTSxZQUtyQixTQUFTK2IsR0FBVy9iLEVBQU1nYSxFQUFNZ0MsRUFBWUMsR0FDM0MsSUFBSUMsRUFBVUMsRUFDYkMsRUFBZ0IsR0FDaEJDLEVBQWVKLEVBQ2QsV0FDQyxPQUFPQSxFQUFNOVQsT0FFZCxXQUNDLE9BQU9uSixFQUFPOGMsSUFBSzliLEVBQU1nYSxFQUFNLEtBRWpDc0MsRUFBVUQsSUFDVkUsRUFBT1AsR0FBY0EsRUFBWSxLQUFTaGQsRUFBT3dkLFVBQVd4QyxHQUFTLEdBQUssTUFHMUV5QyxFQUFnQnpjLEVBQUtuQyxXQUNsQm1CLEVBQU93ZCxVQUFXeEMsSUFBbUIsT0FBVHVDLElBQWtCRCxJQUNoRGhCLEdBQVF4VSxLQUFNOUgsRUFBTzhjLElBQUs5YixFQUFNZ2EsSUFFbEMsR0FBS3lDLEdBQWlCQSxFQUFlLEtBQVFGLEVBQU8sQ0FZbkQsSUFSQUQsR0FBb0IsRUFHcEJDLEVBQU9BLEdBQVFFLEVBQWUsR0FHOUJBLEdBQWlCSCxHQUFXLEVBRXBCRixLQUlQcGQsRUFBTzRjLE1BQU81YixFQUFNZ2EsRUFBTXlDLEVBQWdCRixJQUNuQyxFQUFJSixJQUFZLEdBQU1BLEVBQVFFLElBQWlCQyxHQUFXLE1BQVcsSUFDM0VGLEVBQWdCLEdBRWpCSyxHQUFnQ04sRUFJakNNLEdBQWdDLEVBQ2hDemQsRUFBTzRjLE1BQU81YixFQUFNZ2EsRUFBTXlDLEVBQWdCRixHQUcxQ1AsRUFBYUEsR0FBYyxHQWdCNUIsT0FiS0EsSUFDSlMsR0FBaUJBLElBQWtCSCxHQUFXLEVBRzlDSixFQUFXRixFQUFZLEdBQ3RCUyxHQUFrQlQsRUFBWSxHQUFNLEdBQU1BLEVBQVksSUFDckRBLEVBQVksR0FDVEMsSUFDSkEsRUFBTU0sS0FBT0EsRUFDYk4sRUFBTWxQLE1BQVEwUCxFQUNkUixFQUFNdmIsSUFBTXdiLElBR1BBLEVBSVIsSUFBSVEsR0FBb0IsR0FFeEIsU0FBU0MsR0FBbUIzYyxHQUMzQixJQUFJNFAsRUFDSC9nQixFQUFNbVIsRUFBSzZHLGNBQ1hYLEVBQVdsRyxFQUFLa0csU0FDaEIyVixFQUFVYSxHQUFtQnhXLEdBRTlCLE9BQUsyVixJQUlMak0sRUFBTy9nQixFQUFJK3RCLEtBQUtoZSxZQUFhL1AsRUFBSTBQLGNBQWUySCxJQUNoRDJWLEVBQVU3YyxFQUFPOGMsSUFBS2xNLEVBQU0sV0FFNUJBLEVBQUtuYyxXQUFXb0wsWUFBYStRLEdBRVosU0FBWmlNLElBQ0pBLEVBQVUsU0FFWGEsR0FBbUJ4VyxHQUFhMlYsRUFFekJBLEdBR1IsU0FBU2dCLEdBQVU3UixFQUFVOFIsR0FPNUIsSUFOQSxJQUFJakIsRUFBUzdiLEVBQ1orYyxFQUFTLEdBQ1Q3MkIsRUFBUSxFQUNSVixFQUFTd2xCLEVBQVN4bEIsT0FHWFUsRUFBUVYsRUFBUVUsS0FDdkI4WixFQUFPZ0wsRUFBVTlrQixJQUNOMDFCLFFBSVhDLEVBQVU3YixFQUFLNGIsTUFBTUMsUUFDaEJpQixHQUthLFNBQVpqQixJQUNKa0IsRUFBUTcyQixHQUFVZzBCLEVBQVMzYSxJQUFLUyxFQUFNLFlBQWUsS0FDL0MrYyxFQUFRNzJCLEtBQ2I4WixFQUFLNGIsTUFBTUMsUUFBVSxLQUdLLEtBQXZCN2IsRUFBSzRiLE1BQU1DLFNBQWtCRixHQUFvQjNiLEtBQ3JEK2MsRUFBUTcyQixHQUFVeTJCLEdBQW1CM2MsS0FHckIsU0FBWjZiLElBQ0prQixFQUFRNzJCLEdBQVUsT0FHbEJnMEIsRUFBU0gsSUFBSy9aLEVBQU0sVUFBVzZiLEtBTWxDLElBQU0zMUIsRUFBUSxFQUFHQSxFQUFRVixFQUFRVSxJQUNSLE1BQW5CNjJCLEVBQVE3MkIsS0FDWjhrQixFQUFVOWtCLEdBQVEwMUIsTUFBTUMsUUFBVWtCLEVBQVE3MkIsSUFJNUMsT0FBTzhrQixFQUdSaE0sRUFBT0csR0FBRzBCLE9BQVEsQ0FDakJpYyxLQUFNLFdBQ0wsT0FBT0QsR0FBVXQ1QixNQUFNLElBRXhCeTVCLEtBQU0sV0FDTCxPQUFPSCxHQUFVdDVCLE9BRWxCMDVCLE9BQVEsU0FBVS9HLEdBQ2pCLE1BQXNCLGtCQUFWQSxFQUNKQSxFQUFRM3lCLEtBQUt1NUIsT0FBU3Y1QixLQUFLeTVCLE9BRzVCejVCLEtBQUt1YyxNQUFNLFdBQ1o2YixHQUFvQnA0QixNQUN4QnliLEVBQVF6YixNQUFPdTVCLE9BRWY5ZCxFQUFRemIsTUFBT3k1QixhQUtuQixJQVVFRSxHQUNBblQsR0FYRW9ULEdBQWlCLHdCQUVqQkMsR0FBVyxpQ0FFWEMsR0FBYyxxQ0FNaEJILEdBRGMxdUIsRUFBUzh1Qix5QkFDUjFlLFlBQWFwUSxFQUFTK1AsY0FBZSxTQUNwRHdMLEdBQVF2YixFQUFTK1AsY0FBZSxVQU0zQkcsYUFBYyxPQUFRLFNBQzVCcUwsR0FBTXJMLGFBQWMsVUFBVyxXQUMvQnFMLEdBQU1yTCxhQUFjLE9BQVEsS0FFNUJ3ZSxHQUFJdGUsWUFBYW1MLElBSWpCck0sRUFBUTZmLFdBQWFMLEdBQUkxcEIsV0FBVyxHQUFPQSxXQUFXLEdBQU95WixVQUFVZSxRQUl2RWtQLEdBQUlsVCxVQUFZLHlCQUNoQnRNLEVBQVE4ZixpQkFBbUJOLEdBQUkxcEIsV0FBVyxHQUFPeVosVUFBVTRFLGFBSzNEcUwsR0FBSWxULFVBQVksb0JBQ2hCdE0sRUFBUStmLFNBQVdQLEdBQUlqUSxVQUt4QixJQUFJeVEsR0FBVSxDQUtiQyxNQUFPLENBQUUsRUFBRyxVQUFXLFlBQ3ZCQyxJQUFLLENBQUUsRUFBRyxvQkFBcUIsdUJBQy9CQyxHQUFJLENBQUUsRUFBRyxpQkFBa0Isb0JBQzNCQyxHQUFJLENBQUUsRUFBRyxxQkFBc0IseUJBRS9CQyxTQUFVLENBQUUsRUFBRyxHQUFJLEtBWXBCLFNBQVNDLEdBQVE5ZSxFQUFTMkssR0FJekIsSUFBSWxLLEVBWUosT0FUQ0EsT0FENEMsSUFBakNULEVBQVE4SCxxQkFDYjlILEVBQVE4SCxxQkFBc0I2QyxHQUFPLFVBRUksSUFBN0IzSyxFQUFRck4saUJBQ3BCcU4sRUFBUXJOLGlCQUFrQmdZLEdBQU8sS0FHakMsUUFHTXpZLElBQVJ5WSxHQUFxQkEsR0FBTzNELEVBQVVoSCxFQUFTMkssR0FDNUM3SyxFQUFPWSxNQUFPLENBQUVWLEdBQVdTLEdBRzVCQSxFQUtSLFNBQVNzZSxHQUFldmUsRUFBT3dlLEdBSTlCLElBSEEsSUFBSW4wQixFQUFJLEVBQ1BzcEIsRUFBSTNULEVBQU1sYSxPQUVIdUUsRUFBSXNwQixFQUFHdHBCLElBQ2Rtd0IsRUFBU0gsSUFDUnJhLEVBQU8zVixHQUNQLGNBQ0NtMEIsR0FBZWhFLEVBQVMzYSxJQUFLMmUsRUFBYW4wQixHQUFLLGVBMUNuRDJ6QixHQUFRUyxNQUFRVCxHQUFRVSxNQUFRVixHQUFRVyxTQUFXWCxHQUFRWSxRQUFVWixHQUFRQyxNQUM3RUQsR0FBUWEsR0FBS2IsR0FBUUksR0FHZnBnQixFQUFRK2YsU0FDYkMsR0FBUWMsU0FBV2QsR0FBUUQsT0FBUyxDQUFFLEVBQUcsK0JBQWdDLGNBMkMxRSxJQUFJNVksR0FBUSxZQUVaLFNBQVM0WixHQUFlL2UsRUFBT1IsRUFBU3dmLEVBQVNDLEVBQVdDLEdBTzNELElBTkEsSUFBSTVlLEVBQU04SixFQUFLRCxFQUFLZ1YsRUFBTUMsRUFBVXJlLEVBQ25Dc2UsRUFBVzdmLEVBQVFvZSx5QkFDbkIwQixFQUFRLEdBQ1JqMUIsRUFBSSxFQUNKc3BCLEVBQUkzVCxFQUFNbGEsT0FFSHVFLEVBQUlzcEIsRUFBR3RwQixJQUdkLElBRkFpVyxFQUFPTixFQUFPM1YsS0FFUSxJQUFUaVcsRUFHWixHQUF3QixXQUFuQmxCLEVBQVFrQixHQUlaaEIsRUFBT1ksTUFBT29mLEVBQU9oZixFQUFLbkMsU0FBVyxDQUFFbUMsR0FBU0EsUUFHMUMsR0FBTTZFLEdBQU0xYSxLQUFNNlYsR0FJbEIsQ0FVTixJQVRBOEosRUFBTUEsR0FBT2lWLEVBQVNuZ0IsWUFBYU0sRUFBUVgsY0FBZSxRQUcxRHNMLEdBQVF1VCxHQUFTdFcsS0FBTTlHLElBQVUsQ0FBRSxHQUFJLEtBQVEsR0FBSS9ZLGNBQ25ENDNCLEVBQU9uQixHQUFTN1QsSUFBUzZULEdBQVFLLFNBQ2pDalUsRUFBSUUsVUFBWTZVLEVBQU0sR0FBTTdmLEVBQU9pZ0IsY0FBZWpmLEdBQVM2ZSxFQUFNLEdBR2pFcGUsRUFBSW9lLEVBQU0sR0FDRnBlLEtBQ1BxSixFQUFNQSxFQUFJbUQsVUFLWGpPLEVBQU9ZLE1BQU9vZixFQUFPbFYsRUFBSTFELGFBR3pCMEQsRUFBTWlWLEVBQVN0VCxZQUdYRCxZQUFjLFFBekJsQndULEVBQU1wNUIsS0FBTXNaLEVBQVFnZ0IsZUFBZ0JsZixJQWtDdkMsSUFIQStlLEVBQVN2VCxZQUFjLEdBRXZCemhCLEVBQUksRUFDTWlXLEVBQU9nZixFQUFPajFCLE1BR3ZCLEdBQUs0MEIsR0FBYTNmLEVBQU84QyxRQUFTOUIsRUFBTTJlLElBQWUsRUFDakRDLEdBQ0pBLEVBQVFoNUIsS0FBTW9hLFFBZ0JoQixHQVhBOGUsRUFBV3RELEdBQVl4YixHQUd2QjhKLEVBQU1rVSxHQUFRZSxFQUFTbmdCLFlBQWFvQixHQUFRLFVBR3ZDOGUsR0FDSmIsR0FBZW5VLEdBSVg0VSxFQUVKLElBREFqZSxFQUFJLEVBQ01ULEVBQU84SixFQUFLckosTUFDaEI0YyxHQUFZbHpCLEtBQU02VixFQUFLN1ksTUFBUSxLQUNuQ3UzQixFQUFROTRCLEtBQU1vYSxHQU1sQixPQUFPK2UsRUFJUixJQUFJSSxHQUFpQixzQkFFckIsU0FBU0MsS0FDUixPQUFPLEVBR1IsU0FBU0MsS0FDUixPQUFPLEVBU1IsU0FBU0MsR0FBWXRmLEVBQU03WSxHQUMxQixPQUFTNlksSUFNVixXQUNDLElBQ0MsT0FBT3hSLEVBQVNlLGNBQ2YsTUFBUXVMLEtBVFF5a0IsS0FBcUMsVUFBVHA0QixHQVkvQyxTQUFTcTRCLEdBQUl4ZixFQUFNeWYsRUFBT3hnQixFQUFVakQsRUFBTW1ELEVBQUl1Z0IsR0FDN0MsSUFBSUMsRUFBUXg0QixFQUdaLEdBQXNCLGlCQUFWczRCLEVBQXFCLENBU2hDLElBQU10NEIsSUFObUIsaUJBQWI4WCxJQUdYakQsRUFBT0EsR0FBUWlELEVBQ2ZBLE9BQVc3TixHQUVFcXVCLEVBQ2JELEdBQUl4ZixFQUFNN1ksRUFBTThYLEVBQVVqRCxFQUFNeWpCLEVBQU90NEIsR0FBUXU0QixHQUVoRCxPQUFPMWYsRUFzQlIsR0FuQmEsTUFBUmhFLEdBQXNCLE1BQU5tRCxHQUdwQkEsRUFBS0YsRUFDTGpELEVBQU9pRCxPQUFXN04sR0FDRCxNQUFOK04sSUFDYyxpQkFBYkYsR0FHWEUsRUFBS25ELEVBQ0xBLE9BQU81SyxJQUlQK04sRUFBS25ELEVBQ0xBLEVBQU9pRCxFQUNQQSxPQUFXN04sS0FHRCxJQUFQK04sRUFDSkEsRUFBS2tnQixRQUNDLElBQU1sZ0IsRUFDWixPQUFPYSxFQWVSLE9BWmEsSUFBUjBmLElBQ0pDLEVBQVN4Z0IsR0FDVEEsRUFBSyxTQUFVcEwsR0FJZCxPQURBaUwsSUFBUzRnQixJQUFLN3JCLEdBQ1A0ckIsRUFBT3ZpQixNQUFPN1osS0FBTTBjLGFBSXpCa0MsS0FBT3dkLEVBQU94ZCxPQUFVd2QsRUFBT3hkLEtBQU9uRCxFQUFPbUQsU0FFMUNuQyxFQUFLRixNQUFNLFdBQ2pCZCxFQUFPakwsTUFBTXlmLElBQUtqd0IsS0FBTWs4QixFQUFPdGdCLEVBQUluRCxFQUFNaUQsTUErYTNDLFNBQVM0Z0IsR0FBZ0I3eEIsRUFBSTdHLEVBQU1tNEIsR0FHNUJBLEdBUU5wRixFQUFTSCxJQUFLL3JCLEVBQUk3RyxHQUFNLEdBQ3hCNlgsRUFBT2pMLE1BQU15ZixJQUFLeGxCLEVBQUk3RyxFQUFNLENBQzNCMmhCLFdBQVcsRUFDWGQsUUFBUyxTQUFValUsR0FDbEIsSUFBSStyQixFQUFVNzVCLEVBQ2I4NUIsRUFBUTdGLEVBQVMzYSxJQUFLaGMsS0FBTTRELEdBRTdCLEdBQXlCLEVBQWxCNE0sRUFBTWlzQixXQUFtQno4QixLQUFNNEQsSUFLckMsR0FBTTQ0QixFQUFNdjZCLFFBdUNFd1osRUFBT2pMLE1BQU1rakIsUUFBUzl2QixJQUFVLElBQUs4NEIsY0FDbERsc0IsRUFBTW1zQix1QkFyQk4sR0FkQUgsRUFBUXQ3QixFQUFNd1EsS0FBTWdMLFdBQ3BCaWEsRUFBU0gsSUFBS3gyQixLQUFNNEQsRUFBTTQ0QixHQUsxQkQsRUFBV1IsRUFBWS83QixLQUFNNEQsR0FDN0I1RCxLQUFNNEQsS0FFRDQ0QixLQURMOTVCLEVBQVNpMEIsRUFBUzNhLElBQUtoYyxLQUFNNEQsS0FDSjI0QixFQUN4QjVGLEVBQVNILElBQUt4MkIsS0FBTTRELEdBQU0sR0FFMUJsQixFQUFTLEdBRUw4NUIsSUFBVTk1QixFQVdkLE9BUkE4TixFQUFNb3NCLDJCQUNOcHNCLEVBQU1ZLGlCQU9DMU8sR0FBVUEsRUFBT2hDLFdBZWY4N0IsRUFBTXY2QixTQUdqQjAwQixFQUFTSCxJQUFLeDJCLEtBQU00RCxFQUFNLENBQ3pCbEQsTUFBTythLEVBQU9qTCxNQUFNcXNCLFFBSW5CcGhCLEVBQU82QixPQUFRa2YsRUFBTyxHQUFLL2dCLEVBQU9xaEIsTUFBTXQ4QixXQUN4Q2c4QixFQUFNdDdCLE1BQU8sR0FDYmxCLFFBS0Z3USxFQUFNb3NCLHFDQS9FMEIvdUIsSUFBN0I4b0IsRUFBUzNhLElBQUt2UixFQUFJN0csSUFDdEI2WCxFQUFPakwsTUFBTXlmLElBQUt4bEIsRUFBSTdHLEVBQU1pNEIsSUE1YS9CcGdCLEVBQU9qTCxNQUFRLENBRWQ2SSxPQUFRLEdBRVI0VyxJQUFLLFNBQVV4VCxFQUFNeWYsRUFBT3pYLEVBQVNoTSxFQUFNaUQsR0FFMUMsSUFBSXFoQixFQUFhQyxFQUFhelcsRUFDN0IwVyxFQUFRQyxFQUFHQyxFQUNYekosRUFBUzBKLEVBQVV4NUIsRUFBTXk1QixFQUFZQyxFQUNyQ0MsRUFBVzVHLEVBQVMzYSxJQUFLUyxHQUcxQixHQUFNMFosRUFBWTFaLEdBdUNsQixJQWxDS2dJLEVBQVFBLFVBRVpBLEdBREFzWSxFQUFjdFksR0FDUUEsUUFDdEIvSSxFQUFXcWhCLEVBQVlyaEIsVUFLbkJBLEdBQ0pELEVBQU92WCxLQUFLd2lCLGdCQUFpQmpCLEdBQWlCL0osR0FJekMrSSxFQUFRN0YsT0FDYjZGLEVBQVE3RixLQUFPbkQsRUFBT21ELFNBSWZxZSxFQUFTTSxFQUFTTixVQUN6QkEsRUFBU00sRUFBU04sT0FBU3JsQixPQUFPNGxCLE9BQVEsUUFFbkNSLEVBQWNPLEVBQVNFLFVBQzlCVCxFQUFjTyxFQUFTRSxPQUFTLFNBQVU3eEIsR0FJekMsWUFBeUIsSUFBWDZQLEdBQTBCQSxFQUFPakwsTUFBTWt0QixZQUFjOXhCLEVBQUVoSSxLQUNwRTZYLEVBQU9qTCxNQUFNbXRCLFNBQVM5akIsTUFBTzRDLEVBQU1DLGdCQUFjN08sSUFNcERxdkIsR0FEQWhCLEdBQVVBLEdBQVMsSUFBS2haLE1BQU91TixJQUFtQixDQUFFLEtBQzFDeHVCLE9BQ0ZpN0IsS0FFUHQ1QixFQUFPMDVCLEdBRFAvVyxFQUFNcVYsR0FBZXJZLEtBQU0yWSxFQUFPZ0IsS0FBUyxJQUNwQixHQUN2QkcsR0FBZTlXLEVBQUssSUFBTyxJQUFLbmxCLE1BQU8sS0FBTWdjLE9BR3ZDeFosSUFLTjh2QixFQUFValksRUFBT2pMLE1BQU1rakIsUUFBUzl2QixJQUFVLEdBRzFDQSxHQUFTOFgsRUFBV2dZLEVBQVFnSixhQUFlaEosRUFBUWtLLFdBQWNoNkIsRUFHakU4dkIsRUFBVWpZLEVBQU9qTCxNQUFNa2pCLFFBQVM5dkIsSUFBVSxHQUcxQ3U1QixFQUFZMWhCLEVBQU82QixPQUFRLENBQzFCMVosS0FBTUEsRUFDTjA1QixTQUFVQSxFQUNWN2tCLEtBQU1BLEVBQ05nTSxRQUFTQSxFQUNUN0YsS0FBTTZGLEVBQVE3RixLQUNkbEQsU0FBVUEsRUFDVnFULGFBQWNyVCxHQUFZRCxFQUFPK0wsS0FBS3RFLE1BQU02TCxhQUFhbm9CLEtBQU04VSxHQUMvRDZKLFVBQVc4WCxFQUFXcG5CLEtBQU0sTUFDMUI4bUIsSUFHS0ssRUFBV0gsRUFBUXI1QixPQUMxQnc1QixFQUFXSCxFQUFRcjVCLEdBQVMsSUFDbkJpNkIsY0FBZ0IsRUFHbkJuSyxFQUFRb0ssUUFDaUQsSUFBOURwSyxFQUFRb0ssTUFBTXBzQixLQUFNK0ssRUFBTWhFLEVBQU00a0IsRUFBWUwsSUFFdkN2Z0IsRUFBSy9NLGtCQUNUK00sRUFBSy9NLGlCQUFrQjlMLEVBQU1vNUIsSUFLM0J0SixFQUFRekQsTUFDWnlELEVBQVF6RCxJQUFJdmUsS0FBTStLLEVBQU0wZ0IsR0FFbEJBLEVBQVUxWSxRQUFRN0YsT0FDdkJ1ZSxFQUFVMVksUUFBUTdGLEtBQU82RixFQUFRN0YsT0FLOUJsRCxFQUNKMGhCLEVBQVMvZixPQUFRK2YsRUFBU1MsZ0JBQWlCLEVBQUdWLEdBRTlDQyxFQUFTLzZCLEtBQU04NkIsR0FJaEIxaEIsRUFBT2pMLE1BQU02SSxPQUFRelYsSUFBUyxJQU1oQ3V1QixPQUFRLFNBQVUxVixFQUFNeWYsRUFBT3pYLEVBQVMvSSxFQUFVcWlCLEdBRWpELElBQUk3Z0IsRUFBRzhnQixFQUFXelgsRUFDakIwVyxFQUFRQyxFQUFHQyxFQUNYekosRUFBUzBKLEVBQVV4NUIsRUFBTXk1QixFQUFZQyxFQUNyQ0MsRUFBVzVHLEVBQVNELFFBQVNqYSxJQUFVa2EsRUFBUzNhLElBQUtTLEdBRXRELEdBQU04Z0IsSUFBZU4sRUFBU00sRUFBU04sUUFBdkMsQ0FPQSxJQURBQyxHQURBaEIsR0FBVUEsR0FBUyxJQUFLaFosTUFBT3VOLElBQW1CLENBQUUsS0FDMUN4dUIsT0FDRmk3QixLQU1QLEdBSkF0NUIsRUFBTzA1QixHQURQL1csRUFBTXFWLEdBQWVyWSxLQUFNMlksRUFBT2dCLEtBQVMsSUFDcEIsR0FDdkJHLEdBQWU5VyxFQUFLLElBQU8sSUFBS25sQixNQUFPLEtBQU1nYyxPQUd2Q3haLEVBQU4sQ0FlQSxJQVJBOHZCLEVBQVVqWSxFQUFPakwsTUFBTWtqQixRQUFTOXZCLElBQVUsR0FFMUN3NUIsRUFBV0gsRUFEWHI1QixHQUFTOFgsRUFBV2dZLEVBQVFnSixhQUFlaEosRUFBUWtLLFdBQWNoNkIsSUFDcEMsR0FDN0IyaUIsRUFBTUEsRUFBSyxJQUNWLElBQUlubUIsT0FBUSxVQUFZaTlCLEVBQVdwbkIsS0FBTSxpQkFBb0IsV0FHOUQrbkIsRUFBWTlnQixFQUFJa2dCLEVBQVNuN0IsT0FDakJpYixLQUNQaWdCLEVBQVlDLEVBQVVsZ0IsSUFFZjZnQixHQUFlVCxJQUFhSCxFQUFVRyxVQUN6QzdZLEdBQVdBLEVBQVE3RixPQUFTdWUsRUFBVXZlLE1BQ3RDMkgsSUFBT0EsRUFBSTNmLEtBQU11MkIsRUFBVTVYLFlBQzNCN0osR0FBWUEsSUFBYXloQixFQUFVemhCLFdBQ3hCLE9BQWJBLElBQXFCeWhCLEVBQVV6aEIsWUFDaEMwaEIsRUFBUy9mLE9BQVFILEVBQUcsR0FFZmlnQixFQUFVemhCLFVBQ2QwaEIsRUFBU1MsZ0JBRUxuSyxFQUFRdkIsUUFDWnVCLEVBQVF2QixPQUFPemdCLEtBQU0rSyxFQUFNMGdCLElBT3pCYSxJQUFjWixFQUFTbjdCLFNBQ3JCeXhCLEVBQVF1SyxXQUNrRCxJQUEvRHZLLEVBQVF1SyxTQUFTdnNCLEtBQU0rSyxFQUFNNGdCLEVBQVlFLEVBQVNFLFNBRWxEaGlCLEVBQU95aUIsWUFBYXpoQixFQUFNN1ksRUFBTTI1QixFQUFTRSxlQUduQ1IsRUFBUXI1QixTQTFDZixJQUFNQSxLQUFRcTVCLEVBQ2J4aEIsRUFBT2pMLE1BQU0yaEIsT0FBUTFWLEVBQU03WSxFQUFPczRCLEVBQU9nQixHQUFLelksRUFBUy9JLEdBQVUsR0E4Qy9ERCxFQUFPMEMsY0FBZThlLElBQzFCdEcsRUFBU3hFLE9BQVExVixFQUFNLG1CQUl6QmtoQixTQUFVLFNBQVVRLEdBRW5CLElBQUkzM0IsRUFBRzBXLEVBQUdkLEVBQUs0TixFQUFTbVQsRUFBV2lCLEVBQ2xDdlUsRUFBTyxJQUFJblQsTUFBT2dHLFVBQVV6YSxRQUc1QnVPLEVBQVFpTCxFQUFPakwsTUFBTTZ0QixJQUFLRixHQUUxQmYsR0FDQ3pHLEVBQVMzYSxJQUFLaGMsS0FBTSxXQUFjNFgsT0FBTzRsQixPQUFRLE9BQy9DaHRCLEVBQU01TSxPQUFVLEdBQ25COHZCLEVBQVVqWSxFQUFPakwsTUFBTWtqQixRQUFTbGpCLEVBQU01TSxPQUFVLEdBS2pELElBRkFpbUIsRUFBTSxHQUFNclosRUFFTmhLLEVBQUksRUFBR0EsRUFBSWtXLFVBQVV6YSxPQUFRdUUsSUFDbENxakIsRUFBTXJqQixHQUFNa1csVUFBV2xXLEdBTXhCLEdBSEFnSyxFQUFNOHRCLGVBQWlCdCtCLE1BR2xCMHpCLEVBQVE2SyxjQUEyRCxJQUE1QzdLLEVBQVE2SyxZQUFZN3NCLEtBQU0xUixLQUFNd1EsR0FBNUQsQ0FTQSxJQUpBNHRCLEVBQWUzaUIsRUFBT2pMLE1BQU00c0IsU0FBUzFyQixLQUFNMVIsS0FBTXdRLEVBQU80c0IsR0FHeEQ1MkIsRUFBSSxHQUNNd2pCLEVBQVVvVSxFQUFjNTNCLFFBQVlnSyxFQUFNZ3VCLHdCQUluRCxJQUhBaHVCLEVBQU1pdUIsY0FBZ0J6VSxFQUFRdk4sS0FFOUJTLEVBQUksR0FDTWlnQixFQUFZblQsRUFBUW9ULFNBQVVsZ0IsUUFDdEMxTSxFQUFNa3VCLGlDQUlEbHVCLEVBQU1tdUIsYUFBc0MsSUFBeEJ4QixFQUFVNVgsWUFDbkMvVSxFQUFNbXVCLFdBQVcvM0IsS0FBTXUyQixFQUFVNVgsYUFFakMvVSxFQUFNMnNCLFVBQVlBLEVBQ2xCM3NCLEVBQU1pSSxLQUFPMGtCLEVBQVUxa0IsVUFLVjVLLEtBSGJ1TyxJQUFVWCxFQUFPakwsTUFBTWtqQixRQUFTeUosRUFBVUcsV0FBYyxJQUFLRyxRQUM1RE4sRUFBVTFZLFNBQVU1SyxNQUFPbVEsRUFBUXZOLEtBQU1vTixNQUdULEtBQXpCclosRUFBTTlOLE9BQVMwWixLQUNyQjVMLEVBQU1ZLGlCQUNOWixFQUFNbXNCLG9CQVlYLE9BSktqSixFQUFRa0wsY0FDWmxMLEVBQVFrTCxhQUFhbHRCLEtBQU0xUixLQUFNd1EsR0FHM0JBLEVBQU05TixTQUdkMDZCLFNBQVUsU0FBVTVzQixFQUFPNHNCLEdBQzFCLElBQUk1MkIsRUFBRzIyQixFQUFXdlYsRUFBS2lYLEVBQWlCQyxFQUN2Q1YsRUFBZSxHQUNmUCxFQUFnQlQsRUFBU1MsY0FDekJqWixFQUFNcFUsRUFBTTlELE9BR2IsR0FBS214QixHQUlKalosRUFBSXRLLFlBT2MsVUFBZjlKLEVBQU01TSxNQUFvQjRNLEVBQU11dUIsUUFBVSxHQUU3QyxLQUFRbmEsSUFBUTVrQixLQUFNNGtCLEVBQU1BLEVBQUkxVSxZQUFjbFEsS0FJN0MsR0FBc0IsSUFBakI0a0IsRUFBSXRLLFdBQW9DLFVBQWY5SixFQUFNNU0sT0FBcUMsSUFBakJnaEIsRUFBSWxDLFVBQXNCLENBR2pGLElBRkFtYyxFQUFrQixHQUNsQkMsRUFBbUIsR0FDYnQ0QixFQUFJLEVBQUdBLEVBQUlxM0IsRUFBZXIzQixTQU1FcUgsSUFBNUJpeEIsRUFGTGxYLEdBSEF1VixFQUFZQyxFQUFVNTJCLElBR05rVixTQUFXLE9BRzFCb2pCLEVBQWtCbFgsR0FBUXVWLEVBQVVwTyxhQUNuQ3RULEVBQVFtTSxFQUFLNW5CLE1BQU8yQyxNQUFPaWlCLElBQVMsRUFDcENuSixFQUFPdlgsS0FBTTBqQixFQUFLNW5CLEtBQU0sS0FBTSxDQUFFNGtCLElBQVEzaUIsUUFFckM2OEIsRUFBa0JsWCxJQUN0QmlYLEVBQWdCeDhCLEtBQU04NkIsR0FHbkIwQixFQUFnQjU4QixRQUNwQm04QixFQUFhLzdCLEtBQU0sQ0FBRW9hLEtBQU1tSSxFQUFLd1ksU0FBVXlCLElBWTlDLE9BTEFqYSxFQUFNNWtCLEtBQ0Q2OUIsRUFBZ0JULEVBQVNuN0IsUUFDN0JtOEIsRUFBYS83QixLQUFNLENBQUVvYSxLQUFNbUksRUFBS3dZLFNBQVVBLEVBQVNsOEIsTUFBTzI4QixLQUdwRE8sR0FHUlksUUFBUyxTQUFVbHRCLEVBQU1tdEIsR0FDeEJybkIsT0FBTzBlLGVBQWdCN2EsRUFBT3FoQixNQUFNdDhCLFVBQVdzUixFQUFNLENBQ3BEb3RCLFlBQVksRUFDWjNJLGNBQWMsRUFFZHZhLElBQUs1QixFQUFZNmtCLEdBQ2hCLFdBQ0MsR0FBS2ovQixLQUFLbS9CLGNBQ1QsT0FBT0YsRUFBTWovQixLQUFLbS9CLGdCQUdwQixXQUNDLEdBQUtuL0IsS0FBS20vQixjQUNULE9BQU9uL0IsS0FBS20vQixjQUFlcnRCLElBSTlCMGtCLElBQUssU0FBVTkxQixHQUNka1gsT0FBTzBlLGVBQWdCdDJCLEtBQU04UixFQUFNLENBQ2xDb3RCLFlBQVksRUFDWjNJLGNBQWMsRUFDZDZJLFVBQVUsRUFDVjErQixNQUFPQSxRQU1YMjlCLElBQUssU0FBVWMsR0FDZCxPQUFPQSxFQUFlMWpCLEVBQU9tQyxTQUM1QnVoQixFQUNBLElBQUkxakIsRUFBT3FoQixNQUFPcUMsSUFHcEJ6TCxRQUFTLENBQ1IyTCxLQUFNLENBR0xDLFVBQVUsR0FFWEMsTUFBTyxDQUdOekIsTUFBTyxTQUFVcmxCLEdBSWhCLElBQUloTyxFQUFLekssTUFBUXlZLEVBV2pCLE9BUkttaEIsR0FBZWh6QixLQUFNNkQsRUFBRzdHLE9BQzVCNkcsRUFBRzgwQixPQUFTNWMsRUFBVWxZLEVBQUksVUFHMUI2eEIsR0FBZ0I3eEIsRUFBSSxRQUFTb3hCLEtBSXZCLEdBRVJnQixRQUFTLFNBQVVwa0IsR0FJbEIsSUFBSWhPLEVBQUt6SyxNQUFReVksRUFVakIsT0FQS21oQixHQUFlaHpCLEtBQU02RCxFQUFHN0csT0FDNUI2RyxFQUFHODBCLE9BQVM1YyxFQUFVbFksRUFBSSxVQUUxQjZ4QixHQUFnQjd4QixFQUFJLFVBSWQsR0FLUit2QixTQUFVLFNBQVVocUIsR0FDbkIsSUFBSTlELEVBQVM4RCxFQUFNOUQsT0FDbkIsT0FBT2t0QixHQUFlaHpCLEtBQU04RixFQUFPOUksT0FDbEM4SSxFQUFPNnlCLE9BQVM1YyxFQUFValcsRUFBUSxVQUNsQ2lxQixFQUFTM2EsSUFBS3RQLEVBQVEsVUFDdEJpVyxFQUFValcsRUFBUSxPQUlyQjh5QixhQUFjLENBQ2JaLGFBQWMsU0FBVXB1QixRQUlEM0MsSUFBakIyQyxFQUFNOU4sUUFBd0I4TixFQUFNMnVCLGdCQUN4QzN1QixFQUFNMnVCLGNBQWNNLFlBQWNqdkIsRUFBTTlOLFlBb0c3QytZLEVBQU95aUIsWUFBYyxTQUFVemhCLEVBQU03WSxFQUFNNjVCLEdBR3JDaGhCLEVBQUt0SyxxQkFDVHNLLEVBQUt0SyxvQkFBcUJ2TyxFQUFNNjVCLElBSWxDaGlCLEVBQU9xaEIsTUFBUSxTQUFVcmlCLEVBQUtpbEIsR0FHN0IsS0FBUTEvQixnQkFBZ0J5YixFQUFPcWhCLE9BQzlCLE9BQU8sSUFBSXJoQixFQUFPcWhCLE1BQU9yaUIsRUFBS2lsQixHQUkxQmpsQixHQUFPQSxFQUFJN1csTUFDZjVELEtBQUttL0IsY0FBZ0Ixa0IsRUFDckJ6YSxLQUFLNEQsS0FBTzZXLEVBQUk3VyxLQUloQjVELEtBQUsyL0IsbUJBQXFCbGxCLEVBQUltbEIsdUJBQ0gveEIsSUFBekI0TSxFQUFJbWxCLG1CQUdnQixJQUFwQm5sQixFQUFJZ2xCLFlBQ0w1RCxHQUNBQyxHQUtEOTdCLEtBQUswTSxPQUFXK04sRUFBSS9OLFFBQWtDLElBQXhCK04sRUFBSS9OLE9BQU80TixTQUN4Q0csRUFBSS9OLE9BQU93RCxXQUNYdUssRUFBSS9OLE9BRUwxTSxLQUFLeStCLGNBQWdCaGtCLEVBQUlna0IsY0FDekJ6K0IsS0FBSzYvQixjQUFnQnBsQixFQUFJb2xCLGVBSXpCNy9CLEtBQUs0RCxLQUFPNlcsRUFJUmlsQixHQUNKamtCLEVBQU82QixPQUFRdGQsS0FBTTAvQixHQUl0QjEvQixLQUFLOC9CLFVBQVlybEIsR0FBT0EsRUFBSXFsQixXQUFhbGdCLEtBQUttZ0IsTUFHOUMvL0IsS0FBTXliLEVBQU9tQyxVQUFZLEdBSzFCbkMsRUFBT3FoQixNQUFNdDhCLFVBQVksQ0FDeEJxWCxZQUFhNEQsRUFBT3FoQixNQUNwQjZDLG1CQUFvQjdELEdBQ3BCMEMscUJBQXNCMUMsR0FDdEI0Qyw4QkFBK0I1QyxHQUMvQmtFLGFBQWEsRUFFYjV1QixlQUFnQixXQUNmLElBQUl4RixFQUFJNUwsS0FBS20vQixjQUVibi9CLEtBQUsyL0IsbUJBQXFCOUQsR0FFckJqd0IsSUFBTTVMLEtBQUtnZ0MsYUFDZnAwQixFQUFFd0Ysa0JBR0p1ckIsZ0JBQWlCLFdBQ2hCLElBQUkvd0IsRUFBSTVMLEtBQUttL0IsY0FFYm4vQixLQUFLdytCLHFCQUF1QjNDLEdBRXZCandCLElBQU01TCxLQUFLZ2dDLGFBQ2ZwMEIsRUFBRSt3QixtQkFHSkMseUJBQTBCLFdBQ3pCLElBQUloeEIsRUFBSTVMLEtBQUttL0IsY0FFYm4vQixLQUFLMCtCLDhCQUFnQzdDLEdBRWhDandCLElBQU01TCxLQUFLZ2dDLGFBQ2ZwMEIsRUFBRWd4QiwyQkFHSDU4QixLQUFLMjhCLG9CQUtQbGhCLEVBQU9jLEtBQU0sQ0FDWjBqQixRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJDLFNBQVMsRUFDVEMsUUFBUSxFQUNSQyxZQUFZLEVBQ1pDLFNBQVMsRUFDVEMsT0FBTyxFQUNQQyxPQUFPLEVBQ1BDLFVBQVUsRUFDVkMsTUFBTSxFQUNOLE1BQVEsRUFDUi9sQixNQUFNLEVBQ05wSyxVQUFVLEVBQ1ZwSSxLQUFLLEVBQ0xzSSxTQUFTLEVBQ1RvdUIsUUFBUSxFQUNSOEIsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFdBQVcsRUFDWEMsYUFBYSxFQUNiQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsZUFBZSxFQUNmQyxXQUFXLEVBQ1hDLFNBQVMsRUFDVDl3QixPQUFPLEdBQ0wrSyxFQUFPakwsTUFBTXd1QixTQUVoQnZqQixFQUFPYyxLQUFNLENBQUVrbEIsTUFBTyxVQUFXQyxLQUFNLGFBQWMsU0FBVTk5QixFQUFNODRCLEdBQ3BFamhCLEVBQU9qTCxNQUFNa2pCLFFBQVM5dkIsR0FBUyxDQUc5Qms2QixNQUFPLFdBUU4sT0FIQXhCLEdBQWdCdDhCLEtBQU00RCxFQUFNbTRCLEtBR3JCLEdBRVJjLFFBQVMsV0FNUixPQUhBUCxHQUFnQnQ4QixLQUFNNEQsSUFHZixHQUtSNDJCLFNBQVUsV0FDVCxPQUFPLEdBR1JrQyxhQUFjQSxNQVloQmpoQixFQUFPYyxLQUFNLENBQ1pvbEIsV0FBWSxZQUNaQyxXQUFZLFdBQ1pDLGFBQWMsY0FDZEMsYUFBYyxlQUNaLFNBQVVDLEVBQU0xRCxHQUNsQjVpQixFQUFPakwsTUFBTWtqQixRQUFTcU8sR0FBUyxDQUM5QnJGLGFBQWMyQixFQUNkVCxTQUFVUyxFQUVWWixPQUFRLFNBQVVqdEIsR0FDakIsSUFBSTRMLEVBQ0gxUCxFQUFTMU0sS0FDVGdpQyxFQUFVeHhCLEVBQU1xdkIsY0FDaEIxQyxFQUFZM3NCLEVBQU0yc0IsVUFTbkIsT0FMTTZFLElBQWFBLElBQVl0MUIsR0FBVytPLEVBQU9rRSxTQUFValQsRUFBUXMxQixNQUNsRXh4QixFQUFNNU0sS0FBT3U1QixFQUFVRyxTQUN2QmxoQixFQUFNK2dCLEVBQVUxWSxRQUFRNUssTUFBTzdaLEtBQU0wYyxXQUNyQ2xNLEVBQU01TSxLQUFPeTZCLEdBRVBqaUIsT0FLVlgsRUFBT0csR0FBRzBCLE9BQVEsQ0FFakIyZSxHQUFJLFNBQVVDLEVBQU94Z0IsRUFBVWpELEVBQU1tRCxHQUNwQyxPQUFPcWdCLEdBQUlqOEIsS0FBTWs4QixFQUFPeGdCLEVBQVVqRCxFQUFNbUQsSUFFekN1Z0IsSUFBSyxTQUFVRCxFQUFPeGdCLEVBQVVqRCxFQUFNbUQsR0FDckMsT0FBT3FnQixHQUFJajhCLEtBQU1rOEIsRUFBT3hnQixFQUFVakQsRUFBTW1ELEVBQUksSUFFN0N5Z0IsSUFBSyxTQUFVSCxFQUFPeGdCLEVBQVVFLEdBQy9CLElBQUl1aEIsRUFBV3Y1QixFQUNmLEdBQUtzNEIsR0FBU0EsRUFBTTlxQixnQkFBa0I4cUIsRUFBTWlCLFVBVzNDLE9BUkFBLEVBQVlqQixFQUFNaUIsVUFDbEIxaEIsRUFBUXlnQixFQUFNb0MsZ0JBQWlCakMsSUFDOUJjLEVBQVU1WCxVQUNUNFgsRUFBVUcsU0FBVyxJQUFNSCxFQUFVNVgsVUFDckM0WCxFQUFVRyxTQUNYSCxFQUFVemhCLFNBQ1Z5aEIsRUFBVTFZLFNBRUp6a0IsS0FFUixHQUFzQixpQkFBVms4QixFQUFxQixDQUdoQyxJQUFNdDRCLEtBQVFzNEIsRUFDYmw4QixLQUFLcThCLElBQUt6NEIsRUFBTThYLEVBQVV3Z0IsRUFBT3Q0QixJQUVsQyxPQUFPNUQsS0FXUixPQVRrQixJQUFiMGIsR0FBMEMsbUJBQWJBLElBR2pDRSxFQUFLRixFQUNMQSxPQUFXN04sSUFFQSxJQUFQK04sSUFDSkEsRUFBS2tnQixJQUVDOTdCLEtBQUt1YyxNQUFNLFdBQ2pCZCxFQUFPakwsTUFBTTJoQixPQUFRbnlCLEtBQU1rOEIsRUFBT3RnQixFQUFJRixTQU16QyxJQUtDdW1CLEdBQWUsd0JBR2ZDLEdBQVcsb0NBQ1hDLEdBQWUsMkNBR2hCLFNBQVNDLEdBQW9CM2xCLEVBQU16RyxHQUNsQyxPQUFLMk0sRUFBVWxHLEVBQU0sVUFDcEJrRyxFQUErQixLQUFyQjNNLEVBQVFzRSxTQUFrQnRFLEVBQVVBLEVBQVFrUyxXQUFZLE9BRTNEek0sRUFBUWdCLEdBQU9nVCxTQUFVLFNBQVcsSUFHckNoVCxFQUlSLFNBQVM0bEIsR0FBZTVsQixHQUV2QixPQURBQSxFQUFLN1ksTUFBeUMsT0FBaEM2WSxFQUFLdkIsYUFBYyxTQUFzQixJQUFNdUIsRUFBSzdZLEtBQzNENlksRUFFUixTQUFTNmxCLEdBQWU3bEIsR0FPdkIsTUFOMkMsV0FBcENBLEVBQUs3WSxNQUFRLElBQUsxQyxNQUFPLEVBQUcsR0FDbEN1YixFQUFLN1ksS0FBTzZZLEVBQUs3WSxLQUFLMUMsTUFBTyxHQUU3QnViLEVBQUt1SCxnQkFBaUIsUUFHaEJ2SCxFQUdSLFNBQVM4bEIsR0FBZ0I5bkIsRUFBSytuQixHQUM3QixJQUFJaDhCLEVBQUdzcEIsRUFBR2xzQixFQUFnQjYrQixFQUFVQyxFQUFVekYsRUFFOUMsR0FBdUIsSUFBbEJ1RixFQUFLbG9CLFNBQVYsQ0FLQSxHQUFLcWMsRUFBU0QsUUFBU2pjLEtBRXRCd2lCLEVBRFd0RyxFQUFTM2EsSUFBS3ZCLEdBQ1B3aUIsUUFLakIsSUFBTXI1QixLQUZOK3lCLEVBQVN4RSxPQUFRcVEsRUFBTSxpQkFFVHZGLEVBQ2IsSUFBTXoyQixFQUFJLEVBQUdzcEIsRUFBSW1OLEVBQVFyNUIsR0FBTzNCLE9BQVF1RSxFQUFJc3BCLEVBQUd0cEIsSUFDOUNpVixFQUFPakwsTUFBTXlmLElBQUt1UyxFQUFNNStCLEVBQU1xNUIsRUFBUXI1QixHQUFRNEMsSUFPN0Nvd0IsRUFBU0YsUUFBU2pjLEtBQ3RCZ29CLEVBQVc3TCxFQUFTckIsT0FBUTlhLEdBQzVCaW9CLEVBQVdqbkIsRUFBTzZCLE9BQVEsR0FBSW1sQixHQUU5QjdMLEVBQVNKLElBQUtnTSxFQUFNRSxLQUt0QixTQUFTQyxHQUFVbG9CLEVBQUsrbkIsR0FDdkIsSUFBSTdmLEVBQVc2ZixFQUFLN2YsU0FBU2pmLGNBR1gsVUFBYmlmLEdBQXdCaVgsR0FBZWh6QixLQUFNNlQsRUFBSTdXLE1BQ3JENCtCLEVBQUsvWCxRQUFVaFEsRUFBSWdRLFFBR0ssVUFBYjlILEdBQXFDLGFBQWJBLElBQ25DNmYsRUFBS2xVLGFBQWU3VCxFQUFJNlQsY0FJMUIsU0FBU3NVLEdBQVVDLEVBQVloWixFQUFNck4sRUFBVTZlLEdBRzlDeFIsRUFBT2xRLEVBQU1rUSxHQUViLElBQUkyUixFQUFVN2UsRUFBT3dlLEVBQVMySCxFQUFZaG9CLEVBQU14UCxFQUMvQzlFLEVBQUksRUFDSnNwQixFQUFJK1MsRUFBVzVnQyxPQUNmOGdDLEVBQVdqVCxFQUFJLEVBQ2ZwdkIsRUFBUW1wQixFQUFNLEdBQ2RtWixFQUFrQjVvQixFQUFZMVosR0FHL0IsR0FBS3NpQyxHQUNEbFQsRUFBSSxHQUFzQixpQkFBVnB2QixJQUNoQnlaLEVBQVE2ZixZQUFja0ksR0FBU3Q3QixLQUFNbEcsR0FDeEMsT0FBT21pQyxFQUFXdG1CLE1BQU0sU0FBVTVaLEdBQ2pDLElBQUl4RCxFQUFPMGpDLEVBQVdqbUIsR0FBSWphLEdBQ3JCcWdDLElBQ0puWixFQUFNLEdBQU1ucEIsRUFBTWdSLEtBQU0xUixLQUFNMkMsRUFBT3hELEVBQUs4akMsU0FFM0NMLEdBQVV6akMsRUFBTTBxQixFQUFNck4sRUFBVTZlLE1BSWxDLEdBQUt2TCxJQUVKblQsR0FEQTZlLEVBQVdOLEdBQWVyUixFQUFNZ1osRUFBWSxHQUFJdmYsZUFBZSxFQUFPdWYsRUFBWXhILElBQ2pFblQsV0FFbUIsSUFBL0JzVCxFQUFTM1ksV0FBVzVnQixTQUN4QnU1QixFQUFXN2UsR0FJUEEsR0FBUzBlLEdBQVUsQ0FPdkIsSUFMQXlILEdBREEzSCxFQUFVMWYsRUFBTzNaLElBQUsyNEIsR0FBUWUsRUFBVSxVQUFZNkcsS0FDL0JwZ0MsT0FLYnVFLEVBQUlzcEIsRUFBR3RwQixJQUNkc1UsRUFBTzBnQixFQUVGaDFCLElBQU11OEIsSUFDVmpvQixFQUFPVyxFQUFPZ0MsTUFBTzNDLEdBQU0sR0FBTSxHQUc1QmdvQixHQUlKcm5CLEVBQU9ZLE1BQU84ZSxFQUFTVixHQUFRM2YsRUFBTSxZQUl2QzBCLEVBQVM5SyxLQUFNbXhCLEVBQVlyOEIsR0FBS3NVLEVBQU10VSxHQUd2QyxHQUFLczhCLEVBT0osSUFOQXgzQixFQUFNNnZCLEVBQVNBLEVBQVFsNUIsT0FBUyxHQUFJcWhCLGNBR3BDN0gsRUFBTzNaLElBQUtxNUIsRUFBU21ILElBR2Y5N0IsRUFBSSxFQUFHQSxFQUFJczhCLEVBQVl0OEIsSUFDNUJzVSxFQUFPcWdCLEVBQVMzMEIsR0FDWHN6QixHQUFZbHpCLEtBQU1rVSxFQUFLbFgsTUFBUSxNQUNsQyt5QixFQUFTcEIsT0FBUXphLEVBQU0sZUFDeEJXLEVBQU9rRSxTQUFVclUsRUFBS3dQLEtBRWpCQSxFQUFLTCxLQUE4QyxZQUFyQ0ssRUFBS2xYLE1BQVEsSUFBS0YsY0FHL0IrWCxFQUFPeW5CLFdBQWFwb0IsRUFBS0gsVUFDN0JjLEVBQU95bkIsU0FBVXBvQixFQUFLTCxJQUFLLENBQzFCQyxNQUFPSSxFQUFLSixPQUFTSSxFQUFLSSxhQUFjLFVBQ3RDNVAsR0FHSnNQLEVBQVNFLEVBQUttTixZQUFZdG5CLFFBQVN3aEMsR0FBYyxJQUFNcm5CLEVBQU14UCxJQVFuRSxPQUFPdTNCLEVBR1IsU0FBUzFRLEdBQVExVixFQUFNZixFQUFVeW5CLEdBS2hDLElBSkEsSUFBSXJvQixFQUNIMmdCLEVBQVEvZixFQUFXRCxFQUFPMEssT0FBUXpLLEVBQVVlLEdBQVNBLEVBQ3JEalcsRUFBSSxFQUU0QixPQUF2QnNVLEVBQU8yZ0IsRUFBT2oxQixJQUFlQSxJQUNoQzI4QixHQUE4QixJQUFsQnJvQixFQUFLUixVQUN0Qm1CLEVBQU8ybkIsVUFBVzNJLEdBQVEzZixJQUd0QkEsRUFBSzVLLGFBQ0ppekIsR0FBWWxMLEdBQVluZCxJQUM1QjRmLEdBQWVELEdBQVEzZixFQUFNLFdBRTlCQSxFQUFLNUssV0FBV29MLFlBQWFSLElBSS9CLE9BQU8yQixFQUdSaEIsRUFBTzZCLE9BQVEsQ0FDZG9lLGNBQWUsU0FBVXVILEdBQ3hCLE9BQU9BLEdBR1J4bEIsTUFBTyxTQUFVaEIsRUFBTTRtQixFQUFlQyxHQUNyQyxJQUFJOThCLEVBQUdzcEIsRUFBR3lULEVBQWFDLEVBQ3RCL2xCLEVBQVFoQixFQUFLeE0sV0FBVyxHQUN4Qnd6QixFQUFTeEwsR0FBWXhiLEdBR3RCLEtBQU10QyxFQUFROGYsZ0JBQXNDLElBQWxCeGQsRUFBS25DLFVBQW9DLEtBQWxCbUMsRUFBS25DLFVBQzNEbUIsRUFBTytTLFNBQVUvUixJQU1uQixJQUhBK21CLEVBQWUvSSxHQUFRaGQsR0FHakJqWCxFQUFJLEVBQUdzcEIsR0FGYnlULEVBQWM5SSxHQUFRaGUsSUFFT3hhLE9BQVF1RSxFQUFJc3BCLEVBQUd0cEIsSUFDM0NtOEIsR0FBVVksRUFBYS84QixHQUFLZzlCLEVBQWNoOUIsSUFLNUMsR0FBSzY4QixFQUNKLEdBQUtDLEVBSUosSUFIQUMsRUFBY0EsR0FBZTlJLEdBQVFoZSxHQUNyQyttQixFQUFlQSxHQUFnQi9JLEdBQVFoZCxHQUVqQ2pYLEVBQUksRUFBR3NwQixFQUFJeVQsRUFBWXRoQyxPQUFRdUUsRUFBSXNwQixFQUFHdHBCLElBQzNDKzdCLEdBQWdCZ0IsRUFBYS84QixHQUFLZzlCLEVBQWNoOUIsU0FHakQrN0IsR0FBZ0I5bEIsRUFBTWdCLEdBV3hCLE9BTkErbEIsRUFBZS9JLEdBQVFoZCxFQUFPLFdBQ1p4YixPQUFTLEdBQzFCeTRCLEdBQWU4SSxHQUFlQyxHQUFVaEosR0FBUWhlLEVBQU0sV0FJaERnQixHQUdSMmxCLFVBQVcsU0FBVWpuQixHQUtwQixJQUpBLElBQUkxRCxFQUFNZ0UsRUFBTTdZLEVBQ2Y4dkIsRUFBVWpZLEVBQU9qTCxNQUFNa2pCLFFBQ3ZCbHRCLEVBQUksT0FFNkJxSCxLQUF4QjRPLEVBQU9OLEVBQU8zVixJQUFxQkEsSUFDNUMsR0FBSzJ2QixFQUFZMVosR0FBUyxDQUN6QixHQUFPaEUsRUFBT2dFLEVBQU1rYSxFQUFTL1ksU0FBYyxDQUMxQyxHQUFLbkYsRUFBS3drQixPQUNULElBQU1yNUIsS0FBUTZVLEVBQUt3a0IsT0FDYnZKLEVBQVM5dkIsR0FDYjZYLEVBQU9qTCxNQUFNMmhCLE9BQVExVixFQUFNN1ksR0FJM0I2WCxFQUFPeWlCLFlBQWF6aEIsRUFBTTdZLEVBQU02VSxFQUFLZ2xCLFFBT3hDaGhCLEVBQU1rYSxFQUFTL1ksY0FBWS9QLEVBRXZCNE8sRUFBTW1hLEVBQVNoWixXQUluQm5CLEVBQU1tYSxFQUFTaFosY0FBWS9QLE9BT2hDNE4sRUFBT0csR0FBRzBCLE9BQVEsQ0FDakJvbUIsT0FBUSxTQUFVaG9CLEdBQ2pCLE9BQU95VyxHQUFRbnlCLEtBQU0wYixHQUFVLElBR2hDeVcsT0FBUSxTQUFVelcsR0FDakIsT0FBT3lXLEdBQVFueUIsS0FBTTBiLElBR3RCVCxLQUFNLFNBQVV2YSxHQUNmLE9BQU82MEIsRUFBUXYxQixNQUFNLFNBQVVVLEdBQzlCLFlBQWlCbU4sSUFBVm5OLEVBQ04rYSxFQUFPUixLQUFNamIsTUFDYkEsS0FBS295QixRQUFRN1YsTUFBTSxXQUNLLElBQWxCdmMsS0FBS3NhLFVBQW9DLEtBQWxCdGEsS0FBS3NhLFVBQXFDLElBQWxCdGEsS0FBS3NhLFdBQ3hEdGEsS0FBS2lvQixZQUFjdm5CLFFBR3BCLEtBQU1BLEVBQU9nYyxVQUFVemEsU0FHM0IwaEMsT0FBUSxXQUNQLE9BQU9mLEdBQVU1aUMsS0FBTTBjLFdBQVcsU0FBVUQsR0FDcEIsSUFBbEJ6YyxLQUFLc2EsVUFBb0MsS0FBbEJ0YSxLQUFLc2EsVUFBcUMsSUFBbEJ0YSxLQUFLc2EsVUFDM0M4bkIsR0FBb0JwaUMsS0FBTXljLEdBQ2hDcEIsWUFBYW9CLE9BS3ZCbW5CLFFBQVMsV0FDUixPQUFPaEIsR0FBVTVpQyxLQUFNMGMsV0FBVyxTQUFVRCxHQUMzQyxHQUF1QixJQUFsQnpjLEtBQUtzYSxVQUFvQyxLQUFsQnRhLEtBQUtzYSxVQUFxQyxJQUFsQnRhLEtBQUtzYSxTQUFpQixDQUN6RSxJQUFJNU4sRUFBUzAxQixHQUFvQnBpQyxLQUFNeWMsR0FDdkMvUCxFQUFPeUQsYUFBY3NNLEVBQU0vUCxFQUFPd2IsaUJBS3JDMmIsT0FBUSxXQUNQLE9BQU9qQixHQUFVNWlDLEtBQU0wYyxXQUFXLFNBQVVELEdBQ3RDemMsS0FBS2tRLFlBQ1RsUSxLQUFLa1EsV0FBV0MsYUFBY3NNLEVBQU16YyxVQUt2QzhqQyxNQUFPLFdBQ04sT0FBT2xCLEdBQVU1aUMsS0FBTTBjLFdBQVcsU0FBVUQsR0FDdEN6YyxLQUFLa1EsWUFDVGxRLEtBQUtrUSxXQUFXQyxhQUFjc00sRUFBTXpjLEtBQUsra0IsaUJBSzVDcU4sTUFBTyxXQUlOLElBSEEsSUFBSTNWLEVBQ0hqVyxFQUFJLEVBRTJCLE9BQXRCaVcsRUFBT3pjLEtBQU13RyxJQUFlQSxJQUNkLElBQWxCaVcsRUFBS25DLFdBR1RtQixFQUFPMm5CLFVBQVczSSxHQUFRaGUsR0FBTSxJQUdoQ0EsRUFBS3dMLFlBQWMsSUFJckIsT0FBT2pvQixNQUdSeWQsTUFBTyxTQUFVNGxCLEVBQWVDLEdBSS9CLE9BSEFELEVBQWlDLE1BQWpCQSxHQUFnQ0EsRUFDaERDLEVBQXlDLE1BQXJCQSxFQUE0QkQsRUFBZ0JDLEVBRXpEdGpDLEtBQUs4QixLQUFLLFdBQ2hCLE9BQU8yWixFQUFPZ0MsTUFBT3pkLEtBQU1xakMsRUFBZUMsT0FJNUNMLEtBQU0sU0FBVXZpQyxHQUNmLE9BQU82MEIsRUFBUXYxQixNQUFNLFNBQVVVLEdBQzlCLElBQUkrYixFQUFPemMsS0FBTSxJQUFPLEdBQ3ZCd0csRUFBSSxFQUNKc3BCLEVBQUk5dkIsS0FBS2lDLE9BRVYsUUFBZTRMLElBQVZuTixHQUF5QyxJQUFsQitiLEVBQUtuQyxTQUNoQyxPQUFPbUMsRUFBS2dLLFVBSWIsR0FBc0IsaUJBQVYvbEIsSUFBdUJ1aEMsR0FBYXI3QixLQUFNbEcsS0FDcER5NUIsSUFBV04sR0FBU3RXLEtBQU03aUIsSUFBVyxDQUFFLEdBQUksS0FBUSxHQUFJZ0QsZUFBa0IsQ0FFMUVoRCxFQUFRK2EsRUFBT2lnQixjQUFlaDdCLEdBRTlCLElBQ0MsS0FBUThGLEVBQUlzcEIsRUFBR3RwQixJQUlTLEtBSHZCaVcsRUFBT3pjLEtBQU13RyxJQUFPLElBR1Y4VCxXQUNUbUIsRUFBTzJuQixVQUFXM0ksR0FBUWhlLEdBQU0sSUFDaENBLEVBQUtnSyxVQUFZL2xCLEdBSW5CK2IsRUFBTyxFQUdOLE1BQVE3USxLQUdONlEsR0FDSnpjLEtBQUtveUIsUUFBUXVSLE9BQVFqakMsS0FFcEIsS0FBTUEsRUFBT2djLFVBQVV6YSxTQUczQjhoQyxZQUFhLFdBQ1osSUFBSTFJLEVBQVUsR0FHZCxPQUFPdUgsR0FBVTVpQyxLQUFNMGMsV0FBVyxTQUFVRCxHQUMzQyxJQUFJMVEsRUFBUy9MLEtBQUtrUSxXQUVidUwsRUFBTzhDLFFBQVN2ZSxLQUFNcTdCLEdBQVksSUFDdEM1ZixFQUFPMm5CLFVBQVczSSxHQUFRejZCLE9BQ3JCK0wsR0FDSkEsRUFBT2k0QixhQUFjdm5CLEVBQU16YyxTQUszQnE3QixNQUlMNWYsRUFBT2MsS0FBTSxDQUNaMG5CLFNBQVUsU0FDVkMsVUFBVyxVQUNYL3pCLGFBQWMsU0FDZGcwQixZQUFhLFFBQ2JDLFdBQVksZ0JBQ1YsU0FBVXR5QixFQUFNdXlCLEdBQ2xCNW9CLEVBQU9HLEdBQUk5SixHQUFTLFNBQVU0SixHQU83QixJQU5BLElBQUlTLEVBQ0hDLEVBQU0sR0FDTmtvQixFQUFTN29CLEVBQVFDLEdBQ2pCbUIsRUFBT3luQixFQUFPcmlDLE9BQVMsRUFDdkJ1RSxFQUFJLEVBRUdBLEdBQUtxVyxFQUFNclcsSUFDbEIyVixFQUFRM1YsSUFBTXFXLEVBQU83YyxLQUFPQSxLQUFLeWQsT0FBTyxHQUN4Q2hDLEVBQVE2b0IsRUFBUTk5QixJQUFPNjlCLEdBQVlsb0IsR0FJbkM5WixFQUFLd1gsTUFBT3VDLEVBQUtELEVBQU1ILE9BR3hCLE9BQU9oYyxLQUFLa2MsVUFBV0UsT0FHekIsSUFBSW1vQixHQUFZLElBQUlua0MsT0FBUSxLQUFPMDNCLEdBQU8sa0JBQW1CLEtBRXpEME0sR0FBWSxTQUFVL25CLEdBS3hCLElBQUlta0IsRUFBT25rQixFQUFLNkcsY0FBY3NDLFlBTTlCLE9BSk1nYixHQUFTQSxFQUFLNkQsU0FDbkI3RCxFQUFPM2hDLEdBR0QyaEMsRUFBSzhELGlCQUFrQmpvQixJQUc1QmtvQixHQUFPLFNBQVVsb0IsRUFBTXpELEVBQVN3RCxHQUNuQyxJQUFJSixFQUFLdEssRUFDUjh5QixFQUFNLEdBR1AsSUFBTTl5QixLQUFRa0gsRUFDYjRyQixFQUFLOXlCLEdBQVMySyxFQUFLNGIsTUFBT3ZtQixHQUMxQjJLLEVBQUs0YixNQUFPdm1CLEdBQVNrSCxFQUFTbEgsR0FNL0IsSUFBTUEsS0FITnNLLEVBQU1JLEVBQVM5SyxLQUFNK0ssR0FHUHpELEVBQ2J5RCxFQUFLNGIsTUFBT3ZtQixHQUFTOHlCLEVBQUs5eUIsR0FHM0IsT0FBT3NLLEdBSUp5b0IsR0FBWSxJQUFJemtDLE9BQVE0M0IsR0FBVS9oQixLQUFNLEtBQU8sS0FpSm5ELFNBQVM2dUIsR0FBUXJvQixFQUFNM0ssRUFBTWl6QixHQUM1QixJQUFJQyxFQUFPQyxFQUFVQyxFQUFVOW9CLEVBTTlCaWMsRUFBUTViLEVBQUs0YixNQXFDZCxPQW5DQTBNLEVBQVdBLEdBQVlQLEdBQVcvbkIsTUFRcEIsTUFGYkwsRUFBTTJvQixFQUFTSSxpQkFBa0JyekIsSUFBVWl6QixFQUFVanpCLEtBRWpDbW1CLEdBQVl4YixLQUMvQkwsRUFBTVgsRUFBTzRjLE1BQU81YixFQUFNM0ssS0FRckJxSSxFQUFRaXJCLGtCQUFvQmIsR0FBVTM5QixLQUFNd1YsSUFBU3lvQixHQUFVaitCLEtBQU1rTCxLQUcxRWt6QixFQUFRM00sRUFBTTJNLE1BQ2RDLEVBQVc1TSxFQUFNNE0sU0FDakJDLEVBQVc3TSxFQUFNNk0sU0FHakI3TSxFQUFNNE0sU0FBVzVNLEVBQU02TSxTQUFXN00sRUFBTTJNLE1BQVE1b0IsRUFDaERBLEVBQU0yb0IsRUFBU0MsTUFHZjNNLEVBQU0yTSxNQUFRQSxFQUNkM00sRUFBTTRNLFNBQVdBLEVBQ2pCNU0sRUFBTTZNLFNBQVdBLFNBSUpyM0IsSUFBUnVPLEVBSU5BLEVBQU0sR0FDTkEsRUFJRixTQUFTaXBCLEdBQWNDLEVBQWFDLEdBR25DLE1BQU8sQ0FDTnZwQixJQUFLLFdBQ0osSUFBS3NwQixJQVNMLE9BQVN0bEMsS0FBS2djLElBQU11cEIsR0FBUzFyQixNQUFPN1osS0FBTTBjLGtCQUxsQzFjLEtBQUtnYyxPQTNNaEIsV0FJQyxTQUFTd3BCLElBR1IsR0FBTTdMLEVBQU4sQ0FJQThMLEVBQVVwTixNQUFNcU4sUUFBVSwrRUFFMUIvTCxFQUFJdEIsTUFBTXFOLFFBQ1QsNEhBR0RqZ0IsR0FBZ0JwSyxZQUFhb3FCLEdBQVlwcUIsWUFBYXNlLEdBRXRELElBQUlnTSxFQUFXMW1DLEVBQU95bEMsaUJBQWtCL0ssR0FDeENpTSxFQUFvQyxPQUFqQkQsRUFBUzlmLElBRzVCZ2dCLEVBQXNFLEtBQTlDQyxFQUFvQkgsRUFBU0ksWUFJckRwTSxFQUFJdEIsTUFBTTJOLE1BQVEsTUFDbEJDLEVBQTZELEtBQXpDSCxFQUFvQkgsRUFBU0ssT0FJakRFLEVBQWdFLEtBQXpDSixFQUFvQkgsRUFBU1gsT0FNcERyTCxFQUFJdEIsTUFBTWh0QixTQUFXLFdBQ3JCODZCLEVBQWlFLEtBQTlDTCxFQUFvQm5NLEVBQUl5TSxZQUFjLEdBRXpEM2dCLEdBQWdCbkssWUFBYW1xQixHQUk3QjlMLEVBQU0sTUFHUCxTQUFTbU0sRUFBb0JPLEdBQzVCLE9BQU9saUMsS0FBS21pQyxNQUFPQyxXQUFZRixJQUdoQyxJQUFJVCxFQUFrQk0sRUFBc0JDLEVBQWtCRixFQUM3RE8sRUFBeUJYLEVBQ3pCSixFQUFZeDZCLEVBQVMrUCxjQUFlLE9BQ3BDMmUsRUFBTTF1QixFQUFTK1AsY0FBZSxPQUd6QjJlLEVBQUl0QixRQU1Wc0IsRUFBSXRCLE1BQU1vTyxlQUFpQixjQUMzQjlNLEVBQUkxcEIsV0FBVyxHQUFPb29CLE1BQU1vTyxlQUFpQixHQUM3Q3RzQixFQUFRdXNCLGdCQUErQyxnQkFBN0IvTSxFQUFJdEIsTUFBTW9PLGVBRXBDaHJCLEVBQU82QixPQUFRbkQsRUFBUyxDQUN2QndzQixrQkFBbUIsV0FFbEIsT0FEQW5CLElBQ09VLEdBRVJkLGVBQWdCLFdBRWYsT0FEQUksSUFDT1MsR0FFUlcsY0FBZSxXQUVkLE9BREFwQixJQUNPSSxHQUVSaUIsbUJBQW9CLFdBRW5CLE9BREFyQixJQUNPSyxHQUVSaUIsY0FBZSxXQUVkLE9BREF0QixJQUNPVyxHQVlSWSxxQkFBc0IsV0FDckIsSUFBSUMsRUFBTzFNLEVBQUkyTSxFQUFTQyxFQW1DeEIsT0FsQ2dDLE1BQTNCVixJQUNKUSxFQUFRLzdCLEVBQVMrUCxjQUFlLFNBQ2hDc2YsRUFBS3J2QixFQUFTK1AsY0FBZSxNQUM3QmlzQixFQUFVaDhCLEVBQVMrUCxjQUFlLE9BRWxDZ3NCLEVBQU0zTyxNQUFNcU4sUUFBVSwyREFDdEJwTCxFQUFHakMsTUFBTXFOLFFBQVUsbUJBS25CcEwsRUFBR2pDLE1BQU04TyxPQUFTLE1BQ2xCRixFQUFRNU8sTUFBTThPLE9BQVMsTUFRdkJGLEVBQVE1TyxNQUFNQyxRQUFVLFFBRXhCN1MsR0FDRXBLLFlBQWEyckIsR0FDYjNyQixZQUFhaWYsR0FDYmpmLFlBQWE0ckIsR0FFZkMsRUFBVWpvQyxFQUFPeWxDLGlCQUFrQnBLLEdBQ25Da00sRUFBNEJ4a0MsU0FBVWtsQyxFQUFRQyxPQUFRLElBQ3JEbmxDLFNBQVVrbEMsRUFBUUUsZUFBZ0IsSUFDbENwbEMsU0FBVWtsQyxFQUFRRyxrQkFBbUIsTUFBVy9NLEVBQUdnTixhQUVwRDdoQixHQUFnQm5LLFlBQWEwckIsSUFFdkJSLE1BdklWLEdBc05BLElBQUllLEdBQWMsQ0FBRSxTQUFVLE1BQU8sTUFDcENDLEdBQWF2OEIsRUFBUytQLGNBQWUsT0FBUXFkLE1BQzdDb1AsR0FBYyxHQWtCZixTQUFTQyxHQUFlNTFCLEdBR3ZCLE9BRlkySixFQUFPa3NCLFNBQVU3MUIsSUFBVTIxQixHQUFhMzFCLEtBSy9DQSxLQUFRMDFCLEdBQ0wxMUIsRUFFRDIxQixHQUFhMzFCLEdBeEJyQixTQUF5QkEsR0FNeEIsSUFIQSxJQUFJODFCLEVBQVU5MUIsRUFBTSxHQUFJUCxjQUFnQk8sRUFBSzVRLE1BQU8sR0FDbkRzRixFQUFJK2dDLEdBQVl0bEMsT0FFVHVFLEtBRVAsSUFEQXNMLEVBQU95MUIsR0FBYS9nQyxHQUFNb2hDLEtBQ2JKLEdBQ1osT0FBTzExQixFQWVvQisxQixDQUFnQi8xQixJQUFVQSxHQUl4RCxJQUtDZzJCLEdBQWUsNEJBQ2ZDLEdBQWMsTUFDZEMsR0FBVSxDQUFFMzhCLFNBQVUsV0FBWTQ4QixXQUFZLFNBQVUzUCxRQUFTLFNBQ2pFNFAsR0FBcUIsQ0FDcEJDLGNBQWUsSUFDZkMsV0FBWSxPQUdkLFNBQVNDLEdBQW1CcnJCLEVBQU90YyxFQUFPNG5DLEdBSXpDLElBQUk3cEIsRUFBVXNaLEdBQVF4VSxLQUFNN2lCLEdBQzVCLE9BQU8rZCxFQUdOdGEsS0FBS29rQyxJQUFLLEVBQUc5cEIsRUFBUyxJQUFRNnBCLEdBQVksS0FBVTdwQixFQUFTLElBQU8sTUFDcEUvZCxFQUdGLFNBQVM4bkMsR0FBb0IvckIsRUFBTWdzQixFQUFXQyxFQUFLQyxFQUFhQyxFQUFRQyxHQUN2RSxJQUFJcmlDLEVBQWtCLFVBQWRpaUMsRUFBd0IsRUFBSSxFQUNuQ0ssRUFBUSxFQUNSQyxFQUFRLEVBR1QsR0FBS0wsS0FBVUMsRUFBYyxTQUFXLFdBQ3ZDLE9BQU8sRUFHUixLQUFRbmlDLEVBQUksRUFBR0EsR0FBSyxFQUdOLFdBQVJraUMsSUFDSkssR0FBU3R0QixFQUFPOGMsSUFBSzliLEVBQU1pc0IsRUFBTTFRLEdBQVd4eEIsSUFBSyxFQUFNb2lDLElBSWxERCxHQW1CUSxZQUFSRCxJQUNKSyxHQUFTdHRCLEVBQU84YyxJQUFLOWIsRUFBTSxVQUFZdWIsR0FBV3h4QixJQUFLLEVBQU1vaUMsSUFJakQsV0FBUkYsSUFDSkssR0FBU3R0QixFQUFPOGMsSUFBSzliLEVBQU0sU0FBV3ViLEdBQVd4eEIsR0FBTSxTQUFTLEVBQU1vaUMsTUF0QnZFRyxHQUFTdHRCLEVBQU84YyxJQUFLOWIsRUFBTSxVQUFZdWIsR0FBV3h4QixJQUFLLEVBQU1vaUMsR0FHaEQsWUFBUkYsRUFDSkssR0FBU3R0QixFQUFPOGMsSUFBSzliLEVBQU0sU0FBV3ViLEdBQVd4eEIsR0FBTSxTQUFTLEVBQU1vaUMsR0FJdEVFLEdBQVNydEIsRUFBTzhjLElBQUs5YixFQUFNLFNBQVd1YixHQUFXeHhCLEdBQU0sU0FBUyxFQUFNb2lDLElBb0N6RSxPQWhCTUQsR0FBZUUsR0FBZSxJQUluQ0UsR0FBUzVrQyxLQUFLb2tDLElBQUssRUFBR3BrQyxLQUFLNmtDLEtBQzFCdnNCLEVBQU0sU0FBV2dzQixFQUFXLEdBQUlsM0IsY0FBZ0JrM0IsRUFBVXZuQyxNQUFPLElBQ2pFMm5DLEVBQ0FFLEVBQ0FELEVBQ0EsTUFJTSxHQUdEQyxFQUdSLFNBQVNFLEdBQWtCeHNCLEVBQU1nc0IsRUFBV0ssR0FHM0MsSUFBSUYsRUFBU3BFLEdBQVcvbkIsR0FLdkJrc0IsSUFEbUJ4dUIsRUFBUXdzQixxQkFBdUJtQyxJQUVFLGVBQW5EcnRCLEVBQU84YyxJQUFLOWIsRUFBTSxhQUFhLEVBQU9tc0IsR0FDdkNNLEVBQW1CUCxFQUVuQmorQixFQUFNbzZCLEdBQVFyb0IsRUFBTWdzQixFQUFXRyxHQUMvQk8sRUFBYSxTQUFXVixFQUFXLEdBQUlsM0IsY0FBZ0JrM0IsRUFBVXZuQyxNQUFPLEdBSXpFLEdBQUtxakMsR0FBVTM5QixLQUFNOEQsR0FBUSxDQUM1QixJQUFNbytCLEVBQ0wsT0FBT3ArQixFQUVSQSxFQUFNLE9BeUNQLFFBbENReVAsRUFBUXdzQixxQkFBdUJnQyxJQU1yQ3h1QixFQUFRNHNCLHdCQUEwQnBrQixFQUFVbEcsRUFBTSxPQUkzQyxTQUFSL1IsSUFJQzY3QixXQUFZNzdCLElBQTBELFdBQWpEK1EsRUFBTzhjLElBQUs5YixFQUFNLFdBQVcsRUFBT21zQixLQUcxRG5zQixFQUFLMnNCLGlCQUFpQm5uQyxTQUV0QjBtQyxFQUFpRSxlQUFuRGx0QixFQUFPOGMsSUFBSzliLEVBQU0sYUFBYSxFQUFPbXNCLElBS3BETSxFQUFtQkMsS0FBYzFzQixLQUVoQy9SLEVBQU0rUixFQUFNMHNCLE1BS2R6K0IsRUFBTTY3QixXQUFZNzdCLElBQVMsR0FJMUI4OUIsR0FDQy9yQixFQUNBZ3NCLEVBQ0FLLElBQVdILEVBQWMsU0FBVyxXQUNwQ08sRUFDQU4sRUFHQWwrQixHQUVFLEtBK1NMLFNBQVMyK0IsR0FBTzVzQixFQUFNekQsRUFBU3lkLEVBQU10WixFQUFLbXNCLEdBQ3pDLE9BQU8sSUFBSUQsR0FBTTdvQyxVQUFVa08sS0FBTStOLEVBQU16RCxFQUFTeWQsRUFBTXRaLEVBQUttc0IsR0E3UzVEN3RCLEVBQU82QixPQUFRLENBSWRpc0IsU0FBVSxDQUNUQyxRQUFTLENBQ1J4dEIsSUFBSyxTQUFVUyxFQUFNc29CLEdBQ3BCLEdBQUtBLEVBQVcsQ0FHZixJQUFJM29CLEVBQU0wb0IsR0FBUXJvQixFQUFNLFdBQ3hCLE1BQWUsS0FBUkwsRUFBYSxJQUFNQSxNQU85QjZjLFVBQVcsQ0FDVix5QkFBMkIsRUFDM0IsYUFBZSxFQUNmLGFBQWUsRUFDZixVQUFZLEVBQ1osWUFBYyxFQUNkLFlBQWMsRUFDZCxVQUFZLEVBQ1osWUFBYyxFQUNkLGVBQWlCLEVBQ2pCLGlCQUFtQixFQUNuQixTQUFXLEVBQ1gsWUFBYyxFQUNkLGNBQWdCLEVBQ2hCLFlBQWMsRUFDZCxTQUFXLEVBQ1gsT0FBUyxFQUNULFNBQVcsRUFDWCxRQUFVLEVBQ1YsUUFBVSxFQUNWLE1BQVEsR0FLVDBPLFNBQVUsR0FHVnRQLE1BQU8sU0FBVTViLEVBQU0zSyxFQUFNcFIsRUFBT29vQyxHQUduQyxHQUFNcnNCLEdBQTBCLElBQWxCQSxFQUFLbkMsVUFBb0MsSUFBbEJtQyxFQUFLbkMsVUFBbUJtQyxFQUFLNGIsTUFBbEUsQ0FLQSxJQUFJamMsRUFBS3hZLEVBQU0yekIsRUFDZGtTLEVBQVd4VCxFQUFXbmtCLEdBQ3RCNDNCLEVBQWUzQixHQUFZbmhDLEtBQU1rTCxHQUNqQ3VtQixFQUFRNWIsRUFBSzRiLE1BYWQsR0FSTXFSLElBQ0w1M0IsRUFBTzQxQixHQUFlK0IsSUFJdkJsUyxFQUFROWIsRUFBTzh0QixTQUFVejNCLElBQVUySixFQUFPOHRCLFNBQVVFLFFBR3JDNTdCLElBQVZuTixFQTBDSixPQUFLNjJCLEdBQVMsUUFBU0EsUUFDd0IxcEIsS0FBNUN1TyxFQUFNbWIsRUFBTXZiLElBQUtTLEdBQU0sRUFBT3FzQixJQUV6QjFzQixFQUlEaWMsRUFBT3ZtQixHQTdDQSxXQUhkbE8sU0FBY2xELEtBR2MwYixFQUFNMmIsR0FBUXhVLEtBQU03aUIsS0FBYTBiLEVBQUssS0FDakUxYixFQUFRODNCLEdBQVcvYixFQUFNM0ssRUFBTXNLLEdBRy9CeFksRUFBTyxVQUlNLE1BQVRsRCxHQUFpQkEsR0FBVUEsSUFPbEIsV0FBVGtELEdBQXNCOGxDLElBQzFCaHBDLEdBQVMwYixHQUFPQSxFQUFLLEtBQVNYLEVBQU93ZCxVQUFXd1EsR0FBYSxHQUFLLE9BSTdEdHZCLEVBQVF1c0IsaUJBQTZCLEtBQVZobUMsR0FBaUQsSUFBakNvUixFQUFLM1EsUUFBUyxnQkFDOURrM0IsRUFBT3ZtQixHQUFTLFdBSVh5bEIsR0FBWSxRQUFTQSxRQUNzQjFwQixLQUE5Q25OLEVBQVE2MkIsRUFBTWYsSUFBSy9aLEVBQU0vYixFQUFPb29DLE1BRTdCWSxFQUNKclIsRUFBTXNSLFlBQWE3M0IsRUFBTXBSLEdBRXpCMjNCLEVBQU92bUIsR0FBU3BSLE1Ba0JwQjYzQixJQUFLLFNBQVU5YixFQUFNM0ssRUFBTWczQixFQUFPRixHQUNqQyxJQUFJbCtCLEVBQUt1UixFQUFLc2IsRUFDYmtTLEVBQVd4VCxFQUFXbmtCLEdBNkJ2QixPQTVCZ0JpMkIsR0FBWW5oQyxLQUFNa0wsS0FNakNBLEVBQU80MUIsR0FBZStCLEtBSXZCbFMsRUFBUTliLEVBQU84dEIsU0FBVXozQixJQUFVMkosRUFBTzh0QixTQUFVRSxLQUd0QyxRQUFTbFMsSUFDdEI3c0IsRUFBTTZzQixFQUFNdmIsSUFBS1MsR0FBTSxFQUFNcXNCLFNBSWpCajdCLElBQVJuRCxJQUNKQSxFQUFNbzZCLEdBQVFyb0IsRUFBTTNLLEVBQU04MkIsSUFJZCxXQUFSbCtCLEdBQW9Cb0gsS0FBUW8yQixLQUNoQ3g5QixFQUFNdzlCLEdBQW9CcDJCLElBSVosS0FBVmczQixHQUFnQkEsR0FDcEI3c0IsRUFBTXNxQixXQUFZNzdCLElBQ0QsSUFBVm8rQixHQUFrQmMsU0FBVTN0QixHQUFRQSxHQUFPLEVBQUl2UixHQUdoREEsS0FJVCtRLEVBQU9jLEtBQU0sQ0FBRSxTQUFVLFVBQVcsU0FBVWpHLEVBQUlteUIsR0FDakRodEIsRUFBTzh0QixTQUFVZCxHQUFjLENBQzlCenNCLElBQUssU0FBVVMsRUFBTXNvQixFQUFVK0QsR0FDOUIsR0FBSy9ELEVBSUosT0FBTytDLEdBQWFsaEMsS0FBTTZVLEVBQU84YyxJQUFLOWIsRUFBTSxhQVF4Q0EsRUFBSzJzQixpQkFBaUJubkMsUUFBV3dhLEVBQUtvdEIsd0JBQXdCN0UsTUFJakVpRSxHQUFrQnhzQixFQUFNZ3NCLEVBQVdLLEdBSG5DbkUsR0FBTWxvQixFQUFNdXJCLElBQVMsV0FDcEIsT0FBT2lCLEdBQWtCeHNCLEVBQU1nc0IsRUFBV0ssT0FNOUN0UyxJQUFLLFNBQVUvWixFQUFNL2IsRUFBT29vQyxHQUMzQixJQUFJcnFCLEVBQ0htcUIsRUFBU3BFLEdBQVcvbkIsR0FJcEJxdEIsR0FBc0IzdkIsRUFBUTJzQixpQkFDVCxhQUFwQjhCLEVBQU92OUIsU0FJUnM5QixHQURrQm1CLEdBQXNCaEIsSUFFWSxlQUFuRHJ0QixFQUFPOGMsSUFBSzliLEVBQU0sYUFBYSxFQUFPbXNCLEdBQ3ZDTixFQUFXUSxFQUNWTixHQUNDL3JCLEVBQ0Fnc0IsRUFDQUssRUFDQUgsRUFDQUMsR0FFRCxFQXFCRixPQWpCS0QsR0FBZW1CLElBQ25CeEIsR0FBWW5rQyxLQUFLNmtDLEtBQ2hCdnNCLEVBQU0sU0FBV2dzQixFQUFXLEdBQUlsM0IsY0FBZ0JrM0IsRUFBVXZuQyxNQUFPLElBQ2pFcWxDLFdBQVlxQyxFQUFRSCxJQUNwQkQsR0FBb0IvckIsRUFBTWdzQixFQUFXLFVBQVUsRUFBT0csR0FDdEQsS0FLR04sSUFBYzdwQixFQUFVc1osR0FBUXhVLEtBQU03aUIsS0FDYixRQUEzQitkLEVBQVMsSUFBTyxRQUVsQmhDLEVBQUs0YixNQUFPb1EsR0FBYy9uQyxFQUMxQkEsRUFBUSthLEVBQU84YyxJQUFLOWIsRUFBTWdzQixJQUdwQkosR0FBbUI1ckIsRUFBTS9iLEVBQU80bkMsUUFLMUM3c0IsRUFBTzh0QixTQUFTeEQsV0FBYVYsR0FBY2xyQixFQUFRMHNCLG9CQUNsRCxTQUFVcHFCLEVBQU1zb0IsR0FDZixHQUFLQSxFQUNKLE9BQVN3QixXQUFZekIsR0FBUXJvQixFQUFNLGdCQUNsQ0EsRUFBS290Qix3QkFBd0JFLEtBQzVCcEYsR0FBTWxvQixFQUFNLENBQUVzcEIsV0FBWSxJQUFLLFdBQzlCLE9BQU90cEIsRUFBS290Qix3QkFBd0JFLFNBRW5DLFFBTVB0dUIsRUFBT2MsS0FBTSxDQUNaeXRCLE9BQVEsR0FDUkMsUUFBUyxHQUNUQyxPQUFRLFVBQ04sU0FBVXZxQyxFQUFRd3FDLEdBQ3BCMXVCLEVBQU84dEIsU0FBVTVwQyxFQUFTd3FDLEdBQVcsQ0FDcENDLE9BQVEsU0FBVTFwQyxHQU9qQixJQU5BLElBQUk4RixFQUFJLEVBQ1A2akMsRUFBVyxHQUdYeHBDLEVBQXlCLGlCQUFWSCxFQUFxQkEsRUFBTVUsTUFBTyxLQUFRLENBQUVWLEdBRXBEOEYsRUFBSSxFQUFHQSxJQUNkNmpDLEVBQVUxcUMsRUFBU3E0QixHQUFXeHhCLEdBQU0yakMsR0FDbkN0cEMsRUFBTzJGLElBQU8zRixFQUFPMkYsRUFBSSxJQUFPM0YsRUFBTyxHQUd6QyxPQUFPd3BDLElBSU8sV0FBWDFxQyxJQUNKOGIsRUFBTzh0QixTQUFVNXBDLEVBQVN3cUMsR0FBUzNULElBQU02UixPQUkzQzVzQixFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQmliLElBQUssU0FBVXptQixFQUFNcFIsR0FDcEIsT0FBTzYwQixFQUFRdjFCLE1BQU0sU0FBVXljLEVBQU0zSyxFQUFNcFIsR0FDMUMsSUFBSWtvQyxFQUFRLzlCLEVBQ1gvSSxFQUFNLEdBQ04wRSxFQUFJLEVBRUwsR0FBS2tRLE1BQU1FLFFBQVM5RSxHQUFTLENBSTVCLElBSEE4MkIsRUFBU3BFLEdBQVcvbkIsR0FDcEI1UixFQUFNaUgsRUFBSzdQLE9BRUh1RSxFQUFJcUUsRUFBS3JFLElBQ2hCMUUsRUFBS2dRLEVBQU10TCxJQUFRaVYsRUFBTzhjLElBQUs5YixFQUFNM0ssRUFBTXRMLElBQUssRUFBT29pQyxHQUd4RCxPQUFPOW1DLEVBR1IsWUFBaUIrTCxJQUFWbk4sRUFDTithLEVBQU80YyxNQUFPNWIsRUFBTTNLLEVBQU1wUixHQUMxQithLEVBQU84YyxJQUFLOWIsRUFBTTNLLEtBQ2pCQSxFQUFNcFIsRUFBT2djLFVBQVV6YSxPQUFTLE1BUXJDd1osRUFBTzR0QixNQUFRQSxHQUVmQSxHQUFNN29DLFVBQVksQ0FDakJxWCxZQUFhd3hCLEdBQ2IzNkIsS0FBTSxTQUFVK04sRUFBTXpELEVBQVN5ZCxFQUFNdFosRUFBS21zQixFQUFRdFEsR0FDakRoNUIsS0FBS3ljLEtBQU9BLEVBQ1p6YyxLQUFLeTJCLEtBQU9BLEVBQ1p6MkIsS0FBS3NwQyxPQUFTQSxHQUFVN3RCLEVBQU82dEIsT0FBTzlPLFNBQ3RDeDZCLEtBQUtnWixRQUFVQSxFQUNmaFosS0FBS3dwQixNQUFReHBCLEtBQUsrL0IsSUFBTS8vQixLQUFLNGtCLE1BQzdCNWtCLEtBQUttZCxJQUFNQSxFQUNYbmQsS0FBS2c1QixLQUFPQSxJQUFVdmQsRUFBT3dkLFVBQVd4QyxHQUFTLEdBQUssT0FFdkQ3UixJQUFLLFdBQ0osSUFBSTJTLEVBQVE4UixHQUFNaUIsVUFBV3RxQyxLQUFLeTJCLE1BRWxDLE9BQU9jLEdBQVNBLEVBQU12YixJQUNyQnViLEVBQU12YixJQUFLaGMsTUFDWHFwQyxHQUFNaUIsVUFBVTlQLFNBQVN4ZSxJQUFLaGMsT0FFaEN1cUMsSUFBSyxTQUFVQyxHQUNkLElBQUlDLEVBQ0hsVCxFQUFROFIsR0FBTWlCLFVBQVd0cUMsS0FBS3kyQixNQW9CL0IsT0FsQkt6MkIsS0FBS2daLFFBQVEweEIsU0FDakIxcUMsS0FBSzJxQyxJQUFNRixFQUFRaHZCLEVBQU82dEIsT0FBUXRwQyxLQUFLc3BDLFFBQ3RDa0IsRUFBU3hxQyxLQUFLZ1osUUFBUTB4QixTQUFXRixFQUFTLEVBQUcsRUFBR3hxQyxLQUFLZ1osUUFBUTB4QixVQUc5RDFxQyxLQUFLMnFDLElBQU1GLEVBQVFELEVBRXBCeHFDLEtBQUsrL0IsS0FBUS8vQixLQUFLbWQsSUFBTW5kLEtBQUt3cEIsT0FBVWloQixFQUFRenFDLEtBQUt3cEIsTUFFL0N4cEIsS0FBS2daLFFBQVE0eEIsTUFDakI1cUMsS0FBS2daLFFBQVE0eEIsS0FBS2w1QixLQUFNMVIsS0FBS3ljLEtBQU16YyxLQUFLKy9CLElBQUsvL0IsTUFHekN1M0IsR0FBU0EsRUFBTWYsSUFDbkJlLEVBQU1mLElBQUt4MkIsTUFFWHFwQyxHQUFNaUIsVUFBVTlQLFNBQVNoRSxJQUFLeDJCLE1BRXhCQSxPQUlUcXBDLEdBQU03b0MsVUFBVWtPLEtBQUtsTyxVQUFZNm9DLEdBQU03b0MsVUFFdkM2b0MsR0FBTWlCLFVBQVksQ0FDakI5UCxTQUFVLENBQ1R4ZSxJQUFLLFNBQVUwYyxHQUNkLElBQUloMkIsRUFJSixPQUE2QixJQUF4QmcyQixFQUFNamMsS0FBS25DLFVBQ2EsTUFBNUJvZSxFQUFNamMsS0FBTWljLEVBQU1qQyxPQUFvRCxNQUFsQ2lDLEVBQU1qYyxLQUFLNGIsTUFBT0ssRUFBTWpDLE1BQ3JEaUMsRUFBTWpjLEtBQU1pYyxFQUFNakMsT0FPMUIvekIsRUFBUytZLEVBQU84YyxJQUFLRyxFQUFNamMsS0FBTWljLEVBQU1qQyxLQUFNLE1BR2hCLFNBQVgvekIsRUFBd0JBLEVBQUosR0FFdkM4ekIsSUFBSyxTQUFVa0MsR0FLVGpkLEVBQU9vdkIsR0FBR0QsS0FBTWxTLEVBQU1qQyxNQUMxQmhiLEVBQU9vdkIsR0FBR0QsS0FBTWxTLEVBQU1qQyxNQUFRaUMsR0FDSyxJQUF4QkEsRUFBTWpjLEtBQUtuQyxXQUN0Qm1CLEVBQU84dEIsU0FBVTdRLEVBQU1qQyxPQUM2QixNQUFuRGlDLEVBQU1qYyxLQUFLNGIsTUFBT3FQLEdBQWVoUCxFQUFNakMsT0FHeENpQyxFQUFNamMsS0FBTWljLEVBQU1qQyxNQUFTaUMsRUFBTXFILElBRmpDdGtCLEVBQU80YyxNQUFPSyxFQUFNamMsS0FBTWljLEVBQU1qQyxLQUFNaUMsRUFBTXFILElBQU1ySCxFQUFNTSxTQVU1RHFRLEdBQU1pQixVQUFVUSxVQUFZekIsR0FBTWlCLFVBQVVTLFdBQWEsQ0FDeER2VSxJQUFLLFNBQVVrQyxHQUNUQSxFQUFNamMsS0FBS25DLFVBQVlvZSxFQUFNamMsS0FBS3ZNLGFBQ3RDd29CLEVBQU1qYyxLQUFNaWMsRUFBTWpDLE1BQVNpQyxFQUFNcUgsT0FLcEN0a0IsRUFBTzZ0QixPQUFTLENBQ2YwQixPQUFRLFNBQVVDLEdBQ2pCLE9BQU9BLEdBRVJDLE1BQU8sU0FBVUQsR0FDaEIsTUFBTyxHQUFNOW1DLEtBQUtnbkMsSUFBS0YsRUFBSTltQyxLQUFLaW5DLElBQU8sR0FFeEM1USxTQUFVLFNBR1gvZSxFQUFPb3ZCLEdBQUt4QixHQUFNN29DLFVBQVVrTyxLQUc1QitNLEVBQU9vdkIsR0FBR0QsS0FBTyxHQUtqQixJQUNDUyxHQUFPQyxHQUNQQyxHQUFXLHlCQUNYQyxHQUFPLGNBRVIsU0FBU0MsS0FDSEgsTUFDcUIsSUFBcEJyZ0MsRUFBU3lnQyxRQUFvQnpzQyxFQUFPMHNDLHNCQUN4QzFzQyxFQUFPMHNDLHNCQUF1QkYsSUFFOUJ4c0MsRUFBTzZMLFdBQVkyZ0MsR0FBVWh3QixFQUFPb3ZCLEdBQUdlLFVBR3hDbndCLEVBQU9vdkIsR0FBR2dCLFFBS1osU0FBU0MsS0FJUixPQUhBN3NDLEVBQU82TCxZQUFZLFdBQ2xCdWdDLFFBQVF4OUIsS0FFQXc5QixHQUFRenJCLEtBQUttZ0IsTUFJdkIsU0FBU2dNLEdBQU9ub0MsRUFBTW9vQyxHQUNyQixJQUFJdDdCLEVBQ0hsSyxFQUFJLEVBQ0pnZSxFQUFRLENBQUUyaUIsT0FBUXZqQyxHQUtuQixJQURBb29DLEVBQWVBLEVBQWUsRUFBSSxFQUMxQnhsQyxFQUFJLEVBQUdBLEdBQUssRUFBSXdsQyxFQUV2QnhuQixFQUFPLFVBRFA5VCxFQUFRc25CLEdBQVd4eEIsS0FDU2dlLEVBQU8sVUFBWTlULEdBQVU5TSxFQU8xRCxPQUpLb29DLElBQ0p4bkIsRUFBTWdsQixRQUFVaGxCLEVBQU13Z0IsTUFBUXBoQyxHQUd4QjRnQixFQUdSLFNBQVN5bkIsR0FBYXZyQyxFQUFPKzFCLEVBQU15VixHQUtsQyxJQUpBLElBQUl4VCxFQUNIbUssR0FBZXNKLEdBQVVDLFNBQVUzVixJQUFVLElBQUt2dUIsT0FBUWlrQyxHQUFVQyxTQUFVLE1BQzlFenBDLEVBQVEsRUFDUlYsRUFBUzRnQyxFQUFXNWdDLE9BQ2JVLEVBQVFWLEVBQVFVLElBQ3ZCLEdBQU8rMUIsRUFBUW1LLEVBQVlsZ0MsR0FBUStPLEtBQU13NkIsRUFBV3pWLEVBQU0vMUIsR0FHekQsT0FBT2c0QixFQXNOVixTQUFTeVQsR0FBVzF2QixFQUFNak8sRUFBWXdLLEdBQ3JDLElBQUl0VyxFQUNIMnBDLEVBQ0ExcEMsRUFBUSxFQUNSVixFQUFTa3FDLEdBQVVHLFdBQVdycUMsT0FDOUI0d0IsRUFBV3BYLEVBQU8rVyxXQUFXSSxRQUFRLGtCQUc3QmlaLEVBQUtwdkIsUUFFYm92QixFQUFPLFdBQ04sR0FBS1EsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjbEIsSUFBU1MsS0FDMUJ2WCxFQUFZcHdCLEtBQUtva0MsSUFBSyxFQUFHMkQsRUFBVU0sVUFBWU4sRUFBVXhCLFNBQVc2QixHQUtwRS9CLEVBQVUsR0FESGpXLEVBQVkyWCxFQUFVeEIsVUFBWSxHQUV6Qy9uQyxFQUFRLEVBQ1JWLEVBQVNpcUMsRUFBVU8sT0FBT3hxQyxPQUVuQlUsRUFBUVYsRUFBUVUsSUFDdkJ1cEMsRUFBVU8sT0FBUTlwQyxHQUFRNG5DLElBQUtDLEdBTWhDLE9BSEEzWCxFQUFTZ0IsV0FBWXBYLEVBQU0sQ0FBRXl2QixFQUFXMUIsRUFBU2pXLElBRzVDaVcsRUFBVSxHQUFLdm9DLEVBQ1pzeUIsR0FJRnR5QixHQUNMNHdCLEVBQVNnQixXQUFZcFgsRUFBTSxDQUFFeXZCLEVBQVcsRUFBRyxJQUk1Q3JaLEVBQVNpQixZQUFhclgsRUFBTSxDQUFFeXZCLEtBQ3ZCLElBRVJBLEVBQVlyWixFQUFTM0IsUUFBUyxDQUM3QnpVLEtBQU1BLEVBQ05pakIsTUFBT2prQixFQUFPNkIsT0FBUSxHQUFJOU8sR0FDMUI3QixLQUFNOE8sRUFBTzZCLFFBQVEsRUFBTSxDQUMxQm92QixjQUFlLEdBQ2ZwRCxPQUFRN3RCLEVBQU82dEIsT0FBTzlPLFVBQ3BCeGhCLEdBQ0gyekIsbUJBQW9CbitCLEVBQ3BCbytCLGdCQUFpQjV6QixFQUNqQnd6QixVQUFXbkIsSUFBU1MsS0FDcEJwQixTQUFVMXhCLEVBQVEweEIsU0FDbEIrQixPQUFRLEdBQ1JSLFlBQWEsU0FBVXhWLEVBQU10WixHQUM1QixJQUFJdWIsRUFBUWpkLEVBQU80dEIsTUFBTzVzQixFQUFNeXZCLEVBQVV2L0IsS0FBTThwQixFQUFNdFosRUFDckQrdUIsRUFBVXYvQixLQUFLKy9CLGNBQWVqVyxJQUFVeVYsRUFBVXYvQixLQUFLMjhCLFFBRXhELE9BREE0QyxFQUFVTyxPQUFPcHFDLEtBQU1xMkIsR0FDaEJBLEdBRVJqQixLQUFNLFNBQVVvVixHQUNmLElBQUlscUMsRUFBUSxFQUlYVixFQUFTNHFDLEVBQVVYLEVBQVVPLE9BQU94cUMsT0FBUyxFQUM5QyxHQUFLb3FDLEVBQ0osT0FBT3JzQyxLQUdSLElBREFxc0MsR0FBVSxFQUNGMXBDLEVBQVFWLEVBQVFVLElBQ3ZCdXBDLEVBQVVPLE9BQVE5cEMsR0FBUTRuQyxJQUFLLEdBVWhDLE9BTktzQyxHQUNKaGEsRUFBU2dCLFdBQVlwWCxFQUFNLENBQUV5dkIsRUFBVyxFQUFHLElBQzNDclosRUFBU2lCLFlBQWFyWCxFQUFNLENBQUV5dkIsRUFBV1csS0FFekNoYSxFQUFTcUIsV0FBWXpYLEVBQU0sQ0FBRXl2QixFQUFXVyxJQUVsQzdzQyxRQUdUMC9CLEVBQVF3TSxFQUFVeE0sTUFJbkIsSUEvSEQsU0FBcUJBLEVBQU9nTixHQUMzQixJQUFJL3BDLEVBQU9tUCxFQUFNdzNCLEVBQVE1b0MsRUFBTzYyQixFQUdoQyxJQUFNNTBCLEtBQVMrOEIsRUFlZCxHQWJBNEosRUFBU29ELEVBRFQ1NkIsRUFBT21rQixFQUFXdHpCLElBRWxCakMsRUFBUWcvQixFQUFPLzhCLEdBQ1YrVCxNQUFNRSxRQUFTbFcsS0FDbkI0b0MsRUFBUzVvQyxFQUFPLEdBQ2hCQSxFQUFRZy9CLEVBQU8vOEIsR0FBVWpDLEVBQU8sSUFHNUJpQyxJQUFVbVAsSUFDZDR0QixFQUFPNXRCLEdBQVNwUixTQUNUZy9CLEVBQU8vOEIsS0FHZjQwQixFQUFROWIsRUFBTzh0QixTQUFVejNCLEtBQ1gsV0FBWXlsQixFQU16QixJQUFNNTBCLEtBTE5qQyxFQUFRNjJCLEVBQU02UyxPQUFRMXBDLFVBQ2ZnL0IsRUFBTzV0QixHQUlDcFIsRUFDTmlDLEtBQVMrOEIsSUFDaEJBLEVBQU8vOEIsR0FBVWpDLEVBQU9pQyxHQUN4QitwQyxFQUFlL3BDLEdBQVUybUMsUUFJM0JvRCxFQUFlNTZCLEdBQVN3M0IsRUE2RjFCd0QsQ0FBWXBOLEVBQU93TSxFQUFVdi9CLEtBQUsrL0IsZUFFMUIvcEMsRUFBUVYsRUFBUVUsSUFFdkIsR0FEQUQsRUFBU3lwQyxHQUFVRyxXQUFZM3BDLEdBQVErTyxLQUFNdzZCLEVBQVd6dkIsRUFBTWlqQixFQUFPd00sRUFBVXYvQixNQU05RSxPQUpLeU4sRUFBWTFYLEVBQU8rMEIsUUFDdkJoYyxFQUFPK2IsWUFBYTBVLEVBQVV6dkIsS0FBTXl2QixFQUFVdi9CLEtBQUttbEIsT0FBUTJGLEtBQzFELzBCLEVBQU8rMEIsS0FBS3pvQixLQUFNdE0sSUFFYkEsRUF5QlQsT0FyQkErWSxFQUFPM1osSUFBSzQ5QixFQUFPdU0sR0FBYUMsR0FFM0I5eEIsRUFBWTh4QixFQUFVdi9CLEtBQUs2YyxRQUMvQjBpQixFQUFVdi9CLEtBQUs2YyxNQUFNOVgsS0FBTStLLEVBQU15dkIsR0FJbENBLEVBQ0UvWSxTQUFVK1ksRUFBVXYvQixLQUFLd21CLFVBQ3pCN2IsS0FBTTQwQixFQUFVdi9CLEtBQUsySyxLQUFNNDBCLEVBQVV2L0IsS0FBS29nQyxVQUMxQzViLEtBQU0rYSxFQUFVdi9CLEtBQUt3a0IsTUFDckJ5QixPQUFRc1osRUFBVXYvQixLQUFLaW1CLFFBRXpCblgsRUFBT292QixHQUFHbUMsTUFDVHZ4QixFQUFPNkIsT0FBUXV1QixFQUFNLENBQ3BCcHZCLEtBQU1BLEVBQ053d0IsS0FBTWYsRUFDTnBhLE1BQU9vYSxFQUFVdi9CLEtBQUttbEIsU0FJakJvYSxFQUdSendCLEVBQU8wd0IsVUFBWTF3QixFQUFPNkIsT0FBUTZ1QixHQUFXLENBRTVDQyxTQUFVLENBQ1QsSUFBSyxDQUFFLFNBQVUzVixFQUFNLzFCLEdBQ3RCLElBQUlnNEIsRUFBUTE0QixLQUFLaXNDLFlBQWF4VixFQUFNLzFCLEdBRXBDLE9BREE4M0IsR0FBV0UsRUFBTWpjLEtBQU1nYSxFQUFNc0IsR0FBUXhVLEtBQU03aUIsR0FBU2c0QixHQUM3Q0EsS0FJVHdVLFFBQVMsU0FBVXhOLEVBQU9sakIsR0FDcEJwQyxFQUFZc2xCLElBQ2hCbGpCLEVBQVdrakIsRUFDWEEsRUFBUSxDQUFFLE1BRVZBLEVBQVFBLEVBQU14YyxNQUFPdU4sR0FPdEIsSUFKQSxJQUFJZ0csRUFDSDl6QixFQUFRLEVBQ1JWLEVBQVN5OUIsRUFBTXo5QixPQUVSVSxFQUFRVixFQUFRVSxJQUN2Qjh6QixFQUFPaUosRUFBTy84QixHQUNkd3BDLEdBQVVDLFNBQVUzVixHQUFTMFYsR0FBVUMsU0FBVTNWLElBQVUsR0FDM0QwVixHQUFVQyxTQUFVM1YsR0FBT3YwQixRQUFTc2EsSUFJdEM4dkIsV0FBWSxDQTNXYixTQUEyQjd2QixFQUFNaWpCLEVBQU8veUIsR0FDdkMsSUFBSThwQixFQUFNLzFCLEVBQU9nNUIsRUFBUW5DLEVBQU80VixFQUFTQyxFQUFXQyxFQUFnQi9VLEVBQ25FZ1YsRUFBUSxVQUFXNU4sR0FBUyxXQUFZQSxFQUN4Q3VOLEVBQU9qdEMsS0FDUCtoQyxFQUFPLEdBQ1AxSixFQUFRNWIsRUFBSzRiLE1BQ2JxVCxFQUFTanZCLEVBQUtuQyxVQUFZOGQsR0FBb0IzYixHQUM5Qzh3QixFQUFXNVcsRUFBUzNhLElBQUtTLEVBQU0sVUE2QmhDLElBQU1nYSxLQTFCQTlwQixFQUFLbWxCLFFBRWEsT0FEdkJ5RixFQUFROWIsRUFBTytiLFlBQWEvYSxFQUFNLE9BQ3ZCK3dCLFdBQ1ZqVyxFQUFNaVcsU0FBVyxFQUNqQkwsRUFBVTVWLEVBQU1uRixNQUFNSixLQUN0QnVGLEVBQU1uRixNQUFNSixLQUFPLFdBQ1p1RixFQUFNaVcsVUFDWEwsTUFJSDVWLEVBQU1pVyxXQUVOUCxFQUFLcmEsUUFBUSxXQUdacWEsRUFBS3JhLFFBQVEsV0FDWjJFLEVBQU1pVyxXQUNBL3hCLEVBQU9xVyxNQUFPclYsRUFBTSxNQUFPeGEsUUFDaENzMUIsRUFBTW5GLE1BQU1KLGNBT0YwTixFQUViLEdBREFoL0IsRUFBUWcvQixFQUFPakosR0FDVjhVLEdBQVMza0MsS0FBTWxHLEdBQVUsQ0FHN0IsVUFGT2cvQixFQUFPakosR0FDZGlELEVBQVNBLEdBQW9CLFdBQVZoNUIsRUFDZEEsS0FBWWdyQyxFQUFTLE9BQVMsUUFBVyxDQUk3QyxHQUFlLFNBQVZockMsSUFBb0I2c0MsUUFBaUMxL0IsSUFBckIwL0IsRUFBVTlXLEdBSzlDLFNBSkFpVixHQUFTLEVBT1gzSixFQUFNdEwsR0FBUzhXLEdBQVlBLEVBQVU5VyxJQUFVaGIsRUFBTzRjLE1BQU81YixFQUFNZ2EsR0FNckUsSUFEQTJXLEdBQWEzeEIsRUFBTzBDLGNBQWV1aEIsTUFDaEJqa0IsRUFBTzBDLGNBQWU0akIsR0E4RHpDLElBQU10TCxLQXpERDZXLEdBQTJCLElBQWxCN3dCLEVBQUtuQyxXQU1sQjNOLEVBQUs4Z0MsU0FBVyxDQUFFcFYsRUFBTW9WLFNBQVVwVixFQUFNcVYsVUFBV3JWLEVBQU1zVixXQUlsQyxPQUR2Qk4sRUFBaUJFLEdBQVlBLEVBQVNqVixXQUVyQytVLEVBQWlCMVcsRUFBUzNhLElBQUtTLEVBQU0sWUFHckIsVUFEakI2YixFQUFVN2MsRUFBTzhjLElBQUs5YixFQUFNLGNBRXRCNHdCLEVBQ0ovVSxFQUFVK1UsR0FJVi9ULEdBQVUsQ0FBRTdjLElBQVEsR0FDcEI0d0IsRUFBaUI1d0IsRUFBSzRiLE1BQU1DLFNBQVcrVSxFQUN2Qy9VLEVBQVU3YyxFQUFPOGMsSUFBSzliLEVBQU0sV0FDNUI2YyxHQUFVLENBQUU3YyxPQUtHLFdBQVo2YixHQUFvQyxpQkFBWkEsR0FBZ0QsTUFBbEIrVSxJQUNyQixTQUFoQzV4QixFQUFPOGMsSUFBSzliLEVBQU0sV0FHaEIyd0IsSUFDTEgsRUFBSzMxQixNQUFNLFdBQ1YrZ0IsRUFBTUMsUUFBVStVLEtBRU0sTUFBbEJBLElBQ0ovVSxFQUFVRCxFQUFNQyxRQUNoQitVLEVBQTZCLFNBQVovVSxFQUFxQixHQUFLQSxJQUc3Q0QsRUFBTUMsUUFBVSxpQkFLZDNyQixFQUFLOGdDLFdBQ1RwVixFQUFNb1YsU0FBVyxTQUNqQlIsRUFBS3JhLFFBQVEsV0FDWnlGLEVBQU1vVixTQUFXOWdDLEVBQUs4Z0MsU0FBVSxHQUNoQ3BWLEVBQU1xVixVQUFZL2dDLEVBQUs4Z0MsU0FBVSxHQUNqQ3BWLEVBQU1zVixVQUFZaGhDLEVBQUs4Z0MsU0FBVSxPQUtuQ0wsR0FBWSxFQUNFckwsRUFHUHFMLElBQ0FHLEVBQ0MsV0FBWUEsSUFDaEI3QixFQUFTNkIsRUFBUzdCLFFBR25CNkIsRUFBVzVXLEVBQVNwQixPQUFROVksRUFBTSxTQUFVLENBQUU2YixRQUFTK1UsSUFJbkQzVCxJQUNKNlQsRUFBUzdCLFFBQVVBLEdBSWZBLEdBQ0pwUyxHQUFVLENBQUU3YyxJQUFRLEdBS3JCd3dCLEVBQUszMUIsTUFBTSxXQVNWLElBQU1tZixLQUpBaVYsR0FDTHBTLEdBQVUsQ0FBRTdjLElBRWJrYSxFQUFTeEUsT0FBUTFWLEVBQU0sVUFDVHNsQixFQUNidG1CLEVBQU80YyxNQUFPNWIsRUFBTWdhLEVBQU1zTCxFQUFNdEwsUUFNbkMyVyxFQUFZbkIsR0FBYVAsRUFBUzZCLEVBQVU5VyxHQUFTLEVBQUdBLEVBQU13VyxHQUN0RHhXLEtBQVE4VyxJQUNmQSxFQUFVOVcsR0FBUzJXLEVBQVU1akIsTUFDeEJraUIsSUFDSjBCLEVBQVVqd0IsSUFBTWl3QixFQUFVNWpCLE1BQzFCNGpCLEVBQVU1akIsTUFBUSxNQXVNckJva0IsVUFBVyxTQUFVcHhCLEVBQVVvbkIsR0FDekJBLEVBQ0p1SSxHQUFVRyxXQUFXcHFDLFFBQVNzYSxHQUU5QjJ2QixHQUFVRyxXQUFXanFDLEtBQU1tYSxNQUs5QmYsRUFBT295QixNQUFRLFNBQVVBLEVBQU92RSxFQUFRMXRCLEdBQ3ZDLElBQUlreUIsRUFBTUQsR0FBMEIsaUJBQVZBLEVBQXFCcHlCLEVBQU82QixPQUFRLEdBQUl1d0IsR0FBVSxDQUMzRWQsU0FBVW54QixJQUFPQSxHQUFNMHRCLEdBQ3RCbHZCLEVBQVl5ekIsSUFBV0EsRUFDeEJuRCxTQUFVbUQsRUFDVnZFLE9BQVExdEIsR0FBTTB0QixHQUFVQSxJQUFXbHZCLEVBQVlrdkIsSUFBWUEsR0FvQzVELE9BaENLN3RCLEVBQU9vdkIsR0FBR3hPLElBQ2R5UixFQUFJcEQsU0FBVyxFQUdjLGlCQUFqQm9ELEVBQUlwRCxXQUNWb0QsRUFBSXBELFlBQVlqdkIsRUFBT292QixHQUFHa0QsT0FDOUJELEVBQUlwRCxTQUFXanZCLEVBQU9vdkIsR0FBR2tELE9BQVFELEVBQUlwRCxVQUdyQ29ELEVBQUlwRCxTQUFXanZCLEVBQU9vdkIsR0FBR2tELE9BQU92VCxVQU1qQixNQUFic1QsRUFBSWhjLFFBQStCLElBQWRnYyxFQUFJaGMsUUFDN0JnYyxFQUFJaGMsTUFBUSxNQUliZ2MsRUFBSWxKLElBQU1rSixFQUFJZixTQUVkZSxFQUFJZixTQUFXLFdBQ1QzeUIsRUFBWTB6QixFQUFJbEosTUFDcEJrSixFQUFJbEosSUFBSWx6QixLQUFNMVIsTUFHVjh0QyxFQUFJaGMsT0FDUnJXLEVBQU80YixRQUFTcjNCLEtBQU04dEMsRUFBSWhjLFFBSXJCZ2MsR0FHUnJ5QixFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQjB3QixPQUFRLFNBQVVILEVBQU9JLEVBQUkzRSxFQUFROXNCLEdBR3BDLE9BQU94YyxLQUFLbW1CLE9BQVFpUyxJQUFxQkcsSUFBSyxVQUFXLEdBQUlnQixPQUczRHBjLE1BQU0rd0IsUUFBUyxDQUFFMUUsUUFBU3lFLEdBQU1KLEVBQU92RSxFQUFROXNCLElBRWxEMHhCLFFBQVMsU0FBVXpYLEVBQU1vWCxFQUFPdkUsRUFBUTlzQixHQUN2QyxJQUFJNFYsRUFBUTNXLEVBQU8wQyxjQUFlc1ksR0FDakMwWCxFQUFTMXlCLEVBQU9veUIsTUFBT0EsRUFBT3ZFLEVBQVE5c0IsR0FDdEM0eEIsRUFBYyxXQUdiLElBQUluQixFQUFPZCxHQUFXbnNDLEtBQU15YixFQUFPNkIsT0FBUSxHQUFJbVosR0FBUTBYLElBR2xEL2IsR0FBU3VFLEVBQVMzYSxJQUFLaGMsS0FBTSxZQUNqQ2l0QyxFQUFLeFYsTUFBTSxJQU1kLE9BRkEyVyxFQUFZQyxPQUFTRCxFQUVkaGMsSUFBMEIsSUFBakIrYixFQUFPcmMsTUFDdEI5eEIsS0FBS3VjLEtBQU02eEIsR0FDWHB1QyxLQUFLOHhCLE1BQU9xYyxFQUFPcmMsTUFBT3NjLElBRTVCM1csS0FBTSxTQUFVN3pCLEVBQU0rekIsRUFBWWtWLEdBQ2pDLElBQUl5QixFQUFZLFNBQVUvVyxHQUN6QixJQUFJRSxFQUFPRixFQUFNRSxZQUNWRixFQUFNRSxLQUNiQSxFQUFNb1YsSUFZUCxNQVRxQixpQkFBVGpwQyxJQUNYaXBDLEVBQVVsVixFQUNWQSxFQUFhL3pCLEVBQ2JBLE9BQU9pSyxHQUVIOHBCLEdBQ0ozM0IsS0FBSzh4QixNQUFPbHVCLEdBQVEsS0FBTSxJQUdwQjVELEtBQUt1YyxNQUFNLFdBQ2pCLElBQUk4YSxHQUFVLEVBQ2IxMEIsRUFBZ0IsTUFBUmlCLEdBQWdCQSxFQUFPLGFBQy9CMnFDLEVBQVM5eUIsRUFBTzh5QixPQUNoQjkxQixFQUFPa2UsRUFBUzNhLElBQUtoYyxNQUV0QixHQUFLMkMsRUFDQzhWLEVBQU05VixJQUFXOFYsRUFBTTlWLEdBQVE4MEIsTUFDbkM2VyxFQUFXNzFCLEVBQU05VixTQUdsQixJQUFNQSxLQUFTOFYsRUFDVEEsRUFBTTlWLElBQVc4VixFQUFNOVYsR0FBUTgwQixNQUFRK1QsR0FBSzVrQyxLQUFNakUsSUFDdEQyckMsRUFBVzcxQixFQUFNOVYsSUFLcEIsSUFBTUEsRUFBUTRyQyxFQUFPdHNDLE9BQVFVLEtBQ3ZCNHJDLEVBQVE1ckMsR0FBUThaLE9BQVN6YyxNQUNuQixNQUFSNEQsR0FBZ0IycUMsRUFBUTVyQyxHQUFRbXZCLFFBQVVsdUIsSUFFNUMycUMsRUFBUTVyQyxHQUFRc3FDLEtBQUt4VixLQUFNb1YsR0FDM0J4VixHQUFVLEVBQ1ZrWCxFQUFPbHhCLE9BQVExYSxFQUFPLEtBT25CMDBCLEdBQVl3VixHQUNoQnB4QixFQUFPNGIsUUFBU3IzQixLQUFNNEQsT0FJekJ5cUMsT0FBUSxTQUFVenFDLEdBSWpCLE9BSGMsSUFBVEEsSUFDSkEsRUFBT0EsR0FBUSxNQUVUNUQsS0FBS3VjLE1BQU0sV0FDakIsSUFBSTVaLEVBQ0g4VixFQUFPa2UsRUFBUzNhLElBQUtoYyxNQUNyQjh4QixFQUFRclosRUFBTTdVLEVBQU8sU0FDckIyekIsRUFBUTllLEVBQU03VSxFQUFPLGNBQ3JCMnFDLEVBQVM5eUIsRUFBTzh5QixPQUNoQnRzQyxFQUFTNnZCLEVBQVFBLEVBQU03dkIsT0FBUyxFQWFqQyxJQVZBd1csRUFBSzQxQixRQUFTLEVBR2Q1eUIsRUFBT3FXLE1BQU85eEIsS0FBTTRELEVBQU0sSUFFckIyekIsR0FBU0EsRUFBTUUsTUFDbkJGLEVBQU1FLEtBQUsvbEIsS0FBTTFSLE1BQU0sR0FJbEIyQyxFQUFRNHJDLEVBQU90c0MsT0FBUVUsS0FDdkI0ckMsRUFBUTVyQyxHQUFROFosT0FBU3pjLE1BQVF1dUMsRUFBUTVyQyxHQUFRbXZCLFFBQVVsdUIsSUFDL0QycUMsRUFBUTVyQyxHQUFRc3FDLEtBQUt4VixNQUFNLEdBQzNCOFcsRUFBT2x4QixPQUFRMWEsRUFBTyxJQUt4QixJQUFNQSxFQUFRLEVBQUdBLEVBQVFWLEVBQVFVLElBQzNCbXZCLEVBQU9udkIsSUFBV212QixFQUFPbnZCLEdBQVEwckMsUUFDckN2YyxFQUFPbnZCLEdBQVEwckMsT0FBTzM4QixLQUFNMVIsYUFLdkJ5WSxFQUFLNDFCLGFBS2Y1eUIsRUFBT2MsS0FBTSxDQUFFLFNBQVUsT0FBUSxTQUFVLFNBQVVqRyxFQUFJeEUsR0FDeEQsSUFBSTA4QixFQUFRL3lCLEVBQU9HLEdBQUk5SixHQUN2QjJKLEVBQU9HLEdBQUk5SixHQUFTLFNBQVUrN0IsRUFBT3ZFLEVBQVE5c0IsR0FDNUMsT0FBZ0IsTUFBVHF4QixHQUFrQyxrQkFBVkEsRUFDOUJXLEVBQU0zMEIsTUFBTzdaLEtBQU0wYyxXQUNuQjFjLEtBQUtrdUMsUUFBU25DLEdBQU9qNkIsR0FBTSxHQUFRKzdCLEVBQU92RSxFQUFROXNCLE9BS3JEZixFQUFPYyxLQUFNLENBQ1preUIsVUFBVzFDLEdBQU8sUUFDbEIyQyxRQUFTM0MsR0FBTyxRQUNoQjRDLFlBQWE1QyxHQUFPLFVBQ3BCNkMsT0FBUSxDQUFFcEYsUUFBUyxRQUNuQnFGLFFBQVMsQ0FBRXJGLFFBQVMsUUFDcEJzRixXQUFZLENBQUV0RixRQUFTLFlBQ3JCLFNBQVUxM0IsRUFBTTR0QixHQUNsQmprQixFQUFPRyxHQUFJOUosR0FBUyxTQUFVKzdCLEVBQU92RSxFQUFROXNCLEdBQzVDLE9BQU94YyxLQUFLa3VDLFFBQVN4TyxFQUFPbU8sRUFBT3ZFLEVBQVE5c0IsT0FJN0NmLEVBQU84eUIsT0FBUyxHQUNoQjl5QixFQUFPb3ZCLEdBQUdnQixLQUFPLFdBQ2hCLElBQUltQixFQUNIeG1DLEVBQUksRUFDSituQyxFQUFTOXlCLEVBQU84eUIsT0FJakIsSUFGQWxELEdBQVF6ckIsS0FBS21nQixNQUVMdjVCLEVBQUkrbkMsRUFBT3RzQyxPQUFRdUUsS0FDMUJ3bUMsRUFBUXVCLEVBQVEvbkMsT0FHQytuQyxFQUFRL25DLEtBQVF3bUMsR0FDaEN1QixFQUFPbHhCLE9BQVE3VyxJQUFLLEdBSWhCK25DLEVBQU90c0MsUUFDWndaLEVBQU9vdkIsR0FBR3BULE9BRVg0VCxRQUFReDlCLEdBR1Q0TixFQUFPb3ZCLEdBQUdtQyxNQUFRLFNBQVVBLEdBQzNCdnhCLEVBQU84eUIsT0FBT2xzQyxLQUFNMnFDLEdBQ3BCdnhCLEVBQU9vdkIsR0FBR3JoQixTQUdYL04sRUFBT292QixHQUFHZSxTQUFXLEdBQ3JCbndCLEVBQU9vdkIsR0FBR3JoQixNQUFRLFdBQ1o4aEIsS0FJTEEsSUFBYSxFQUNiRyxPQUdEaHdCLEVBQU9vdkIsR0FBR3BULEtBQU8sV0FDaEI2VCxHQUFhLE1BR2Q3dkIsRUFBT292QixHQUFHa0QsT0FBUyxDQUNsQmdCLEtBQU0sSUFDTkMsS0FBTSxJQUdOeFUsU0FBVSxLQU1YL2UsRUFBT0csR0FBR3F6QixNQUFRLFNBQVVycUMsRUFBTWhCLEdBSWpDLE9BSEFnQixFQUFPNlcsRUFBT292QixJQUFLcHZCLEVBQU9vdkIsR0FBR2tELE9BQVFucEMsSUFBaUJBLEVBQ3REaEIsRUFBT0EsR0FBUSxLQUVSNUQsS0FBSzh4QixNQUFPbHVCLEdBQU0sU0FBVXlULEVBQU1rZ0IsR0FDeEMsSUFBSTJYLEVBQVVqd0MsRUFBTzZMLFdBQVl1TSxFQUFNelMsR0FDdkMyeUIsRUFBTUUsS0FBTyxXQUNaeDRCLEVBQU9rd0MsYUFBY0QsUUFNeEIsV0FDQyxJQUFJMW9CLEVBQVF2YixFQUFTK1AsY0FBZSxTQUVuQzh5QixFQURTN2lDLEVBQVMrUCxjQUFlLFVBQ3BCSyxZQUFhcFEsRUFBUytQLGNBQWUsV0FFbkR3TCxFQUFNNWlCLEtBQU8sV0FJYnVXLEVBQVFpMUIsUUFBMEIsS0FBaEI1b0IsRUFBTTlsQixNQUl4QnlaLEVBQVFrMUIsWUFBY3ZCLEVBQUlwakIsVUFJMUJsRSxFQUFRdmIsRUFBUytQLGNBQWUsVUFDMUJ0YSxNQUFRLElBQ2Q4bEIsRUFBTTVpQixLQUFPLFFBQ2J1VyxFQUFRbTFCLFdBQTZCLE1BQWhCOW9CLEVBQU05bEIsTUFwQjVCLEdBd0JBLElBQUk2dUMsR0FDSDdxQixHQUFhakosRUFBTytMLEtBQUs5QyxXQUUxQmpKLEVBQU9HLEdBQUcwQixPQUFRLENBQ2pCb0ssS0FBTSxTQUFVNVYsRUFBTXBSLEdBQ3JCLE9BQU82MEIsRUFBUXYxQixLQUFNeWIsRUFBT2lNLEtBQU01VixFQUFNcFIsRUFBT2djLFVBQVV6YSxPQUFTLElBR25FdXRDLFdBQVksU0FBVTE5QixHQUNyQixPQUFPOVIsS0FBS3VjLE1BQU0sV0FDakJkLEVBQU8rekIsV0FBWXh2QyxLQUFNOFIsU0FLNUIySixFQUFPNkIsT0FBUSxDQUNkb0ssS0FBTSxTQUFVakwsRUFBTTNLLEVBQU1wUixHQUMzQixJQUFJMGIsRUFBS21iLEVBQ1JrWSxFQUFRaHpCLEVBQUtuQyxTQUdkLEdBQWUsSUFBVm0xQixHQUF5QixJQUFWQSxHQUF5QixJQUFWQSxFQUtuQyxZQUFrQyxJQUF0Qmh6QixFQUFLdkIsYUFDVE8sRUFBT2diLEtBQU1oYSxFQUFNM0ssRUFBTXBSLElBS2xCLElBQVYrdUMsR0FBZ0JoMEIsRUFBTytTLFNBQVUvUixLQUNyQzhhLEVBQVE5YixFQUFPaTBCLFVBQVc1OUIsRUFBS3BPLGlCQUM1QitYLEVBQU8rTCxLQUFLdEUsTUFBTXlzQixLQUFLL29DLEtBQU1rTCxHQUFTeTlCLFFBQVcxaEMsU0FHdENBLElBQVZuTixFQUNXLE9BQVZBLE9BQ0orYSxFQUFPK3pCLFdBQVkveUIsRUFBTTNLLEdBSXJCeWxCLEdBQVMsUUFBU0EsUUFDdUIxcEIsS0FBM0N1TyxFQUFNbWIsRUFBTWYsSUFBSy9aLEVBQU0vYixFQUFPb1IsSUFDekJzSyxHQUdSSyxFQUFLdEIsYUFBY3JKLEVBQU1wUixFQUFRLElBQzFCQSxHQUdINjJCLEdBQVMsUUFBU0EsR0FBK0MsUUFBcENuYixFQUFNbWIsRUFBTXZiLElBQUtTLEVBQU0zSyxJQUNqRHNLLEVBTU0sT0FIZEEsRUFBTVgsRUFBT3ZYLEtBQUt3akIsS0FBTWpMLEVBQU0zSyxTQUdUakUsRUFBWXVPLElBR2xDc3pCLFVBQVcsQ0FDVjlyQyxLQUFNLENBQ0w0eUIsSUFBSyxTQUFVL1osRUFBTS9iLEdBQ3BCLElBQU15WixFQUFRbTFCLFlBQXdCLFVBQVY1dUMsR0FDM0JpaUIsRUFBVWxHLEVBQU0sU0FBWSxDQUM1QixJQUFJL1IsRUFBTStSLEVBQUsvYixNQUtmLE9BSkErYixFQUFLdEIsYUFBYyxPQUFRemEsR0FDdEJnSyxJQUNKK1IsRUFBSy9iLE1BQVFnSyxHQUVQaEssTUFNWDh1QyxXQUFZLFNBQVUveUIsRUFBTS9iLEdBQzNCLElBQUlvUixFQUNIdEwsRUFBSSxFQUlKb3BDLEVBQVlsdkMsR0FBU0EsRUFBTXdpQixNQUFPdU4sR0FFbkMsR0FBS21mLEdBQStCLElBQWxCbnpCLEVBQUtuQyxTQUN0QixLQUFVeEksRUFBTzg5QixFQUFXcHBDLE1BQzNCaVcsRUFBS3VILGdCQUFpQmxTLE1BTzFCeTlCLEdBQVcsQ0FDVi9ZLElBQUssU0FBVS9aLEVBQU0vYixFQUFPb1IsR0FRM0IsT0FQZSxJQUFWcFIsRUFHSithLEVBQU8rekIsV0FBWS95QixFQUFNM0ssR0FFekIySyxFQUFLdEIsYUFBY3JKLEVBQU1BLEdBRW5CQSxJQUlUMkosRUFBT2MsS0FBTWQsRUFBTytMLEtBQUt0RSxNQUFNeXNCLEtBQUs5MkIsT0FBT3FLLE1BQU8sU0FBVSxTQUFVNU0sRUFBSXhFLEdBQ3pFLElBQUkrOUIsRUFBU25yQixHQUFZNVMsSUFBVTJKLEVBQU92WCxLQUFLd2pCLEtBRS9DaEQsR0FBWTVTLEdBQVMsU0FBVTJLLEVBQU0zSyxFQUFNa04sR0FDMUMsSUFBSTVDLEVBQUtxaEIsRUFDUnFTLEVBQWdCaCtCLEVBQUtwTyxjQVl0QixPQVZNc2IsSUFHTHllLEVBQVMvWSxHQUFZb3JCLEdBQ3JCcHJCLEdBQVlvckIsR0FBa0IxekIsRUFDOUJBLEVBQXFDLE1BQS9CeXpCLEVBQVFwekIsRUFBTTNLLEVBQU1rTixHQUN6Qjh3QixFQUNBLEtBQ0RwckIsR0FBWW9yQixHQUFrQnJTLEdBRXhCcmhCLE1BT1QsSUFBSTJ6QixHQUFhLHNDQUNoQkMsR0FBYSxnQkF5SWIsU0FBU0MsR0FBa0J2dkMsR0FFMUIsT0FEYUEsRUFBTXdpQixNQUFPdU4sSUFBbUIsSUFDL0J4YSxLQUFNLEtBSXRCLFNBQVNpNkIsR0FBVXp6QixHQUNsQixPQUFPQSxFQUFLdkIsY0FBZ0J1QixFQUFLdkIsYUFBYyxVQUFhLEdBRzdELFNBQVNpMUIsR0FBZ0J6dkMsR0FDeEIsT0FBS2dXLE1BQU1FLFFBQVNsVyxHQUNaQSxFQUVjLGlCQUFWQSxHQUNKQSxFQUFNd2lCLE1BQU91TixJQUVkLEdBeEpSaFYsRUFBT0csR0FBRzBCLE9BQVEsQ0FDakJtWixLQUFNLFNBQVUza0IsRUFBTXBSLEdBQ3JCLE9BQU82MEIsRUFBUXYxQixLQUFNeWIsRUFBT2diLEtBQU0za0IsRUFBTXBSLEVBQU9nYyxVQUFVemEsT0FBUyxJQUduRW11QyxXQUFZLFNBQVV0K0IsR0FDckIsT0FBTzlSLEtBQUt1YyxNQUFNLGtCQUNWdmMsS0FBTXliLEVBQU80MEIsUUFBU3YrQixJQUFVQSxTQUsxQzJKLEVBQU82QixPQUFRLENBQ2RtWixLQUFNLFNBQVVoYSxFQUFNM0ssRUFBTXBSLEdBQzNCLElBQUkwYixFQUFLbWIsRUFDUmtZLEVBQVFoekIsRUFBS25DLFNBR2QsR0FBZSxJQUFWbTFCLEdBQXlCLElBQVZBLEdBQXlCLElBQVZBLEVBV25DLE9BUGUsSUFBVkEsR0FBZ0JoMEIsRUFBTytTLFNBQVUvUixLQUdyQzNLLEVBQU8ySixFQUFPNDBCLFFBQVN2K0IsSUFBVUEsRUFDakN5bEIsRUFBUTliLEVBQU82dUIsVUFBV3g0QixTQUdaakUsSUFBVm5OLEVBQ0M2MkIsR0FBUyxRQUFTQSxRQUN1QjFwQixLQUEzQ3VPLEVBQU1tYixFQUFNZixJQUFLL1osRUFBTS9iLEVBQU9vUixJQUN6QnNLLEVBR0NLLEVBQU0zSyxHQUFTcFIsRUFHcEI2MkIsR0FBUyxRQUFTQSxHQUErQyxRQUFwQ25iLEVBQU1tYixFQUFNdmIsSUFBS1MsRUFBTTNLLElBQ2pEc0ssRUFHREssRUFBTTNLLElBR2R3NEIsVUFBVyxDQUNWOWYsU0FBVSxDQUNUeE8sSUFBSyxTQUFVUyxHQU9kLElBQUk2ekIsRUFBVzcwQixFQUFPdlgsS0FBS3dqQixLQUFNakwsRUFBTSxZQUV2QyxPQUFLNnpCLEVBQ0d0dUMsU0FBVXN1QyxFQUFVLElBSTNCUCxHQUFXbnBDLEtBQU02VixFQUFLa0csV0FDdEJxdEIsR0FBV3BwQyxLQUFNNlYsRUFBS2tHLFdBQ3RCbEcsRUFBSzhOLEtBRUUsR0FHQSxLQUtYOGxCLFFBQVMsQ0FDUixJQUFPLFVBQ1AsTUFBUyxlQVlMbDJCLEVBQVFrMUIsY0FDYjV6QixFQUFPNnVCLFVBQVU1ZixTQUFXLENBQzNCMU8sSUFBSyxTQUFVUyxHQUlkLElBQUkxUSxFQUFTMFEsRUFBS3ZNLFdBSWxCLE9BSEtuRSxHQUFVQSxFQUFPbUUsWUFDckJuRSxFQUFPbUUsV0FBV3lhLGNBRVosTUFFUjZMLElBQUssU0FBVS9aLEdBSWQsSUFBSTFRLEVBQVMwUSxFQUFLdk0sV0FDYm5FLElBQ0pBLEVBQU80ZSxjQUVGNWUsRUFBT21FLFlBQ1huRSxFQUFPbUUsV0FBV3lhLGtCQU92QmxQLEVBQU9jLEtBQU0sQ0FDWixXQUNBLFdBQ0EsWUFDQSxjQUNBLGNBQ0EsVUFDQSxVQUNBLFNBQ0EsY0FDQSxvQkFDRSxXQUNGZCxFQUFPNDBCLFFBQVNyd0MsS0FBSzBELGVBQWtCMUQsUUE0QnhDeWIsRUFBT0csR0FBRzBCLE9BQVEsQ0FDakJpekIsU0FBVSxTQUFVN3ZDLEdBQ25CLElBQUk4dkMsRUFBUy96QixFQUFNbUksRUFBSzZyQixFQUFVQyxFQUFPeHpCLEVBQUd5ekIsRUFDM0NucUMsRUFBSSxFQUVMLEdBQUs0VCxFQUFZMVosR0FDaEIsT0FBT1YsS0FBS3VjLE1BQU0sU0FBVVcsR0FDM0J6QixFQUFRemIsTUFBT3V3QyxTQUFVN3ZDLEVBQU1nUixLQUFNMVIsS0FBTWtkLEVBQUdnekIsR0FBVWx3QyxXQU0xRCxJQUZBd3dDLEVBQVVMLEdBQWdCenZDLElBRWJ1QixPQUNaLEtBQVV3YSxFQUFPemMsS0FBTXdHLE1BSXRCLEdBSEFpcUMsRUFBV1AsR0FBVXp6QixHQUNyQm1JLEVBQXdCLElBQWxCbkksRUFBS25DLFVBQW9CLElBQU0yMUIsR0FBa0JRLEdBQWEsSUFFekQsQ0FFVixJQURBdnpCLEVBQUksRUFDTXd6QixFQUFRRixFQUFTdHpCLE1BQ3JCMEgsRUFBSXpqQixRQUFTLElBQU11dkMsRUFBUSxLQUFRLElBQ3ZDOXJCLEdBQU84ckIsRUFBUSxLQU1aRCxLQURMRSxFQUFhVixHQUFrQnJyQixLQUU5Qm5JLEVBQUt0QixhQUFjLFFBQVN3MUIsR0FNaEMsT0FBTzN3QyxNQUdSNHdDLFlBQWEsU0FBVWx3QyxHQUN0QixJQUFJOHZDLEVBQVMvekIsRUFBTW1JLEVBQUs2ckIsRUFBVUMsRUFBT3h6QixFQUFHeXpCLEVBQzNDbnFDLEVBQUksRUFFTCxHQUFLNFQsRUFBWTFaLEdBQ2hCLE9BQU9WLEtBQUt1YyxNQUFNLFNBQVVXLEdBQzNCekIsRUFBUXpiLE1BQU80d0MsWUFBYWx3QyxFQUFNZ1IsS0FBTTFSLEtBQU1rZCxFQUFHZ3pCLEdBQVVsd0MsV0FJN0QsSUFBTTBjLFVBQVV6YSxPQUNmLE9BQU9qQyxLQUFLMG5CLEtBQU0sUUFBUyxJQUs1QixJQUZBOG9CLEVBQVVMLEdBQWdCenZDLElBRWJ1QixPQUNaLEtBQVV3YSxFQUFPemMsS0FBTXdHLE1BTXRCLEdBTEFpcUMsRUFBV1AsR0FBVXp6QixHQUdyQm1JLEVBQXdCLElBQWxCbkksRUFBS25DLFVBQW9CLElBQU0yMUIsR0FBa0JRLEdBQWEsSUFFekQsQ0FFVixJQURBdnpCLEVBQUksRUFDTXd6QixFQUFRRixFQUFTdHpCLE1BRzFCLEtBQVEwSCxFQUFJempCLFFBQVMsSUFBTXV2QyxFQUFRLE1BQVMsR0FDM0M5ckIsRUFBTUEsRUFBSWprQixRQUFTLElBQU0rdkMsRUFBUSxJQUFLLEtBTW5DRCxLQURMRSxFQUFhVixHQUFrQnJyQixLQUU5Qm5JLEVBQUt0QixhQUFjLFFBQVN3MUIsR0FNaEMsT0FBTzN3QyxNQUdSNndDLFlBQWEsU0FBVW53QyxFQUFPb3dDLEdBQzdCLElBQUlsdEMsU0FBY2xELEVBQ2pCcXdDLEVBQXdCLFdBQVRudEMsR0FBcUI4UyxNQUFNRSxRQUFTbFcsR0FFcEQsTUFBeUIsa0JBQWJvd0MsR0FBMEJDLEVBQzlCRCxFQUFXOXdDLEtBQUt1d0MsU0FBVTd2QyxHQUFVVixLQUFLNHdDLFlBQWFsd0MsR0FHekQwWixFQUFZMVosR0FDVFYsS0FBS3VjLE1BQU0sU0FBVS9WLEdBQzNCaVYsRUFBUXpiLE1BQU82d0MsWUFDZG53QyxFQUFNZ1IsS0FBTTFSLEtBQU13RyxFQUFHMHBDLEdBQVVsd0MsTUFBUTh3QyxHQUN2Q0EsTUFLSTl3QyxLQUFLdWMsTUFBTSxXQUNqQixJQUFJd0osRUFBV3ZmLEVBQUdySCxFQUFNNnhDLEVBRXhCLEdBQUtELEVBT0osSUFKQXZxQyxFQUFJLEVBQ0pySCxFQUFPc2MsRUFBUXpiLE1BQ2ZneEMsRUFBYWIsR0FBZ0J6dkMsR0FFbkJxbEIsRUFBWWlyQixFQUFZeHFDLE1BRzVCckgsRUFBSzh4QyxTQUFVbHJCLEdBQ25CNW1CLEVBQUt5eEMsWUFBYTdxQixHQUVsQjVtQixFQUFLb3hDLFNBQVV4cUIsYUFLSWxZLElBQVZuTixHQUFnQyxZQUFUa0QsS0FDbENtaUIsRUFBWW1xQixHQUFVbHdDLFFBSXJCMjJCLEVBQVNILElBQUt4MkIsS0FBTSxnQkFBaUIrbEIsR0FPakMvbEIsS0FBS21iLGNBQ1RuYixLQUFLbWIsYUFBYyxRQUNsQjRLLElBQXVCLElBQVZybEIsRUFDWixHQUNBaTJCLEVBQVMzYSxJQUFLaGMsS0FBTSxrQkFBcUIsU0FPL0NpeEMsU0FBVSxTQUFVdjFCLEdBQ25CLElBQUlxSyxFQUFXdEosRUFDZGpXLEVBQUksRUFHTCxJQURBdWYsRUFBWSxJQUFNckssRUFBVyxJQUNuQmUsRUFBT3pjLEtBQU13RyxNQUN0QixHQUF1QixJQUFsQmlXLEVBQUtuQyxXQUNQLElBQU0yMUIsR0FBa0JDLEdBQVV6ekIsSUFBVyxLQUFNdGIsUUFBUzRrQixJQUFlLEVBQzdFLE9BQU8sRUFJVCxPQUFPLEtBT1QsSUFBSW1yQixHQUFVLE1BRWR6MUIsRUFBT0csR0FBRzBCLE9BQVEsQ0FDakI1UyxJQUFLLFNBQVVoSyxHQUNkLElBQUk2MkIsRUFBT25iLEVBQUs0bUIsRUFDZnZtQixFQUFPemMsS0FBTSxHQUVkLE9BQU0wYyxVQUFVemEsUUEwQmhCK2dDLEVBQWtCNW9CLEVBQVkxWixHQUV2QlYsS0FBS3VjLE1BQU0sU0FBVS9WLEdBQzNCLElBQUlrRSxFQUVtQixJQUFsQjFLLEtBQUtzYSxXQVdFLE9BTlg1UCxFQURJczRCLEVBQ0V0aUMsRUFBTWdSLEtBQU0xUixLQUFNd0csRUFBR2lWLEVBQVF6YixNQUFPMEssT0FFcENoSyxHQUtOZ0ssRUFBTSxHQUVvQixpQkFBUkEsRUFDbEJBLEdBQU8sR0FFSWdNLE1BQU1FLFFBQVNsTSxLQUMxQkEsRUFBTStRLEVBQU8zWixJQUFLNEksR0FBSyxTQUFVaEssR0FDaEMsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FBS0EsRUFBUSxRQUl0QzYyQixFQUFROWIsRUFBTzAxQixTQUFVbnhDLEtBQUs0RCxPQUFVNlgsRUFBTzAxQixTQUFVbnhDLEtBQUsyaUIsU0FBU2pmLGlCQUdyRCxRQUFTNnpCLFFBQStDMXBCLElBQXBDMHBCLEVBQU1mLElBQUt4MkIsS0FBTTBLLEVBQUssV0FDM0QxSyxLQUFLVSxNQUFRZ0ssUUF6RFQrUixHQUNKOGEsRUFBUTliLEVBQU8wMUIsU0FBVTEwQixFQUFLN1ksT0FDN0I2WCxFQUFPMDFCLFNBQVUxMEIsRUFBS2tHLFNBQVNqZixpQkFHL0IsUUFBUzZ6QixRQUNnQzFwQixLQUF2Q3VPLEVBQU1tYixFQUFNdmIsSUFBS1MsRUFBTSxVQUVsQkwsRUFNWSxpQkFIcEJBLEVBQU1LLEVBQUsvYixPQUlIMGIsRUFBSXpiLFFBQVN1d0MsR0FBUyxJQUloQixNQUFQOTBCLEVBQWMsR0FBS0EsT0FHM0IsS0F5Q0hYLEVBQU82QixPQUFRLENBQ2Q2ekIsU0FBVSxDQUNUalgsT0FBUSxDQUNQbGUsSUFBSyxTQUFVUyxHQUVkLElBQUkvUixFQUFNK1EsRUFBT3ZYLEtBQUt3akIsS0FBTWpMLEVBQU0sU0FDbEMsT0FBYyxNQUFQL1IsRUFDTkEsRUFNQXVsQyxHQUFrQngwQixFQUFPUixLQUFNd0IsTUFHbEM5USxPQUFRLENBQ1BxUSxJQUFLLFNBQVVTLEdBQ2QsSUFBSS9iLEVBQU93NUIsRUFBUTF6QixFQUNsQndTLEVBQVV5RCxFQUFLekQsUUFDZnJXLEVBQVE4WixFQUFLa08sY0FDYndSLEVBQW9CLGVBQWQxZixFQUFLN1ksS0FDWDQxQixFQUFTMkMsRUFBTSxLQUFPLEdBQ3RCb00sRUFBTXBNLEVBQU14NUIsRUFBUSxFQUFJcVcsRUFBUS9XLE9BVWpDLElBUEN1RSxFQURJN0QsRUFBUSxFQUNSNGxDLEVBR0FwTSxFQUFNeDVCLEVBQVEsRUFJWDZELEVBQUkraEMsRUFBSy9oQyxJQUtoQixLQUpBMHpCLEVBQVNsaEIsRUFBU3hTLElBSUpra0IsVUFBWWxrQixJQUFNN0QsS0FHN0J1M0IsRUFBT3hYLFlBQ0x3WCxFQUFPaHFCLFdBQVd3UyxXQUNuQkMsRUFBVXVYLEVBQU9ocUIsV0FBWSxhQUFpQixDQU1qRCxHQUhBeFAsRUFBUSthLEVBQVF5ZSxHQUFTeHZCLE1BR3BCeXhCLEVBQ0osT0FBT3o3QixFQUlSODRCLEVBQU9uM0IsS0FBTTNCLEdBSWYsT0FBTzg0QixHQUdSaEQsSUFBSyxTQUFVL1osRUFBTS9iLEdBTXBCLElBTEEsSUFBSTB3QyxFQUFXbFgsRUFDZGxoQixFQUFVeUQsRUFBS3pELFFBQ2Z3Z0IsRUFBUy9kLEVBQU80QyxVQUFXM2QsR0FDM0I4RixFQUFJd1MsRUFBUS9XLE9BRUx1RSxPQUNQMHpCLEVBQVNsaEIsRUFBU3hTLElBSU5ra0IsU0FDWGpQLEVBQU84QyxRQUFTOUMsRUFBTzAxQixTQUFTalgsT0FBT2xlLElBQUtrZSxHQUFVVixJQUFZLEtBRWxFNFgsR0FBWSxHQVVkLE9BSE1BLElBQ0wzMEIsRUFBS2tPLGVBQWlCLEdBRWhCNk8sT0FPWC9kLEVBQU9jLEtBQU0sQ0FBRSxRQUFTLGFBQWMsV0FDckNkLEVBQU8wMUIsU0FBVW54QyxNQUFTLENBQ3pCdzJCLElBQUssU0FBVS9aLEVBQU0vYixHQUNwQixHQUFLZ1csTUFBTUUsUUFBU2xXLEdBQ25CLE9BQVMrYixFQUFLZ08sUUFBVWhQLEVBQU84QyxRQUFTOUMsRUFBUWdCLEdBQU8vUixNQUFPaEssSUFBVyxJQUl0RXlaLEVBQVFpMUIsVUFDYjN6QixFQUFPMDFCLFNBQVVueEMsTUFBT2djLElBQU0sU0FBVVMsR0FDdkMsT0FBd0MsT0FBakNBLEVBQUt2QixhQUFjLFNBQXFCLEtBQU91QixFQUFLL2IsV0FXOUR5WixFQUFRazNCLFFBQVUsY0FBZXB5QyxFQUdqQyxJQUFJcXlDLEdBQWMsa0NBQ2pCQyxHQUEwQixTQUFVM2xDLEdBQ25DQSxFQUFFK3dCLG1CQUdKbGhCLEVBQU82QixPQUFRN0IsRUFBT2pMLE1BQU8sQ0FFNUJxc0IsUUFBUyxTQUFVcnNCLEVBQU9pSSxFQUFNZ0UsRUFBTSswQixHQUVyQyxJQUFJaHJDLEVBQUdvZSxFQUFLMkIsRUFBS2tyQixFQUFZQyxFQUFRalUsRUFBUS9KLEVBQVNpZSxFQUNyREMsRUFBWSxDQUFFbjFCLEdBQVF4UixHQUN0QnJILEVBQU9tVyxFQUFPckksS0FBTWxCLEVBQU8sUUFBV0EsRUFBTTVNLEtBQU80TSxFQUNuRDZzQixFQUFhdGpCLEVBQU9ySSxLQUFNbEIsRUFBTyxhQUFnQkEsRUFBTStVLFVBQVVua0IsTUFBTyxLQUFRLEdBS2pGLEdBSEF3akIsRUFBTStzQixFQUFjcHJCLEVBQU05SixFQUFPQSxHQUFReFIsRUFHbEIsSUFBbEJ3UixFQUFLbkMsVUFBb0MsSUFBbEJtQyxFQUFLbkMsV0FLNUJnM0IsR0FBWTFxQyxLQUFNaEQsRUFBTzZYLEVBQU9qTCxNQUFNa3RCLGFBSXRDOTVCLEVBQUt6QyxRQUFTLE1BQVMsSUFHM0JrOEIsRUFBYXo1QixFQUFLeEMsTUFBTyxLQUN6QndDLEVBQU95NUIsRUFBV2paLFFBQ2xCaVosRUFBV2pnQixRQUVaczBCLEVBQVM5dEMsRUFBS3pDLFFBQVMsS0FBUSxHQUFLLEtBQU95QyxHQUczQzRNLEVBQVFBLEVBQU9pTCxFQUFPbUMsU0FDckJwTixFQUNBLElBQUlpTCxFQUFPcWhCLE1BQU9sNUIsRUFBdUIsaUJBQVY0TSxHQUFzQkEsSUFHaERpc0IsVUFBWStVLEVBQWUsRUFBSSxFQUNyQ2hoQyxFQUFNK1UsVUFBWThYLEVBQVdwbkIsS0FBTSxLQUNuQ3pGLEVBQU1tdUIsV0FBYW51QixFQUFNK1UsVUFDeEIsSUFBSW5sQixPQUFRLFVBQVlpOUIsRUFBV3BuQixLQUFNLGlCQUFvQixXQUM3RCxLQUdEekYsRUFBTTlOLFlBQVNtTCxFQUNUMkMsRUFBTTlELFNBQ1g4RCxFQUFNOUQsT0FBUytQLEdBSWhCaEUsRUFBZSxNQUFSQSxFQUNOLENBQUVqSSxHQUNGaUwsRUFBTzRDLFVBQVc1RixFQUFNLENBQUVqSSxJQUczQmtqQixFQUFValksRUFBT2pMLE1BQU1rakIsUUFBUzl2QixJQUFVLEdBQ3BDNHRDLElBQWdCOWQsRUFBUW1KLFVBQW1ELElBQXhDbkosRUFBUW1KLFFBQVFoakIsTUFBTzRDLEVBQU1oRSxJQUF0RSxDQU1BLElBQU0rNEIsSUFBaUI5ZCxFQUFRNEwsV0FBYS9rQixFQUFVa0MsR0FBUyxDQU05RCxJQUpBZzFCLEVBQWEvZCxFQUFRZ0osY0FBZ0I5NEIsRUFDL0IwdEMsR0FBWTFxQyxLQUFNNnFDLEVBQWE3dEMsS0FDcENnaEIsRUFBTUEsRUFBSTFVLFlBRUgwVSxFQUFLQSxFQUFNQSxFQUFJMVUsV0FDdEIwaEMsRUFBVXZ2QyxLQUFNdWlCLEdBQ2hCMkIsRUFBTTNCLEVBSUYyQixLQUFVOUosRUFBSzZHLGVBQWlCclksSUFDcEMybUMsRUFBVXZ2QyxLQUFNa2tCLEVBQUlYLGFBQWVXLEVBQUlzckIsY0FBZ0I1eUMsR0FNekQsSUFEQXVILEVBQUksR0FDTW9lLEVBQU1ndEIsRUFBV3ByQyxRQUFZZ0ssRUFBTWd1Qix3QkFDNUNtVCxFQUFjL3NCLEVBQ2RwVSxFQUFNNU0sS0FBTzRDLEVBQUksRUFDaEJpckMsRUFDQS9kLEVBQVFrSyxVQUFZaDZCLEdBR3JCNjVCLEdBQVc5RyxFQUFTM2EsSUFBSzRJLEVBQUssV0FBY2hOLE9BQU80bEIsT0FBUSxPQUFVaHRCLEVBQU01TSxPQUMxRSt5QixFQUFTM2EsSUFBSzRJLEVBQUssWUFFbkI2WSxFQUFPNWpCLE1BQU8rSyxFQUFLbk0sSUFJcEJnbEIsRUFBU2lVLEdBQVU5c0IsRUFBSzhzQixLQUNUalUsRUFBTzVqQixPQUFTc2MsRUFBWXZSLEtBQzFDcFUsRUFBTTlOLE9BQVMrNkIsRUFBTzVqQixNQUFPK0ssRUFBS25NLElBQ1osSUFBakJqSSxFQUFNOU4sUUFDVjhOLEVBQU1ZLGtCQThDVCxPQTFDQVosRUFBTTVNLEtBQU9BLEVBR1A0dEMsR0FBaUJoaEMsRUFBTW12QixzQkFFcEJqTSxFQUFROEcsV0FDcUMsSUFBcEQ5RyxFQUFROEcsU0FBUzNnQixNQUFPKzNCLEVBQVVyeEIsTUFBTzlILEtBQ3pDMGQsRUFBWTFaLElBSVBpMUIsR0FBVXQzQixFQUFZcUMsRUFBTTdZLE1BQWEyVyxFQUFVa0MsTUFHdkQ4SixFQUFNOUosRUFBTWkxQixNQUdYajFCLEVBQU1pMUIsR0FBVyxNQUlsQmoyQixFQUFPakwsTUFBTWt0QixVQUFZOTVCLEVBRXBCNE0sRUFBTWd1Qix3QkFDVm1ULEVBQVlqaUMsaUJBQWtCOUwsRUFBTTJ0QyxJQUdyQzkwQixFQUFNN1ksS0FFRDRNLEVBQU1ndUIsd0JBQ1ZtVCxFQUFZeC9CLG9CQUFxQnZPLEVBQU0ydEMsSUFHeEM5MUIsRUFBT2pMLE1BQU1rdEIsZUFBWTd2QixFQUVwQjBZLElBQ0o5SixFQUFNaTFCLEdBQVduckIsSUFNZC9WLEVBQU05TixTQUtkb3ZDLFNBQVUsU0FBVWx1QyxFQUFNNlksRUFBTWpNLEdBQy9CLElBQUk1RSxFQUFJNlAsRUFBTzZCLE9BQ2QsSUFBSTdCLEVBQU9xaEIsTUFDWHRzQixFQUNBLENBQ0M1TSxLQUFNQSxFQUNObzhCLGFBQWEsSUFJZnZrQixFQUFPakwsTUFBTXFzQixRQUFTanhCLEVBQUcsS0FBTTZRLE1BS2pDaEIsRUFBT0csR0FBRzBCLE9BQVEsQ0FFakJ1ZixRQUFTLFNBQVVqNUIsRUFBTTZVLEdBQ3hCLE9BQU96WSxLQUFLdWMsTUFBTSxXQUNqQmQsRUFBT2pMLE1BQU1xc0IsUUFBU2o1QixFQUFNNlUsRUFBTXpZLFVBR3BDK3hDLGVBQWdCLFNBQVVudUMsRUFBTTZVLEdBQy9CLElBQUlnRSxFQUFPemMsS0FBTSxHQUNqQixHQUFLeWMsRUFDSixPQUFPaEIsRUFBT2pMLE1BQU1xc0IsUUFBU2o1QixFQUFNNlUsRUFBTWdFLEdBQU0sTUFjNUN0QyxFQUFRazNCLFNBQ2I1MUIsRUFBT2MsS0FBTSxDQUFFa2xCLE1BQU8sVUFBV0MsS0FBTSxhQUFjLFNBQVVLLEVBQU0xRCxHQUdwRSxJQUFJNVosRUFBVSxTQUFValUsR0FDdkJpTCxFQUFPakwsTUFBTXNoQyxTQUFVelQsRUFBSzd0QixFQUFNOUQsT0FBUStPLEVBQU9qTCxNQUFNNnRCLElBQUs3dEIsS0FHN0RpTCxFQUFPakwsTUFBTWtqQixRQUFTMkssR0FBUSxDQUM3QlAsTUFBTyxXQUlOLElBQUl4eUIsRUFBTXRMLEtBQUtzakIsZUFBaUJ0akIsS0FBS2lMLFVBQVlqTCxLQUNoRGd5QyxFQUFXcmIsRUFBU3BCLE9BQVFqcUIsRUFBSyt5QixHQUU1QjJULEdBQ0wxbUMsRUFBSW9FLGlCQUFrQnF5QixFQUFNdGQsR0FBUyxHQUV0Q2tTLEVBQVNwQixPQUFRanFCLEVBQUsreUIsR0FBTzJULEdBQVksR0FBTSxJQUVoRC9ULFNBQVUsV0FDVCxJQUFJM3lCLEVBQU10TCxLQUFLc2pCLGVBQWlCdGpCLEtBQUtpTCxVQUFZakwsS0FDaERneUMsRUFBV3JiLEVBQVNwQixPQUFRanFCLEVBQUsreUIsR0FBUSxFQUVwQzJULEVBS0xyYixFQUFTcEIsT0FBUWpxQixFQUFLK3lCLEVBQUsyVCxJQUozQjFtQyxFQUFJNkcsb0JBQXFCNHZCLEVBQU10ZCxHQUFTLEdBQ3hDa1MsRUFBU3hFLE9BQVE3bUIsRUFBSyt5QixTQVMzQixJQUFJaFUsR0FBV3ByQixFQUFPb3JCLFNBRWxCM1AsR0FBUSxDQUFFa0UsS0FBTWdCLEtBQUttZ0IsT0FFckJrUyxHQUFTLEtBS2J4MkIsRUFBT3kyQixTQUFXLFNBQVV6NUIsR0FDM0IsSUFBSTJRLEVBQUsrb0IsRUFDVCxJQUFNMTVCLEdBQXdCLGlCQUFUQSxFQUNwQixPQUFPLEtBS1IsSUFDQzJRLEdBQU0sSUFBTW5xQixFQUFPbXpDLFdBQWNDLGdCQUFpQjU1QixFQUFNLFlBQ3ZELE1BQVE3TSxJQVlWLE9BVkF1bUMsRUFBa0Ivb0IsR0FBT0EsRUFBSTNGLHFCQUFzQixlQUFpQixHQUM5RDJGLElBQU8rb0IsR0FDWjEyQixFQUFPc0MsTUFBTyxpQkFDYm8wQixFQUNDMTJCLEVBQU8zWixJQUFLcXdDLEVBQWdCdHZCLFlBQVksU0FBVXBZLEdBQ2pELE9BQU9BLEVBQUd3ZCxlQUNQaFMsS0FBTSxNQUNWd0MsSUFHSTJRLEdBSVIsSUFDQ2twQixHQUFXLFFBQ1hDLEdBQVEsU0FDUkMsR0FBa0Isd0NBQ2xCQyxHQUFlLHFDQUVoQixTQUFTQyxHQUFhL3lDLEVBQVEwYSxFQUFLczRCLEVBQWExaUIsR0FDL0MsSUFBSW5lLEVBRUosR0FBSzRFLE1BQU1FLFFBQVN5RCxHQUduQm9CLEVBQU9jLEtBQU1sQyxHQUFLLFNBQVU3VCxFQUFHbXFCLEdBQ3pCZ2lCLEdBQWVMLEdBQVMxckMsS0FBTWpILEdBR2xDc3dCLEVBQUt0d0IsRUFBUWd4QixHQUtiK2hCLEdBQ0MveUMsRUFBUyxLQUFxQixpQkFBTmd4QixHQUF1QixNQUFMQSxFQUFZbnFCLEVBQUksSUFBTyxJQUNqRW1xQixFQUNBZ2lCLEVBQ0ExaUIsV0FLRyxHQUFNMGlCLEdBQWlDLFdBQWxCcDNCLEVBQVFsQixHQVVuQzRWLEVBQUt0d0IsRUFBUTBhLFFBUGIsSUFBTXZJLEtBQVF1SSxFQUNicTRCLEdBQWEveUMsRUFBUyxJQUFNbVMsRUFBTyxJQUFLdUksRUFBS3ZJLEdBQVE2Z0MsRUFBYTFpQixHQVlyRXhVLEVBQU9tM0IsTUFBUSxTQUFVdnlCLEVBQUdzeUIsR0FDM0IsSUFBSWh6QyxFQUNIa3pDLEVBQUksR0FDSjVpQixFQUFNLFNBQVU1bkIsRUFBS3lxQyxHQUdwQixJQUFJcHlDLEVBQVEwWixFQUFZMDRCLEdBQ3ZCQSxJQUNBQSxFQUVERCxFQUFHQSxFQUFFNXdDLFFBQVdxVyxtQkFBb0JqUSxHQUFRLElBQzNDaVEsbUJBQTZCLE1BQVQ1WCxFQUFnQixHQUFLQSxJQUc1QyxHQUFVLE1BQUwyZixFQUNKLE1BQU8sR0FJUixHQUFLM0osTUFBTUUsUUFBU3lKLElBQVNBLEVBQUV2RSxTQUFXTCxFQUFPa0MsY0FBZTBDLEdBRy9ENUUsRUFBT2MsS0FBTThELEdBQUcsV0FDZjRQLEVBQUtqd0IsS0FBSzhSLEtBQU05UixLQUFLVSxlQU90QixJQUFNZixLQUFVMGdCLEVBQ2ZxeUIsR0FBYS95QyxFQUFRMGdCLEVBQUcxZ0IsR0FBVWd6QyxFQUFhMWlCLEdBS2pELE9BQU80aUIsRUFBRTU4QixLQUFNLE1BR2hCd0YsRUFBT0csR0FBRzBCLE9BQVEsQ0FDakJ5MUIsVUFBVyxXQUNWLE9BQU90M0IsRUFBT20zQixNQUFPNXlDLEtBQUtnekMsbUJBRTNCQSxlQUFnQixXQUNmLE9BQU9oekMsS0FBSzhCLEtBQUssV0FHaEIsSUFBSTJsQixFQUFXaE0sRUFBT2diLEtBQU16MkIsS0FBTSxZQUNsQyxPQUFPeW5CLEVBQVdoTSxFQUFPNEMsVUFBV29KLEdBQWF6bkIsUUFDOUNtbUIsUUFBUSxXQUNYLElBQUl2aUIsRUFBTzVELEtBQUs0RCxLQUdoQixPQUFPNUQsS0FBSzhSLE9BQVMySixFQUFRemIsTUFBTzR1QixHQUFJLGNBQ3ZDNmpCLEdBQWE3ckMsS0FBTTVHLEtBQUsyaUIsWUFBZTZ2QixHQUFnQjVyQyxLQUFNaEQsS0FDM0Q1RCxLQUFLeXFCLFVBQVltUCxHQUFlaHpCLEtBQU1oRCxPQUN0QzlCLEtBQUssU0FBVXdVLEVBQUltRyxHQUN0QixJQUFJL1IsRUFBTStRLEVBQVF6YixNQUFPMEssTUFFekIsT0FBWSxNQUFQQSxFQUNHLEtBR0hnTSxNQUFNRSxRQUFTbE0sR0FDWitRLEVBQU8zWixJQUFLNEksR0FBSyxTQUFVQSxHQUNqQyxNQUFPLENBQUVvSCxLQUFNMkssRUFBSzNLLEtBQU1wUixNQUFPZ0ssRUFBSS9KLFFBQVM0eEMsR0FBTyxZQUloRCxDQUFFemdDLEtBQU0ySyxFQUFLM0ssS0FBTXBSLE1BQU9nSyxFQUFJL0osUUFBUzR4QyxHQUFPLFlBQ2xEdjJCLFNBS04sSUFDQ2kzQixHQUFNLE9BQ05DLEdBQVEsT0FDUkMsR0FBYSxnQkFDYkMsR0FBVyw2QkFJWEMsR0FBYSxpQkFDYkMsR0FBWSxRQVdaaEgsR0FBYSxHQU9iaUgsR0FBYSxHQUdiQyxHQUFXLEtBQUt0ckMsT0FBUSxLQUd4QnVyQyxHQUFleG9DLEVBQVMrUCxjQUFlLEtBS3hDLFNBQVMwNEIsR0FBNkJDLEdBR3JDLE9BQU8sU0FBVUMsRUFBb0JuaEIsR0FFRCxpQkFBdkJtaEIsSUFDWG5oQixFQUFPbWhCLEVBQ1BBLEVBQXFCLEtBR3RCLElBQUlDLEVBQ0hydEMsRUFBSSxFQUNKc3RDLEVBQVlGLEVBQW1CbHdDLGNBQWN3ZixNQUFPdU4sSUFBbUIsR0FFeEUsR0FBS3JXLEVBQVlxWSxHQUdoQixLQUFVb2hCLEVBQVdDLEVBQVd0dEMsTUFHUixNQUFsQnF0QyxFQUFVLElBQ2RBLEVBQVdBLEVBQVMzeUMsTUFBTyxJQUFPLEtBQ2hDeXlDLEVBQVdFLEdBQWFGLEVBQVdFLElBQWMsSUFBSzN4QyxRQUFTdXdCLEtBSS9Ea2hCLEVBQVdFLEdBQWFGLEVBQVdFLElBQWMsSUFBS3h4QyxLQUFNb3dCLElBUW5FLFNBQVNzaEIsR0FBK0JKLEVBQVczNkIsRUFBUzR6QixFQUFpQm9ILEdBRTVFLElBQUlDLEVBQVksR0FDZkMsRUFBcUJQLElBQWNKLEdBRXBDLFNBQVNZLEVBQVNOLEdBQ2pCLElBQUlucEIsRUFjSixPQWJBdXBCLEVBQVdKLElBQWEsRUFDeEJwNEIsRUFBT2MsS0FBTW8zQixFQUFXRSxJQUFjLElBQUksU0FBVXRpQixFQUFHNmlCLEdBQ3RELElBQUlDLEVBQXNCRCxFQUFvQnA3QixFQUFTNHpCLEVBQWlCb0gsR0FDeEUsTUFBb0MsaUJBQXhCSyxHQUNWSCxHQUFxQkQsRUFBV0ksR0FLdEJILElBQ0R4cEIsRUFBVzJwQixRQURmLEdBSE5yN0IsRUFBUTg2QixVQUFVNXhDLFFBQVNteUMsR0FDM0JGLEVBQVNFLElBQ0YsTUFLRjNwQixFQUdSLE9BQU95cEIsRUFBU243QixFQUFRODZCLFVBQVcsTUFBVUcsRUFBVyxNQUFTRSxFQUFTLEtBTTNFLFNBQVNHLEdBQVk1bkMsRUFBUStOLEdBQzVCLElBQUlwUyxFQUFLcVYsRUFDUjYyQixFQUFjOTRCLEVBQU8rNEIsYUFBYUQsYUFBZSxHQUVsRCxJQUFNbHNDLEtBQU9vUyxPQUNRNU0sSUFBZjRNLEVBQUtwUyxNQUNQa3NDLEVBQWFsc0MsR0FBUXFFLEVBQVdnUixJQUFVQSxFQUFPLEtBQVVyVixHQUFRb1MsRUFBS3BTLElBTzVFLE9BSktxVixHQUNKakMsRUFBTzZCLFFBQVEsRUFBTTVRLEVBQVFnUixHQUd2QmhSLEVBL0VSK21DLEdBQWFscEIsS0FBT0YsR0FBU0UsS0FnUDdCOU8sRUFBTzZCLE9BQVEsQ0FHZG0zQixPQUFRLEVBR1JDLGFBQWMsR0FDZEMsS0FBTSxHQUVOSCxhQUFjLENBQ2J6N0IsSUFBS3NSLEdBQVNFLEtBQ2QzbUIsS0FBTSxNQUNOZ3hDLFFBeFJnQiw0REF3UlFodUMsS0FBTXlqQixHQUFTd3FCLFVBQ3ZDeDdCLFFBQVEsRUFDUnk3QixhQUFhLEVBQ2JDLE9BQU8sRUFDUEMsWUFBYSxtREFjYkMsUUFBUyxDQUNSLElBQUt6QixHQUNMdjRCLEtBQU0sYUFDTmdvQixLQUFNLFlBQ043WixJQUFLLDRCQUNMOHJCLEtBQU0scUNBR1B4bEIsU0FBVSxDQUNUdEcsSUFBSyxVQUNMNlosS0FBTSxTQUNOaVMsS0FBTSxZQUdQQyxlQUFnQixDQUNmL3JCLElBQUssY0FDTG5PLEtBQU0sZUFDTmk2QixLQUFNLGdCQUtQRSxXQUFZLENBR1gsU0FBVXJ3QyxPQUdWLGFBQWEsRUFHYixZQUFhd1QsS0FBS3llLE1BR2xCLFdBQVl2YixFQUFPeTJCLFVBT3BCcUMsWUFBYSxDQUNaeDdCLEtBQUssRUFDTDRDLFNBQVMsSUFPWDA1QixVQUFXLFNBQVUzb0MsRUFBUTRvQyxHQUM1QixPQUFPQSxFQUdOaEIsR0FBWUEsR0FBWTVuQyxFQUFRK08sRUFBTys0QixjQUFnQmMsR0FHdkRoQixHQUFZNzRCLEVBQU8rNEIsYUFBYzluQyxJQUduQzZvQyxjQUFlN0IsR0FBNkJwSCxJQUM1Q2tKLGNBQWU5QixHQUE2QkgsSUFHNUNrQyxLQUFNLFNBQVUxOEIsRUFBS0MsR0FHQSxpQkFBUkQsSUFDWEMsRUFBVUQsRUFDVkEsT0FBTWxMLEdBSVBtTCxFQUFVQSxHQUFXLEdBRXJCLElBQUkwOEIsRUFHSEMsRUFHQUMsRUFDQUMsRUFHQUMsRUFHQUMsRUFHQTlnQixFQUdBK2dCLEVBR0F4dkMsRUFHQXl2QyxFQUdBcEQsRUFBSXAzQixFQUFPNDVCLFVBQVcsR0FBSXI4QixHQUcxQms5QixFQUFrQnJELEVBQUVsM0IsU0FBV2szQixFQUcvQnNELEVBQXFCdEQsRUFBRWwzQixVQUNwQnU2QixFQUFnQjU3QixVQUFZNDdCLEVBQWdCcDZCLFFBQzlDTCxFQUFReTZCLEdBQ1J6NkIsRUFBT2pMLE1BR1JxaUIsRUFBV3BYLEVBQU8rVyxXQUNsQjRqQixFQUFtQjM2QixFQUFPNFYsVUFBVyxlQUdyQ2dsQixFQUFheEQsRUFBRXdELFlBQWMsR0FHN0JDLEVBQWlCLEdBQ2pCQyxFQUFzQixHQUd0QkMsRUFBVyxXQUdYeEMsRUFBUSxDQUNQM2UsV0FBWSxFQUdab2hCLGtCQUFtQixTQUFVcHVDLEdBQzVCLElBQUk2YSxFQUNKLEdBQUsrUixFQUFZLENBQ2hCLElBQU00Z0IsRUFFTCxJQURBQSxFQUFrQixHQUNSM3lCLEVBQVFrd0IsR0FBUzd2QixLQUFNcXlCLElBQ2hDQyxFQUFpQjN5QixFQUFPLEdBQUl4ZixjQUFnQixNQUN6Q215QyxFQUFpQjN5QixFQUFPLEdBQUl4ZixjQUFnQixNQUFTLElBQ3JEd0UsT0FBUWdiLEVBQU8sSUFHcEJBLEVBQVEyeUIsRUFBaUJ4dEMsRUFBSTNFLGNBQWdCLEtBRTlDLE9BQWdCLE1BQVR3ZixFQUFnQixLQUFPQSxFQUFNak4sS0FBTSxPQUkzQ3lnQyxzQkFBdUIsV0FDdEIsT0FBT3poQixFQUFZMmdCLEVBQXdCLE1BSTVDZSxpQkFBa0IsU0FBVTdrQyxFQUFNcFIsR0FNakMsT0FMa0IsTUFBYnUwQixJQUNKbmpCLEVBQU95a0MsRUFBcUJ6a0MsRUFBS3BPLGVBQ2hDNnlDLEVBQXFCemtDLEVBQUtwTyxnQkFBbUJvTyxFQUM5Q3drQyxFQUFnQnhrQyxHQUFTcFIsR0FFbkJWLE1BSVI0MkMsaUJBQWtCLFNBQVVoekMsR0FJM0IsT0FIa0IsTUFBYnF4QixJQUNKNGQsRUFBRWdFLFNBQVdqekMsR0FFUDVELE1BSVJxMkMsV0FBWSxTQUFVdjBDLEdBQ3JCLElBQUkrWSxFQUNKLEdBQUsvWSxFQUNKLEdBQUttekIsRUFHSitlLEVBQU1waEIsT0FBUTl3QixFQUFLa3lDLEVBQU04QyxjQUl6QixJQUFNajhCLEtBQVEvWSxFQUNidTBDLEVBQVl4N0IsR0FBUyxDQUFFdzdCLEVBQVl4N0IsR0FBUS9ZLEVBQUsrWSxJQUluRCxPQUFPN2EsTUFJUisyQyxNQUFPLFNBQVVDLEdBQ2hCLElBQUlDLEVBQVlELEdBQWNSLEVBSzlCLE9BSktkLEdBQ0pBLEVBQVVxQixNQUFPRSxHQUVsQjMvQixFQUFNLEVBQUcyL0IsR0FDRmozQyxPQW9CVixHQWZBNnlCLEVBQVMzQixRQUFTOGlCLEdBS2xCbkIsRUFBRTk1QixNQUFVQSxHQUFPODVCLEVBQUU5NUIsS0FBT3NSLEdBQVNFLE1BQVMsSUFDNUM1cEIsUUFBUzJ5QyxHQUFXanBCLEdBQVN3cUIsU0FBVyxNQUcxQ2hDLEVBQUVqdkMsS0FBT29WLEVBQVFpWSxRQUFValksRUFBUXBWLE1BQVFpdkMsRUFBRTVoQixRQUFVNGhCLEVBQUVqdkMsS0FHekRpdkMsRUFBRWlCLFdBQWNqQixFQUFFZ0IsVUFBWSxLQUFNbndDLGNBQWN3ZixNQUFPdU4sSUFBbUIsQ0FBRSxJQUd4RCxNQUFqQm9pQixFQUFFcUUsWUFBc0IsQ0FDNUJuQixFQUFZOXFDLEVBQVMrUCxjQUFlLEtBS3BDLElBQ0MrNkIsRUFBVXhyQixLQUFPc29CLEVBQUU5NUIsSUFJbkJnOUIsRUFBVXhyQixLQUFPd3JCLEVBQVV4ckIsS0FDM0Jzb0IsRUFBRXFFLFlBQWN6RCxHQUFhb0IsU0FBVyxLQUFPcEIsR0FBYTBELE1BQzNEcEIsRUFBVWxCLFNBQVcsS0FBT2tCLEVBQVVvQixLQUN0QyxNQUFRdnJDLEdBSVRpbkMsRUFBRXFFLGFBQWMsR0FhbEIsR0FSS3JFLEVBQUVwNkIsTUFBUW82QixFQUFFaUMsYUFBaUMsaUJBQVhqQyxFQUFFcDZCLE9BQ3hDbzZCLEVBQUVwNkIsS0FBT2dELEVBQU9tM0IsTUFBT0MsRUFBRXA2QixLQUFNbzZCLEVBQUVGLGNBSWxDb0IsR0FBK0J6SCxHQUFZdUcsRUFBRzc1QixFQUFTZzdCLEdBR2xEL2UsRUFDSixPQUFPK2UsRUE4RVIsSUFBTXh0QyxLQXpFTnd2QyxFQUFjdjZCLEVBQU9qTCxPQUFTcWlDLEVBQUV4NUIsU0FHUSxHQUFwQm9DLEVBQU9nNUIsVUFDMUJoNUIsRUFBT2pMLE1BQU1xc0IsUUFBUyxhQUl2QmdXLEVBQUVqdkMsS0FBT2l2QyxFQUFFanZDLEtBQUsyTixjQUdoQnNoQyxFQUFFdUUsWUFBYy9ELEdBQVd6c0MsS0FBTWlzQyxFQUFFanZDLE1BS25DK3hDLEVBQVc5QyxFQUFFOTVCLElBQUlwWSxRQUFTdXlDLEdBQU8sSUFHM0JMLEVBQUV1RSxXQXdCSXZFLEVBQUVwNkIsTUFBUW82QixFQUFFaUMsYUFDb0QsS0FBekVqQyxFQUFFbUMsYUFBZSxJQUFLN3pDLFFBQVMsdUNBQ2pDMHhDLEVBQUVwNkIsS0FBT282QixFQUFFcDZCLEtBQUs5WCxRQUFTc3lDLEdBQUssT0F2QjlCZ0QsRUFBV3BELEVBQUU5NUIsSUFBSTdYLE1BQU95MEMsRUFBUzF6QyxRQUc1QjR3QyxFQUFFcDZCLE9BQVVvNkIsRUFBRWlDLGFBQWlDLGlCQUFYakMsRUFBRXA2QixRQUMxQ2s5QixJQUFjMUQsR0FBT3JyQyxLQUFNK3VDLEdBQWEsSUFBTSxLQUFROUMsRUFBRXA2QixZQUdqRG82QixFQUFFcDZCLE9BSU8sSUFBWm82QixFQUFFM3VCLFFBQ055eEIsRUFBV0EsRUFBU2gxQyxRQUFTd3lDLEdBQVksTUFDekM4QyxHQUFhaEUsR0FBT3JyQyxLQUFNK3VDLEdBQWEsSUFBTSxLQUFRLEtBQVNqN0IsR0FBTWtFLE9BQ25FcTNCLEdBSUZwRCxFQUFFOTVCLElBQU00OEIsRUFBV00sR0FTZnBELEVBQUV3RSxhQUNENTdCLEVBQU9pNUIsYUFBY2lCLElBQ3pCM0IsRUFBTTJDLGlCQUFrQixvQkFBcUJsN0IsRUFBT2k1QixhQUFjaUIsSUFFOURsNkIsRUFBT2s1QixLQUFNZ0IsSUFDakIzQixFQUFNMkMsaUJBQWtCLGdCQUFpQmw3QixFQUFPazVCLEtBQU1nQixNQUtuRDlDLEVBQUVwNkIsTUFBUW82QixFQUFFdUUsYUFBZ0MsSUFBbEJ2RSxFQUFFbUMsYUFBeUJoOEIsRUFBUWc4QixjQUNqRWhCLEVBQU0yQyxpQkFBa0IsZUFBZ0I5RCxFQUFFbUMsYUFJM0NoQixFQUFNMkMsaUJBQ0wsU0FDQTlELEVBQUVpQixVQUFXLElBQU9qQixFQUFFb0MsUUFBU3BDLEVBQUVpQixVQUFXLElBQzNDakIsRUFBRW9DLFFBQVNwQyxFQUFFaUIsVUFBVyxLQUNBLE1BQXJCakIsRUFBRWlCLFVBQVcsR0FBYyxLQUFPTixHQUFXLFdBQWEsSUFDN0RYLEVBQUVvQyxRQUFTLE1BSUZwQyxFQUFFeUUsUUFDWnRELEVBQU0yQyxpQkFBa0Jud0MsRUFBR3FzQyxFQUFFeUUsUUFBUzl3QyxJQUl2QyxHQUFLcXNDLEVBQUUwRSxjQUMrQyxJQUFuRDFFLEVBQUUwRSxXQUFXN2xDLEtBQU13a0MsRUFBaUJsQyxFQUFPbkIsSUFBaUI1ZCxHQUc5RCxPQUFPK2UsRUFBTStDLFFBZWQsR0FYQVAsRUFBVyxRQUdYSixFQUFpQm5tQixJQUFLNGlCLEVBQUU5RixVQUN4QmlILEVBQU0xOEIsS0FBTXU3QixFQUFFMkUsU0FDZHhELEVBQU03aUIsS0FBTTBoQixFQUFFOTBCLE9BR2QyM0IsRUFBWTNCLEdBQStCUixHQUFZVixFQUFHNzVCLEVBQVNnN0IsR0FLNUQsQ0FTTixHQVJBQSxFQUFNM2UsV0FBYSxFQUdkMmdCLEdBQ0pHLEVBQW1CdFosUUFBUyxXQUFZLENBQUVtWCxFQUFPbkIsSUFJN0M1ZCxFQUNKLE9BQU8rZSxFQUlIbkIsRUFBRWtDLE9BQVNsQyxFQUFFM0QsUUFBVSxJQUMzQjRHLEVBQWU3MkMsRUFBTzZMLFlBQVksV0FDakNrcEMsRUFBTStDLE1BQU8sYUFDWGxFLEVBQUUzRCxVQUdOLElBQ0NqYSxHQUFZLEVBQ1p5Z0IsRUFBVStCLEtBQU1uQixFQUFnQmgvQixHQUMvQixNQUFRMUwsR0FHVCxHQUFLcXBCLEVBQ0osTUFBTXJwQixFQUlQMEwsR0FBTyxFQUFHMUwsU0FoQ1gwTCxHQUFPLEVBQUcsZ0JBcUNYLFNBQVNBLEVBQU13L0IsRUFBUVksRUFBa0JDLEVBQVdMLEdBQ25ELElBQUlNLEVBQVdKLEVBQVN6NUIsRUFBTzg1QixFQUFVQyxFQUN4Q2QsRUFBYVUsRUFHVHppQixJQUlMQSxHQUFZLEVBR1A2Z0IsR0FDSjcyQyxFQUFPa3dDLGFBQWMyRyxHQUt0QkosT0FBWTduQyxFQUdaK25DLEVBQXdCMEIsR0FBVyxHQUduQ3RELEVBQU0zZSxXQUFheWhCLEVBQVMsRUFBSSxFQUFJLEVBR3BDYyxFQUFZZCxHQUFVLEtBQU9BLEVBQVMsS0FBa0IsTUFBWEEsRUFHeENhLElBQ0pFLEVBN2xCSixTQUE4QmhGLEVBQUdtQixFQUFPMkQsR0FPdkMsSUFMQSxJQUFJSSxFQUFJbjBDLEVBQU1vMEMsRUFBZUMsRUFDNUJ2b0IsRUFBV21qQixFQUFFbmpCLFNBQ2Jva0IsRUFBWWpCLEVBQUVpQixVQUdZLE1BQW5CQSxFQUFXLElBQ2xCQSxFQUFVMXZCLGFBQ0V2VyxJQUFQa3FDLElBQ0pBLEVBQUtsRixFQUFFZ0UsVUFBWTdDLEVBQU15QyxrQkFBbUIsaUJBSzlDLEdBQUtzQixFQUNKLElBQU1uMEMsS0FBUThyQixFQUNiLEdBQUtBLEVBQVU5ckIsSUFBVThyQixFQUFVOXJCLEdBQU9nRCxLQUFNbXhDLEdBQU8sQ0FDdERqRSxFQUFVNXhDLFFBQVMwQixHQUNuQixNQU1ILEdBQUtrd0MsRUFBVyxLQUFPNkQsRUFDdEJLLEVBQWdCbEUsRUFBVyxPQUNyQixDQUdOLElBQU1sd0MsS0FBUSt6QyxFQUFZLENBQ3pCLElBQU03RCxFQUFXLElBQU9qQixFQUFFdUMsV0FBWXh4QyxFQUFPLElBQU1rd0MsRUFBVyxJQUFRLENBQ3JFa0UsRUFBZ0JwMEMsRUFDaEIsTUFFS3EwQyxJQUNMQSxFQUFnQnIwQyxHQUtsQm8wQyxFQUFnQkEsR0FBaUJDLEVBTWxDLEdBQUtELEVBSUosT0FIS0EsSUFBa0JsRSxFQUFXLElBQ2pDQSxFQUFVNXhDLFFBQVM4MUMsR0FFYkwsRUFBV0ssR0EwaUJMRSxDQUFxQnJGLEVBQUdtQixFQUFPMkQsS0FJckNDLEdBQ0xuOEIsRUFBTzhDLFFBQVMsU0FBVXMwQixFQUFFaUIsWUFBZSxHQUMzQ3I0QixFQUFPOEMsUUFBUyxPQUFRczBCLEVBQUVpQixXQUFjLElBQ3hDakIsRUFBRXVDLFdBQVksZUFBa0IsY0FJakN5QyxFQTlpQkgsU0FBc0JoRixFQUFHZ0YsRUFBVTdELEVBQU80RCxHQUN6QyxJQUFJTyxFQUFPbjBDLEVBQVNvMEMsRUFBTTd4QixFQUFLdGUsRUFDOUJtdEMsRUFBYSxHQUdidEIsRUFBWWpCLEVBQUVpQixVQUFVNXlDLFFBR3pCLEdBQUs0eUMsRUFBVyxHQUNmLElBQU1zRSxLQUFRdkYsRUFBRXVDLFdBQ2ZBLEVBQVlnRCxFQUFLMTBDLGVBQWtCbXZDLEVBQUV1QyxXQUFZZ0QsR0FPbkQsSUFIQXAwQyxFQUFVOHZDLEVBQVUxdkIsUUFHWnBnQixHQWNQLEdBWks2dUMsRUFBRXNDLGVBQWdCbnhDLEtBQ3RCZ3dDLEVBQU9uQixFQUFFc0MsZUFBZ0JueEMsSUFBYzZ6QyxJQUlsQzV2QyxHQUFRMnZDLEdBQWEvRSxFQUFFd0YsYUFDNUJSLEVBQVdoRixFQUFFd0YsV0FBWVIsRUFBVWhGLEVBQUVnQixXQUd0QzVyQyxFQUFPakUsRUFDUEEsRUFBVTh2QyxFQUFVMXZCLFFBS25CLEdBQWlCLE1BQVpwZ0IsRUFFSkEsRUFBVWlFLE9BR0osR0FBYyxNQUFUQSxHQUFnQkEsSUFBU2pFLEVBQVUsQ0FNOUMsS0FIQW8wQyxFQUFPaEQsRUFBWW50QyxFQUFPLElBQU1qRSxJQUFhb3hDLEVBQVksS0FBT3B4QyxJQUkvRCxJQUFNbTBDLEtBQVMvQyxFQUlkLElBREE3dUIsRUFBTTR4QixFQUFNLzJDLE1BQU8sTUFDVCxLQUFRNEMsSUFHakJvMEMsRUFBT2hELEVBQVludEMsRUFBTyxJQUFNc2UsRUFBSyxLQUNwQzZ1QixFQUFZLEtBQU83dUIsRUFBSyxLQUNiLEVBR0csSUFBVDZ4QixFQUNKQSxFQUFPaEQsRUFBWStDLElBR2dCLElBQXhCL0MsRUFBWStDLEtBQ3ZCbjBDLEVBQVV1aUIsRUFBSyxHQUNmdXRCLEVBQVU1eEMsUUFBU3FrQixFQUFLLEtBRXpCLE1BT0osSUFBYyxJQUFUNnhCLEVBR0osR0FBS0EsR0FBUXZGLEVBQUV5RixPQUNkVCxFQUFXTyxFQUFNUCxRQUVqQixJQUNDQSxFQUFXTyxFQUFNUCxHQUNoQixNQUFRanNDLEdBQ1QsTUFBTyxDQUNOK21CLE1BQU8sY0FDUDVVLE1BQU9xNkIsRUFBT3hzQyxFQUFJLHNCQUF3QjNELEVBQU8sT0FBU2pFLElBU2pFLE1BQU8sQ0FBRTJ1QixNQUFPLFVBQVdsYSxLQUFNby9CLEdBaWRwQlUsQ0FBYTFGLEVBQUdnRixFQUFVN0QsRUFBTzRELEdBR3ZDQSxHQUdDL0UsRUFBRXdFLGNBQ05TLEVBQVc5RCxFQUFNeUMsa0JBQW1CLG9CQUVuQ2g3QixFQUFPaTVCLGFBQWNpQixHQUFhbUMsSUFFbkNBLEVBQVc5RCxFQUFNeUMsa0JBQW1CLFdBRW5DaDdCLEVBQU9rNUIsS0FBTWdCLEdBQWFtQyxJQUtaLE1BQVhoQixHQUE2QixTQUFYakUsRUFBRWp2QyxLQUN4Qm96QyxFQUFhLFlBR1MsTUFBWEYsRUFDWEUsRUFBYSxlQUliQSxFQUFhYSxFQUFTbGxCLE1BQ3RCNmtCLEVBQVVLLEVBQVNwL0IsS0FFbkJtL0IsSUFEQTc1QixFQUFRODVCLEVBQVM5NUIsVUFNbEJBLEVBQVFpNUIsR0FDSEYsR0FBV0UsSUFDZkEsRUFBYSxRQUNSRixFQUFTLElBQ2JBLEVBQVMsS0FNWjlDLEVBQU04QyxPQUFTQSxFQUNmOUMsRUFBTWdELFlBQWVVLEdBQW9CVixHQUFlLEdBR25EWSxFQUNKL2tCLEVBQVNpQixZQUFhb2lCLEVBQWlCLENBQUVzQixFQUFTUixFQUFZaEQsSUFFOURuaEIsRUFBU3FCLFdBQVlnaUIsRUFBaUIsQ0FBRWxDLEVBQU9nRCxFQUFZajVCLElBSTVEaTJCLEVBQU1xQyxXQUFZQSxHQUNsQkEsT0FBYXhvQyxFQUVSbW9DLEdBQ0pHLEVBQW1CdFosUUFBUythLEVBQVksY0FBZ0IsWUFDdkQsQ0FBRTVELEVBQU9uQixFQUFHK0UsRUFBWUosRUFBVXo1QixJQUlwQ3E0QixFQUFpQjdqQixTQUFVMmpCLEVBQWlCLENBQUVsQyxFQUFPZ0QsSUFFaERoQixJQUNKRyxFQUFtQnRaLFFBQVMsZUFBZ0IsQ0FBRW1YLEVBQU9uQixNQUczQ3AzQixFQUFPZzVCLFFBQ2hCaDVCLEVBQU9qTCxNQUFNcXNCLFFBQVMsY0FLekIsT0FBT21YLEdBR1J3RSxRQUFTLFNBQVV6L0IsRUFBS04sRUFBTStELEdBQzdCLE9BQU9mLEVBQU9PLElBQUtqRCxFQUFLTixFQUFNK0QsRUFBVSxTQUd6Q2k4QixVQUFXLFNBQVUxL0IsRUFBS3lELEdBQ3pCLE9BQU9mLEVBQU9PLElBQUtqRCxPQUFLbEwsRUFBVzJPLEVBQVUsYUFJL0NmLEVBQU9jLEtBQU0sQ0FBRSxNQUFPLFNBQVUsU0FBVWpHLEVBQUkyYSxHQUM3Q3hWLEVBQVF3VixHQUFXLFNBQVVsWSxFQUFLTixFQUFNK0QsRUFBVTVZLEdBVWpELE9BUEt3VyxFQUFZM0IsS0FDaEI3VSxFQUFPQSxHQUFRNFksRUFDZkEsRUFBVy9ELEVBQ1hBLE9BQU81SyxHQUlENE4sRUFBT2c2QixLQUFNaDZCLEVBQU82QixPQUFRLENBQ2xDdkUsSUFBS0EsRUFDTG5WLEtBQU1xdEIsRUFDTjRpQixTQUFVandDLEVBQ1Y2VSxLQUFNQSxFQUNOKytCLFFBQVNoN0IsR0FDUGYsRUFBT2tDLGNBQWU1RSxJQUFTQSxRQUlwQzBDLEVBQU84NUIsZUFBZSxTQUFVMUMsR0FDL0IsSUFBSXJzQyxFQUNKLElBQU1BLEtBQUtxc0MsRUFBRXlFLFFBQ2EsaUJBQXBCOXdDLEVBQUU5QyxnQkFDTm12QyxFQUFFbUMsWUFBY25DLEVBQUV5RSxRQUFTOXdDLElBQU8sT0FNckNpVixFQUFPeW5CLFNBQVcsU0FBVW5xQixFQUFLQyxFQUFTMU4sR0FDekMsT0FBT21RLEVBQU9nNkIsS0FBTSxDQUNuQjE4QixJQUFLQSxFQUdMblYsS0FBTSxNQUNOaXdDLFNBQVUsU0FDVjN2QixPQUFPLEVBQ1A2d0IsT0FBTyxFQUNQMTdCLFFBQVEsRUFLUis3QixXQUFZLENBQ1gsY0FBZSxjQUVoQmlELFdBQVksU0FBVVIsR0FDckJwOEIsRUFBTzJDLFdBQVl5NUIsRUFBVTcrQixFQUFTMU4sT0FNekNtUSxFQUFPRyxHQUFHMEIsT0FBUSxDQUNqQm83QixRQUFTLFNBQVV6VixHQUNsQixJQUFJM0gsRUF5QkosT0F2Qkt0N0IsS0FBTSxLQUNMb2EsRUFBWTZvQixLQUNoQkEsRUFBT0EsRUFBS3Z4QixLQUFNMVIsS0FBTSxLQUl6QnM3QixFQUFPN2YsRUFBUXduQixFQUFNampDLEtBQU0sR0FBSXNqQixlQUFnQjFHLEdBQUksR0FBSWEsT0FBTyxHQUV6RHpkLEtBQU0sR0FBSWtRLFlBQ2RvckIsRUFBS25yQixhQUFjblEsS0FBTSxJQUcxQnM3QixFQUFLeDVCLEtBQUssV0FHVCxJQUZBLElBQUkyYSxFQUFPemMsS0FFSHljLEVBQUtrOEIsbUJBQ1psOEIsRUFBT0EsRUFBS2s4QixrQkFHYixPQUFPbDhCLEtBQ0prbkIsT0FBUTNqQyxPQUdOQSxNQUdSNDRDLFVBQVcsU0FBVTNWLEdBQ3BCLE9BQUs3b0IsRUFBWTZvQixHQUNUampDLEtBQUt1YyxNQUFNLFNBQVUvVixHQUMzQmlWLEVBQVF6YixNQUFPNDRDLFVBQVczVixFQUFLdnhCLEtBQU0xUixLQUFNd0csT0FJdEN4RyxLQUFLdWMsTUFBTSxXQUNqQixJQUFJcGQsRUFBT3NjLEVBQVF6YixNQUNsQjB2QixFQUFXdndCLEVBQUt1d0IsV0FFWkEsRUFBU3p0QixPQUNieXRCLEVBQVNncEIsUUFBU3pWLEdBR2xCOWpDLEVBQUt3a0MsT0FBUVYsT0FLaEIzSCxLQUFNLFNBQVUySCxHQUNmLElBQUk0VixFQUFpQnorQixFQUFZNm9CLEdBRWpDLE9BQU9qakMsS0FBS3VjLE1BQU0sU0FBVS9WLEdBQzNCaVYsRUFBUXpiLE1BQU8wNEMsUUFBU0csRUFBaUI1VixFQUFLdnhCLEtBQU0xUixLQUFNd0csR0FBTXk4QixPQUlsRTZWLE9BQVEsU0FBVXA5QixHQUlqQixPQUhBMWIsS0FBSytMLE9BQVEyUCxHQUFXeVQsSUFBSyxRQUFTNVMsTUFBTSxXQUMzQ2QsRUFBUXpiLE1BQU8rakMsWUFBYS9qQyxLQUFLNmlCLGVBRTNCN2lCLFFBS1R5YixFQUFPK0wsS0FBSzNHLFFBQVE2cUIsT0FBUyxTQUFVanZCLEdBQ3RDLE9BQVFoQixFQUFPK0wsS0FBSzNHLFFBQVFrNEIsUUFBU3Q4QixJQUV0Q2hCLEVBQU8rTCxLQUFLM0csUUFBUWs0QixRQUFVLFNBQVV0OEIsR0FDdkMsU0FBV0EsRUFBSzJwQixhQUFlM3BCLEVBQUs2cUIsY0FBZ0I3cUIsRUFBSzJzQixpQkFBaUJubkMsU0FNM0V3WixFQUFPKzRCLGFBQWF3RSxJQUFNLFdBQ3pCLElBQ0MsT0FBTyxJQUFJLzVDLEVBQU9nNkMsZUFDakIsTUFBUXJ0QyxNQUdYLElBQUlzdEMsR0FBbUIsQ0FHckJDLEVBQUcsSUFJSEMsS0FBTSxLQUVQQyxHQUFlNTlCLEVBQU8rNEIsYUFBYXdFLE1BRXBDNytCLEVBQVFtL0IsT0FBU0QsSUFBa0Isb0JBQXFCQSxHQUN4RGwvQixFQUFRczdCLEtBQU80RCxLQUFpQkEsR0FFaEM1OUIsRUFBTys1QixlQUFlLFNBQVV4OEIsR0FDL0IsSUFBSXdELEVBQVUrOEIsRUFHZCxHQUFLcC9CLEVBQVFtL0IsTUFBUUQsS0FBaUJyZ0MsRUFBUWsrQixZQUM3QyxNQUFPLENBQ05PLEtBQU0sU0FBVUgsRUFBU3ZLLEdBQ3hCLElBQUl2bUMsRUFDSHd5QyxFQUFNaGdDLEVBQVFnZ0MsTUFXZixHQVRBQSxFQUFJUSxLQUNIeGdDLEVBQVFwVixLQUNSb1YsRUFBUUQsSUFDUkMsRUFBUSs3QixNQUNSLzdCLEVBQVF5Z0MsU0FDUnpnQyxFQUFRZ1MsVUFJSmhTLEVBQVEwZ0MsVUFDWixJQUFNbHpDLEtBQUt3UyxFQUFRMGdDLFVBQ2xCVixFQUFLeHlDLEdBQU13UyxFQUFRMGdDLFVBQVdsekMsR0FtQmhDLElBQU1BLEtBZER3UyxFQUFRNjlCLFVBQVltQyxFQUFJcEMsa0JBQzVCb0MsRUFBSXBDLGlCQUFrQjU5QixFQUFRNjlCLFVBUXpCNzlCLEVBQVFrK0IsYUFBZ0JJLEVBQVMsc0JBQ3RDQSxFQUFTLG9CQUF1QixrQkFJdEJBLEVBQ1YwQixFQUFJckMsaUJBQWtCbndDLEVBQUc4d0MsRUFBUzl3QyxJQUluQ2dXLEVBQVcsU0FBVTVZLEdBQ3BCLE9BQU8sV0FDRDRZLElBQ0pBLEVBQVcrOEIsRUFBZ0JQLEVBQUlXLE9BQzlCWCxFQUFJWSxRQUFVWixFQUFJYSxRQUFVYixFQUFJYyxVQUMvQmQsRUFBSWUsbUJBQXFCLEtBRWIsVUFBVG4yQyxFQUNKbzFDLEVBQUlqQyxRQUNnQixVQUFUbnpDLEVBS2dCLGlCQUFmbzFDLEVBQUlsQyxPQUNmL0osRUFBVSxFQUFHLFNBRWJBLEVBR0NpTSxFQUFJbEMsT0FDSmtDLEVBQUloQyxZQUlOakssRUFDQ21NLEdBQWtCRixFQUFJbEMsU0FBWWtDLEVBQUlsQyxPQUN0Q2tDLEVBQUloQyxXQUsrQixVQUFqQ2dDLEVBQUlnQixjQUFnQixTQUNNLGlCQUFyQmhCLEVBQUlpQixhQUNWLENBQUVDLE9BQVFsQixFQUFJbkIsVUFDZCxDQUFFNThCLEtBQU0rOUIsRUFBSWlCLGNBQ2JqQixFQUFJdEMsNEJBUVRzQyxFQUFJVyxPQUFTbjlCLElBQ2IrOEIsRUFBZ0JQLEVBQUlZLFFBQVVaLEVBQUljLFVBQVl0OUIsRUFBVSxjQUtuQzNPLElBQWhCbXJDLEVBQUlhLFFBQ1JiLEVBQUlhLFFBQVVOLEVBRWRQLEVBQUllLG1CQUFxQixXQUdBLElBQW5CZixFQUFJM2pCLFlBTVJwMkIsRUFBTzZMLFlBQVksV0FDYjBSLEdBQ0orOEIsUUFRTC84QixFQUFXQSxFQUFVLFNBRXJCLElBR0N3OEIsRUFBSXZCLEtBQU16K0IsRUFBUW8rQixZQUFjcCtCLEVBQVFQLE1BQVEsTUFDL0MsTUFBUTdNLEdBR1QsR0FBSzRRLEVBQ0osTUFBTTVRLElBS1RtckMsTUFBTyxXQUNEdjZCLEdBQ0pBLFNBV0xmLEVBQU84NUIsZUFBZSxTQUFVMUMsR0FDMUJBLEVBQUVxRSxjQUNOckUsRUFBRW5qQixTQUFTM1UsUUFBUyxNQUt0QlUsRUFBTzQ1QixVQUFXLENBQ2pCSixRQUFTLENBQ1JsNkIsT0FBUSw2RkFHVDJVLFNBQVUsQ0FDVDNVLE9BQVEsMkJBRVRxNkIsV0FBWSxDQUNYLGNBQWUsU0FBVW42QixHQUV4QixPQURBUSxFQUFPMkMsV0FBWW5ELEdBQ1pBLE1BTVZRLEVBQU84NUIsY0FBZSxVQUFVLFNBQVUxQyxRQUN4QmhsQyxJQUFaZ2xDLEVBQUUzdUIsUUFDTjJ1QixFQUFFM3VCLE9BQVEsR0FFTjJ1QixFQUFFcUUsY0FDTnJFLEVBQUVqdkMsS0FBTyxVQUtYNlgsRUFBTys1QixjQUFlLFVBQVUsU0FBVTNDLEdBSXhDLElBQUk5M0IsRUFBUXlCLEVBRGIsR0FBS3EyQixFQUFFcUUsYUFBZXJFLEVBQUVzSCxZQUV2QixNQUFPLENBQ04xQyxLQUFNLFNBQVVsbUIsRUFBR3diLEdBQ2xCaHlCLEVBQVNVLEVBQVEsWUFDZmlNLEtBQU1tckIsRUFBRXNILGFBQWUsSUFDdkIxakIsS0FBTSxDQUFFMmpCLFFBQVN2SCxFQUFFd0gsY0FBZTUvQixJQUFLbzRCLEVBQUU5NUIsTUFDekNrakIsR0FBSSxhQUFjemYsRUFBVyxTQUFVODlCLEdBQ3ZDdi9CLEVBQU9vWCxTQUNQM1YsRUFBVyxLQUNOODlCLEdBQ0p2TixFQUF1QixVQUFidU4sRUFBSTEyQyxLQUFtQixJQUFNLElBQUswMkMsRUFBSTEyQyxRQUtuRHFILEVBQVNtUSxLQUFLQyxZQUFhTixFQUFRLEtBRXBDZzhCLE1BQU8sV0FDRHY2QixHQUNKQSxTQVVMLElBcUdLNmMsR0FyR0RraEIsR0FBZSxHQUNsQkMsR0FBUyxvQkFHVi8rQixFQUFPNDVCLFVBQVcsQ0FDakJvRixNQUFPLFdBQ1BDLGNBQWUsV0FDZCxJQUFJbCtCLEVBQVcrOUIsR0FBYWg2QixPQUFXOUUsRUFBT21DLFFBQVUsSUFBUWxELEdBQU1rRSxPQUV0RSxPQURBNWUsS0FBTXdjLElBQWEsRUFDWkEsS0FLVGYsRUFBTzg1QixjQUFlLGNBQWMsU0FBVTFDLEVBQUc4SCxFQUFrQjNHLEdBRWxFLElBQUk0RyxFQUFjQyxFQUFhQyxFQUM5QkMsR0FBdUIsSUFBWmxJLEVBQUU0SCxRQUFxQkQsR0FBTzV6QyxLQUFNaXNDLEVBQUU5NUIsS0FDaEQsTUFDa0IsaUJBQVg4NUIsRUFBRXA2QixNQUU2QyxLQURuRG82QixFQUFFbUMsYUFBZSxJQUNqQjd6QyxRQUFTLHNDQUNYcTVDLEdBQU81ekMsS0FBTWlzQyxFQUFFcDZCLE9BQVUsUUFJNUIsR0FBS3NpQyxHQUFpQyxVQUFyQmxJLEVBQUVpQixVQUFXLEdBOEQ3QixPQTNEQThHLEVBQWUvSCxFQUFFNkgsY0FBZ0J0Z0MsRUFBWXk0QixFQUFFNkgsZUFDOUM3SCxFQUFFNkgsZ0JBQ0Y3SCxFQUFFNkgsY0FHRUssRUFDSmxJLEVBQUdrSSxHQUFhbEksRUFBR2tJLEdBQVdwNkMsUUFBUzY1QyxHQUFRLEtBQU9JLElBQy9CLElBQVovSCxFQUFFNEgsUUFDYjVILEVBQUU5NUIsTUFBU2s1QixHQUFPcnJDLEtBQU1pc0MsRUFBRTk1QixLQUFRLElBQU0sS0FBUTg1QixFQUFFNEgsTUFBUSxJQUFNRyxHQUlqRS9ILEVBQUV1QyxXQUFZLGVBQWtCLFdBSS9CLE9BSE0wRixHQUNMci9CLEVBQU9zQyxNQUFPNjhCLEVBQWUsbUJBRXZCRSxFQUFtQixJQUkzQmpJLEVBQUVpQixVQUFXLEdBQU0sT0FHbkIrRyxFQUFjNTdDLEVBQVEyN0MsR0FDdEIzN0MsRUFBUTI3QyxHQUFpQixXQUN4QkUsRUFBb0JwK0IsV0FJckJzM0IsRUFBTXBoQixRQUFRLGdCQUdRL2tCLElBQWhCZ3RDLEVBQ0pwL0IsRUFBUXhjLEdBQVNteEMsV0FBWXdLLEdBSTdCMzdDLEVBQVEyN0MsR0FBaUJDLEVBSXJCaEksRUFBRytILEtBR1AvSCxFQUFFNkgsY0FBZ0JDLEVBQWlCRCxjQUduQ0gsR0FBYWw0QyxLQUFNdTRDLElBSWZFLEdBQXFCMWdDLEVBQVl5Z0MsSUFDckNBLEVBQWFDLEVBQW1CLElBR2pDQSxFQUFvQkQsT0FBY2h0QyxLQUk1QixZQVlUc00sRUFBUTZnQyxxQkFDSDNoQixHQUFPcHVCLEVBQVNnd0MsZUFBZUQsbUJBQW9CLElBQUszaEIsTUFDdkQ1UyxVQUFZLDZCQUNpQixJQUEzQjRTLEdBQUt4VyxXQUFXNWdCLFFBUXhCd1osRUFBTzRULFVBQVksU0FBVTVXLEVBQU1rRCxFQUFTdS9CLEdBQzNDLE1BQXFCLGlCQUFUemlDLEVBQ0osSUFFZ0Isa0JBQVprRCxJQUNYdS9CLEVBQWN2L0IsRUFDZEEsR0FBVSxHQUtMQSxJQUlBeEIsRUFBUTZnQyxxQkFNWjF2QixHQUxBM1AsRUFBVTFRLEVBQVNnd0MsZUFBZUQsbUJBQW9CLEtBS3ZDaGdDLGNBQWUsU0FDekJ1UCxLQUFPdGYsRUFBU29mLFNBQVNFLEtBQzlCNU8sRUFBUVAsS0FBS0MsWUFBYWlRLElBRTFCM1AsRUFBVTFRLEdBS1prd0IsR0FBVytmLEdBQWUsSUFEMUJDLEVBQVNuc0IsRUFBV3pMLEtBQU05SyxJQUtsQixDQUFFa0QsRUFBUVgsY0FBZW1nQyxFQUFRLE1BR3pDQSxFQUFTamdCLEdBQWUsQ0FBRXppQixHQUFRa0QsRUFBU3dmLEdBRXRDQSxHQUFXQSxFQUFRbDVCLFFBQ3ZCd1osRUFBUTBmLEdBQVVoSixTQUdaMVcsRUFBT1ksTUFBTyxHQUFJOCtCLEVBQU90NEIsY0FsQ2hDLElBQUl5SSxFQUFNNnZCLEVBQVFoZ0IsR0F5Q25CMWYsRUFBT0csR0FBR3lqQixLQUFPLFNBQVV0bUIsRUFBS3FpQyxFQUFRNStCLEdBQ3ZDLElBQUlkLEVBQVU5WCxFQUFNaTBDLEVBQ25CMTRDLEVBQU9hLEtBQ1BxOEIsRUFBTXRqQixFQUFJNVgsUUFBUyxLQXNEcEIsT0FwREtrN0IsR0FBTyxJQUNYM2dCLEVBQVd1MEIsR0FBa0JsM0IsRUFBSTdYLE1BQU9tN0IsSUFDeEN0akIsRUFBTUEsRUFBSTdYLE1BQU8sRUFBR203QixJQUloQmppQixFQUFZZ2hDLElBR2hCNStCLEVBQVc0K0IsRUFDWEEsT0FBU3Z0QyxHQUdFdXRDLEdBQTRCLGlCQUFYQSxJQUM1QngzQyxFQUFPLFFBSUh6RSxFQUFLOEMsT0FBUyxHQUNsQndaLEVBQU9nNkIsS0FBTSxDQUNaMThCLElBQUtBLEVBS0xuVixLQUFNQSxHQUFRLE1BQ2Rpd0MsU0FBVSxPQUNWcDdCLEtBQU0yaUMsSUFDSDlqQyxNQUFNLFNBQVUyaUMsR0FHbkJwQyxFQUFXbjdCLFVBRVh2ZCxFQUFLOGpDLEtBQU12bkIsRUFJVkQsRUFBUSxTQUFVa29CLE9BQVFsb0IsRUFBTzRULFVBQVc0cUIsSUFBaUIvMUMsS0FBTXdYLEdBR25FdStCLE1BS0VybkIsT0FBUXBXLEdBQVksU0FBVXczQixFQUFPOEMsR0FDeEMzM0MsRUFBS29kLE1BQU0sV0FDVkMsRUFBUzNDLE1BQU83WixLQUFNNjNDLEdBQVksQ0FBRTdELEVBQU1pRyxhQUFjbkQsRUFBUTlDLFNBSzVEaDBDLE1BTVJ5YixFQUFPK0wsS0FBSzNHLFFBQVF3NkIsU0FBVyxTQUFVNStCLEdBQ3hDLE9BQU9oQixFQUFPc0IsS0FBTXRCLEVBQU84eUIsUUFBUSxTQUFVM3lCLEdBQzVDLE9BQU9hLElBQVNiLEVBQUdhLFFBQ2hCeGEsUUFNTHdaLEVBQU82L0IsT0FBUyxDQUNmQyxVQUFXLFNBQVU5K0IsRUFBTXpELEVBQVN4UyxHQUNuQyxJQUFJZzFDLEVBQWFDLEVBQVNDLEVBQVdDLEVBQVFDLEVBQVdDLEVBQ3ZEeHdDLEVBQVdvUSxFQUFPOGMsSUFBSzliLEVBQU0sWUFDN0JxL0IsRUFBVXJnQyxFQUFRZ0IsR0FDbEJpakIsRUFBUSxHQUdTLFdBQWJyMEIsSUFDSm9SLEVBQUs0YixNQUFNaHRCLFNBQVcsWUFHdkJ1d0MsRUFBWUUsRUFBUVIsU0FDcEJJLEVBQVlqZ0MsRUFBTzhjLElBQUs5YixFQUFNLE9BQzlCby9CLEVBQWFwZ0MsRUFBTzhjLElBQUs5YixFQUFNLFNBQ0ksYUFBYnBSLEdBQXdDLFVBQWJBLEtBQzlDcXdDLEVBQVlHLEdBQWExNkMsUUFBUyxTQUFZLEdBTWhEdzZDLEdBREFILEVBQWNNLEVBQVF6d0MsWUFDRHdhLElBQ3JCNDFCLEVBQVVELEVBQVl6UixPQUd0QjRSLEVBQVNwVixXQUFZbVYsSUFBZSxFQUNwQ0QsRUFBVWxWLFdBQVlzVixJQUFnQixHQUdsQ3poQyxFQUFZcEIsS0FHaEJBLEVBQVVBLEVBQVF0SCxLQUFNK0ssRUFBTWpXLEVBQUdpVixFQUFPNkIsT0FBUSxHQUFJcytCLEtBR2pDLE1BQWY1aUMsRUFBUTZNLE1BQ1o2WixFQUFNN1osSUFBUTdNLEVBQVE2TSxJQUFNKzFCLEVBQVUvMUIsSUFBUTgxQixHQUUxQixNQUFoQjNpQyxFQUFRK3dCLE9BQ1pySyxFQUFNcUssS0FBUy93QixFQUFRK3dCLEtBQU82UixFQUFVN1IsS0FBUzBSLEdBRzdDLFVBQVd6aUMsRUFDZkEsRUFBUStpQyxNQUFNcnFDLEtBQU0rSyxFQUFNaWpCLEdBRzFCb2MsRUFBUXZqQixJQUFLbUgsS0FLaEJqa0IsRUFBT0csR0FBRzBCLE9BQVEsQ0FHakJnK0IsT0FBUSxTQUFVdGlDLEdBR2pCLEdBQUswRCxVQUFVemEsT0FDZCxZQUFtQjRMLElBQVptTCxFQUNOaFosS0FDQUEsS0FBS3VjLE1BQU0sU0FBVS9WLEdBQ3BCaVYsRUFBTzYvQixPQUFPQyxVQUFXdjdDLEtBQU1nWixFQUFTeFMsTUFJM0MsSUFBSXcxQyxFQUFNQyxFQUNUeC9CLEVBQU96YyxLQUFNLEdBRWQsT0FBTXljLEVBUUFBLEVBQUsyc0IsaUJBQWlCbm5DLFFBSzVCKzVDLEVBQU92L0IsRUFBS290Qix3QkFDWm9TLEVBQU14L0IsRUFBSzZHLGNBQWNzQyxZQUNsQixDQUNOQyxJQUFLbTJCLEVBQUtuMkIsSUFBTW8yQixFQUFJQyxZQUNwQm5TLEtBQU1pUyxFQUFLalMsS0FBT2tTLEVBQUlFLGNBUmYsQ0FBRXQyQixJQUFLLEVBQUdra0IsS0FBTSxRQVR4QixHQXVCRDErQixTQUFVLFdBQ1QsR0FBTXJMLEtBQU0sR0FBWixDQUlBLElBQUlvOEMsRUFBY2QsRUFBUWh3QyxFQUN6Qm1SLEVBQU96YyxLQUFNLEdBQ2JxOEMsRUFBZSxDQUFFeDJCLElBQUssRUFBR2trQixLQUFNLEdBR2hDLEdBQXdDLFVBQW5DdHVCLEVBQU84YyxJQUFLOWIsRUFBTSxZQUd0QjYrQixFQUFTNytCLEVBQUtvdEIsNEJBRVIsQ0FPTixJQU5BeVIsRUFBU3Q3QyxLQUFLczdDLFNBSWRod0MsRUFBTW1SLEVBQUs2RyxjQUNYODRCLEVBQWUzL0IsRUFBSzIvQixjQUFnQjl3QyxFQUFJbWEsZ0JBQ2hDMjJCLElBQ0xBLElBQWlCOXdDLEVBQUkrdEIsTUFBUStpQixJQUFpQjl3QyxFQUFJbWEsa0JBQ1QsV0FBM0NoSyxFQUFPOGMsSUFBSzZqQixFQUFjLGFBRTFCQSxFQUFlQSxFQUFhbHNDLFdBRXhCa3NDLEdBQWdCQSxJQUFpQjMvQixHQUFrQyxJQUExQjIvQixFQUFhOWhDLFlBRzFEK2hDLEVBQWU1Z0MsRUFBUTJnQyxHQUFlZCxVQUN6QnoxQixLQUFPcEssRUFBTzhjLElBQUs2akIsRUFBYyxrQkFBa0IsR0FDaEVDLEVBQWF0UyxNQUFRdHVCLEVBQU84YyxJQUFLNmpCLEVBQWMsbUJBQW1CLElBS3BFLE1BQU8sQ0FDTnYyQixJQUFLeTFCLEVBQU96MUIsSUFBTXcyQixFQUFheDJCLElBQU1wSyxFQUFPOGMsSUFBSzliLEVBQU0sYUFBYSxHQUNwRXN0QixLQUFNdVIsRUFBT3ZSLEtBQU9zUyxFQUFhdFMsS0FBT3R1QixFQUFPOGMsSUFBSzliLEVBQU0sY0FBYyxNQWMxRTIvQixhQUFjLFdBQ2IsT0FBT3A4QyxLQUFLOEIsS0FBSyxXQUdoQixJQUZBLElBQUlzNkMsRUFBZXA4QyxLQUFLbzhDLGFBRWhCQSxHQUEyRCxXQUEzQzNnQyxFQUFPOGMsSUFBSzZqQixFQUFjLGFBQ2pEQSxFQUFlQSxFQUFhQSxhQUc3QixPQUFPQSxHQUFnQjMyQixTQU0xQmhLLEVBQU9jLEtBQU0sQ0FBRXd1QixXQUFZLGNBQWVELFVBQVcsZ0JBQWlCLFNBQVU3WixFQUFRd0YsR0FDdkYsSUFBSTVRLEVBQU0sZ0JBQWtCNFEsRUFFNUJoYixFQUFPRyxHQUFJcVYsR0FBVyxTQUFVdm1CLEdBQy9CLE9BQU82cUIsRUFBUXYxQixNQUFNLFNBQVV5YyxFQUFNd1UsRUFBUXZtQixHQUc1QyxJQUFJdXhDLEVBT0osR0FOSzFoQyxFQUFVa0MsR0FDZHcvQixFQUFNeC9CLEVBQ3VCLElBQWxCQSxFQUFLbkMsV0FDaEIyaEMsRUFBTXgvQixFQUFLbUosa0JBR0MvWCxJQUFSbkQsRUFDSixPQUFPdXhDLEVBQU1BLEVBQUt4bEIsR0FBU2hhLEVBQU13VSxHQUc3QmdyQixFQUNKQSxFQUFJSyxTQUNGejJCLEVBQVlvMkIsRUFBSUUsWUFBVnp4QyxFQUNQbWIsRUFBTW5iLEVBQU11eEMsRUFBSUMsYUFJakJ6L0IsRUFBTXdVLEdBQVd2bUIsSUFFaEJ1bUIsRUFBUXZtQixFQUFLZ1MsVUFBVXphLFlBVTVCd1osRUFBT2MsS0FBTSxDQUFFLE1BQU8sU0FBVSxTQUFVakcsRUFBSW1nQixHQUM3Q2hiLEVBQU84dEIsU0FBVTlTLEdBQVM0TyxHQUFjbHJCLEVBQVF5c0IsZUFDL0MsU0FBVW5xQixFQUFNc29CLEdBQ2YsR0FBS0EsRUFJSixPQUhBQSxFQUFXRCxHQUFRcm9CLEVBQU1nYSxHQUdsQjhOLEdBQVUzOUIsS0FBTW0rQixHQUN0QnRwQixFQUFRZ0IsR0FBT3BSLFdBQVlvckIsR0FBUyxLQUNwQ3NPLFFBUUx0cEIsRUFBT2MsS0FBTSxDQUFFZ2dDLE9BQVEsU0FBVUMsTUFBTyxVQUFXLFNBQVUxcUMsRUFBTWxPLEdBQ2xFNlgsRUFBT2MsS0FBTSxDQUNaMHRCLFFBQVMsUUFBVW40QixFQUNuQmtFLFFBQVNwUyxFQUNULEdBQUksUUFBVWtPLElBQ1osU0FBVTJxQyxFQUFjQyxHQUcxQmpoQyxFQUFPRyxHQUFJOGdDLEdBQWEsU0FBVTFTLEVBQVF0cEMsR0FDekMsSUFBSTgwQixFQUFZOVksVUFBVXphLFNBQVl3NkMsR0FBa0Msa0JBQVh6UyxHQUM1RGxCLEVBQVEyVCxLQUE2QixJQUFYelMsSUFBNkIsSUFBVnRwQyxFQUFpQixTQUFXLFVBRTFFLE9BQU82MEIsRUFBUXYxQixNQUFNLFNBQVV5YyxFQUFNN1ksRUFBTWxELEdBQzFDLElBQUk0SyxFQUVKLE9BQUtpUCxFQUFVa0MsR0FHeUIsSUFBaENpZ0MsRUFBU3Y3QyxRQUFTLFNBQ3hCc2IsRUFBTSxRQUFVM0ssR0FDaEIySyxFQUFLeFIsU0FBU3dhLGdCQUFpQixTQUFXM1QsR0FJckIsSUFBbEIySyxFQUFLbkMsVUFDVGhQLEVBQU1tUixFQUFLZ0osZ0JBSUp0aEIsS0FBS29rQyxJQUNYOXJCLEVBQUs0YyxLQUFNLFNBQVd2bkIsR0FBUXhHLEVBQUssU0FBV3dHLEdBQzlDMkssRUFBSzRjLEtBQU0sU0FBV3ZuQixHQUFReEcsRUFBSyxTQUFXd0csR0FDOUN4RyxFQUFLLFNBQVd3RyxVQUlEakUsSUFBVm5OLEVBR04rYSxFQUFPOGMsSUFBSzliLEVBQU03WSxFQUFNa2xDLEdBR3hCcnRCLEVBQU80YyxNQUFPNWIsRUFBTTdZLEVBQU1sRCxFQUFPb29DLEtBQ2hDbGxDLEVBQU00eEIsRUFBWXdVLE9BQVNuOEIsRUFBVzJuQixVQU01Qy9aLEVBQU9jLEtBQU0sQ0FDWixZQUNBLFdBQ0EsZUFDQSxZQUNBLGNBQ0EsYUFDRSxTQUFVakcsRUFBSTFTLEdBQ2hCNlgsRUFBT0csR0FBSWhZLEdBQVMsU0FBVWdZLEdBQzdCLE9BQU81YixLQUFLaThCLEdBQUlyNEIsRUFBTWdZLE9BT3hCSCxFQUFPRyxHQUFHMEIsT0FBUSxDQUVqQnRPLEtBQU0sU0FBVWt0QixFQUFPempCLEVBQU1tRCxHQUM1QixPQUFPNWIsS0FBS2k4QixHQUFJQyxFQUFPLEtBQU16akIsRUFBTW1ELElBRXBDK2dDLE9BQVEsU0FBVXpnQixFQUFPdGdCLEdBQ3hCLE9BQU81YixLQUFLcThCLElBQUtILEVBQU8sS0FBTXRnQixJQUcvQmdoQyxTQUFVLFNBQVVsaEMsRUFBVXdnQixFQUFPempCLEVBQU1tRCxHQUMxQyxPQUFPNWIsS0FBS2k4QixHQUFJQyxFQUFPeGdCLEVBQVVqRCxFQUFNbUQsSUFFeENpaEMsV0FBWSxTQUFVbmhDLEVBQVV3Z0IsRUFBT3RnQixHQUd0QyxPQUE0QixJQUFyQmMsVUFBVXphLE9BQ2hCakMsS0FBS3E4QixJQUFLM2dCLEVBQVUsTUFDcEIxYixLQUFLcThCLElBQUtILEVBQU94Z0IsR0FBWSxLQUFNRSxJQUdyQ2toQyxNQUFPLFNBQVVDLEVBQVFDLEdBQ3hCLE9BQU9oOUMsS0FBSzJoQyxXQUFZb2IsR0FBU25iLFdBQVlvYixHQUFTRCxNQUl4RHRoQyxFQUFPYyxLQUNOLHdMQUU0RG5iLE1BQU8sTUFDbkUsU0FBVWtWLEVBQUl4RSxHQUdiMkosRUFBT0csR0FBSTlKLEdBQVMsU0FBVTJHLEVBQU1tRCxHQUNuQyxPQUFPYyxVQUFVemEsT0FBUyxFQUN6QmpDLEtBQUtpOEIsR0FBSW5xQixFQUFNLEtBQU0yRyxFQUFNbUQsR0FDM0I1YixLQUFLNjhCLFFBQVMvcUIsT0FVbEIsSUFBSWlQLEdBQVEscUNBTVp0RixFQUFPd2hDLE1BQVEsU0FBVXJoQyxFQUFJRCxHQUM1QixJQUFJNEssRUFBS3NELEVBQU1vekIsRUFVZixHQVJ3QixpQkFBWnRoQyxJQUNYNEssRUFBTTNLLEVBQUlELEdBQ1ZBLEVBQVVDLEVBQ1ZBLEVBQUsySyxHQUtBbk0sRUFBWXdCLEdBYWxCLE9BUkFpTyxFQUFPM29CLEVBQU13USxLQUFNZ0wsVUFBVyxJQUM5QnVnQyxFQUFRLFdBQ1AsT0FBT3JoQyxFQUFHL0IsTUFBTzhCLEdBQVczYixLQUFNNnBCLEVBQUszaEIsT0FBUWhILEVBQU13USxLQUFNZ0wsZUFJdERrQyxLQUFPaEQsRUFBR2dELEtBQU9oRCxFQUFHZ0QsTUFBUW5ELEVBQU9tRCxPQUVsQ3ErQixHQUdSeGhDLEVBQU95aEMsVUFBWSxTQUFVQyxHQUN2QkEsRUFDSjFoQyxFQUFPMFosWUFFUDFaLEVBQU82VCxPQUFPLElBR2hCN1QsRUFBTzdFLFFBQVVGLE1BQU1FLFFBQ3ZCNkUsRUFBTzJoQyxVQUFZN2tDLEtBQUt5ZSxNQUN4QnZiLEVBQU9rSCxTQUFXQSxFQUNsQmxILEVBQU9yQixXQUFhQSxFQUNwQnFCLEVBQU9sQixTQUFXQSxFQUNsQmtCLEVBQU93YSxVQUFZQSxFQUNuQnhhLEVBQU83WCxLQUFPMlgsRUFFZEUsRUFBT3NrQixJQUFNbmdCLEtBQUttZ0IsSUFFbEJ0a0IsRUFBTzRoQyxVQUFZLFNBQVVoakMsR0FLNUIsSUFBSXpXLEVBQU82WCxFQUFPN1gsS0FBTXlXLEdBQ3hCLE9BQWtCLFdBQVR6VyxHQUE4QixXQUFUQSxLQUs1QjA1QyxNQUFPampDLEVBQU1rc0IsV0FBWWxzQixLQUc1Qm9CLEVBQU84aEMsS0FBTyxTQUFVdGlDLEdBQ3ZCLE9BQWUsTUFBUkEsRUFDTixJQUNFQSxFQUFPLElBQUt0YSxRQUFTb2dCLEdBQU8sVUFxQjlCLEtBRnFCLEVBQUYsV0FDbkIsT0FBT3RGLEdBQ1AsUUFGaUIsT0FFakIsYUFNRixJQUdDK2hDLEdBQVV2K0MsRUFBT3djLE9BR2pCZ2lDLEdBQUt4K0MsRUFBT3krQyxFQXdCYixPQXRCQWppQyxFQUFPa2lDLFdBQWEsU0FBVWpnQyxHQVM3QixPQVJLemUsRUFBT3krQyxJQUFNamlDLElBQ2pCeGMsRUFBT3krQyxFQUFJRCxJQUdQLy9CLEdBQVF6ZSxFQUFPd2MsU0FBV0EsSUFDOUJ4YyxFQUFPd2MsT0FBUytoQyxJQUdWL2hDLFFBTWlCLElBQWJqQyxJQUNYdmEsRUFBT3djLE9BQVN4YyxFQUFPeStDLEVBQUlqaUMsR0FNckJBLE0sc0JDdG5WQyxTQUFXbWlDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSw4RkFBOEYxOEMsTUFDbEcsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsNERBQTRENThDLE1BQ2xFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDKzhDLGNBQWUsU0FDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBTyxRQUFRNWYsS0FBSzRmLElBRXhCNjNCLFNBQVUsU0FBVUMsRUFBT0MsRUFBU0MsR0FDaEMsT0FBSUYsRUFBUSxHQUNERSxFQUFVLEtBQU8sS0FFakJBLEVBQVUsS0FBTyxNQUdoQ0MsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsZUFDVEMsU0FBVSxlQUNWQyxRQUFTLGlCQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFlBQ041TSxFQUFHLG1CQUNINk0sR0FBSSxjQUNKMThCLEVBQUcsWUFDSDI4QixHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FDSkMsRUFBRyxXQUNIQyxHQUFJLFlBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUVSQyx1QkFBd0Isa0JBQ3hCQyxRQUFTLFNBQVUvN0MsR0FDZixPQUNJQSxHQUNZLElBQVhBLEdBQTJCLElBQVhBLEdBQWdCQSxHQUFVLEdBQUssTUFBUSxPQUdoRWc4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXJFeUJsbkMsQ0FBUSxFQUFRLE8sc0JDT2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJNkMsRUFBYSxTQUFVOW9DLEdBQ25CLE9BQWEsSUFBTkEsRUFDRCxFQUNNLElBQU5BLEVBQ0EsRUFDTSxJQUFOQSxFQUNBLEVBQ0FBLEVBQUksS0FBTyxHQUFLQSxFQUFJLEtBQU8sR0FDM0IsRUFDQUEsRUFBSSxLQUFPLEdBQ1gsRUFDQSxHQUVWK29DLEVBQVUsQ0FDTjdOLEVBQUcsQ0FDQyxlQUNBLGNBQ0EsQ0FBQyxVQUFXLFdBQ1osVUFDQSxXQUNBLFlBRUo3dkIsRUFBRyxDQUNDLGVBQ0EsY0FDQSxDQUFDLFVBQVcsV0FDWixXQUNBLFdBQ0EsWUFFSjQ4QixFQUFHLENBQ0MsY0FDQSxhQUNBLENBQUMsU0FBVSxVQUNYLFdBQ0EsVUFDQSxXQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsV0FDQSxVQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsVUFDQSxVQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFdBQ0EsV0FDQSxXQUdSUyxFQUFZLFNBQVVDLEdBQ2xCLE9BQU8sU0FBVXQ4QyxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUM1QyxJQUFJQyxFQUFJTixFQUFXbjhDLEdBQ2ZxRixFQUFNKzJDLEVBQVFFLEdBQUdILEVBQVduOEMsSUFJaEMsT0FIVSxJQUFOeThDLElBQ0FwM0MsRUFBTUEsRUFBSWszQyxFQUFnQixFQUFJLElBRTNCbDNDLEVBQUloSixRQUFRLE1BQU8yRCxLQUdsQ3c1QyxFQUFTLENBQ0wsUUFDQSxRQUNBLE9BQ0EsUUFDQSxNQUNBLE9BQ0EsU0FDQSxNQUNBLFNBQ0EsU0FDQSxTQUNBLFVBR0dGLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUUEsRUFDUkMsWUFBYUQsRUFDYkUsU0FBVSxzREFBc0Q1OEMsTUFBTSxLQUN0RTY4QyxjQUFlLHdDQUF3Qzc4QyxNQUFNLEtBQzdEODhDLFlBQWEsZ0JBQWdCOThDLE1BQU0sS0FDbkM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixjQUFlLE1BQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sTUFBUUEsR0FFbkI2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEdBQ0EsSUFFQSxLQUdmdTVDLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyx1QkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNONU0sRUFBRzhOLEVBQVUsS0FDYmpCLEdBQUlpQixFQUFVLEtBQ2QzOUIsRUFBRzI5QixFQUFVLEtBQ2JoQixHQUFJZ0IsRUFBVSxLQUNkZixFQUFHZSxFQUFVLEtBQ2JkLEdBQUljLEVBQVUsS0FDZGIsRUFBR2EsRUFBVSxLQUNiWixHQUFJWSxFQUFVLEtBQ2RYLEVBQUdXLEVBQVUsS0FDYlYsR0FBSVUsRUFBVSxLQUNkVCxFQUFHUyxFQUFVLEtBQ2JSLEdBQUlRLEVBQVUsTUFFbEJNLFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsS0FBTSxNQUVoQzIvQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXRKeUJsbkMsQ0FBUSxFQUFRLE8sc0JDRGxELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0VBQXdFMThDLE1BQzVFLEtBRUoyOEMsWUFBYSx3RUFBd0UzOEMsTUFDakYsS0FFSjQ4QyxTQUFVLHNEQUFzRDU4QyxNQUFNLEtBQ3RFNjhDLGNBQWUsd0NBQXdDNzhDLE1BQU0sS0FDN0Q4OEMsWUFBYSxnQkFBZ0I5OEMsTUFBTSxLQUNuQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxPQUNINk0sR0FBSSxXQUNKMThCLEVBQUcsUUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsT0FDSEMsR0FBSSxXQUNKQyxFQUFHLE1BQ0hDLEdBQUksVUFDSkMsRUFBRyxNQUNIQyxHQUFJLFVBQ0pDLEVBQUcsTUFDSEMsR0FBSSxZQUVSRyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxNQXBEeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQc0gsRUFBYSxTQUFVOW9DLEdBQ25CLE9BQWEsSUFBTkEsRUFDRCxFQUNNLElBQU5BLEVBQ0EsRUFDTSxJQUFOQSxFQUNBLEVBQ0FBLEVBQUksS0FBTyxHQUFLQSxFQUFJLEtBQU8sR0FDM0IsRUFDQUEsRUFBSSxLQUFPLEdBQ1gsRUFDQSxHQUVWK29DLEVBQVUsQ0FDTjdOLEVBQUcsQ0FDQyxlQUNBLGNBQ0EsQ0FBQyxVQUFXLFdBQ1osVUFDQSxXQUNBLFlBRUo3dkIsRUFBRyxDQUNDLGVBQ0EsY0FDQSxDQUFDLFVBQVcsV0FDWixXQUNBLFdBQ0EsWUFFSjQ4QixFQUFHLENBQ0MsY0FDQSxhQUNBLENBQUMsU0FBVSxVQUNYLFdBQ0EsVUFDQSxXQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsV0FDQSxVQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsVUFDQSxVQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFdBQ0EsV0FDQSxXQUdSUyxFQUFZLFNBQVVDLEdBQ2xCLE9BQU8sU0FBVXQ4QyxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUM1QyxJQUFJQyxFQUFJTixFQUFXbjhDLEdBQ2ZxRixFQUFNKzJDLEVBQVFFLEdBQUdILEVBQVduOEMsSUFJaEMsT0FIVSxJQUFOeThDLElBQ0FwM0MsRUFBTUEsRUFBSWszQyxFQUFnQixFQUFJLElBRTNCbDNDLEVBQUloSixRQUFRLE1BQU8yRCxLQUdsQ3c1QyxFQUFTLENBQ0wsUUFDQSxTQUNBLE9BQ0EsUUFDQSxPQUNBLFFBQ0EsUUFDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLFVBR0dGLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUUEsRUFDUkMsWUFBYUQsRUFDYkUsU0FBVSxzREFBc0Q1OEMsTUFBTSxLQUN0RTY4QyxjQUFlLHdDQUF3Qzc4QyxNQUFNLEtBQzdEODhDLFlBQWEsZ0JBQWdCOThDLE1BQU0sS0FDbkM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixjQUFlLE1BQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sTUFBUUEsR0FFbkI2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEdBQ0EsSUFFQSxLQUdmdTVDLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyx1QkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNONU0sRUFBRzhOLEVBQVUsS0FDYmpCLEdBQUlpQixFQUFVLEtBQ2QzOUIsRUFBRzI5QixFQUFVLEtBQ2JoQixHQUFJZ0IsRUFBVSxLQUNkZixFQUFHZSxFQUFVLEtBQ2JkLEdBQUljLEVBQVUsS0FDZGIsRUFBR2EsRUFBVSxLQUNiWixHQUFJWSxFQUFVLEtBQ2RYLEVBQUdXLEVBQVUsS0FDYlYsR0FBSVUsRUFBVSxLQUNkVCxFQUFHUyxFQUFVLEtBQ2JSLEdBQUlRLEVBQVUsTUFFbEJpQixTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFBT3YxQixRQUFRLEtBQU0sTUFFaENzZ0QsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQ0Z2MUIsUUFBUSxPQUFPLFNBQVV1aUIsR0FDdEIsT0FBT2crQixFQUFVaCtCLE1BRXBCdmlCLFFBQVEsS0FBTSxNQUV2QjIvQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxNQXpLeUJsbkMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0VBQXdFMThDLE1BQzVFLEtBRUoyOEMsWUFBYSx3RUFBd0UzOEMsTUFDakYsS0FFSjQ4QyxTQUFVLHNEQUFzRDU4QyxNQUFNLEtBQ3RFNjhDLGNBQWUsd0NBQXdDNzhDLE1BQU0sS0FDN0Q4OEMsWUFBYSxnQkFBZ0I5OEMsTUFBTSxLQUNuQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxPQUNINk0sR0FBSSxXQUNKMThCLEVBQUcsUUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsT0FDSEMsR0FBSSxXQUNKQyxFQUFHLE1BQ0hDLEdBQUksVUFDSkMsRUFBRyxNQUNIQyxHQUFJLFVBQ0pDLEVBQUcsTUFDSEMsR0FBSSxZQUVSRyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXBEeUJsbkMsQ0FBUSxFQUFRLE8sc0JDRWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQMEksRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHRmpFLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSw2RUFBNkUxOEMsTUFDakYsS0FFSjI4QyxZQUFhLDZFQUE2RTM4QyxNQUN0RixLQUVKNDhDLFNBQVUsc0RBQXNENThDLE1BQU0sS0FDdEU2OEMsY0FBZSx3Q0FBd0M3OEMsTUFBTSxLQUM3RDg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVlosY0FBZSxNQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFPLE1BQVFBLEdBRW5CNjNCLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxHQUNBLElBRUEsS0FHZnU1QyxTQUFVLENBQ05DLFFBQVMsd0JBQ1RDLFFBQVMsc0JBQ1RDLFNBQVUsdUJBQ1ZDLFFBQVMsc0JBQ1RDLFNBQVUsdUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsT0FDSDZNLEdBQUksV0FDSjE4QixFQUFHLFFBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLE9BQ0hDLEdBQUksV0FDSkMsRUFBRyxNQUNIQyxHQUFJLFVBQ0pDLEVBQUcsTUFDSEMsR0FBSSxVQUNKQyxFQUFHLE1BQ0hDLEdBQUksWUFFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUNGdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDaEMsT0FBTzIrQixFQUFVMytCLE1BRXBCdmlCLFFBQVEsS0FBTSxNQUV2QnNnRCxXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFDRnYxQixRQUFRLE9BQU8sU0FBVXVpQixHQUN0QixPQUFPZytCLEVBQVVoK0IsTUFFcEJ2aUIsUUFBUSxLQUFNLE1BRXZCMi9DLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBdEd5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSx5RUFBeUUxOEMsTUFDN0UsS0FFSjI4QyxZQUFhLHlFQUF5RTM4QyxNQUNsRixLQUVKNDhDLFNBQVUsc0RBQXNENThDLE1BQU0sS0FDdEU2OEMsY0FBZSx3Q0FBd0M3OEMsTUFBTSxLQUM3RDg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLHdCQUNUQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHVCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ041TSxFQUFHLE9BQ0g2TSxHQUFJLFdBQ0oxOEIsRUFBRyxRQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxPQUNIQyxHQUFJLFdBQ0pDLEVBQUcsTUFDSEMsR0FBSSxVQUNKQyxFQUFHLE1BQ0hDLEdBQUksVUFDSkMsRUFBRyxNQUNIQyxHQUFJLFlBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBcER5QmxuQyxDQUFRLEVBQVEsTyxxQkNLbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlzRCxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0h4SSxFQUFHLEtBRVAwSSxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUVUcEIsRUFBYSxTQUFVOW9DLEdBQ25CLE9BQWEsSUFBTkEsRUFDRCxFQUNNLElBQU5BLEVBQ0EsRUFDTSxJQUFOQSxFQUNBLEVBQ0FBLEVBQUksS0FBTyxHQUFLQSxFQUFJLEtBQU8sR0FDM0IsRUFDQUEsRUFBSSxLQUFPLEdBQ1gsRUFDQSxHQUVWK29DLEVBQVUsQ0FDTjdOLEVBQUcsQ0FDQyxlQUNBLGNBQ0EsQ0FBQyxVQUFXLFdBQ1osVUFDQSxXQUNBLFlBRUo3dkIsRUFBRyxDQUNDLGVBQ0EsY0FDQSxDQUFDLFVBQVcsV0FDWixXQUNBLFdBQ0EsWUFFSjQ4QixFQUFHLENBQ0MsY0FDQSxhQUNBLENBQUMsU0FBVSxVQUNYLFdBQ0EsVUFDQSxXQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsV0FDQSxVQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFVBQ0EsVUFDQSxVQUVKRSxFQUFHLENBQ0MsYUFDQSxXQUNBLENBQUMsUUFBUyxTQUNWLFdBQ0EsV0FDQSxXQUdSUyxFQUFZLFNBQVVDLEdBQ2xCLE9BQU8sU0FBVXQ4QyxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUM1QyxJQUFJQyxFQUFJTixFQUFXbjhDLEdBQ2ZxRixFQUFNKzJDLEVBQVFFLEdBQUdILEVBQVduOEMsSUFJaEMsT0FIVSxJQUFOeThDLElBQ0FwM0MsRUFBTUEsRUFBSWszQyxFQUFnQixFQUFJLElBRTNCbDNDLEVBQUloSixRQUFRLE1BQU8yRCxLQUdsQ3c1QyxFQUFTLENBQ0wsUUFDQSxTQUNBLE9BQ0EsUUFDQSxPQUNBLFFBQ0EsUUFDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLFVBR0NGLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUUEsRUFDUkMsWUFBYUQsRUFDYkUsU0FBVSxzREFBc0Q1OEMsTUFBTSxLQUN0RTY4QyxjQUFlLHdDQUF3Qzc4QyxNQUFNLEtBQzdEODhDLFlBQWEsZ0JBQWdCOThDLE1BQU0sS0FDbkM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixjQUFlLE1BQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sTUFBUUEsR0FFbkI2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEdBQ0EsSUFFQSxLQUdmdTVDLFNBQVUsQ0FDTkMsUUFBUyx3QkFDVEMsUUFBUyx1QkFDVEMsU0FBVSx1QkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNONU0sRUFBRzhOLEVBQVUsS0FDYmpCLEdBQUlpQixFQUFVLEtBQ2QzOUIsRUFBRzI5QixFQUFVLEtBQ2JoQixHQUFJZ0IsRUFBVSxLQUNkZixFQUFHZSxFQUFVLEtBQ2JkLEdBQUljLEVBQVUsS0FDZGIsRUFBR2EsRUFBVSxLQUNiWixHQUFJWSxFQUFVLEtBQ2RYLEVBQUdXLEVBQVUsS0FDYlYsR0FBSVUsRUFBVSxLQUNkVCxFQUFHUyxFQUFVLEtBQ2JSLEdBQUlRLEVBQVUsTUFFbEJpQixTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFDRnYxQixRQUFRLGlCQUFpQixTQUFVdWlCLEdBQ2hDLE9BQU8yK0IsRUFBVTMrQixNQUVwQnZpQixRQUFRLEtBQU0sTUFFdkJzZ0QsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQ0Z2MUIsUUFBUSxPQUFPLFNBQVV1aUIsR0FDdEIsT0FBT2crQixFQUFVaCtCLE1BRXBCdmlCLFFBQVEsS0FBTSxNQUV2QjIvQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxNQXpMeUJsbkMsQ0FBUSxFQUFRLE8sc0JDQ2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJa0UsRUFBVyxDQUNYWCxFQUFHLFFBQ0hJLEVBQUcsUUFDSEcsRUFBRyxRQUNISyxHQUFJLFFBQ0pDLEdBQUksUUFDSlosRUFBRyxPQUNISyxFQUFHLE9BQ0hRLEdBQUksT0FDSkMsR0FBSSxPQUNKYixFQUFHLFFBQ0hDLEVBQUcsUUFDSGEsSUFBSyxRQUNMWCxFQUFHLE9BQ0hHLEVBQUcsUUFDSFMsR0FBSSxRQUNKQyxHQUFJLFFBQ0pDLEdBQUksUUFDSkMsR0FBSSxTQUdDM0UsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLCtFQUErRTE4QyxNQUNuRixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSxxRUFBcUU1OEMsTUFDM0UsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsa0JBQ1RDLFNBQVUsK0JBQ1ZDLFFBQVMsYUFDVEMsU0FBVSwrQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxXQUNONU0sRUFBRyxrQkFDSDZNLEdBQUksWUFDSjE4QixFQUFHLGFBQ0gyOEIsR0FBSSxZQUNKQyxFQUFHLFdBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFNBQ0pDLEVBQUcsU0FDSEMsR0FBSSxRQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FFUmhDLGNBQWUsMEJBQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sbUJBQW1CNWYsS0FBSzRmLElBRW5DNjNCLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLE9BQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1AsU0FFQSxTQUdmMjZDLHVCQUF3Qix3Q0FDeEJDLFFBQVMsU0FBVS83QyxHQUNmLEdBQWUsSUFBWEEsRUFFQSxPQUFPQSxFQUFTLFFBRXBCLElBQUkrYixFQUFJL2IsRUFBUyxHQUdqQixPQUFPQSxHQUFVdzlDLEVBQVN6aEMsSUFBTXloQyxFQUZ2Qng5QyxFQUFTLElBQU8rYixJQUVzQnloQyxFQUR2Q3g5QyxHQUFVLElBQU0sSUFBTSxRQUdsQ2c4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQW5HeUJsbkMsQ0FBUSxFQUFRLE8sc0JDS2xELFNBQVdza0MsR0FBVSxhQVl6QixTQUFTNEUsRUFBdUJsK0MsRUFBUXU4QyxFQUFleDRDLEdBU25ELE1BQVksTUFBUkEsRUFDT3c0QyxFQUFnQixVQUFZLFVBQ3BCLE1BQVJ4NEMsRUFDQXc0QyxFQUFnQixVQUFZLFVBRTVCdjhDLEVBQVMsS0F0QkYyWCxHQXNCNkIzWCxFQXJCM0NtK0MsRUFRUyxDQUNUL0MsR0FBSW1CLEVBQWdCLHlCQUEyQix5QkFDL0NsQixHQUFJa0IsRUFBZ0IseUJBQTJCLHlCQUMvQ2hCLEdBQUlnQixFQUFnQix5QkFBMkIseUJBQy9DZCxHQUFJLGlCQUNKRSxHQUFJLHVCQUNKRSxHQUFJLGtCQU9nQzkzQyxHQXJCdkJqSCxNQUFNLEtBQ2hCNmEsRUFBTSxJQUFPLEdBQUtBLEVBQU0sS0FBUSxHQUNqQ3dtQyxFQUFNLEdBQ054bUMsRUFBTSxJQUFNLEdBQUtBLEVBQU0sSUFBTSxJQUFNQSxFQUFNLElBQU0sSUFBTUEsRUFBTSxLQUFPLElBQ2xFd21DLEVBQU0sR0FDTkEsRUFBTSxJQU5oQixJQUFzQnhtQyxFQUNkd21DLEVBeUJDN0UsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLENBQ0psOUMsT0FBUSx1R0FBdUdRLE1BQzNHLEtBRUpzaEQsV0FBWSxxR0FBcUd0aEQsTUFDN0csTUFHUjI4QyxZQUFhLDBEQUEwRDM4QyxNQUNuRSxLQUVKNDhDLFNBQVUsQ0FDTnA5QyxPQUFRLDBEQUEwRFEsTUFDOUQsS0FFSnNoRCxXQUFZLDBEQUEwRHRoRCxNQUNsRSxLQUVKdWhELFNBQVUsK0NBRWQxRSxjQUFlLHVCQUF1Qjc4QyxNQUFNLEtBQzVDODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxpQkFDSkMsSUFBSyx3QkFDTEMsS0FBTSwrQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZ0JBQ1RFLFFBQVMsZUFDVEQsU0FBVSxXQUNOLE1BQU8sbUJBRVhFLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLDBCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sMkJBR25CczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsa0JBQ0g3dkIsRUFBR3cvQixFQUNIN0MsR0FBSTZDLEVBQ0o1QyxFQUFHNEMsRUFDSDNDLEdBQUkyQyxFQUNKMUMsRUFBRyxRQUNIQyxHQUFJeUMsRUFDSnhDLEVBQUcsUUFDSEMsR0FBSXVDLEVBQ0p0QyxFQUFHLE1BQ0hDLEdBQUlxQyxHQUVSckUsY0FBZSx5QkFDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBTyxpQkFBaUI1ZixLQUFLNGYsSUFFakM2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEVBQ0EsT0FDQUEsRUFBTyxHQUNQLFNBQ0FBLEVBQU8sR0FDUCxNQUVBLFVBR2YyNkMsdUJBQXdCLG1CQUN4QkMsUUFBUyxTQUFVLzdDLEVBQVFzK0MsR0FDdkIsT0FBUUEsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNELE9BQVF0K0MsRUFBUyxJQUFPLEdBQUtBLEVBQVMsSUFBTyxHQUN6Q0EsRUFBUyxLQUFRLElBQ2pCQSxFQUFTLEtBQVEsR0FFZkEsRUFBUyxLQURUQSxFQUFTLEtBRW5CLElBQUssSUFDRCxPQUFPQSxFQUFTLE1BQ3BCLFFBQ0ksT0FBT0EsSUFHbkJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6SXlCbG5DLENBQVEsRUFBUSxPLHNCQ0NsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxvRkFBb0YxOEMsTUFDeEYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUseURBQXlENThDLE1BQy9ELEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksT0FDSkMsSUFBSyxVQUNMQyxFQUFHLFlBQ0hDLEdBQUksY0FDSkMsSUFBSyxtQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8seUJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sMEJBR25CczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsa0JBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxTQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxNQUNIQyxHQUFJLFVBQ0pDLEVBQUcsTUFDSEMsR0FBSSxVQUNKeG1DLEVBQUcsVUFDSHNwQyxHQUFJLGFBQ0o3QyxFQUFHLFFBQ0hDLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLGFBRVJDLHVCQUF3Qiw4QkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLElBQUl3K0MsRUFBWXgrQyxFQUFTLEdBQ3JCeStDLEVBQWN6K0MsRUFBUyxJQUMzQixPQUFlLElBQVhBLEVBQ09BLEVBQVMsTUFDTyxJQUFoQnkrQyxFQUNBeitDLEVBQVMsTUFDVHkrQyxFQUFjLElBQU1BLEVBQWMsR0FDbEN6K0MsRUFBUyxNQUNLLElBQWR3K0MsRUFDQXgrQyxFQUFTLE1BQ0ssSUFBZHcrQyxFQUNBeCtDLEVBQVMsTUFDSyxJQUFkdytDLEdBQWlDLElBQWRBLEVBQ25CeCtDLEVBQVMsTUFFVEEsRUFBUyxPQUd4Qmc4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXJGeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDhJQUE4STE4QyxNQUNsSixLQUVKMjhDLFlBQWEsaURBQWlEMzhDLE1BQU0sS0FDcEU0OEMsU0FBVSwrQ0FBK0M1OEMsTUFBTSxLQUMvRDY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSwyQkFDSkMsSUFBSyx3Q0FDTEMsS0FBTSw4Q0FFVkMsU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsaUJBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsaUJBQ1RDLFNBQVUseUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sYUFDTjVNLEVBQUcsa0JBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxlQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxhQUNIQyxHQUFJLFVBQ0pDLEVBQUcsYUFDSEMsR0FBSSxVQUNKQyxFQUFHLGFBQ0hDLEdBQUksVUFDSkMsRUFBRyxZQUNIQyxHQUFJLFVBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBakR5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlzRCxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0h4SSxFQUFHLEtBRVAwSSxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdGakUsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLDBGQUEwRjE4QyxNQUM5RixLQUVKMjhDLFlBQWEsbUVBQW1FMzhDLE1BQzVFLEtBRUo0OEMsU0FBVSw0REFBNEQ1OEMsTUFDbEUsS0FFSjY4QyxjQUFlLHVDQUF1Qzc4QyxNQUFNLEtBQzVEODhDLFlBQWEsa0NBQWtDOThDLE1BQU0sS0FDckRxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxhQUNKQyxJQUFLLGdCQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSywwQkFDTEMsS0FBTSxpQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsZ0JBQ1RDLFNBQVUsV0FDVkMsUUFBUyxhQUNUQyxTQUFVLGdCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFNBQ041TSxFQUFHLGVBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBRVJ5QixTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFBT3YxQixRQUFRLGlCQUFpQixTQUFVdWlCLEdBQzdDLE9BQU8yK0IsRUFBVTMrQixPQUd6Qis5QixXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFBT3YxQixRQUFRLE9BQU8sU0FBVXVpQixHQUNuQyxPQUFPZytCLEVBQVVoK0IsT0FJekJpN0IsY0FBZSx1Q0FDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sUUFBYjQ0QyxFQUNPNTRDLEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFFBQWI0NEMsR0FFYSxTQUFiQSxFQURBNTRDLEVBR2EsVUFBYjQ0QyxFQUNBNTRDLEdBQVEsRUFBSUEsRUFBT0EsRUFBTyxHQUNiLFVBQWI0NEMsR0FFYSxZQUFiQSxFQURBNTRDLEVBQU8sUUFDWCxHQUtYNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLE1BQ0FBLEVBQU8sRUFDUCxNQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLFFBQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1AsVUFFQSxPQUdmNjZDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBOUh5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlzRCxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0h4SSxFQUFHLEtBRVAwSSxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdKakUsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDBGQUEwRjE4QyxNQUM5RixLQUVKMjhDLFlBQWEsbUVBQW1FMzhDLE1BQzVFLEtBRUo0OEMsU0FBVSw0REFBNEQ1OEMsTUFDbEUsS0FFSjY4QyxjQUFlLHVDQUF1Qzc4QyxNQUFNLEtBQzVEODhDLFlBQWEsa0NBQWtDOThDLE1BQU0sS0FDckRxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxhQUNKQyxJQUFLLGdCQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSywwQkFDTEMsS0FBTSxpQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsZ0JBQ1RDLFNBQVUsV0FDVkMsUUFBUyxhQUNUQyxTQUFVLGdCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFNBQ041TSxFQUFHLGVBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBRVJ5QixTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFBT3YxQixRQUFRLGlCQUFpQixTQUFVdWlCLEdBQzdDLE9BQU8yK0IsRUFBVTMrQixPQUd6Qis5QixXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFBT3YxQixRQUFRLE9BQU8sU0FBVXVpQixHQUNuQyxPQUFPZytCLEVBQVVoK0IsT0FHekJpN0IsY0FBZSwyQkFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBR08sUUFBYjQ0QyxHQUFzQjU0QyxHQUFRLEdBQ2pCLFVBQWI0NEMsR0FBd0I1NEMsRUFBTyxHQUNuQixVQUFiNDRDLEVBRU81NEMsRUFBTyxHQUVQQSxHQUdmNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLE1BQ0FBLEVBQU8sR0FDUCxPQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQLFFBRUEsT0FHZjY2QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXBIeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQMEksRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHSmpFLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxxSkFBcUoxOEMsTUFDekosS0FFSjI4QyxZQUFhLGlFQUFpRTM4QyxNQUMxRSxLQUVKNmhELGlCQUFrQixnQkFDbEJDLGtCQUFrQixFQUNsQmxGLFNBQVUsZ0ZBQWdGNThDLE1BQ3RGLEtBRUo2OEMsY0FBZSxvREFBb0Q3OEMsTUFDL0QsS0FFSjg4QyxZQUFhLDZCQUE2Qjk4QyxNQUFNLEtBQ2hEcTlDLGVBQWdCLENBQ1pDLEdBQUksU0FDSkMsSUFBSyxZQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxzQkFDTEMsS0FBTSw2QkFFVkMsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSx3QkFDVkMsUUFBUyxZQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ041TSxFQUFHLFFBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxjQUNIQyxHQUFJLFlBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLFlBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFNBRVJ5QixTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFBT3YxQixRQUFRLGlCQUFpQixTQUFVdWlCLEdBQzdDLE9BQU8yK0IsRUFBVTMrQixPQUd6Qis5QixXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFBT3YxQixRQUFRLE9BQU8sU0FBVXVpQixHQUNuQyxPQUFPZytCLEVBQVVoK0IsT0FHekJpN0IsY0FBZSx3Q0FDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBR08sV0FBYjQ0QyxHQUF5QjU0QyxHQUFRLEdBQ3BCLFlBQWI0NEMsR0FBMEI1NEMsRUFBTyxHQUNyQixZQUFiNDRDLEVBRU81NEMsRUFBTyxHQUVQQSxHQUdmNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLFNBQ0FBLEVBQU8sR0FDUCxVQUNBQSxFQUFPLEdBQ1AsVUFDQUEsRUFBTyxHQUNQLFVBRUEsVUFHZjY2QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXhIeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUl6QixTQUFTdUYsRUFBeUI3K0MsRUFBUXU4QyxFQUFleDRDLEdBTXJELE9BQU8vRCxFQUFTLElBb0JwQixTQUFrQjJXLEVBQU0zVyxHQUNwQixPQUFlLElBQVhBLEVBS1IsU0FBc0IyVyxHQUNsQixJQUFJbW9DLEVBQWdCLENBQ2hCcGdDLEVBQUcsSUFDSDFDLEVBQUcsSUFDSHcvQixFQUFHLEtBRVAsWUFBc0NqeUMsSUFBbEN1MUMsRUFBY25vQyxFQUFLdFUsT0FBTyxJQUNuQnNVLEVBRUptb0MsRUFBY25vQyxFQUFLdFUsT0FBTyxJQUFNc1UsRUFBS29vQyxVQUFVLEdBYjNDQyxDQUFhcm9DLEdBRWpCQSxFQXhCZXNvQyxDQUxULENBQ1Q1RCxHQUFJLFdBQ0pNLEdBQUksTUFDSkYsR0FBSSxVQUU4QjEzQyxHQUFNL0QsR0FjaEQsU0FBU2svQyxFQUFXbC9DLEdBQ2hCLE9BQUlBLEVBQVMsRUFDRmsvQyxFQUFXbC9DLEVBQVMsSUFFeEJBLEVBb0JYLElBQUltL0MsRUFBYyxDQUNWLFFBQ0EsY0FDQSxRQUNBLFFBQ0EsUUFDQSxjQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsT0FDQSxTQUVKQyxFQUFjLDZJQXFCZEMsRUFBbUIsQ0FDZixPQUNBLE9BQ0EsZUFDQSxRQUNBLE9BQ0EsT0FDQSxRQUdDL0YsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLGdGQUFnRjE4QyxNQUNwRixLQUVKMjhDLFlBQWEsbURBQW1EMzhDLE1BQU0sS0FDdEU0OEMsU0FBVSw2Q0FBNkM1OEMsTUFBTSxLQUM3RDY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsd0JBQXdCOThDLE1BQU0sS0FDM0N3aUQsY0FBZUQsRUFDZkUsa0JBckNvQixDQUNoQixRQUNBLFFBQ0EsV0FDQSxpQkFDQSxTQUNBLFdBQ0EsWUErQkpDLG1CQTdCcUIsQ0FDakIsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0F1QkpILGlCQUFrQkEsRUFFbEJELFlBQWFBLEVBQ2JULGlCQUFrQlMsRUFDbEJLLGtCQTdDb0Isd0ZBOENwQkMsdUJBN0N5QiwyREE4Q3pCUCxZQUFhQSxFQUNiUSxnQkFBaUJSLEVBQ2pCUyxpQkFBa0JULEVBRWxCaEYsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxzQkFDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLHFCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZ0JBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFlBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsd0JBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxjQUNIMjhCLEdBQUl3RCxFQUNKdkQsRUFBRyxTQUNIQyxHQUFJLFNBQ0pDLEVBQUcsWUFDSEMsR0FBSW9ELEVBQ0puRCxFQUFHLFNBQ0hDLEdBQUlrRCxFQUNKakQsRUFBRyxXQUNIQyxHQXBJUixTQUFpQzc3QyxHQUM3QixPQUFRay9DLEVBQVdsL0MsSUFDZixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE9BQU9BLEVBQVMsU0FDcEIsUUFDSSxPQUFPQSxFQUFTLFlBNkh4Qjg3Qyx1QkFBd0Isa0JBQ3hCQyxRQUFTLFNBQVUvN0MsR0FFZixPQUFPQSxHQURpQixJQUFYQSxFQUFlLEtBQU8sUUFHdkNnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssR0FFVHJDLGNBQWUsWUFDZkMsS0FBTSxTQUFVandCLEdBQ1osTUFBaUIsU0FBVkEsR0FFWGt3QixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFPLzRDLEVBQU8sR0FBSyxPQUFTLFVBbktFNlQsQ0FBUSxFQUFRLE8scUJDSWxELFNBQVdza0MsR0FBVSxhQUl6QixTQUFTdUcsRUFBVTcvQyxFQUFRdThDLEVBQWV4NEMsR0FDdEMsSUFBSTNGLEVBQVM0QixFQUFTLElBQ3RCLE9BQVErRCxHQUNKLElBQUssS0FRRCxPQU5JM0YsR0FEVyxJQUFYNEIsRUFDVSxVQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLFVBRUEsV0FHbEIsSUFBSyxJQUNELE9BQU91OEMsRUFBZ0IsZUFBaUIsZUFDNUMsSUFBSyxLQVFELE9BTkluK0MsR0FEVyxJQUFYNEIsRUFDVSxTQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLFNBRUEsVUFHbEIsSUFBSyxJQUNELE9BQU91OEMsRUFBZ0IsWUFBYyxjQUN6QyxJQUFLLEtBUUQsT0FOSW4rQyxHQURXLElBQVg0QixFQUNVLE1BQ1EsSUFBWEEsR0FBMkIsSUFBWEEsR0FBMkIsSUFBWEEsRUFDN0IsT0FFQSxRQUdsQixJQUFLLEtBTUQsT0FKSTVCLEdBRFcsSUFBWDRCLEVBQ1UsTUFFQSxRQUdsQixJQUFLLEtBUUQsT0FOSTVCLEdBRFcsSUFBWDRCLEVBQ1UsU0FDUSxJQUFYQSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxFQUM3QixVQUVBLFdBR2xCLElBQUssS0FRRCxPQU5JNUIsR0FEVyxJQUFYNEIsRUFDVSxTQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLFNBRUEsV0FNakJzNUMsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHFGQUFxRjE4QyxNQUN6RixLQUVKMjhDLFlBQWEsOERBQThEMzhDLE1BQ3ZFLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSw0REFBNEQ1OEMsTUFDbEUsS0FFSjY4QyxjQUFlLHFDQUFxQzc4QyxNQUFNLEtBQzFEODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxPQUNKQyxJQUFLLFVBQ0xDLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxlQUNUQyxTQUFVLFdBQ04sT0FBUW4vQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0QsTUFBTyx3QkFDWCxLQUFLLEVBQ0QsTUFBTyx1QkFDWCxLQUFLLEVBQ0QsTUFBTyxzQkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyxvQkFHbkJvOEMsUUFBUyxlQUNUQyxTQUFVLFdBQ04sT0FBUXIvQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8sMkJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8seUJBR25CczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsY0FDSDZNLEdBQUl5RSxFQUNKbmhDLEVBQUdtaEMsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBR3VFLEVBQ0h0RSxHQUFJc0UsRUFDSnJFLEVBQUcsTUFDSEMsR0FBSW9FLEVBQ0puRSxFQUFHLFNBQ0hDLEdBQUlrRSxFQUNKakUsRUFBRyxTQUNIQyxHQUFJZ0UsR0FFUi9ELHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQWxKeUJsbkMsQ0FBUSxFQUFRLE8sc0JDRWxELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLENBQ0o0RSxXQUFZLG9GQUFvRnRoRCxNQUM1RixLQUVKUixPQUFRLHFIQUFxSFEsTUFDekgsS0FFSnVoRCxTQUFVLG1CQUVkNUUsWUFBYSw4REFBOEQzOEMsTUFDdkUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLDhEQUE4RDU4QyxNQUNwRSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLG1CQUNKdUYsR0FBSSxhQUNKdEYsSUFBSyxnQ0FDTHVGLElBQUssbUJBQ0x0RixLQUFNLHFDQUNOdUYsS0FBTSx3QkFFVnRGLFNBQVUsQ0FDTkMsUUFBUyxXQUNMLE1BQU8sWUFBK0IsSUFBakJqL0MsS0FBS3MrQyxRQUFnQixNQUFRLE1BQVEsUUFFOURZLFFBQVMsV0FDTCxNQUFPLFlBQStCLElBQWpCbC9DLEtBQUtzK0MsUUFBZ0IsTUFBUSxNQUFRLFFBRTlEYSxTQUFVLFdBQ04sTUFBTyxZQUErQixJQUFqQm4vQyxLQUFLcytDLFFBQWdCLE1BQVEsTUFBUSxRQUU5RGMsUUFBUyxXQUNMLE1BQU8sWUFBK0IsSUFBakJwL0MsS0FBS3MrQyxRQUFnQixNQUFRLE1BQVEsUUFFOURlLFNBQVUsV0FDTixNQUNJLHdCQUNrQixJQUFqQnIvQyxLQUFLcytDLFFBQWdCLE1BQVEsTUFDOUIsUUFHUmdCLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFlBQ1JDLEtBQU0sUUFDTjVNLEVBQUcsYUFDSDZNLEdBQUksWUFDSjE4QixFQUFHLFdBQ0gyOEIsR0FBSSxZQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0pDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FFUkMsdUJBQXdCLHFCQUN4QkMsUUFBUyxTQUFVLzdDLEVBQVFzK0MsR0FDdkIsSUFBSTJCLEVBQ1csSUFBWGpnRCxFQUNNLElBQ1csSUFBWEEsRUFDQSxJQUNXLElBQVhBLEVBQ0EsSUFDVyxJQUFYQSxFQUNBLElBQ0EsSUFJVixNQUhlLE1BQVhzK0MsR0FBNkIsTUFBWEEsSUFDbEIyQixFQUFTLEtBRU5qZ0QsRUFBU2lnRCxHQUVwQmpFLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBL0Z5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlFLEVBQVMsb0ZBQW9GMThDLE1BQ3pGLEtBRUoyOEMsRUFBYyxrREFBa0QzOEMsTUFBTSxLQUN0RXFpRCxFQUFjLENBQ1YsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLHlCQUNBLDRCQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FJSkMsRUFBYyx3SkFFbEIsU0FBU2MsRUFBTzdzQyxHQUNaLE9BQU9BLEVBQUksR0FBS0EsRUFBSSxHQUFvQixNQUFaQSxFQUFJLElBRXBDLFNBQVN3c0MsRUFBVTcvQyxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUMzQyxJQUFJcCtDLEVBQVM0QixFQUFTLElBQ3RCLE9BQVErRCxHQUNKLElBQUssSUFDRCxPQUFPdzRDLEdBQWlCQyxFQUFXLGFBQWUsZ0JBQ3RELElBQUssS0FDRCxPQUFJRCxHQUFpQkMsRUFDVnArQyxHQUFVOGhELEVBQU9sZ0QsR0FBVSxVQUFZLFVBRXZDNUIsRUFBUyxZQUV4QixJQUFLLElBQ0QsT0FBT20rQyxFQUFnQixTQUFXQyxFQUFXLFNBQVcsVUFDNUQsSUFBSyxLQUNELE9BQUlELEdBQWlCQyxFQUNWcCtDLEdBQVU4aEQsRUFBT2xnRCxHQUFVLFNBQVcsU0FFdEM1QixFQUFTLFdBRXhCLElBQUssSUFDRCxPQUFPbStDLEVBQWdCLFNBQVdDLEVBQVcsU0FBVyxVQUM1RCxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsU0FBVyxTQUV0QzVCLEVBQVMsV0FFeEIsSUFBSyxJQUNELE9BQU9tK0MsR0FBaUJDLEVBQVcsTUFBUSxPQUMvQyxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsTUFBUSxPQUVuQzVCLEVBQVMsTUFFeEIsSUFBSyxJQUNELE9BQU9tK0MsR0FBaUJDLEVBQVcsUUFBVSxVQUNqRCxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsU0FBVyxVQUV0QzVCLEVBQVMsU0FFeEIsSUFBSyxJQUNELE9BQU9tK0MsR0FBaUJDLEVBQVcsTUFBUSxRQUMvQyxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsT0FBUyxPQUVwQzVCLEVBQVMsUUFLdkJrN0MsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRQSxFQUNSQyxZQUFhQSxFQUNiMkYsWUFBYUEsRUFDYlQsaUJBQWtCUyxFQUdsQkssa0JBQW1CLHVLQUNuQkMsdUJBQXdCLHNEQUN4QlAsWUFBYUEsRUFDYlEsZ0JBQWlCUixFQUNqQlMsaUJBQWtCVCxFQUNsQnpGLFNBQVUsbURBQW1ENThDLE1BQU0sS0FDbkU2OEMsY0FBZSx1QkFBdUI3OEMsTUFBTSxLQUM1Qzg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksT0FDSkMsSUFBSyxVQUNMQyxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxvQkFDTEMsS0FBTSx5QkFDTmp2QixFQUFHLGNBRVBrdkIsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsZUFDVEMsU0FBVSxXQUNOLE9BQVFuL0MsS0FBS2dELE9BQ1QsS0FBSyxFQUNELE1BQU8sa0JBQ1gsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLGtCQUNYLEtBQUssRUFDRCxNQUFPLG1CQUNYLEtBQUssRUFDRCxNQUFPLG9CQUNYLEtBQUssRUFDRCxNQUFPLGlCQUNYLEtBQUssRUFDRCxNQUFPLG9CQUduQm84QyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUFPLHdCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyx1QkFDWCxLQUFLLEVBQ0QsTUFBTyx3QkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNELE1BQU8sMEJBR25CczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTjVNLEVBQ0E2TSxHQUFJeUUsRUFDSm5oQyxFQUFHbWhDLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEVBQ0pyRSxFQUFHcUUsRUFDSHBFLEdBQUlvRSxFQUNKbkUsRUFBR21FLEVBQ0hsRSxHQUFJa0UsRUFDSmpFLEVBQUdpRSxFQUNIaEUsR0FBSWdFLEdBRVIvRCx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6S3lCbG5DLENBQVEsRUFBUSxPLHFCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxnRUFBZ0UxOEMsTUFDcEUsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsb0VBQW9FNThDLE1BQzFFLEtBRUo2OEMsY0FBZSw2QkFBNkI3OEMsTUFBTSxLQUNsRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksc0NBQ0pDLElBQUssNkNBQ0xDLEtBQU0sb0RBRVZDLFNBQVUsQ0FDTkMsUUFBUyxzQkFDVEMsUUFBUyxzQkFDVEUsUUFBUyxzQkFDVEQsU0FBVSw0QkFDVkUsU0FBVSw0QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FBVStFLEdBTWQsT0FBT0EsR0FMSyxVQUFVaGhDLEtBQUtnaEMsR0FDckIsTUFDQSxRQUFRaGhDLEtBQUtnaEMsR0FDYixNQUNBLFFBR1Y5RSxLQUFNLFlBQ041TSxFQUFHLGlCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsWUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsWUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksU0FDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUVSQyx1QkFBd0IsY0FDeEJDLFFBQVMsU0FDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0E1RHlCbG5DLENBQVEsRUFBUSxPLHNCQ0lsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx5RkFBeUYxOEMsTUFDN0YsS0FFSjI4QyxZQUFhLHFEQUFxRDM4QyxNQUM5RCxLQUVKNDhDLFNBQVUsK0VBQStFNThDLE1BQ3JGLEtBRUo2OEMsY0FBZSwrQkFBK0I3OEMsTUFBTSxLQUNwRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUVwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGlCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSx3QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxXQUNONU0sRUFBRyxtQkFDSDZNLEdBQUksWUFDSjE4QixFQUFHLFFBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLE1BQ0hDLEdBQUksU0FDSkMsRUFBRyxVQUNIQyxHQUFJLGFBQ0pDLEVBQUcsTUFDSEMsR0FBSSxTQUNKQyxFQUFHLFdBQ0hDLEdBQUksY0FFUkMsdUJBQXdCLG1DQUV4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsSUFDSWlnRCxFQUFTLEdBaUNiLE9BbENRamdELEVBeUJBLEdBRUFpZ0QsRUFETSxLQTFCTmpnRCxHQTBCa0IsS0ExQmxCQSxHQTBCOEIsS0ExQjlCQSxHQTBCMEMsS0ExQjFDQSxHQTBCc0QsTUExQnREQSxFQTJCUyxNQUVBLE1BN0JUQSxFQStCTyxJQUNYaWdELEVBOUJTLENBQ0wsR0FDQSxLQUNBLEtBQ0EsTUFDQSxNQUNBLEtBQ0EsS0FDQSxLQUNBLE1BQ0EsTUFDQSxNQUNBLEtBQ0EsTUFDQSxLQUNBLEtBQ0EsTUFDQSxLQUNBLEtBQ0EsTUFDQSxLQUNBLE9BdkJBamdELElBa0NEQSxFQUFTaWdELEdBRXBCakUsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0E5RnlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxzRkFBc0YxOEMsTUFDMUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUscURBQXFENThDLE1BQU0sS0FDckU2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxxQkFDTEMsS0FBTSxzQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLGlCQUNUQyxRQUFTLG9CQUNUQyxTQUFVLG1CQUNWQyxRQUFTLGlCQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ041TSxFQUFHLGNBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksY0FDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxVQUNKQyxFQUFHLFdBQ0hDLEdBQUksYUFDSkMsRUFBRyxRQUNIQyxHQUFJLFNBRVJDLHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQW5EeUJsbkMsQ0FBUSxFQUFRLE8scUJDTWxELFNBQVdza0MsR0FBVSxhQUl6QixTQUFTNkcsRUFBb0JuZ0QsRUFBUXU4QyxFQUFleDRDLEVBQUt5NEMsR0FDckQsSUFBSWxnRCxFQUFTLENBQ1RvaUIsRUFBRyxDQUFDLGNBQWUsZ0JBQ25CNDhCLEVBQUcsQ0FBQyxjQUFlLGdCQUNuQkUsRUFBRyxDQUFDLFVBQVcsYUFDZkMsR0FBSSxDQUFDejdDLEVBQVMsUUFBU0EsRUFBUyxVQUNoQ2lWLEVBQUcsQ0FBQyxhQUFjLGVBQ2xCeW1DLEVBQUcsQ0FBQyxZQUFhLGVBQ2pCQyxHQUFJLENBQUMzN0MsRUFBUyxVQUFXQSxFQUFTLFlBQ2xDNDdDLEVBQUcsQ0FBQyxXQUFZLGNBQ2hCQyxHQUFJLENBQUM3N0MsRUFBUyxTQUFVQSxFQUFTLFlBRXJDLE9BQU91OEMsRUFBZ0JqZ0QsRUFBT3lILEdBQUssR0FBS3pILEVBQU95SCxHQUFLLEdBRzdDdTFDLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSxxRkFBcUYxOEMsTUFDekYsS0FFSjI4QyxZQUFhLDZEQUE2RDM4QyxNQUN0RSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsOERBQThENThDLE1BQ3BFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVkMsU0FBVSxDQUNOQyxRQUFTLHNCQUNUSyxTQUFVLElBQ1ZKLFFBQVMsdUJBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsd0JBQ1RDLFNBQVUsZ0NBRWRFLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ041TSxFQUFHLG9CQUNINk0sR0FBSSxjQUNKMThCLEVBQUd5aEMsRUFDSDlFLEdBQUksYUFDSkMsRUFBRzZFLEVBQ0g1RSxHQUFJLGFBQ0pDLEVBQUcyRSxFQUNIMUUsR0FBSTBFLEVBQ0psckMsRUFBR2tyQyxFQUNINUIsR0FBSSxZQUNKN0MsRUFBR3lFLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEdBRVJyRSx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0ExRXlCbG5DLENBQVEsRUFBUSxPLHFCQ0FsRCxTQUFXc2tDLEdBQVUsYUFJekIsU0FBUzZHLEVBQW9CbmdELEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQ3JELElBQUlsZ0QsRUFBUyxDQUNUb2lCLEVBQUcsQ0FBQyxjQUFlLGdCQUNuQjQ4QixFQUFHLENBQUMsY0FBZSxnQkFDbkJFLEVBQUcsQ0FBQyxVQUFXLGFBQ2ZDLEdBQUksQ0FBQ3o3QyxFQUFTLFFBQVNBLEVBQVMsVUFDaENpVixFQUFHLENBQUMsYUFBYyxlQUNsQnltQyxFQUFHLENBQUMsWUFBYSxlQUNqQkMsR0FBSSxDQUFDMzdDLEVBQVMsVUFBV0EsRUFBUyxZQUNsQzQ3QyxFQUFHLENBQUMsV0FBWSxjQUNoQkMsR0FBSSxDQUFDNzdDLEVBQVMsU0FBVUEsRUFBUyxZQUVyQyxPQUFPdThDLEVBQWdCamdELEVBQU95SCxHQUFLLEdBQUt6SCxFQUFPeUgsR0FBSyxHQUc3Q3UxQyxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEscUZBQXFGMThDLE1BQ3pGLEtBRUoyOEMsWUFBYSw2REFBNkQzOEMsTUFDdEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLDhEQUE4RDU4QyxNQUNwRSxLQUVKNjhDLGNBQWUsdUJBQXVCNzhDLE1BQU0sS0FDNUM4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxzQkFDVEssU0FBVSxJQUNWSixRQUFTLHVCQUNUQyxTQUFVLHFCQUNWQyxRQUFTLHdCQUNUQyxTQUFVLGdDQUVkRSxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxvQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHeWhDLEVBQ0g5RSxHQUFJLGFBQ0pDLEVBQUc2RSxFQUNINUUsR0FBSSxhQUNKQyxFQUFHMkUsRUFDSDFFLEdBQUkwRSxFQUNKbHJDLEVBQUdrckMsRUFDSDVCLEdBQUksWUFDSjdDLEVBQUd5RSxFQUNIeEUsR0FBSXdFLEVBQ0p2RSxFQUFHdUUsRUFDSHRFLEdBQUlzRSxHQUVSckUsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBMUV5QmxuQyxDQUFRLEVBQVEsTyxzQkNLbEQsU0FBV3NrQyxHQUFVLGFBSXpCLFNBQVM2RyxFQUFvQm5nRCxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUNyRCxJQUFJbGdELEVBQVMsQ0FDVG9pQixFQUFHLENBQUMsY0FBZSxnQkFDbkI0OEIsRUFBRyxDQUFDLGNBQWUsZ0JBQ25CRSxFQUFHLENBQUMsVUFBVyxhQUNmQyxHQUFJLENBQUN6N0MsRUFBUyxRQUFTQSxFQUFTLFVBQ2hDaVYsRUFBRyxDQUFDLGFBQWMsZUFDbEJ5bUMsRUFBRyxDQUFDLFlBQWEsZUFDakJDLEdBQUksQ0FBQzM3QyxFQUFTLFVBQVdBLEVBQVMsWUFDbEM0N0MsRUFBRyxDQUFDLFdBQVksY0FDaEJDLEdBQUksQ0FBQzc3QyxFQUFTLFNBQVVBLEVBQVMsWUFFckMsT0FBT3U4QyxFQUFnQmpnRCxFQUFPeUgsR0FBSyxHQUFLekgsRUFBT3lILEdBQUssR0FHL0N1MUMsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHFGQUFxRjE4QyxNQUN6RixLQUVKMjhDLFlBQWEsNkRBQTZEMzhDLE1BQ3RFLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSw4REFBOEQ1OEMsTUFDcEUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWQyxTQUFVLENBQ05DLFFBQVMsc0JBQ1RLLFNBQVUsSUFDVkosUUFBUyx1QkFDVEMsU0FBVSxxQkFDVkMsUUFBUyx3QkFDVEMsU0FBVSxnQ0FFZEUsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsb0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBR3loQyxFQUNIOUUsR0FBSSxhQUNKQyxFQUFHNkUsRUFDSDVFLEdBQUksYUFDSkMsRUFBRzJFLEVBQ0gxRSxHQUFJMEUsRUFDSmxyQyxFQUFHa3JDLEVBQ0g1QixHQUFJLFlBQ0o3QyxFQUFHeUUsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBR3VFLEVBQ0h0RSxHQUFJc0UsR0FFUnJFLHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQTFFeUJsbkMsQ0FBUSxFQUFRLE8sc0JDQ2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJRSxFQUFTLENBQ0wsV0FDQSxhQUNBLFNBQ0EsV0FDQSxLQUNBLE9BQ0EsU0FDQSxXQUNBLGVBQ0EsYUFDQSxhQUNBLGNBRUpFLEVBQVcsQ0FDUCxXQUNBLE9BQ0EsV0FDQSxPQUNBLGFBQ0EsU0FDQSxZQUdDSixFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVFBLEVBQ1JDLFlBQWFELEVBQ2JFLFNBQVVBLEVBQ1ZDLGNBQWVELEVBQ2ZFLFlBQWEscUNBQXFDOThDLE1BQU0sS0FDeERxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsV0FDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWWixjQUFlLFFBQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sT0FBU0EsR0FFcEI2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEdBQ0EsS0FFQSxNQUdmdTVDLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGNBQ1RDLFNBQVUsVUFDVkMsUUFBUyxjQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxjQUNSQyxLQUFNLFlBQ041TSxFQUFHLGlCQUNINk0sR0FBSSxjQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLFlBQ0pDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxFQUFHLFdBQ0hDLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxhQUVSeUIsU0FBVSxTQUFVMXJCLEdBQ2hCLE9BQU9BLEVBQU92MUIsUUFBUSxLQUFNLE1BRWhDc2dELFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsS0FBTSxNQUVoQzIvQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxNQXhGeUJsbkMsQ0FBUSxFQUFRLE8scUJDR2xELFNBQVdza0MsR0FBVSxhQVdoQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CNkcsbUJBQW9CLHFIQUFxSHRqRCxNQUNySSxLQUVKdWpELGlCQUFrQixxSEFBcUh2akQsTUFDbkksS0FFSjA4QyxPQUFRLFNBQVU4RyxFQUFnQmhrRCxHQUM5QixPQUFLZ2tELEVBR2lCLGlCQUFYaGtELEdBQ1AsSUFBSWdHLEtBQUtoRyxFQUFPeWlELFVBQVUsRUFBR3ppRCxFQUFPTyxRQUFRLFVBR3JDbkIsS0FBSzZrRCxrQkFBa0JELEVBQWUzaEQsU0FFdENqRCxLQUFLOGtELG9CQUFvQkYsRUFBZTNoRCxTQVJ4Q2pELEtBQUs4a0QscUJBV3BCL0csWUFBYSxvREFBb0QzOEMsTUFBTSxLQUN2RTQ4QyxTQUFVLHlEQUF5RDU4QyxNQUMvRCxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ2k5QyxTQUFVLFNBQVVDLEVBQU9DLEVBQVNDLEdBQ2hDLE9BQUlGLEVBQVEsR0FDREUsRUFBVSxLQUFPLEtBRWpCQSxFQUFVLEtBQU8sTUFHaENKLEtBQU0sU0FBVTUzQixHQUNaLE1BQXlDLE9BQWpDQSxFQUFRLElBQUk5aUIsY0FBYyxJQUV0Q3k2QyxjQUFlLGdCQUNmTSxlQUFnQixDQUNaQyxHQUFJLFNBQ0pDLElBQUssWUFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNEJBRVZnRyxXQUFZLENBQ1I5RixRQUFTLGlCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSxXQUNOLE9BQVFyL0MsS0FBS2dELE9BQ1QsS0FBSyxFQUNELE1BQU8sZ0NBQ1gsUUFDSSxNQUFPLG1DQUduQnM4QyxTQUFVLEtBRWROLFNBQVUsU0FBVTMyQyxFQUFLMjhDLEdBQ3JCLElBcEVZeCtCLEVBb0VSKzlCLEVBQVN2a0QsS0FBS2lsRCxZQUFZNThDLEdBQzFCaTJDLEVBQVEwRyxHQUFPQSxFQUFJMUcsUUFJdkIsT0F6RVk5M0IsRUFzRUcrOUIsR0FwRU0sb0JBQWJXLFVBQTRCMStCLGFBQWlCMCtCLFVBQ1gsc0JBQTFDdHRDLE9BQU9wWCxVQUFVYSxTQUFTcVEsS0FBSzhVLE1Bb0UzQis5QixFQUFTQSxFQUFPMXFDLE1BQU1tckMsSUFFbkJULEVBQU81akQsUUFBUSxLQUFNMjlDLEVBQVEsSUFBTyxFQUFJLE1BQVEsU0FFM0RpQixhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNONU0sRUFBRyxvQkFDSDZNLEdBQUksa0JBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxVQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxXQUNKQyxFQUFHLGFBQ0hDLEdBQUksV0FDSkMsRUFBRyxjQUNIQyxHQUFJLGFBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXRHeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0ZBQXdGMThDLE1BQzVGLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLDJEQUEyRDU4QyxNQUNqRSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFNBQ0pDLElBQUssWUFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSxlQUNWQyxRQUFTLG9CQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLGFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxZQUVSQyx1QkFBd0IsdUJBQ3hCQyxRQUFTLFNBQVUvN0MsR0FDZixJQUFJZ2MsRUFBSWhjLEVBQVMsR0FXakIsT0FBT0EsR0FUNkIsTUFBeEJBLEVBQVMsSUFBTyxJQUNkLEtBQ00sSUFBTmdjLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNBLE9BR2xCZ2dDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBbEV5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSx3RkFBd0YxOEMsTUFDNUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsMkRBQTJENThDLE1BQ2pFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksU0FDSkMsSUFBSyxZQUNMQyxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxzQkFDTEMsS0FBTSw2QkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0pDLEVBQUcsUUFDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLFlBRVJDLHVCQUF3Qix1QkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLElBQUlnYyxFQUFJaGMsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOZ2MsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ0EsU0E3RGdCaEgsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0ZBQXdGMThDLE1BQzVGLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLDJEQUEyRDU4QyxNQUNqRSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSxlQUNWQyxRQUFTLG9CQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLGFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxZQUVSQyx1QkFBd0IsdUJBQ3hCQyxRQUFTLFNBQVUvN0MsR0FDZixJQUFJZ2MsRUFBSWhjLEVBQVMsR0FXakIsT0FBT0EsR0FUNkIsTUFBeEJBLEVBQVMsSUFBTyxJQUNkLEtBQ00sSUFBTmdjLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNBLE9BR2xCZ2dDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBbEV5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSx3RkFBd0YxOEMsTUFDNUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsMkRBQTJENThDLE1BQ2pFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0pDLEVBQUcsUUFDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLFlBRVJDLHVCQUF3Qix1QkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLElBQUlnYyxFQUFJaGMsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOZ2MsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ0EsT0FHbEJnZ0MsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FsRXlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLHdGQUF3RjE4QyxNQUM1RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSwyREFBMkQ1OEMsTUFDakUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsZUFDVkMsUUFBUyxvQkFDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksYUFDSjE4QixFQUFHLFdBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FDSkMsRUFBRyxRQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxZQUNKQyxFQUFHLFNBQ0hDLEdBQUksWUFFUkMsdUJBQXdCLHVCQUN4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsSUFBSWdjLEVBQUloYyxFQUFTLEdBV2pCLE9BQU9BLEdBVDZCLE1BQXhCQSxFQUFTLElBQU8sSUFDZCxLQUNNLElBQU5nYyxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDQSxTQTdEZ0JoSCxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSx3RkFBd0YxOEMsTUFDNUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsMkRBQTJENThDLE1BQ2pFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksU0FDSkMsSUFBSyxZQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0pDLEVBQUcsUUFDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLFlBRVJDLHVCQUF3Qix1QkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLElBQUlnYyxFQUFJaGMsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOZ2MsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ0EsT0FHbEJnZ0MsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FsRXlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLHdGQUF3RjE4QyxNQUM1RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSwyREFBMkQ1OEMsTUFDakUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxTQUNKQyxJQUFLLFlBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWQyxTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsZUFDVkMsUUFBUyxvQkFDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksYUFDSjE4QixFQUFHLFdBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FDSkMsRUFBRyxRQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxZQUNKQyxFQUFHLFNBQ0hDLEdBQUksWUFFUkMsdUJBQXdCLHVCQUN4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsSUFBSWdjLEVBQUloYyxFQUFTLEdBV2pCLE9BQU9BLEdBVDZCLE1BQXhCQSxFQUFTLElBQU8sSUFDZCxLQUNNLElBQU5nYyxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDQSxPQUdsQmdnQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQWxFeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0ZBQXdGMThDLE1BQzVGLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLDJEQUEyRDU4QyxNQUNqRSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSxlQUNWQyxRQUFTLG9CQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFNBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLGFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxZQUVSQyx1QkFBd0IsdUJBQ3hCQyxRQUFTLFNBQVUvN0MsR0FDZixJQUFJZ2MsRUFBSWhjLEVBQVMsR0FXakIsT0FBT0EsR0FUNkIsTUFBeEJBLEVBQVMsSUFBTyxJQUNkLEtBQ00sSUFBTmdjLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNBLE9BR2xCZ2dDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBbEV5QmxuQyxDQUFRLEVBQVEsTyxzQkNNbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsNkZBQTZGMThDLE1BQ2pHLEtBRUoyOEMsWUFBYSxvREFBb0QzOEMsTUFBTSxLQUN2RTQ4QyxTQUFVLHFEQUFxRDU4QyxNQUFNLEtBQ3JFNjhDLGNBQWUsZ0NBQWdDNzhDLE1BQU0sS0FDckQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLDRCQUNKQyxJQUFLLGtDQUNMQyxLQUFNLDJDQUNOdUYsS0FBTSx1Q0FFVm5HLGNBQWUsY0FDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBeUMsTUFBbENBLEVBQU03ZixPQUFPLEdBQUdqRCxlQUUzQjI2QyxTQUFVLFNBQVVDLEVBQU9DLEVBQVNDLEdBQ2hDLE9BQUlGLEVBQVEsR0FDREUsRUFBVSxTQUFXLFNBRXJCQSxFQUFVLFNBQVcsVUFHcENRLFNBQVUsQ0FDTkMsUUFBUyxpQkFDVEMsUUFBUyxpQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxpQkFDVEMsU0FBVSwyQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxXQUNONU0sRUFBRyxrQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLGFBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsYUFDSEMsR0FBSSxhQUNKQyxFQUFHLFdBQ0hDLEdBQUksWUFFUkMsdUJBQXdCLFdBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBL0R5QmxuQyxDQUFRLEVBQVEsTyxzQkNEbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUl1SCxFQUFpQiw4REFBOEQvakQsTUFDM0UsS0FFSjI4QyxFQUFjLGtEQUFrRDM4QyxNQUFNLEtBQ3RFcWlELEVBQWMsQ0FDVixRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FFSkMsRUFBYyxtTEFFUDlGLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSwyRkFBMkYxOEMsTUFDL0YsS0FFSjI4QyxZQUFhLFNBQVUvNkIsRUFBR3BpQixHQUN0QixPQUFLb2lCLEVBRU0sUUFBUXBjLEtBQUtoRyxHQUNibTlDLEVBQVkvNkIsRUFBRS9mLFNBRWRraUQsRUFBZW5pQyxFQUFFL2YsU0FKakJraUQsR0FPZnpCLFlBQWFBLEVBQ2JULGlCQUFrQlMsRUFDbEJLLGtCQUFtQiwrRkFDbkJDLHVCQUF3QiwwRkFDeEJQLFlBQWFBLEVBQ2JRLGdCQUFpQlIsRUFDakJTLGlCQUFrQlQsRUFDbEJ6RixTQUFVLHVEQUF1RDU4QyxNQUFNLEtBQ3ZFNjhDLGNBQWUscUNBQXFDNzhDLE1BQU0sS0FDMUQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFNBQ0pDLElBQUssWUFDTEMsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLCtCQUNMQyxLQUFNLHNDQUVWQyxTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUFPLGFBQWdDLElBQWpCai9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUFNLFFBRTNEWSxRQUFTLFdBQ0wsTUFBTyxnQkFBbUMsSUFBakJsL0MsS0FBS3MrQyxRQUFnQixJQUFNLElBQU0sUUFFOURhLFNBQVUsV0FDTixNQUFPLGNBQWlDLElBQWpCbi9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUFNLFFBRTVEYyxRQUFTLFdBQ0wsTUFBTyxjQUFpQyxJQUFqQnAvQyxLQUFLcytDLFFBQWdCLElBQU0sSUFBTSxRQUU1RGUsU0FBVSxXQUNOLE1BQ0ksMEJBQ2tCLElBQWpCci9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUM1QixRQUdSZ0IsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0p4bUMsRUFBRyxhQUNIc3BDLEdBQUksYUFDSjdDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FFUkMsdUJBQXdCLFdBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBdkd5QmxuQyxDQUFRLEVBQVEsTyxzQkNJbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUl1SCxFQUFpQiw4REFBOEQvakQsTUFDM0UsS0FFSjI4QyxFQUFjLGtEQUFrRDM4QyxNQUFNLEtBQ3RFcWlELEVBQWMsQ0FDVixRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FFSkMsRUFBYyxtTEFFUDlGLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSwyRkFBMkYxOEMsTUFDL0YsS0FFSjI4QyxZQUFhLFNBQVUvNkIsRUFBR3BpQixHQUN0QixPQUFLb2lCLEVBRU0sUUFBUXBjLEtBQUtoRyxHQUNibTlDLEVBQVkvNkIsRUFBRS9mLFNBRWRraUQsRUFBZW5pQyxFQUFFL2YsU0FKakJraUQsR0FPZnpCLFlBQWFBLEVBQ2JULGlCQUFrQlMsRUFDbEJLLGtCQUFtQiwrRkFDbkJDLHVCQUF3QiwwRkFDeEJQLFlBQWFBLEVBQ2JRLGdCQUFpQlIsRUFDakJTLGlCQUFrQlQsRUFDbEJ6RixTQUFVLHVEQUF1RDU4QyxNQUFNLEtBQ3ZFNjhDLGNBQWUscUNBQXFDNzhDLE1BQU0sS0FDMUQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLHdCQUNKQyxJQUFLLDZCQUNMQyxLQUFNLG9DQUVWQyxTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUFPLGFBQWdDLElBQWpCai9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUFNLFFBRTNEWSxRQUFTLFdBQ0wsTUFBTyxnQkFBbUMsSUFBakJsL0MsS0FBS3MrQyxRQUFnQixJQUFNLElBQU0sUUFFOURhLFNBQVUsV0FDTixNQUFPLGNBQWlDLElBQWpCbi9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUFNLFFBRTVEYyxRQUFTLFdBQ0wsTUFBTyxjQUFpQyxJQUFqQnAvQyxLQUFLcytDLFFBQWdCLElBQU0sSUFBTSxRQUU1RGUsU0FBVSxXQUNOLE1BQ0ksMEJBQ2tCLElBQWpCci9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUM1QixRQUdSZ0IsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0p4bUMsRUFBRyxhQUNIc3BDLEdBQUksYUFDSjdDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FFUkMsdUJBQXdCLFdBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEdBRVQ0RSxZQUFhLG1CQXpHcUI5ckMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJdUgsRUFBaUIsOERBQThEL2pELE1BQzNFLEtBRUoyOEMsRUFBYyxrREFBa0QzOEMsTUFBTSxLQUN0RXFpRCxFQUFjLENBQ1YsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFNBRUpDLEVBQWMsbUxBRVA5RixFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsMkZBQTJGMThDLE1BQy9GLEtBRUoyOEMsWUFBYSxTQUFVLzZCLEVBQUdwaUIsR0FDdEIsT0FBS29pQixFQUVNLFFBQVFwYyxLQUFLaEcsR0FDYm05QyxFQUFZLzZCLEVBQUUvZixTQUVka2lELEVBQWVuaUMsRUFBRS9mLFNBSmpCa2lELEdBT2Z6QixZQUFhQSxFQUNiVCxpQkFBa0JTLEVBQ2xCSyxrQkFBbUIsK0ZBQ25CQyx1QkFBd0IsMEZBQ3hCUCxZQUFhQSxFQUNiUSxnQkFBaUJSLEVBQ2pCUyxpQkFBa0JULEVBQ2xCekYsU0FBVSx1REFBdUQ1OEMsTUFBTSxLQUN2RTY4QyxjQUFlLHFDQUFxQzc4QyxNQUFNLEtBQzFEODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxTQUNKQyxJQUFLLFlBQ0xDLEVBQUcsYUFDSEMsR0FBSSx3QkFDSkMsSUFBSywrQkFDTEMsS0FBTSxzQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLFdBQ0wsTUFBTyxhQUFnQyxJQUFqQmovQyxLQUFLcytDLFFBQWdCLElBQU0sSUFBTSxRQUUzRFksUUFBUyxXQUNMLE1BQU8sZ0JBQW1DLElBQWpCbC9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUFNLFFBRTlEYSxTQUFVLFdBQ04sTUFBTyxjQUFpQyxJQUFqQm4vQyxLQUFLcytDLFFBQWdCLElBQU0sSUFBTSxRQUU1RGMsUUFBUyxXQUNMLE1BQU8sY0FBaUMsSUFBakJwL0MsS0FBS3MrQyxRQUFnQixJQUFNLElBQU0sUUFFNURlLFNBQVUsV0FDTixNQUNJLDBCQUNrQixJQUFqQnIvQyxLQUFLcytDLFFBQWdCLElBQU0sSUFDNUIsUUFHUmdCLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxVQUNKeG1DLEVBQUcsYUFDSHNwQyxHQUFJLGFBQ0o3QyxFQUFHLFNBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXZHeUJsbkMsQ0FBUSxFQUFRLE8sc0JDRWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJdUgsRUFBaUIsOERBQThEL2pELE1BQzNFLEtBRUoyOEMsRUFBYyxrREFBa0QzOEMsTUFBTSxLQUN0RXFpRCxFQUFjLENBQ1YsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFNBRUpDLEVBQWMsbUxBRVQ5RixFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsMkZBQTJGMThDLE1BQy9GLEtBRUoyOEMsWUFBYSxTQUFVLzZCLEVBQUdwaUIsR0FDdEIsT0FBS29pQixFQUVNLFFBQVFwYyxLQUFLaEcsR0FDYm05QyxFQUFZLzZCLEVBQUUvZixTQUVka2lELEVBQWVuaUMsRUFBRS9mLFNBSmpCa2lELEdBT2Z6QixZQUFhQSxFQUNiVCxpQkFBa0JTLEVBQ2xCSyxrQkFBbUIsK0ZBQ25CQyx1QkFBd0IsMEZBQ3hCUCxZQUFhQSxFQUNiUSxnQkFBaUJSLEVBQ2pCUyxpQkFBa0JULEVBQ2xCekYsU0FBVSx1REFBdUQ1OEMsTUFBTSxLQUN2RTY4QyxjQUFlLHFDQUFxQzc4QyxNQUFNLEtBQzFEODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxPQUNKQyxJQUFLLFVBQ0xDLEVBQUcsYUFDSEMsR0FBSSx3QkFDSkMsSUFBSyw2QkFDTEMsS0FBTSxvQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLFdBQ0wsTUFBTyxhQUFnQyxJQUFqQmovQyxLQUFLcytDLFFBQWdCLElBQU0sSUFBTSxRQUUzRFksUUFBUyxXQUNMLE1BQU8sZ0JBQW1DLElBQWpCbC9DLEtBQUtzK0MsUUFBZ0IsSUFBTSxJQUFNLFFBRTlEYSxTQUFVLFdBQ04sTUFBTyxjQUFpQyxJQUFqQm4vQyxLQUFLcytDLFFBQWdCLElBQU0sSUFBTSxRQUU1RGMsUUFBUyxXQUNMLE1BQU8sY0FBaUMsSUFBakJwL0MsS0FBS3MrQyxRQUFnQixJQUFNLElBQU0sUUFFNURlLFNBQVUsV0FDTixNQUNJLDBCQUNrQixJQUFqQnIvQyxLQUFLcytDLFFBQWdCLElBQU0sSUFDNUIsUUFHUmdCLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxVQUNKeG1DLEVBQUcsYUFDSHNwQyxHQUFJLGFBQ0o3QyxFQUFHLFNBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxHQUVUNEUsWUFBYSxtQkF6R3FCOXJDLENBQVEsRUFBUSxPLHNCQ0lsRCxTQUFXc2tDLEdBQVUsYUFJekIsU0FBUzZHLEVBQW9CbmdELEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQ3JELElBQUlsZ0QsRUFBUyxDQUNUaXlDLEVBQUcsQ0FBQyxlQUFnQixjQUFlLGlCQUNuQzZNLEdBQUksQ0FBQ3A3QyxFQUFTLFVBQVdBLEVBQVMsWUFDbEMwZSxFQUFHLENBQUMsYUFBYyxhQUNsQjI4QixHQUFJLENBQUNyN0MsRUFBUyxVQUFXQSxFQUFTLFlBQ2xDczdDLEVBQUcsQ0FBQyxZQUFhLFlBQWEsWUFDOUJDLEdBQUksQ0FBQ3Y3QyxFQUFTLFNBQVVBLEVBQVMsVUFDakN3N0MsRUFBRyxDQUFDLFlBQWEsWUFDakJFLEVBQUcsQ0FBQyxVQUFXLFdBQVksV0FDM0JDLEdBQUksQ0FBQzM3QyxFQUFTLE9BQVFBLEVBQVMsU0FDL0I0N0MsRUFBRyxDQUFDLFlBQWEsUUFBUyxhQUMxQkMsR0FBSSxDQUFDNzdDLEVBQVMsU0FBVUEsRUFBUyxZQUVyQyxPQUFJdThDLEVBQ09qZ0QsRUFBT3lILEdBQUssR0FBS3pILEVBQU95SCxHQUFLLEdBQUt6SCxFQUFPeUgsR0FBSyxHQUVsRHk0QyxFQUFXbGdELEVBQU95SCxHQUFLLEdBQUt6SCxFQUFPeUgsR0FBSyxHQUcxQ3UxQyxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsNkZBQTZGMThDLE1BQ2pHLEtBRUoyOEMsWUFBYSw2REFBNkQzOEMsTUFDdEUsS0FFSjQ4QyxTQUFVLGlFQUFpRTU4QyxNQUN2RSxLQUVKNjhDLGNBQWUsZ0JBQWdCNzhDLE1BQU0sS0FDckM4OEMsWUFBYSxnQkFBZ0I5OEMsTUFBTSxLQUNuQ3E5QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLGNBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsYUFDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsWUFDUkMsS0FBTSxZQUNONU0sRUFBRzRSLEVBQ0gvRSxHQUFJK0UsRUFDSnpoQyxFQUFHeWhDLEVBQ0g5RSxHQUFJOEUsRUFDSjdFLEVBQUc2RSxFQUNINUUsR0FBSTRFLEVBQ0ozRSxFQUFHMkUsRUFDSDFFLEdBQUksV0FDSkMsRUFBR3lFLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEdBRVJyRSx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0EzRXlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSwrRkFBK0YxOEMsTUFDbkcsS0FFSjI4QyxZQUFhLDhEQUE4RDM4QyxNQUN2RSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsc0VBQXNFNThDLE1BQzVFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksMEJBQ0pDLElBQUssZ0NBQ0xDLEtBQU0sc0NBQ05qdkIsRUFBRyxXQUNIczBCLEdBQUksb0JBQ0pDLElBQUssMEJBQ0xDLEtBQU0sZ0NBRVZ0RixTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsZ0JBQ1ZDLFFBQVMsa0JBQ1RDLFNBQVUsMEJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsaUJBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLGVBQ0hDLEdBQUksY0FDSkMsRUFBRyxXQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQTdEeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQMEksRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHSmpFLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx3RUFBd0UxOEMsTUFDNUUsS0FFSjI4QyxZQUFhLHdFQUF3RTM4QyxNQUNqRixLQUVKNDhDLFNBQVUscURBQW9FNThDLE1BQzFFLEtBRUo2OEMsY0FBZSxxREFBb0U3OEMsTUFDL0UsS0FFSjg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosY0FBZSx3QkFDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBTyxhQUFhNWYsS0FBSzRmLElBRTdCNjNCLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxHQUNBLGFBRUEsY0FHZnU1QyxTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsaUJBQ1RDLFNBQVUsaUJBQ1ZDLFFBQVMsa0JBQ1RDLFNBQVUsdUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsWUFDSDZNLEdBQUksV0FDSjE4QixFQUFHLFdBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxTQUNIQyxHQUFJLFNBQ0pDLEVBQUcsU0FDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksVUFFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUNGdjFCLFFBQVEsVUFBVSxTQUFVdWlCLEdBQ3pCLE9BQU8yK0IsRUFBVTMrQixNQUVwQnZpQixRQUFRLEtBQU0sTUFFdkJzZ0QsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQ0Z2MUIsUUFBUSxPQUFPLFNBQVV1aUIsR0FDdEIsT0FBT2crQixFQUFVaCtCLE1BRXBCdmlCLFFBQVEsS0FBTSxNQUV2QnkvQyx1QkFBd0IsV0FDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssTUE1R3lCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSXlILEVBQWMsd0VBQXdFamtELE1BQ2xGLEtBRUpra0QsRUFBZ0IsQ0FDWixRQUNBLFFBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBRCxFQUFZLEdBQ1pBLEVBQVksR0FDWkEsRUFBWSxJQUVwQixTQUFTbEIsRUFBVTcvQyxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUMzQyxJQUFJcCtDLEVBQVMsR0FDYixPQUFRMkYsR0FDSixJQUFLLElBQ0QsT0FBT3k0QyxFQUFXLG9CQUFzQixrQkFDNUMsSUFBSyxLQUNEcCtDLEVBQVNvK0MsRUFBVyxXQUFhLFdBQ2pDLE1BQ0osSUFBSyxJQUNELE9BQU9BLEVBQVcsV0FBYSxXQUNuQyxJQUFLLEtBQ0RwK0MsRUFBU28rQyxFQUFXLFdBQWEsWUFDakMsTUFDSixJQUFLLElBQ0QsT0FBT0EsRUFBVyxTQUFXLFFBQ2pDLElBQUssS0FDRHArQyxFQUFTbytDLEVBQVcsU0FBVyxTQUMvQixNQUNKLElBQUssSUFDRCxPQUFPQSxFQUFXLFNBQVcsUUFDakMsSUFBSyxLQUNEcCtDLEVBQVNvK0MsRUFBVyxTQUFXLFNBQy9CLE1BQ0osSUFBSyxJQUNELE9BQU9BLEVBQVcsWUFBYyxXQUNwQyxJQUFLLEtBQ0RwK0MsRUFBU28rQyxFQUFXLFlBQWMsWUFDbEMsTUFDSixJQUFLLElBQ0QsT0FBT0EsRUFBVyxTQUFXLFFBQ2pDLElBQUssS0FDRHArQyxFQUFTbytDLEVBQVcsU0FBVyxTQUl2QyxPQUVKLFNBQXNCeDhDLEVBQVF3OEMsR0FDMUIsT0FBT3g4QyxFQUFTLEdBQ1Z3OEMsRUFDSXdFLEVBQWNoaEQsR0FDZCtnRCxFQUFZL2dELEdBQ2hCQSxFQVJHaWhELENBQWFqaEQsRUFBUXc4QyxHQUFZLElBQU1wK0MsRUFXM0NrN0MsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDJHQUEyRzE4QyxNQUMvRyxLQUVKMjhDLFlBQWEsdUVBQXVFMzhDLE1BQ2hGLEtBRUo0OEMsU0FBVSxxRUFBcUU1OEMsTUFDM0UsS0FFSjY4QyxjQUFlLHVCQUF1Qjc4QyxNQUFNLEtBQzVDODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxtQkFDSkMsSUFBSyxnQ0FDTEMsS0FBTSxzQ0FDTmp2QixFQUFHLFdBQ0hzMEIsR0FBSSxjQUNKQyxJQUFLLDJCQUNMQyxLQUFNLGlDQUVWdEYsU0FBVSxDQUNOQyxRQUFTLG9CQUNUQyxRQUFTLHNCQUNUQyxTQUFVLGdCQUNWQyxRQUFTLG1CQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLFlBQ041TSxFQUFHc1IsRUFDSHpFLEdBQUl5RSxFQUNKbmhDLEVBQUdtaEMsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBR3VFLEVBQ0h0RSxHQUFJc0UsRUFDSnJFLEVBQUdxRSxFQUNIcEUsR0FBSW9FLEVBQ0puRSxFQUFHbUUsRUFDSGxFLEdBQUlrRSxFQUNKakUsRUFBR2lFLEVBQ0hoRSxHQUFJZ0UsR0FFUi9ELHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXZIeUJsbkMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUlmQSxFQUFPQyxhQUFhLE1BQU8sQ0FDakNDLE9BQVEsMEZBQTBGMThDLE1BQzlGLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLHlEQUF5RDU4QyxNQUMvRCxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx3QkFBd0I5OEMsTUFBTSxLQUMzQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxZQUNIQyxHQUFJLGVBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxvQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSwwQkFDVkMsUUFBUyxlQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxnQkFDUkMsS0FBTSxtQkFDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxlQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxhQUNIQyxHQUFJLFVBQ0pDLEVBQUcsYUFDSEMsR0FBSSxVQUNKQyxFQUFHLGNBQ0hDLEdBQUksV0FDSkMsRUFBRyxhQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixVQUN4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsT0FBT0EsR0FFWGc4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXZEeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHFGQUFxRjE4QyxNQUN6RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSw0RUFBNEU1OEMsTUFDbEYsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDRCQUVWQyxTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsb0JBQ1RDLFNBQVUsZ0JBQ1ZDLFFBQVMsa0JBQ1RDLFNBQVUsd0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sWUFDTjVNLEVBQUcsWUFDSDZNLEdBQUksY0FDSjE4QixFQUFHLGVBQ0gyOEIsR0FBSSxjQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxZQUNIQyxHQUFJLFdBQ0pDLEVBQUcsY0FDSEMsR0FBSSxhQUNKQyxFQUFHLFVBQ0hDLEdBQUksU0FFUkMsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBckR5QmxuQyxDQUFRLEVBQVEsTyxzQkNFbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSx1RkFBdUYxOEMsTUFDM0YsS0FFSjI4QyxZQUFhLGlFQUFpRTM4QyxNQUMxRSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsc0RBQXNENThDLE1BQU0sS0FDdEU2OEMsY0FBZSxxQ0FBcUM3OEMsTUFBTSxLQUMxRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLHFCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGNBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxZQUNONU0sRUFBRyxvQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLGFBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFlBQ0hDLEdBQUksWUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUNKQyxFQUFHLFFBQ0hDLEdBQUksVUFFUkMsdUJBQXdCLGdCQUN4QkMsUUFBUyxTQUFVLzdDLEVBQVFzK0MsR0FDdkIsT0FBUUEsR0FFSixRQUNBLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDTCxJQUFLLElBQ0QsT0FBT3QrQyxHQUFxQixJQUFYQSxFQUFlLEtBQU8sS0FHM0MsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxHQUFxQixJQUFYQSxFQUFlLEtBQU8sU0FsRWpCZ1YsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsdUZBQXVGMThDLE1BQzNGLEtBRUoyOEMsWUFBYSxpRUFBaUUzOEMsTUFDMUUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHNEQUFzRDU4QyxNQUFNLEtBQ3RFNjhDLGNBQWUscUNBQXFDNzhDLE1BQU0sS0FDMUQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxxQkFDVEMsUUFBUyxnQkFDVEMsU0FBVSxjQUNWQyxRQUFTLGNBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sWUFDTjVNLEVBQUcsb0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxZQUNIQyxHQUFJLFlBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxRQUNIQyxHQUFJLFVBRVJDLHVCQUF3QixnQkFDeEJDLFFBQVMsU0FBVS83QyxFQUFRcytDLEdBQ3ZCLE9BQVFBLEdBRUosUUFDQSxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0wsSUFBSyxJQUNELE9BQU90K0MsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLEtBRzNDLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsR0FBcUIsSUFBWEEsRUFBZSxLQUFPLE9BR25EZzhDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBdkV5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBRUk4RixFQUFjLHlLQUNkRCxFQUFjLENBQ1YsU0FDQSxTQUNBLFNBQ0EsUUFDQSxRQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsUUFDQSxRQUNBLFNBR0M3RixFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsdUZBQXVGMThDLE1BQzNGLEtBRUoyOEMsWUFBYSxpRUFBaUUzOEMsTUFDMUUsS0FFSnNpRCxZQUFhQSxFQUNiVCxpQkFBa0JTLEVBQ2xCSyxrQkEzQm9CLDJGQTRCcEJDLHVCQTNCeUIsb0ZBNEJ6QlAsWUFBYUEsRUFDYlEsZ0JBQWlCUixFQUNqQlMsaUJBQWtCVCxFQUNsQnpGLFNBQVUsc0RBQXNENThDLE1BQU0sS0FDdEU2OEMsY0FBZSxxQ0FBcUM3OEMsTUFBTSxLQUMxRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLHFCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGNBQ1ZDLFFBQVMsY0FDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxZQUNONU0sRUFBRyxvQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLGFBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFlBQ0hDLEdBQUksWUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0p4bUMsRUFBRyxjQUNIc3BDLEdBQUksY0FDSjdDLEVBQUcsVUFDSEMsR0FBSSxVQUNKQyxFQUFHLFFBQ0hDLEdBQUksVUFFUkMsdUJBQXdCLGVBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUlKLElBQUssSUFDRCxPQUFPdCtDLEdBQXFCLElBQVhBLEVBQWUsS0FBTyxJQUczQyxRQUNBLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNMLElBQUssSUFDRCxPQUFPQSxHQUFxQixJQUFYQSxFQUFlLEtBQU8sS0FHM0MsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxHQUFxQixJQUFYQSxFQUFlLEtBQU8sT0FHbkRnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F0R3lCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSTRILEVBQXNCLDZEQUE2RHBrRCxNQUMvRSxLQUVKcWtELEVBQXlCLGtEQUFrRHJrRCxNQUN2RSxLQUdDdzhDLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxpR0FBaUcxOEMsTUFDckcsS0FFSjI4QyxZQUFhLFNBQVUvNkIsRUFBR3BpQixHQUN0QixPQUFLb2lCLEVBRU0sUUFBUXBjLEtBQUtoRyxHQUNiNmtELEVBQXVCemlDLEVBQUUvZixTQUV6QnVpRCxFQUFvQnhpQyxFQUFFL2YsU0FKdEJ1aUQsR0FPZnRDLGtCQUFrQixFQUNsQmxGLFNBQVUsd0RBQXdENThDLE1BQzlELEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsaUJBQ1RDLFNBQVUsd0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsbUJBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLGFBQ0hDLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLGNBRVJDLHVCQUF3QixrQkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQ0lBLEdBQ1ksSUFBWEEsR0FBMkIsSUFBWEEsR0FBZ0JBLEdBQVUsR0FBSyxNQUFRLE9BR2hFZzhDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBM0V5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBNENoQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQXpDUyxDQUNMLFNBQ0EsVUFDQSxRQUNBLFVBQ0EsWUFDQSxZQUNBLE9BQ0EsU0FDQSxlQUNBLG1CQUNBLFVBQ0EsV0E4QkpDLFlBNUJjLENBQ1YsTUFDQSxRQUNBLE9BQ0EsTUFDQSxPQUNBLFFBQ0EsT0FDQSxNQUNBLE9BQ0EsT0FDQSxPQUNBLFFBaUJKbUYsa0JBQWtCLEVBQ2xCbEYsU0FoQlcsQ0FDUCxlQUNBLFdBQ0EsV0FDQSxjQUNBLFlBQ0EsWUFDQSxlQVVKQyxjQVJnQixDQUFDLE9BQVEsT0FBUSxRQUFTLE9BQVEsT0FBUSxRQUFTLFFBU25FQyxZQVJjLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLElBQUssTUFTbERPLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSwyQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsT0FDUkMsS0FBTSxZQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksYUFDSjE4QixFQUFHLFVBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLGlCQUNIQyxHQUFJLG9CQUNKQyxFQUFHLEtBQ0hDLEdBQUksUUFDSkMsRUFBRyxLQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxhQUVSQyx1QkFBd0IsbUJBQ3hCQyxRQUFTLFNBQVUvN0MsR0FFZixPQUFPQSxHQURpQixJQUFYQSxFQUFlLElBQU1BLEVBQVMsSUFBTyxFQUFJLEtBQU8sT0FHakVnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0E3RnlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUE0Q2hCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BekNTLENBQ0wsZ0JBQ0EsYUFDQSxVQUNBLGFBQ0EsYUFDQSxlQUNBLGNBQ0EsY0FDQSxlQUNBLGFBQ0EsZUFDQSxnQkE4QkpDLFlBNUJjLENBQ1YsT0FDQSxPQUNBLE9BQ0EsT0FDQSxPQUNBLE9BQ0EsT0FDQSxNQUNBLE9BQ0EsT0FDQSxPQUNBLFFBaUJKbUYsa0JBQWtCLEVBQ2xCbEYsU0FoQlcsQ0FDUCxjQUNBLFVBQ0EsVUFDQSxZQUNBLFlBQ0EsV0FDQSxlQVVKQyxjQVJnQixDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BUzNEQyxZQVJjLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFTbkRPLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLG9CQUNUQyxRQUFTLHNCQUNUQyxTQUFVLGdCQUNWQyxRQUFTLGlCQUNUQyxTQUFVLDZCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLGdCQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksWUFDSjE4QixFQUFHLFVBQ0gyOEIsR0FBSSxnQkFDSkMsRUFBRyxPQUNIQyxHQUFJLGFBQ0pDLEVBQUcsUUFDSEMsR0FBSSxXQUNKQyxFQUFHLE9BQ0hDLEdBQUksWUFDSkMsRUFBRyxXQUNIQyxHQUFJLGVBRVJDLHVCQUF3QixtQkFDeEJDLFFBQVMsU0FBVS83QyxHQUVmLE9BQU9BLEdBRGlCLElBQVhBLEVBQWUsSUFBTUEsRUFBUyxJQUFPLEVBQUksS0FBTyxPQUdqRWc4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQTdGeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHlGQUF5RjE4QyxNQUM3RixLQUVKMjhDLFlBQWEsOERBQThEMzhDLE1BQ3ZFLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSxtREFBbUQ1OEMsTUFBTSxLQUNuRTY4QyxjQUFlLHFDQUFxQzc4QyxNQUFNLEtBQzFEODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxPQUNKQyxJQUFLLFVBQ0xDLEVBQUcsYUFDSEMsR0FBSSx3QkFDSkMsSUFBSyw2QkFDTEMsS0FBTSxvQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLFdBQ0wsTUFBTyxVQUE2QixJQUFqQmovQyxLQUFLcytDLFFBQWdCLEtBQU8sS0FBTyxRQUUxRFksUUFBUyxXQUNMLE1BQU8sVUFBNkIsSUFBakJsL0MsS0FBS3MrQyxRQUFnQixLQUFPLEtBQU8sUUFFMURhLFNBQVUsV0FDTixNQUFPLFVBQTZCLElBQWpCbi9DLEtBQUtzK0MsUUFBZ0IsS0FBTyxLQUFPLFFBRTFEYyxRQUFTLFdBQ0wsTUFBTyxVQUE2QixJQUFqQnAvQyxLQUFLcytDLFFBQWdCLElBQU0sS0FBTyxRQUV6RGUsU0FBVSxXQUNOLE1BQ0kscUJBQXdDLElBQWpCci9DLEtBQUtzK0MsUUFBZ0IsS0FBTyxLQUFPLFFBR2xFZ0IsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FBVTcxQyxHQUNkLE9BQTBCLElBQXRCQSxFQUFJeEksUUFBUSxNQUNMLElBQU13SSxFQUVWLE1BQVFBLEdBRW5CODFDLEtBQU0sU0FDTjVNLEVBQUcsZUFDSDZNLEdBQUksY0FDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFlBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0pDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FFUkMsdUJBQXdCLFdBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBeEV5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLFNBQVM2RyxFQUFvQm5nRCxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUNyRCxJQUFJbGdELEVBQVMsQ0FDVGl5QyxFQUFHLENBQUMsa0JBQW1CLGNBQ3ZCNk0sR0FBSSxDQUFDcDdDLEVBQVMsYUFBY0EsRUFBUyxVQUNyQzBlLEVBQUcsQ0FBQyxhQUFjLFlBQ2xCMjhCLEdBQUksQ0FBQ3I3QyxFQUFTLFlBQWFBLEVBQVMsV0FDcENzN0MsRUFBRyxDQUFDLFdBQVksU0FDaEJDLEdBQUksQ0FBQ3Y3QyxFQUFTLFVBQVdBLEVBQVMsU0FDbEN3N0MsRUFBRyxDQUFDLFlBQWEsVUFDakJDLEdBQUksQ0FBQ3o3QyxFQUFTLFdBQVlBLEVBQVMsUUFDbkMwN0MsRUFBRyxDQUFDLGdCQUFpQixhQUNyQkMsR0FBSSxDQUFDMzdDLEVBQVMsY0FBZUEsRUFBUyxXQUN0QzQ3QyxFQUFHLENBQUMsYUFBYyxXQUNsQkMsR0FBSSxDQUFDNzdDLEVBQVMsWUFBYUEsRUFBUyxZQUV4QyxPQUFPdzhDLEVBQVdsZ0QsRUFBT3lILEdBQUssR0FBS3pILEVBQU95SCxHQUFLLEdBR3JDdTFDLEVBQU9DLGFBQWEsV0FBWSxDQUMxQ0MsT0FBUSxDQUNKNEUsV0FBWSx3RkFBd0Z0aEQsTUFDaEcsS0FFSlIsT0FBUSxtSkFBbUpRLE1BQ3ZKLEtBRUp1aEQsU0FBVSxtQkFFZDVFLFlBQWEsNEVBQTRFMzhDLE1BQ3JGLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSxxREFBcUQ1OEMsTUFBTSxLQUNyRTY4QyxjQUFlLDRDQUE0Qzc4QyxNQUFNLEtBQ2pFODhDLFlBQWEsd0JBQXdCOThDLE1BQU0sS0FDM0M0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxrQkFDSkMsSUFBSyxxQkFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssOEJBQ0xDLEtBQU0sdUNBQ051RixLQUFNLG9DQUVWdEYsU0FBVSxDQUNOQyxRQUFTLFdBQ1RDLFFBQVMsZUFDVEMsU0FBVSxxQkFDVkMsUUFBUyxXQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxLQUNSQyxLQUFNLFVBQ041TSxFQUFHNFIsRUFDSC9FLEdBQUkrRSxFQUNKemhDLEVBQUd5aEMsRUFDSDlFLEdBQUk4RSxFQUNKN0UsRUFBRzZFLEVBQ0g1RSxHQUFJNEUsRUFDSjNFLEVBQUcyRSxFQUNIMUUsR0FBSTBFLEVBQ0p6RSxFQUFHeUUsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBR3VFLEVBQ0h0RSxHQUFJc0UsR0FFUnJFLHVCQUF3QixlQUN4QkMsUUFBUyxTQUFVLzdDLEVBQVFzK0MsR0FDdkIsT0FBUUEsR0FFSixJQUFLLElBQ0QsT0FBT3QrQyxFQUFTLE1BQ3BCLFFBQ0EsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsSUFHbkJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssR0FFVHJDLGNBQWUsNEJBQ2Y2RSxhQUFjLFNBQVV2OUMsRUFBTTQ0QyxHQUkxQixPQUhhLEtBQVQ1NEMsSUFDQUEsRUFBTyxHQUVNLFNBQWI0NEMsRUFDTzU0QyxFQUFPLEVBQUlBLEVBQU9BLEVBQU8sR0FDWixXQUFiNDRDLEVBQ0E1NEMsRUFDYSxZQUFiNDRDLEVBQ0E1NEMsRUFBTyxHQUFLQSxFQUFPQSxFQUFPLEdBQ2IsVUFBYjQ0QyxFQUNBNTRDLEVBQU8sUUFEWCxHQUlYNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLE9BQ0FBLEVBQU8sR0FDUCxTQUNBQSxFQUFPLEdBQ1AsVUFDQUEsRUFBTyxHQUNQLFFBRUEsVUF6SG1CNlQsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUl6QixTQUFTNkcsRUFBb0JuZ0QsRUFBUXU4QyxFQUFleDRDLEVBQUt5NEMsR0FDckQsSUFBSWxnRCxFQUFTLENBQ1RpeUMsRUFBRyxDQUFDLHFCQUFzQixpQkFDMUI2TSxHQUFJLENBQUNwN0MsRUFBUyxjQUFlQSxFQUFTLFdBQ3RDMGUsRUFBRyxDQUFDLGFBQWMsWUFDbEIyOEIsR0FBSSxDQUFDcjdDLEVBQVMsWUFBYUEsRUFBUyxXQUNwQ3M3QyxFQUFHLENBQUMsWUFBYSxVQUNqQkMsR0FBSSxDQUFDdjdDLEVBQVMsV0FBWUEsRUFBUyxVQUNuQ3c3QyxFQUFHLENBQUMsWUFBYSxVQUNqQkMsR0FBSSxDQUFDejdDLEVBQVMsV0FBWUEsRUFBUyxRQUNuQzA3QyxFQUFHLENBQUMsZUFBZ0IsYUFDcEJDLEdBQUksQ0FBQzM3QyxFQUFTLGNBQWVBLEVBQVMsV0FDdEM0N0MsRUFBRyxDQUFDLGFBQWMsWUFDbEJDLEdBQUksQ0FBQzc3QyxFQUFTLFlBQWFBLEVBQVMsWUFFeEMsT0FBT3c4QyxFQUFXbGdELEVBQU95SCxHQUFLLEdBQUt6SCxFQUFPeUgsR0FBSyxHQUdyQ3UxQyxFQUFPQyxhQUFhLFdBQVksQ0FDMUNDLE9BQVEsQ0FDSjRFLFdBQVksNEVBQTRFdGhELE1BQ3BGLEtBRUpSLE9BQVEsd0lBQXdJUSxNQUM1SSxLQUVKdWhELFNBQVUsbUJBRWQ1RSxZQUFhLDREQUE0RDM4QyxNQUNyRSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsdURBQXVENThDLE1BQU0sS0FDdkU2OEMsY0FBZSxxQ0FBcUM3OEMsTUFBTSxLQUMxRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksaUJBQ0pDLElBQUssb0JBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDZCQUNMQyxLQUFNLHNDQUNOdUYsS0FBTSxtQ0FFVnRGLFNBQVUsQ0FDTkMsUUFBUyxXQUNUQyxRQUFTLGNBQ1RDLFNBQVUsc0JBQ1ZDLFFBQVMsV0FDVEMsU0FBVSxzQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsS0FDUkMsS0FBTSxVQUNONU0sRUFBRzRSLEVBQ0gvRSxHQUFJK0UsRUFDSnpoQyxFQUFHeWhDLEVBQ0g5RSxHQUFJOEUsRUFDSjdFLEVBQUc2RSxFQUNINUUsR0FBSTRFLEVBQ0ozRSxFQUFHMkUsRUFDSDFFLEdBQUkwRSxFQUNKekUsRUFBR3lFLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEdBRVJyRSx1QkFBd0IsY0FDeEJDLFFBQVMsU0FBVS83QyxFQUFRcytDLEdBQ3ZCLE9BQVFBLEdBRUosSUFBSyxJQUNELE9BQU90K0MsRUFBUyxLQUNwQixRQUNBLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLElBR25CZzhDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEdBRVRyQyxjQUFlLCtCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxTQUFiNDRDLEVBQ081NEMsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osYUFBYjQ0QyxFQUNBNTRDLEVBQ2EsYUFBYjQ0QyxFQUNBNTRDLEVBQU8sR0FBS0EsRUFBT0EsRUFBTyxHQUNiLFVBQWI0NEMsRUFDQTU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxPQUNBQSxFQUFPLEdBQ1AsV0FDQUEsRUFBTyxHQUNQLFdBQ0FBLEVBQU8sR0FDUCxRQUVBLFVBekhtQjZULENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSXNELEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSHhJLEVBQUcsS0FFUDBJLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pqRSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEseUZBQXlGMThDLE1BQzdGLEtBRUoyOEMsWUFBYSx5RUFBeUUzOEMsTUFDbEYsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHdEQUF3RDU4QyxNQUM5RCxLQUVKNjhDLGNBQWUsbUNBQW1DNzhDLE1BQU0sS0FDeEQ4OEMsWUFBYSxxQkFBcUI5OEMsTUFBTSxLQUN4Q3E5QyxlQUFnQixDQUNaQyxHQUFJLGdCQUNKQyxJQUFLLG1CQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw2QkFDTEMsS0FBTSxvQ0FFVkMsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsWUFDVEMsU0FBVSxXQUNWQyxRQUFTLGNBQ1RDLFNBQVUsbUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsV0FDSDZNLEdBQUksV0FDSjE4QixFQUFHLFdBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUFPdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDN0MsT0FBTzIrQixFQUFVMytCLE9BR3pCKzlCLFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsT0FBTyxTQUFVdWlCLEdBQ25DLE9BQU9nK0IsRUFBVWgrQixPQUt6Qmk3QixjQUFlLHFCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxRQUFiNDRDLEVBQ081NEMsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osU0FBYjQ0QyxFQUNBNTRDLEVBQ2EsU0FBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFNBQWI0NEMsRUFDQTU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxNQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxPQUVBLE9BR2Y2NkMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F2SHlCbG5DLENBQVEsRUFBUSxPLHNCQ0tsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSwwRUFBMEUxOEMsTUFDOUUsS0FFSjI4QyxZQUFhLDREQUE0RDM4QyxNQUNyRSxLQUVKNDhDLFNBQVUsdUNBQXVDNThDLE1BQU0sS0FDdkQ2OEMsY0FBZSx1QkFBdUI3OEMsTUFBTSxLQUM1Qzg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksaUJBQ0pDLElBQUssdUJBQ0xDLEtBQU0sNkJBQ05qdkIsRUFBRyxXQUNIczBCLEdBQUksYUFDSkMsSUFBSyxtQkFDTEMsS0FBTSx5QkFFVnRGLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGFBQ1RDLFNBQVUsaUJBQ1ZDLFFBQVMsZUFDVEMsU0FBVSwrQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxVQUNONU0sRUFBRyxhQUNINk0sR0FBSSxXQUNKMThCLEVBQUcsTUFDSDI4QixHQUFJLFVBQ0pDLEVBQUcsTUFDSEMsR0FBSSxTQUFVdjdDLEdBQ1YsT0FBZSxJQUFYQSxFQUNPLFNBRUpBLEVBQVMsU0FFcEJ3N0MsRUFBRyxNQUNIQyxHQUFJLFNBQVV6N0MsR0FDVixPQUFlLElBQVhBLEVBQ08sU0FFSkEsRUFBUyxTQUVwQjA3QyxFQUFHLE9BQ0hDLEdBQUksU0FBVTM3QyxHQUNWLE9BQWUsSUFBWEEsRUFDTyxVQUVKQSxFQUFTLFdBRXBCNDdDLEVBQUcsTUFDSEMsR0FBSSxTQUFVNzdDLEdBQ1YsT0FBZSxJQUFYQSxFQUNPLFNBQ0FBLEVBQVMsSUFBTyxHQUFnQixLQUFYQSxFQUNyQkEsRUFBUyxPQUViQSxFQUFTLFVBR3hCNjVDLGNBQWUsZ0VBQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sOEJBQThCNWYsS0FBSzRmLElBRTlDNjNCLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLGFBQ0FBLEVBQU8sR0FDUCxRQUNBQSxFQUFPLEdBQ1ArNEMsRUFBVSxTQUFXLGVBQ3JCLzRDLEVBQU8sR0FDUCs0QyxFQUFVLFFBQVUsZUFFcEIsVUF6Rm1CbGxDLENBQVEsRUFBUSxPLG9CQ0NsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSXNELEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSHhJLEVBQUcsS0FFUDBJLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBRVQ0QixFQUFjLENBQ1YsT0FDQSxXQUNBLFVBQ0EsVUFDQSxPQUNBLFFBQ0EsUUFDQSxPQUNBLGFBQ0EsVUFDQSxXQUNBLGNBaUJDN0YsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLENBQ0psOUMsT0FBUSw4RUFBOEVRLE1BQ2xGLEtBRUpzaEQsV0FBWSwwRUFBMEV0aEQsTUFDbEYsTUFHUjI4QyxZQUFhLDZEQUE2RDM4QyxNQUN0RSxLQUVKNDhDLFNBQVUsdURBQXVENThDLE1BQU0sS0FDdkU2OEMsY0FBZSxrQ0FBa0M3OEMsTUFBTSxLQUN2RDg4QyxZQUFhLHFCQUFxQjk4QyxNQUFNLEtBQ3hDcTlDLGVBQWdCLENBQ1pDLEdBQUksYUFDSkMsSUFBSyxnQkFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssMEJBQ0xDLEtBQU0saUNBR1YwRSxZQUFhQSxFQUNiUSxnQkFBaUJSLEVBQ2pCUyxpQkF6Q21CLENBQ2YsT0FDQSxRQUNBLFVBQ0EsVUFDQSxPQUNBLFFBQ0EsUUFDQSxPQUNBLFFBQ0EsVUFDQSxPQUNBLFNBK0JKUixZQUFhLCtLQUViVCxpQkFBa0IsK0tBRWxCYyxrQkFBbUIsdUlBRW5CQyx1QkFBd0Isc0ZBRXhCaEYsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsU0FBVSxXQUNWQyxRQUFTLFVBQ1RDLFNBQVUsbUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsY0FDSDZNLEdBQUksV0FDSjE4QixFQUFHLFVBQ0gyOEIsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxTQUNIQyxHQUFJLFNBQ0pDLEVBQUcsV0FDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUFPdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDN0MsT0FBTzIrQixFQUFVMytCLE9BR3pCKzlCLFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsT0FBTyxTQUFVdWlCLEdBQ25DLE9BQU9nK0IsRUFBVWgrQixPQUt6Qmk3QixjQUFlLHFCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxRQUFiNDRDLEVBQ081NEMsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osU0FBYjQ0QyxFQUNBNTRDLEVBQ2EsVUFBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFFBQWI0NEMsRUFDQTU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxNQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLFFBQ0FBLEVBQU8sR0FDUCxNQUVBLE9BR2Y2NkMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FsS3lCbG5DLENBQVEsRUFBUSxPLHFCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsU0FBU3VHLEVBQVU3L0MsRUFBUXU4QyxFQUFleDRDLEdBQ3RDLElBQUkzRixFQUFTNEIsRUFBUyxJQUN0QixPQUFRK0QsR0FDSixJQUFLLEtBUUQsT0FOSTNGLEdBRFcsSUFBWDRCLEVBQ1UsVUFDUSxJQUFYQSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxFQUM3QixVQUVBLFdBR2xCLElBQUssSUFDRCxPQUFPdThDLEVBQWdCLGVBQWlCLGVBQzVDLElBQUssS0FRRCxPQU5JbitDLEdBRFcsSUFBWDRCLEVBQ1UsU0FDUSxJQUFYQSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxFQUM3QixTQUVBLFVBR2xCLElBQUssSUFDRCxPQUFPdThDLEVBQWdCLFlBQWMsY0FDekMsSUFBSyxLQVFELE9BTkluK0MsR0FEVyxJQUFYNEIsRUFDVSxNQUNRLElBQVhBLEdBQTJCLElBQVhBLEdBQTJCLElBQVhBLEVBQzdCLE9BRUEsUUFHbEIsSUFBSyxLQU1ELE9BSkk1QixHQURXLElBQVg0QixFQUNVLE1BRUEsUUFHbEIsSUFBSyxLQVFELE9BTkk1QixHQURXLElBQVg0QixFQUNVLFNBQ1EsSUFBWEEsR0FBMkIsSUFBWEEsR0FBMkIsSUFBWEEsRUFDN0IsVUFFQSxXQUdsQixJQUFLLEtBUUQsT0FOSTVCLEdBRFcsSUFBWDRCLEVBQ1UsU0FDUSxJQUFYQSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxFQUM3QixTQUVBLFdBTWpCczVDLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxDQUNKbDlDLE9BQVEsb0dBQW9HUSxNQUN4RyxLQUVKc2hELFdBQVksZ0dBQWdHdGhELE1BQ3hHLE1BR1IyOEMsWUFBYSwrREFBK0QzOEMsTUFDeEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLDREQUE0RDU4QyxNQUNsRSxLQUVKNjhDLGNBQWUscUNBQXFDNzhDLE1BQU0sS0FDMUQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRbi9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUFPLHdCQUNYLEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDRCxNQUFPLHNCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLG9CQUduQm84QyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUFPLDZCQUNYLEtBQUssRUFDRCxNQUFPLDRCQUNYLEtBQUssRUFDRCxNQUFPLDJCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLHlCQUduQnM4QyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFdBQ041TSxFQUFHLGNBQ0g2TSxHQUFJeUUsRUFDSm5oQyxFQUFHbWhDLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEVBQ0pyRSxFQUFHLE1BQ0hDLEdBQUlvRSxFQUNKbkUsRUFBRyxTQUNIQyxHQUFJa0UsRUFDSmpFLEVBQUcsU0FDSEMsR0FBSWdFLEdBRVIvRCx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F4SnlCbG5DLENBQVEsRUFBUSxPLHNCQ0lsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSThILEVBQWMsZ0VBQWdFdGtELE1BQzlFLEtBRUosU0FBUytpRCxFQUFVNy9DLEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQzNDLElBQUk3a0MsRUFBTTNYLEVBQ1YsT0FBUStELEdBQ0osSUFBSyxJQUNELE9BQU95NEMsR0FBWUQsRUFDYixtQkFDQSxvQkFDVixJQUFLLEtBQ0QsT0FBTzVrQyxHQUFPNmtDLEdBQVlELEdBQ3BCLGFBQ0EsY0FDVixJQUFLLElBQ0QsTUFBTyxPQUFTQyxHQUFZRCxFQUFnQixRQUFVLFVBQzFELElBQUssS0FDRCxPQUFPNWtDLEdBQU82a0MsR0FBWUQsRUFBZ0IsUUFBVSxVQUN4RCxJQUFLLElBQ0QsTUFBTyxPQUFTQyxHQUFZRCxFQUFnQixPQUFTLFVBQ3pELElBQUssS0FDRCxPQUFPNWtDLEdBQU82a0MsR0FBWUQsRUFBZ0IsT0FBUyxVQUN2RCxJQUFLLElBQ0QsTUFBTyxPQUFTQyxHQUFZRCxFQUFnQixPQUFTLFVBQ3pELElBQUssS0FDRCxPQUFPNWtDLEdBQU82a0MsR0FBWUQsRUFBZ0IsT0FBUyxVQUN2RCxJQUFLLElBQ0QsTUFBTyxPQUFTQyxHQUFZRCxFQUFnQixTQUFXLFlBQzNELElBQUssS0FDRCxPQUFPNWtDLEdBQU82a0MsR0FBWUQsRUFBZ0IsU0FBVyxZQUN6RCxJQUFLLElBQ0QsTUFBTyxPQUFTQyxHQUFZRCxFQUFnQixNQUFRLFFBQ3hELElBQUssS0FDRCxPQUFPNWtDLEdBQU82a0MsR0FBWUQsRUFBZ0IsTUFBUSxRQUUxRCxNQUFPLEdBRVgsU0FBU1AsRUFBS1EsR0FDVixPQUNLQSxFQUFXLEdBQUssV0FDakIsSUFDQTRFLEVBQVkxbEQsS0FBS2dELE9BQ2pCLGFBSUM0NkMsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLG9HQUFvRzE4QyxNQUN4RyxLQUVKMjhDLFlBQWEsaUVBQWlFMzhDLE1BQzFFLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSxzREFBc0Q1OEMsTUFBTSxLQUN0RTY4QyxjQUFlLGdDQUFnQzc4QyxNQUFNLEtBQ3JEODhDLFlBQWEscUJBQXFCOThDLE1BQU0sS0FDeENxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxPQUNKQyxJQUFLLFVBQ0xDLEVBQUcsY0FDSEMsR0FBSSxnQkFDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVlosY0FBZSxTQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUF5QyxNQUFsQ0EsRUFBTTdmLE9BQU8sR0FBR2pELGVBRTNCMjZDLFNBQVUsU0FBVUMsRUFBT0MsRUFBU0MsR0FDaEMsT0FBSUYsRUFBUSxJQUNXLElBQVpFLEVBQW1CLEtBQU8sTUFFZCxJQUFaQSxFQUFtQixLQUFPLE1BR3pDUSxTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsb0JBQ1RDLFNBQVUsV0FDTixPQUFPbUIsRUFBSzV1QyxLQUFLMVIsTUFBTSxJQUUzQm8vQyxRQUFTLG9CQUNUQyxTQUFVLFdBQ04sT0FBT2lCLEVBQUs1dUMsS0FBSzFSLE1BQU0sSUFFM0JzL0MsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxLQUNONU0sRUFBR3NSLEVBQ0h6RSxHQUFJeUUsRUFDSm5oQyxFQUFHbWhDLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEVBQ0pyRSxFQUFHcUUsRUFDSHBFLEdBQUlvRSxFQUNKbkUsRUFBR21FLEVBQ0hsRSxHQUFJa0UsRUFDSmpFLEVBQUdpRSxFQUNIaEUsR0FBSWdFLEdBRVIvRCx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FuSHlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLENBQ0psOUMsT0FBUSw0R0FBNEdRLE1BQ2hILEtBRUpzaEQsV0FBWSxnR0FBZ0d0aEQsTUFDeEcsTUFHUjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsZ0VBQWdFNThDLE1BQ3RFLEtBRUo2OEMsY0FBZSwrQkFBK0I3OEMsTUFBTSxLQUNwRDg4QyxZQUFhLCtCQUErQjk4QyxNQUFNLEtBQ2xEcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksaUJBQ0pDLElBQUssd0JBQ0xDLEtBQU0sK0JBRVZDLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLFlBQ1RFLFFBQVMsWUFDVEQsU0FBVSxXQUNOLE1BQU8sc0JBRVhFLFNBQVUsV0FDTixNQUFPLDhCQUVYQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxVQUNSQyxLQUFNLFVBQ041TSxFQUFHLG1CQUNINk0sR0FBSSxjQUNKMThCLEVBQUcsT0FDSDI4QixHQUFJLFVBQ0pDLEVBQUcsTUFDSEMsR0FBSSxTQUNKQyxFQUFHLEtBQ0hDLEdBQUksUUFDSkMsRUFBRyxPQUNIQyxHQUFJLFVBQ0pDLEVBQUcsT0FDSEMsR0FBSSxXQUVSaEMsY0FBZSxvQ0FDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBTyx1QkFBdUI1ZixLQUFLNGYsSUFFdkM2M0IsU0FBVSxTQUFVNTRDLEdBQ2hCLE9BQUlBLEVBQU8sRUFDQSxVQUNBQSxFQUFPLEdBQ1AsV0FDQUEsRUFBTyxHQUNQLFVBRUEsWUFHZjI2Qyx1QkFBd0IsMEJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssTUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssT0FDRCxPQUFlLElBQVh0K0MsRUFDT0EsRUFBUyxNQUViQSxFQUFTLE1BQ3BCLFFBQ0ksT0FBT0EsSUFHbkJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0ExRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0lsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx5RkFBeUYxOEMsTUFDN0YsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsNkNBQTZDNThDLE1BQU0sS0FDN0Q2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVlosY0FBZSx3QkFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sU0FBYjQ0QyxFQUNPNTRDLEVBQ2EsVUFBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFNBQWI0NEMsR0FBb0MsVUFBYkEsRUFDdkI1NEMsRUFBTyxRQURYLEdBSVg0NEMsU0FBVSxTQUFVQyxFQUFPQyxFQUFTQyxHQUNoQyxPQUFJRixFQUFRLEdBQ0QsT0FDQUEsRUFBUSxHQUNSLFFBQ0FBLEVBQVEsR0FDUixPQUVBLFNBR2ZVLFNBQVUsQ0FDTkMsUUFBUyxzQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSxrQkFDVkMsUUFBUyxxQkFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxlQUNONU0sRUFBRyxpQkFDSDZNLEdBQUksV0FDSjE4QixFQUFHLFVBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksWUFFUkcsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6RXlCbG5DLENBQVEsRUFBUSxPLHFCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJekIsU0FBUzRHLEVBQU83c0MsR0FDWixPQUFJQSxFQUFJLEtBQVEsSUFFTEEsRUFBSSxJQUFPLEVBSzFCLFNBQVN3c0MsRUFBVTcvQyxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUMzQyxJQUFJcCtDLEVBQVM0QixFQUFTLElBQ3RCLE9BQVErRCxHQUNKLElBQUssSUFDRCxPQUFPdzRDLEdBQWlCQyxFQUNsQixtQkFDQSxtQkFDVixJQUFLLEtBQ0QsT0FBSTBELEVBQU9sZ0QsR0FFSDVCLEdBQ0NtK0MsR0FBaUJDLEVBQVcsV0FBYSxZQUczQ3ArQyxFQUFTLFVBQ3BCLElBQUssSUFDRCxPQUFPbStDLEVBQWdCLFNBQVcsU0FDdEMsSUFBSyxLQUNELE9BQUkyRCxFQUFPbGdELEdBRUg1QixHQUFVbStDLEdBQWlCQyxFQUFXLFVBQVksV0FFL0NELEVBQ0FuK0MsRUFBUyxTQUViQSxFQUFTLFNBQ3BCLElBQUssS0FDRCxPQUFJOGhELEVBQU9sZ0QsR0FFSDVCLEdBQ0NtK0MsR0FBaUJDLEVBQ1osZ0JBQ0EsaUJBR1BwK0MsRUFBUyxjQUNwQixJQUFLLElBQ0QsT0FBSW0rQyxFQUNPLFFBRUpDLEVBQVcsTUFBUSxPQUM5QixJQUFLLEtBQ0QsT0FBSTBELEVBQU9sZ0QsR0FDSHU4QyxFQUNPbitDLEVBQVMsUUFFYkEsR0FBVW8rQyxFQUFXLE9BQVMsU0FDOUJELEVBQ0FuK0MsRUFBUyxRQUViQSxHQUFVbytDLEVBQVcsTUFBUSxRQUN4QyxJQUFLLElBQ0QsT0FBSUQsRUFDTyxVQUVKQyxFQUFXLFFBQVUsU0FDaEMsSUFBSyxLQUNELE9BQUkwRCxFQUFPbGdELEdBQ0h1OEMsRUFDT24rQyxFQUFTLFVBRWJBLEdBQVVvK0MsRUFBVyxTQUFXLFdBQ2hDRCxFQUNBbitDLEVBQVMsVUFFYkEsR0FBVW8rQyxFQUFXLFFBQVUsVUFDMUMsSUFBSyxJQUNELE9BQU9ELEdBQWlCQyxFQUFXLEtBQU8sTUFDOUMsSUFBSyxLQUNELE9BQUkwRCxFQUFPbGdELEdBQ0E1QixHQUFVbStDLEdBQWlCQyxFQUFXLEtBQU8sUUFFakRwK0MsR0FBVW0rQyxHQUFpQkMsRUFBVyxLQUFPLFFBSXZEbEQsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLG9GQUFvRjE4QyxNQUN4RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSxtRkFBbUY1OEMsTUFDekYsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxPQUNKQyxJQUFLLFVBQ0xDLEVBQUcsYUFDSEMsR0FBSSxlQUNKQyxJQUFLLDBCQUNMQyxLQUFNLGlDQUVWQyxTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsb0JBQ1RDLFNBQVUsZ0JBQ1ZDLFFBQVMsaUJBQ1RDLFNBQVUsMEJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0saUJBQ041TSxFQUFHc1IsRUFDSHpFLEdBQUl5RSxFQUNKbmhDLEVBQUdtaEMsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBRyxjQUNIQyxHQUFJc0UsRUFDSnJFLEVBQUdxRSxFQUNIcEUsR0FBSW9FLEVBQ0puRSxFQUFHbUUsRUFDSGxFLEdBQUlrRSxFQUNKakUsRUFBR2lFLEVBQ0hoRSxHQUFJZ0UsR0FFUi9ELHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXpJeUJsbkMsQ0FBUSxFQUFRLE8scUJDR2xELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsZ0dBQWdHMThDLE1BQ3BHLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLDJEQUEyRDU4QyxNQUNqRSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxpQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSxpQkFDVkMsUUFBUyxpQkFDVEMsU0FBVSxXQUNOLE9BQVFyL0MsS0FBS2dELE9BQ1QsS0FBSyxFQUNELE1BQU8sNkJBQ1gsUUFDSSxNQUFPLCtCQUduQnM4QyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUFVM00sR0FDZCxPQUFRLFlBQVlqc0MsS0FBS2lzQyxHQUFLLE1BQVEsTUFBUSxJQUFNQSxHQUV4RDRNLEtBQU0sUUFDTjVNLEVBQUcsaUJBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLFNBQ0pDLEVBQUcsWUFDSEMsR0FBSSxZQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQTlEeUJsbkMsQ0FBUSxFQUFRLE8scUJDS2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLGdHQUFnRzE4QyxNQUNwRyxLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSwyREFBMkQ1OEMsTUFDakUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDBCQUVWQyxTQUFVLENBQ05DLFFBQVMsV0FDTCxNQUNJLFdBQ0NqL0MsS0FBS3MrQyxRQUFVLEVBQUksT0FBMEIsSUFBakJ0K0MsS0FBS3MrQyxRQUFnQixJQUFNLE9BQ3hELE9BR1JZLFFBQVMsV0FDTCxNQUNJLGFBQ0NsL0MsS0FBS3MrQyxRQUFVLEVBQUksT0FBMEIsSUFBakJ0K0MsS0FBS3MrQyxRQUFnQixJQUFNLE9BQ3hELE9BR1JhLFNBQVUsV0FDTixNQUNJLFdBQ0NuL0MsS0FBS3MrQyxRQUFVLEVBQUksT0FBMEIsSUFBakJ0K0MsS0FBS3MrQyxRQUFnQixJQUFNLE9BQ3hELE9BR1JjLFFBQVMsV0FDTCxNQUNJLFdBQ0NwL0MsS0FBS3MrQyxRQUFVLEVBQUksT0FBMEIsSUFBakJ0K0MsS0FBS3MrQyxRQUFnQixJQUFNLE9BQ3hELE9BR1JlLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUNJLHVCQUNDaEQsS0FBS3MrQyxRQUFVLEVBQ1YsT0FDaUIsSUFBakJ0K0MsS0FBS3MrQyxRQUNMLElBQ0EsT0FDTixNQUVSLFFBQ0ksTUFDSSx1QkFDQ3QrQyxLQUFLcytDLFFBQVUsRUFDVixPQUNpQixJQUFqQnQrQyxLQUFLcytDLFFBQ0wsSUFDQSxPQUNOLFFBSWhCZ0IsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxRQUNONU0sRUFBRyxpQkFDSDZNLEdBQUksYUFDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxZQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FDSkMsRUFBRyxZQUNIQyxHQUFJLFlBQ0p4bUMsRUFBRyxnQkFDSHNwQyxHQUFJLGVBQ0o3QyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXRHeUJsbkMsQ0FBUSxFQUFRLE8sc0JDQ2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9COEgsS0FBTSxDQUNGLENBQ0lDLE1BQU8sYUFDUHRLLE9BQVEsRUFDUnhwQyxLQUFNLEtBQ04rekMsT0FBUSxJQUNSQyxLQUFNLEtBRVYsQ0FDSUYsTUFBTyxhQUNQbDNCLE1BQU8sYUFDUDRzQixPQUFRLEVBQ1J4cEMsS0FBTSxLQUNOK3pDLE9BQVEsSUFDUkMsS0FBTSxLQUVWLENBQ0lGLE1BQU8sYUFDUGwzQixNQUFPLGFBQ1A0c0IsT0FBUSxFQUNSeHBDLEtBQU0sS0FDTit6QyxPQUFRLElBQ1JDLEtBQU0sS0FFVixDQUNJRixNQUFPLGFBQ1BsM0IsTUFBTyxhQUNQNHNCLE9BQVEsRUFDUnhwQyxLQUFNLEtBQ04rekMsT0FBUSxJQUNSQyxLQUFNLEtBRVYsQ0FDSUYsTUFBTyxhQUNQbDNCLE1BQU8sYUFDUDRzQixPQUFRLEVBQ1J4cEMsS0FBTSxLQUNOK3pDLE9BQVEsSUFDUkMsS0FBTSxLQUVWLENBQ0lGLE1BQU8sYUFDUGwzQixNQUFPLGFBQ1A0c0IsT0FBUSxFQUNSeHBDLEtBQU0sS0FDTit6QyxPQUFRLEtBQ1JDLEtBQU0sTUFFVixDQUNJRixNQUFPLGFBQ1BsM0IsT0FBTyxJQUNQNHNCLE9BQVEsRUFDUnhwQyxLQUFNLE1BQ04rekMsT0FBUSxLQUNSQyxLQUFNLE9BR2RDLG9CQUFxQixXQUNyQkMsb0JBQXFCLFNBQVV4L0IsRUFBT3RELEdBQ2xDLE1BQW9CLE1BQWJBLEVBQU0sR0FBYSxFQUFJbGhCLFNBQVNraEIsRUFBTSxJQUFNc0QsRUFBTyxLQUU5RHMzQixPQUFRLHlDQUF5QzE4QyxNQUFNLEtBQ3ZEMjhDLFlBQWEseUNBQXlDMzhDLE1BQ2xELEtBRUo0OEMsU0FBVSw4QkFBOEI1OEMsTUFBTSxLQUM5QzY4QyxjQUFlLGdCQUFnQjc4QyxNQUFNLEtBQ3JDODhDLFlBQWEsZ0JBQWdCOThDLE1BQU0sS0FDbkNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHVCQUNOanZCLEVBQUcsYUFDSHMwQixHQUFJLFlBQ0pDLElBQUssa0JBQ0xDLEtBQU0sd0JBRVZuRyxjQUFlLFNBQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQWlCLE9BQVZBLEdBRVg2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEdBQ0EsS0FFQSxNQUdmdTVDLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFNBQVUsU0FBVXBmLEdBQ2hCLE9BQUlBLEVBQUl1Z0IsU0FBV3RnRCxLQUFLc2dELE9BQ2IsY0FFQSxXQUdmbEIsUUFBUyxVQUNUQyxTQUFVLFNBQVV0ZixHQUNoQixPQUFJLy9CLEtBQUtzZ0QsU0FBV3ZnQixFQUFJdWdCLE9BQ2IsY0FFQSxXQUdmaEIsU0FBVSxLQUVkYyx1QkFBd0IsV0FDeEJDLFFBQVMsU0FBVS83QyxFQUFRcytDLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNELE9BQWtCLElBQVh0K0MsRUFBZSxLQUFPQSxFQUFTLElBQzFDLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU9BLEVBQVMsSUFDcEIsUUFDSSxPQUFPQSxJQUduQmk3QyxhQUFjLENBQ1ZDLE9BQVEsTUFDUkMsS0FBTSxNQUNONU0sRUFBRyxLQUNINk0sR0FBSSxNQUNKMThCLEVBQUcsS0FDSDI4QixHQUFJLE1BQ0pDLEVBQUcsTUFDSEMsR0FBSSxPQUNKQyxFQUFHLEtBQ0hDLEdBQUksTUFDSkMsRUFBRyxNQUNIQyxHQUFJLE9BQ0pDLEVBQUcsS0FDSEMsR0FBSSxTQWxKMEI3bUMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHlGQUF5RjE4QyxNQUM3RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSwrQ0FBK0M1OEMsTUFBTSxLQUMvRDY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWWixjQUFlLDZCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxXQUFiNDRDLEVBQ081NEMsRUFDYSxXQUFiNDRDLEVBQ0E1NEMsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsV0FBYjQ0QyxHQUFzQyxVQUFiQSxFQUN6QjU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVVDLEVBQU9DLEVBQVNDLEdBQ2hDLE9BQUlGLEVBQVEsR0FDRCxTQUNBQSxFQUFRLEdBQ1IsU0FDQUEsRUFBUSxHQUNSLFNBRUEsU0FHZlUsU0FBVSxDQUNOQyxRQUFTLDJCQUNUQyxRQUFTLHNCQUNUQyxTQUFVLGtCQUNWQyxRQUFTLHdCQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxnQkFDUkMsS0FBTSx1QkFDTjVNLEVBQUcsa0JBQ0g2TSxHQUFJLFdBQ0oxOEIsRUFBRyxrQkFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsZ0JBQ0hDLEdBQUksU0FDSkMsRUFBRyxXQUNIQyxHQUFJLFlBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FFUkcsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6RXlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxxR0FBcUcxOEMsTUFDekcsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsQ0FDTjBFLFdBQVksZ0VBQWdFdGhELE1BQ3hFLEtBRUpSLE9BQVEsaUVBQWlFUSxNQUNyRSxLQUVKdWhELFNBQVUsaUJBRWQxRSxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsaUJBQ1RDLFFBQVMsaUJBQ1RFLFFBQVMsa0JBQ1RELFNBQVUsd0JBQ1ZFLFNBQVUsb0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQVUzTSxHQUNkLE9BQU9BLEVBQUVseUMsUUFBUSxpQ0FBaUMsU0FDOUNzbEQsRUFDQUMsRUFDQUMsR0FFQSxNQUFjLE1BQVBBLEVBQWFELEVBQUssS0FBT0EsRUFBS0MsRUFBSyxTQUdsRDFHLEtBQU0sU0FBVTVNLEdBQ1osTUFBSSw0QkFBNEJqc0MsS0FBS2lzQyxHQUMxQkEsRUFBRWx5QyxRQUFRLFNBQVUsVUFFM0IsT0FBT2lHLEtBQUtpc0MsR0FDTEEsRUFBRWx5QyxRQUFRLFFBQVMsWUFFdkJreUMsR0FFWEEsRUFBRyxpQkFDSDZNLEdBQUksVUFDSjE4QixFQUFHLE9BQ0gyOEIsR0FBSSxVQUNKQyxFQUFHLFFBQ0hDLEdBQUksV0FDSkMsRUFBRyxNQUNIQyxHQUFJLFNBQ0pDLEVBQUcsTUFDSEMsR0FBSSxTQUNKQyxFQUFHLE9BQ0hDLEdBQUksV0FFUkMsdUJBQXdCLDhCQUN4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsT0FBZSxJQUFYQSxFQUNPQSxFQUVJLElBQVhBLEVBQ09BLEVBQVMsTUFHaEJBLEVBQVMsSUFDUkEsR0FBVSxLQUFPQSxFQUFTLElBQU8sR0FDbENBLEVBQVMsS0FBUSxFQUVWLE1BQVFBLEVBRVpBLEVBQVMsTUFFcEJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0ExRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSWtFLEVBQVcsQ0FDWDNJLEVBQUcsTUFDSGdJLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hTLEdBQUksTUFDSkgsR0FBSSxNQUNKSSxHQUFJLE1BQ0orRCxHQUFJLE1BQ0psRSxHQUFJLE1BQ0pJLEdBQUksTUFDSlAsR0FBSSxNQUNKQyxHQUFJLE1BQ0pPLEdBQUksTUFDSkosSUFBSyxPQUdBdkUsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHFGQUFxRjE4QyxNQUN6RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSwwREFBMEQ1OEMsTUFDaEUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsbUJBQ1RDLFFBQVMsbUJBQ1RDLFNBQVUsa0JBQ1ZDLFFBQVMsa0JBQ1RDLFNBQVUsa0NBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFlBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsaUJBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxZQUNIQyxHQUFJLFdBQ0pDLEVBQUcsVUFDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksUUFDSkMsRUFBRyxVQUNIQyxHQUFJLFVBRVJDLHVCQUF3QixrQkFDeEJDLFFBQVMsU0FBVS83QyxHQUdmLE9BQU9BLEdBQVV3OUMsRUFBU3g5QyxJQUFXdzlDLEVBRjdCeDlDLEVBQVMsS0FFbUN3OUMsRUFENUN4OUMsR0FBVSxJQUFNLElBQU0sUUFHbENnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FoRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSXNELEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSHhJLEVBQUcsS0FFUDBJLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pqRSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEseUVBQXlFMThDLE1BQzdFLEtBRUoyOEMsWUFBYSx5RUFBeUUzOEMsTUFDbEYsS0FFSjQ4QyxTQUFVLGlEQUFpRDU4QyxNQUFNLEtBQ2pFNjhDLGNBQWUsb0JBQW9CNzhDLE1BQU0sS0FDekM4OEMsWUFBYSxvQkFBb0I5OEMsTUFBTSxLQUN2QzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLGNBQWUsY0FDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBaUIsVUFBVkEsR0FFWDYzQixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sR0FDQSxRQUVBLFNBR2Z1NUMsU0FBVSxDQUNOQyxRQUFTLG9CQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGlCQUNWQyxRQUFTLHFCQUNUQyxTQUFVLDhCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFFBQ041TSxFQUFHLGlCQUNINk0sR0FBSSxZQUNKMThCLEVBQUcsVUFDSDI4QixHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxRQUNIQyxHQUFJLFFBQ0pDLEVBQUcsV0FDSEMsR0FBSSxZQUVSQyx1QkFBd0IsWUFDeEJDLFFBQVMsT0FDVHVCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUFPdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDN0MsT0FBTzIrQixFQUFVMytCLE9BR3pCKzlCLFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsT0FBTyxTQUFVdWlCLEdBQ25DLE9BQU9nK0IsRUFBVWgrQixPQUd6Qm85QixLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXBHeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQMEksRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHSmpFLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSw2RkFBNkYxOEMsTUFDakcsS0FFSjI4QyxZQUFhLDJFQUEyRTM4QyxNQUNwRixLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsMERBQTBENThDLE1BQ2hFLEtBRUo2OEMsY0FBZSxxQ0FBcUM3OEMsTUFBTSxLQUMxRDg4QyxZQUFhLHdCQUF3Qjk4QyxNQUFNLEtBQzNDcTlDLGVBQWdCLENBQ1pDLEdBQUksU0FDSkMsSUFBSyxZQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxzQkFDTEMsS0FBTSw2QkFFVkMsU0FBVSxDQUNOQyxRQUFTLFlBQ1RDLFFBQVMsWUFDVEMsU0FBVSxXQUNWQyxRQUFTLGNBQ1RDLFNBQVUsb0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLGdCQUNKMThCLEVBQUcsYUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsWUFDSEMsR0FBSSxVQUNKQyxFQUFHLFdBQ0hDLEdBQUksU0FDSkMsRUFBRyxjQUNIQyxHQUFJLFlBQ0pDLEVBQUcsWUFDSEMsR0FBSSxXQUVSeUIsU0FBVSxTQUFVMXJCLEdBQ2hCLE9BQU9BLEVBQU92MUIsUUFBUSxpQkFBaUIsU0FBVXVpQixHQUM3QyxPQUFPMitCLEVBQVUzK0IsT0FHekIrOUIsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQU92MUIsUUFBUSxPQUFPLFNBQVV1aUIsR0FDbkMsT0FBT2crQixFQUFVaCtCLE9BR3pCaTdCLGNBQWUsZ0NBQ2Y2RSxhQUFjLFNBQVV2OUMsRUFBTTQ0QyxHQUkxQixPQUhhLEtBQVQ1NEMsSUFDQUEsRUFBTyxHQUVNLFdBQWI0NEMsRUFDTzU0QyxFQUFPLEVBQUlBLEVBQU9BLEVBQU8sR0FDWixhQUFiNDRDLEVBQ0E1NEMsRUFDYSxhQUFiNDRDLEVBQ0E1NEMsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsU0FBYjQ0QyxFQUNBNTRDLEVBQU8sUUFEWCxHQUlYNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLFNBQ0FBLEVBQU8sR0FDUCxXQUNBQSxFQUFPLEdBQ1AsV0FDQUEsRUFBTyxHQUNQLE9BRUEsVUFHZjI2Qyx1QkFBd0IsZUFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQU9BLEVBQVMsT0FFcEJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6SHlCbG5DLENBQVEsRUFBUSxPLHNCQ0lsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx5Q0FBeUMxOEMsTUFBTSxLQUN2RDI4QyxZQUFhLHlDQUF5QzM4QyxNQUNsRCxLQUVKNDhDLFNBQVUsOEJBQThCNThDLE1BQU0sS0FDOUM2OEMsY0FBZSxnQkFBZ0I3OEMsTUFBTSxLQUNyQzg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DcTlDLGVBQWdCLENBQ1pDLEdBQUksU0FDSkMsSUFBSyxZQUNMQyxFQUFHLGNBQ0hDLEdBQUksZ0JBQ0pDLElBQUssdUJBQ0xDLEtBQU0sNEJBQ05qdkIsRUFBRyxjQUNIczBCLEdBQUksZ0JBQ0pDLElBQUssdUJBQ0xDLEtBQU0sNkJBRVZ0RixTQUFVLENBQ05DLFFBQVMsUUFDVEMsUUFBUyxRQUNUQyxTQUFVLFVBQ1ZDLFFBQVMsUUFDVEMsU0FBVSxjQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxPQUNSQyxLQUFNLE9BQ041TSxFQUFHLE1BQ0g2TSxHQUFJLE1BQ0oxOEIsRUFBRyxLQUNIMjhCLEdBQUksTUFDSkMsRUFBRyxPQUNIQyxHQUFJLE9BQ0pDLEVBQUcsS0FDSEMsR0FBSSxNQUNKQyxFQUFHLE1BQ0hDLEdBQUksTUFDSkMsRUFBRyxNQUNIQyxHQUFJLE9BRVJDLHVCQUF3QixpQkFDeEJDLFFBQVMsU0FBVS83QyxFQUFRcytDLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0QsT0FBT3QrQyxFQUFTLElBQ3BCLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixRQUNJLE9BQU9BLElBR25CNjVDLGNBQWUsUUFDZkMsS0FBTSxTQUFVandCLEdBQ1osTUFBaUIsT0FBVkEsR0FFWGt3QixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUTZnRCxHQUM5QixPQUFPNWdELEVBQU8sR0FBSyxLQUFPLFFBeEVJNlQsQ0FBUSxFQUFRLE8sc0JDRWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQMEksRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FFVC9ELEVBQVMsQ0FDTCxlQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsV0FDQSxTQUNBLE1BQ0EsVUFDQSxlQUNBLGVBQ0EsZ0JBR0NGLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUUEsRUFDUkMsWUFBYUQsRUFDYkUsU0FBVSwwRUFBMEU1OEMsTUFDaEYsS0FFSjY4QyxjQUFlLDJEQUEyRDc4QyxNQUN0RSxLQUVKODhDLFlBQWEsZ0JBQWdCOThDLE1BQU0sS0FDbkM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWWixjQUFlLGtCQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFPLFVBQVU1ZixLQUFLNGYsSUFFMUI2M0IsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEdBQ0EsVUFFQSxXQUdmdTVDLFNBQVUsQ0FDTkMsUUFBUyxzQkFDVEMsUUFBUyx1QkFDVEMsU0FBVSxvQkFDVkMsUUFBUyxxQkFDVEMsU0FBVSxvQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxLQUNONU0sRUFBRyxrQkFDSDZNLEdBQUksV0FDSjE4QixFQUFHLGNBQ0gyOEIsR0FBSSxZQUNKQyxFQUFHLGVBQ0hDLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFNBQ0pDLEVBQUcsWUFDSEMsR0FBSSxVQUNKQyxFQUFHLFdBQ0hDLEdBQUksVUFFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUNGdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDaEMsT0FBTzIrQixFQUFVMytCLE1BRXBCdmlCLFFBQVEsS0FBTSxNQUV2QnNnRCxXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFDRnYxQixRQUFRLE9BQU8sU0FBVXVpQixHQUN0QixPQUFPZytCLEVBQVVoK0IsTUFFcEJ2aUIsUUFBUSxLQUFNLE1BRXZCMi9DLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLE1BcEh5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlrRSxFQUFXLENBQ1gzSSxFQUFHLE1BQ0hnSSxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIUyxHQUFJLE1BQ0pILEdBQUksTUFDSkksR0FBSSxNQUNKK0QsR0FBSSxNQUNKbEUsR0FBSSxNQUNKSSxHQUFJLE1BQ0pQLEdBQUksTUFDSkMsR0FBSSxNQUNKTyxHQUFJLE1BQ0pKLElBQUssT0FHQXZFLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxrRkFBa0YxOEMsTUFDdEYsS0FFSjI4QyxZQUFhLHFEQUFxRDM4QyxNQUM5RCxLQUVKNDhDLFNBQVUsMkRBQTJENThDLE1BQ2pFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGlCQUNWQyxRQUFTLGtCQUNUQyxTQUFVLHdDQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLFdBQ041TSxFQUFHLGlCQUNINk0sR0FBSSxZQUNKMThCLEVBQUcsWUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUVSQyx1QkFBd0Isd0JBQ3hCQyxRQUFTLFNBQVUvN0MsR0FHZixPQUFPQSxHQUFVdzlDLEVBQVN4OUMsSUFBV3c5QyxFQUY3Qng5QyxFQUFTLEtBRW1DdzlDLEVBRDVDeDlDLEdBQVUsSUFBTSxJQUFNLFFBR2xDZzhDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBbEZ5QmxuQyxDQUFRLEVBQVEsTyxzQkNJbEQsU0FBV3NrQyxHQUFVLGFBSXpCLFNBQVM2RyxFQUFvQm5nRCxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUNyRCxJQUFJbGdELEVBQVMsQ0FDVG9pQixFQUFHLENBQUMsYUFBYyxnQkFDbEI0OEIsRUFBRyxDQUFDLFlBQWEsZUFDakJFLEVBQUcsQ0FBQyxVQUFXLGFBQ2ZFLEVBQUcsQ0FBQyxXQUFZLGVBQ2hCRSxFQUFHLENBQUMsVUFBVyxlQUVuQixPQUFPVyxFQUFnQmpnRCxFQUFPeUgsR0FBSyxHQUFLekgsRUFBT3lILEdBQUssR0F1QnhELFNBQVNpK0MsRUFBNEJoaUQsR0FFakMsR0FEQUEsRUFBU3RDLFNBQVNzQyxFQUFRLElBQ3RCZzVDLE1BQU1oNUMsR0FDTixPQUFPLEVBRVgsR0FBSUEsRUFBUyxFQUVULE9BQU8sRUFDSixHQUFJQSxFQUFTLEdBRWhCLE9BQUksR0FBS0EsR0FBVUEsR0FBVSxFQUkxQixHQUFJQSxFQUFTLElBQUssQ0FFckIsSUFBSXcrQyxFQUFZeCtDLEVBQVMsR0FFekIsT0FDV2dpRCxFQURPLElBQWR4RCxFQURheCtDLEVBQVMsR0FJU3crQyxHQUNoQyxHQUFJeCtDLEVBQVMsSUFBTyxDQUV2QixLQUFPQSxHQUFVLElBQ2JBLEdBQWtCLEdBRXRCLE9BQU9naUQsRUFBNEJoaUQsR0FJbkMsT0FBT2dpRCxFQURQaGlELEdBQWtCLEtBS2pCczVDLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx1RkFBdUYxOEMsTUFDM0YsS0FFSjI4QyxZQUFhLCtEQUErRDM4QyxNQUN4RSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsbUVBQW1FNThDLE1BQ3pFLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksY0FDSkMsSUFBSyxpQkFDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssMkJBQ0xDLEtBQU0sa0NBRVZDLFNBQVUsQ0FDTkMsUUFBUyxlQUNUSyxTQUFVLElBQ1ZKLFFBQVMsZUFDVEMsU0FBVSxlQUNWQyxRQUFTLG1CQUNUQyxTQUFVLFdBRU4sT0FBUXIvQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sMEJBQ1gsUUFDSSxNQUFPLDRCQUl2QnU4QyxhQUFjLENBQ1ZDLE9BaEdSLFNBQTJCdHBCLEdBRXZCLE9BQUlvd0IsRUFEU3B3QixFQUFPcXdCLE9BQU8sRUFBR3J3QixFQUFPLzBCLFFBQVEsT0FFbEMsS0FBTyswQixFQUVYLE1BQVFBLEdBNEZYdXBCLEtBMUZSLFNBQXlCdnBCLEdBRXJCLE9BQUlvd0IsRUFEU3B3QixFQUFPcXdCLE9BQU8sRUFBR3J3QixFQUFPLzBCLFFBQVEsT0FFbEMsUUFBVSswQixFQUVkLFNBQVdBLEdBc0ZkMmMsRUFBRyxrQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHeWhDLEVBQ0g5RSxHQUFJLGNBQ0pDLEVBQUc2RSxFQUNINUUsR0FBSSxhQUNKQyxFQUFHMkUsRUFDSDFFLEdBQUksVUFDSkMsRUFBR3lFLEVBQ0h4RSxHQUFJLFdBQ0pDLEVBQUd1RSxFQUNIdEUsR0FBSSxXQUVSQyx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FwSXlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSw2RUFBNkUxOEMsTUFDakYsS0FFSjI4QyxZQUFhLDZFQUE2RTM4QyxNQUN0RixLQUVKNDhDLFNBQVUsc0NBQXNDNThDLE1BQU0sS0FDdEQ2OEMsY0FBZSxvQ0FBb0M3OEMsTUFBTSxLQUN6RDg4QyxZQUFhLG1CQUFtQjk4QyxNQUFNLEtBQ3RDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSw2QkFFVlosY0FBZSxrQkFDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBaUIsV0FBVkEsR0FFWDYzQixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sR0FDQSxXQUVBLFVBR2Z1NUMsU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLHdCQUNWQyxRQUFTLHFCQUNUQyxTQUFVLDRCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFdBQ041TSxFQUFHLG1CQUNINk0sR0FBSSxZQUNKMThCLEVBQUcsU0FDSDI4QixHQUFJLFVBQ0pDLEVBQUcsWUFDSEMsR0FBSSxhQUNKQyxFQUFHLFFBQ0hDLEdBQUksU0FDSkMsRUFBRyxVQUNIQyxHQUFJLFdBQ0pDLEVBQUcsT0FDSEMsR0FBSSxTQUVSQyx1QkFBd0IsZUFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE1BQU8sTUFBUUEsS0EvRGVnVixDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUk0SSxFQUFRLENBQ1I5RyxHQUFJLDZCQUNKMThCLEVBQUcsd0JBQ0gyOEIsR0FBSSwwQkFDSkMsRUFBRywyQkFDSEMsR0FBSSw0QkFDSkMsRUFBRyxxQkFDSEMsR0FBSSxzQkFDSkMsRUFBRyx1QkFDSEMsR0FBSSw0QkFDSkMsRUFBRyxtQkFDSEMsR0FBSSxvQkFTUixTQUFTc0csRUFBa0JuaUQsRUFBUXU4QyxFQUFleDRDLEVBQUt5NEMsR0FDbkQsT0FBT0QsRUFDRDRCLEVBQU1wNkMsR0FBSyxHQUNYeTRDLEVBQ0EyQixFQUFNcDZDLEdBQUssR0FDWG82QyxFQUFNcDZDLEdBQUssR0FFckIsU0FBU3FyQixFQUFRcHZCLEdBQ2IsT0FBT0EsRUFBUyxJQUFPLEdBQU1BLEVBQVMsSUFBTUEsRUFBUyxHQUV6RCxTQUFTbStDLEVBQU1wNkMsR0FDWCxPQUFPbStDLEVBQU1uK0MsR0FBS2pILE1BQU0sS0FFNUIsU0FBUytpRCxFQUFVNy9DLEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQzNDLElBQUlwK0MsRUFBUzRCLEVBQVMsSUFDdEIsT0FBZSxJQUFYQSxFQUVJNUIsRUFBUytqRCxFQUFrQm5pRCxFQUFRdThDLEVBQWV4NEMsRUFBSSxHQUFJeTRDLEdBRXZERCxFQUNBbitDLEdBQVVneEIsRUFBUXB2QixHQUFVbStDLEVBQU1wNkMsR0FBSyxHQUFLbzZDLEVBQU1wNkMsR0FBSyxJQUUxRHk0QyxFQUNPcCtDLEVBQVMrL0MsRUFBTXA2QyxHQUFLLEdBRXBCM0YsR0FBVWd4QixFQUFRcHZCLEdBQVVtK0MsRUFBTXA2QyxHQUFLLEdBQUtvNkMsRUFBTXA2QyxHQUFLLElBSWpFdTFDLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxDQUNKbDlDLE9BQVEsb0dBQW9HUSxNQUN4RyxLQUVKc2hELFdBQVksa0dBQWtHdGhELE1BQzFHLEtBRUp1aEQsU0FBVSwrREFFZDVFLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSxDQUNOcDlDLE9BQVEsb0ZBQW9GUSxNQUN4RixLQUVKc2hELFdBQVksMkZBQTJGdGhELE1BQ25HLEtBRUp1aEQsU0FBVSxjQUVkMUUsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLGlCQUFpQjk4QyxNQUFNLEtBQ3BDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksd0JBQ0pDLElBQUssc0NBQ0xDLEtBQU0sNENBQ05qdkIsRUFBRyxhQUNIczBCLEdBQUksd0JBQ0pDLElBQUssc0NBQ0xDLEtBQU0sNENBRVZ0RixTQUFVLENBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsYUFDVEMsU0FBVSxVQUNWQyxRQUFTLGFBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sV0FDTjVNLEVBbEZSLFNBQTBCdnVDLEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQ2xELE9BQUlELEVBQ08sa0JBRUFDLEVBQVcsa0JBQW9CLG1CQStFdENwQixHQUFJeUUsRUFDSm5oQyxFQUFHeWpDLEVBQ0g5RyxHQUFJd0UsRUFDSnZFLEVBQUc2RyxFQUNINUcsR0FBSXNFLEVBQ0pyRSxFQUFHMkcsRUFDSDFHLEdBQUlvRSxFQUNKbkUsRUFBR3lHLEVBQ0h4RyxHQUFJa0UsRUFDSmpFLEVBQUd1RyxFQUNIdEcsR0FBSWdFLEdBRVIvRCx1QkFBd0IsY0FDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQU9BLEVBQVMsUUFFcEJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6SHlCbG5DLENBQVEsRUFBUSxPLHNCQ0lsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSTRJLEVBQVEsQ0FDUjlHLEdBQUkscUNBQXFDdCtDLE1BQU0sS0FDL0M0aEIsRUFBRyxpQ0FBaUM1aEIsTUFBTSxLQUMxQ3UrQyxHQUFJLGlDQUFpQ3YrQyxNQUFNLEtBQzNDdytDLEVBQUcsaUNBQWlDeCtDLE1BQU0sS0FDMUN5K0MsR0FBSSxpQ0FBaUN6K0MsTUFBTSxLQUMzQzArQyxFQUFHLDZCQUE2QjErQyxNQUFNLEtBQ3RDMitDLEdBQUksNkJBQTZCMytDLE1BQU0sS0FDdkM0K0MsRUFBRyxpQ0FBaUM1K0MsTUFBTSxLQUMxQzYrQyxHQUFJLGlDQUFpQzcrQyxNQUFNLEtBQzNDOCtDLEVBQUcsd0JBQXdCOStDLE1BQU0sS0FDakMrK0MsR0FBSSx3QkFBd0IvK0MsTUFBTSxNQUt0QyxTQUFTUixFQUFPNmhELEVBQU9uK0MsRUFBUXU4QyxHQUMzQixPQUFJQSxFQUVPdjhDLEVBQVMsSUFBTyxHQUFLQSxFQUFTLEtBQVEsR0FBS20rQyxFQUFNLEdBQUtBLEVBQU0sR0FJNURuK0MsRUFBUyxJQUFPLEdBQUtBLEVBQVMsS0FBUSxHQUFLbStDLEVBQU0sR0FBS0EsRUFBTSxHQUczRSxTQUFTRCxFQUF1QmwrQyxFQUFRdThDLEVBQWV4NEMsR0FDbkQsT0FBTy9ELEVBQVMsSUFBTTFELEVBQU80bEQsRUFBTW4rQyxHQUFNL0QsRUFBUXU4QyxHQUVyRCxTQUFTNkYsRUFBeUJwaUQsRUFBUXU4QyxFQUFleDRDLEdBQ3JELE9BQU96SCxFQUFPNGxELEVBQU1uK0MsR0FBTS9ELEVBQVF1OEMsR0FNN0JqRCxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsdUdBQXVHMThDLE1BQzNHLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLDBFQUEwRTU4QyxNQUNoRixLQUVKNjhDLGNBQWUsa0JBQWtCNzhDLE1BQU0sS0FDdkM4OEMsWUFBYSxrQkFBa0I5OEMsTUFBTSxLQUNyQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxjQUNIQyxHQUFJLHVCQUNKQyxJQUFLLDhCQUNMQyxLQUFNLHFDQUVWQyxTQUFVLENBQ05DLFFBQVMsdUJBQ1RDLFFBQVMsb0JBQ1RDLFNBQVUscUJBQ1ZDLFFBQVMsc0JBQ1RDLFNBQVUsZ0NBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sV0FDTjVNLEVBbENSLFNBQXlCdnVDLEVBQVF1OEMsR0FDN0IsT0FBT0EsRUFBZ0IsaUJBQW1CLGtCQWtDdENuQixHQUFJOEMsRUFDSngvQixFQUFHMGpDLEVBQ0gvRyxHQUFJNkMsRUFDSjVDLEVBQUc4RyxFQUNIN0csR0FBSTJDLEVBQ0oxQyxFQUFHNEcsRUFDSDNHLEdBQUl5QyxFQUNKeEMsRUFBRzBHLEVBQ0h6RyxHQUFJdUMsRUFDSnRDLEVBQUd3RyxFQUNIdkcsR0FBSXFDLEdBRVJwQyx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0ExRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSStJLEVBQWEsQ0FDYkMsTUFBTyxDQUVIbEgsR0FBSSxDQUFDLFNBQVUsVUFBVyxXQUMxQjE4QixFQUFHLENBQUMsY0FBZSxpQkFDbkIyOEIsR0FBSSxDQUFDLFFBQVMsU0FBVSxVQUN4QkMsRUFBRyxDQUFDLFlBQWEsZUFDakJDLEdBQUksQ0FBQyxNQUFPLE9BQVEsUUFDcEJFLEdBQUksQ0FBQyxNQUFPLE9BQVEsUUFDcEJFLEdBQUksQ0FBQyxTQUFVLFVBQVcsV0FDMUJFLEdBQUksQ0FBQyxTQUFVLFNBQVUsV0FFN0IwRyx1QkFBd0IsU0FBVXZpRCxFQUFRd2lELEdBQ3RDLE9BQWtCLElBQVh4aUQsRUFDRHdpRCxFQUFRLEdBQ1J4aUQsR0FBVSxHQUFLQSxHQUFVLEVBQ3pCd2lELEVBQVEsR0FDUkEsRUFBUSxJQUVsQjNDLFVBQVcsU0FBVTcvQyxFQUFRdThDLEVBQWV4NEMsR0FDeEMsSUFBSXkrQyxFQUFVSCxFQUFXQyxNQUFNditDLEdBQy9CLE9BQW1CLElBQWZBLEVBQUlwRyxPQUNHNCtDLEVBQWdCaUcsRUFBUSxHQUFLQSxFQUFRLEdBR3hDeGlELEVBQ0EsSUFDQXFpRCxFQUFXRSx1QkFBdUJ2aUQsRUFBUXdpRCxLQU1qRGxKLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxtRkFBbUYxOEMsTUFDdkYsS0FFSjI4QyxZQUFhLDJEQUEyRDM4QyxNQUNwRSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsNERBQTRENThDLE1BQ2xFLEtBRUo2OEMsY0FBZSxxQ0FBcUM3OEMsTUFBTSxLQUMxRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksT0FDSkMsSUFBSyxVQUNMQyxFQUFHLGFBQ0hDLEdBQUksZUFDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZ0JBRVRDLFNBQVUsV0FDTixPQUFRbi9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUFPLHdCQUNYLEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDRCxNQUFPLHNCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLG9CQUduQm84QyxRQUFTLGNBQ1RDLFNBQVUsV0FVTixNQVRtQixDQUNmLDZCQUNBLGlDQUNBLDRCQUNBLDRCQUNBLDhCQUNBLDJCQUNBLDRCQUVnQnIvQyxLQUFLZ0QsUUFFN0JzOEMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxXQUNONU0sRUFBRyxtQkFDSDZNLEdBQUlpSCxFQUFXeEMsVUFDZm5oQyxFQUFHMmpDLEVBQVd4QyxVQUNkeEUsR0FBSWdILEVBQVd4QyxVQUNmdkUsRUFBRytHLEVBQVd4QyxVQUNkdEUsR0FBSThHLEVBQVd4QyxVQUNmckUsRUFBRyxNQUNIQyxHQUFJNEcsRUFBV3hDLFVBQ2ZuRSxFQUFHLFNBQ0hDLEdBQUkwRyxFQUFXeEMsVUFDZmpFLEVBQUcsU0FDSEMsR0FBSXdHLEVBQVd4QyxXQUVuQi9ELHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXBIeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDhJQUE4STE4QyxNQUNsSixLQUVKMjhDLFlBQWEsaUVBQWlFMzhDLE1BQzFFLEtBRUpzaUQsWUFBYSx5Q0FDYkssa0JBQW1CLHlDQUNuQmQsaUJBQWtCLHlDQUNsQmUsdUJBQXdCLHlDQUN4QmhHLFNBQVUsa0RBQWtENThDLE1BQU0sS0FDbEU2OEMsY0FBZSx3QkFBd0I3OEMsTUFBTSxLQUM3Qzg4QyxZQUFhLHdCQUF3Qjk4QyxNQUFNLEtBQzNDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyx3QkFDTEMsS0FBTSwrQkFFVkMsU0FBVSxDQUNOQyxRQUFTLHdCQUNUQyxRQUFTLGVBQ1RDLFNBQVUsY0FDVkMsUUFBUyxpQkFDVEMsU0FBVSwyQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsY0FDUkMsS0FBTSxXQUNONU0sRUFBRyxtQkFDSDZNLEdBQUksWUFDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxZQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxRQUNIQyxHQUFJLFFBQ0pDLEVBQUcsWUFDSEMsR0FBSSxZQUNKQyxFQUFHLFNBQ0hDLEdBQUksVUFFUkMsdUJBQXdCLFdBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBekR5QmxuQyxDQUFRLEVBQVEsTyxzQkNJbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsdUZBQXVGMThDLE1BQzNGLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLHdEQUF3RDU4QyxNQUM5RCxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxZQUNIQyxHQUFJLGNBQ0pDLElBQUssbUJBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxlQUNUQyxTQUFVLG9CQUNWQyxRQUFTLGdCQUNUQyxTQUFVLFdBQ04sT0FBUXIvQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLDRCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLDhCQUduQnM4QyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxRQUNSQyxLQUFNLFVBQ041TSxFQUFHLGtCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsY0FDSDI4QixHQUFJLFlBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLFdBQ0hDLEdBQUksVUFDSkMsRUFBRyxhQUNIQyxHQUFJLFlBQ0pDLEVBQUcsY0FDSEMsR0FBSSxhQUVSQyx1QkFBd0IsOEJBQ3hCQyxRQUFTLFNBQVUvN0MsR0FDZixJQUFJdytDLEVBQVl4K0MsRUFBUyxHQUNyQnkrQyxFQUFjeitDLEVBQVMsSUFDM0IsT0FBZSxJQUFYQSxFQUNPQSxFQUFTLE1BQ08sSUFBaEJ5K0MsRUFDQXorQyxFQUFTLE1BQ1R5K0MsRUFBYyxJQUFNQSxFQUFjLEdBQ2xDeitDLEVBQVMsTUFDSyxJQUFkdytDLEVBQ0F4K0MsRUFBUyxNQUNLLElBQWR3K0MsRUFDQXgrQyxFQUFTLE1BQ0ssSUFBZHcrQyxHQUFpQyxJQUFkQSxFQUNuQngrQyxFQUFTLE1BRVRBLEVBQVMsT0FHeEJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FuRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx5RkFBeUYxOEMsTUFDN0YsS0FFSjI4QyxZQUFhLHlFQUF5RTM4QyxNQUNsRixLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsd0VBQXdFNThDLE1BQzlFLEtBRUo2OEMsY0FBZSwyQ0FBMkM3OEMsTUFBTSxLQUNoRTg4QyxZQUFhLHdCQUF3Qjk4QyxNQUFNLEtBQzNDcTlDLGVBQWdCLENBQ1pDLEdBQUksYUFDSkMsSUFBSyxnQkFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssMEJBQ0xDLEtBQU0saUNBRVZDLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLFlBQ1RDLFNBQVUsV0FDVkMsUUFBUyxjQUNUQyxTQUFVLG9CQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxhQUNSQyxLQUFNLFdBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxjQUNKMThCLEVBQUcsZUFDSDI4QixHQUFJLGNBQ0pDLEVBQUcsZUFDSEMsR0FBSSxjQUNKQyxFQUFHLFlBQ0hDLEdBQUksV0FDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxXQUVSaEMsY0FBZSxnREFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBR08sV0FBYjQ0QyxHQUF5QjU0QyxHQUFRLEdBQ3JCLGlCQUFiNDRDLEdBQ2EsZUFBYkEsRUFFTzU0QyxFQUFPLEdBRVBBLEdBR2Y0NEMsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEVBQ0EsU0FDQUEsRUFBTyxHQUNQLFNBQ0FBLEVBQU8sR0FDUCxlQUNBQSxFQUFPLEdBQ1AsYUFFQSxZQTdFbUI2VCxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLFNBQVN1RyxFQUFVNy9DLEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQzNDLE9BQVF6NEMsR0FDSixJQUFLLElBQ0QsT0FBT3c0QyxFQUFnQixnQkFBa0Isa0JBQzdDLElBQUssS0FDRCxPQUFPdjhDLEdBQVV1OEMsRUFBZ0IsVUFBWSxhQUNqRCxJQUFLLElBQ0wsSUFBSyxLQUNELE9BQU92OEMsR0FBVXU4QyxFQUFnQixTQUFXLFlBQ2hELElBQUssSUFDTCxJQUFLLEtBQ0QsT0FBT3Y4QyxHQUFVdThDLEVBQWdCLE9BQVMsV0FDOUMsSUFBSyxJQUNMLElBQUssS0FDRCxPQUFPdjhDLEdBQVV1OEMsRUFBZ0IsUUFBVSxXQUMvQyxJQUFLLElBQ0wsSUFBSyxLQUNELE9BQU92OEMsR0FBVXU4QyxFQUFnQixPQUFTLFVBQzlDLElBQUssSUFDTCxJQUFLLEtBQ0QsT0FBT3Y4QyxHQUFVdThDLEVBQWdCLE9BQVMsV0FDOUMsUUFDSSxPQUFPdjhDLEdBSVZzNUMsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLCtMQUErTDE4QyxNQUNuTSxLQUVKMjhDLFlBQWEsNkVBQTZFMzhDLE1BQ3RGLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSw2Q0FBNkM1OEMsTUFBTSxLQUM3RDY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxvQkFDSkMsSUFBSywwQkFDTEMsS0FBTSxpQ0FFVlosY0FBZSxTQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFpQixPQUFWQSxHQUVYNjNCLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxHQUNBLEtBRUEsTUFHZnU1QyxTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxlQUNUQyxTQUFVLGlCQUNWQyxRQUFTLGVBQ1RDLFNBQVUscUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sVUFDTjVNLEVBQUdzUixFQUNIekUsR0FBSXlFLEVBQ0puaEMsRUFBR21oQyxFQUNIeEUsR0FBSXdFLEVBQ0p2RSxFQUFHdUUsRUFDSHRFLEdBQUlzRSxFQUNKckUsRUFBR3FFLEVBQ0hwRSxHQUFJb0UsRUFDSm5FLEVBQUdtRSxFQUNIbEUsR0FBSWtFLEVBQ0pqRSxFQUFHaUUsRUFDSGhFLEdBQUlnRSxHQUVSL0QsdUJBQXdCLGVBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU90K0MsRUFBUyxRQUNwQixRQUNJLE9BQU9BLE1BaEdlZ1YsQ0FBUSxFQUFRLE8scUJDSWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJc0QsRUFBWSxDQUNSQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIeEksRUFBRyxLQUVQMEksRUFBWSxDQUNSLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssS0FHYixTQUFTa0YsRUFBZXppRCxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUNuRCxJQUFJeUQsRUFBUyxHQUNiLEdBQUkxRCxFQUNBLE9BQVEzcUIsR0FDSixJQUFLLElBQ0RxdUIsRUFBUyxhQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLFdBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsV0FDVCxNQUNKLElBQUssS0FDREEsRUFBUyxZQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFNBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsU0FDVCxNQUNKLElBQUssSUFDREEsRUFBUyxVQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLFVBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsV0FDVCxNQUNKLElBQUssS0FDREEsRUFBUyxXQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFVBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsZ0JBSWpCLE9BQVFydUIsR0FDSixJQUFLLElBQ0RxdUIsRUFBUyxlQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLGFBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsYUFDVCxNQUNKLElBQUssS0FDREEsRUFBUyxhQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFdBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsV0FDVCxNQUNKLElBQUssSUFDREEsRUFBUyxZQUNULE1BQ0osSUFBSyxLQUNEQSxFQUFTLFlBQ1QsTUFDSixJQUFLLElBQ0RBLEVBQVMsY0FDVCxNQUNKLElBQUssS0FDREEsRUFBUyxjQUNULE1BQ0osSUFBSyxJQUNEQSxFQUFTLFlBQ1QsTUFDSixJQUFLLEtBQ0RBLEVBQVMsWUFJckIsT0FBT0EsRUFBTzVqRCxRQUFRLE1BQU8yRCxHQUd4QnM1QyxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsd0ZBQXdGMThDLE1BQzVGLEtBRUoyOEMsWUFBYSxnRkFBZ0YzOEMsTUFDekYsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHVEQUF1RDU4QyxNQUFNLEtBQ3ZFNjhDLGNBQWUsa0NBQWtDNzhDLE1BQU0sS0FDdkQ4OEMsWUFBYSxxQkFBcUI5OEMsTUFBTSxLQUN4Q3E5QyxlQUFnQixDQUNaQyxHQUFJLGVBQ0pDLElBQUssa0JBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWQyxTQUFVLENBQ05DLFFBQVMsVUFDVEMsUUFBUyxhQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsV0FDVEMsU0FBVSxtQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsVUFDUkMsS0FBTSxXQUNONU0sRUFBR2tVLEVBQ0hySCxHQUFJcUgsRUFDSi9qQyxFQUFHK2pDLEVBQ0hwSCxHQUFJb0gsRUFDSm5ILEVBQUdtSCxFQUNIbEgsR0FBSWtILEVBQ0pqSCxFQUFHaUgsRUFDSGhILEdBQUlnSCxFQUNKL0csRUFBRytHLEVBQ0g5RyxHQUFJOEcsRUFDSjdHLEVBQUc2RyxFQUNINUcsR0FBSTRHLEdBRVJuRixTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFBT3YxQixRQUFRLGlCQUFpQixTQUFVdWlCLEdBQzdDLE9BQU8yK0IsRUFBVTMrQixPQUd6Qis5QixXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFBT3YxQixRQUFRLE9BQU8sU0FBVXVpQixHQUNuQyxPQUFPZytCLEVBQVVoK0IsT0FHekJpN0IsY0FBZSxxQ0FDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sVUFBYjQ0QyxHQUFxQyxVQUFiQSxFQUNqQjU0QyxFQUVNLFdBQWI0NEMsR0FDYSxhQUFiQSxHQUNhLFdBQWJBLEVBRU81NEMsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLFFBTC9CLEdBUVg0NEMsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxHQUFRLEdBQUtBLEVBQU8sRUFDYixRQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQLFNBQ0FBLEVBQU8sR0FDUCxXQUVBLFVBR2Y2NkMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F2TXlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLG9GQUFvRjE4QyxNQUN4RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSw2Q0FBNkM1OEMsTUFBTSxLQUM3RDY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDRCQUNMQyxLQUFNLG1DQUVWWixjQUFlLDhCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxTQUFiNDRDLEVBQ081NEMsRUFDYSxjQUFiNDRDLEVBQ0E1NEMsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsV0FBYjQ0QyxHQUFzQyxVQUFiQSxFQUN6QjU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVVDLEVBQU9DLEVBQVNDLEdBQ2hDLE9BQUlGLEVBQVEsR0FDRCxPQUNBQSxFQUFRLEdBQ1IsWUFDQUEsRUFBUSxHQUNSLFNBRUEsU0FHZlUsU0FBVSxDQUNOQyxRQUFTLHNCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLGtCQUNWQyxRQUFTLHNCQUNUQyxTQUFVLHdCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxXQUNSQyxLQUFNLGdCQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksVUFDSjE4QixFQUFHLFVBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksWUFFUkcsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6RXlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxvRkFBb0YxOEMsTUFDeEYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsNkNBQTZDNThDLE1BQU0sS0FDN0Q2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVlosY0FBZSw4QkFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sU0FBYjQ0QyxFQUNPNTRDLEVBQ2EsY0FBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFdBQWI0NEMsR0FBc0MsVUFBYkEsRUFDekI1NEMsRUFBTyxRQURYLEdBSVg0NEMsU0FBVSxTQUFVQyxFQUFPQyxFQUFTQyxHQUNoQyxPQUFJRixFQUFRLEdBQ0QsT0FDQUEsRUFBUSxHQUNSLFlBQ0FBLEVBQVEsR0FDUixTQUVBLFNBR2ZVLFNBQVUsQ0FDTkMsUUFBUyxzQkFDVEMsUUFBUyxrQkFDVEMsU0FBVSxrQkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx3QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxnQkFDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLFVBQ0oxOEIsRUFBRyxVQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxRQUNIQyxHQUFJLFNBQ0pDLEVBQUcsU0FDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FDSkMsRUFBRyxVQUNIQyxHQUFJLFlBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBekV5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsd0ZBQXdGMThDLE1BQzVGLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLGlFQUFpRTU4QyxNQUN2RSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxpQkFDVEMsUUFBUyxpQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxxQkFDVEMsU0FBVSw0QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxlQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsU0FDSDI4QixHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxhQUNKQyxFQUFHLFVBQ0hDLEdBQUksWUFDSkMsRUFBRyxRQUNIQyxHQUFJLFVBQ0pDLEVBQUcsT0FDSEMsR0FBSSxVQUVSQyx1QkFBd0IsV0FDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FyRHlCbG5DLENBQVEsRUFBUSxPLHNCQ0tsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSXNELEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSHhJLEVBQUcsS0FFUDBJLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0pqRSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsMkZBQTJGMThDLE1BQy9GLEtBRUoyOEMsWUFBYSxtREFBbUQzOEMsTUFBTSxLQUN0RTQ4QyxTQUFVLHdEQUF3RDU4QyxNQUM5RCxLQUVKNjhDLGNBQWUsMkJBQTJCNzhDLE1BQU0sS0FDaEQ4OEMsWUFBYSwyQkFBMkI5OEMsTUFBTSxLQUU5Q3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxrQkFDVEMsUUFBUyxzQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxtQkFDVEMsU0FBVSw2QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsZ0JBQ1JDLEtBQU0sa0JBQ041TSxFQUFHLGtCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLFdBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FDSkMsRUFBRyxPQUNIQyxHQUFJLE9BQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUVSeUIsU0FBVSxTQUFVMXJCLEdBQ2hCLE9BQU9BLEVBQU92MUIsUUFBUSxpQkFBaUIsU0FBVXVpQixHQUM3QyxPQUFPMitCLEVBQVUzK0IsT0FHekIrOUIsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQU92MUIsUUFBUSxPQUFPLFNBQVV1aUIsR0FDbkMsT0FBT2crQixFQUFVaCtCLE9BR3pCbzlCLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBdkZ5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEscUZBQXFGMThDLE1BQ3pGLEtBRUoyOEMsWUFBYSw2REFBNkQzOEMsTUFDdEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHFEQUFxRDU4QyxNQUFNLEtBQ3JFNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssMkJBQ0xDLEtBQU0saUNBRVZDLFNBQVUsQ0FDTkMsUUFBUyxpQkFDVEMsUUFBUyxvQkFDVEMsU0FBVSxnQkFDVkMsUUFBUyxpQkFDVEMsU0FBVSwwQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxXQUNONU0sRUFBRyxnQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLGFBQ0gyOEIsR0FBSSxjQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFdBQ0p4bUMsRUFBRyxTQUNIc3BDLEdBQUksVUFDSjdDLEVBQUcsV0FDSEMsR0FBSSxhQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FFUkMsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBekR5QmxuQyxDQUFRLEVBQVEsTyxzQkNDbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlzRCxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0h4SSxFQUFHLEtBRVAwSSxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdKakUsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHVGQUF1RjE4QyxNQUMzRixLQUVKMjhDLFlBQWEsdUVBQXVFMzhDLE1BQ2hGLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSx3REFBd0Q1OEMsTUFDOUQsS0FFSjY4QyxjQUFlLDBDQUEwQzc4QyxNQUFNLEtBQy9EODhDLFlBQWEsNEJBQTRCOThDLE1BQU0sS0FDL0M0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxlQUNKQyxJQUFLLGtCQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyw0QkFDTEMsS0FBTSxtQ0FFVjZDLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUFPdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDN0MsT0FBTzIrQixFQUFVMytCLE9BR3pCKzlCLFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsT0FBTyxTQUFVdWlCLEdBQ25DLE9BQU9nK0IsRUFBVWgrQixPQUd6Qmk3QixjQUFlLHlCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxTQUFiNDRDLEVBQ081NEMsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osVUFBYjQ0QyxFQUNBNTRDLEVBQ2EsV0FBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFNBQWI0NEMsRUFDQTU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxPQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQLFNBQ0FBLEVBQU8sR0FDUCxPQUVBLFFBR2Z1NUMsU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsWUFDVEMsU0FBVSxxQkFDVkMsUUFBUyxZQUNUQyxTQUFVLG9CQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxPQUNSQyxLQUFNLFdBQ041TSxFQUFHLFlBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxXQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxTQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxVQUNIQyxHQUFJLFdBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBdEh5QmxuQyxDQUFRLEVBQVEsTyxzQkNJbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUk0SCxFQUFzQiw2REFBNkRwa0QsTUFDL0UsS0FFSnFrRCxFQUF5QixrREFBa0Rya0QsTUFDdkUsS0FFSnFpRCxFQUFjLENBQ1YsUUFDQSxRQUNBLGlCQUNBLFFBQ0EsU0FDQSxjQUNBLGNBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxTQUVKQyxFQUFjLHFLQUVQOUYsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLDBGQUEwRjE4QyxNQUM5RixLQUVKMjhDLFlBQWEsU0FBVS82QixFQUFHcGlCLEdBQ3RCLE9BQUtvaUIsRUFFTSxRQUFRcGMsS0FBS2hHLEdBQ2I2a0QsRUFBdUJ6aUMsRUFBRS9mLFNBRXpCdWlELEVBQW9CeGlDLEVBQUUvZixTQUp0QnVpRCxHQVFmOUIsWUFBYUEsRUFDYlQsaUJBQWtCUyxFQUNsQkssa0JBQW1CLDRGQUNuQkMsdUJBQXdCLG1GQUV4QlAsWUFBYUEsRUFDYlEsZ0JBQWlCUixFQUNqQlMsaUJBQWtCVCxFQUVsQnpGLFNBQVUsNkRBQTZENThDLE1BQ25FLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsbUJBQ1RDLFNBQVUsMkJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sYUFDTjVNLEVBQUcsb0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxVQUNIQyxHQUFJLFNBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFlBQ0hDLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixrQkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQ0lBLEdBQ1ksSUFBWEEsR0FBMkIsSUFBWEEsR0FBZ0JBLEdBQVUsR0FBSyxNQUFRLE9BR2hFZzhDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBbkd5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUk0SCxFQUFzQiw2REFBNkRwa0QsTUFDL0UsS0FFSnFrRCxFQUF5QixrREFBa0Rya0QsTUFDdkUsS0FFSnFpRCxFQUFjLENBQ1YsUUFDQSxRQUNBLGlCQUNBLFFBQ0EsU0FDQSxjQUNBLGNBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxTQUVKQyxFQUFjLHFLQUVUOUYsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDBGQUEwRjE4QyxNQUM5RixLQUVKMjhDLFlBQWEsU0FBVS82QixFQUFHcGlCLEdBQ3RCLE9BQUtvaUIsRUFFTSxRQUFRcGMsS0FBS2hHLEdBQ2I2a0QsRUFBdUJ6aUMsRUFBRS9mLFNBRXpCdWlELEVBQW9CeGlDLEVBQUUvZixTQUp0QnVpRCxHQVFmOUIsWUFBYUEsRUFDYlQsaUJBQWtCUyxFQUNsQkssa0JBQW1CLDRGQUNuQkMsdUJBQXdCLG1GQUV4QlAsWUFBYUEsRUFDYlEsZ0JBQWlCUixFQUNqQlMsaUJBQWtCVCxFQUVsQnpGLFNBQVUsNkRBQTZENThDLE1BQ25FLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsbUJBQ1RDLFNBQVUsMkJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sYUFDTjVNLEVBQUcsb0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxVQUNIQyxHQUFJLFNBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKeG1DLEVBQUcsV0FDSHNwQyxHQUFJLFdBQ0o3QyxFQUFHLFlBQ0hDLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixrQkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQ0lBLEdBQ1ksSUFBWEEsR0FBMkIsSUFBWEEsR0FBZ0JBLEdBQVUsR0FBSyxNQUFRLE9BR2hFZzhDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBckd5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEscUZBQXFGMThDLE1BQ3pGLEtBRUoyOEMsWUFBYSw2REFBNkQzOEMsTUFDdEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHFEQUFxRDU4QyxNQUFNLEtBQ3JFNjhDLGNBQWUsK0JBQStCNzhDLE1BQU0sS0FDcEQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssMEJBQ0xDLEtBQU0saUNBRVZDLFNBQVUsQ0FDTkMsUUFBUyxvQkFDVEMsUUFBUyx1QkFDVEMsU0FBVSxtQkFDVkMsUUFBUyxvQkFDVEMsU0FBVSxnQ0FDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxXQUNONU0sRUFBRyxlQUNINk0sR0FBSSxZQUNKMThCLEVBQUcsYUFDSDI4QixHQUFJLFlBQ0pDLEVBQUcsV0FDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FDSnhtQyxFQUFHLFVBQ0hzcEMsR0FBSSxXQUNKN0MsRUFBRyxZQUNIQyxHQUFJLGFBQ0pDLEVBQUcsU0FDSEMsR0FBSSxTQUVSQyx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6RHlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJYkEsRUFBT0MsYUFBYSxTQUFVLENBQ3RDQyxPQUFRLENBQ0o0RSxXQUFZLHFGQUFxRnRoRCxNQUM3RixLQUVKUixPQUFRLHNIQUFzSFEsTUFDMUgsS0FFSnVoRCxTQUFVLG1CQUVkNUUsWUFBYSwrREFBK0QzOEMsTUFDeEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLDJEQUEyRDU4QyxNQUNqRSxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLG1CQUNKdUYsR0FBSSxhQUNKdEYsSUFBSyw0QkFDTHVGLElBQUssbUJBQ0x0RixLQUFNLGlDQUNOdUYsS0FBTSx3QkFFVnRGLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLGVBQ1RDLFNBQVUsY0FDVkMsUUFBUyxhQUNUQyxTQUFVLHFCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxZQUNSQyxLQUFNLFFBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxjQUNKMThCLEVBQUcsYUFDSDI4QixHQUFJLGFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFdBQ0pDLEVBQUcsUUFDSEMsR0FBSSxVQUVSQyx1QkFBd0IscUJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixJQUFJMkIsRUFDVyxJQUFYamdELEVBQ00sSUFDVyxJQUFYQSxFQUNBLElBQ1csSUFBWEEsRUFDQSxJQUNXLElBQVhBLEVBQ0EsSUFDQSxJQUlWLE1BSGUsTUFBWHMrQyxHQUE2QixNQUFYQSxJQUNsQjJCLEVBQVMsS0FFTmpnRCxFQUFTaWdELEdBRXBCakUsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FqRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSXNELEVBQVksQ0FDUkMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSHhJLEVBQUcsS0FFUDBJLEVBQVksQ0FDUixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBR0ZqRSxFQUFPQyxhQUFhLFFBQVMsQ0FFcENDLE9BQVEsc0VBQXNFMThDLE1BQzFFLEtBRUoyOEMsWUFBYSxzRUFBc0UzOEMsTUFDL0UsS0FFSjQ4QyxTQUFVLHlEQUF5RDU4QyxNQUMvRCxLQUVKNjhDLGNBQWUsaUNBQWlDNzhDLE1BQU0sS0FDdEQ4OEMsWUFBYSxpQ0FBaUM5OEMsTUFBTSxLQUNwRHE5QyxlQUFnQixDQUNaQyxHQUFJLGFBQ0pDLElBQUssZ0JBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLDBCQUNMQyxLQUFNLGlDQUVWQyxTQUFVLENBQ05DLFFBQVMsVUFDVEMsUUFBUyxVQUNUQyxTQUFVLGtCQUNWQyxRQUFTLFVBQ1RDLFNBQVUsbUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFVBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsWUFDSDZNLEdBQUksV0FDSjE4QixFQUFHLFVBQ0gyOEIsR0FBSSxVQUNKQyxFQUFHLFdBQ0hDLEdBQUksVUFDSkMsRUFBRyxVQUNIQyxHQUFJLFNBQ0pDLEVBQUcsWUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUFPdjFCLFFBQVEsaUJBQWlCLFNBQVV1aUIsR0FDN0MsT0FBTzIrQixFQUFVMytCLE9BR3pCKzlCLFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsT0FBTyxTQUFVdWlCLEdBQ25DLE9BQU9nK0IsRUFBVWgrQixPQUt6Qmk3QixjQUFlLHVCQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxRQUFiNDRDLEVBQ081NEMsRUFBTyxFQUFJQSxFQUFPQSxFQUFPLEdBQ1osU0FBYjQ0QyxFQUNBNTRDLEVBQ2EsV0FBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLFNBQWI0NEMsRUFDQTU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxNQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLFNBQ0FBLEVBQU8sR0FDUCxPQUVBLE9BR2Y2NkMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F2SHlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSW9KLEVBQW1CLG1HQUFtRzVsRCxNQUNsSCxLQUVKNmxELEVBQW1CLHFHQUFxRzdsRCxNQUNwSCxLQUVKcWlELEVBQWMsQ0FDVixRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsU0FFUixTQUFTZSxFQUFPN3NDLEdBQ1osT0FBT0EsRUFBSSxHQUFLLEdBQUtBLEVBQUksR0FBSyxNQUFRQSxFQUFJLElBQU0sSUFBTyxFQUUzRCxTQUFTd3NDLEVBQVU3L0MsRUFBUXU4QyxFQUFleDRDLEdBQ3RDLElBQUkzRixFQUFTNEIsRUFBUyxJQUN0QixPQUFRK0QsR0FDSixJQUFLLEtBQ0QsT0FBTzNGLEdBQVU4aEQsRUFBT2xnRCxHQUFVLFVBQVksVUFDbEQsSUFBSyxJQUNELE9BQU91OEMsRUFBZ0IsU0FBVyxTQUN0QyxJQUFLLEtBQ0QsT0FBT24rQyxHQUFVOGhELEVBQU9sZ0QsR0FBVSxTQUFXLFNBQ2pELElBQUssSUFDRCxPQUFPdThDLEVBQWdCLFVBQVksVUFDdkMsSUFBSyxLQUNELE9BQU9uK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsVUFBWSxVQUNsRCxJQUFLLEtBQ0QsT0FBTzVCLEdBQVU4aEQsRUFBT2xnRCxHQUFVLFdBQWEsV0FDbkQsSUFBSyxLQUNELE9BQU81QixHQUFVOGhELEVBQU9sZ0QsR0FBVSxXQUFhLFlBQ25ELElBQUssS0FDRCxPQUFPNUIsR0FBVThoRCxFQUFPbGdELEdBQVUsT0FBUyxRQUk5Q3M1QyxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsU0FBVThHLEVBQWdCaGtELEdBQzlCLE9BQUtna0QsRUFFTSxTQUFTaCtDLEtBQUtoRyxHQUNkcW1ELEVBQWlCckMsRUFBZTNoRCxTQUVoQytqRCxFQUFpQnBDLEVBQWUzaEQsU0FKaEMrakQsR0FPZmpKLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckVxaUQsWUFBYUEsRUFDYlEsZ0JBQWlCUixFQUNqQlMsaUJBQWtCVCxFQUNsQnpGLFNBQVUsNkRBQTZENThDLE1BQ25FLEtBRUo2OEMsY0FBZSwyQkFBMkI3OEMsTUFBTSxLQUNoRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsZUFDVEMsU0FBVSxXQUNOLE9BQVFuL0MsS0FBS2dELE9BQ1QsS0FBSyxFQUNELE1BQU8scUJBRVgsS0FBSyxFQUNELE1BQU8sbUJBRVgsS0FBSyxFQUNELE1BQU8saUJBRVgsS0FBSyxFQUNELE1BQU8sa0JBRVgsUUFDSSxNQUFPLG9CQUduQm84QyxRQUFTLGlCQUNUQyxTQUFVLFdBQ04sT0FBUXIvQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0QsTUFBTyw0QkFDWCxLQUFLLEVBQ0QsTUFBTyx3QkFDWCxLQUFLLEVBQ0QsTUFBTyx5QkFDWCxRQUNJLE1BQU8sMkJBR25CczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsZUFDSDZNLEdBQUl5RSxFQUNKbmhDLEVBQUdtaEMsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBR3VFLEVBQ0h0RSxHQUFJc0UsRUFDSnJFLEVBQUcsVUFDSEMsR0FBSSxTQUNKeG1DLEVBQUcsVUFDSHNwQyxHQUFJc0IsRUFDSm5FLEVBQUcsVUFDSEMsR0FBSWtFLEVBQ0pqRSxFQUFHLE1BQ0hDLEdBQUlnRSxHQUVSL0QsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBekl5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSwyRkFBMkYxOEMsTUFDL0YsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsaUZBQWlGNThDLE1BQ3ZGLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksd0JBQ0pDLElBQUssbUNBQ0xDLEtBQU0sMENBRVZDLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZ0JBQ1RDLFNBQVUsV0FDTixPQUFzQixJQUFmci9DLEtBQUtnRCxPQUE4QixJQUFmaEQsS0FBS2dELE1BQzFCLHdCQUNBLHlCQUVWczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sUUFDTjVNLEVBQUcsa0JBQ0g2TSxHQUFJLGNBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsU0FDSEMsR0FBSSxVQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFdBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUK0UsWUFBYSxrQkF4RHFCOXJDLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSwyRkFBMkYxOEMsTUFDL0YsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsaUZBQWlGNThDLE1BQ3ZGLEtBRUo2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksd0JBQ0pDLElBQUssOEJBQ0xDLEtBQU0scUNBRVZDLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZ0JBQ1RDLFNBQVUsV0FDTixPQUFzQixJQUFmci9DLEtBQUtnRCxPQUE4QixJQUFmaEQsS0FBS2dELE1BQzFCLHdCQUNBLHlCQUVWczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sUUFDTjVNLEVBQUcsV0FDSDZNLEdBQUksY0FDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFdBQ0hDLEdBQUksV0FDSkMsRUFBRyxTQUNIQyxHQUFJLFVBQ0p4bUMsRUFBRyxhQUNIc3BDLEdBQUksYUFDSjdDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FFUkMsdUJBQXdCLFdBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBNUR5QmxuQyxDQUFRLEVBQVEsTyxzQkNLbEQsU0FBV3NrQyxHQUFVLGFBSXpCLFNBQVM0RSxFQUF1QmwrQyxFQUFRdThDLEVBQWV4NEMsR0FDbkQsSUFTSTYrQyxFQUFZLElBSWhCLE9BSEk1aUQsRUFBUyxLQUFPLElBQU9BLEdBQVUsS0FBT0EsRUFBUyxLQUFRLEtBQ3pENGlELEVBQVksUUFFVDVpRCxFQUFTNGlELEVBYkgsQ0FDTHhILEdBQUksVUFDSkMsR0FBSSxTQUNKRSxHQUFJLE1BQ0pFLEdBQUksT0FDSjhDLEdBQUksWUFDSjVDLEdBQUksT0FDSkUsR0FBSSxPQU11QjkzQyxHQUc5QnUxQyxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsb0dBQW9HMThDLE1BQ3hHLEtBRUoyOEMsWUFBYSwrREFBK0QzOEMsTUFDeEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLGtEQUFrRDU4QyxNQUFNLEtBQ2xFNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssbUJBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSx1QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxhQUNONU0sRUFBRyxpQkFDSDZNLEdBQUk4QyxFQUNKeC9CLEVBQUcsV0FDSDI4QixHQUFJNkMsRUFDSjVDLEVBQUcsUUFDSEMsR0FBSTJDLEVBQ0oxQyxFQUFHLE9BQ0hDLEdBQUl5QyxFQUNKanBDLEVBQUcsY0FDSHNwQyxHQUFJTCxFQUNKeEMsRUFBRyxTQUNIQyxHQUFJdUMsRUFDSnRDLEVBQUcsUUFDSEMsR0FBSXFDLEdBRVJsQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXZFeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQVl6QixTQUFTNEUsRUFBdUJsK0MsRUFBUXU4QyxFQUFleDRDLEdBVW5ELE1BQVksTUFBUkEsRUFDT3c0QyxFQUFnQixTQUFXLFNBRTNCdjhDLEVBQVMsS0FyQkYyWCxHQXFCNkIzWCxFQXBCM0NtK0MsRUFRUyxDQUNUL0MsR0FBSW1CLEVBQWdCLHlCQUEyQix5QkFDL0NsQixHQUFJa0IsRUFBZ0Isc0JBQXdCLHNCQUM1Q2hCLEdBQUksaUJBQ0pFLEdBQUksZ0JBQ0o4QyxHQUFJLHVCQUNKNUMsR0FBSSx1QkFDSkUsR0FBSSxnQkFLZ0M5M0MsR0FwQnZCakgsTUFBTSxLQUNoQjZhLEVBQU0sSUFBTyxHQUFLQSxFQUFNLEtBQVEsR0FDakN3bUMsRUFBTSxHQUNOeG1DLEVBQU0sSUFBTSxHQUFLQSxFQUFNLElBQU0sSUFBTUEsRUFBTSxJQUFNLElBQU1BLEVBQU0sS0FBTyxJQUNsRXdtQyxFQUFNLEdBQ05BLEVBQU0sSUFOaEIsSUFBc0J4bUMsRUFDZHdtQyxFQXVCUixJQUFJZ0IsRUFBYyxDQUNkLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsV0FDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxTQU1LN0YsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLENBQ0psOUMsT0FBUSxvRkFBb0ZRLE1BQ3hGLEtBRUpzaEQsV0FBWSxrRkFBa0Z0aEQsTUFDMUYsTUFHUjI4QyxZQUFhLENBRVRuOUMsT0FBUSxnRUFBZ0VRLE1BQ3BFLEtBRUpzaEQsV0FBWSxnRUFBZ0V0aEQsTUFDeEUsTUFHUjQ4QyxTQUFVLENBQ04wRSxXQUFZLGdFQUFnRXRoRCxNQUN4RSxLQUVKUixPQUFRLGdFQUFnRVEsTUFDcEUsS0FFSnVoRCxTQUFVLGlEQUVkMUUsY0FBZSx1QkFBdUI3OEMsTUFBTSxLQUM1Qzg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcWlELFlBQWFBLEVBQ2JRLGdCQUFpQlIsRUFDakJTLGlCQUFrQlQsRUFHbEJDLFlBQWEsMk1BR2JULGlCQUFrQiwyTUFHbEJjLGtCQUFtQix3SEFHbkJDLHVCQUF3Qiw2RkFDeEJ2RixlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLGlCQUNKQyxJQUFLLHVCQUNMQyxLQUFNLDhCQUVWQyxTQUFVLENBQ05DLFFBQVMsa0JBQ1RDLFFBQVMsaUJBQ1RFLFFBQVMsZ0JBQ1RELFNBQVUsU0FBVXBmLEdBQ2hCLEdBQUlBLEVBQUl1Z0IsU0FBV3RnRCxLQUFLc2dELE9BY3BCLE9BQW1CLElBQWZ0Z0QsS0FBS2dELE1BQ0Usb0JBRUEsbUJBaEJYLE9BQVFoRCxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0QsTUFBTyw2QkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLDZCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sK0JBVXZCcThDLFNBQVUsU0FBVXRmLEdBQ2hCLEdBQUlBLEVBQUl1Z0IsU0FBV3RnRCxLQUFLc2dELE9BY3BCLE9BQW1CLElBQWZ0Z0QsS0FBS2dELE1BQ0Usb0JBRUEsbUJBaEJYLE9BQVFoRCxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0QsTUFBTywyQkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLDJCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sNkJBVXZCczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sV0FDTjVNLEVBQUcsbUJBQ0g2TSxHQUFJOEMsRUFDSngvQixFQUFHdy9CLEVBQ0g3QyxHQUFJNkMsRUFDSjVDLEVBQUcsTUFDSEMsR0FBSTJDLEVBQ0oxQyxFQUFHLE9BQ0hDLEdBQUl5QyxFQUNKanBDLEVBQUcsU0FDSHNwQyxHQUFJTCxFQUNKeEMsRUFBRyxRQUNIQyxHQUFJdUMsRUFDSnRDLEVBQUcsTUFDSEMsR0FBSXFDLEdBRVJyRSxjQUFlLHdCQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFPLGlCQUFpQjVmLEtBQUs0ZixJQUVqQzYzQixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxPQUNBQSxFQUFPLEdBQ1AsT0FDQUEsRUFBTyxHQUNQLE1BRUEsVUFHZjI2Qyx1QkFBd0IsbUJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU90K0MsRUFBUyxLQUNwQixJQUFLLElBQ0QsT0FBT0EsRUFBUyxNQUNwQixJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLEVBQVMsS0FDcEIsUUFDSSxPQUFPQSxJQUduQmc4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQTFNeUJsbkMsQ0FBUSxFQUFRLE8scUJDQ2xELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJRSxFQUFTLENBQ0wsUUFDQSxVQUNBLE9BQ0EsUUFDQSxNQUNBLE1BQ0EsU0FDQSxPQUNBLFVBQ0EsU0FDQSxRQUNBLFNBRUpxSixFQUFPLENBQUMsTUFBTyxPQUFRLFFBQVMsT0FBUSxPQUFRLE1BQU8sUUFFbER2SixFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVFBLEVBQ1JDLFlBQWFELEVBQ2JFLFNBQVVtSixFQUNWbEosY0FBZWtKLEVBQ2ZqSixZQUFhaUosRUFDYjFJLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVlosY0FBZSxVQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFPLFFBQVVBLEdBRXJCNjNCLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxHQUNBLE1BRUosT0FFWHU1QyxTQUFVLENBQ05DLFFBQVMsVUFDVEMsUUFBUyxhQUNUQyxTQUFVLHlCQUNWQyxRQUFTLGFBQ1RDLFNBQVUsNEJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sUUFDTjVNLEVBQUcsWUFDSDZNLEdBQUksV0FDSjE4QixFQUFHLFNBQ0gyOEIsR0FBSSxTQUNKQyxFQUFHLFVBQ0hDLEdBQUksVUFDSkMsRUFBRyxXQUNIQyxHQUFJLFdBQ0pDLEVBQUcsV0FDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksVUFFUnlCLFNBQVUsU0FBVTFyQixHQUNoQixPQUFPQSxFQUFPdjFCLFFBQVEsS0FBTSxNQUVoQ3NnRCxXQUFZLFNBQVUvcUIsR0FDbEIsT0FBT0EsRUFBT3YxQixRQUFRLEtBQU0sTUFFaEMyL0MsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0EvRXlCbG5DLENBQVEsRUFBUSxPLHFCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxtSkFBbUoxOEMsTUFDdkosS0FFSjI4QyxZQUFhLDZEQUE2RDM4QyxNQUN0RSxLQUVKNDhDLFNBQVUsNkVBQTZFNThDLE1BQ25GLEtBRUo2OEMsY0FBZSxtQ0FBbUM3OEMsTUFBTSxLQUN4RDg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksb0JBQ0pDLElBQUssZ0NBQ0xDLEtBQU0sdUNBRVZDLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGlCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsZUFDVEMsU0FBVSx3QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsWUFDUkMsS0FBTSxXQUNONU0sRUFBRyxtQkFDSDZNLEdBQUksZUFDSjE4QixFQUFHLGVBQ0gyOEIsR0FBSSxjQUNKQyxFQUFHLGNBQ0hDLEdBQUksYUFDSkMsRUFBRyxjQUNIQyxHQUFJLGNBQ0pDLEVBQUcsYUFDSEMsR0FBSSxXQUNKQyxFQUFHLGFBQ0hDLEdBQUksWUFFUkMsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBdkR5QmxuQyxDQUFRLEVBQVEsTyxxQkNHbEQsU0FBV3NrQyxHQUFVLGFBS2hCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsa0dBQWtHMThDLE1BQ3RHLEtBRUoyOEMsWUFBYSx3REFBd0QzOEMsTUFDakUsS0FFSjQ4QyxTQUFVLGdFQUFnRTU4QyxNQUN0RSxLQUVKNjhDLGNBQWUsZ0NBQWdDNzhDLE1BQU0sS0FDckQ4OEMsWUFBYSxxQkFBcUI5OEMsTUFBTSxLQUN4QzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLFNBQ0pDLElBQUssWUFDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssc0JBQ0xDLEtBQU0sc0NBRVZDLFNBQVUsQ0FDTkMsUUFBUyxhQUNUQyxRQUFTLGNBQ1RDLFNBQVUsYUFDVkMsUUFBUyxjQUNUQyxTQUFVLHNCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFdBQ041TSxFQUFHLGVBQ0g2TSxHQUFJLFdBQ0oxOEIsRUFBRyxZQUNIMjhCLEdBQUksY0FDSkMsRUFBRyxNQUNIQyxHQUFJLFNBQ0pDLEVBQUcsT0FDSEMsR0FBSSxTQUNKQyxFQUFHLE9BQ0hDLEdBQUksU0FDSkMsRUFBRyxNQUNIQyxHQUFJLFVBRVJDLHVCQUF3QixlQUN4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsT0FBT0EsRUFBUyxTQUVwQjY1QyxjQUFlLDRCQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFpQixTQUFWQSxHQUE4QixZQUFWQSxHQUUvQjYzQixTQUFVLFNBQVVDLEVBQU9DLEVBQVNDLEdBQ2hDLE9BQUlGLEVBQVEsR0FDREUsRUFBVSxPQUFTLFVBRW5CQSxFQUFVLFFBQVUsYUFqRURsbEMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJRSxFQUFTLG9GQUFvRjE4QyxNQUN6RixLQUVKMjhDLEVBQWMsa0RBQWtEMzhDLE1BQU0sS0FDMUUsU0FBU29qRCxFQUFPN3NDLEdBQ1osT0FBT0EsRUFBSSxHQUFLQSxFQUFJLEVBRXhCLFNBQVN3c0MsRUFBVTcvQyxFQUFRdThDLEVBQWV4NEMsRUFBS3k0QyxHQUMzQyxJQUFJcCtDLEVBQVM0QixFQUFTLElBQ3RCLE9BQVErRCxHQUNKLElBQUssSUFDRCxPQUFPdzRDLEdBQWlCQyxFQUFXLGFBQWUsZ0JBQ3RELElBQUssS0FDRCxPQUFJRCxHQUFpQkMsRUFDVnArQyxHQUFVOGhELEVBQU9sZ0QsR0FBVSxVQUFZLFVBRXZDNUIsRUFBUyxZQUV4QixJQUFLLElBQ0QsT0FBT20rQyxFQUFnQixTQUFXQyxFQUFXLFNBQVcsVUFDNUQsSUFBSyxLQUNELE9BQUlELEdBQWlCQyxFQUNWcCtDLEdBQVU4aEQsRUFBT2xnRCxHQUFVLFNBQVcsU0FFdEM1QixFQUFTLFdBRXhCLElBQUssSUFDRCxPQUFPbStDLEVBQWdCLFNBQVdDLEVBQVcsU0FBVyxVQUM1RCxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsU0FBVyxTQUV0QzVCLEVBQVMsV0FFeEIsSUFBSyxJQUNELE9BQU9tK0MsR0FBaUJDLEVBQVcsTUFBUSxPQUMvQyxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsTUFBUSxPQUVuQzVCLEVBQVMsUUFFeEIsSUFBSyxJQUNELE9BQU9tK0MsR0FBaUJDLEVBQVcsU0FBVyxXQUNsRCxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsVUFBWSxZQUV2QzVCLEVBQVMsV0FFeEIsSUFBSyxJQUNELE9BQU9tK0MsR0FBaUJDLEVBQVcsTUFBUSxRQUMvQyxJQUFLLEtBQ0QsT0FBSUQsR0FBaUJDLEVBQ1ZwK0MsR0FBVThoRCxFQUFPbGdELEdBQVUsT0FBUyxTQUVwQzVCLEVBQVMsU0FLdkJrN0MsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRQSxFQUNSQyxZQUFhQSxFQUNiQyxTQUFVLHNEQUFzRDU4QyxNQUFNLEtBQ3RFNjhDLGNBQWUsdUJBQXVCNzhDLE1BQU0sS0FDNUM4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGdCQUNUQyxTQUFVLFdBQ04sT0FBUW4vQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0QsTUFBTyxrQkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8sa0JBQ1gsS0FBSyxFQUNELE1BQU8sa0JBQ1gsS0FBSyxFQUNELE1BQU8sb0JBQ1gsS0FBSyxFQUNELE1BQU8sa0JBQ1gsS0FBSyxFQUNELE1BQU8sb0JBR25CbzhDLFFBQVMsZUFDVEMsU0FBVSxXQUNOLE9BQVFyL0MsS0FBS2dELE9BQ1QsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyx1QkFDWCxLQUFLLEVBQ0QsTUFBTyx5QkFHbkJzOEMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxVQUNONU0sRUFBR3NSLEVBQ0h6RSxHQUFJeUUsRUFDSm5oQyxFQUFHbWhDLEVBQ0h4RSxHQUFJd0UsRUFDSnZFLEVBQUd1RSxFQUNIdEUsR0FBSXNFLEVBQ0pyRSxFQUFHcUUsRUFDSHBFLEdBQUlvRSxFQUNKbkUsRUFBR21FLEVBQ0hsRSxHQUFJa0UsRUFDSmpFLEVBQUdpRSxFQUNIaEUsR0FBSWdFLEdBRVIvRCx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0E3SXlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJekIsU0FBUzZHLEVBQW9CbmdELEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQ3JELElBQUlwK0MsRUFBUzRCLEVBQVMsSUFDdEIsT0FBUStELEdBQ0osSUFBSyxJQUNELE9BQU93NEMsR0FBaUJDLEVBQ2xCLGVBQ0Esa0JBQ1YsSUFBSyxLQVVELE9BUklwK0MsR0FEVyxJQUFYNEIsRUFDVXU4QyxFQUFnQixVQUFZLFVBQ3BCLElBQVh2OEMsRUFDR3U4QyxHQUFpQkMsRUFBVyxVQUFZLFdBQzNDeDhDLEVBQVMsRUFDTnU4QyxHQUFpQkMsRUFBVyxVQUFZLFdBRXhDLFVBR2xCLElBQUssSUFDRCxPQUFPRCxFQUFnQixhQUFlLGFBQzFDLElBQUssS0FVRCxPQVJJbitDLEdBRFcsSUFBWDRCLEVBQ1V1OEMsRUFBZ0IsU0FBVyxTQUNuQixJQUFYdjhDLEVBQ0d1OEMsR0FBaUJDLEVBQVcsU0FBVyxXQUMxQ3g4QyxFQUFTLEVBQ051OEMsR0FBaUJDLEVBQVcsU0FBVyxXQUV2Q0QsR0FBaUJDLEVBQVcsUUFBVSxZQUd4RCxJQUFLLElBQ0QsT0FBT0QsRUFBZ0IsVUFBWSxVQUN2QyxJQUFLLEtBVUQsT0FSSW4rQyxHQURXLElBQVg0QixFQUNVdThDLEVBQWdCLE1BQVEsTUFDaEIsSUFBWHY4QyxFQUNHdThDLEdBQWlCQyxFQUFXLE1BQVEsUUFDdkN4OEMsRUFBUyxFQUNOdThDLEdBQWlCQyxFQUFXLE1BQVEsUUFFcENELEdBQWlCQyxFQUFXLEtBQU8sU0FHckQsSUFBSyxJQUNELE9BQU9ELEdBQWlCQyxFQUFXLFNBQVcsWUFDbEQsSUFBSyxLQVFELE9BTklwK0MsR0FEVyxJQUFYNEIsRUFDVXU4QyxHQUFpQkMsRUFBVyxNQUFRLE9BQzVCLElBQVh4OEMsRUFDR3U4QyxHQUFpQkMsRUFBVyxNQUFRLFVBRXBDRCxHQUFpQkMsRUFBVyxNQUFRLFNBR3RELElBQUssSUFDRCxPQUFPRCxHQUFpQkMsRUFBVyxXQUFhLGVBQ3BELElBQUssS0FVRCxPQVJJcCtDLEdBRFcsSUFBWDRCLEVBQ1V1OEMsR0FBaUJDLEVBQVcsUUFBVSxVQUM5QixJQUFYeDhDLEVBQ0d1OEMsR0FBaUJDLEVBQVcsU0FBVyxXQUMxQ3g4QyxFQUFTLEVBQ051OEMsR0FBaUJDLEVBQVcsU0FBVyxTQUV2Q0QsR0FBaUJDLEVBQVcsVUFBWSxVQUcxRCxJQUFLLElBQ0QsT0FBT0QsR0FBaUJDLEVBQVcsV0FBYSxhQUNwRCxJQUFLLEtBVUQsT0FSSXArQyxHQURXLElBQVg0QixFQUNVdThDLEdBQWlCQyxFQUFXLE9BQVMsUUFDN0IsSUFBWHg4QyxFQUNHdThDLEdBQWlCQyxFQUFXLE9BQVMsU0FDeEN4OEMsRUFBUyxFQUNOdThDLEdBQWlCQyxFQUFXLE9BQVMsT0FFckNELEdBQWlCQyxFQUFXLE1BQVEsU0FNckRsRCxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsd0ZBQXdGMThDLE1BQzVGLEtBRUoyOEMsWUFBYSw4REFBOEQzOEMsTUFDdkUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHNEQUFzRDU4QyxNQUFNLEtBQ3RFNjhDLGNBQWUscUNBQXFDNzhDLE1BQU0sS0FDMUQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxlQUNIQyxHQUFJLGVBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxnQkFDVEMsUUFBUyxnQkFFVEMsU0FBVSxXQUNOLE9BQVFuL0MsS0FBS2dELE9BQ1QsS0FBSyxFQUNELE1BQU8sd0JBQ1gsS0FBSyxFQUNELE1BQU8sc0JBQ1gsS0FBSyxFQUNELE1BQU8sdUJBQ1gsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQU8scUJBR25CbzhDLFFBQVMsaUJBQ1RDLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUFPLCtCQUNYLEtBQUssRUFDRCxNQUFPLDZCQUNYLEtBQUssRUFDRCxNQUFPLDhCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLDRCQUduQnM4QyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFVBQ041TSxFQUFHNFIsRUFDSC9FLEdBQUkrRSxFQUNKemhDLEVBQUd5aEMsRUFDSDlFLEdBQUk4RSxFQUNKN0UsRUFBRzZFLEVBQ0g1RSxHQUFJNEUsRUFDSjNFLEVBQUcyRSxFQUNIMUUsR0FBSTBFLEVBQ0p6RSxFQUFHeUUsRUFDSHhFLEdBQUl3RSxFQUNKdkUsRUFBR3VFLEVBQ0h0RSxHQUFJc0UsR0FFUnJFLHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXhLeUJsbkMsQ0FBUSxFQUFRLE8sc0JDS2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLGdGQUFnRjE4QyxNQUNwRixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSw0REFBNEQ1OEMsTUFDbEUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsbUJBQW1COThDLE1BQU0sS0FDdEM0L0Msb0JBQW9CLEVBQ3BCN0MsY0FBZSxRQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUEyQixNQUFwQkEsRUFBTTdmLE9BQU8sSUFFeEIwM0MsU0FBVSxTQUFVQyxFQUFPQyxFQUFTQyxHQUNoQyxPQUFPRixFQUFRLEdBQUssS0FBTyxNQUUvQkcsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsY0FDVEMsUUFBUyxnQkFDVEMsU0FBVSxlQUNWQyxRQUFTLGNBQ1RDLFNBQVUsd0JBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sYUFDTjVNLEVBQUcsZUFDSDZNLEdBQUksYUFDSjE4QixFQUFHLGFBQ0gyOEIsR0FBSSxZQUNKQyxFQUFHLFVBQ0hDLEdBQUksU0FDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLFVBQ0hDLEdBQUksV0FFUkMsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBN0R5QmxuQyxDQUFRLEVBQVEsTyxzQkNFbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUkrSSxFQUFhLENBQ2JDLE1BQU8sQ0FFSGxILEdBQUksQ0FBQyxVQUFXLFVBQVcsV0FDM0IxOEIsRUFBRyxDQUFDLGNBQWUsZ0JBQ25CMjhCLEdBQUksQ0FBQyxRQUFTLFNBQVUsVUFDeEJDLEVBQUcsQ0FBQyxZQUFhLGVBQ2pCQyxHQUFJLENBQUMsTUFBTyxPQUFRLFFBQ3BCRSxHQUFJLENBQUMsTUFBTyxPQUFRLFFBQ3BCRSxHQUFJLENBQUMsUUFBUyxTQUFVLFVBQ3hCRSxHQUFJLENBQUMsU0FBVSxTQUFVLFdBRTdCMEcsdUJBQXdCLFNBQVV2aUQsRUFBUXdpRCxHQUN0QyxPQUFrQixJQUFYeGlELEVBQ0R3aUQsRUFBUSxHQUNSeGlELEdBQVUsR0FBS0EsR0FBVSxFQUN6QndpRCxFQUFRLEdBQ1JBLEVBQVEsSUFFbEIzQyxVQUFXLFNBQVU3L0MsRUFBUXU4QyxFQUFleDRDLEdBQ3hDLElBQUl5K0MsRUFBVUgsRUFBV0MsTUFBTXYrQyxHQUMvQixPQUFtQixJQUFmQSxFQUFJcEcsT0FDRzQrQyxFQUFnQmlHLEVBQVEsR0FBS0EsRUFBUSxHQUd4Q3hpRCxFQUNBLElBQ0FxaUQsRUFBV0UsdUJBQXVCdmlELEVBQVF3aUQsS0FNN0NsSixFQUFPQyxhQUFhLFVBQVcsQ0FDeENDLE9BQVEsbUZBQW1GMThDLE1BQ3ZGLEtBRUoyOEMsWUFBYSwyREFBMkQzOEMsTUFDcEUsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHNEQUFzRDU4QyxNQUFNLEtBQ3RFNjhDLGNBQWUscUNBQXFDNzhDLE1BQU0sS0FDMUQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEJ2QyxlQUFnQixDQUNaQyxHQUFJLE9BQ0pDLElBQUssVUFDTEMsRUFBRyxjQUNIQyxHQUFJLGdCQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWQyxTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxlQUNUQyxTQUFVLFdBQ04sT0FBUW4vQyxLQUFLZ0QsT0FDVCxLQUFLLEVBQ0QsTUFBTyxzQkFDWCxLQUFLLEVBQ0QsTUFBTyxxQkFDWCxLQUFLLEVBQ0QsTUFBTyxzQkFDWCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsTUFBTyxvQkFHbkJvOEMsUUFBUyxjQUNUQyxTQUFVLFdBVU4sTUFUbUIsQ0FDZiwyQkFDQSwrQkFDQSw0QkFDQSwwQkFDQSw4QkFDQSwyQkFDQSw0QkFFZ0JyL0MsS0FBS2dELFFBRTdCczhDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsbUJBQ0g2TSxHQUFJaUgsRUFBV3hDLFVBQ2ZuaEMsRUFBRzJqQyxFQUFXeEMsVUFDZHhFLEdBQUlnSCxFQUFXeEMsVUFDZnZFLEVBQUcrRyxFQUFXeEMsVUFDZHRFLEdBQUk4RyxFQUFXeEMsVUFDZnJFLEVBQUcsTUFDSEMsR0FBSTRHLEVBQVd4QyxVQUNmbkUsRUFBRyxRQUNIQyxHQUFJMEcsRUFBV3hDLFVBQ2ZqRSxFQUFHLFNBQ0hDLEdBQUl3RyxFQUFXeEMsV0FFbkIvRCx1QkFBd0IsWUFDeEJDLFFBQVMsTUFDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FqSHlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSStJLEVBQWEsQ0FDYkMsTUFBTyxDQUVIbEgsR0FBSSxDQUFDLFVBQVcsVUFBVyxXQUMzQjE4QixFQUFHLENBQUMsY0FBZSxnQkFDbkIyOEIsR0FBSSxDQUFDLFFBQVMsU0FBVSxVQUN4QkMsRUFBRyxDQUFDLFlBQWEsZUFDakJDLEdBQUksQ0FBQyxNQUFPLE9BQVEsUUFDcEJFLEdBQUksQ0FBQyxNQUFPLE9BQVEsUUFDcEJFLEdBQUksQ0FBQyxRQUFTLFNBQVUsVUFDeEJFLEdBQUksQ0FBQyxTQUFVLFNBQVUsV0FFN0IwRyx1QkFBd0IsU0FBVXZpRCxFQUFRd2lELEdBQ3RDLE9BQWtCLElBQVh4aUQsRUFDRHdpRCxFQUFRLEdBQ1J4aUQsR0FBVSxHQUFLQSxHQUFVLEVBQ3pCd2lELEVBQVEsR0FDUkEsRUFBUSxJQUVsQjNDLFVBQVcsU0FBVTcvQyxFQUFRdThDLEVBQWV4NEMsR0FDeEMsSUFBSXkrQyxFQUFVSCxFQUFXQyxNQUFNditDLEdBQy9CLE9BQW1CLElBQWZBLEVBQUlwRyxPQUNHNCtDLEVBQWdCaUcsRUFBUSxHQUFLQSxFQUFRLEdBR3hDeGlELEVBQ0EsSUFDQXFpRCxFQUFXRSx1QkFBdUJ2aUQsRUFBUXdpRCxLQU1qRGxKLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxtRkFBbUYxOEMsTUFDdkYsS0FFSjI4QyxZQUFhLDJEQUEyRDM4QyxNQUNwRSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsd0RBQXdENThDLE1BQzlELEtBRUo2OEMsY0FBZSxxQ0FBcUM3OEMsTUFBTSxLQUMxRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksT0FDSkMsSUFBSyxVQUNMQyxFQUFHLGNBQ0hDLEdBQUksZ0JBQ0pDLElBQUsscUJBQ0xDLEtBQU0sNEJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxlQUNUQyxRQUFTLGVBQ1RDLFNBQVUsV0FDTixPQUFRbi9DLEtBQUtnRCxPQUNULEtBQUssRUFDRCxNQUFPLHVCQUNYLEtBQUssRUFDRCxNQUFPLHFCQUNYLEtBQUssRUFDRCxNQUFPLHNCQUNYLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUFPLG9CQUduQm84QyxRQUFTLGNBQ1RDLFNBQVUsV0FVTixNQVRtQixDQUNmLDRCQUNBLGdDQUNBLDRCQUNBLDBCQUNBLDhCQUNBLDJCQUNBLDRCQUVnQnIvQyxLQUFLZ0QsUUFFN0JzOEMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxTQUNONU0sRUFBRyxtQkFDSDZNLEdBQUlpSCxFQUFXeEMsVUFDZm5oQyxFQUFHMmpDLEVBQVd4QyxVQUNkeEUsR0FBSWdILEVBQVd4QyxVQUNmdkUsRUFBRytHLEVBQVd4QyxVQUNkdEUsR0FBSThHLEVBQVd4QyxVQUNmckUsRUFBRyxNQUNIQyxHQUFJNEcsRUFBV3hDLFVBQ2ZuRSxFQUFHLFFBQ0hDLEdBQUkwRyxFQUFXeEMsVUFDZmpFLEVBQUcsU0FDSEMsR0FBSXdHLEVBQVd4QyxXQUVuQi9ELHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQW5IeUJsbkMsQ0FBUSxFQUFRLE8sc0JDRWxELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLG1IQUFtSDE4QyxNQUN2SCxLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSxzRUFBc0U1OEMsTUFDNUUsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxTQUNKQyxJQUFLLFlBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWQyxTQUFVLENBQ05DLFFBQVMsbUJBQ1RDLFFBQVMsa0JBQ1RDLFNBQVUsZ0JBQ1ZDLFFBQVMsaUJBQ1RDLFNBQVUsOEJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0saUJBQ041TSxFQUFHLHFCQUNINk0sR0FBSSxjQUNKMThCLEVBQUcsU0FDSDI4QixHQUFJLGFBQ0pDLEVBQUcsU0FDSEMsR0FBSSxhQUNKQyxFQUFHLFVBQ0hDLEdBQUksY0FDSkMsRUFBRyxVQUNIQyxHQUFJLGNBQ0pDLEVBQUcsVUFDSEMsR0FBSSxlQUVSaEMsY0FBZSxtQ0FDZkUsU0FBVSxTQUFVQyxFQUFPQyxFQUFTQyxHQUNoQyxPQUFJRixFQUFRLEdBQ0QsVUFDQUEsRUFBUSxHQUNSLFFBQ0FBLEVBQVEsR0FDUixhQUVBLFdBR2YwRSxhQUFjLFNBQVV2OUMsRUFBTTQ0QyxHQUkxQixPQUhhLEtBQVQ1NEMsSUFDQUEsRUFBTyxHQUVNLFlBQWI0NEMsRUFDTzU0QyxFQUNhLFVBQWI0NEMsRUFDQTU0QyxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxlQUFiNDRDLEdBQTBDLFlBQWJBLEVBQ3ZCLElBQVQ1NEMsRUFDTyxFQUVKQSxFQUFPLFFBSlgsR0FPWDI2Qyx1QkFBd0IsVUFDeEJDLFFBQVMsS0FDVEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FqRnlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSx3RkFBd0YxOEMsTUFDNUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsb0RBQW9ENThDLE1BQU0sS0FDcEU2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSywwQkFDTEMsS0FBTSwrQkFDTnNGLElBQUssbUJBQ0xDLEtBQU0sd0JBRVZ0RixTQUFVLENBQ05DLFFBQVMsWUFDVEMsUUFBUyxlQUNURSxRQUFTLFlBQ1RELFNBQVUsZUFDVkUsU0FBVSxpQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxlQUNONU0sRUFBRyxpQkFDSDZNLEdBQUksY0FDSjE4QixFQUFHLFdBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLFdBQ0hDLEdBQUksWUFDSkMsRUFBRyxTQUNIQyxHQUFJLFdBQ0pDLEVBQUcsV0FDSEMsR0FBSSxhQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FFUkMsdUJBQXdCLG1CQUN4QkMsUUFBUyxTQUFVLzdDLEdBQ2YsSUFBSWdjLEVBQUloYyxFQUFTLEdBV2pCLE9BQU9BLEdBVDZCLE1BQXhCQSxFQUFTLElBQU8sSUFDZCxLQUNNLElBQU5nYyxHQUVNLElBQU5BLEVBREEsS0FJQSxPQUlsQmdnQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQWxFeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHNGQUFzRjE4QyxNQUMxRixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSw4REFBOEQ1OEMsTUFDcEUsS0FFSjY4QyxjQUFlLGtDQUFrQzc4QyxNQUFNLEtBQ3ZEODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUM0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxVQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLG9CQUNMQyxLQUFNLDJCQUVWQyxTQUFVLENBQ05DLFFBQVMsZUFDVEMsUUFBUyxpQkFDVEMsU0FBVSw4QkFDVkMsUUFBUyxZQUNUQyxTQUFVLGtDQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxhQUNSQyxLQUFNLFdBQ041TSxFQUFHLGFBQ0g2TSxHQUFJLGFBQ0oxOEIsRUFBRyxjQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxhQUNIQyxHQUFJLFdBQ0pDLEVBQUcsWUFDSEMsR0FBSSxVQUNKQyxFQUFHLGNBQ0hDLEdBQUksV0FDSkMsRUFBRyxjQUNIQyxHQUFJLFlBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBcER5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlzRCxFQUFZLENBQ1JDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0hDLEVBQUcsSUFDSEMsRUFBRyxJQUNIQyxFQUFHLElBQ0h4SSxFQUFHLEtBRVAwSSxFQUFZLENBQ1IsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUdKakUsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDBGQUEwRjE4QyxNQUM5RixLQUVKMjhDLFlBQWEsMEZBQTBGMzhDLE1BQ25HLEtBRUo0OEMsU0FBVSw4RkFBOEY1OEMsTUFDcEcsS0FFSjY4QyxjQUFlLG1EQUFtRDc4QyxNQUM5RCxLQUVKODhDLFlBQWEsc0JBQXNCOThDLE1BQU0sS0FDekNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDRCQUVWQyxTQUFVLENBQ05DLFFBQVMsYUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsY0FDVEMsU0FBVSx5QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxVQUNONU0sRUFBRyxvQkFDSDZNLEdBQUksZUFDSjE4QixFQUFHLGNBQ0gyOEIsR0FBSSxnQkFDSkMsRUFBRyxnQkFDSEMsR0FBSSxlQUNKQyxFQUFHLFdBQ0hDLEdBQUksYUFDSkMsRUFBRyxZQUNIQyxHQUFJLGNBQ0pDLEVBQUcsYUFDSEMsR0FBSSxlQUVSQyx1QkFBd0IsYUFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQU9BLEVBQVMsT0FFcEJzOUMsU0FBVSxTQUFVMXJCLEdBQ2hCLE9BQU9BLEVBQU92MUIsUUFBUSxpQkFBaUIsU0FBVXVpQixHQUM3QyxPQUFPMitCLEVBQVUzK0IsT0FHekIrOUIsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQU92MUIsUUFBUSxPQUFPLFNBQVV1aUIsR0FDbkMsT0FBT2crQixFQUFVaCtCLE9BSXpCaTdCLGNBQWUsd0NBQ2ZFLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLE9BQUkvNEMsRUFBTyxFQUNBLFNBQ0FBLEVBQU8sRUFDUCxTQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQLFdBQ0FBLEVBQU8sR0FDUCxXQUNBQSxFQUFPLEdBQ1AsUUFFQSxVQUdmdTlDLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sVUFBYjQ0QyxFQUNPNTRDLEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFVBQWI0NEMsR0FBcUMsU0FBYkEsR0FFWCxZQUFiQSxHQUNBNTRDLEdBQVEsR0FGUkEsRUFJQUEsRUFBTyxJQUd0QjY2QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQS9IeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQUloQkEsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLHdGQUF3RjE4QyxNQUM1RixLQUVKMjhDLFlBQWEsbUVBQW1FMzhDLE1BQzVFLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSw4REFBOEQ1OEMsTUFDcEUsS0FFSjY4QyxjQUFlLGtDQUFrQzc4QyxNQUFNLEtBQ3ZEODhDLFlBQWEscUJBQXFCOThDLE1BQU0sS0FDeENxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxTQUNKQyxJQUFLLFlBQ0xDLEVBQUcsYUFDSEMsR0FBSSxjQUNKQyxJQUFLLHNCQUNMQyxLQUFNLDZCQUVWQyxTQUFVLENBQ05DLFFBQVMsWUFDVEMsUUFBUyxZQUNUQyxTQUFVLFdBQ1ZDLFFBQVMsYUFDVEMsU0FBVSxnQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsUUFDUkMsS0FBTSxZQUNONU0sRUFBRyxpQkFDSDZNLEdBQUksYUFDSjE4QixFQUFHLFlBQ0gyOEIsR0FBSSxjQUNKQyxFQUFHLFNBQ0hDLEdBQUksV0FDSkMsRUFBRyxVQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLGNBQ0hDLEdBQUksaUJBRVJDLHVCQUF3QixXQUN4QkMsUUFBUyxNQUNUbEMsY0FBZSxpQ0FDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sV0FBYjQ0QyxFQUNPNTRDLEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFNBQWI0NEMsRUFDQTU0QyxFQUNhLGNBQWI0NEMsRUFDQTU0QyxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxhQUFiNDRDLEVBQ0E1NEMsRUFBTyxRQURYLEdBSVg0NEMsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEVBQ0EsU0FDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxZQUNBQSxFQUFPLEdBQ1AsV0FFQSxVQUdmNjZDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBcEZ5QmxuQyxDQUFRLEVBQVEsTyxzQkNLbEQsU0FBV3NrQyxHQUFVLGFBSWZBLEVBQU9DLGFBQWEsTUFBTyxDQUNqQ0MsT0FBUSwwRkFBMEYxOEMsTUFDOUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsa0RBQWtENThDLE1BQU0sS0FDbEU2OEMsY0FBZSxpQ0FBaUM3OEMsTUFBTSxLQUN0RDg4QyxZQUFhLHlCQUF5Qjk4QyxNQUFNLEtBQzVDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGdCQUNUQyxTQUFVLGdCQUNWQyxRQUFTLG9CQUNUQyxTQUFVLCtCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFdBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsYUFDSDI4QixHQUFJLFlBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLFlBQ0hDLEdBQUksV0FDSkMsRUFBRyxZQUNIQyxHQUFJLFdBQ0pDLEVBQUcsWUFDSEMsR0FBSSxZQUVSQyx1QkFBd0IsdUJBQ3hCQyxRQUFTLFNBQVUvN0MsR0FDZixJQUFJZ2MsRUFBSWhjLEVBQVMsR0FXakIsT0FBT0EsR0FUNkIsTUFBeEJBLEVBQVMsSUFBTyxJQUNkLEtBQ00sSUFBTmdjLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNBLE9BR2xCZ2dDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBaEV5QmxuQyxDQUFRLEVBQVEsTyxzQkNDbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlrRSxFQUFXLENBQ1gzSSxFQUFHLE1BQ0hnSSxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIQyxFQUFHLE1BQ0hDLEVBQUcsTUFDSEMsRUFBRyxNQUNIUyxHQUFJLE1BQ0pnRixHQUFJLE1BQ0pDLEdBQUksTUFDSnBGLEdBQUksTUFDSkksR0FBSSxNQUNKK0QsR0FBSSxNQUNKbEUsR0FBSSxNQUNKSSxHQUFJLE1BQ0pQLEdBQUksTUFDSkMsR0FBSSxNQUNKTyxHQUFJLE1BQ0pKLElBQUssT0FHQXZFLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxDQUNKbDlDLE9BQVEscUZBQXFGUSxNQUN6RixLQUVKc2hELFdBQVkseUVBQXlFdGhELE1BQ2pGLE1BR1IyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLHlEQUF5RDU4QyxNQUMvRCxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxtQkFDVEMsUUFBUyxtQkFDVEUsUUFBUyxtQkFDVEQsU0FBVSxrQ0FDVkUsU0FBVSxvQ0FDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxTQUNONU0sRUFBRyxlQUNIN3ZCLEVBQUcsWUFDSDI4QixHQUFJLFlBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUNKQyxFQUFHLFNBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFNBQ0pDLEVBQUcsU0FDSEMsR0FBSSxVQUVSaEMsY0FBZSxxQkFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sUUFBYjQ0QyxFQUNPNTRDLEVBQU8sRUFBSUEsRUFBT0EsRUFBTyxHQUNaLFNBQWI0NEMsRUFDQTU0QyxFQUNhLFFBQWI0NEMsRUFDQTU0QyxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxVQUFiNDRDLEVBQ0E1NEMsRUFBTyxRQURYLEdBSVg0NEMsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsT0FBSS80QyxFQUFPLEVBQ0EsTUFDQUEsRUFBTyxHQUNQLE9BQ0FBLEVBQU8sR0FDUCxNQUNBQSxFQUFPLEdBQ1AsUUFFQSxPQUdmMjZDLHVCQUF3QixrQkFDeEJDLFFBQVMsU0FBVS83QyxHQUdmLE9BQU9BLEdBQVV3OUMsRUFBU3g5QyxJQUFXdzlDLEVBRjdCeDlDLEVBQVMsS0FFbUN3OUMsRUFENUN4OUMsR0FBVSxJQUFNLElBQU0sUUFHbENnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FsSHlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxvR0FBb0cxOEMsTUFDeEcsS0FFSjI4QyxZQUFhLGlFQUFpRTM4QyxNQUMxRSxLQUVKOGhELGtCQUFrQixFQUNsQmxGLFNBQVUsaURBQWlENThDLE1BQU0sS0FDakU2OEMsY0FBZSw4Q0FBOEM3OEMsTUFBTSxLQUNuRTg4QyxZQUFhLHlCQUF5Qjk4QyxNQUFNLEtBQzVDNC9DLG9CQUFvQixFQUNwQnZDLGVBQWdCLENBQ1pDLEdBQUksT0FDSkMsSUFBSyxVQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyx3QkFDTEMsS0FBTSxvQ0FFVlosY0FBZSx3QkFDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBaUIsZUFBVkEsR0FFWDYzQixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sR0FDQSxhQUVBLGNBR2Z1NUMsU0FBVSxDQUNOQyxRQUFTLG1CQUNUQyxRQUFTLHFCQUNUQyxTQUFVLHFCQUNWQyxRQUFTLHdCQUNUQyxTQUFVLDZCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFlBQ041TSxFQUFHLGVBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxTQUNIMjhCLEdBQUksVUFDSkMsRUFBRyxZQUNIQyxHQUFJLGFBQ0pDLEVBQUcsUUFDSEMsR0FBSSxTQUNKeG1DLEVBQUcsWUFDSHNwQyxHQUFJLGFBQ0o3QyxFQUFHLFVBQ0hDLEdBQUksV0FDSkMsRUFBRyxPQUNIQyxHQUFJLFdBOUQwQjdtQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSXpCLElBQUlrRSxFQUFXLENBQ1hYLEVBQUcsUUFDSEksRUFBRyxRQUNIRyxFQUFHLFFBQ0hLLEdBQUksUUFDSkMsR0FBSSxRQUNKWixFQUFHLE9BQ0hLLEVBQUcsT0FDSFEsR0FBSSxPQUNKQyxHQUFJLE9BQ0piLEVBQUcsUUFDSEMsRUFBRyxRQUNIYSxJQUFLLFFBQ0xYLEVBQUcsT0FDSEcsRUFBRyxRQUNIUyxHQUFJLFFBQ0pDLEdBQUksUUFDSkMsR0FBSSxRQUNKQyxHQUFJLFNBR0MzRSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEsK0VBQStFMThDLE1BQ25GLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLHdEQUF3RDU4QyxNQUM5RCxLQUVKNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxtQkFDVEMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsUUFBUyxZQUNUQyxTQUFVLDBCQUNWQyxTQUFVLEtBRWRDLGFBQWMsQ0FDVkMsT0FBUSxTQUNSQyxLQUFNLFFBQ041TSxFQUFHLGlCQUNIN3ZCLEVBQUcsWUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsWUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksU0FDSkMsRUFBRyxTQUNIQyxHQUFJLFFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUVSRSxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxLQUNMLElBQUssS0FDRCxPQUFPdCtDLEVBQ1gsUUFDSSxHQUFlLElBQVhBLEVBRUEsT0FBT0EsRUFBUyxRQUVwQixJQUFJK2IsRUFBSS9iLEVBQVMsR0FHakIsT0FBT0EsR0FBVXc5QyxFQUFTemhDLElBQU15aEMsRUFGdkJ4OUMsRUFBUyxJQUFPK2IsSUFFc0J5aEMsRUFEdkN4OUMsR0FBVSxJQUFNLElBQU0sU0FJMUNnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F6RnlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLDBGQUEwRjE4QyxNQUM5RixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSx5REFBeUQ1OEMsTUFDL0QsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsd0JBQXdCOThDLE1BQU0sS0FDM0NxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsWUFDSEMsR0FBSSxlQUNKQyxJQUFLLHFCQUNMQyxLQUFNLDZCQUVWQyxTQUFVLENBQ05DLFFBQVMsb0JBQ1RDLFFBQVMsZ0JBQ1RDLFNBQVUsMEJBQ1ZDLFFBQVMsZUFDVEMsU0FBVSw0QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsZ0JBQ1JDLEtBQU0sbUJBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsZUFDSDI4QixHQUFJLFlBQ0pDLEVBQUcsYUFDSEMsR0FBSSxVQUNKQyxFQUFHLGFBQ0hDLEdBQUksVUFDSkMsRUFBRyxjQUNIQyxHQUFJLFdBQ0pDLEVBQUcsYUFDSEMsR0FBSSxXQUVSQyx1QkFBd0IsVUFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQU9BLEdBRVhnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0F2RHlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSTBKLEVBQWUsaURBQWlEbG1ELE1BQU0sS0E0QjFFLFNBQVMraUQsRUFBVTcvQyxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUM5QyxJQUFJeUcsRUFpQlIsU0FBc0JqakQsR0FDbEIsSUFBSWtqRCxFQUFVcmpELEtBQUtzakQsTUFBT25qRCxFQUFTLElBQVEsS0FDdkNvakQsRUFBTXZqRCxLQUFLc2pELE1BQU9uakQsRUFBUyxJQUFPLElBQ2xDNjNCLEVBQU03M0IsRUFBUyxHQUNmcWpELEVBQU8sR0FVWCxPQVRJSCxFQUFVLElBQ1ZHLEdBQVFMLEVBQWFFLEdBQVcsU0FFaENFLEVBQU0sSUFDTkMsSUFBa0IsS0FBVEEsRUFBYyxJQUFNLElBQU1MLEVBQWFJLEdBQU8sT0FFdkR2ckIsRUFBTSxJQUNOd3JCLElBQWtCLEtBQVRBLEVBQWMsSUFBTSxJQUFNTCxFQUFhbnJCLElBRXBDLEtBQVR3ckIsRUFBYyxPQUFTQSxFQS9CYkMsQ0FBYXRqRCxHQUM5QixPQUFRNHhCLEdBQ0osSUFBSyxLQUNELE9BQU9xeEIsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxPQUN4QixJQUFLLEtBQ0QsT0FBT0EsRUFBYSxRQXFCdEIzSixFQUFPQyxhQUFhLE1BQU8sQ0FDakNDLE9BQVEsa01BQWtNMThDLE1BQ3RNLEtBRUoyOEMsWUFBYSwwSEFBMEgzOEMsTUFDbkksS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLDJEQUEyRDU4QyxNQUNqRSxLQUVKNjhDLGNBQWUsMkRBQTJENzhDLE1BQ3RFLEtBRUo4OEMsWUFBYSwyREFBMkQ5OEMsTUFDcEUsS0FFSnE5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyxjQUNUQyxRQUFTLGNBQ1RDLFNBQVUsTUFDVkMsUUFBUyxjQUNUQyxTQUFVLE1BQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQS9GUixTQUF5QitFLEdBQ3JCLElBQUkzL0MsRUFBTzIvQyxFQVNYLE9BUCtCLElBQTNCQSxFQUFPcGpELFFBQVEsT0FDVHlELEVBQUsxRCxNQUFNLEdBQUksR0FBSyxPQUNPLElBQTNCcWpELEVBQU9wakQsUUFBUSxPQUNmeUQsRUFBSzFELE1BQU0sR0FBSSxHQUFLLE9BQ08sSUFBM0JxakQsRUFBT3BqRCxRQUFRLE9BQ2Z5RCxFQUFLMUQsTUFBTSxHQUFJLEdBQUssTUFDcEIwRCxFQUFPLFFBdUZiNjZDLEtBbkZSLFNBQXVCOEUsR0FDbkIsSUFBSTMvQyxFQUFPMi9DLEVBU1gsT0FQK0IsSUFBM0JBLEVBQU9wakQsUUFBUSxPQUNUeUQsRUFBSzFELE1BQU0sR0FBSSxHQUFLLE9BQ08sSUFBM0JxakQsRUFBT3BqRCxRQUFRLE9BQ2Z5RCxFQUFLMUQsTUFBTSxHQUFJLEdBQUssT0FDTyxJQUEzQnFqRCxFQUFPcGpELFFBQVEsT0FDZnlELEVBQUsxRCxNQUFNLEdBQUksR0FBSyxNQUNwQjBELEVBQU8sUUEyRWJpdUMsRUFBRyxVQUNINk0sR0FBSXlFLEVBQ0puaEMsRUFBRyxVQUNIMjhCLEdBQUl3RSxFQUNKdkUsRUFBRyxVQUNIQyxHQUFJc0UsRUFDSnJFLEVBQUcsVUFDSEMsR0FBSW9FLEVBQ0puRSxFQUFHLFVBQ0hDLEdBQUlrRSxFQUNKakUsRUFBRyxVQUNIQyxHQUFJZ0UsR0FFUi9ELHVCQUF3QixZQUN4QkMsUUFBUyxNQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQTNIeUJsbkMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUl6QixJQUFJa0UsRUFBVyxDQUNYWCxFQUFHLFFBQ0hJLEVBQUcsUUFDSEcsRUFBRyxRQUNISyxHQUFJLFFBQ0pDLEdBQUksUUFDSlosRUFBRyxPQUNISyxFQUFHLE9BQ0hRLEdBQUksT0FDSkMsR0FBSSxPQUNKYixFQUFHLFFBQ0hDLEVBQUcsUUFDSGEsSUFBSyxRQUNMWCxFQUFHLE9BQ0hHLEVBQUcsUUFDSFMsR0FBSSxRQUNKQyxHQUFJLFFBQ0pDLEdBQUksUUFDSkMsR0FBSSxTQUdDM0UsRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRLDZFQUE2RTE4QyxNQUNqRixLQUVKMjhDLFlBQWEsa0RBQWtEMzhDLE1BQU0sS0FDckU0OEMsU0FBVSx3REFBd0Q1OEMsTUFDOUQsS0FFSjY4QyxjQUFlLDhCQUE4Qjc4QyxNQUFNLEtBQ25EODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNpOUMsU0FBVSxTQUFVQyxFQUFPQyxFQUFTQyxHQUNoQyxPQUFJRixFQUFRLEdBQ0RFLEVBQVUsS0FBTyxLQUVqQkEsRUFBVSxLQUFPLE1BR2hDTCxjQUFlLGNBQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQWlCLE9BQVZBLEdBQTRCLE9BQVZBLEdBRTdCaTRCLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLGtCQUNUQyxTQUFVLDJCQUNWQyxRQUFTLFdBQ1RDLFNBQVUseUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFdBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsZ0JBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxTQUNKeG1DLEVBQUcsWUFDSHNwQyxHQUFJLFdBQ0o3QyxFQUFHLFNBQ0hDLEdBQUksUUFDSkMsRUFBRyxVQUNIQyxHQUFJLFVBRVJFLFFBQVMsU0FBVS83QyxFQUFRcytDLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNELE9BQU90K0MsRUFDWCxRQUNJLEdBQWUsSUFBWEEsRUFFQSxPQUFPQSxFQUFTLFFBRXBCLElBQUkrYixFQUFJL2IsRUFBUyxHQUdqQixPQUFPQSxHQUFVdzlDLEVBQVN6aEMsSUFBTXloQyxFQUZ2Qng5QyxFQUFTLElBQU8rYixJQUVzQnloQyxFQUR2Q3g5QyxHQUFVLElBQU0sSUFBTSxTQUkxQ2c4QyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQXZHeUJsbkMsQ0FBUSxFQUFRLE8sc0JDR2xELFNBQVdza0MsR0FBVSxhQWlFekIsU0FBUzZHLEVBQW9CbmdELEVBQVF1OEMsRUFBZXg0QyxFQUFLeTRDLEdBQ3JELElBQUlsZ0QsRUFBUyxDQUNUaXlDLEVBQUcsQ0FBQyxrQkFBbUIsbUJBQ3ZCNk0sR0FBSSxDQUFDcDdDLEVBQVMsV0FBaUJBLEVBQVMsWUFDeEMwZSxFQUFHLENBQUMsVUFBVyxjQUNmMjhCLEdBQUksQ0FBQ3I3QyxFQUFTLFNBQWVBLEVBQVMsVUFDdENzN0MsRUFBRyxDQUFDLFVBQVcsZUFDZkMsR0FBSSxDQUFDdjdDLEVBQVMsU0FBZUEsRUFBUyxVQUN0Q3c3QyxFQUFHLENBQUMsVUFBVyxlQUNmQyxHQUFJLENBQUN6N0MsRUFBUyxTQUFlQSxFQUFTLFVBQ3RDMDdDLEVBQUcsQ0FBQyxTQUFVLGFBQ2RDLEdBQUksQ0FBQzM3QyxFQUFTLFNBQWVBLEVBQVMsVUFDdEM0N0MsRUFBRyxDQUFDLFFBQVMsWUFDYkMsR0FBSSxDQUFDNzdDLEVBQVMsT0FBYUEsRUFBUyxTQUV4QyxPQUFPdzhDLEdBRURELEVBREFqZ0QsRUFBT3lILEdBQUssR0FHWnpILEVBQU95SCxHQUFLLEdBOUVadTFDLEVBQU9DLGFBQWEsTUFBTyxDQUNqQ0MsT0FBUSxzRkFBc0YxOEMsTUFDMUYsS0FFSjI4QyxZQUFhLGtEQUFrRDM4QyxNQUFNLEtBQ3JFNDhDLFNBQVUsc0RBQXNENThDLE1BQU0sS0FDdEU2OEMsY0FBZSw4QkFBOEI3OEMsTUFBTSxLQUNuRDg4QyxZQUFhLHVCQUF1Qjk4QyxNQUFNLEtBQzFDcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksd0JBQ0pDLElBQUssOEJBQ0xDLEtBQU0sMENBRVZaLGNBQWUsYUFDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBTyxRQUFVQSxFQUFNOWlCLGVBRTNCMjZDLFNBQVUsU0FBVUMsRUFBT0MsRUFBU0MsR0FDaEMsT0FBSUYsRUFBUSxHQUNERSxFQUFVLE1BQVEsTUFFbEJBLEVBQVUsTUFBUSxPQUdqQ1EsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxRQUFTLGVBQ1RDLFNBQVUsOEJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFlBQ1JDLEtBQU0sT0FDTjVNLEVBQUc0UixFQUNIL0UsR0FBSStFLEVBQ0p6aEMsRUFBR3loQyxFQUNIOUUsR0FBSThFLEVBQ0o3RSxFQUFHNkUsRUFDSDVFLEdBQUk0RSxFQUNKM0UsRUFBRzJFLEVBQ0gxRSxHQUFJMEUsRUFDSnpFLEVBQUd5RSxFQUNIeEUsR0FBSXdFLEVBQ0p2RSxFQUFHdUUsRUFDSHRFLEdBQUlzRSxHQUVSckUsdUJBQXdCLFlBQ3hCQyxRQUFTLE1BQ1RDLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBaEV5QmxuQyxDQUFRLEVBQVEsTyxxQkNFbEQsU0FBV3NrQyxHQUFVLGFBSVhBLEVBQU9DLGFBQWEsV0FBWSxDQUMxQ0MsT0FBUSx3RkFBd0YxOEMsTUFDNUYsS0FFSjI4QyxZQUFhLHdGQUF3RjM4QyxNQUNqRyxLQUVKNDhDLFNBQVUsa0RBQWtENThDLE1BQU0sS0FDbEU2OEMsY0FBZSxrREFBa0Q3OEMsTUFBTSxLQUN2RTg4QyxZQUFhLGtEQUFrRDk4QyxNQUFNLEtBQ3JFcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxRQUFTLGdCQUNUQyxTQUFVLGNBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLGlCQUNSQyxLQUFNLFNBQ041TSxFQUFHLE9BQ0g2TSxHQUFJLFVBQ0oxOEIsRUFBRyxRQUNIMjhCLEdBQUksV0FDSkMsRUFBRyxPQUNIQyxHQUFJLGNBQ0pDLEVBQUcsTUFDSEMsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksWUFDSkMsRUFBRyxRQUNIQyxHQUFJLGFBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLE1BbkR5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWZBLEVBQU9DLGFBQWEsTUFBTyxDQUNqQ0MsT0FBUSxrRkFBa0YxOEMsTUFDdEYsS0FFSjI4QyxZQUFhLGtGQUFrRjM4QyxNQUMzRixLQUVKNDhDLFNBQVUsa0RBQWtENThDLE1BQU0sS0FDbEU2OEMsY0FBZSxrREFBa0Q3OEMsTUFBTSxLQUN2RTg4QyxZQUFhLGtEQUFrRDk4QyxNQUFNLEtBQ3JFcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwwQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGNBQ1RDLFFBQVMsY0FDVEMsU0FBVSxjQUNWQyxRQUFTLGVBQ1RDLFNBQVUsY0FDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsZ0JBQ1JDLEtBQU0sU0FDTjVNLEVBQUcsT0FDSDZNLEdBQUksVUFDSjE4QixFQUFHLFFBQ0gyOEIsR0FBSSxXQUNKQyxFQUFHLE9BQ0hDLEdBQUksY0FDSkMsRUFBRyxNQUNIQyxHQUFJLFdBQ0pDLEVBQUcsUUFDSEMsR0FBSSxZQUNKQyxFQUFHLFFBQ0hDLEdBQUksYUFFUkcsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssTUFuRHlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLHNGQUFzRjE4QyxNQUMxRixLQUVKMjhDLFlBQWEsc0ZBQXNGMzhDLE1BQy9GLEtBRUo0OEMsU0FBVSx5REFBeUQ1OEMsTUFDL0QsS0FFSjY4QyxjQUFlLHVCQUF1Qjc4QyxNQUFNLEtBQzVDODhDLFlBQWEsdUJBQXVCOThDLE1BQU0sS0FDMUNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSwwQkFDSkMsSUFBSyxpQ0FDTEMsS0FBTSx3Q0FFVlosY0FBZSxxREFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBR00sZUFBYjQ0QyxHQUNhLFVBQWJBLEdBQ2EsaUJBQWJBLEVBRU81NEMsRUFDYSxpQkFBYjQ0QyxHQUE0QyxRQUFiQSxFQUMvQjU0QyxFQUFPLEdBRVBBLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxJQUcxQzQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixJQUFJcUosRUFBWSxJQUFQcGlELEVBQWFELEVBQ3RCLE9BQUlxaUQsRUFBSyxJQUNFLGFBQ0FBLEVBQUssSUFDTCxRQUNBQSxFQUFLLEtBQ0wsZUFDQUEsRUFBSyxLQUNMLE1BQ0FBLEVBQUssS0FDTCxlQUVBLE9BR2Y3SSxTQUFVLENBQ05DLFFBQVMsbUJBQ1RDLFFBQVMsa0JBQ1RDLFNBQVUsNEJBQ1ZDLFFBQVMsZUFDVEMsU0FBVSw2QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsV0FDUkMsS0FBTSxXQUNONU0sRUFBRyxlQUNINk0sR0FBSSxZQUNKMThCLEVBQUcsWUFDSDI4QixHQUFJLFdBQ0pDLEVBQUcsWUFDSEMsR0FBSSxXQUNKQyxFQUFHLFVBQ0hDLEdBQUksU0FDSkMsRUFBRyxVQUNIQyxHQUFJLFNBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUdSQyx1QkFBd0IsNkJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU90K0MsRUFBUyxRQUNwQixJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLEVBQVMsU0FDcEIsUUFDSSxPQUFPQSxJQUduQnM5QyxTQUFVLFNBQVUxckIsR0FDaEIsT0FBT0EsRUFBT3YxQixRQUFRLEtBQU0sTUFFaENzZ0QsV0FBWSxTQUFVL3FCLEdBQ2xCLE9BQU9BLEVBQU92MUIsUUFBUSxLQUFNLE1BRWhDMi9DLEtBQU0sQ0FFRkMsSUFBSyxFQUNMQyxJQUFLLEtBNUd5QmxuQyxDQUFRLEVBQVEsTyxzQkNJbEQsU0FBV3NrQyxHQUFVLGFBWXpCLFNBQVM0RSxFQUF1QmwrQyxFQUFRdThDLEVBQWV4NEMsR0FTbkQsTUFBWSxNQUFSQSxFQUNPdzRDLEVBQWdCLFVBQVksVUFDcEIsTUFBUng0QyxFQUNBdzRDLEVBQWdCLFNBQVcsU0FFM0J2OEMsRUFBUyxLQXRCRjJYLEdBc0I2QjNYLEVBckIzQ20rQyxFQVFTLENBQ1QvQyxHQUFJbUIsRUFBZ0IseUJBQTJCLHlCQUMvQ2xCLEdBQUlrQixFQUFnQix5QkFBMkIseUJBQy9DaEIsR0FBSWdCLEVBQWdCLHNCQUF3QixzQkFDNUNkLEdBQUksZ0JBQ0pFLEdBQUksd0JBQ0pFLEdBQUksa0JBT2dDOTNDLEdBckJ2QmpILE1BQU0sS0FDaEI2YSxFQUFNLElBQU8sR0FBS0EsRUFBTSxLQUFRLEdBQ2pDd21DLEVBQU0sR0FDTnhtQyxFQUFNLElBQU0sR0FBS0EsRUFBTSxJQUFNLElBQU1BLEVBQU0sSUFBTSxJQUFNQSxFQUFNLEtBQU8sSUFDbEV3bUMsRUFBTSxHQUNOQSxFQUFNLElBTmhCLElBQXNCeG1DLEVBQ2R3bUMsRUFzRFIsU0FBU3FGLEVBQXFCbitDLEdBQzFCLE9BQU8sV0FDSCxPQUFPQSxFQUFNLEtBQXdCLEtBQWpCM0osS0FBS3MrQyxRQUFpQixJQUFNLElBQU0sUUFJckRWLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSxDQUNKbDlDLE9BQVEseUZBQXlGUSxNQUM3RixLQUVKc2hELFdBQVksaUdBQWlHdGhELE1BQ3pHLE1BR1IyOEMsWUFBYSx5REFBeUQzOEMsTUFDbEUsS0FFSjQ4QyxTQWhESixTQUE2Qmg3QixFQUFHcGlCLEdBQzVCLElBQUlvOUMsRUFBVyxDQUNQK0osV0FBWSwwREFBMEQzbUQsTUFDbEUsS0FFSjRtRCxXQUFZLDBEQUEwRDVtRCxNQUNsRSxLQUVKNm1ELFNBQVUsNERBQTREN21ELE1BQ2xFLE1BS1osT0FBVSxJQUFONGhCLEVBQ09nN0IsRUFBcUIsV0FDdkI5OEMsTUFBTSxFQUFHLEdBQ1RnSCxPQUFPODFDLEVBQXFCLFdBQUU5OEMsTUFBTSxFQUFHLElBRTNDOGhCLEVBU0VnN0IsRUFMSSxxQkFBcUJwM0MsS0FBS2hHLEdBQy9CLGFBQ0Esc0NBQXNDZ0csS0FBS2hHLEdBQzNDLFdBQ0EsY0FDb0JvaUIsRUFBRWhnQixPQVJqQmc3QyxFQUFxQixZQTZCaENDLGNBQWUsdUJBQXVCNzhDLE1BQU0sS0FDNUM4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGlCQUNKQyxJQUFLLHdCQUNMQyxLQUFNLCtCQUVWQyxTQUFVLENBQ05DLFFBQVM2SSxFQUFxQixjQUM5QjVJLFFBQVM0SSxFQUFxQixZQUM5QjFJLFFBQVMwSSxFQUFxQixXQUM5QjNJLFNBQVUySSxFQUFxQixjQUMvQnpJLFNBQVUsV0FDTixPQUFRci9DLEtBQUtnRCxPQUNULEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxPQUFPOGtELEVBQXFCLG9CQUFvQnAyQyxLQUFLMVIsTUFDekQsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0QsT0FBTzhuRCxFQUFxQixxQkFBcUJwMkMsS0FBSzFSLFFBR2xFcy9DLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFFBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsa0JBQ0g2TSxHQUFJOEMsRUFDSngvQixFQUFHdy9CLEVBQ0g3QyxHQUFJNkMsRUFDSjVDLEVBQUcsU0FDSEMsR0FBSTJDLEVBQ0oxQyxFQUFHLE9BQ0hDLEdBQUl5QyxFQUNKeEMsRUFBRyxTQUNIQyxHQUFJdUMsRUFDSnRDLEVBQUcsTUFDSEMsR0FBSXFDLEdBR1JyRSxjQUFlLHdCQUNmQyxLQUFNLFNBQVU1M0IsR0FDWixNQUFPLGlCQUFpQjVmLEtBQUs0ZixJQUVqQzYzQixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sRUFDQSxPQUNBQSxFQUFPLEdBQ1AsUUFDQUEsRUFBTyxHQUNQLE1BRUEsVUFHZjI2Qyx1QkFBd0IsaUJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNMLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT3QrQyxFQUFTLEtBQ3BCLElBQUssSUFDRCxPQUFPQSxFQUFTLE1BQ3BCLFFBQ0ksT0FBT0EsSUFHbkJnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FoS3lCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJekIsSUFBSUUsRUFBUyxDQUNMLFFBQ0EsUUFDQSxPQUNBLFFBQ0EsTUFDQSxNQUNBLFNBQ0EsT0FDQSxRQUNBLFNBQ0EsUUFDQSxTQUVKcUosRUFBTyxDQUFDLFFBQVMsTUFBTyxPQUFRLE1BQU8sU0FBVSxPQUFRLFFBRXBEdkosRUFBT0MsYUFBYSxLQUFNLENBQy9CQyxPQUFRQSxFQUNSQyxZQUFhRCxFQUNiRSxTQUFVbUosRUFDVmxKLGNBQWVrSixFQUNmakosWUFBYWlKLEVBQ2IxSSxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZaLGNBQWUsVUFDZkMsS0FBTSxTQUFVNTNCLEdBQ1osTUFBTyxRQUFVQSxHQUVyQjYzQixTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixPQUFJLzRDLEVBQU8sR0FDQSxNQUVKLE9BRVh1NUMsU0FBVSxDQUNOQyxRQUFTLGVBQ1RDLFFBQVMsZUFDVEMsU0FBVSxpQkFDVkMsUUFBUyxzQkFDVEMsU0FBVSx5QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxTQUNONU0sRUFBRyxZQUNINk0sR0FBSSxXQUNKMThCLEVBQUcsVUFDSDI4QixHQUFJLFNBQ0pDLEVBQUcsWUFDSEMsR0FBSSxXQUNKQyxFQUFHLFNBQ0hDLEdBQUksUUFDSkMsRUFBRyxVQUNIQyxHQUFJLFNBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUVSeUIsU0FBVSxTQUFVMXJCLEdBQ2hCLE9BQU9BLEVBQU92MUIsUUFBUSxLQUFNLE1BRWhDc2dELFdBQVksU0FBVS9xQixHQUNsQixPQUFPQSxFQUFPdjFCLFFBQVEsS0FBTSxNQUVoQzIvQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQS9FeUJsbkMsQ0FBUSxFQUFRLE8scUJDRWxELFNBQVdza0MsR0FBVSxhQUlaQSxFQUFPQyxhQUFhLFVBQVcsQ0FDeENDLE9BQVEsNkVBQTZFMThDLE1BQ2pGLEtBRUoyOEMsWUFBYSxvREFBb0QzOEMsTUFBTSxLQUN2RTQ4QyxTQUFVLCtEQUErRDU4QyxNQUNyRSxLQUVKNjhDLGNBQWUsa0NBQWtDNzhDLE1BQU0sS0FDdkQ4OEMsWUFBYSx5QkFBeUI5OEMsTUFBTSxLQUM1Q3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyx1QkFDVEMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsUUFBUyx1QkFDVEMsU0FBVSxvQ0FDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsa0JBQ1JDLEtBQU0scUJBQ041TSxFQUFHLFNBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksUUFDSkMsRUFBRyxVQUNIQyxHQUFJLFVBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBbkR5QmxuQyxDQUFRLEVBQVEsTyxzQkNHbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEseUVBQXlFMThDLE1BQzdFLEtBRUoyOEMsWUFBYSxrREFBa0QzOEMsTUFBTSxLQUNyRTQ4QyxTQUFVLHVEQUF1RDU4QyxNQUFNLEtBQ3ZFNjhDLGNBQWUsOEJBQThCNzhDLE1BQU0sS0FDbkQ4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLGNBQ0pDLElBQUssb0JBQ0xDLEtBQU0sMkJBRVZDLFNBQVUsQ0FDTkMsUUFBUyx1QkFDVEMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsUUFBUyxzQkFDVEMsU0FBVSxtQ0FDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsZ0JBQ1JDLEtBQU0sb0JBQ041TSxFQUFHLFNBQ0g2TSxHQUFJLFlBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksWUFDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxTQUNKQyxFQUFHLFNBQ0hDLEdBQUksUUFDSkMsRUFBRyxVQUNIQyxHQUFJLFVBRVJHLEtBQU0sQ0FDRkMsSUFBSyxFQUNMQyxJQUFLLEtBakR5QmxuQyxDQUFRLEVBQVEsTyxzQkNJbEQsU0FBV3NrQyxHQUFVLGFBSWhCQSxFQUFPQyxhQUFhLEtBQU0sQ0FDL0JDLE9BQVEscUdBQXFHMThDLE1BQ3pHLEtBRUoyOEMsWUFBYSxzRkFBc0YzOEMsTUFDL0YsS0FFSjhoRCxrQkFBa0IsRUFDbEJsRixTQUFVLHlEQUF5RDU4QyxNQUMvRCxLQUVKNjhDLGNBQWUsdUJBQXVCNzhDLE1BQU0sS0FDNUM4OEMsWUFBYSx1QkFBdUI5OEMsTUFBTSxLQUMxQzQvQyxvQkFBb0IsRUFDcEI3QyxjQUFlLFNBQ2ZDLEtBQU0sU0FBVTUzQixHQUNaLE1BQU8sUUFBUTVmLEtBQUs0ZixJQUV4QjYzQixTQUFVLFNBQVVDLEVBQU9DLEVBQVNDLEdBQ2hDLE9BQUlGLEVBQVEsR0FDREUsRUFBVSxLQUFPLEtBRWpCQSxFQUFVLEtBQU8sTUFHaENDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksb0JBQ0pDLElBQUssMEJBQ0xDLEtBQU0sZ0NBQ05qdkIsRUFBRyxZQUNIczBCLEdBQUksYUFDSkMsSUFBSyxtQkFDTEMsS0FBTSx5QkFFVnRGLFNBQVUsQ0FDTkMsUUFBUyxtQkFDVEMsUUFBUyxvQkFDVEMsU0FBVSx5QkFDVkMsUUFBUyxtQkFDVEMsU0FBVSwyQkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxXQUNONU0sRUFBRyxXQUNINk0sR0FBSSxVQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLFVBQ0pDLEVBQUcsVUFDSEMsR0FBSSxTQUNKQyxFQUFHLFdBQ0hDLEdBQUksVUFDSnhtQyxFQUFHLFdBQ0hzcEMsR0FBSSxVQUNKN0MsRUFBRyxZQUNIQyxHQUFJLFdBQ0pDLEVBQUcsVUFDSEMsR0FBSSxVQUVSQyx1QkFBd0IsVUFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLE9BQU9BLEdBRVhnOEMsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0E1RXlCbG5DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJWEEsRUFBT0MsYUFBYSxXQUFZLENBQzFDQyxPQUFRLDZHQUE2RzE4QyxNQUNqSCxLQUVKMjhDLFlBQWEsOERBQThEMzhDLE1BQ3ZFLEtBRUo4aEQsa0JBQWtCLEVBQ2xCbEYsU0FBVSx5RUFBeUU1OEMsTUFDL0UsS0FFSjY4QyxjQUFlLHFDQUFxQzc4QyxNQUFNLEtBQzFEODhDLFlBQWEsNEJBQTRCOThDLE1BQU0sS0FDL0M0L0Msb0JBQW9CLEVBQ3BCdkMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKRSxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxvQkFDTEMsS0FBTSwyQkFFVkMsU0FBVSxDQUNOQyxRQUFTLGtCQUNUQyxRQUFTLHNCQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsdUJBQ1RDLFNBQVUsdUJBQ1ZDLFNBQVUsS0FFZEMsYUFBYyxDQUNWQyxPQUFRLFNBQ1JDLEtBQU0sVUFDTjVNLEVBQUcsbUJBQ0g2TSxHQUFJLGVBQ0oxOEIsRUFBRyxhQUNIMjhCLEdBQUksZUFDSkMsRUFBRyxZQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxXQUNKQyxFQUFHLFlBQ0hDLEdBQUksY0FDSkMsRUFBRyxVQUNIQyxHQUFJLGFBRVJDLHVCQUF3Qix1QkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLElBQUlnYyxFQUFJaGMsRUFBUyxHQVdqQixPQUFPQSxHQVQ2QixNQUF4QkEsRUFBUyxJQUFPLElBQ2QsS0FDTSxJQUFOZ2MsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDTSxJQUFOQSxFQUNBLEtBQ0EsT0FHbEJnZ0MsS0FBTSxDQUNGQyxJQUFLLEVBQ0xDLElBQUssS0FyRXlCbG5DLENBQVEsRUFBUSxPLHNCQ0dsRCxTQUFXc2tDLEdBQVUsYUFJaEJBLEVBQU9DLGFBQWEsS0FBTSxDQUMvQkMsT0FBUSwwRkFBMEYxOEMsTUFDOUYsS0FFSjI4QyxZQUFhLGdFQUFnRTM4QyxNQUFNLEtBQ25GNDhDLFNBQVUsdURBQXVENThDLE1BQU0sS0FDdkU2OEMsY0FBZSxzQ0FBc0M3OEMsTUFBTSxLQUMzRDg4QyxZQUFhLDJCQUEyQjk4QyxNQUFNLEtBQzlDcTlDLGVBQWdCLENBQ1pDLEdBQUksU0FDSkMsSUFBSyxZQUNMQyxFQUFHLGFBQ0hDLEdBQUksY0FDSkMsSUFBSyxxQkFDTEMsS0FBTSw0QkFFVkMsU0FBVSxDQUNOQyxRQUFTLGdCQUNUQyxRQUFTLGVBQ1RDLFNBQVUsOEJBQ1ZDLFFBQVMsZUFDVEMsU0FBVSw2QkFDVkMsU0FBVSxLQUVkQyxhQUFjLENBQ1ZDLE9BQVEsU0FDUkMsS0FBTSxXQUNONU0sRUFBRyxvQkFDSDZNLEdBQUksV0FDSjE4QixFQUFHLGNBQ0gyOEIsR0FBSSxhQUNKQyxFQUFHLGNBQ0hDLEdBQUksYUFDSkMsRUFBRyxXQUNIQyxHQUFJLFVBQ0pDLEVBQUcsV0FDSEMsR0FBSSxVQUNKQyxFQUFHLFlBQ0hDLEdBQUksWUFFUkMsdUJBQXdCLGdCQUN4QkMsUUFBUyxVQUNUQyxLQUFNLENBQ0ZDLElBQUssRUFDTEMsSUFBSyxLQW5EeUJsbkMsQ0FBUSxFQUFRLE8sc0JDS2xELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0NBQXdDMThDLE1BQzVDLEtBRUoyOEMsWUFBYSx5Q0FBeUMzOEMsTUFDbEQsS0FFSjQ4QyxTQUFVLDhCQUE4QjU4QyxNQUFNLEtBQzlDNjhDLGNBQWUsdUJBQXVCNzhDLE1BQU0sS0FDNUM4OEMsWUFBYSxnQkFBZ0I5OEMsTUFBTSxLQUNuQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLFlBQ0pDLElBQUssa0JBQ0xDLEtBQU0sc0JBQ05qdkIsRUFBRyxXQUNIczBCLEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSx1QkFFVm5HLGNBQWUsb0JBQ2Y2RSxhQUFjLFNBQVV2OUMsRUFBTTQ0QyxHQUkxQixPQUhhLEtBQVQ1NEMsSUFDQUEsRUFBTyxHQUVNLE9BQWI0NEMsR0FBa0MsT0FBYkEsR0FBa0MsT0FBYkEsRUFDbkM1NEMsRUFDYSxPQUFiNDRDLEdBQWtDLE9BQWJBLEVBQ3JCNTRDLEVBQU8sR0FHUEEsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLElBRzFDNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLElBQUlxSixFQUFZLElBQVBwaUQsRUFBYUQsRUFDdEIsT0FBSXFpRCxFQUFLLElBQ0UsS0FDQUEsRUFBSyxJQUNMLEtBQ0FBLEVBQUssS0FDTCxLQUNBQSxFQUFLLEtBQ0wsS0FDQUEsRUFBSyxLQUNMLEtBRUEsTUFHZjdJLFNBQVUsQ0FDTkMsUUFBUyxTQUNUQyxRQUFTLFNBQ1RDLFNBQVUsU0FBVXBmLEdBQ2hCLE9BQUlBLEVBQUl1Z0IsU0FBV3RnRCxLQUFLc2dELE9BQ2IsV0FFQSxZQUdmbEIsUUFBUyxTQUNUQyxTQUFVLFNBQVV0ZixHQUNoQixPQUFJLy9CLEtBQUtzZ0QsU0FBV3ZnQixFQUFJdWdCLE9BQ2IsV0FFQSxZQUdmaEIsU0FBVSxLQUVkYyx1QkFBd0IsaUJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU90K0MsRUFBUyxJQUNwQixJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLEVBQVMsSUFDcEIsUUFDSSxPQUFPQSxJQUduQmk3QyxhQUFjLENBQ1ZDLE9BQVEsTUFDUkMsS0FBTSxNQUNONU0sRUFBRyxLQUNINk0sR0FBSSxPQUNKMThCLEVBQUcsT0FDSDI4QixHQUFJLFFBQ0pDLEVBQUcsT0FDSEMsR0FBSSxRQUNKQyxFQUFHLE1BQ0hDLEdBQUksT0FDSnhtQyxFQUFHLE1BQ0hzcEMsR0FBSSxPQUNKN0MsRUFBRyxPQUNIQyxHQUFJLFFBQ0pDLEVBQUcsTUFDSEMsR0FBSSxRQUVSRyxLQUFNLENBRUZDLElBQUssRUFDTEMsSUFBSyxLQXBIeUJsbkMsQ0FBUSxFQUFRLE8sc0JDSWxELFNBQVdza0MsR0FBVSxhQUlkQSxFQUFPQyxhQUFhLFFBQVMsQ0FDcENDLE9BQVEsd0NBQXdDMThDLE1BQzVDLEtBRUoyOEMsWUFBYSx5Q0FBeUMzOEMsTUFDbEQsS0FFSjQ4QyxTQUFVLDhCQUE4QjU4QyxNQUFNLEtBQzlDNjhDLGNBQWUsdUJBQXVCNzhDLE1BQU0sS0FDNUM4OEMsWUFBYSxnQkFBZ0I5OEMsTUFBTSxLQUNuQ3E5QyxlQUFnQixDQUNaQyxHQUFJLFFBQ0pDLElBQUssV0FDTEMsRUFBRyxhQUNIQyxHQUFJLFlBQ0pDLElBQUssa0JBQ0xDLEtBQU0sc0JBQ05qdkIsRUFBRyxXQUNIczBCLEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSx1QkFFVm5HLGNBQWUsb0JBQ2Y2RSxhQUFjLFNBQVV2OUMsRUFBTTQ0QyxHQUkxQixPQUhhLEtBQVQ1NEMsSUFDQUEsRUFBTyxHQUVNLE9BQWI0NEMsR0FBa0MsT0FBYkEsR0FBa0MsT0FBYkEsRUFDbkM1NEMsRUFDYSxPQUFiNDRDLEVBQ0E1NEMsR0FBUSxHQUFLQSxFQUFPQSxFQUFPLEdBQ2QsT0FBYjQ0QyxHQUFrQyxPQUFiQSxFQUNyQjU0QyxFQUFPLFFBRFgsR0FJWDQ0QyxTQUFVLFNBQVU1NEMsRUFBTUQsRUFBUWc1QyxHQUM5QixJQUFJcUosRUFBWSxJQUFQcGlELEVBQWFELEVBQ3RCLE9BQUlxaUQsRUFBSyxJQUNFLEtBQ0FBLEVBQUssSUFDTCxLQUNBQSxFQUFLLEtBQ0wsS0FDTyxPQUFQQSxFQUNBLEtBQ0FBLEVBQUssS0FDTCxLQUVBLE1BR2Y3SSxTQUFVLENBQ05DLFFBQVMsU0FDVEMsUUFBUyxTQUNUQyxTQUFVLFlBQ1ZDLFFBQVMsU0FDVEMsU0FBVSxZQUNWQyxTQUFVLEtBRWRjLHVCQUF3QixpQkFDeEJDLFFBQVMsU0FBVS83QyxFQUFRcytDLEdBQ3ZCLE9BQVFBLEdBQ0osSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLE1BQ0QsT0FBT3QrQyxFQUFTLElBQ3BCLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLElBQUssSUFDTCxJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixRQUNJLE9BQU9BLElBR25CaTdDLGFBQWMsQ0FDVkMsT0FBUSxNQUNSQyxLQUFNLE1BQ041TSxFQUFHLEtBQ0g2TSxHQUFJLE9BQ0oxOEIsRUFBRyxPQUNIMjhCLEdBQUksUUFDSkMsRUFBRyxPQUNIQyxHQUFJLFFBQ0pDLEVBQUcsTUFDSEMsR0FBSSxPQUNKQyxFQUFHLE9BQ0hDLEdBQUksUUFDSkMsRUFBRyxNQUNIQyxHQUFJLFVBaEcwQjdtQyxDQUFRLEVBQVEsTyxzQkNFbEQsU0FBV3NrQyxHQUFVLGFBSWRBLEVBQU9DLGFBQWEsUUFBUyxDQUNwQ0MsT0FBUSx3Q0FBd0MxOEMsTUFDNUMsS0FFSjI4QyxZQUFhLHlDQUF5QzM4QyxNQUNsRCxLQUVKNDhDLFNBQVUsOEJBQThCNThDLE1BQU0sS0FDOUM2OEMsY0FBZSx1QkFBdUI3OEMsTUFBTSxLQUM1Qzg4QyxZQUFhLGdCQUFnQjk4QyxNQUFNLEtBQ25DcTlDLGVBQWdCLENBQ1pDLEdBQUksUUFDSkMsSUFBSyxXQUNMQyxFQUFHLGFBQ0hDLEdBQUksWUFDSkMsSUFBSyxrQkFDTEMsS0FBTSxzQkFDTmp2QixFQUFHLFdBQ0hzMEIsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHVCQUVWbkcsY0FBZSxvQkFDZjZFLGFBQWMsU0FBVXY5QyxFQUFNNDRDLEdBSTFCLE9BSGEsS0FBVDU0QyxJQUNBQSxFQUFPLEdBRU0sT0FBYjQ0QyxHQUFrQyxPQUFiQSxHQUFrQyxPQUFiQSxFQUNuQzU0QyxFQUNhLE9BQWI0NEMsRUFDQTU0QyxHQUFRLEdBQUtBLEVBQU9BLEVBQU8sR0FDZCxPQUFiNDRDLEdBQWtDLE9BQWJBLEVBQ3JCNTRDLEVBQU8sUUFEWCxHQUlYNDRDLFNBQVUsU0FBVTU0QyxFQUFNRCxFQUFRZzVDLEdBQzlCLElBQUlxSixFQUFZLElBQVBwaUQsRUFBYUQsRUFDdEIsT0FBSXFpRCxFQUFLLElBQ0UsS0FDQUEsRUFBSyxJQUNMLEtBQ0FBLEVBQUssS0FDTCxLQUNBQSxFQUFLLEtBQ0wsS0FDQUEsRUFBSyxLQUNMLEtBRUEsTUFHZjdJLFNBQVUsQ0FDTkMsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFNBQVUsYUFDVkMsUUFBUyxVQUNUQyxTQUFVLGFBQ1ZDLFNBQVUsS0FFZGMsdUJBQXdCLGlCQUN4QkMsUUFBUyxTQUFVLzdDLEVBQVFzK0MsR0FDdkIsT0FBUUEsR0FDSixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssTUFDRCxPQUFPdCtDLEVBQVMsSUFDcEIsSUFBSyxJQUNELE9BQU9BLEVBQVMsSUFDcEIsSUFBSyxJQUNMLElBQUssSUFDRCxPQUFPQSxFQUFTLElBQ3BCLFFBQ0ksT0FBT0EsSUFHbkJpN0MsYUFBYyxDQUNWQyxPQUFRLE1BQ1JDLEtBQU0sTUFDTjVNLEVBQUcsS0FDSDZNLEdBQUksT0FDSjE4QixFQUFHLE9BQ0gyOEIsR0FBSSxRQUNKQyxFQUFHLE9BQ0hDLEdBQUksUUFDSkMsRUFBRyxNQUNIQyxHQUFJLE9BQ0pDLEVBQUcsT0FDSEMsR0FBSSxRQUNKQyxFQUFHLE1BQ0hDLEdBQUksVUFoRzBCN21DLENBQVEsRUFBUSxPLHNCQ0VsRCxTQUFXc2tDLEdBQVUsYUFJZEEsRUFBT0MsYUFBYSxRQUFTLENBQ3BDQyxPQUFRLHdDQUF3QzE4QyxNQUM1QyxLQUVKMjhDLFlBQWEseUNBQXlDMzhDLE1BQ2xELEtBRUo0OEMsU0FBVSw4QkFBOEI1OEMsTUFBTSxLQUM5QzY4QyxjQUFlLHVCQUF1Qjc4QyxNQUFNLEtBQzVDODhDLFlBQWEsZ0JBQWdCOThDLE1BQU0sS0FDbkNxOUMsZUFBZ0IsQ0FDWkMsR0FBSSxRQUNKQyxJQUFLLFdBQ0xDLEVBQUcsYUFDSEMsR0FBSSxZQUNKQyxJQUFLLGtCQUNMQyxLQUFNLHNCQUNOanZCLEVBQUcsV0FDSHMwQixHQUFJLFlBQ0pDLElBQUssa0JBQ0xDLEtBQU0sdUJBRVZuRyxjQUFlLG9CQUNmNkUsYUFBYyxTQUFVdjlDLEVBQU00NEMsR0FJMUIsT0FIYSxLQUFUNTRDLElBQ0FBLEVBQU8sR0FFTSxPQUFiNDRDLEdBQWtDLE9BQWJBLEdBQWtDLE9BQWJBLEVBQ25DNTRDLEVBQ2EsT0FBYjQ0QyxFQUNBNTRDLEdBQVEsR0FBS0EsRUFBT0EsRUFBTyxHQUNkLE9BQWI0NEMsR0FBa0MsT0FBYkEsRUFDckI1NEMsRUFBTyxRQURYLEdBSVg0NEMsU0FBVSxTQUFVNTRDLEVBQU1ELEVBQVFnNUMsR0FDOUIsSUFBSXFKLEVBQVksSUFBUHBpRCxFQUFhRCxFQUN0QixPQUFJcWlELEVBQUssSUFDRSxLQUNBQSxFQUFLLElBQ0wsS0FDQUEsRUFBSyxLQUNMLEtBQ0FBLEVBQUssS0FDTCxLQUNBQSxFQUFLLEtBQ0wsS0FFQSxNQUdmN0ksU0FBVSxDQUNOQyxRQUFTLFVBQ1RDLFFBQVMsVUFDVEMsU0FBVSxhQUNWQyxRQUFTLFVBQ1RDLFNBQVUsYUFDVkMsU0FBVSxLQUVkYyx1QkFBd0IsaUJBQ3hCQyxRQUFTLFNBQVUvN0MsRUFBUXMrQyxHQUN2QixPQUFRQSxHQUNKLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxNQUNELE9BQU90K0MsRUFBUyxJQUNwQixJQUFLLElBQ0QsT0FBT0EsRUFBUyxJQUNwQixJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU9BLEVBQVMsSUFDcEIsUUFDSSxPQUFPQSxJQUduQmk3QyxhQUFjLENBQ1ZDLE9BQVEsTUFDUkMsS0FBTSxNQUNONU0sRUFBRyxLQUNINk0sR0FBSSxPQUNKMThCLEVBQUcsT0FDSDI4QixHQUFJLFFBQ0pDLEVBQUcsT0FDSEMsR0FBSSxRQUNKQyxFQUFHLE1BQ0hDLEdBQUksT0FDSkMsRUFBRyxPQUNIQyxHQUFJLFFBQ0pDLEVBQUcsTUFDSEMsR0FBSSxVQWhHMEI3bUMsQ0FBUSxFQUFRLE8sZUNQMUQsSUFBSXhYLEVBQU0sQ0FDVCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxhQUFjLElBQ2QsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsUUFBUyxLQUNULFdBQVksS0FDWixPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLGdCQUFpQixLQUNqQixhQUFjLEtBQ2QsZ0JBQWlCLEtBQ2pCLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxVQUFXLEtBQ1gsYUFBYyxLQUNkLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLElBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxXQUFZLEtBQ1osY0FBZSxLQUNmLFVBQVcsS0FDWCxhQUFjLEtBQ2QsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixZQUFhLEtBQ2IsZUFBZ0IsS0FDaEIsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxRQUFTLEtBQ1QsV0FBWSxLQUNaLE9BQVEsS0FDUixVQUFXLEtBQ1gsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLFVBQVcsS0FDWCxhQUFjLEtBQ2QsUUFBUyxLQUNULFdBQVksS0FDWixPQUFRLEtBQ1IsVUFBVyxLQUNYLFFBQVMsS0FDVCxXQUFZLEtBQ1osUUFBUyxLQUNULGFBQWMsSUFDZCxnQkFBaUIsSUFDakIsV0FBWSxLQUNaLFVBQVcsS0FDWCxhQUFjLEtBQ2QsT0FBUSxLQUNSLFVBQVcsS0FDWCxPQUFRLEtBQ1IsVUFBVyxLQUNYLE9BQVEsS0FDUixZQUFhLElBQ2IsZUFBZ0IsSUFDaEIsVUFBVyxLQUNYLE9BQVEsS0FDUixVQUFXLEtBQ1gsYUFBYyxLQUNkLGdCQUFpQixLQUNqQixPQUFRLEtBQ1IsVUFBVyxLQUNYLFVBQVcsS0FDWCxhQUFjLEtBQ2QsVUFBVyxLQUNYLGFBQWMsS0FDZCxVQUFXLEtBQ1gsYUFBYyxLQUNkLFVBQVcsS0FDWCxhQUFjLE1BSWYsU0FBU29tRCxFQUFlQyxHQUN2QixJQUFJOTNDLEVBQUsrM0MsRUFBc0JELEdBQy9CLE9BQU9FLEVBQW9CaDRDLEdBRTVCLFNBQVMrM0MsRUFBc0JELEdBQzlCLElBQUlFLEVBQW9CNXdDLEVBQUUzVixFQUFLcW1ELEdBQU0sQ0FDcEMsSUFBSXY4QyxFQUFJLElBQUkyQyxNQUFNLHVCQUF5QjQ1QyxFQUFNLEtBRWpELE1BREF2OEMsRUFBRWlQLEtBQU8sbUJBQ0hqUCxFQUVQLE9BQU85SixFQUFJcW1ELEdBRVpELEVBQWVqa0MsS0FBTyxXQUNyQixPQUFPck0sT0FBT3FNLEtBQUtuaUIsSUFFcEJvbUQsRUFBZXAzQixRQUFVczNCLEVBQ3pCNzFDLEVBQU9xRCxRQUFVc3lDLEVBQ2pCQSxFQUFlNzNDLEdBQUssTSxpQ0M1UnNEdUYsUUFHbEUsV0FBZSxhQUVuQixJQUFJMHlDLEVBNEhBQyxFQTFISixTQUFTaHhCLElBQ0wsT0FBTyt3QixFQUFhenVDLE1BQU0sS0FBTTZDLFdBU3BDLFNBQVM5RixFQUFRNFAsR0FDYixPQUNJQSxhQUFpQjlQLE9BQ3lCLG1CQUExQ2tCLE9BQU9wWCxVQUFVYSxTQUFTcVEsS0FBSzhVLEdBSXZDLFNBQVNnaUMsRUFBU2hpQyxHQUdkLE9BQ2EsTUFBVEEsR0FDMEMsb0JBQTFDNU8sT0FBT3BYLFVBQVVhLFNBQVNxUSxLQUFLOFUsR0FJdkMsU0FBU2lpQyxFQUFXcG9DLEVBQUdDLEdBQ25CLE9BQU8xSSxPQUFPcFgsVUFBVXdaLGVBQWV0SSxLQUFLMk8sRUFBR0MsR0FHbkQsU0FBU29vQyxFQUFjcnVDLEdBQ25CLEdBQUl6QyxPQUFPK3dDLG9CQUNQLE9BQWtELElBQTNDL3dDLE9BQU8rd0Msb0JBQW9CdHVDLEdBQUtwWSxPQUV2QyxJQUFJMm1ELEVBQ0osSUFBS0EsS0FBS3Z1QyxFQUNOLEdBQUlvdUMsRUFBV3B1QyxFQUFLdXVDLEdBQ2hCLE9BQU8sRUFHZixPQUFPLEVBSWYsU0FBU0MsRUFBWXJpQyxHQUNqQixZQUFpQixJQUFWQSxFQUdYLFNBQVNzaUMsRUFBU3RpQyxHQUNkLE1BQ3FCLGlCQUFWQSxHQUNtQyxvQkFBMUM1TyxPQUFPcFgsVUFBVWEsU0FBU3FRLEtBQUs4VSxHQUl2QyxTQUFTdWlDLEVBQU92aUMsR0FDWixPQUNJQSxhQUFpQjVHLE1BQ3lCLGtCQUExQ2hJLE9BQU9wWCxVQUFVYSxTQUFTcVEsS0FBSzhVLEdBSXZDLFNBQVMxa0IsRUFBSTBVLEVBQUtvRixHQUNkLElBQ0lwVixFQURBd2lELEVBQU0sR0FFVixJQUFLeGlELEVBQUksRUFBR0EsRUFBSWdRLEVBQUl2VSxTQUFVdUUsRUFDMUJ3aUQsRUFBSTNtRCxLQUFLdVosRUFBR3BGLEVBQUloUSxHQUFJQSxJQUV4QixPQUFPd2lELEVBR1gsU0FBUzFyQyxFQUFPK0MsRUFBR0MsR0FDZixJQUFLLElBQUk5WixLQUFLOFosRUFDTm1vQyxFQUFXbm9DLEVBQUc5WixLQUNkNlosRUFBRTdaLEdBQUs4WixFQUFFOVosSUFZakIsT0FSSWlpRCxFQUFXbm9DLEVBQUcsY0FDZEQsRUFBRWhmLFNBQVdpZixFQUFFamYsVUFHZm9uRCxFQUFXbm9DLEVBQUcsYUFDZEQsRUFBRTRvQyxRQUFVM29DLEVBQUUyb0MsU0FHWDVvQyxFQUdYLFNBQVM2b0MsRUFBVTFpQyxFQUFPNWxCLEVBQVF1b0QsRUFBUUMsR0FDdEMsT0FBT0MsR0FBaUI3aUMsRUFBTzVsQixFQUFRdW9ELEVBQVFDLEdBQVEsR0FBTUUsTUF5QmpFLFNBQVNDLEVBQWdCdm1DLEdBSXJCLE9BSGEsTUFBVEEsRUFBRXdtQyxNQUNGeG1DLEVBQUV3bUMsSUF0QkMsQ0FDSHAzQixPQUFPLEVBQ1BxM0IsYUFBYyxHQUNkQyxZQUFhLEdBQ2JqYyxVQUFXLEVBQ1hrYyxjQUFlLEVBQ2ZDLFdBQVcsRUFDWEMsV0FBWSxLQUNaQyxhQUFjLEtBQ2RDLGVBQWUsRUFDZkMsaUJBQWlCLEVBQ2pCQyxLQUFLLEVBQ0xDLGdCQUFpQixHQUNqQkMsSUFBSyxLQUNMOUwsU0FBVSxLQUNWK0wsU0FBUyxFQUNUQyxpQkFBaUIsSUFRZHJuQyxFQUFFd21DLElBc0JiLFNBQVNjLEVBQVF0bkMsR0FDYixHQUFrQixNQUFkQSxFQUFFdW5DLFNBQWtCLENBQ3BCLElBQUlDLEVBQVFqQixFQUFnQnZtQyxHQUN4QnluQyxFQUFjbEMsRUFBSzcyQyxLQUFLODRDLEVBQU1OLGlCQUFpQixTQUFVMWpELEdBQ3JELE9BQVksTUFBTEEsS0FFWGtrRCxHQUNLcE4sTUFBTXQ2QixFQUFFNUwsR0FBR3V6QyxZQUNaSCxFQUFNL2MsU0FBVyxJQUNoQitjLEVBQU1wNEIsUUFDTm80QixFQUFNWCxhQUNOVyxFQUFNVixlQUNOVSxFQUFNSSxpQkFDTkosRUFBTUgsa0JBQ05HLEVBQU1aLFlBQ05ZLEVBQU1ULGdCQUNOUyxFQUFNUixtQkFDTFEsRUFBTW5NLFVBQWFtTSxFQUFNbk0sVUFBWW9NLEdBVS9DLEdBUkl6bkMsRUFBRTZuQyxVQUNGSCxFQUNJQSxHQUN3QixJQUF4QkYsRUFBTWIsZUFDd0IsSUFBOUJhLEVBQU1mLGFBQWF4bkQsYUFDRDRMLElBQWxCMjhDLEVBQU1NLFNBR1MsTUFBbkJsekMsT0FBT216QyxVQUFxQm56QyxPQUFPbXpDLFNBQVMvbkMsR0FHNUMsT0FBTzBuQyxFQUZQMW5DLEVBQUV1bkMsU0FBV0csRUFLckIsT0FBTzFuQyxFQUFFdW5DLFNBR2IsU0FBU1MsRUFBY1IsR0FDbkIsSUFBSXhuQyxFQUFJa21DLEVBQVUrQixLQU9sQixPQU5hLE1BQVRULEVBQ0FsdEMsRUFBT2lzQyxFQUFnQnZtQyxHQUFJd25DLEdBRTNCakIsRUFBZ0J2bUMsR0FBR2duQyxpQkFBa0IsRUFHbENobkMsRUE3RFB1bEMsRUFEQTd4QyxNQUFNbFcsVUFBVStuRCxLQUNUN3hDLE1BQU1sVyxVQUFVK25ELEtBRWhCLFNBQVUyQyxHQUNiLElBRUkxa0QsRUFGQTAyQixFQUFJdGxCLE9BQU81WCxNQUNYNkssRUFBTXF5QixFQUFFajdCLFNBQVcsRUFHdkIsSUFBS3VFLEVBQUksRUFBR0EsRUFBSXFFLEVBQUtyRSxJQUNqQixHQUFJQSxLQUFLMDJCLEdBQUtndUIsRUFBSXg1QyxLQUFLMVIsS0FBTWs5QixFQUFFMTJCLEdBQUlBLEVBQUcwMkIsR0FDbEMsT0FBTyxFQUlmLE9BQU8sR0FxRGYsSUFBSWl1QixFQUFvQjV6QixFQUFNNHpCLGlCQUFtQixHQUM3Q0MsR0FBbUIsRUFFdkIsU0FBU0MsRUFBV3BkLEVBQUluMkIsR0FDcEIsSUFBSXRSLEVBQUdpd0IsRUFBTS9yQixFQWlDYixHQS9CS20rQyxFQUFZL3dDLEVBQUt3ekMsb0JBQ2xCcmQsRUFBR3FkLGlCQUFtQnh6QyxFQUFLd3pDLGtCQUUxQnpDLEVBQVkvd0MsRUFBS3hCLE1BQ2xCMjNCLEVBQUczM0IsR0FBS3dCLEVBQUt4QixJQUVadXlDLEVBQVkvd0MsRUFBS3l6QyxNQUNsQnRkLEVBQUdzZCxHQUFLenpDLEVBQUt5ekMsSUFFWjFDLEVBQVkvd0MsRUFBSzB6QyxNQUNsQnZkLEVBQUd1ZCxHQUFLMXpDLEVBQUswekMsSUFFWjNDLEVBQVkvd0MsRUFBSyt5QyxXQUNsQjVjLEVBQUc0YyxRQUFVL3lDLEVBQUsreUMsU0FFakJoQyxFQUFZL3dDLEVBQUsyekMsUUFDbEJ4ZCxFQUFHd2QsS0FBTzN6QyxFQUFLMnpDLE1BRWQ1QyxFQUFZL3dDLEVBQUs0ekMsVUFDbEJ6ZCxFQUFHeWQsT0FBUzV6QyxFQUFLNHpDLFFBRWhCN0MsRUFBWS93QyxFQUFLNnpDLFdBQ2xCMWQsRUFBRzBkLFFBQVU3ekMsRUFBSzZ6QyxTQUVqQjlDLEVBQVkvd0MsRUFBSzB4QyxPQUNsQnZiLEVBQUd1YixJQUFNRCxFQUFnQnp4QyxJQUV4Qit3QyxFQUFZL3dDLEVBQUs4ekMsV0FDbEIzZCxFQUFHMmQsUUFBVTl6QyxFQUFLOHpDLFNBR2xCVCxFQUFpQmxwRCxPQUFTLEVBQzFCLElBQUt1RSxFQUFJLEVBQUdBLEVBQUkya0QsRUFBaUJscEQsT0FBUXVFLElBR2hDcWlELEVBRExuK0MsRUFBTW9OLEVBRE4yZSxFQUFPMDBCLEVBQWlCM2tELE9BR3BCeW5DLEVBQUd4WCxHQUFRL3JCLEdBS3ZCLE9BQU91akMsRUFJWCxTQUFTNGQsRUFBT0MsR0FDWlQsRUFBV3JyRCxLQUFNOHJELEdBQ2pCOXJELEtBQUtvWCxHQUFLLElBQUl3SSxLQUFrQixNQUFia3NDLEVBQU8xMEMsR0FBYTAwQyxFQUFPMTBDLEdBQUd1ekMsVUFBWU0sS0FDeERqckQsS0FBS3NxRCxZQUNOdHFELEtBQUtvWCxHQUFLLElBQUl3SSxLQUFLcXJDLE9BSUUsSUFBckJHLElBQ0FBLEdBQW1CLEVBQ25CN3pCLEVBQU13MEIsYUFBYS9yRCxNQUNuQm9yRCxHQUFtQixHQUkzQixTQUFTWSxFQUFTM3hDLEdBQ2QsT0FDSUEsYUFBZXd4QyxHQUFrQixNQUFQeHhDLEdBQXVDLE1BQXhCQSxFQUFJaXhDLGlCQUlyRCxTQUFTeC9DLEVBQUtrUyxJQUVnQyxJQUF0Q3VaLEVBQU0wMEIsNkJBQ2Esb0JBQVpwZ0QsU0FDUEEsUUFBUUMsTUFFUkQsUUFBUUMsS0FBSyx3QkFBMEJrUyxHQUkvQyxTQUFTa3VDLEVBQVVsdUMsRUFBS3BDLEdBQ3BCLElBQUl1d0MsR0FBWSxFQUVoQixPQUFPN3VDLEdBQU8sV0FJVixHQUhnQyxNQUE1QmlhLEVBQU02MEIsb0JBQ043MEIsRUFBTTYwQixtQkFBbUIsS0FBTXB1QyxHQUUvQm11QyxFQUFXLENBQ1gsSUFDSXh0QyxFQUNBblksRUFDQTZCLEVBSEF3aEIsRUFBTyxHQUlYLElBQUtyakIsRUFBSSxFQUFHQSxFQUFJa1csVUFBVXphLE9BQVF1RSxJQUFLLENBRW5DLEdBREFtWSxFQUFNLEdBQ3NCLGlCQUFqQmpDLFVBQVVsVyxHQUFpQixDQUVsQyxJQUFLNkIsS0FETHNXLEdBQU8sTUFBUW5ZLEVBQUksS0FDUGtXLFVBQVUsR0FDZCtyQyxFQUFXL3JDLFVBQVUsR0FBSXJVLEtBQ3pCc1csR0FBT3RXLEVBQU0sS0FBT3FVLFVBQVUsR0FBR3JVLEdBQU8sTUFHaERzVyxFQUFNQSxFQUFJemQsTUFBTSxHQUFJLFFBRXBCeWQsRUFBTWpDLFVBQVVsVyxHQUVwQnFqQixFQUFLeG5CLEtBQUtzYyxHQUVkN1MsRUFDSWtTLEVBQ0ksZ0JBQ0F0SCxNQUFNbFcsVUFBVVUsTUFBTXdRLEtBQUttWSxHQUFNNVQsS0FBSyxJQUN0QyxNQUNBLElBQUkxSCxPQUFRc21CLE9BRXBCczNCLEdBQVksRUFFaEIsT0FBT3Z3QyxFQUFHL0IsTUFBTTdaLEtBQU0wYyxhQUN2QmQsR0FHUCxJQWdGSXFJLEVBaEZBb29DLEVBQWUsR0FFbkIsU0FBU0MsRUFBZ0J4NkMsRUFBTWtNLEdBQ0ssTUFBNUJ1WixFQUFNNjBCLG9CQUNONzBCLEVBQU02MEIsbUJBQW1CdDZDLEVBQU1rTSxHQUU5QnF1QyxFQUFhdjZDLEtBQ2RoRyxFQUFLa1MsR0FDTHF1QyxFQUFhdjZDLElBQVEsR0FPN0IsU0FBU3NJLEVBQVdvTSxHQUNoQixNQUN5QixvQkFBYjArQixVQUE0QjErQixhQUFpQjArQixVQUNYLHNCQUExQ3R0QyxPQUFPcFgsVUFBVWEsU0FBU3FRLEtBQUs4VSxHQTJCdkMsU0FBUytsQyxFQUFhQyxFQUFjQyxHQUNoQyxJQUNJaDJCLEVBREF1eUIsRUFBTTFyQyxFQUFPLEdBQUlrdkMsR0FFckIsSUFBSy8xQixLQUFRZzJCLEVBQ0xoRSxFQUFXZ0UsRUFBYWgyQixLQUNwQit4QixFQUFTZ0UsRUFBYS8xQixLQUFVK3hCLEVBQVNpRSxFQUFZaDJCLEtBQ3JEdXlCLEVBQUl2eUIsR0FBUSxHQUNablosRUFBTzByQyxFQUFJdnlCLEdBQU8rMUIsRUFBYS8xQixJQUMvQm5aLEVBQU8wckMsRUFBSXZ5QixHQUFPZzJCLEVBQVloMkIsS0FDRixNQUFyQmcyQixFQUFZaDJCLEdBQ25CdXlCLEVBQUl2eUIsR0FBUWcyQixFQUFZaDJCLFVBRWpCdXlCLEVBQUl2eUIsSUFJdkIsSUFBS0EsS0FBUSsxQixFQUVML0QsRUFBVytELEVBQWMvMUIsS0FDeEJneUIsRUFBV2dFLEVBQWFoMkIsSUFDekIreEIsRUFBU2dFLEVBQWEvMUIsTUFHdEJ1eUIsRUFBSXZ5QixHQUFRblosRUFBTyxHQUFJMHJDLEVBQUl2eUIsS0FHbkMsT0FBT3V5QixFQUdYLFNBQVMwRCxFQUFPWixHQUNFLE1BQVZBLEdBQ0E5ckQsS0FBS3cyQixJQUFJczFCLEdBaEVqQnYwQixFQUFNMDBCLDZCQUE4QixFQUNwQzEwQixFQUFNNjBCLG1CQUFxQixLQXNFdkJub0MsRUFEQXJNLE9BQU9xTSxLQUNBck0sT0FBT3FNLEtBRVAsU0FBVTVKLEdBQ2IsSUFBSTdULEVBQ0F3aUQsRUFBTSxHQUNWLElBQUt4aUQsS0FBSzZULEVBQ0ZvdUMsRUFBV3B1QyxFQUFLN1QsSUFDaEJ3aUQsRUFBSTNtRCxLQUFLbUUsR0FHakIsT0FBT3dpRCxHQWtCZixTQUFTMkQsRUFBU3JvRCxFQUFRc29ELEVBQWNDLEdBQ3BDLElBQUlDLEVBQVksR0FBSzNvRCxLQUFLcUYsSUFBSWxGLEdBQzFCeW9ELEVBQWNILEVBQWVFLEVBQVU3cUQsT0FFM0MsT0FEV3FDLEdBQVUsRUFFUnVvRCxFQUFZLElBQU0sR0FBTSxLQUNqQzFvRCxLQUFLNm9ELElBQUksR0FBSTdvRCxLQUFLb2tDLElBQUksRUFBR3drQixJQUFjMXJELFdBQVdrbEQsT0FBTyxHQUN6RHVHLEVBSVIsSUFBSUcsRUFBbUIseU1BQ25CQyxFQUF3Qiw2Q0FDeEJDLEVBQWtCLEdBQ2xCQyxFQUF1QixHQU0zQixTQUFTQyxFQUFlbC9CLEVBQU9tL0IsRUFBUWpOLEVBQVM3akMsR0FDNUMsSUFBSWlXLEVBQU9qVyxFQUNhLGlCQUFiQSxJQUNQaVcsRUFBTyxXQUNILE9BQU96eUIsS0FBS3djLE9BR2hCMlIsSUFDQWkvQixFQUFxQmovQixHQUFTc0UsR0FFOUI2NkIsSUFDQUYsRUFBcUJFLEVBQU8sSUFBTSxXQUM5QixPQUFPWCxFQUFTbDZCLEVBQUs1WSxNQUFNN1osS0FBTTBjLFdBQVk0d0MsRUFBTyxHQUFJQSxFQUFPLE1BR25Fak4sSUFDQStNLEVBQXFCL00sR0FBVyxXQUM1QixPQUFPcmdELEtBQUt1dEQsYUFBYWxOLFFBQ3JCNXRCLEVBQUs1WSxNQUFNN1osS0FBTTBjLFdBQ2pCeVIsS0F1Q2hCLFNBQVNxL0IsRUFBYXhxQyxFQUFHcGlCLEdBQ3JCLE9BQUtvaUIsRUFBRXNuQyxXQUlQMXBELEVBQVM2c0QsRUFBYTdzRCxFQUFRb2lCLEVBQUV1cUMsY0FDaENKLEVBQWdCdnNELEdBQ1p1c0QsRUFBZ0J2c0QsSUFqQ3hCLFNBQTRCQSxHQUN4QixJQUNJNEYsRUFDQXZFLEVBVndCdWtCLEVBUXhCNU0sRUFBUWhaLEVBQU9zaUIsTUFBTStwQyxHQUl6QixJQUFLem1ELEVBQUksRUFBR3ZFLEVBQVMyWCxFQUFNM1gsT0FBUXVFLEVBQUl2RSxFQUFRdUUsSUFDdkM0bUQsRUFBcUJ4ekMsRUFBTXBULElBQzNCb1QsRUFBTXBULEdBQUs0bUQsRUFBcUJ4ekMsRUFBTXBULElBRXRDb1QsRUFBTXBULElBaEJjZ2dCLEVBZ0JjNU0sRUFBTXBULElBZnRDMGMsTUFBTSxZQUNMc0QsRUFBTTdsQixRQUFRLFdBQVksSUFFOUI2bEIsRUFBTTdsQixRQUFRLE1BQU8sSUFnQjVCLE9BQU8sU0FBVXFrRCxHQUNiLElBQ0l4K0MsRUFEQSs5QyxFQUFTLEdBRWIsSUFBSy85QyxFQUFJLEVBQUdBLEVBQUl2RSxFQUFRdUUsSUFDcEIrOUMsR0FBVW5xQyxFQUFXUixFQUFNcFQsSUFDckJvVCxFQUFNcFQsR0FBR2tMLEtBQUtzekMsRUFBS3BrRCxHQUNuQmdaLEVBQU1wVCxHQUVoQixPQUFPKzlDLEdBWW9CbUosQ0FBbUI5c0QsR0FFM0N1c0QsRUFBZ0J2c0QsR0FBUW9pQixJQVBwQkEsRUFBRXVxQyxhQUFhbkksY0FVOUIsU0FBU3FJLEVBQWE3c0QsRUFBUXVvRCxHQUMxQixJQUFJM2lELEVBQUksRUFFUixTQUFTbW5ELEVBQTRCbm5DLEdBQ2pDLE9BQU8yaUMsRUFBTzFLLGVBQWVqNEIsSUFBVUEsRUFJM0MsSUFEQTBtQyxFQUFzQlUsVUFBWSxFQUMzQnBuRCxHQUFLLEdBQUswbUQsRUFBc0J0bUQsS0FBS2hHLElBQ3hDQSxFQUFTQSxFQUFPRCxRQUNadXNELEVBQ0FTLEdBRUpULEVBQXNCVSxVQUFZLEVBQ2xDcG5ELEdBQUssRUFHVCxPQUFPNUYsRUFrRlgsSUFBSWl0RCxFQUFVLEdBRWQsU0FBU0MsRUFBYTkwQixFQUFNKzBCLEdBQ3hCLElBQUlDLEVBQVloMUIsRUFBS3QxQixjQUNyQm1xRCxFQUFRRyxHQUFhSCxFQUFRRyxFQUFZLEtBQU9ILEVBQVFFLEdBQWEvMEIsRUFHekUsU0FBU2kxQixFQUFlekgsR0FDcEIsTUFBd0IsaUJBQVZBLEVBQ1JxSCxFQUFRckgsSUFBVXFILEVBQVFySCxFQUFNOWlELG9CQUNoQ21LLEVBR1YsU0FBU3FnRCxFQUFxQkMsR0FDMUIsSUFDSUMsRUFDQTMzQixFQUZBNDNCLEVBQWtCLEdBSXRCLElBQUs1M0IsS0FBUTAzQixFQUNMMUYsRUFBVzBGLEVBQWExM0IsS0FDeEIyM0IsRUFBaUJILEVBQWV4M0IsTUFFNUI0M0IsRUFBZ0JELEdBQWtCRCxFQUFZMTNCLElBSzFELE9BQU80M0IsRUFHWCxJQUFJQyxFQUFhLEdBRWpCLFNBQVNDLEVBQWdCdjFCLEVBQU13MUIsR0FDM0JGLEVBQVd0MUIsR0FBUXcxQixFQWlCdkIsU0FBU25xRCxFQUFXbkIsR0FDaEIsT0FBUUEsRUFBTyxHQUFNLEdBQUtBLEVBQU8sS0FBUSxHQUFNQSxFQUFPLEtBQVEsRUFHbEUsU0FBU3VyRCxFQUFTbnFELEdBQ2QsT0FBSUEsRUFBUyxFQUVGSCxLQUFLNmtDLEtBQUsxa0MsSUFBVyxFQUVyQkgsS0FBS3NqRCxNQUFNbmpELEdBSTFCLFNBQVNvcUQsRUFBTUMsR0FDWCxJQUFJQyxHQUFpQkQsRUFDakJqdUQsRUFBUSxFQU1aLE9BSnNCLElBQWxCa3VELEdBQXVCaGxCLFNBQVNnbEIsS0FDaENsdUQsRUFBUSt0RCxFQUFTRyxJQUdkbHVELEVBR1gsU0FBU211RCxFQUFXNzFCLEVBQU04MUIsR0FDdEIsT0FBTyxTQUFVcHVELEdBQ2IsT0FBYSxNQUFUQSxHQUNBcXVELEVBQU0vdUQsS0FBTWc1QixFQUFNdDRCLEdBQ2xCNjJCLEVBQU13MEIsYUFBYS9yRCxLQUFNOHVELEdBQ2xCOXVELE1BRUFnYyxFQUFJaGMsS0FBTWc1QixJQUs3QixTQUFTaGQsRUFBSWdwQyxFQUFLaHNCLEdBQ2QsT0FBT2dzQixFQUFJc0YsVUFDTHRGLEVBQUk1dEMsR0FBRyxPQUFTNHRDLEVBQUkwRyxPQUFTLE1BQVEsSUFBTTF5QixLQUMzQ2l5QixJQUdWLFNBQVM4RCxFQUFNL0osRUFBS2hzQixFQUFNdDRCLEdBQ2xCc2tELEVBQUlzRixZQUFjaE4sTUFBTTU4QyxLQUVYLGFBQVRzNEIsR0FDQTMwQixFQUFXMmdELEVBQUk5aEQsU0FDQyxJQUFoQjhoRCxFQUFJL2hELFNBQ1csS0FBZitoRCxFQUFJcmpELFFBRUpqQixFQUFRZ3VELEVBQU1odUQsR0FDZHNrRCxFQUFJNXRDLEdBQUcsT0FBUzR0QyxFQUFJMEcsT0FBUyxNQUFRLElBQU0xeUIsR0FDdkN0NEIsRUFDQXNrRCxFQUFJL2hELFFBQ0orckQsR0FBWXR1RCxFQUFPc2tELEVBQUkvaEQsV0FHM0IraEQsRUFBSTV0QyxHQUFHLE9BQVM0dEMsRUFBSTBHLE9BQVMsTUFBUSxJQUFNMXlCLEdBQU10NEIsSUFnQzdELElBbUJJdXVELEVBbkJBQyxFQUFTLEtBQ1RDLEVBQVMsT0FDVEMsR0FBUyxRQUNUQyxHQUFTLFFBQ1RDLEdBQVMsYUFDVEMsR0FBWSxRQUNaQyxHQUFZLFlBQ1pDLEdBQVksZ0JBQ1pDLEdBQVksVUFDWkMsR0FBWSxVQUNaQyxHQUFZLGVBQ1pDLEdBQWdCLE1BQ2hCQyxHQUFjLFdBQ2RDLEdBQWMscUJBQ2RDLEdBQW1CLDBCQUluQkMsR0FBWSx3SkFLaEIsU0FBU0MsR0FBYy9oQyxFQUFPZ2lDLEVBQU9DLEdBQ2pDbkIsRUFBUTlnQyxHQUFTL1QsRUFBVysxQyxHQUN0QkEsRUFDQSxTQUFVRSxFQUFVOUMsR0FDaEIsT0FBTzhDLEdBQVlELEVBQWNBLEVBQWNELEdBSTdELFNBQVNHLEdBQXNCbmlDLEVBQU8yOUIsR0FDbEMsT0FBS3JELEVBQVd3RyxFQUFTOWdDLEdBSWxCOGdDLEVBQVE5Z0MsR0FBTzI5QixFQUFPakIsUUFBU2lCLEVBQU9GLFNBSGxDLElBQUl4ckQsT0FRUm13RCxHQVI4QnBpQyxFQVU1Qnh0QixRQUFRLEtBQU0sSUFDZEEsUUFBUSx1Q0FBdUMsU0FDNUNxcEIsRUFDQXdtQyxFQUNBQyxFQUNBQyxFQUNBQyxHQUVBLE9BQU9ILEdBQU1DLEdBQU1DLEdBQU1DLE9BS3pDLFNBQVNKLEdBQVkxZCxHQUNqQixPQUFPQSxFQUFFbHlDLFFBQVEseUJBQTBCLFFBcEMvQ3N1RCxFQUFVLEdBdUNWLElBQUk3akMsR0FBUyxHQUViLFNBQVN3bEMsR0FBY3ppQyxFQUFPM1IsR0FDMUIsSUFBSWhXLEVBQ0Fpc0IsRUFBT2pXLEVBU1gsSUFScUIsaUJBQVYyUixJQUNQQSxFQUFRLENBQUNBLElBRVQyNkIsRUFBU3RzQyxLQUNUaVcsRUFBTyxTQUFVak0sRUFBTzVNLEdBQ3BCQSxFQUFNNEMsR0FBWWt5QyxFQUFNbG9DLEtBRzNCaGdCLEVBQUksRUFBR0EsRUFBSTJuQixFQUFNbHNCLE9BQVF1RSxJQUMxQjRrQixHQUFPK0MsRUFBTTNuQixJQUFNaXNCLEVBSTNCLFNBQVNvK0IsR0FBa0IxaUMsRUFBTzNSLEdBQzlCbzBDLEdBQWN6aUMsR0FBTyxTQUFVM0gsRUFBTzVNLEVBQU9reUMsRUFBUTM5QixHQUNqRDI5QixFQUFPZ0YsR0FBS2hGLEVBQU9nRixJQUFNLEdBQ3pCdDBDLEVBQVNnSyxFQUFPc2xDLEVBQU9nRixHQUFJaEYsRUFBUTM5QixNQUkzQyxTQUFTNGlDLEdBQXdCNWlDLEVBQU8zSCxFQUFPc2xDLEdBQzlCLE1BQVR0bEMsR0FBaUJpaUMsRUFBV3I5QixHQUFRK0MsSUFDcEMvQyxHQUFPK0MsR0FBTzNILEVBQU9zbEMsRUFBT2tGLEdBQUlsRixFQUFRMzlCLEdBSWhELElBY0lodEIsR0FpQkosU0FBUzZ0RCxHQUFZOXJELEVBQU1ELEdBQ3ZCLEdBQUlxNkMsTUFBTXA2QyxJQUFTbzZDLE1BQU1yNkMsR0FDckIsT0FBT2dvRCxJQUVYLElBekJZbHBELEVBeUJSa3ZELEdBQWVodUQsR0F6QlBsQixFQXlCYyxJQXhCUkEsR0FBS0EsRUEwQnZCLE9BREFtQixJQUFTRCxFQUFRZ3VELEdBQVksR0FDVCxJQUFiQSxFQUNENXNELEVBQVduQixHQUNQLEdBQ0EsR0FDSixHQUFPK3RELEVBQVcsRUFBSyxFQXhCN0I5dkQsR0FEQXVWLE1BQU1sVyxVQUFVVyxRQUNOdVYsTUFBTWxXLFVBQVVXLFFBRWhCLFNBQVVzVyxHQUVoQixJQUFJalIsRUFDSixJQUFLQSxFQUFJLEVBQUdBLEVBQUl4RyxLQUFLaUMsU0FBVXVFLEVBQzNCLEdBQUl4RyxLQUFLd0csS0FBT2lSLEVBQ1osT0FBT2pSLEVBR2YsT0FBUSxHQW1CaEI2bUQsRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLE1BQU0sV0FDakMsT0FBT3J0RCxLQUFLaUQsUUFBVSxLQUcxQm9xRCxFQUFlLE1BQU8sRUFBRyxHQUFHLFNBQVV6c0QsR0FDbEMsT0FBT1osS0FBS3V0RCxhQUFheFAsWUFBWS85QyxLQUFNWSxNQUcvQ3lzRCxFQUFlLE9BQVEsRUFBRyxHQUFHLFNBQVV6c0QsR0FDbkMsT0FBT1osS0FBS3V0RCxhQUFhelAsT0FBTzk5QyxLQUFNWSxNQUsxQ2t0RCxFQUFhLFFBQVMsS0FJdEJTLEVBQWdCLFFBQVMsR0FJekIyQixHQUFjLElBQUtYLElBQ25CVyxHQUFjLEtBQU1YLEdBQVdKLEdBQy9CZSxHQUFjLE9BQU8sU0FBVUcsRUFBVWxILEdBQ3JDLE9BQU9BLEVBQU9sRyxpQkFBaUJvTixNQUVuQ0gsR0FBYyxRQUFRLFNBQVVHLEVBQVVsSCxHQUN0QyxPQUFPQSxFQUFPekYsWUFBWTJNLE1BRzlCTyxHQUFjLENBQUMsSUFBSyxPQUFPLFNBQVVwcUMsRUFBTzVNLEdBQ3hDQSxFQTdFUSxHQTZFTzgwQyxFQUFNbG9DLEdBQVMsS0FHbENvcUMsR0FBYyxDQUFDLE1BQU8sU0FBUyxTQUFVcHFDLEVBQU81TSxFQUFPa3lDLEVBQVEzOUIsR0FDM0QsSUFBSWxyQixFQUFRNm9ELEVBQU9GLFFBQVFuSSxZQUFZajlCLEVBQU8ySCxFQUFPMjlCLEVBQU9qQixTQUUvQyxNQUFUNW5ELEVBQ0EyVyxFQXBGSSxHQW9GVzNXLEVBRWZzbUQsRUFBZ0J1QyxHQUFRaEMsYUFBZXRqQyxLQU0vQyxJQUFJMHFDLEdBQXNCLHdGQUF3Rjl2RCxNQUMxRyxLQUVKK3ZELEdBQTJCLGtEQUFrRC92RCxNQUN6RSxLQUVKZ3dELEdBQW1CLGdDQUNuQkMsR0FBMEJwQixHQUMxQnFCLEdBQXFCckIsR0E4QnpCLFNBQVNzQixHQUFrQkMsRUFBVzV3RCxFQUFRd29ELEdBQzFDLElBQUk1aUQsRUFDQWlyRCxFQUNBek0sRUFDQTBNLEVBQU1GLEVBQVVHLG9CQUNwQixJQUFLM3hELEtBQUs0eEQsYUFLTixJQUhBNXhELEtBQUs0eEQsYUFBZSxHQUNwQjV4RCxLQUFLNnhELGlCQUFtQixHQUN4Qjd4RCxLQUFLOHhELGtCQUFvQixHQUNwQnRyRCxFQUFJLEVBQUdBLEVBQUksS0FBTUEsRUFDbEJ3K0MsRUFBTWtFLEVBQVUsQ0FBQyxJQUFNMWlELElBQ3ZCeEcsS0FBSzh4RCxrQkFBa0J0ckQsR0FBS3hHLEtBQUsrOUMsWUFDN0JpSCxFQUNBLElBQ0YyTSxvQkFDRjN4RCxLQUFLNnhELGlCQUFpQnJyRCxHQUFLeEcsS0FBSzg5QyxPQUFPa0gsRUFBSyxJQUFJMk0sb0JBSXhELE9BQUl2SSxFQUNlLFFBQVh4b0QsR0FFZSxLQURmNndELEVBQUt0d0QsR0FBUXVRLEtBQUsxUixLQUFLOHhELGtCQUFtQkosSUFDdkJELEVBQUssTUFHVCxLQURmQSxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBSzZ4RCxpQkFBa0JILElBQ3RCRCxFQUFLLEtBR2IsUUFBWDd3RCxHQUVZLEtBRFo2d0QsRUFBS3R3RCxHQUFRdVEsS0FBSzFSLEtBQUs4eEQsa0JBQW1CSixNQUszQixLQURmRCxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBSzZ4RCxpQkFBa0JILElBRjlCRCxFQUdhLE1BR1osS0FEWkEsRUFBS3R3RCxHQUFRdVEsS0FBSzFSLEtBQUs2eEQsaUJBQWtCSCxNQUsxQixLQURmRCxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBSzh4RCxrQkFBbUJKLElBRi9CRCxFQUdhLEtBNERwQyxTQUFTTSxHQUFTL00sRUFBS3RrRCxHQUNuQixJQUFJc3hELEVBRUosSUFBS2hOLEVBQUlzRixVQUVMLE9BQU90RixFQUdYLEdBQXFCLGlCQUFWdGtELEVBQ1AsR0FBSSxRQUFRa0csS0FBS2xHLEdBQ2JBLEVBQVFndUQsRUFBTWh1RCxRQUlkLElBQUtvb0QsRUFGTHBvRCxFQUFRc2tELEVBQUl1SSxhQUFhOUosWUFBWS9pRCxJQUdqQyxPQUFPc2tELEVBT25CLE9BRkFnTixFQUFhN3RELEtBQUtDLElBQUk0Z0QsRUFBSXJqRCxPQUFRcXRELEdBQVloSyxFQUFJOWhELE9BQVF4QyxJQUMxRHNrRCxFQUFJNXRDLEdBQUcsT0FBUzR0QyxFQUFJMEcsT0FBUyxNQUFRLElBQU0sU0FBU2hyRCxFQUFPc3hELEdBQ3BEaE4sRUFHWCxTQUFTaU4sR0FBWXZ4RCxHQUNqQixPQUFhLE1BQVRBLEdBQ0FxeEQsR0FBUy94RCxLQUFNVSxHQUNmNjJCLEVBQU13MEIsYUFBYS9yRCxNQUFNLEdBQ2xCQSxNQUVBZ2MsRUFBSWhjLEtBQU0sU0FnRHpCLFNBQVNreUQsS0FDTCxTQUFTQyxFQUFVOXhDLEVBQUdDLEdBQ2xCLE9BQU9BLEVBQUVyZSxPQUFTb2UsRUFBRXBlLE9BR3hCLElBR0l1RSxFQUNBdytDLEVBSkFvTixFQUFjLEdBQ2RDLEVBQWEsR0FDYkMsRUFBYyxHQUdsQixJQUFLOXJELEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUVoQncrQyxFQUFNa0UsRUFBVSxDQUFDLElBQU0xaUQsSUFDdkI0ckQsRUFBWS92RCxLQUFLckMsS0FBSys5QyxZQUFZaUgsRUFBSyxLQUN2Q3FOLEVBQVdod0QsS0FBS3JDLEtBQUs4OUMsT0FBT2tILEVBQUssS0FDakNzTixFQUFZandELEtBQUtyQyxLQUFLODlDLE9BQU9rSCxFQUFLLEtBQ2xDc04sRUFBWWp3RCxLQUFLckMsS0FBSys5QyxZQUFZaUgsRUFBSyxLQU8zQyxJQUhBb04sRUFBWWgxQyxLQUFLKzBDLEdBQ2pCRSxFQUFXajFDLEtBQUsrMEMsR0FDaEJHLEVBQVlsMUMsS0FBSyswQyxHQUNaM3JELEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNoQjRyRCxFQUFZNXJELEdBQUsrcEQsR0FBWTZCLEVBQVk1ckQsSUFDekM2ckQsRUFBVzdyRCxHQUFLK3BELEdBQVk4QixFQUFXN3JELElBRTNDLElBQUtBLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNoQjhyRCxFQUFZOXJELEdBQUsrcEQsR0FBWStCLEVBQVk5ckQsSUFHN0N4RyxLQUFLdXlELGFBQWUsSUFBSW55RCxPQUFPLEtBQU9reUQsRUFBWXI4QyxLQUFLLEtBQU8sSUFBSyxLQUNuRWpXLEtBQUt3eUQsa0JBQW9CeHlELEtBQUt1eUQsYUFDOUJ2eUQsS0FBS3l5RCxtQkFBcUIsSUFBSXJ5RCxPQUMxQixLQUFPaXlELEVBQVdwOEMsS0FBSyxLQUFPLElBQzlCLEtBRUpqVyxLQUFLMHlELHdCQUEwQixJQUFJdHlELE9BQy9CLEtBQU9neUQsRUFBWW44QyxLQUFLLEtBQU8sSUFDL0IsS0FpRFIsU0FBUzA4QyxHQUFXenZELEdBQ2hCLE9BQU9tQixFQUFXbkIsR0FBUSxJQUFNLElBNUNwQ21xRCxFQUFlLElBQUssRUFBRyxHQUFHLFdBQ3RCLElBQUluTixFQUFJbGdELEtBQUtrRCxPQUNiLE9BQU9nOUMsR0FBSyxLQUFPeU0sRUFBU3pNLEVBQUcsR0FBSyxJQUFNQSxLQUc5Q21OLEVBQWUsRUFBRyxDQUFDLEtBQU0sR0FBSSxHQUFHLFdBQzVCLE9BQU9ydEQsS0FBS2tELE9BQVMsT0FHekJtcUQsRUFBZSxFQUFHLENBQUMsT0FBUSxHQUFJLEVBQUcsUUFDbENBLEVBQWUsRUFBRyxDQUFDLFFBQVMsR0FBSSxFQUFHLFFBQ25DQSxFQUFlLEVBQUcsQ0FBQyxTQUFVLEdBQUcsR0FBTyxFQUFHLFFBSTFDUyxFQUFhLE9BQVEsS0FJckJTLEVBQWdCLE9BQVEsR0FJeEIyQixHQUFjLElBQUtKLElBQ25CSSxHQUFjLEtBQU1YLEdBQVdKLEdBQy9CZSxHQUFjLE9BQVFQLEdBQVdOLElBQ2pDYSxHQUFjLFFBQVNOLEdBQVdOLElBQ2xDWSxHQUFjLFNBQVVOLEdBQVdOLElBRW5Dc0IsR0FBYyxDQUFDLFFBQVMsVUFsWWIsR0FtWVhBLEdBQWMsUUFBUSxTQUFVcHFDLEVBQU81TSxHQUNuQ0EsRUFwWU8sR0FxWWMsSUFBakI0TSxFQUFNdmtCLE9BQWVzMUIsRUFBTXE3QixrQkFBa0Jwc0MsR0FBU2tvQyxFQUFNbG9DLE1BRXBFb3FDLEdBQWMsTUFBTSxTQUFVcHFDLEVBQU81TSxHQUNqQ0EsRUF4WU8sR0F3WU8yZCxFQUFNcTdCLGtCQUFrQnBzQyxNQUUxQ29xQyxHQUFjLEtBQUssU0FBVXBxQyxFQUFPNU0sR0FDaENBLEVBM1lPLEdBMllPNVgsU0FBU3drQixFQUFPLE9BV2xDK1EsRUFBTXE3QixrQkFBb0IsU0FBVXBzQyxHQUNoQyxPQUFPa29DLEVBQU1sb0MsSUFBVWtvQyxFQUFNbG9DLEdBQVMsR0FBSyxLQUFPLE1BS3RELElBQUlxc0MsR0FBYWhFLEVBQVcsWUFBWSxHQU14QyxTQUFTaUUsR0FBVzVTLEVBQUdsOUIsRUFBRzg4QixFQUFHRixFQUFHSSxFQUFHbk4sRUFBR2tnQixHQUdsQyxJQUFJcHhELEVBWUosT0FWSXUrQyxFQUFJLEtBQU9BLEdBQUssR0FFaEJ2K0MsRUFBTyxJQUFJaWUsS0FBS3NnQyxFQUFJLElBQUtsOUIsRUFBRzg4QixFQUFHRixFQUFHSSxFQUFHbk4sRUFBR2tnQixHQUNwQ25wQixTQUFTam9DLEVBQUtxeEQsZ0JBQ2RyeEQsRUFBS3N4RCxZQUFZL1MsSUFHckJ2K0MsRUFBTyxJQUFJaWUsS0FBS3NnQyxFQUFHbDlCLEVBQUc4OEIsRUFBR0YsRUFBR0ksRUFBR25OLEVBQUdrZ0IsR0FHL0JweEQsRUFHWCxTQUFTdXhELEdBQWNoVCxHQUNuQixJQUFJditDLEVBQU1rb0IsRUFjVixPQVpJcTJCLEVBQUksS0FBT0EsR0FBSyxJQUNoQnIyQixFQUFPblQsTUFBTWxXLFVBQVVVLE1BQU13USxLQUFLZ0wsWUFFN0IsR0FBS3dqQyxFQUFJLElBQ2R2K0MsRUFBTyxJQUFJaWUsS0FBS0EsS0FBS3V6QyxJQUFJdDVDLE1BQU0sS0FBTWdRLElBQ2pDK2YsU0FBU2pvQyxFQUFLeXhELG1CQUNkenhELEVBQUsweEQsZUFBZW5ULElBR3hCditDLEVBQU8sSUFBSWllLEtBQUtBLEtBQUt1ekMsSUFBSXQ1QyxNQUFNLEtBQU02QyxZQUdsQy9hLEVBSVgsU0FBUzJ4RCxHQUFnQnB3RCxFQUFNcTlDLEVBQUtDLEdBQ2hDLElBQ0krUyxFQUFNLEVBQUloVCxFQUFNQyxFQUlwQixRQUZhLEVBQUkwUyxHQUFjaHdELEVBQU0sRUFBR3F3RCxHQUFLQyxZQUFjalQsR0FBTyxFQUVsRGdULEVBQU0sRUFJMUIsU0FBU0UsR0FBbUJ2d0QsRUFBTW85QyxFQUFNb1QsRUFBU25ULEVBQUtDLEdBQ2xELElBR0ltVCxFQUNBQyxFQUZBQyxFQUFZLEVBQUksR0FBS3ZULEVBQU8sSUFGWixFQUFJb1QsRUFBVW5ULEdBQU8sRUFDeEIrUyxHQUFnQnB3RCxFQUFNcTlDLEVBQUtDLEdBZ0I1QyxPQVhJcVQsR0FBYSxFQUViRCxFQUFlakIsR0FEZmdCLEVBQVV6d0QsRUFBTyxHQUNvQjJ3RCxFQUM5QkEsRUFBWWxCLEdBQVd6dkQsSUFDOUJ5d0QsRUFBVXp3RCxFQUFPLEVBQ2pCMHdELEVBQWVDLEVBQVlsQixHQUFXenZELEtBRXRDeXdELEVBQVV6d0QsRUFDVjB3RCxFQUFlQyxHQUdaLENBQ0gzd0QsS0FBTXl3RCxFQUNORSxVQUFXRCxHQUluQixTQUFTRSxHQUFXOU8sRUFBS3pFLEVBQUtDLEdBQzFCLElBRUl1VCxFQUNBSixFQUhBSyxFQUFhVixHQUFnQnRPLEVBQUk5aEQsT0FBUXE5QyxFQUFLQyxHQUM5Q0YsRUFBT244QyxLQUFLc2pELE9BQU96QyxFQUFJNk8sWUFBY0csRUFBYSxHQUFLLEdBQUssRUFlaEUsT0FYSTFULEVBQU8sRUFFUHlULEVBQVV6VCxFQUFPMlQsR0FEakJOLEVBQVUzTyxFQUFJOWhELE9BQVMsRUFDZXE5QyxFQUFLQyxHQUNwQ0YsRUFBTzJULEdBQVlqUCxFQUFJOWhELE9BQVFxOUMsRUFBS0MsSUFDM0N1VCxFQUFVelQsRUFBTzJULEdBQVlqUCxFQUFJOWhELE9BQVFxOUMsRUFBS0MsR0FDOUNtVCxFQUFVM08sRUFBSTloRCxPQUFTLElBRXZCeXdELEVBQVUzTyxFQUFJOWhELE9BQ2Q2d0QsRUFBVXpULEdBR1AsQ0FDSEEsS0FBTXlULEVBQ043d0QsS0FBTXl3RCxHQUlkLFNBQVNNLEdBQVkvd0QsRUFBTXE5QyxFQUFLQyxHQUM1QixJQUFJd1QsRUFBYVYsR0FBZ0Jwd0QsRUFBTXE5QyxFQUFLQyxHQUN4QzBULEVBQWlCWixHQUFnQnB3RCxFQUFPLEVBQUdxOUMsRUFBS0MsR0FDcEQsT0FBUW1TLEdBQVd6dkQsR0FBUTh3RCxFQUFhRSxHQUFrQixFQUs5RDdHLEVBQWUsSUFBSyxDQUFDLEtBQU0sR0FBSSxLQUFNLFFBQ3JDQSxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksS0FBTSxXQUlyQ1MsRUFBYSxPQUFRLEtBQ3JCQSxFQUFhLFVBQVcsS0FJeEJTLEVBQWdCLE9BQVEsR0FDeEJBLEVBQWdCLFVBQVcsR0FJM0IyQixHQUFjLElBQUtYLElBQ25CVyxHQUFjLEtBQU1YLEdBQVdKLEdBQy9CZSxHQUFjLElBQUtYLElBQ25CVyxHQUFjLEtBQU1YLEdBQVdKLEdBRS9CMEIsR0FBa0IsQ0FBQyxJQUFLLEtBQU0sSUFBSyxPQUFPLFNBQ3RDcnFDLEVBQ0E4NUIsRUFDQXdMLEVBQ0EzOUIsR0FFQW15QixFQUFLbnlCLEVBQU1vNEIsT0FBTyxFQUFHLElBQU1tSSxFQUFNbG9DLE1BMEhyQyxTQUFTMnRDLEdBQWNDLEVBQUl6OEMsR0FDdkIsT0FBT3k4QyxFQUFHbHpELE1BQU15VyxFQUFHLEdBQUd6UCxPQUFPa3NELEVBQUdsekQsTUFBTSxFQUFHeVcsSUFyRjdDMDFDLEVBQWUsSUFBSyxFQUFHLEtBQU0sT0FFN0JBLEVBQWUsS0FBTSxFQUFHLEdBQUcsU0FBVXpzRCxHQUNqQyxPQUFPWixLQUFLdXRELGFBQWFyUCxZQUFZbCtDLEtBQU1ZLE1BRy9DeXNELEVBQWUsTUFBTyxFQUFHLEdBQUcsU0FBVXpzRCxHQUNsQyxPQUFPWixLQUFLdXRELGFBQWF0UCxjQUFjaitDLEtBQU1ZLE1BR2pEeXNELEVBQWUsT0FBUSxFQUFHLEdBQUcsU0FBVXpzRCxHQUNuQyxPQUFPWixLQUFLdXRELGFBQWF2UCxTQUFTaCtDLEtBQU1ZLE1BRzVDeXNELEVBQWUsSUFBSyxFQUFHLEVBQUcsV0FDMUJBLEVBQWUsSUFBSyxFQUFHLEVBQUcsY0FJMUJTLEVBQWEsTUFBTyxLQUNwQkEsRUFBYSxVQUFXLEtBQ3hCQSxFQUFhLGFBQWMsS0FHM0JTLEVBQWdCLE1BQU8sSUFDdkJBLEVBQWdCLFVBQVcsSUFDM0JBLEVBQWdCLGFBQWMsSUFJOUIyQixHQUFjLElBQUtYLElBQ25CVyxHQUFjLElBQUtYLElBQ25CVyxHQUFjLElBQUtYLElBQ25CVyxHQUFjLE1BQU0sU0FBVUcsRUFBVWxILEdBQ3BDLE9BQU9BLEVBQU9rTCxpQkFBaUJoRSxNQUVuQ0gsR0FBYyxPQUFPLFNBQVVHLEVBQVVsSCxHQUNyQyxPQUFPQSxFQUFPbUwsbUJBQW1CakUsTUFFckNILEdBQWMsUUFBUSxTQUFVRyxFQUFVbEgsR0FDdEMsT0FBT0EsRUFBT29MLGNBQWNsRSxNQUdoQ1EsR0FBa0IsQ0FBQyxLQUFNLE1BQU8sU0FBUyxTQUFVcnFDLEVBQU84NUIsRUFBTXdMLEVBQVEzOUIsR0FDcEUsSUFBSXVsQyxFQUFVNUgsRUFBT0YsUUFBUWhJLGNBQWNwOUIsRUFBTzJILEVBQU8yOUIsRUFBT2pCLFNBRWpELE1BQVg2SSxFQUNBcFQsRUFBS1IsRUFBSTRULEVBRVRuSyxFQUFnQnVDLEdBQVFsQixlQUFpQnBrQyxLQUlqRHFxQyxHQUFrQixDQUFDLElBQUssSUFBSyxNQUFNLFNBQVVycUMsRUFBTzg1QixFQUFNd0wsRUFBUTM5QixHQUM5RG15QixFQUFLbnlCLEdBQVN1Z0MsRUFBTWxvQyxNQWtDeEIsSUFBSWd1QyxHQUF3QiwyREFBMkRwekQsTUFDL0UsS0FFSnF6RCxHQUE2Qiw4QkFBOEJyekQsTUFBTSxLQUNqRXN6RCxHQUEyQix1QkFBdUJ0ekQsTUFBTSxLQUN4RHV6RCxHQUF1QjFFLEdBQ3ZCMkUsR0FBNEIzRSxHQUM1QjRFLEdBQTBCNUUsR0FpQzlCLFNBQVM2RSxHQUFvQkMsRUFBYW4wRCxFQUFRd29ELEdBQzlDLElBQUk1aUQsRUFDQWlyRCxFQUNBek0sRUFDQTBNLEVBQU1xRCxFQUFZcEQsb0JBQ3RCLElBQUszeEQsS0FBS2cxRCxlQUtOLElBSkFoMUQsS0FBS2cxRCxlQUFpQixHQUN0QmgxRCxLQUFLaTFELG9CQUFzQixHQUMzQmoxRCxLQUFLazFELGtCQUFvQixHQUVwQjF1RCxFQUFJLEVBQUdBLEVBQUksSUFBS0EsRUFDakJ3K0MsRUFBTWtFLEVBQVUsQ0FBQyxJQUFNLElBQUlsbUQsSUFBSXdELEdBQy9CeEcsS0FBS2sxRCxrQkFBa0IxdUQsR0FBS3hHLEtBQUtrK0MsWUFDN0I4RyxFQUNBLElBQ0YyTSxvQkFDRjN4RCxLQUFLaTFELG9CQUFvQnp1RCxHQUFLeEcsS0FBS2krQyxjQUMvQitHLEVBQ0EsSUFDRjJNLG9CQUNGM3hELEtBQUtnMUQsZUFBZXh1RCxHQUFLeEcsS0FBS2crQyxTQUFTZ0gsRUFBSyxJQUFJMk0sb0JBSXhELE9BQUl2SSxFQUNlLFNBQVh4b0QsR0FFZSxLQURmNndELEVBQUt0d0QsR0FBUXVRLEtBQUsxUixLQUFLZzFELGVBQWdCdEQsSUFDcEJELEVBQUssS0FDTixRQUFYN3dELEdBRVEsS0FEZjZ3RCxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBS2kxRCxvQkFBcUJ2RCxJQUN6QkQsRUFBSyxNQUdULEtBRGZBLEVBQUt0d0QsR0FBUXVRLEtBQUsxUixLQUFLazFELGtCQUFtQnhELElBQ3ZCRCxFQUFLLEtBR2IsU0FBWDd3RCxHQUVZLEtBRFo2d0QsRUFBS3R3RCxHQUFRdVEsS0FBSzFSLEtBQUtnMUQsZUFBZ0J0RCxNQUszQixLQURaRCxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBS2kxRCxvQkFBcUJ2RCxNQUs3QixLQURmRCxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBS2sxRCxrQkFBbUJ4RCxJQU4vQkQsRUFPYSxLQUNOLFFBQVg3d0QsR0FFSyxLQURaNndELEVBQUt0d0QsR0FBUXVRLEtBQUsxUixLQUFLaTFELG9CQUFxQnZELE1BS2hDLEtBRFpELEVBQUt0d0QsR0FBUXVRLEtBQUsxUixLQUFLZzFELGVBQWdCdEQsTUFLeEIsS0FEZkQsRUFBS3R3RCxHQUFRdVEsS0FBSzFSLEtBQUtrMUQsa0JBQW1CeEQsSUFOL0JELEVBT2EsTUFHWixLQURaQSxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBS2sxRCxrQkFBbUJ4RCxNQUs5QixLQURaRCxFQUFLdHdELEdBQVF1USxLQUFLMVIsS0FBS2cxRCxlQUFnQnRELE1BS3hCLEtBRGZELEVBQUt0d0QsR0FBUXVRLEtBQUsxUixLQUFLaTFELG9CQUFxQnZELElBTmpDRCxFQU9hLEtBNEtwQyxTQUFTMEQsS0FDTCxTQUFTaEQsRUFBVTl4QyxFQUFHQyxHQUNsQixPQUFPQSxFQUFFcmUsT0FBU29lLEVBQUVwZSxPQUd4QixJQUlJdUUsRUFDQXcrQyxFQUNBb1EsRUFDQUMsRUFDQUMsRUFSQUMsRUFBWSxHQUNabkQsRUFBYyxHQUNkQyxFQUFhLEdBQ2JDLEVBQWMsR0FNbEIsSUFBSzlyRCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFFZncrQyxFQUFNa0UsRUFBVSxDQUFDLElBQU0sSUFBSWxtRCxJQUFJd0QsR0FDL0I0dUQsRUFBTzdFLEdBQVl2d0QsS0FBS2srQyxZQUFZOEcsRUFBSyxLQUN6Q3FRLEVBQVM5RSxHQUFZdndELEtBQUtpK0MsY0FBYytHLEVBQUssS0FDN0NzUSxFQUFRL0UsR0FBWXZ3RCxLQUFLZytDLFNBQVNnSCxFQUFLLEtBQ3ZDdVEsRUFBVWx6RCxLQUFLK3lELEdBQ2ZoRCxFQUFZL3ZELEtBQUtnekQsR0FDakJoRCxFQUFXaHdELEtBQUtpekQsR0FDaEJoRCxFQUFZandELEtBQUsreUQsR0FDakI5QyxFQUFZandELEtBQUtnekQsR0FDakIvQyxFQUFZandELEtBQUtpekQsR0FJckJDLEVBQVVuNEMsS0FBSyswQyxHQUNmQyxFQUFZaDFDLEtBQUsrMEMsR0FDakJFLEVBQVdqMUMsS0FBSyswQyxHQUNoQkcsRUFBWWwxQyxLQUFLKzBDLEdBRWpCbnlELEtBQUt3MUQsZUFBaUIsSUFBSXAxRCxPQUFPLEtBQU9reUQsRUFBWXI4QyxLQUFLLEtBQU8sSUFBSyxLQUNyRWpXLEtBQUt5MUQsb0JBQXNCejFELEtBQUt3MUQsZUFDaEN4MUQsS0FBSzAxRCxrQkFBb0IxMUQsS0FBS3cxRCxlQUU5QngxRCxLQUFLMjFELHFCQUF1QixJQUFJdjFELE9BQzVCLEtBQU9peUQsRUFBV3A4QyxLQUFLLEtBQU8sSUFDOUIsS0FFSmpXLEtBQUs0MUQsMEJBQTRCLElBQUl4MUQsT0FDakMsS0FBT2d5RCxFQUFZbjhDLEtBQUssS0FBTyxJQUMvQixLQUVKalcsS0FBSzYxRCx3QkFBMEIsSUFBSXoxRCxPQUMvQixLQUFPbTFELEVBQVV0L0MsS0FBSyxLQUFPLElBQzdCLEtBTVIsU0FBUzYvQyxLQUNMLE9BQU85MUQsS0FBS3MrQyxRQUFVLElBQU0sR0FxQ2hDLFNBQVNELEdBQVNsd0IsRUFBTzFnQixHQUNyQjQvQyxFQUFlbC9CLEVBQU8sRUFBRyxHQUFHLFdBQ3hCLE9BQU9udUIsS0FBS3V0RCxhQUFhbFAsU0FDckJyK0MsS0FBS3MrQyxRQUNMdCtDLEtBQUt1K0MsVUFDTDl3QyxNQWlCWixTQUFTc29ELEdBQWMxRixFQUFVbEgsR0FDN0IsT0FBT0EsRUFBTzZNLGVBckRsQjNJLEVBQWUsSUFBSyxDQUFDLEtBQU0sR0FBSSxFQUFHLFFBQ2xDQSxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksRUFBR3lJLElBQ2xDekksRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLEdBTi9CLFdBQ0ksT0FBT3J0RCxLQUFLcytDLFNBQVcsTUFPM0IrTyxFQUFlLE1BQU8sRUFBRyxHQUFHLFdBQ3hCLE1BQU8sR0FBS3lJLEdBQVFqOEMsTUFBTTdaLE1BQVEyc0QsRUFBUzNzRCxLQUFLdStDLFVBQVcsTUFHL0Q4TyxFQUFlLFFBQVMsRUFBRyxHQUFHLFdBQzFCLE1BQ0ksR0FDQXlJLEdBQVFqOEMsTUFBTTdaLE1BQ2Qyc0QsRUFBUzNzRCxLQUFLdStDLFVBQVcsR0FDekJvTyxFQUFTM3NELEtBQUtpMkQsVUFBVyxNQUlqQzVJLEVBQWUsTUFBTyxFQUFHLEdBQUcsV0FDeEIsTUFBTyxHQUFLcnRELEtBQUtzK0MsUUFBVXFPLEVBQVMzc0QsS0FBS3UrQyxVQUFXLE1BR3hEOE8sRUFBZSxRQUFTLEVBQUcsR0FBRyxXQUMxQixNQUNJLEdBQ0FydEQsS0FBS3MrQyxRQUNMcU8sRUFBUzNzRCxLQUFLdStDLFVBQVcsR0FDekJvTyxFQUFTM3NELEtBQUtpMkQsVUFBVyxNQWNqQzVYLEdBQVMsS0FBSyxHQUNkQSxHQUFTLEtBQUssR0FJZHlQLEVBQWEsT0FBUSxLQUdyQlMsRUFBZ0IsT0FBUSxJQVF4QjJCLEdBQWMsSUFBSzZGLElBQ25CN0YsR0FBYyxJQUFLNkYsSUFDbkI3RixHQUFjLElBQUtYLElBQ25CVyxHQUFjLElBQUtYLElBQ25CVyxHQUFjLElBQUtYLElBQ25CVyxHQUFjLEtBQU1YLEdBQVdKLEdBQy9CZSxHQUFjLEtBQU1YLEdBQVdKLEdBQy9CZSxHQUFjLEtBQU1YLEdBQVdKLEdBRS9CZSxHQUFjLE1BQU9WLElBQ3JCVSxHQUFjLFFBQVNULElBQ3ZCUyxHQUFjLE1BQU9WLElBQ3JCVSxHQUFjLFFBQVNULElBRXZCbUIsR0FBYyxDQUFDLElBQUssTUF6akNULEdBMGpDWEEsR0FBYyxDQUFDLElBQUssT0FBTyxTQUFVcHFDLEVBQU81TSxFQUFPa3lDLEdBQy9DLElBQUlvSyxFQUFTeEgsRUFBTWxvQyxHQUNuQjVNLEVBNWpDTyxHQTRqQ2tCLEtBQVhzOEMsRUFBZ0IsRUFBSUEsS0FFdEN0RixHQUFjLENBQUMsSUFBSyxNQUFNLFNBQVVwcUMsRUFBTzVNLEVBQU9reUMsR0FDOUNBLEVBQU9xSyxNQUFRckssRUFBT0YsUUFBUXhOLEtBQUs1M0IsR0FDbkNzbEMsRUFBT3NLLFVBQVk1dkMsS0FFdkJvcUMsR0FBYyxDQUFDLElBQUssT0FBTyxTQUFVcHFDLEVBQU81TSxFQUFPa3lDLEdBQy9DbHlDLEVBbmtDTyxHQW1rQ084MEMsRUFBTWxvQyxHQUNwQitpQyxFQUFnQnVDLEdBQVFoQixTQUFVLEtBRXRDOEYsR0FBYyxPQUFPLFNBQVVwcUMsRUFBTzVNLEVBQU9reUMsR0FDekMsSUFBSW5oQixFQUFNbmtCLEVBQU12a0IsT0FBUyxFQUN6QjJYLEVBeGtDTyxHQXdrQ084MEMsRUFBTWxvQyxFQUFNKy9CLE9BQU8sRUFBRzViLElBQ3BDL3dCLEVBeGtDUyxHQXdrQ084MEMsRUFBTWxvQyxFQUFNKy9CLE9BQU81YixJQUNuQzRlLEVBQWdCdUMsR0FBUWhCLFNBQVUsS0FFdEM4RixHQUFjLFNBQVMsU0FBVXBxQyxFQUFPNU0sRUFBT2t5QyxHQUMzQyxJQUFJdUssRUFBTzd2QyxFQUFNdmtCLE9BQVMsRUFDdEJxMEQsRUFBTzl2QyxFQUFNdmtCLE9BQVMsRUFDMUIyWCxFQS9rQ08sR0Era0NPODBDLEVBQU1sb0MsRUFBTSsvQixPQUFPLEVBQUc4UCxJQUNwQ3o4QyxFQS9rQ1MsR0Era0NPODBDLEVBQU1sb0MsRUFBTSsvQixPQUFPOFAsRUFBTSxJQUN6Q3o4QyxFQS9rQ1MsR0Era0NPODBDLEVBQU1sb0MsRUFBTSsvQixPQUFPK1AsSUFDbkMvTSxFQUFnQnVDLEdBQVFoQixTQUFVLEtBRXRDOEYsR0FBYyxPQUFPLFNBQVVwcUMsRUFBTzVNLEVBQU9reUMsR0FDekMsSUFBSW5oQixFQUFNbmtCLEVBQU12a0IsT0FBUyxFQUN6QjJYLEVBdGxDTyxHQXNsQ084MEMsRUFBTWxvQyxFQUFNKy9CLE9BQU8sRUFBRzViLElBQ3BDL3dCLEVBdGxDUyxHQXNsQ084MEMsRUFBTWxvQyxFQUFNKy9CLE9BQU81YixPQUV2Q2ltQixHQUFjLFNBQVMsU0FBVXBxQyxFQUFPNU0sRUFBT2t5QyxHQUMzQyxJQUFJdUssRUFBTzd2QyxFQUFNdmtCLE9BQVMsRUFDdEJxMEQsRUFBTzl2QyxFQUFNdmtCLE9BQVMsRUFDMUIyWCxFQTVsQ08sR0E0bENPODBDLEVBQU1sb0MsRUFBTSsvQixPQUFPLEVBQUc4UCxJQUNwQ3o4QyxFQTVsQ1MsR0E0bENPODBDLEVBQU1sb0MsRUFBTSsvQixPQUFPOFAsRUFBTSxJQUN6Q3o4QyxFQTVsQ1MsR0E0bENPODBDLEVBQU1sb0MsRUFBTSsvQixPQUFPK1AsT0FXdkMsSUFLSUMsR0FBYTFILEVBQVcsU0FBUyxHQVVyQyxJQXVCSTJILEdBdkJBQyxHQUFhLENBQ2J6WCxTQTdpRGtCLENBQ2xCQyxRQUFTLGdCQUNUQyxRQUFTLG1CQUNUQyxTQUFVLGVBQ1ZDLFFBQVMsb0JBQ1RDLFNBQVUsc0JBQ1ZDLFNBQVUsS0F3aURWYixlQWw3Q3dCLENBQ3hCRSxJQUFLLFlBQ0xELEdBQUksU0FDSkUsRUFBRyxhQUNIQyxHQUFJLGVBQ0pDLElBQUssc0JBQ0xDLEtBQU0sNkJBNjZDTnFHLFlBaDVDcUIsZUFpNUNyQi9FLFFBMzRDaUIsS0E0NENqQkQsdUJBMzRDZ0MsVUE0NENoQ2IsYUF0NENzQixDQUN0QkMsT0FBUSxRQUNSQyxLQUFNLFNBQ041TSxFQUFHLGdCQUNINk0sR0FBSSxhQUNKMThCLEVBQUcsV0FDSDI4QixHQUFJLGFBQ0pDLEVBQUcsVUFDSEMsR0FBSSxXQUNKQyxFQUFHLFFBQ0hDLEdBQUksVUFDSnhtQyxFQUFHLFNBQ0hzcEMsR0FBSSxXQUNKN0MsRUFBRyxVQUNIQyxHQUFJLFlBQ0pDLEVBQUcsU0FDSEMsR0FBSSxZQXczQ0pyQyxPQUFRb1QsR0FDUm5ULFlBQWFvVCxHQUViN1EsS0F6bEJvQixDQUNwQkMsSUFBSyxFQUNMQyxJQUFLLEdBeWxCTHhDLFNBQVV3VyxHQUNWdFcsWUFBYXdXLEdBQ2J6VyxjQUFld1csR0FFZnRXLGNBaEM2QixpQkFvQzdCdVksR0FBVSxHQUNWQyxHQUFpQixHQUdyQixTQUFTQyxHQUFhQyxFQUFNcGdELEdBQ3hCLElBQUlqUSxFQUNBc3dELEVBQU8zeUQsS0FBS0MsSUFBSXl5RCxFQUFLNTBELE9BQVF3VSxFQUFLeFUsUUFDdEMsSUFBS3VFLEVBQUksRUFBR0EsRUFBSXN3RCxFQUFNdHdELEdBQUssRUFDdkIsR0FBSXF3RCxFQUFLcndELEtBQU9pUSxFQUFLalEsR0FDakIsT0FBT0EsRUFHZixPQUFPc3dELEVBR1gsU0FBU0MsR0FBZ0IxdUQsR0FDckIsT0FBT0EsRUFBTUEsRUFBSTNFLGNBQWMvQyxRQUFRLElBQUssS0FBTzBILEVBc0N2RCxTQUFTMnVELEdBQVdsbEQsR0FDaEIsSUFBSW1sRCxFQUFZLEtBR2hCLFFBQ3NCcHBELElBQWxCNm9ELEdBQVE1a0QsSUFFUlMsR0FDQUEsRUFBT3FELFFBRVAsSUFDSXFoRCxFQUFZVCxHQUFhVSxNQUV6QixRQUFlLEtBQWNwbEQsR0FDN0JxbEQsR0FBbUJGLEdBQ3JCLE1BQU9yckQsR0FHTDhxRCxHQUFRNWtELEdBQVEsS0FHeEIsT0FBTzRrRCxHQUFRNWtELEdBTW5CLFNBQVNxbEQsR0FBbUI5dUQsRUFBS214QixHQUM3QixJQUFJL2dCLEVBcUJKLE9BcEJJcFEsS0FFSW9RLEVBREFvd0MsRUFBWXJ2QixHQUNMNDlCLEdBQVUvdUQsR0FFVncxQyxHQUFheDFDLEVBQUtteEIsSUFLekJnOUIsR0FBZS85QyxFQUVRLG9CQUFaNU0sU0FBMkJBLFFBQVFDLE1BRTFDRCxRQUFRQyxLQUNKLFVBQVl6RCxFQUFNLDJDQU0zQm11RCxHQUFhVSxNQUd4QixTQUFTclosR0FBYS9yQyxFQUFNZzZDLEdBQ3hCLEdBQWUsT0FBWEEsRUFBaUIsQ0FDakIsSUFBSTNDLEVBQ0FxRCxFQUFlaUssR0FFbkIsR0FEQTNLLEVBQU9oRyxLQUFPaDBDLEVBQ08sTUFBakI0a0QsR0FBUTVrRCxHQUNSdzZDLEVBQ0ksdUJBQ0EsMk9BS0pFLEVBQWVrSyxHQUFRNWtELEdBQU11bEQsYUFDMUIsR0FBMkIsTUFBdkJ2TCxFQUFPd0wsYUFDZCxHQUFvQyxNQUFoQ1osR0FBUTVLLEVBQU93TCxjQUNmOUssRUFBZWtLLEdBQVE1SyxFQUFPd0wsY0FBY0QsWUFDekMsQ0FFSCxHQUFjLE9BRGRsTyxFQUFTNk4sR0FBV2xMLEVBQU93TCxlQVd2QixPQVBLWCxHQUFlN0ssRUFBT3dMLGdCQUN2QlgsR0FBZTdLLEVBQU93TCxjQUFnQixJQUUxQ1gsR0FBZTdLLEVBQU93TCxjQUFjajFELEtBQUssQ0FDckN5UCxLQUFNQSxFQUNOZzZDLE9BQVFBLElBRUwsS0FUUFUsRUFBZXJELEVBQU9rTyxRQTBCbEMsT0FiQVgsR0FBUTVrRCxHQUFRLElBQUk0NkMsRUFBT0gsRUFBYUMsRUFBY1YsSUFFbEQ2SyxHQUFlN2tELElBQ2Y2a0QsR0FBZTdrRCxHQUFNMVAsU0FBUSxTQUFVTCxHQUNuQzg3QyxHQUFhOTdDLEVBQUUrUCxLQUFNL1AsRUFBRStwRCxXQU8vQnFMLEdBQW1CcmxELEdBRVo0a0QsR0FBUTVrRCxHQUlmLGNBRE80a0QsR0FBUTVrRCxHQUNSLEtBa0RmLFNBQVNzbEQsR0FBVS91RCxHQUNmLElBQUk4Z0QsRUFNSixHQUpJOWdELEdBQU9BLEVBQUl1akQsU0FBV3ZqRCxFQUFJdWpELFFBQVFzTCxRQUNsQzd1RCxFQUFNQSxFQUFJdWpELFFBQVFzTCxRQUdqQjd1RCxFQUNELE9BQU9tdUQsR0FHWCxJQUFLNS9DLEVBQVF2TyxHQUFNLENBR2YsR0FEQThnRCxFQUFTNk4sR0FBVzN1RCxHQUVoQixPQUFPOGdELEVBRVg5Z0QsRUFBTSxDQUFDQSxHQUdYLE9BNU1KLFNBQXNCa3ZELEdBT2xCLElBTkEsSUFDSXI2QyxFQUNBN0YsRUFDQTh4QyxFQUNBL25ELEVBSkFvRixFQUFJLEVBTURBLEVBQUkrd0QsRUFBTXQxRCxRQUFRLENBS3JCLElBSEFpYixHQURBOWIsRUFBUTIxRCxHQUFnQlEsRUFBTS93RCxJQUFJcEYsTUFBTSxNQUM5QmEsT0FFVm9WLEdBREFBLEVBQU8wL0MsR0FBZ0JRLEVBQU0vd0QsRUFBSSxLQUNuQjZRLEVBQUtqVyxNQUFNLEtBQU8sS0FDekI4YixFQUFJLEdBQUcsQ0FFVixHQURBaXNDLEVBQVM2TixHQUFXNTFELEVBQU1GLE1BQU0sRUFBR2djLEdBQUdqSCxLQUFLLE1BRXZDLE9BQU9rekMsRUFFWCxHQUNJOXhDLEdBQ0FBLEVBQUtwVixRQUFVaWIsR0FDZjA1QyxHQUFheDFELEVBQU9pVyxJQUFTNkYsRUFBSSxFQUdqQyxNQUVKQSxJQUVKMVcsSUFFSixPQUFPZ3dELEdBK0tBZ0IsQ0FBYW52RCxHQU94QixTQUFTb3ZELEdBQWN6MEMsR0FDbkIsSUFBSXlxQixFQUNBcHRCLEVBQUkyQyxFQUFFZ3VDLEdBdUNWLE9BckNJM3dDLElBQXNDLElBQWpDa3BDLEVBQWdCdm1DLEdBQUd5cUIsV0FDeEJBLEVBQ0lwdEIsRUE5M0NBLEdBODNDVyxHQUFLQSxFQTkzQ2hCLEdBODNDMkIsR0E5M0MzQixFQWc0Q01BLEVBLzNDUCxHQSszQ2lCLEdBQUtBLEVBLzNDdEIsR0ErM0NnQzJ1QyxHQUFZM3VDLEVBajRDNUMsR0FpNENxREEsRUFoNENwRCxJQUNELEVBaTRDT0EsRUFoNENQLEdBZzRDaUIsR0FDVkEsRUFqNENQLEdBaTRDaUIsSUFDRyxLQUFaQSxFQWw0Q1IsS0FtNEMwQixJQUFkQSxFQWw0Q1YsSUFtNEMyQixJQUFkQSxFQWw0Q2IsSUFtNENnQyxJQUFuQkEsRUFsNENSLElBSFAsRUF1NENPQSxFQXQ0Q0wsR0FzNENpQixHQUFLQSxFQXQ0Q3RCLEdBczRDa0MsR0F0NENsQyxFQXc0Q0tBLEVBdjRDTCxHQXU0Q2lCLEdBQUtBLEVBdjRDdEIsR0F1NENrQyxHQXY0Q2xDLEVBeTRDS0EsRUF4NENBLEdBdzRDaUIsR0FBS0EsRUF4NEN0QixHQXc0Q3VDLElBeDRDdkMsR0EwNENDLEVBR1BrcEMsRUFBZ0J2bUMsR0FBRzAwQyxxQkFDbEJqcUIsRUFwNUNGLEdBbzVDcUJBLEVBbDVDckIsS0FvNUNDQSxFQXA1Q0QsR0FzNUNDOGIsRUFBZ0J2bUMsR0FBRzIwQyxpQkFBZ0MsSUFBZGxxQixJQUNyQ0EsRUFsNUNELEdBbzVDQzhiLEVBQWdCdm1DLEdBQUc0MEMsbUJBQWtDLElBQWRucUIsSUFDdkNBLEVBcDVDRSxHQXU1Q044YixFQUFnQnZtQyxHQUFHeXFCLFNBQVdBLEdBRzNCenFCLEVBS1gsSUFBSTYwQyxHQUFtQixpSkFDbkJDLEdBQWdCLDZJQUNoQkMsR0FBVSx3QkFDVkMsR0FBVyxDQUNQLENBQUMsZUFBZ0IsdUJBQ2pCLENBQUMsYUFBYyxtQkFDZixDQUFDLGVBQWdCLGtCQUNqQixDQUFDLGFBQWMsZUFBZSxHQUM5QixDQUFDLFdBQVksZUFDYixDQUFDLFVBQVcsY0FBYyxHQUMxQixDQUFDLGFBQWMsY0FDZixDQUFDLFdBQVksU0FDYixDQUFDLGFBQWMsZUFDZixDQUFDLFlBQWEsZUFBZSxHQUM3QixDQUFDLFVBQVcsU0FDWixDQUFDLFNBQVUsU0FBUyxHQUNwQixDQUFDLE9BQVEsU0FBUyxJQUd0QkMsR0FBVyxDQUNQLENBQUMsZ0JBQWlCLHVCQUNsQixDQUFDLGdCQUFpQixzQkFDbEIsQ0FBQyxXQUFZLGtCQUNiLENBQUMsUUFBUyxhQUNWLENBQUMsY0FBZSxxQkFDaEIsQ0FBQyxjQUFlLG9CQUNoQixDQUFDLFNBQVUsZ0JBQ1gsQ0FBQyxPQUFRLFlBQ1QsQ0FBQyxLQUFNLFNBRVhDLEdBQWtCLHFCQUVsQjlOLEdBQVUsMExBQ1YrTixHQUFhLENBQ1RDLEdBQUksRUFDSkMsSUFBSyxFQUNMQyxLQUFLLElBQ0xDLEtBQUssSUFDTEMsS0FBSyxJQUNMQyxLQUFLLElBQ0xDLEtBQUssSUFDTEMsS0FBSyxJQUNMQyxLQUFLLElBQ0xDLEtBQUssS0FJYixTQUFTQyxHQUFjaE4sR0FDbkIsSUFBSXRsRCxFQUNBc3BCLEVBR0FpcEMsRUFDQUMsRUFDQXIwRCxFQUNBczBELEVBTEEvaUMsRUFBUzQxQixFQUFPeDFDLEdBQ2hCNE0sRUFBUTIwQyxHQUFpQnQwQyxLQUFLMlMsSUFBVzRoQyxHQUFjdjBDLEtBQUsyUyxHQU1oRSxHQUFJaFQsRUFBTyxDQUdQLElBRkFxbUMsRUFBZ0J1QyxHQUFRN0IsS0FBTSxFQUV6QnpqRCxFQUFJLEVBQUdzcEIsRUFBSWtvQyxHQUFTLzFELE9BQVF1RSxFQUFJc3BCLEVBQUd0cEIsSUFDcEMsR0FBSXd4RCxHQUFTeHhELEdBQUcsR0FBRytjLEtBQUtMLEVBQU0sSUFBSyxDQUMvQjgxQyxFQUFhaEIsR0FBU3h4RCxHQUFHLEdBQ3pCdXlELEdBQStCLElBQW5CZixHQUFTeHhELEdBQUcsR0FDeEIsTUFHUixHQUFrQixNQUFkd3lELEVBRUEsWUFEQWxOLEVBQU92QixVQUFXLEdBR3RCLEdBQUlybkMsRUFBTSxHQUFJLENBQ1YsSUFBSzFjLEVBQUksRUFBR3NwQixFQUFJbW9DLEdBQVNoMkQsT0FBUXVFLEVBQUlzcEIsRUFBR3RwQixJQUNwQyxHQUFJeXhELEdBQVN6eEQsR0FBRyxHQUFHK2MsS0FBS0wsRUFBTSxJQUFLLENBRS9CdmUsR0FBY3VlLEVBQU0sSUFBTSxLQUFPKzBDLEdBQVN6eEQsR0FBRyxHQUM3QyxNQUdSLEdBQWtCLE1BQWQ3QixFQUVBLFlBREFtbkQsRUFBT3ZCLFVBQVcsR0FJMUIsSUFBS3dPLEdBQTJCLE1BQWRwMEQsRUFFZCxZQURBbW5ELEVBQU92QixVQUFXLEdBR3RCLEdBQUlybkMsRUFBTSxHQUFJLENBQ1YsSUFBSTYwQyxHQUFReDBDLEtBQUtMLEVBQU0sSUFJbkIsWUFEQTRvQyxFQUFPdkIsVUFBVyxHQUZsQjBPLEVBQVcsSUFNbkJuTixFQUFPUCxHQUFLeU4sR0FBY3IwRCxHQUFjLEtBQU9zMEQsR0FBWSxJQUMzREMsR0FBMEJwTixRQUUxQkEsRUFBT3ZCLFVBQVcsRUEyQjFCLFNBQVM0TyxHQUFlQyxHQUNwQixJQUFJbDJELEVBQU9sQixTQUFTbzNELEVBQVMsSUFDN0IsT0FBSWwyRCxHQUFRLEdBQ0QsSUFBT0EsRUFDUEEsR0FBUSxJQUNSLEtBQU9BLEVBRVhBLEVBNkNYLFNBQVNtMkQsR0FBa0J2TixHQUN2QixJQUNJd04sRUE1RUpGLEVBQ0FHLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBRUlqM0QsRUFvRUF3Z0IsRUFBUWtuQyxHQUFRN21DLEtBQXVCdW9DLEVBQU94MUMsR0F4QzdDM1YsUUFBUSxvQkFBcUIsS0FDN0JBLFFBQVEsV0FBWSxLQUNwQkEsUUFBUSxTQUFVLElBQ2xCQSxRQUFRLFNBQVUsS0F1Q3ZCLEdBQUl1aUIsRUFBTyxDQVNQLEdBdEZKazJDLEVBK0VRbDJDLEVBQU0sR0E5RWRxMkMsRUErRVFyMkMsRUFBTSxHQTlFZHMyQyxFQStFUXQyQyxFQUFNLEdBOUVkdTJDLEVBK0VRdjJDLEVBQU0sR0E5RWR3MkMsRUErRVF4MkMsRUFBTSxHQTlFZHkyQyxFQStFUXoyQyxFQUFNLEdBN0VWeGdCLEVBQVMsQ0FDVHkyRCxHQUFlQyxHQUNmakksR0FBeUJod0QsUUFBUW80RCxHQUNqQ3YzRCxTQUFTdzNELEVBQVEsSUFDakJ4M0QsU0FBU3kzRCxFQUFTLElBQ2xCejNELFNBQVMwM0QsRUFBVyxLQUdwQkMsR0FDQWozRCxFQUFPTCxLQUFLTCxTQUFTMjNELEVBQVcsS0E4RGhDTCxFQTNERzUyRCxHQXNCWCxTQUFzQmszRCxFQUFZQyxFQUFhL04sR0FDM0MsT0FBSThOLEdBRXNCbkYsR0FBMkJ0ekQsUUFBUXk0RCxLQUNyQyxJQUFJaDZDLEtBQ2hCaTZDLEVBQVksR0FDWkEsRUFBWSxHQUNaQSxFQUFZLElBQ2RDLFdBRUZ2USxFQUFnQnVDLEdBQVF6QixpQkFBa0IsRUFDMUN5QixFQUFPdkIsVUFBVyxHQUNYLEdBaUNOd1AsQ0FBYTcyQyxFQUFNLEdBQUlvMkMsRUFBYXhOLEdBQ3JDLE9BR0pBLEVBQU9rRixHQUFLc0ksRUFDWnhOLEVBQU9MLEtBaENmLFNBQXlCdU8sRUFBV0MsRUFBZ0JDLEdBQ2hELEdBQUlGLEVBQ0EsT0FBTzdCLEdBQVc2QixHQUNmLEdBQUlDLEVBRVAsT0FBTyxFQUVQLElBQUlwUyxFQUFLN2xELFNBQVNrNEQsRUFBVyxJQUN6QmwzQyxFQUFJNmtDLEVBQUssSUFFYixPQURTQSxFQUFLN2tDLEdBQUssSUFDUixHQUFLQSxFQXNCRm0zQyxDQUFnQmozQyxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxLQUV4RDRvQyxFQUFPMTBDLEdBQUs4N0MsR0FBY3I1QyxNQUFNLEtBQU1peUMsRUFBT2tGLElBQzdDbEYsRUFBTzEwQyxHQUFHZ2pELGNBQWN0TyxFQUFPMTBDLEdBQUdpakQsZ0JBQWtCdk8sRUFBT0wsTUFFM0RsQyxFQUFnQnVDLEdBQVExQixTQUFVLE9BRWxDMEIsRUFBT3ZCLFVBQVcsRUE0QzFCLFNBQVMrUCxHQUFTajZDLEVBQUdDLEVBQUdpNkMsR0FDcEIsT0FBUyxNQUFMbDZDLEVBQ09BLEVBRUYsTUFBTEMsRUFDT0EsRUFFSmk2QyxFQW9CWCxTQUFTQyxHQUFnQjFPLEdBQ3JCLElBQUl0bEQsRUFDQTdFLEVBRUE4NEQsRUFDQUMsRUFDQUMsRUFIQW4wQyxFQUFRLEdBS1osSUFBSXNsQyxFQUFPMTBDLEdBQVgsQ0FnQ0EsSUE1QkFxakQsRUE3QkosU0FBMEIzTyxHQUV0QixJQUFJOE8sRUFBVyxJQUFJaDdDLEtBQUsyWCxFQUFNd0ksT0FDOUIsT0FBSStyQixFQUFPK08sUUFDQSxDQUNIRCxFQUFTeEgsaUJBQ1R3SCxFQUFTRSxjQUNURixFQUFTRyxjQUdWLENBQUNILEVBQVM1SCxjQUFlNEgsRUFBU0ksV0FBWUosRUFBU0ssV0FtQmhEQyxDQUFpQnBQLEdBRzNCQSxFQUFPZ0YsSUFBeUIsTUFBbkJoRixFQUFPa0YsR0Fyc0RqQixJQXFzRHlELE1BQXBCbEYsRUFBT2tGLEdBdHNEM0MsSUFneERaLFNBQStCbEYsR0FDM0IsSUFBSXZ5QyxFQUFHNGhELEVBQVU3YSxFQUFNb1QsRUFBU25ULEVBQUtDLEVBQUtuMEIsRUFBTSt1QyxFQUFpQkMsRUFHckQsT0FEWjloRCxFQUFJdXlDLEVBQU9nRixJQUNMd0ssSUFBcUIsTUFBUC9oRCxFQUFFZ2lELEdBQW9CLE1BQVBoaUQsRUFBRWlpRCxHQUNqQ2piLEVBQU0sRUFDTkMsRUFBTSxFQU1OMmEsRUFBV2IsR0FDUC9nRCxFQUFFK2hELEdBQ0Z4UCxFQUFPa0YsR0EveERSLEdBZ3lEQzhDLEdBQVcySCxLQUFlLEVBQUcsR0FBR3Y0RCxNQUVwQ285QyxFQUFPZ2EsR0FBUy9nRCxFQUFFZ2lELEVBQUcsS0FDckI3SCxFQUFVNEcsR0FBUy9nRCxFQUFFaWlELEVBQUcsSUFDVixHQUFLOUgsRUFBVSxLQUN6QjBILEdBQWtCLEtBR3RCN2EsRUFBTXVMLEVBQU9GLFFBQVE4UCxNQUFNbmIsSUFDM0JDLEVBQU1zTCxFQUFPRixRQUFROFAsTUFBTWxiLElBRTNCNmEsRUFBVXZILEdBQVcySCxLQUFlbGIsRUFBS0MsR0FFekMyYSxFQUFXYixHQUFTL2dELEVBQUVvaUQsR0FBSTdQLEVBQU9rRixHQTd5RDlCLEdBNnlEd0NxSyxFQUFRbjRELE1BR25EbzlDLEVBQU9nYSxHQUFTL2dELEVBQUVBLEVBQUc4aEQsRUFBUS9hLE1BRWxCLE1BQVAvbUMsRUFBRXVtQyxJQUVGNFQsRUFBVW42QyxFQUFFdW1DLEdBQ0UsR0FBSzRULEVBQVUsS0FDekIwSCxHQUFrQixHQUVSLE1BQVA3aEQsRUFBRTNOLEdBRVQ4bkQsRUFBVW42QyxFQUFFM04sRUFBSTIwQyxHQUNaaG5DLEVBQUUzTixFQUFJLEdBQUsyTixFQUFFM04sRUFBSSxLQUNqQnd2RCxHQUFrQixJQUl0QjFILEVBQVVuVCxHQUdkRCxFQUFPLEdBQUtBLEVBQU8yVCxHQUFZa0gsRUFBVTVhLEVBQUtDLEdBQzlDK0ksRUFBZ0J1QyxHQUFRNkwsZ0JBQWlCLEVBQ2YsTUFBbkJ5RCxFQUNQN1IsRUFBZ0J1QyxHQUFROEwsa0JBQW1CLEdBRTNDdnJDLEVBQU9vbkMsR0FBbUIwSCxFQUFVN2EsRUFBTW9ULEVBQVNuVCxFQUFLQyxHQUN4RHNMLEVBQU9rRixHQXowREosR0F5MERlM2tDLEVBQUtucEIsS0FDdkI0b0QsRUFBTzhQLFdBQWF2dkMsRUFBS3duQyxXQWxJekJnSSxDQUFzQi9QLEdBSUQsTUFBckJBLEVBQU84UCxhQUNQakIsRUFBWUwsR0FBU3hPLEVBQU9rRixHQTdzRHpCLEdBNnNEbUN5SixFQTdzRG5DLEtBZ3REQzNPLEVBQU84UCxXQUFhakosR0FBV2dJLElBQ1QsSUFBdEI3TyxFQUFPOFAsY0FFUHJTLEVBQWdCdUMsR0FBUTRMLG9CQUFxQixHQUdqRC8xRCxFQUFPdXhELEdBQWN5SCxFQUFXLEVBQUc3TyxFQUFPOFAsWUFDMUM5UCxFQUFPa0YsR0F0dERILEdBc3REZXJ2RCxFQUFLbTVELGNBQ3hCaFAsRUFBT2tGLEdBdHRESixHQXN0RGVydkQsRUFBS281RCxjQVF0QnYwRCxFQUFJLEVBQUdBLEVBQUksR0FBcUIsTUFBaEJzbEQsRUFBT2tGLEdBQUd4cUQsS0FBY0EsRUFDekNzbEQsRUFBT2tGLEdBQUd4cUQsR0FBS2dnQixFQUFNaGdCLEdBQUtpMEQsRUFBWWowRCxHQUkxQyxLQUFPQSxFQUFJLEVBQUdBLElBQ1ZzbEQsRUFBT2tGLEdBQUd4cUQsR0FBS2dnQixFQUFNaGdCLEdBQ0QsTUFBaEJzbEQsRUFBT2tGLEdBQUd4cUQsR0FBb0IsSUFBTkEsRUFBVSxFQUFJLEVBQUtzbEQsRUFBT2tGLEdBQUd4cUQsR0FLckMsS0FBcEJzbEQsRUFBT2tGLEdBenVESixJQTB1RG1CLElBQXRCbEYsRUFBT2tGLEdBenVERixJQTB1RGlCLElBQXRCbEYsRUFBT2tGLEdBenVERixJQTB1RHNCLElBQTNCbEYsRUFBT2tGLEdBenVERyxLQTJ1RFZsRixFQUFPZ1EsVUFBVyxFQUNsQmhRLEVBQU9rRixHQS91REosR0ErdURlLEdBR3RCbEYsRUFBTzEwQyxJQUFNMDBDLEVBQU8rTyxRQUFVM0gsR0FBZ0JKLElBQVlqNUMsTUFDdEQsS0FDQTJNLEdBRUprMEMsRUFBa0I1TyxFQUFPK08sUUFDbkIvTyxFQUFPMTBDLEdBQUdvOEMsWUFDVjFILEVBQU8xMEMsR0FBRzBpRCxTQUlHLE1BQWZoTyxFQUFPTCxNQUNQSyxFQUFPMTBDLEdBQUdnakQsY0FBY3RPLEVBQU8xMEMsR0FBR2lqRCxnQkFBa0J2TyxFQUFPTCxNQUczREssRUFBT2dRLFdBQ1BoUSxFQUFPa0YsR0Fqd0RKLEdBaXdEZSxJQUtsQmxGLEVBQU9nRixTQUNnQixJQUFoQmhGLEVBQU9nRixHQUFHaFIsR0FDakJnTSxFQUFPZ0YsR0FBR2hSLElBQU00YSxJQUVoQm5SLEVBQWdCdUMsR0FBUXpCLGlCQUFrQixJQXdFbEQsU0FBUzZPLEdBQTBCcE4sR0FFL0IsR0FBSUEsRUFBT1AsS0FBT2gwQixFQUFNd2tDLFNBSXhCLEdBQUlqUSxFQUFPUCxLQUFPaDBCLEVBQU15a0MsU0FBeEIsQ0FJQWxRLEVBQU9rRixHQUFLLEdBQ1p6SCxFQUFnQnVDLEdBQVExNUIsT0FBUSxFQUdoQyxJQUNJNXJCLEVBQ0FxekQsRUFDQXp1QyxFQUNBK0MsRUFDQTh0QyxFQUdBOVIsRUFSQWowQixFQUFTLEdBQUs0MUIsRUFBT3gxQyxHQU1yQjRsRCxFQUFlaG1DLEVBQU9qMEIsT0FDdEJrNkQsRUFBeUIsRUFNN0IsSUFIQS93QyxFQUNJcWlDLEVBQWEzQixFQUFPUCxHQUFJTyxFQUFPRixTQUFTMW9DLE1BQU0rcEMsSUFBcUIsR0FFbEV6bUQsRUFBSSxFQUFHQSxFQUFJNGtCLEVBQU9ucEIsT0FBUXVFLElBQzNCMm5CLEVBQVEvQyxFQUFPNWtCLElBQ2ZxekQsR0FBZTNqQyxFQUFPaFQsTUFBTW90QyxHQUFzQm5pQyxFQUFPMjlCLEtBQ3JELElBQUksT0FFSm1RLEVBQVUvbEMsRUFBT3F3QixPQUFPLEVBQUdyd0IsRUFBTy8wQixRQUFRMDRELEtBQzlCNTNELE9BQVMsR0FDakJzbkQsRUFBZ0J1QyxHQUFRcEMsWUFBWXJuRCxLQUFLNDVELEdBRTdDL2xDLEVBQVNBLEVBQU9oMUIsTUFDWmcxQixFQUFPLzBCLFFBQVEwNEQsR0FBZUEsRUFBWTUzRCxRQUU5Q2s2RCxHQUEwQnRDLEVBQVk1M0QsUUFHdENtckQsRUFBcUJqL0IsSUFDakIwckMsRUFDQXRRLEVBQWdCdUMsR0FBUTE1QixPQUFRLEVBRWhDbTNCLEVBQWdCdUMsR0FBUXJDLGFBQWFwbkQsS0FBSzhyQixHQUU5QzRpQyxHQUF3QjVpQyxFQUFPMHJDLEVBQWEvTixJQUNyQ0EsRUFBT2pCLFVBQVlnUCxHQUMxQnRRLEVBQWdCdUMsR0FBUXJDLGFBQWFwbkQsS0FBSzhyQixHQUtsRG83QixFQUFnQnVDLEdBQVFuQyxjQUNwQnVTLEVBQWVDLEVBQ2ZqbUMsRUFBT2owQixPQUFTLEdBQ2hCc25ELEVBQWdCdUMsR0FBUXBDLFlBQVlybkQsS0FBSzZ6QixHQUt6QzQxQixFQUFPa0YsR0FqNURKLElBaTVEZ0IsS0FDaUIsSUFBcEN6SCxFQUFnQnVDLEdBQVFoQixTQUN4QmdCLEVBQU9rRixHQW41REosR0FtNURlLElBRWxCekgsRUFBZ0J1QyxHQUFRaEIsYUFBVWo5QyxHQUd0QzA3QyxFQUFnQnVDLEdBQVE1QixnQkFBa0I0QixFQUFPa0YsR0FBRzl2RCxNQUFNLEdBQzFEcW9ELEVBQWdCdUMsR0FBUXpOLFNBQVd5TixFQUFPc0ssVUFFMUN0SyxFQUFPa0YsR0EzNURBLEdBMjZEWCxTQUF5QjdILEVBQVExakQsRUFBTTQ0QyxHQUNuQyxJQUFJK2QsRUFFSixPQUFnQixNQUFaL2QsRUFFTzU0QyxFQUVnQixNQUF2QjBqRCxFQUFPbkcsYUFDQW1HLEVBQU9uRyxhQUFhdjlDLEVBQU00NEMsR0FDWCxNQUFmOEssRUFBTy9LLE9BRWRnZSxFQUFPalQsRUFBTy9LLEtBQUtDLEtBQ1A1NEMsRUFBTyxLQUNmQSxHQUFRLElBRVAyMkQsR0FBaUIsS0FBVDMyRCxJQUNUQSxFQUFPLEdBRUpBLEdBR0FBLEVBckNPNDJELENBQ2R2USxFQUFPRixRQUNQRSxFQUFPa0YsR0E3NURKLEdBODVESGxGLEVBQU9zSyxXQUtDLFFBRFpqTSxFQUFNWixFQUFnQnVDLEdBQVEzQixPQUUxQjJCLEVBQU9rRixHQXY2REosR0F1NkRlbEYsRUFBT0YsUUFBUTBRLGdCQUFnQm5TLEVBQUsyQixFQUFPa0YsR0F2NkQxRCxLQTA2RFB3SixHQUFnQjFPLEdBQ2hCMkwsR0FBYzNMLFFBL0VWdU4sR0FBa0J2TixRQUpsQmdOLEdBQWNoTixHQXdNdEIsU0FBU3lRLEdBQWN6USxHQUNuQixJQUFJdGxDLEVBQVFzbEMsRUFBT3gxQyxHQUNmMVYsRUFBU2tyRCxFQUFPUCxHQUlwQixPQUZBTyxFQUFPRixRQUFVRSxFQUFPRixTQUFXd0wsR0FBVXRMLEVBQU9OLElBRXRDLE9BQVZobEMsUUFBOEIzWSxJQUFYak4sR0FBa0MsS0FBVjRsQixFQUNwQ3drQyxFQUFjLENBQUVwQixXQUFXLEtBR2pCLGlCQUFWcGpDLElBQ1BzbEMsRUFBT3gxQyxHQUFLa1EsRUFBUXNsQyxFQUFPRixRQUFRaEssU0FBU3A3QixJQUc1Q3dsQyxFQUFTeGxDLEdBQ0YsSUFBSXFsQyxFQUFPNEwsR0FBY2p4QyxLQUN6QnVpQyxFQUFPdmlDLEdBQ2RzbEMsRUFBTzEwQyxHQUFLb1AsRUFDTDVQLEVBQVFoVyxHQTFHdkIsU0FBa0NrckQsR0FDOUIsSUFBSTBRLEVBQ0FDLEVBQ0FDLEVBQ0FsMkQsRUFDQW0yRCxFQUNBQyxFQUNBQyxHQUFvQixFQUV4QixHQUF5QixJQUFyQi9RLEVBQU9QLEdBQUd0cEQsT0FHVixPQUZBc25ELEVBQWdCdUMsR0FBUS9CLGVBQWdCLE9BQ3hDK0IsRUFBTzEwQyxHQUFLLElBQUl3SSxLQUFLcXJDLE1BSXpCLElBQUt6a0QsRUFBSSxFQUFHQSxFQUFJc2xELEVBQU9QLEdBQUd0cEQsT0FBUXVFLElBQzlCbTJELEVBQWUsRUFDZkMsR0FBbUIsRUFDbkJKLEVBQWFuUixFQUFXLEdBQUlTLEdBQ04sTUFBbEJBLEVBQU8rTyxVQUNQMkIsRUFBVzNCLFFBQVUvTyxFQUFPK08sU0FFaEMyQixFQUFXalIsR0FBS08sRUFBT1AsR0FBRy9rRCxHQUMxQjB5RCxHQUEwQnNELEdBRXRCbFMsRUFBUWtTLEtBQ1JJLEdBQW1CLEdBSXZCRCxHQUFnQnBULEVBQWdCaVQsR0FBWTdTLGNBRzVDZ1QsR0FBa0UsR0FBbERwVCxFQUFnQmlULEdBQVkvUyxhQUFheG5ELE9BRXpEc25ELEVBQWdCaVQsR0FBWU0sTUFBUUgsRUFFL0JFLEVBYUdGLEVBQWVELElBQ2ZBLEVBQWNDLEVBQ2RGLEVBQWFELElBYkUsTUFBZkUsR0FDQUMsRUFBZUQsR0FDZkUsS0FFQUYsRUFBY0MsRUFDZEYsRUFBYUQsRUFDVEksSUFDQUMsR0FBb0IsSUFXcEN2L0MsRUFBT3d1QyxFQUFRMlEsR0FBY0QsR0FrRHpCTyxDQUF5QmpSLEdBQ2xCbHJELEVBQ1BzNEQsR0FBMEJwTixHQVlsQyxTQUF5QkEsR0FDckIsSUFBSXRsQyxFQUFRc2xDLEVBQU94MUMsR0FDZnV5QyxFQUFZcmlDLEdBQ1pzbEMsRUFBTzEwQyxHQUFLLElBQUl3SSxLQUFLMlgsRUFBTXdJLE9BQ3BCZ3BCLEVBQU92aUMsR0FDZHNsQyxFQUFPMTBDLEdBQUssSUFBSXdJLEtBQUs0RyxFQUFNeWlDLFdBQ0gsaUJBQVZ6aUMsRUFqZHRCLFNBQTBCc2xDLEdBQ3RCLElBQUk5aEMsRUFBVWt1QyxHQUFnQjMwQyxLQUFLdW9DLEVBQU94MUMsSUFDMUIsT0FBWjBULEdBS0o4dUMsR0FBY2hOLElBQ1UsSUFBcEJBLEVBQU92QixrQkFDQXVCLEVBQU92QixTQUtsQjhPLEdBQWtCdk4sSUFDTSxJQUFwQkEsRUFBT3ZCLGtCQUNBdUIsRUFBT3ZCLFNBS2R1QixFQUFPakIsUUFDUGlCLEVBQU92QixVQUFXLEVBR2xCaHpCLEVBQU15bEMsd0JBQXdCbFIsTUF0QjlCQSxFQUFPMTBDLEdBQUssSUFBSXdJLE1BQU1vSyxFQUFRLElBK2M5Qml6QyxDQUFpQm5SLEdBQ1ZsMUMsRUFBUTRQLElBQ2ZzbEMsRUFBT2tGLEdBQUtsdkQsRUFBSTBrQixFQUFNdGxCLE1BQU0sSUFBSSxTQUFVbVosR0FDdEMsT0FBT3JZLFNBQVNxWSxFQUFLLE9BRXpCbWdELEdBQWdCMU8sSUFDVHRELEVBQVNoaUMsR0ExRXhCLFNBQTBCc2xDLEdBQ3RCLElBQUlBLEVBQU8xMEMsR0FBWCxDQUlBLElBQUk1USxFQUFJMG5ELEVBQXFCcEMsRUFBT3gxQyxJQUNoQzRtRCxPQUFzQnJ2RCxJQUFWckgsRUFBRXhELElBQW9Cd0QsRUFBRTdFLEtBQU82RSxFQUFFeEQsSUFDakQ4b0QsRUFBT2tGLEdBQUtsdkQsRUFDUixDQUFDMEUsRUFBRXRELEtBQU1zRCxFQUFFdkQsTUFBT2k2RCxFQUFXMTJELEVBQUVmLEtBQU1lLEVBQUVoQixPQUFRZ0IsRUFBRWpCLE9BQVFpQixFQUFFMjJELGNBQzNELFNBQVU5aUQsR0FDTixPQUFPQSxHQUFPclksU0FBU3FZLEVBQUssT0FJcENtZ0QsR0FBZ0IxTyxJQTZEWnNSLENBQWlCdFIsR0FDVmhELEVBQVN0aUMsR0FFaEJzbEMsRUFBTzEwQyxHQUFLLElBQUl3SSxLQUFLNEcsR0FFckIrUSxFQUFNeWxDLHdCQUF3QmxSLEdBN0I5QnVSLENBQWdCdlIsR0FHZnhCLEVBQVF3QixLQUNUQSxFQUFPMTBDLEdBQUssTUFHVDAwQyxJQTBCWCxTQUFTekMsR0FBaUI3aUMsRUFBTzVsQixFQUFRdW9ELEVBQVFDLEVBQVFrVSxHQUNyRCxJQW5FSXRVLEVBbUVBdVIsRUFBSSxHQTJCUixPQXpCZSxJQUFYMzVELElBQThCLElBQVhBLElBQ25Cd29ELEVBQVN4b0QsRUFDVEEsT0FBU2lOLElBR0UsSUFBWHM3QyxJQUE4QixJQUFYQSxJQUNuQkMsRUFBU0QsRUFDVEEsT0FBU3Q3QyxJQUlSMjZDLEVBQVNoaUMsSUFBVWtpQyxFQUFjbGlDLElBQ2pDNVAsRUFBUTRQLElBQTJCLElBQWpCQSxFQUFNdmtCLFVBRXpCdWtCLE9BQVEzWSxHQUlaMHNELEVBQUVqUCxrQkFBbUIsRUFDckJpUCxFQUFFTSxRQUFVTixFQUFFN08sT0FBUzRSLEVBQ3ZCL0MsRUFBRS9PLEdBQUtyQyxFQUNQb1IsRUFBRWprRCxHQUFLa1EsRUFDUCt6QyxFQUFFaFAsR0FBSzNxRCxFQUNQMjVELEVBQUUxUCxRQUFVekIsR0E1RlJKLEVBQU0sSUFBSTZDLEVBQU80TCxHQUFjOEUsR0E4RlhoQyxNQTdGaEJ1QixXQUVKOVMsRUFBSS80QixJQUFJLEVBQUcsS0FDWCs0QixFQUFJOFMsY0FBV2p1RCxHQUdabTdDLEVBMEZYLFNBQVN5UyxHQUFZajFDLEVBQU81bEIsRUFBUXVvRCxFQUFRQyxHQUN4QyxPQUFPQyxHQUFpQjdpQyxFQUFPNWxCLEVBQVF1b0QsRUFBUUMsR0FBUSxHQXJlM0Q3eEIsRUFBTXlsQyx3QkFBMEI5USxFQUM1QixpU0FHQSxTQUFVSixHQUNOQSxFQUFPMTBDLEdBQUssSUFBSXdJLEtBQUtrc0MsRUFBT3gxQyxJQUFNdzFDLEVBQU8rTyxRQUFVLE9BQVMsUUF1THBFdGpDLEVBQU13a0MsU0FBVyxhQUdqQnhrQyxFQUFNeWtDLFNBQVcsYUF5U2pCLElBQUl1QixHQUFlclIsRUFDWCxzR0FDQSxXQUNJLElBQUlzUixFQUFRL0IsR0FBWTVoRCxNQUFNLEtBQU02QyxXQUNwQyxPQUFJMWMsS0FBS3NxRCxXQUFha1QsRUFBTWxULFVBQ2pCa1QsRUFBUXg5RCxLQUFPQSxLQUFPdzlELEVBRXRCeFMsT0FJbkJ5UyxHQUFldlIsRUFDWCxzR0FDQSxXQUNJLElBQUlzUixFQUFRL0IsR0FBWTVoRCxNQUFNLEtBQU02QyxXQUNwQyxPQUFJMWMsS0FBS3NxRCxXQUFha1QsRUFBTWxULFVBQ2pCa1QsRUFBUXg5RCxLQUFPQSxLQUFPdzlELEVBRXRCeFMsT0FVdkIsU0FBUzBTLEdBQU85aEQsRUFBSStoRCxHQUNoQixJQUFJM1UsRUFBS3hpRCxFQUlULEdBSHVCLElBQW5CbTNELEVBQVExN0QsUUFBZ0IyVSxFQUFRK21ELEVBQVEsTUFDeENBLEVBQVVBLEVBQVEsS0FFakJBLEVBQVExN0QsT0FDVCxPQUFPdzVELEtBR1gsSUFEQXpTLEVBQU0yVSxFQUFRLEdBQ1RuM0QsRUFBSSxFQUFHQSxFQUFJbTNELEVBQVExN0QsU0FBVXVFLEVBQ3pCbTNELEVBQVFuM0QsR0FBRzhqRCxZQUFhcVQsRUFBUW4zRCxHQUFHb1YsR0FBSW90QyxLQUN4Q0EsRUFBTTJVLEVBQVFuM0QsSUFHdEIsT0FBT3dpRCxFQWdCWCxJQUlJNFUsR0FBVyxDQUNYLE9BQ0EsVUFDQSxRQUNBLE9BQ0EsTUFDQSxPQUNBLFNBQ0EsU0FDQSxlQXlDSixTQUFTQyxHQUFTbnpCLEdBQ2QsSUFBSTJqQixFQUFrQkgsRUFBcUJ4akIsR0FDdkNvekIsRUFBUXpQLEVBQWdCbnJELE1BQVEsRUFDaEM2NkQsRUFBVzFQLEVBQWdCMlAsU0FBVyxFQUN0Q2xnQixFQUFTdVEsRUFBZ0JwckQsT0FBUyxFQUNsQ2c3RCxFQUFRNVAsRUFBZ0IvTixNQUFRK04sRUFBZ0I2UCxTQUFXLEVBQzNEL1csRUFBT2tILEVBQWdCcnJELEtBQU8sRUFDOUJzN0MsRUFBUStQLEVBQWdCNW9ELE1BQVEsRUFDaEM4NEMsRUFBVThQLEVBQWdCN29ELFFBQVUsRUFDcEN5d0QsRUFBVTVILEVBQWdCOW9ELFFBQVUsRUFDcEM0NEQsRUFBZTlQLEVBQWdCOE8sYUFBZSxFQUVsRG45RCxLQUFLdXFELFNBbERULFNBQXlCdm5DLEdBQ3JCLElBQUkzYSxFQUVBN0IsRUFEQTQzRCxHQUFpQixFQUVyQixJQUFLLzFELEtBQU8yYSxFQUNSLEdBQ0l5bEMsRUFBV3psQyxFQUFHM2EsTUFFdUIsSUFBakNsSCxHQUFRdVEsS0FBS2tzRCxHQUFVdjFELElBQ1osTUFBVjJhLEVBQUUzYSxJQUFpQmkxQyxNQUFNdDZCLEVBQUUzYSxLQUdoQyxPQUFPLEVBSWYsSUFBSzdCLEVBQUksRUFBR0EsRUFBSW8zRCxHQUFTMzdELFNBQVV1RSxFQUMvQixHQUFJd2MsRUFBRTQ2QyxHQUFTcDNELElBQUssQ0FDaEIsR0FBSTQzRCxFQUNBLE9BQU8sRUFFUDczQixXQUFXdmpCLEVBQUU0NkMsR0FBU3AzRCxPQUFTa29ELEVBQU0xckMsRUFBRTQ2QyxHQUFTcDNELE9BQ2hENDNELEdBQWlCLEdBSzdCLE9BQU8sRUF1QlNDLENBQWdCaFEsR0FHaENydUQsS0FBS3MrRCxlQUNBSCxFQUNTLElBQVZsSSxFQUNVLElBQVYxWCxFQUNRLElBQVJELEVBQWUsR0FBSyxHQUd4QnQrQyxLQUFLdStELE9BQVNwWCxFQUFlLEVBQVI4VyxFQUlyQmorRCxLQUFLdytELFNBQVcxZ0IsRUFBb0IsRUFBWGlnQixFQUF1QixHQUFSRCxFQUV4Qzk5RCxLQUFLbTNCLE1BQVEsR0FFYm4zQixLQUFLNHJELFFBQVV3TCxLQUVmcDNELEtBQUt5K0QsVUFHVCxTQUFTQyxHQUFXcmtELEdBQ2hCLE9BQU9BLGFBQWV3akQsR0FHMUIsU0FBU2MsR0FBU3I2RCxHQUNkLE9BQUlBLEVBQVMsR0FDeUIsRUFBM0JILEtBQUttaUMsT0FBTyxFQUFJaGlDLEdBRWhCSCxLQUFLbWlDLE1BQU1oaUMsR0F1QjFCLFNBQVNnM0MsR0FBT250QixFQUFPKzRCLEdBQ25CbUcsRUFBZWwvQixFQUFPLEVBQUcsR0FBRyxXQUN4QixJQUFJbXRCLEVBQVN0N0MsS0FBSzQrRCxZQUNkQyxFQUFPLElBS1gsT0FKSXZqQixFQUFTLElBQ1RBLEdBQVVBLEVBQ1Z1akIsRUFBTyxLQUdQQSxFQUNBbFMsS0FBWXJSLEVBQVMsSUFBSyxHQUMxQjRMLEVBQ0F5RixJQUFXclIsRUFBUyxHQUFJLE1BS3BDQSxHQUFPLElBQUssS0FDWkEsR0FBTyxLQUFNLElBSWI0VSxHQUFjLElBQUtGLElBQ25CRSxHQUFjLEtBQU1GLElBQ3BCWSxHQUFjLENBQUMsSUFBSyxPQUFPLFNBQVVwcUMsRUFBTzVNLEVBQU9reUMsR0FDL0NBLEVBQU8rTyxTQUFVLEVBQ2pCL08sRUFBT0wsS0FBT3FULEdBQWlCOU8sR0FBa0J4cEMsTUFRckQsSUFBSXU0QyxHQUFjLGtCQUVsQixTQUFTRCxHQUFpQjcwQyxFQUFTaU0sR0FDL0IsSUFFSXIxQixFQUNBMDlDLEVBSEE5L0IsR0FBV3lYLEdBQVUsSUFBSWhULE1BQU0rRyxHQUtuQyxPQUFnQixPQUFaeEwsRUFDTyxLQU9RLEtBRm5COC9CLEVBQXVCLElBRHZCMTlDLElBRFE0ZCxFQUFRQSxFQUFReGMsT0FBUyxJQUFNLElBQ3RCLElBQUlpaEIsTUFBTTY3QyxLQUFnQixDQUFDLElBQUssRUFBRyxJQUNsQyxHQUFXclEsRUFBTTd0RCxFQUFNLEtBRWxCLEVBQWlCLE1BQWJBLEVBQU0sR0FBYTA5QyxHQUFXQSxFQUk3RCxTQUFTeWdCLEdBQWdCeDRDLEVBQU95NEMsR0FDNUIsSUFBSWpXLEVBQUtua0MsRUFDVCxPQUFJbzZDLEVBQU12VCxRQUNOMUMsRUFBTWlXLEVBQU14aEQsUUFDWm9ILEdBQ0ttbkMsRUFBU3hsQyxJQUFVdWlDLEVBQU92aUMsR0FDckJBLEVBQU15aUMsVUFDTndTLEdBQVlqMUMsR0FBT3lpQyxXQUFhRCxFQUFJQyxVQUU5Q0QsRUFBSTV4QyxHQUFHOG5ELFFBQVFsVyxFQUFJNXhDLEdBQUc2eEMsVUFBWXBrQyxHQUNsQzBTLEVBQU13MEIsYUFBYS9DLEdBQUssR0FDakJBLEdBRUF5UyxHQUFZajFDLEdBQU8yNEMsUUFJbEMsU0FBU0MsR0FBY3A4QyxHQUduQixPQUFRN2UsS0FBS21pQyxNQUFNdGpCLEVBQUU1TCxHQUFHaW9ELHFCQTBKNUIsU0FBU0MsS0FDTCxRQUFPdC9ELEtBQUtzcUQsV0FBWXRxRCxLQUFLMHJELFFBQTJCLElBQWpCMXJELEtBQUsyckQsUUFwSmhEcDBCLEVBQU13MEIsYUFBZSxhQXdKckIsSUFBSXdULEdBQWMsd0RBSWRDLEdBQVcsc0tBRWYsU0FBU0MsR0FBZWo1QyxFQUFPbmUsR0FDM0IsSUFHSXcyRCxFQUNBemlELEVBQ0FzakQsRUE0Rm1CcDBDLEVBQU1reUMsRUFDekJ4VSxFQWxHQXRlLEVBQVdsa0IsRUFFWHRELEVBQVEsS0FrRVosT0E3REl3N0MsR0FBV2w0QyxHQUNYa2tCLEVBQVcsQ0FDUHFvQixHQUFJdnNDLEVBQU04M0MsY0FDVnhlLEVBQUd0NUIsRUFBTSszQyxNQUNUdmUsRUFBR3g1QixFQUFNZzRDLFNBRU4xVixFQUFTdGlDLEtBQVc4MkIsT0FBTzkyQixJQUNsQ2trQixFQUFXLEdBQ1ByaUMsRUFDQXFpQyxFQUFTcmlDLElBQVFtZSxFQUVqQmtrQixFQUFTeXpCLGNBQWdCMzNDLElBRXJCdEQsRUFBUXE4QyxHQUFZaDhDLEtBQUtpRCxLQUNqQ3E0QyxFQUFvQixNQUFiMzdDLEVBQU0sSUFBYyxFQUFJLEVBQy9Cd25CLEVBQVcsQ0FDUHdWLEVBQUcsRUFDSEosRUFBRzRPLEVBQU14ckMsRUFuakZWLElBbWpGeUIyN0MsRUFDeEJqZixFQUFHOE8sRUFBTXhyQyxFQW5qRlYsSUFtakZ5QjI3QyxFQUN4Qjc3QyxFQUFHMHJDLEVBQU14ckMsRUFuakZSLElBbWpGeUIyN0MsRUFDMUJoc0IsRUFBRzZiLEVBQU14ckMsRUFuakZSLElBbWpGeUIyN0MsRUFDMUI5TCxHQUFJckUsRUFBTWlRLEdBQThCLElBQXJCejdDLEVBbmpGYixLQW1qRjJDMjdDLEtBRTdDMzdDLEVBQVFzOEMsR0FBU2o4QyxLQUFLaUQsS0FDOUJxNEMsRUFBb0IsTUFBYjM3QyxFQUFNLElBQWMsRUFBSSxFQUMvQnduQixFQUFXLENBQ1B3VixFQUFHeWYsR0FBU3o4QyxFQUFNLEdBQUkyN0MsR0FDdEI3ZSxFQUFHMmYsR0FBU3o4QyxFQUFNLEdBQUkyN0MsR0FDdEJ0bEQsRUFBR29tRCxHQUFTejhDLEVBQU0sR0FBSTI3QyxHQUN0Qi9lLEVBQUc2ZixHQUFTejhDLEVBQU0sR0FBSTI3QyxHQUN0QmpmLEVBQUcrZixHQUFTejhDLEVBQU0sR0FBSTI3QyxHQUN0Qjc3QyxFQUFHMjhDLEdBQVN6OEMsRUFBTSxHQUFJMjdDLEdBQ3RCaHNCLEVBQUc4c0IsR0FBU3o4QyxFQUFNLEdBQUkyN0MsS0FFUCxNQUFabjBCLEVBRVBBLEVBQVcsR0FFUyxpQkFBYkEsSUFDTixTQUFVQSxHQUFZLE9BQVFBLEtBbURacGYsRUFoRGZtd0MsR0FBWS93QixFQUFTNXlCLE1BZ0RBMGxELEVBL0NyQi9CLEdBQVkvd0IsRUFBU3VELElBRnpCeXhCLEVBbURFcDBDLEVBQUtnL0IsV0FBYWtULEVBQU1sVCxXQUk5QmtULEVBQVF3QixHQUFnQnhCLEVBQU9seUMsR0FDM0JBLEVBQUtzMEMsU0FBU3BDLEdBQ2R4VSxFQUFNNlcsR0FBMEJ2MEMsRUFBTWt5QyxLQUV0Q3hVLEVBQU02VyxHQUEwQnJDLEVBQU9seUMsSUFDbkM2eUMsY0FBZ0JuVixFQUFJbVYsYUFDeEJuVixFQUFJbEwsUUFBVWtMLEVBQUlsTCxRQUdma0wsR0FaSSxDQUFFbVYsYUFBYyxFQUFHcmdCLE9BQVEsSUEvQ2xDcFQsRUFBVyxJQUNGcW9CLEdBQUsyTSxFQUFRdkIsYUFDdEJ6ekIsRUFBU3NWLEVBQUkwZixFQUFRNWhCLFFBR3pCMWhDLEVBQU0sSUFBSXloRCxHQUFTbnpCLEdBRWZnMEIsR0FBV2w0QyxJQUFVaWlDLEVBQVdqaUMsRUFBTyxhQUN2Q3BLLEVBQUl3dkMsUUFBVXBsQyxFQUFNb2xDLFNBR3BCOFMsR0FBV2w0QyxJQUFVaWlDLEVBQVdqaUMsRUFBTyxjQUN2Q3BLLEVBQUltdUMsU0FBVy9qQyxFQUFNK2pDLFVBR2xCbnVDLEVBTVgsU0FBU3VqRCxHQUFTRyxFQUFLakIsR0FJbkIsSUFBSTdWLEVBQU04VyxHQUFPdjVCLFdBQVd1NUIsRUFBSW4vRCxRQUFRLElBQUssTUFFN0MsT0FBUTI4QyxNQUFNMEwsR0FBTyxFQUFJQSxHQUFPNlYsRUFHcEMsU0FBU2dCLEdBQTBCdjBDLEVBQU1reUMsR0FDckMsSUFBSXhVLEVBQU0sR0FVVixPQVJBQSxFQUFJbEwsT0FDQTBmLEVBQU12NkQsUUFBVXFvQixFQUFLcm9CLFFBQXlDLElBQTlCdTZELEVBQU10NkQsT0FBU29vQixFQUFLcG9CLFFBQ3BEb29CLEVBQUs3TixRQUFRd1MsSUFBSSs0QixFQUFJbEwsT0FBUSxLQUFLaWlCLFFBQVF2QyxNQUN4Q3hVLEVBQUlsTCxPQUdWa0wsRUFBSW1WLGNBQWdCWCxHQUFTbHlDLEVBQUs3TixRQUFRd1MsSUFBSSs0QixFQUFJbEwsT0FBUSxLQUVuRGtMLEVBc0JYLFNBQVNnWCxHQUFZQyxFQUFXbnVELEdBQzVCLE9BQU8sU0FBVXBILEVBQUtrNEMsR0FDbEIsSUFBU3I4QixFQW1CVCxPQWpCZSxPQUFYcThCLEdBQW9CdEYsT0FBT3NGLEtBQzNCMEosRUFDSXg2QyxFQUNBLFlBQ0lBLEVBQ0EsdURBQ0FBLEVBSEosa0dBT0p5VSxFQUFNN2IsRUFDTkEsRUFBTWs0QyxFQUNOQSxFQUFTcjhCLEdBSWIyNUMsR0FBWWxnRSxLQUROeS9ELEdBQWUvMEQsRUFBS2s0QyxHQUNIcWQsR0FDaEJqZ0UsTUFJZixTQUFTa2dFLEdBQVlsYixFQUFLdGEsRUFBVXkxQixFQUFVcFUsR0FDMUMsSUFBSW9TLEVBQWV6ekIsRUFBUzR6QixjQUN4Qm5YLEVBQU93WCxHQUFTajBCLEVBQVM2ekIsT0FDekJ6Z0IsRUFBUzZnQixHQUFTajBCLEVBQVM4ekIsU0FFMUJ4WixFQUFJc0YsWUFLVHlCLEVBQStCLE1BQWhCQSxHQUE4QkEsRUFFekNqTyxHQUNBaVUsR0FBUy9NLEVBQUtocEMsRUFBSWdwQyxFQUFLLFNBQVdsSCxFQUFTcWlCLEdBRTNDaFosR0FDQTRILEVBQU0vSixFQUFLLE9BQVFocEMsRUFBSWdwQyxFQUFLLFFBQVVtQyxFQUFPZ1osR0FFN0NoQyxHQUNBblosRUFBSTV0QyxHQUFHOG5ELFFBQVFsYSxFQUFJNXRDLEdBQUc2eEMsVUFBWWtWLEVBQWVnQyxHQUVqRHBVLEdBQ0F4MEIsRUFBTXcwQixhQUFhL0csRUFBS21DLEdBQVFySixJQTVGeEMyaEIsR0FBZTdqRCxHQUFLaWlELEdBQVNyOUQsVUFDN0JpL0QsR0FBZVcsUUE5WGYsV0FDSSxPQUFPWCxHQUFleFUsTUE0ZDFCLElBQUloN0IsR0FBTSt2QyxHQUFZLEVBQUcsT0FDckIxM0IsR0FBVzAzQixJQUFhLEVBQUcsWUFFL0IsU0FBU0ssR0FBUzc1QyxHQUNkLE1BQXdCLGlCQUFWQSxHQUFzQkEsYUFBaUJ6aEIsT0FJekQsU0FBU3U3RCxHQUFjOTVDLEdBQ25CLE9BQ0l3bEMsRUFBU3hsQyxJQUNUdWlDLEVBQU92aUMsSUFDUDY1QyxHQUFTNzVDLElBQ1RzaUMsRUFBU3RpQyxJQWdEakIsU0FBK0JBLEdBQzNCLElBQUkrNUMsRUFBWTNwRCxFQUFRNFAsR0FDcEJnNkMsR0FBZSxFQU9uQixPQU5JRCxJQUNBQyxFQUdrQixJQUZkaDZDLEVBQU1MLFFBQU8sU0FBVXBRLEdBQ25CLE9BQVEreUMsRUFBUy95QyxJQUFTc3FELEdBQVM3NUMsTUFDcEN2a0IsUUFFSnMrRCxHQUFhQyxFQXhEaEJDLENBQXNCajZDLElBTzlCLFNBQTZCQSxHQUN6QixJQTRCSWhnQixFQUNBazZELEVBN0JBQyxFQUFhblksRUFBU2hpQyxLQUFXa2lDLEVBQWNsaUMsR0FDL0NvNkMsR0FBZSxFQUNmcHlELEVBQWEsQ0FDVCxRQUNBLE9BQ0EsSUFDQSxTQUNBLFFBQ0EsSUFDQSxPQUNBLE1BQ0EsSUFDQSxRQUNBLE9BQ0EsSUFDQSxRQUNBLE9BQ0EsSUFDQSxVQUNBLFNBQ0EsSUFDQSxVQUNBLFNBQ0EsSUFDQSxlQUNBLGNBQ0EsTUFLUixJQUFLaEksRUFBSSxFQUFHQSxFQUFJZ0ksRUFBV3ZNLE9BQVF1RSxHQUFLLEVBQ3BDazZELEVBQVdseUQsRUFBV2hJLEdBQ3RCbzZELEVBQWVBLEdBQWdCblksRUFBV2ppQyxFQUFPazZDLEdBR3JELE9BQU9DLEdBQWNDLEVBM0NqQkMsQ0FBb0JyNkMsSUFOakIsTUFPSEEsRUF5RFIsU0FBU3M2QyxHQUFldDZDLEdBQ3BCLElBVUloZ0IsRUFWQW02RCxFQUFhblksRUFBU2hpQyxLQUFXa2lDLEVBQWNsaUMsR0FDL0NvNkMsR0FBZSxFQUNmcHlELEVBQWEsQ0FDVCxVQUNBLFVBQ0EsVUFDQSxXQUNBLFdBQ0EsWUFLUixJQUFLaEksRUFBSSxFQUFHQSxFQUFJZ0ksRUFBV3ZNLE9BQVF1RSxHQUFLLEVBRXBDbzZELEVBQWVBLEdBQWdCblksRUFBV2ppQyxFQUQvQmhZLEVBQVdoSSxJQUkxQixPQUFPbTZELEdBQWNDLEVBNEt6QixTQUFTRyxHQUFVMWdELEVBQUdDLEdBQ2xCLEdBQUlELEVBQUUxZSxPQUFTMmUsRUFBRTNlLE9BR2IsT0FBUW8vRCxHQUFVemdELEVBQUdELEdBR3pCLElBQUkyZ0QsRUFBeUMsSUFBdkIxZ0QsRUFBRXBkLE9BQVNtZCxFQUFFbmQsU0FBZ0JvZCxFQUFFcmQsUUFBVW9kLEVBQUVwZCxTQUU3RGcrRCxFQUFTNWdELEVBQUU1QyxRQUFRd1MsSUFBSSt3QyxFQUFnQixVQWUzQyxRQUFTQSxHQVhMMWdELEVBQUkyZ0QsRUFBUyxHQUdIM2dELEVBQUkyZ0QsSUFBV0EsRUFGZjVnRCxFQUFFNUMsUUFBUXdTLElBQUkrd0MsRUFBaUIsRUFBRyxZQU1sQzFnRCxFQUFJMmdELElBRko1Z0QsRUFBRTVDLFFBQVF3UyxJQUFJK3dDLEVBQWlCLEVBQUcsVUFFVEMsTUFJRixFQW1IekMsU0FBUzlYLEdBQU85Z0QsR0FDWixJQUFJNjRELEVBRUosWUFBWXJ6RCxJQUFSeEYsRUFDT3JJLEtBQUs0ckQsUUFBUXNMLE9BR0MsT0FEckJnSyxFQUFnQjlKLEdBQVUvdUQsTUFFdEJySSxLQUFLNHJELFFBQVVzVixHQUVabGhFLE1BMUhmdTNCLEVBQU00cEMsY0FBZ0IsdUJBQ3RCNXBDLEVBQU02cEMsaUJBQW1CLHlCQTZIekIsSUFBSWozQyxHQUFPK2hDLEVBQ1AsbUpBQ0EsU0FBVTdqRCxHQUNOLFlBQVl3RixJQUFSeEYsRUFDT3JJLEtBQUt1dEQsYUFFTHZ0RCxLQUFLbXBELE9BQU85Z0QsTUFLL0IsU0FBU2tsRCxLQUNMLE9BQU92dEQsS0FBSzRyRCxRQUdoQixJQUFJeVYsR0FBZ0IsSUFDaEJDLEdBQWdCLElBQ2hCQyxHQUFjLEtBQ2RDLEdBQW1CLFlBR3ZCLFNBQVNDLEdBQU1DLEVBQVVDLEdBQ3JCLE9BQVNELEVBQVdDLEVBQVdBLEdBQVdBLEVBRzlDLFNBQVNDLEdBQWlCMWhCLEVBQUdsOUIsRUFBRzg4QixHQUU1QixPQUFJSSxFQUFJLEtBQU9BLEdBQUssRUFFVCxJQUFJdGdDLEtBQUtzZ0MsRUFBSSxJQUFLbDlCLEVBQUc4OEIsR0FBSzBoQixHQUUxQixJQUFJNWhELEtBQUtzZ0MsRUFBR2w5QixFQUFHODhCLEdBQUdtSixVQUlqQyxTQUFTNFksR0FBZTNoQixFQUFHbDlCLEVBQUc4OEIsR0FFMUIsT0FBSUksRUFBSSxLQUFPQSxHQUFLLEVBRVR0Z0MsS0FBS3V6QyxJQUFJalQsRUFBSSxJQUFLbDlCLEVBQUc4OEIsR0FBSzBoQixHQUUxQjVoRCxLQUFLdXpDLElBQUlqVCxFQUFHbDlCLEVBQUc4OEIsR0FzYjlCLFNBQVNnaUIsR0FBYXpSLEVBQVVsSCxHQUM1QixPQUFPQSxFQUFPNFksY0FBYzFSLEdBZWhDLFNBQVMyUixLQUNMLElBSUl4N0QsRUFDQXNwQixFQUxBbXlDLEVBQWEsR0FDYkMsRUFBYSxHQUNiQyxFQUFlLEdBQ2Y3UCxFQUFjLEdBR2QzTSxFQUFPM2xELEtBQUsybEQsT0FFaEIsSUFBS24vQyxFQUFJLEVBQUdzcEIsRUFBSTYxQixFQUFLMWpELE9BQVF1RSxFQUFJc3BCLElBQUt0cEIsRUFDbEMwN0QsRUFBVzcvRCxLQUFLa3VELEdBQVk1SyxFQUFLbi9DLEdBQUdzTCxPQUNwQ213RCxFQUFXNS9ELEtBQUtrdUQsR0FBWTVLLEVBQUtuL0MsR0FBR3MvQyxPQUNwQ3FjLEVBQWE5L0QsS0FBS2t1RCxHQUFZNUssRUFBS24vQyxHQUFHcS9DLFNBRXRDeU0sRUFBWWp3RCxLQUFLa3VELEdBQVk1SyxFQUFLbi9DLEdBQUdzTCxPQUNyQ3dnRCxFQUFZandELEtBQUtrdUQsR0FBWTVLLEVBQUtuL0MsR0FBR3MvQyxPQUNyQ3dNLEVBQVlqd0QsS0FBS2t1RCxHQUFZNUssRUFBS24vQyxHQUFHcS9DLFNBR3pDN2xELEtBQUtvaUUsV0FBYSxJQUFJaGlFLE9BQU8sS0FBT2t5RCxFQUFZcjhDLEtBQUssS0FBTyxJQUFLLEtBQ2pFalcsS0FBS3FpRSxlQUFpQixJQUFJamlFLE9BQU8sS0FBTzhoRSxFQUFXanNELEtBQUssS0FBTyxJQUFLLEtBQ3BFalcsS0FBS3NpRSxlQUFpQixJQUFJbGlFLE9BQU8sS0FBTzZoRSxFQUFXaHNELEtBQUssS0FBTyxJQUFLLEtBQ3BFalcsS0FBS3VpRSxpQkFBbUIsSUFBSW5pRSxPQUN4QixLQUFPK2hFLEVBQWFsc0QsS0FBSyxLQUFPLElBQ2hDLEtBY1IsU0FBU3VzRCxHQUF1QnIwQyxFQUFPMGhCLEdBQ25Dd2QsRUFBZSxFQUFHLENBQUNsL0IsRUFBT0EsRUFBTWxzQixRQUFTLEVBQUc0dEMsR0FvRmhELFNBQVM0eUIsR0FBcUJqOEMsRUFBTzg1QixFQUFNb1QsRUFBU25ULEVBQUtDLEdBQ3JELElBQUlraUIsRUFDSixPQUFhLE1BQVRsOEMsRUFDT3N0QyxHQUFXOXpELEtBQU11Z0QsRUFBS0MsR0FBS3Q5QyxNQUc5Qm85QyxHQURKb2lCLEVBQWN6TyxHQUFZenRDLEVBQU8rNUIsRUFBS0MsTUFFbENGLEVBQU9vaUIsR0FFSkMsR0FBV2p4RCxLQUFLMVIsS0FBTXdtQixFQUFPODVCLEVBQU1vVCxFQUFTblQsRUFBS0MsSUFJaEUsU0FBU21pQixHQUFXeEgsRUFBVTdhLEVBQU1vVCxFQUFTblQsRUFBS0MsR0FDOUMsSUFBSW9pQixFQUFnQm5QLEdBQW1CMEgsRUFBVTdhLEVBQU1vVCxFQUFTblQsRUFBS0MsR0FDakU3K0MsRUFBT3V4RCxHQUFjMFAsRUFBYzEvRCxLQUFNLEVBQUcwL0QsRUFBYy9PLFdBSzlELE9BSEE3ekQsS0FBS2tELEtBQUt2QixFQUFLeXhELGtCQUNmcHpELEtBQUtpRCxNQUFNdEIsRUFBS201RCxlQUNoQjk2RCxLQUFLMkIsS0FBS0EsRUFBS281RCxjQUNSLzZELEtBNVlYcXRELEVBQWUsSUFBSyxFQUFHLEVBQUcsV0FDMUJBLEVBQWUsS0FBTSxFQUFHLEVBQUcsV0FDM0JBLEVBQWUsTUFBTyxFQUFHLEVBQUcsV0FDNUJBLEVBQWUsT0FBUSxFQUFHLEVBQUcsV0FDN0JBLEVBQWUsUUFBUyxFQUFHLEVBQUcsYUFFOUJBLEVBQWUsSUFBSyxDQUFDLElBQUssR0FBSSxLQUFNLFdBQ3BDQSxFQUFlLElBQUssQ0FBQyxLQUFNLEdBQUksRUFBRyxXQUNsQ0EsRUFBZSxJQUFLLENBQUMsTUFBTyxHQUFJLEVBQUcsV0FDbkNBLEVBQWUsSUFBSyxDQUFDLE9BQVEsR0FBSSxFQUFHLFdBRXBDNkMsR0FBYyxJQUFLNFIsSUFDbkI1UixHQUFjLEtBQU00UixJQUNwQjVSLEdBQWMsTUFBTzRSLElBQ3JCNVIsR0FBYyxRQW1PZCxTQUFzQkcsRUFBVWxILEdBQzVCLE9BQU9BLEVBQU8wWixjQUFjeFMsTUFuT2hDSCxHQUFjLFNBc09kLFNBQXdCRyxFQUFVbEgsR0FDOUIsT0FBT0EsRUFBTzJaLGdCQUFnQnpTLE1Bck9sQ08sR0FBYyxDQUFDLElBQUssS0FBTSxNQUFPLE9BQVEsVUFBVSxTQUMvQ3BxQyxFQUNBNU0sRUFDQWt5QyxFQUNBMzlCLEdBRUEsSUFBSWc4QixFQUFNMkIsRUFBT0YsUUFBUW1YLFVBQVV2OEMsRUFBTzJILEVBQU8yOUIsRUFBT2pCLFNBQ3BEVixFQUNBWixFQUFnQnVDLEdBQVEzQixJQUFNQSxFQUU5QlosRUFBZ0J1QyxHQUFRakMsV0FBYXJqQyxLQUk3QzBwQyxHQUFjLElBQUtMLElBQ25CSyxHQUFjLEtBQU1MLElBQ3BCSyxHQUFjLE1BQU9MLElBQ3JCSyxHQUFjLE9BQVFMLElBQ3RCSyxHQUFjLE1Bc05kLFNBQTZCRyxFQUFVbEgsR0FDbkMsT0FBT0EsRUFBTzZaLHNCQUF3Qm5ULE1Bck4xQ2UsR0FBYyxDQUFDLElBQUssS0FBTSxNQUFPLFFBNTNHdEIsR0E2M0dYQSxHQUFjLENBQUMsT0FBTyxTQUFVcHFDLEVBQU81TSxFQUFPa3lDLEVBQVEzOUIsR0FDbEQsSUFBSWpMLEVBQ0E0b0MsRUFBT0YsUUFBUW9YLHVCQUNmOS9DLEVBQVFzRCxFQUFNdEQsTUFBTTRvQyxFQUFPRixRQUFRb1gsdUJBR25DbFgsRUFBT0YsUUFBUTVGLG9CQUNmcHNDLEVBcDRHRyxHQW80R1dreUMsRUFBT0YsUUFBUTVGLG9CQUFvQngvQixFQUFPdEQsR0FFeER0SixFQXQ0R0csR0FzNEdXNVgsU0FBU3drQixFQUFPLE9BNE90QzZtQyxFQUFlLEVBQUcsQ0FBQyxLQUFNLEdBQUksR0FBRyxXQUM1QixPQUFPcnRELEtBQUttN0QsV0FBYSxPQUc3QjlOLEVBQWUsRUFBRyxDQUFDLEtBQU0sR0FBSSxHQUFHLFdBQzVCLE9BQU9ydEQsS0FBS2lqRSxjQUFnQixPQU9oQ1QsR0FBdUIsT0FBUSxZQUMvQkEsR0FBdUIsUUFBUyxZQUNoQ0EsR0FBdUIsT0FBUSxlQUMvQkEsR0FBdUIsUUFBUyxlQUloQzFVLEVBQWEsV0FBWSxNQUN6QkEsRUFBYSxjQUFlLE1BSTVCUyxFQUFnQixXQUFZLEdBQzVCQSxFQUFnQixjQUFlLEdBSS9CMkIsR0FBYyxJQUFLSixJQUNuQkksR0FBYyxJQUFLSixJQUNuQkksR0FBYyxLQUFNWCxHQUFXSixHQUMvQmUsR0FBYyxLQUFNWCxHQUFXSixHQUMvQmUsR0FBYyxPQUFRUCxHQUFXTixJQUNqQ2EsR0FBYyxPQUFRUCxHQUFXTixJQUNqQ2EsR0FBYyxRQUFTTixHQUFXTixJQUNsQ1ksR0FBYyxRQUFTTixHQUFXTixJQUVsQ3VCLEdBQWtCLENBQUMsT0FBUSxRQUFTLE9BQVEsVUFBVSxTQUNsRHJxQyxFQUNBODVCLEVBQ0F3TCxFQUNBMzlCLEdBRUFteUIsRUFBS255QixFQUFNbzRCLE9BQU8sRUFBRyxJQUFNbUksRUFBTWxvQyxNQUdyQ3FxQyxHQUFrQixDQUFDLEtBQU0sT0FBTyxTQUFVcnFDLEVBQU84NUIsRUFBTXdMLEVBQVEzOUIsR0FDM0RteUIsRUFBS255QixHQUFTb0osRUFBTXE3QixrQkFBa0Jwc0MsTUFzRTFDNm1DLEVBQWUsSUFBSyxFQUFHLEtBQU0sV0FJN0JTLEVBQWEsVUFBVyxLQUl4QlMsRUFBZ0IsVUFBVyxHQUkzQjJCLEdBQWMsSUFBS2hCLEdBQ25CMEIsR0FBYyxLQUFLLFNBQVVwcUMsRUFBTzVNLEdBQ2hDQSxFQXJ2SFEsR0Fxdkg0QixHQUFwQjgwQyxFQUFNbG9DLEdBQVMsTUFhbkM2bUMsRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLEtBQU0sUUFJckNTLEVBQWEsT0FBUSxLQUdyQlMsRUFBZ0IsT0FBUSxHQUl4QjJCLEdBQWMsSUFBS1gsSUFDbkJXLEdBQWMsS0FBTVgsR0FBV0osR0FDL0JlLEdBQWMsTUFBTSxTQUFVRyxFQUFVbEgsR0FFcEMsT0FBT2tILEVBQ0RsSCxFQUFPK1oseUJBQTJCL1osRUFBT2dhLGNBQ3pDaGEsRUFBT2lhLGtDQUdqQnhTLEdBQWMsQ0FBQyxJQUFLLE1BcnhIVCxHQXN4SFhBLEdBQWMsTUFBTSxTQUFVcHFDLEVBQU81TSxHQUNqQ0EsRUF2eEhPLEdBdXhITzgwQyxFQUFNbG9DLEVBQU10RCxNQUFNcXNDLElBQVcsT0FLL0MsSUFBSThULEdBQW1CeFUsRUFBVyxRQUFRLEdBSTFDeEIsRUFBZSxNQUFPLENBQUMsT0FBUSxHQUFJLE9BQVEsYUFJM0NTLEVBQWEsWUFBYSxPQUcxQlMsRUFBZ0IsWUFBYSxHQUk3QjJCLEdBQWMsTUFBT1IsSUFDckJRLEdBQWMsT0FBUWQsSUFDdEJ3QixHQUFjLENBQUMsTUFBTyxTQUFTLFNBQVVwcUMsRUFBTzVNLEVBQU9reUMsR0FDbkRBLEVBQU84UCxXQUFhbE4sRUFBTWxvQyxNQWlCOUI2bUMsRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLEVBQUcsVUFJbENTLEVBQWEsU0FBVSxLQUl2QlMsRUFBZ0IsU0FBVSxJQUkxQjJCLEdBQWMsSUFBS1gsSUFDbkJXLEdBQWMsS0FBTVgsR0FBV0osR0FDL0J5QixHQUFjLENBQUMsSUFBSyxNQTMwSFAsR0ErMEhiLElBQUkwUyxHQUFlelUsRUFBVyxXQUFXLEdBSXpDeEIsRUFBZSxJQUFLLENBQUMsS0FBTSxHQUFJLEVBQUcsVUFJbENTLEVBQWEsU0FBVSxLQUl2QlMsRUFBZ0IsU0FBVSxJQUkxQjJCLEdBQWMsSUFBS1gsSUFDbkJXLEdBQWMsS0FBTVgsR0FBV0osR0FDL0J5QixHQUFjLENBQUMsSUFBSyxNQWgySFAsR0FvMkhiLElBOENJemlDLEdBQU9vMUMsR0E5Q1BDLEdBQWUzVSxFQUFXLFdBQVcsR0ErQ3pDLElBM0NBeEIsRUFBZSxJQUFLLEVBQUcsR0FBRyxXQUN0QixTQUFVcnRELEtBQUttOUQsY0FBZ0IsUUFHbkM5UCxFQUFlLEVBQUcsQ0FBQyxLQUFNLEdBQUksR0FBRyxXQUM1QixTQUFVcnRELEtBQUttOUQsY0FBZ0IsT0FHbkM5UCxFQUFlLEVBQUcsQ0FBQyxNQUFPLEdBQUksRUFBRyxlQUNqQ0EsRUFBZSxFQUFHLENBQUMsT0FBUSxHQUFJLEdBQUcsV0FDOUIsT0FBNEIsR0FBckJydEQsS0FBS205RCxpQkFFaEI5UCxFQUFlLEVBQUcsQ0FBQyxRQUFTLEdBQUksR0FBRyxXQUMvQixPQUE0QixJQUFyQnJ0RCxLQUFLbTlELGlCQUVoQjlQLEVBQWUsRUFBRyxDQUFDLFNBQVUsR0FBSSxHQUFHLFdBQ2hDLE9BQTRCLElBQXJCcnRELEtBQUttOUQsaUJBRWhCOVAsRUFBZSxFQUFHLENBQUMsVUFBVyxHQUFJLEdBQUcsV0FDakMsT0FBNEIsSUFBckJydEQsS0FBS205RCxpQkFFaEI5UCxFQUFlLEVBQUcsQ0FBQyxXQUFZLEdBQUksR0FBRyxXQUNsQyxPQUE0QixJQUFyQnJ0RCxLQUFLbTlELGlCQUVoQjlQLEVBQWUsRUFBRyxDQUFDLFlBQWEsR0FBSSxHQUFHLFdBQ25DLE9BQTRCLElBQXJCcnRELEtBQUttOUQsaUJBS2hCclAsRUFBYSxjQUFlLE1BSTVCUyxFQUFnQixjQUFlLElBSS9CMkIsR0FBYyxJQUFLUixHQUFXUixHQUM5QmdCLEdBQWMsS0FBTVIsR0FBV1AsR0FDL0JlLEdBQWMsTUFBT1IsR0FBV04sSUFHM0JqaEMsR0FBUSxPQUFRQSxHQUFNbHNCLFFBQVUsRUFBR2tzQixJQUFTLElBQzdDK2hDLEdBQWMvaEMsR0FBTzBoQyxJQUd6QixTQUFTNFQsR0FBUWo5QyxFQUFPNU0sR0FDcEJBLEVBdjVIYyxHQXU1SE84MEMsRUFBdUIsS0FBaEIsS0FBT2xvQyxJQUd2QyxJQUFLMkgsR0FBUSxJQUFLQSxHQUFNbHNCLFFBQVUsRUFBR2tzQixJQUFTLElBQzFDeWlDLEdBQWN6aUMsR0FBT3MxQyxJQUd6QkYsR0FBb0IxVSxFQUFXLGdCQUFnQixHQUkvQ3hCLEVBQWUsSUFBSyxFQUFHLEVBQUcsWUFDMUJBLEVBQWUsS0FBTSxFQUFHLEVBQUcsWUFZM0IsSUFBSXB2QyxHQUFRNHRDLEVBQU9yckQsVUFnSG5CLFNBQVNrakUsR0FBbUJ4dEMsR0FDeEIsT0FBT0EsRUEvR1hqWSxHQUFNZ1MsSUFBTUEsR0FDWmhTLEdBQU0rZ0MsU0Fwb0NOLFNBQW9CcDZDLEVBQU0rK0QsR0FFRyxJQUFyQmpuRCxVQUFVemEsU0FDTHlhLFVBQVUsR0FHSjRqRCxHQUFjNWpELFVBQVUsS0FDL0I5WCxFQUFPOFgsVUFBVSxHQUNqQmluRCxPQUFVOTFELEdBQ0hpekQsR0FBZXBrRCxVQUFVLE1BQ2hDaW5ELEVBQVVqbkQsVUFBVSxHQUNwQjlYLE9BQU9pSixJQVBQakosT0FBT2lKLEVBQ1A4MUQsT0FBVTkxRCxJQVdsQixJQUFJa3lCLEVBQU1uN0IsR0FBUTYyRCxLQUNkbUksRUFBTTVFLEdBQWdCai9CLEVBQUsvL0IsTUFBTTZqRSxRQUFRLE9BQ3pDampFLEVBQVMyMkIsRUFBTXVzQyxlQUFlOWpFLEtBQU00akUsSUFBUSxXQUM1Q3JmLEVBQ0lvZixJQUNDdnBELEVBQVd1cEQsRUFBUS9pRSxJQUNkK2lFLEVBQVEvaUUsR0FBUThRLEtBQUsxUixLQUFNKy9CLEdBQzNCNGpDLEVBQVEvaUUsSUFFdEIsT0FBT1osS0FBS1ksT0FDUjJqRCxHQUFVdmtELEtBQUt1dEQsYUFBYXZPLFNBQVNwK0MsRUFBUVosS0FBTXk3RCxHQUFZMTdCLE1BMm1DdkU5aEIsR0FBTVIsTUF2bUNOLFdBQ0ksT0FBTyxJQUFJb3VDLEVBQU83ckQsT0F1bUN0QmllLEdBQU00RyxLQS9oQ04sU0FBYzJCLEVBQU9nZ0MsRUFBT3VkLEdBQ3hCLElBQUlwd0MsRUFBTXF3QyxFQUFXemYsRUFFckIsSUFBS3ZrRCxLQUFLc3FELFVBQ04sT0FBT1csSUFLWCxLQUZBdDNCLEVBQU9xckMsR0FBZ0J4NEMsRUFBT3htQixPQUVwQnNxRCxVQUNOLE9BQU9XLElBT1gsT0FKQStZLEVBQW9ELEtBQXZDcndDLEVBQUtpckMsWUFBYzUrRCxLQUFLNCtELGFBRXJDcFksRUFBUXlILEVBQWV6SCxJQUduQixJQUFLLE9BQ0RqQyxFQUFTd2MsR0FBVS9nRSxLQUFNMnpCLEdBQVEsR0FDakMsTUFDSixJQUFLLFFBQ0Q0d0IsRUFBU3djLEdBQVUvZ0UsS0FBTTJ6QixHQUN6QixNQUNKLElBQUssVUFDRDR3QixFQUFTd2MsR0FBVS9nRSxLQUFNMnpCLEdBQVEsRUFDakMsTUFDSixJQUFLLFNBQ0Q0d0IsR0FBVXZrRCxLQUFPMnpCLEdBQVEsSUFDekIsTUFDSixJQUFLLFNBQ0Q0d0IsR0FBVXZrRCxLQUFPMnpCLEdBQVEsSUFDekIsTUFDSixJQUFLLE9BQ0Q0d0IsR0FBVXZrRCxLQUFPMnpCLEdBQVEsS0FDekIsTUFDSixJQUFLLE1BQ0Q0d0IsR0FBVXZrRCxLQUFPMnpCLEVBQU9xd0MsR0FBYSxNQUNyQyxNQUNKLElBQUssT0FDRHpmLEdBQVV2a0QsS0FBTzJ6QixFQUFPcXdDLEdBQWEsT0FDckMsTUFDSixRQUNJemYsRUFBU3ZrRCxLQUFPMnpCLEVBR3hCLE9BQU9vd0MsRUFBVXhmLEVBQVNrSyxFQUFTbEssSUFrL0J2Q3RtQyxHQUFNZ21ELE1BMXVCTixTQUFlemQsR0FDWCxJQUFJNWhELEVBQU1zL0QsRUFFVixRQUFjcjJELEtBRGQyNEMsRUFBUXlILEVBQWV6SCxLQUNjLGdCQUFWQSxJQUE0QnhtRCxLQUFLc3FELFVBQ3hELE9BQU90cUQsS0FLWCxPQUZBa2tFLEVBQWNsa0UsS0FBSzByRCxPQUFTbVcsR0FBaUJELEdBRXJDcGIsR0FDSixJQUFLLE9BQ0Q1aEQsRUFBT3MvRCxFQUFZbGtFLEtBQUtrRCxPQUFTLEVBQUcsRUFBRyxHQUFLLEVBQzVDLE1BQ0osSUFBSyxVQUNEMEIsRUFDSXMvRCxFQUNJbGtFLEtBQUtrRCxPQUNMbEQsS0FBS2lELFFBQVdqRCxLQUFLaUQsUUFBVSxFQUFLLEVBQ3BDLEdBQ0EsRUFDUixNQUNKLElBQUssUUFDRDJCLEVBQU9zL0QsRUFBWWxrRSxLQUFLa0QsT0FBUWxELEtBQUtpRCxRQUFVLEVBQUcsR0FBSyxFQUN2RCxNQUNKLElBQUssT0FDRDJCLEVBQ0lzL0QsRUFDSWxrRSxLQUFLa0QsT0FDTGxELEtBQUtpRCxRQUNMakQsS0FBSzJCLE9BQVMzQixLQUFLMHpELFVBQVksR0FDL0IsRUFDUixNQUNKLElBQUssVUFDRDl1RCxFQUNJcy9ELEVBQ0lsa0UsS0FBS2tELE9BQ0xsRCxLQUFLaUQsUUFDTGpELEtBQUsyQixRQUFVM0IsS0FBS21rRSxhQUFlLEdBQUssR0FDeEMsRUFDUixNQUNKLElBQUssTUFDTCxJQUFLLE9BQ0R2L0QsRUFBT3MvRCxFQUFZbGtFLEtBQUtrRCxPQUFRbEQsS0FBS2lELFFBQVNqRCxLQUFLMkIsT0FBUyxHQUFLLEVBQ2pFLE1BQ0osSUFBSyxPQUNEaUQsRUFBTzVFLEtBQUtvWCxHQUFHNnhDLFVBQ2Zya0QsR0FDSTI4RCxHQUNBRSxHQUNJNzhELEdBQVE1RSxLQUFLMHJELE9BQVMsRUFBSTFyRCxLQUFLNCtELFlBQWMwQyxJQUM3Q0MsSUFFSixFQUNKLE1BQ0osSUFBSyxTQUNEMzhELEVBQU81RSxLQUFLb1gsR0FBRzZ4QyxVQUNmcmtELEdBQVEwOEQsR0FBZ0JHLEdBQU03OEQsRUFBTTA4RCxJQUFpQixFQUNyRCxNQUNKLElBQUssU0FDRDE4RCxFQUFPNUUsS0FBS29YLEdBQUc2eEMsVUFDZnJrRCxHQUFReThELEdBQWdCSSxHQUFNNzhELEVBQU15OEQsSUFBaUIsRUFNN0QsT0FGQXJoRSxLQUFLb1gsR0FBRzhuRCxRQUFRdDZELEdBQ2hCMnlCLEVBQU13MEIsYUFBYS9yRCxNQUFNLEdBQ2xCQSxNQXlxQlhpZSxHQUFNcmQsT0FwNUJOLFNBQWdCd2pFLEdBQ1BBLElBQ0RBLEVBQWNwa0UsS0FBS3MvRCxRQUNiL25DLEVBQU02cEMsaUJBQ043cEMsRUFBTTRwQyxlQUVoQixJQUFJNWMsRUFBU2lKLEVBQWF4dEQsS0FBTW9rRSxHQUNoQyxPQUFPcGtFLEtBQUt1dEQsYUFBYXRNLFdBQVdzRCxJQTg0QnhDdG1DLEdBQU1uRyxLQTM0Qk4sU0FBY2xULEVBQU1pOEMsR0FDaEIsT0FDSTdnRCxLQUFLc3FELFlBQ0gwQixFQUFTcG5ELElBQVNBLEVBQUswbEQsV0FBY21SLEdBQVk3MkQsR0FBTTBsRCxXQUVsRG1WLEdBQWUsQ0FBRXh4QixHQUFJanVDLEtBQU04WCxLQUFNbFQsSUFDbkN1a0QsT0FBT25wRCxLQUFLbXBELFVBQ1prYixVQUFVeGpCLEdBRVI3Z0QsS0FBS3V0RCxhQUFhbkksZUFtNEJqQ25uQyxHQUFNcW1ELFFBLzNCTixTQUFpQnpqQixHQUNiLE9BQU83Z0QsS0FBSzhYLEtBQUsyakQsS0FBZTVhLElBKzNCcEM1aUMsR0FBTWd3QixHQTUzQk4sU0FBWXJwQyxFQUFNaThDLEdBQ2QsT0FDSTdnRCxLQUFLc3FELFlBQ0gwQixFQUFTcG5ELElBQVNBLEVBQUswbEQsV0FBY21SLEdBQVk3MkQsR0FBTTBsRCxXQUVsRG1WLEdBQWUsQ0FBRTNuRCxLQUFNOVgsS0FBTWl1QyxHQUFJcnBDLElBQ25DdWtELE9BQU9ucEQsS0FBS21wRCxVQUNaa2IsVUFBVXhqQixHQUVSN2dELEtBQUt1dEQsYUFBYW5JLGVBbzNCakNubkMsR0FBTXNtRCxNQWgzQk4sU0FBZTFqQixHQUNYLE9BQU83Z0QsS0FBS2l1QyxHQUFHd3RCLEtBQWU1YSxJQWczQmxDNWlDLEdBQU1qQyxJQXJqSU4sU0FBbUJ3cUMsR0FFZixPQUFJcHNDLEVBQVdwYSxLQURmd21ELEVBQVF5SCxFQUFlekgsS0FFWnhtRCxLQUFLd21ELEtBRVR4bUQsTUFpaklYaWUsR0FBTXVtRCxVQXpuQk4sV0FDSSxPQUFPamIsRUFBZ0J2cEQsTUFBTXl0QyxVQXluQmpDeHZCLEdBQU04aEQsUUE3bUNOLFNBQWlCdjVDLEVBQU9nZ0MsR0FDcEIsSUFBSWllLEVBQWF6WSxFQUFTeGxDLEdBQVNBLEVBQVFpMUMsR0FBWWoxQyxHQUN2RCxTQUFNeG1CLEtBQUtzcUQsWUFBYW1hLEVBQVduYSxhQUlyQixpQkFEZDlELEVBQVF5SCxFQUFlekgsSUFBVSxlQUV0QnhtRCxLQUFLaXBELFVBQVl3YixFQUFXeGIsVUFFNUJ3YixFQUFXeGIsVUFBWWpwRCxLQUFLeWQsUUFBUW9tRCxRQUFRcmQsR0FBT3lDLFlBcW1DbEVockMsR0FBTTJoRCxTQWptQ04sU0FBa0JwNUMsRUFBT2dnQyxHQUNyQixJQUFJaWUsRUFBYXpZLEVBQVN4bEMsR0FBU0EsRUFBUWkxQyxHQUFZajFDLEdBQ3ZELFNBQU14bUIsS0FBS3NxRCxZQUFhbWEsRUFBV25hLGFBSXJCLGlCQURkOUQsRUFBUXlILEVBQWV6SCxJQUFVLGVBRXRCeG1ELEtBQUtpcEQsVUFBWXdiLEVBQVd4YixVQUU1QmpwRCxLQUFLeWQsUUFBUXdtRCxNQUFNemQsR0FBT3lDLFVBQVl3YixFQUFXeGIsWUF5bENoRWhyQyxHQUFNeW1ELFVBcmxDTixTQUFtQjVzRCxFQUFNbTJCLEVBQUl1WSxFQUFPbWUsR0FDaEMsSUFBSUMsRUFBWTVZLEVBQVNsMEMsR0FBUUEsRUFBTzJqRCxHQUFZM2pELEdBQ2hEK3NELEVBQVU3WSxFQUFTL2QsR0FBTUEsRUFBS3d0QixHQUFZeHRCLEdBQzlDLFNBQU1qdUMsS0FBS3NxRCxXQUFhc2EsRUFBVXRhLFdBQWF1YSxFQUFRdmEsYUFLL0IsT0FGeEJxYSxFQUFjQSxHQUFlLE1BRVosR0FDUDNrRSxLQUFLKy9ELFFBQVE2RSxFQUFXcGUsSUFDdkJ4bUQsS0FBSzQvRCxTQUFTZ0YsRUFBV3BlLE1BQ1osTUFBbkJtZSxFQUFZLEdBQ1Aza0UsS0FBSzQvRCxTQUFTaUYsRUFBU3JlLElBQ3RCeG1ELEtBQUsrL0QsUUFBUThFLEVBQVNyZSxLQXlrQ3JDdm9DLEdBQU02bUQsT0Fya0NOLFNBQWdCdCtDLEVBQU9nZ0MsR0FDbkIsSUFDSXVlLEVBREFOLEVBQWF6WSxFQUFTeGxDLEdBQVNBLEVBQVFpMUMsR0FBWWoxQyxHQUV2RCxTQUFNeG1CLEtBQUtzcUQsWUFBYW1hLEVBQVduYSxhQUlyQixpQkFEZDlELEVBQVF5SCxFQUFlekgsSUFBVSxlQUV0QnhtRCxLQUFLaXBELFlBQWN3YixFQUFXeGIsV0FFckM4YixFQUFVTixFQUFXeGIsVUFFakJqcEQsS0FBS3lkLFFBQVFvbUQsUUFBUXJkLEdBQU95QyxXQUFhOGIsR0FDekNBLEdBQVcva0UsS0FBS3lkLFFBQVF3bUQsTUFBTXpkLEdBQU95QyxhQXlqQ2pEaHJDLEdBQU0rbUQsY0FwakNOLFNBQXVCeCtDLEVBQU9nZ0MsR0FDMUIsT0FBT3htRCxLQUFLOGtFLE9BQU90K0MsRUFBT2dnQyxJQUFVeG1ELEtBQUsrL0QsUUFBUXY1QyxFQUFPZ2dDLElBb2pDNUR2b0MsR0FBTWduRCxlQWpqQ04sU0FBd0J6K0MsRUFBT2dnQyxHQUMzQixPQUFPeG1ELEtBQUs4a0UsT0FBT3QrQyxFQUFPZ2dDLElBQVV4bUQsS0FBSzQvRCxTQUFTcDVDLEVBQU9nZ0MsSUFpakM3RHZvQyxHQUFNcXNDLFFBeG9CTixXQUNJLE9BQU9BLEVBQVF0cUQsT0F3b0JuQmllLEdBQU1rTSxLQUFPQSxHQUNibE0sR0FBTWtyQyxPQUFTQSxHQUNmbHJDLEdBQU1zdkMsV0FBYUEsR0FDbkJ0dkMsR0FBTXNxQixJQUFNazFCLEdBQ1p4L0MsR0FBTTdaLElBQU1tNUQsR0FDWnQvQyxHQUFNaW5ELGFBMW9CTixXQUNJLE9BQU81bkQsRUFBTyxHQUFJaXNDLEVBQWdCdnBELFFBMG9CdENpZSxHQUFNdVksSUE1aklOLFNBQW1CZ3dCLEVBQU85bEQsR0FDdEIsR0FBcUIsaUJBQVY4bEQsRUFBb0IsQ0FFM0IsSUFDSWhnRCxFQURBMitELEVBekZaLFNBQTZCQyxHQUN6QixJQUNJeGtCLEVBREE0RixFQUFRLEdBRVosSUFBSzVGLEtBQUt3a0IsRUFDRjNjLEVBQVcyYyxFQUFVeGtCLElBQ3JCNEYsRUFBTW5rRCxLQUFLLENBQUUyMkIsS0FBTTRuQixFQUFHNE4sU0FBVUYsRUFBVzFOLEtBTW5ELE9BSEE0RixFQUFNcHBDLE1BQUssU0FBVWlELEVBQUdDLEdBQ3BCLE9BQU9ELEVBQUVtdUMsU0FBV2x1QyxFQUFFa3VDLFlBRW5CaEksRUE4RWU2ZSxDQURsQjdlLEVBQVEwSCxFQUFxQjFILElBRzdCLElBQUtoZ0QsRUFBSSxFQUFHQSxFQUFJMitELEVBQVlsakUsT0FBUXVFLElBQ2hDeEcsS0FBS21sRSxFQUFZMytELEdBQUd3eUIsTUFBTXd0QixFQUFNMmUsRUFBWTMrRCxHQUFHd3lCLFlBSW5ELEdBQUk1ZSxFQUFXcGEsS0FEZndtRCxFQUFReUgsRUFBZXpILEtBRW5CLE9BQU94bUQsS0FBS3dtRCxHQUFPOWxELEdBRzNCLE9BQU9WLE1BK2lJWGllLEdBQU00bEQsUUEvekJOLFNBQWlCcmQsR0FDYixJQUFJNWhELEVBQU1zL0QsRUFFVixRQUFjcjJELEtBRGQyNEMsRUFBUXlILEVBQWV6SCxLQUNjLGdCQUFWQSxJQUE0QnhtRCxLQUFLc3FELFVBQ3hELE9BQU90cUQsS0FLWCxPQUZBa2tFLEVBQWNsa0UsS0FBSzByRCxPQUFTbVcsR0FBaUJELEdBRXJDcGIsR0FDSixJQUFLLE9BQ0Q1aEQsRUFBT3MvRCxFQUFZbGtFLEtBQUtrRCxPQUFRLEVBQUcsR0FDbkMsTUFDSixJQUFLLFVBQ0QwQixFQUFPcy9ELEVBQ0hsa0UsS0FBS2tELE9BQ0xsRCxLQUFLaUQsUUFBV2pELEtBQUtpRCxRQUFVLEVBQy9CLEdBRUosTUFDSixJQUFLLFFBQ0QyQixFQUFPcy9ELEVBQVlsa0UsS0FBS2tELE9BQVFsRCxLQUFLaUQsUUFBUyxHQUM5QyxNQUNKLElBQUssT0FDRDJCLEVBQU9zL0QsRUFDSGxrRSxLQUFLa0QsT0FDTGxELEtBQUtpRCxRQUNMakQsS0FBSzJCLE9BQVMzQixLQUFLMHpELFdBRXZCLE1BQ0osSUFBSyxVQUNEOXVELEVBQU9zL0QsRUFDSGxrRSxLQUFLa0QsT0FDTGxELEtBQUtpRCxRQUNMakQsS0FBSzJCLFFBQVUzQixLQUFLbWtFLGFBQWUsSUFFdkMsTUFDSixJQUFLLE1BQ0wsSUFBSyxPQUNEdi9ELEVBQU9zL0QsRUFBWWxrRSxLQUFLa0QsT0FBUWxELEtBQUtpRCxRQUFTakQsS0FBSzJCLFFBQ25ELE1BQ0osSUFBSyxPQUNEaUQsRUFBTzVFLEtBQUtvWCxHQUFHNnhDLFVBQ2Zya0QsR0FBUTY4RCxHQUNKNzhELEdBQVE1RSxLQUFLMHJELE9BQVMsRUFBSTFyRCxLQUFLNCtELFlBQWMwQyxJQUM3Q0MsSUFFSixNQUNKLElBQUssU0FDRDM4RCxFQUFPNUUsS0FBS29YLEdBQUc2eEMsVUFDZnJrRCxHQUFRNjhELEdBQU03OEQsRUFBTTA4RCxJQUNwQixNQUNKLElBQUssU0FDRDE4RCxFQUFPNUUsS0FBS29YLEdBQUc2eEMsVUFDZnJrRCxHQUFRNjhELEdBQU03OEQsRUFBTXk4RCxJQU01QixPQUZBcmhFLEtBQUtvWCxHQUFHOG5ELFFBQVF0NkQsR0FDaEIyeUIsRUFBTXcwQixhQUFhL3JELE1BQU0sR0FDbEJBLE1Bb3dCWGllLEdBQU1xcUIsU0FBV0EsR0FDakJycUIsR0FBTWxDLFFBanJCTixXQUNJLElBQUlpSCxFQUFJaGpCLEtBQ1IsTUFBTyxDQUNIZ2pCLEVBQUU5ZixPQUNGOGYsRUFBRS9mLFFBQ0YrZixFQUFFcmhCLE9BQ0ZxaEIsRUFBRXZkLE9BQ0Z1ZCxFQUFFeGQsU0FDRndkLEVBQUV6ZCxTQUNGeWQsRUFBRW02QyxnQkF5cUJWbC9DLEdBQU1xbkQsU0FycUJOLFdBQ0ksSUFBSXRpRCxFQUFJaGpCLEtBQ1IsTUFBTyxDQUNIODlELE1BQU85NkMsRUFBRTlmLE9BQ1Q0NkMsT0FBUTk2QixFQUFFL2YsUUFDVnRCLEtBQU1xaEIsRUFBRXJoQixPQUNSMjhDLE1BQU90N0IsRUFBRXM3QixRQUNUQyxRQUFTdjdCLEVBQUV1N0IsVUFDWDBYLFFBQVNqekMsRUFBRWl6QyxVQUNYa0ksYUFBY243QyxFQUFFbTdDLGlCQTZwQnhCbGdELEdBQU1zbkQsT0F2ckJOLFdBQ0ksT0FBTyxJQUFJM2xELEtBQUs1ZixLQUFLaXBELFlBdXJCekJockMsR0FBTXVuRCxZQXgrQk4sU0FBcUJDLEdBQ2pCLElBQUt6bEUsS0FBS3NxRCxVQUNOLE9BQU8sS0FFWCxJQUFJaEIsR0FBcUIsSUFBZm1jLEVBQ056aUQsRUFBSXNtQyxFQUFNdHBELEtBQUt5ZCxRQUFRNnJDLE1BQVF0cEQsS0FDbkMsT0FBSWdqQixFQUFFOWYsT0FBUyxHQUFLOGYsRUFBRTlmLE9BQVMsS0FDcEJzcUQsRUFDSHhxQyxFQUNBc21DLEVBQ00saUNBQ0EsZ0NBR1ZsdkMsRUFBV3dGLEtBQUtwZixVQUFVZ2xFLGFBRXRCbGMsRUFDT3RwRCxLQUFLdWxFLFNBQVNDLGNBRWQsSUFBSTVsRCxLQUFLNWYsS0FBS2lwRCxVQUErQixHQUFuQmpwRCxLQUFLNCtELFlBQW1CLEtBQ3BENEcsY0FDQTdrRSxRQUFRLElBQUs2c0QsRUFBYXhxQyxFQUFHLE1BR25Dd3FDLEVBQ0h4cUMsRUFDQXNtQyxFQUFNLCtCQUFpQywrQkErOEIvQ3JyQyxHQUFNazJCLFFBcjhCTixXQUNJLElBQUtuMEMsS0FBS3NxRCxVQUNOLE1BQU8scUJBQXVCdHFELEtBQUtzVyxHQUFLLE9BRTVDLElBRUkzVyxFQUNBdUQsRUFFQWluQyxFQUxBMVgsRUFBTyxTQUNQaXpDLEVBQU8sR0FjWCxPQVRLMWxFLEtBQUs0MEMsWUFDTm5pQixFQUE0QixJQUFyQnp5QixLQUFLNCtELFlBQW9CLGFBQWUsbUJBQy9DOEcsRUFBTyxLQUVYL2xFLEVBQVMsSUFBTTh5QixFQUFPLE1BQ3RCdnZCLEVBQU8sR0FBS2xELEtBQUtrRCxRQUFVbEQsS0FBS2tELFFBQVUsS0FBTyxPQUFTLFNBQy9DLHdCQUNYaW5DLEVBQVN1N0IsRUFBTyxPQUVUMWxFLEtBQUtZLE9BQU9qQixFQUFTdUQsRUFIakIsd0JBR21DaW5DLElBbTdCNUIsb0JBQVhyekIsUUFBd0MsTUFBZEEsT0FBTzZ1RCxNQUN4QzFuRCxHQUFNbkgsT0FBTzZ1RCxJQUFJLCtCQUFpQyxXQUM5QyxNQUFPLFVBQVkzbEUsS0FBS1ksU0FBVyxNQUczQ3FkLEdBQU0ybkQsT0FqcUJOLFdBRUksT0FBTzVsRSxLQUFLc3FELFVBQVl0cUQsS0FBS3dsRSxjQUFnQixNQWdxQmpEdm5ELEdBQU01YyxTQXAvQk4sV0FDSSxPQUFPckIsS0FBS3lkLFFBQVEwckMsT0FBTyxNQUFNdm9ELE9BQU8scUNBby9CNUNxZCxHQUFNNG5ELEtBcnNCTixXQUNJLE9BQU8xaEUsS0FBS3NqRCxNQUFNem5ELEtBQUtpcEQsVUFBWSxNQXFzQnZDaHJDLEdBQU1nckMsUUExc0JOLFdBQ0ksT0FBT2pwRCxLQUFLb1gsR0FBRzZ4QyxVQUFrQyxLQUFyQmpwRCxLQUFLMnJELFNBQVcsSUEwc0JoRDF0QyxHQUFNNm5ELGFBcHBCTixXQUNJLE1BQU8sQ0FDSHQvQyxNQUFPeG1CLEtBQUtzVyxHQUNaMVYsT0FBUVosS0FBS3VyRCxHQUNicEMsT0FBUW5wRCxLQUFLNHJELFFBQ2IwUixNQUFPdDlELEtBQUswckQsT0FDWnRDLE9BQVFwcEQsS0FBSzZxRCxVQStvQnJCNXNDLEdBQU04bkQsUUF6Z0JOLFdBQ0ksSUFBSXYvRCxFQUNBc3BCLEVBQ0FwbEIsRUFDQWk3QyxFQUFPM2xELEtBQUt1dEQsYUFBYTVILE9BQzdCLElBQUtuL0MsRUFBSSxFQUFHc3BCLEVBQUk2MUIsRUFBSzFqRCxPQUFRdUUsRUFBSXNwQixJQUFLdHBCLEVBQUcsQ0FJckMsR0FGQWtFLEVBQU0xSyxLQUFLeWQsUUFBUW9tRCxRQUFRLE9BQU81YSxVQUU5QnRELEVBQUtuL0MsR0FBR28vQyxPQUFTbDdDLEdBQU9BLEdBQU9pN0MsRUFBS24vQyxHQUFHa29CLE1BQ3ZDLE9BQU9pM0IsRUFBS24vQyxHQUFHc0wsS0FFbkIsR0FBSTZ6QyxFQUFLbi9DLEdBQUdrb0IsT0FBU2hrQixHQUFPQSxHQUFPaTdDLEVBQUtuL0MsR0FBR28vQyxNQUN2QyxPQUFPRCxFQUFLbi9DLEdBQUdzTCxLQUl2QixNQUFPLElBeWZYbU0sR0FBTStuRCxVQXRmTixXQUNJLElBQUl4L0QsRUFDQXNwQixFQUNBcGxCLEVBQ0FpN0MsRUFBTzNsRCxLQUFLdXRELGFBQWE1SCxPQUM3QixJQUFLbi9DLEVBQUksRUFBR3NwQixFQUFJNjFCLEVBQUsxakQsT0FBUXVFLEVBQUlzcEIsSUFBS3RwQixFQUFHLENBSXJDLEdBRkFrRSxFQUFNMUssS0FBS3lkLFFBQVFvbUQsUUFBUSxPQUFPNWEsVUFFOUJ0RCxFQUFLbi9DLEdBQUdvL0MsT0FBU2w3QyxHQUFPQSxHQUFPaTdDLEVBQUtuL0MsR0FBR2tvQixNQUN2QyxPQUFPaTNCLEVBQUtuL0MsR0FBR3EvQyxPQUVuQixHQUFJRixFQUFLbi9DLEdBQUdrb0IsT0FBU2hrQixHQUFPQSxHQUFPaTdDLEVBQUtuL0MsR0FBR28vQyxNQUN2QyxPQUFPRCxFQUFLbi9DLEdBQUdxL0MsT0FJdkIsTUFBTyxJQXNlWDVuQyxHQUFNZ29ELFFBbmVOLFdBQ0ksSUFBSXovRCxFQUNBc3BCLEVBQ0FwbEIsRUFDQWk3QyxFQUFPM2xELEtBQUt1dEQsYUFBYTVILE9BQzdCLElBQUtuL0MsRUFBSSxFQUFHc3BCLEVBQUk2MUIsRUFBSzFqRCxPQUFRdUUsRUFBSXNwQixJQUFLdHBCLEVBQUcsQ0FJckMsR0FGQWtFLEVBQU0xSyxLQUFLeWQsUUFBUW9tRCxRQUFRLE9BQU81YSxVQUU5QnRELEVBQUtuL0MsR0FBR28vQyxPQUFTbDdDLEdBQU9BLEdBQU9pN0MsRUFBS24vQyxHQUFHa29CLE1BQ3ZDLE9BQU9pM0IsRUFBS24vQyxHQUFHcy9DLEtBRW5CLEdBQUlILEVBQUtuL0MsR0FBR2tvQixPQUFTaGtCLEdBQU9BLEdBQU9pN0MsRUFBS24vQyxHQUFHby9DLE1BQ3ZDLE9BQU9ELEVBQUtuL0MsR0FBR3MvQyxLQUl2QixNQUFPLElBbWRYN25DLEdBQU1pb0QsUUFoZE4sV0FDSSxJQUFJMS9ELEVBQ0FzcEIsRUFDQWxOLEVBQ0FsWSxFQUNBaTdDLEVBQU8zbEQsS0FBS3V0RCxhQUFhNUgsT0FDN0IsSUFBS24vQyxFQUFJLEVBQUdzcEIsRUFBSTYxQixFQUFLMWpELE9BQVF1RSxFQUFJc3BCLElBQUt0cEIsRUFNbEMsR0FMQW9jLEVBQU0raUMsRUFBS24vQyxHQUFHby9DLE9BQVNELEVBQUtuL0MsR0FBR2tvQixNQUFRLEdBQU0sRUFHN0Noa0IsRUFBTTFLLEtBQUt5ZCxRQUFRb21ELFFBQVEsT0FBTzVhLFVBRzdCdEQsRUFBS24vQyxHQUFHby9DLE9BQVNsN0MsR0FBT0EsR0FBT2k3QyxFQUFLbi9DLEdBQUdrb0IsT0FDdkNpM0IsRUFBS24vQyxHQUFHa29CLE9BQVNoa0IsR0FBT0EsR0FBT2k3QyxFQUFLbi9DLEdBQUdvL0MsTUFFeEMsT0FDSzVsRCxLQUFLa0QsT0FBU3EwQixFQUFNb3VCLEVBQUtuL0MsR0FBR28vQyxPQUFPMWlELFFBQVUwZixFQUM5QytpQyxFQUFLbi9DLEdBQUc4MEMsT0FLcEIsT0FBT3Q3QyxLQUFLa0QsUUEwYmhCK2EsR0FBTS9hLEtBQU8ydkQsR0FDYjUwQyxHQUFNNVosV0F6a0hOLFdBQ0ksT0FBT0EsRUFBV3JFLEtBQUtrRCxTQXlrSDNCK2EsR0FBTWs5QyxTQWpVTixTQUF3QjMwQyxHQUNwQixPQUFPaThDLEdBQXFCL3dELEtBQ3hCMVIsS0FDQXdtQixFQUNBeG1CLEtBQUtzZ0QsT0FDTHRnRCxLQUFLMHpELFVBQ0wxekQsS0FBS3V0RCxhQUFhbU8sTUFBTW5iLElBQ3hCdmdELEtBQUt1dEQsYUFBYW1PLE1BQU1sYixNQTJUaEN2aUMsR0FBTWdsRCxZQXZUTixTQUEyQno4QyxHQUN2QixPQUFPaThDLEdBQXFCL3dELEtBQ3hCMVIsS0FDQXdtQixFQUNBeG1CLEtBQUtrK0QsVUFDTGwrRCxLQUFLbWtFLGFBQ0wsRUFDQSxJQWlUUmxtRCxHQUFNKy9DLFFBQVUvL0MsR0FBTTgvQyxTQS9PdEIsU0FBdUJ2M0MsR0FDbkIsT0FBZ0IsTUFBVEEsRUFDRHJpQixLQUFLNmtDLE1BQU1ocEMsS0FBS2lELFFBQVUsR0FBSyxHQUMvQmpELEtBQUtpRCxNQUFvQixHQUFidWpCLEVBQVEsR0FBVXhtQixLQUFLaUQsUUFBVSxJQTZPdkRnYixHQUFNaGIsTUFBUWd2RCxHQUNkaDBDLEdBQU0rd0MsWUFodUhOLFdBQ0ksT0FBT0EsR0FBWWh2RCxLQUFLa0QsT0FBUWxELEtBQUtpRCxVQWd1SHpDZ2IsR0FBTXFpQyxLQUFPcmlDLEdBQU1nZ0QsTUFqN0duQixTQUFvQnozQyxHQUNoQixJQUFJODVCLEVBQU90Z0QsS0FBS3V0RCxhQUFhak4sS0FBS3RnRCxNQUNsQyxPQUFnQixNQUFUd21CLEVBQWdCODVCLEVBQU90Z0QsS0FBS2l3QixJQUFxQixHQUFoQnpKLEVBQVE4NUIsR0FBVyxNQWc3Ry9EcmlDLEdBQU1pZ0QsUUFBVWpnRCxHQUFNa29ELFNBNzZHdEIsU0FBdUIzL0MsR0FDbkIsSUFBSTg1QixFQUFPd1QsR0FBVzl6RCxLQUFNLEVBQUcsR0FBR3NnRCxLQUNsQyxPQUFnQixNQUFUOTVCLEVBQWdCODVCLEVBQU90Z0QsS0FBS2l3QixJQUFxQixHQUFoQnpKLEVBQVE4NUIsR0FBVyxNQTQ2Ry9EcmlDLEdBQU1nMkMsWUExU04sV0FDSSxJQUFJbVMsRUFBV3BtRSxLQUFLdXRELGFBQWFtTyxNQUNqQyxPQUFPekgsR0FBWWowRCxLQUFLa0QsT0FBUWtqRSxFQUFTN2xCLElBQUs2bEIsRUFBUzVsQixNQXlTM0R2aUMsR0FBTW9vRCxnQkF0U04sV0FDSSxJQUFJRCxFQUFXcG1FLEtBQUt1dEQsYUFBYW1PLE1BQ2pDLE9BQU96SCxHQUFZajBELEtBQUttN0QsV0FBWWlMLEVBQVM3bEIsSUFBSzZsQixFQUFTNWxCLE1BcVMvRHZpQyxHQUFNcW9ELGVBcFROLFdBQ0ksT0FBT3JTLEdBQVlqMEQsS0FBS2tELE9BQVEsRUFBRyxJQW9UdkMrYSxHQUFNc29ELHNCQWpUTixXQUNJLE9BQU90UyxHQUFZajBELEtBQUtpakUsY0FBZSxFQUFHLElBaVQ5Q2hsRCxHQUFNdGMsS0FBTzBoRSxHQUNicGxELEdBQU1qYixJQUFNaWIsR0FBTWtwQyxLQTlwR2xCLFNBQXlCM2dDLEdBQ3JCLElBQUt4bUIsS0FBS3NxRCxVQUNOLE9BQWdCLE1BQVQ5akMsRUFBZ0J4bUIsS0FBT2lyRCxJQUVsQyxJQUFJam9ELEVBQU1oRCxLQUFLMHJELE9BQVMxckQsS0FBS29YLEdBQUdvOEMsWUFBY3h6RCxLQUFLb1gsR0FBRzBpRCxTQUN0RCxPQUFhLE1BQVR0ekMsR0FDQUEsRUF6TlIsU0FBc0JBLEVBQU8yaUMsR0FDekIsTUFBcUIsaUJBQVYzaUMsRUFDQUEsRUFHTjgyQixNQUFNOTJCLEdBS1UsaUJBRHJCQSxFQUFRMmlDLEVBQU92RixjQUFjcDlCLElBRWxCQSxFQUdKLEtBUkl4a0IsU0FBU3drQixFQUFPLElBbU5mZ2dELENBQWFoZ0QsRUFBT3htQixLQUFLdXRELGNBQzFCdnRELEtBQUtpd0IsSUFBSXpKLEVBQVF4akIsRUFBSyxNQUV0QkEsR0FzcEdmaWIsR0FBTXkxQyxRQWxwR04sU0FBK0JsdEMsR0FDM0IsSUFBS3htQixLQUFLc3FELFVBQ04sT0FBZ0IsTUFBVDlqQyxFQUFnQnhtQixLQUFPaXJELElBRWxDLElBQUl5SSxHQUFXMXpELEtBQUtnRCxNQUFRLEVBQUloRCxLQUFLdXRELGFBQWFtTyxNQUFNbmIsS0FBTyxFQUMvRCxPQUFnQixNQUFULzVCLEVBQWdCa3RDLEVBQVUxekQsS0FBS2l3QixJQUFJekosRUFBUWt0QyxFQUFTLE1BOG9HL0R6MUMsR0FBTWttRCxXQTNvR04sU0FBNEIzOUMsR0FDeEIsSUFBS3htQixLQUFLc3FELFVBQ04sT0FBZ0IsTUFBVDlqQyxFQUFnQnhtQixLQUFPaXJELElBT2xDLEdBQWEsTUFBVHprQyxFQUFlLENBQ2YsSUFBSWt0QyxFQWpPWixTQUF5Qmx0QyxFQUFPMmlDLEdBQzVCLE1BQXFCLGlCQUFWM2lDLEVBQ0EyaUMsRUFBT3ZGLGNBQWNwOUIsR0FBUyxHQUFLLEVBRXZDODJCLE1BQU05MkIsR0FBUyxLQUFPQSxFQTZOWGlnRCxDQUFnQmpnRCxFQUFPeG1CLEtBQUt1dEQsY0FDMUMsT0FBT3Z0RCxLQUFLZ0QsSUFBSWhELEtBQUtnRCxNQUFRLEVBQUkwd0QsRUFBVUEsRUFBVSxHQUVyRCxPQUFPMXpELEtBQUtnRCxPQUFTLEdBK25HN0JpYixHQUFNNDFDLFVBaE1OLFNBQXlCcnRDLEdBQ3JCLElBQUlxdEMsRUFDQTF2RCxLQUFLbWlDLE9BQ0F0bUMsS0FBS3lkLFFBQVFvbUQsUUFBUSxPQUFTN2pFLEtBQUt5ZCxRQUFRb21ELFFBQVEsU0FBVyxPQUMvRCxFQUNSLE9BQWdCLE1BQVRyOUMsRUFBZ0JxdEMsRUFBWTd6RCxLQUFLaXdCLElBQUl6SixFQUFRcXRDLEVBQVcsTUE0TG5FNTFDLEdBQU14WSxLQUFPd1ksR0FBTXFnQyxNQUFRaVksR0FDM0J0NEMsR0FBTXpZLE9BQVN5WSxHQUFNc2dDLFFBQVUra0IsR0FDL0JybEQsR0FBTTFZLE9BQVMwWSxHQUFNZzRDLFFBQVV1TixHQUMvQnZsRCxHQUFNay9DLFlBQWNsL0MsR0FBTWtnRCxhQUFlb0YsR0FDekN0bEQsR0FBTTJnRCxVQWhuRE4sU0FBc0JwNEMsRUFBT2tnRCxFQUFlQyxHQUN4QyxJQUNJQyxFQURBdHJCLEVBQVN0N0MsS0FBSzJyRCxTQUFXLEVBRTdCLElBQUszckQsS0FBS3NxRCxVQUNOLE9BQWdCLE1BQVQ5akMsRUFBZ0J4bUIsS0FBT2lyRCxJQUVsQyxHQUFhLE1BQVR6a0MsRUFBZSxDQUNmLEdBQXFCLGlCQUFWQSxHQUVQLEdBQWMsUUFEZEEsRUFBUXM0QyxHQUFpQjlPLEdBQWtCeHBDLElBRXZDLE9BQU94bUIsVUFFSm1FLEtBQUtxRixJQUFJZ2QsR0FBUyxLQUFPbWdELElBQ2hDbmdELEdBQWdCLElBd0JwQixPQXRCS3htQixLQUFLMHJELFFBQVVnYixJQUNoQkUsRUFBY3hILEdBQWNwL0QsT0FFaENBLEtBQUsyckQsUUFBVW5sQyxFQUNmeG1CLEtBQUswckQsUUFBUyxFQUNLLE1BQWZrYixHQUNBNW1FLEtBQUtpd0IsSUFBSTIyQyxFQUFhLEtBRXRCdHJCLElBQVc5MEIsS0FDTmtnRCxHQUFpQjFtRSxLQUFLNm1FLGtCQUN2QjNHLEdBQ0lsZ0UsS0FDQXkvRCxHQUFlajVDLEVBQVE4MEIsRUFBUSxLQUMvQixHQUNBLEdBRUl0N0MsS0FBSzZtRSxvQkFDYjdtRSxLQUFLNm1FLG1CQUFvQixFQUN6QnR2QyxFQUFNdzBCLGFBQWEvckQsTUFBTSxHQUN6QkEsS0FBSzZtRSxrQkFBb0IsT0FHMUI3bUUsS0FFUCxPQUFPQSxLQUFLMHJELE9BQVNwUSxFQUFTOGpCLEdBQWNwL0QsT0Ewa0RwRGllLEdBQU1xckMsSUF4akROLFNBQXdCb2QsR0FDcEIsT0FBTzFtRSxLQUFLNCtELFVBQVUsRUFBRzhILElBd2pEN0J6b0QsR0FBTWtoRCxNQXJqRE4sU0FBMEJ1SCxHQVN0QixPQVJJMW1FLEtBQUswckQsU0FDTDFyRCxLQUFLNCtELFVBQVUsRUFBRzhILEdBQ2xCMW1FLEtBQUswckQsUUFBUyxFQUVWZ2IsR0FDQTFtRSxLQUFLc29DLFNBQVM4MkIsR0FBY3AvRCxNQUFPLE1BR3BDQSxNQTZpRFhpZSxHQUFNNm9ELFVBMWlETixXQUNJLEdBQWlCLE1BQWI5bUUsS0FBS3lyRCxLQUNMenJELEtBQUs0K0QsVUFBVTUrRCxLQUFLeXJELE1BQU0sR0FBTyxRQUM5QixHQUF1QixpQkFBWnpyRCxLQUFLc1csR0FBaUIsQ0FDcEMsSUFBSXl3RCxFQUFRakksR0FBaUIvTyxHQUFhL3ZELEtBQUtzVyxJQUNsQyxNQUFUeXdELEVBQ0EvbUUsS0FBSzQrRCxVQUFVbUksR0FFZi9tRSxLQUFLNCtELFVBQVUsR0FBRyxHQUcxQixPQUFPNStELE1BZ2lEWGllLEdBQU0rb0QscUJBN2hETixTQUE4QnhnRCxHQUMxQixRQUFLeG1CLEtBQUtzcUQsWUFHVjlqQyxFQUFRQSxFQUFRaTFDLEdBQVlqMUMsR0FBT280QyxZQUFjLEdBRXpDNStELEtBQUs0K0QsWUFBY3A0QyxHQUFTLElBQU8sSUF3aEQvQ3ZJLEdBQU1ncEQsTUFyaEROLFdBQ0ksT0FDSWpuRSxLQUFLNCtELFlBQWM1K0QsS0FBS3lkLFFBQVF4YSxNQUFNLEdBQUcyN0QsYUFDekM1K0QsS0FBSzQrRCxZQUFjNStELEtBQUt5ZCxRQUFReGEsTUFBTSxHQUFHMjdELGFBbWhEakQzZ0QsR0FBTTIyQixRQXovQ04sV0FDSSxRQUFPNTBDLEtBQUtzcUQsWUFBYXRxRCxLQUFLMHJELFFBeS9DbEN6dEMsR0FBTWlwRCxZQXQvQ04sV0FDSSxRQUFPbG5FLEtBQUtzcUQsV0FBWXRxRCxLQUFLMHJELFFBcy9DakN6dEMsR0FBTXFoRCxNQUFRQSxHQUNkcmhELEdBQU1xL0MsTUFBUWdDLEdBQ2RyaEQsR0FBTWtwRCxTQXpGTixXQUNJLE9BQU9ubkUsS0FBSzByRCxPQUFTLE1BQVEsSUF5RmpDenRDLEdBQU1tcEQsU0F0Rk4sV0FDSSxPQUFPcG5FLEtBQUswckQsT0FBUyw2QkFBK0IsSUFzRnhEenRDLEdBQU1vcEQsTUFBUW5iLEVBQ1Ysa0RBQ0FtWCxJQUVKcGxELEdBQU02L0IsT0FBU29PLEVBQ1gsbURBQ0ErRixJQUVKaDBDLEdBQU02L0MsTUFBUTVSLEVBQ1YsaURBQ0EyRyxJQUVKNTBDLEdBQU15bkQsS0FBT3haLEVBQ1QsNEdBOWxESixTQUFvQjFsQyxFQUFPa2dELEdBQ3ZCLE9BQWEsTUFBVGxnRCxHQUNxQixpQkFBVkEsSUFDUEEsR0FBU0EsR0FHYnhtQixLQUFLNCtELFVBQVVwNEMsRUFBT2tnRCxHQUVmMW1FLE9BRUNBLEtBQUs0K0QsZUF1bERyQjNnRCxHQUFNcXBELGFBQWVwYixFQUNqQiwyR0F0aURKLFdBQ0ksSUFBS3JELEVBQVk3b0QsS0FBS3VuRSxlQUNsQixPQUFPdm5FLEtBQUt1bkUsY0FHaEIsSUFDSS9KLEVBREFqRCxFQUFJLEdBY1IsT0FYQWxQLEVBQVdrUCxFQUFHdjZELE9BQ2R1NkQsRUFBSWdDLEdBQWNoQyxJQUVadkosSUFDRndNLEVBQVFqRCxFQUFFN08sT0FBU3hDLEVBQVVxUixFQUFFdkosSUFBTXlLLEdBQVlsQixFQUFFdkosSUFDbkRoeEQsS0FBS3VuRSxjQUNEdm5FLEtBQUtzcUQsV0F0T2pCLFNBQXVCa2QsRUFBUUMsRUFBUUMsR0FDbkMsSUFHSWxoRSxFQUhBcUUsRUFBTTFHLEtBQUtDLElBQUlvakUsRUFBT3ZsRSxPQUFRd2xFLEVBQU94bEUsUUFDckMwbEUsRUFBYXhqRSxLQUFLcUYsSUFBSWcrRCxFQUFPdmxFLE9BQVN3bEUsRUFBT3hsRSxRQUM3QzJsRSxFQUFRLEVBRVosSUFBS3BoRSxFQUFJLEVBQUdBLEVBQUlxRSxFQUFLckUsS0FFWmtoRSxHQUFlRixFQUFPaGhFLEtBQU9paEUsRUFBT2poRSxLQUNuQ2toRSxHQUFlaFosRUFBTThZLEVBQU9oaEUsTUFBUWtvRCxFQUFNK1ksRUFBT2poRSxNQUVuRG9oRSxJQUdSLE9BQU9BLEVBQVFELEVBeU5XRSxDQUFjdE4sRUFBRXZKLEdBQUl3TSxFQUFNemhELFdBQWEsR0FFN0QvYixLQUFLdW5FLGVBQWdCLEVBR2xCdm5FLEtBQUt1bkUsaUJBbWlEaEIsSUFBSU8sR0FBVXBiLEVBQU9sc0QsVUF1Q3JCLFNBQVN1bkUsR0FBTW5uRSxFQUFRK0IsRUFBT3FsRSxFQUFPdHdDLEdBQ2pDLElBQUl5eEIsRUFBU2lPLEtBQ1Q5TixFQUFNSixJQUFZMXlCLElBQUlrQixFQUFRLzBCLEdBQ2xDLE9BQU93bUQsRUFBTzZlLEdBQU8xZSxFQUFLMW9ELEdBRzlCLFNBQVNxbkUsR0FBZXJuRSxFQUFRK0IsRUFBT3FsRSxHQVFuQyxHQVBJbGYsRUFBU2xvRCxLQUNUK0IsRUFBUS9CLEVBQ1JBLE9BQVNpTixHQUdiak4sRUFBU0EsR0FBVSxHQUVOLE1BQVQrQixFQUNBLE9BQU9vbEUsR0FBTW5uRSxFQUFRK0IsRUFBT3FsRSxFQUFPLFNBR3ZDLElBQUl4aEUsRUFDQTBoRSxFQUFNLEdBQ1YsSUFBSzFoRSxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDaEIwaEUsRUFBSTFoRSxHQUFLdWhFLEdBQU1ubkUsRUFBUTRGLEVBQUd3aEUsRUFBTyxTQUVyQyxPQUFPRSxFQVdYLFNBQVNDLEdBQWlCQyxFQUFjeG5FLEVBQVErQixFQUFPcWxFLEdBQ3ZCLGtCQUFqQkksR0FDSHRmLEVBQVNsb0QsS0FDVCtCLEVBQVEvQixFQUNSQSxPQUFTaU4sR0FHYmpOLEVBQVNBLEdBQVUsS0FHbkIrQixFQURBL0IsRUFBU3duRSxFQUVUQSxHQUFlLEVBRVh0ZixFQUFTbG9ELEtBQ1QrQixFQUFRL0IsRUFDUkEsT0FBU2lOLEdBR2JqTixFQUFTQSxHQUFVLElBR3ZCLElBRUk0RixFQUZBMmlELEVBQVNpTyxLQUNUaHpDLEVBQVFna0QsRUFBZWpmLEVBQU91UyxNQUFNbmIsSUFBTSxFQUUxQzJuQixFQUFNLEdBRVYsR0FBYSxNQUFUdmxFLEVBQ0EsT0FBT29sRSxHQUFNbm5FLEdBQVMrQixFQUFReWhCLEdBQVMsRUFBRzRqRCxFQUFPLE9BR3JELElBQUt4aEUsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLElBQ2YwaEUsRUFBSTFoRSxHQUFLdWhFLEdBQU1ubkUsR0FBUzRGLEVBQUk0ZCxHQUFTLEVBQUc0akQsRUFBTyxPQUVuRCxPQUFPRSxFQXhHWEosR0FBUTlvQixTQW45SVIsU0FBa0IzMkMsRUFBSzI4QyxFQUFLamxCLEdBQ3hCLElBQUl3a0IsRUFBU3ZrRCxLQUFLcW9FLFVBQVVoZ0UsSUFBUXJJLEtBQUtxb0UsVUFBb0IsU0FDN0QsT0FBT2p1RCxFQUFXbXFDLEdBQVVBLEVBQU83eUMsS0FBS3N6QyxFQUFLamxCLEdBQU93a0IsR0FrOUl4RHVqQixHQUFRcnBCLGVBeDFJUixTQUF3QnAyQyxHQUNwQixJQUFJekgsRUFBU1osS0FBS3NvRSxnQkFBZ0JqZ0UsR0FDOUJrZ0UsRUFBY3ZvRSxLQUFLc29FLGdCQUFnQmpnRSxFQUFJa0osZUFFM0MsT0FBSTNRLElBQVcybkUsRUFDSjNuRSxHQUdYWixLQUFLc29FLGdCQUFnQmpnRSxHQUFPa2dFLEVBQ3ZCcmxELE1BQU0rcEMsR0FDTm5yRCxLQUFJLFNBQVUwbUUsR0FDWCxNQUNZLFNBQVJBLEdBQ1EsT0FBUkEsR0FDUSxPQUFSQSxHQUNRLFNBQVJBLEVBRU9BLEVBQUl0bkUsTUFBTSxHQUVkc25FLEtBRVZ2eUQsS0FBSyxJQUVIalcsS0FBS3NvRSxnQkFBZ0JqZ0UsS0FrMEloQ3kvRCxHQUFRMWlCLFlBN3pJUixXQUNJLE9BQU9wbEQsS0FBS3lvRSxjQTZ6SWhCWCxHQUFRem5CLFFBdnpJUixTQUFpQi83QyxHQUNiLE9BQU90RSxLQUFLMG9FLFNBQVMvbkUsUUFBUSxLQUFNMkQsSUF1ekl2Q3dqRSxHQUFRbG1CLFNBQVc4aEIsR0FDbkJvRSxHQUFRN21CLFdBQWF5aUIsR0FDckJvRSxHQUFRdm9CLGFBbnlJUixTQUFzQmo3QyxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUNqRCxJQUFJeUQsRUFBU3ZrRCxLQUFLMm9FLGNBQWN6eUMsR0FDaEMsT0FBTzliLEVBQVdtcUMsR0FDWkEsRUFBT2pnRCxFQUFRdThDLEVBQWUzcUIsRUFBUTRxQixHQUN0Q3lELEVBQU81akQsUUFBUSxNQUFPMkQsSUFneUloQ3dqRSxHQUFRYyxXQTd4SVIsU0FBb0IvakQsRUFBTTAvQixHQUN0QixJQUFJM2pELEVBQVNaLEtBQUsyb0UsY0FBYzlqRCxFQUFPLEVBQUksU0FBVyxRQUN0RCxPQUFPekssRUFBV3haLEdBQVVBLEVBQU8yakQsR0FBVTNqRCxFQUFPRCxRQUFRLE1BQU80akQsSUE0eEl2RXVqQixHQUFRdHhDLElBL2lKUixTQUFhczFCLEdBQ1QsSUFBSXIxQixFQUFNandCLEVBQ1YsSUFBS0EsS0FBS3NsRCxFQUNGckQsRUFBV3FELEVBQVF0bEQsS0FFZjRULEVBREpxYyxFQUFPcTFCLEVBQU90bEQsSUFFVnhHLEtBQUt3RyxHQUFLaXdCLEVBRVZ6MkIsS0FBSyxJQUFNd0csR0FBS2l3QixHQUk1QnoyQixLQUFLcTNELFFBQVV2TCxFQUlmOXJELEtBQUtvakUsK0JBQWlDLElBQUloakUsUUFDckNKLEtBQUtrakUsd0JBQXdCcnFELFFBQVU3WSxLQUFLbWpFLGNBQWN0cUQsUUFDdkQsSUFDQSxVQUFVQSxTQTZoSnRCaXZELEdBQVFuaUIsS0ExcUJSLFNBQW9CM2lDLEVBQUdwaUIsR0FDbkIsSUFBSTRGLEVBQ0FzcEIsRUFDQW51QixFQUNBZ2tELEVBQU8zbEQsS0FBSzZvRSxPQUFTelIsR0FBVSxNQUFNeVIsTUFDekMsSUFBS3JpRSxFQUFJLEVBQUdzcEIsRUFBSTYxQixFQUFLMWpELE9BQVF1RSxFQUFJc3BCLElBQUt0cEIsRUFBRyxDQUNyQyxjQUFlbS9DLEVBQUtuL0MsR0FBR28vQyxPQUNuQixJQUFLLFNBRURqa0QsRUFBTzQxQixFQUFNb3VCLEVBQUtuL0MsR0FBR28vQyxPQUFPaWUsUUFBUSxPQUNwQ2xlLEVBQUtuL0MsR0FBR28vQyxNQUFRamtELEVBQUtzbkQsVUFJN0IsY0FBZXRELEVBQUtuL0MsR0FBR2tvQixPQUNuQixJQUFLLFlBQ0RpM0IsRUFBS24vQyxHQUFHa29CLE1BQVEsSUFDaEIsTUFDSixJQUFLLFNBRUQvc0IsRUFBTzQxQixFQUFNb3VCLEVBQUtuL0MsR0FBR2tvQixPQUFPbTFDLFFBQVEsT0FBTzVhLFVBQzNDdEQsRUFBS24vQyxHQUFHa29CLE1BQVEvc0IsRUFBS3NuRCxXQUlqQyxPQUFPdEQsR0FrcEJYbWlCLEdBQVEvRSxVQS9vQlIsU0FBeUJnRCxFQUFTbmxFLEVBQVF3b0QsR0FDdEMsSUFBSTVpRCxFQUNBc3BCLEVBRUFoZSxFQUNBZzBDLEVBQ0FELEVBSEFGLEVBQU8zbEQsS0FBSzJsRCxPQU1oQixJQUZBb2dCLEVBQVVBLEVBQVF4MEQsY0FFYi9LLEVBQUksRUFBR3NwQixFQUFJNjFCLEVBQUsxakQsT0FBUXVFLEVBQUlzcEIsSUFBS3RwQixFQUtsQyxHQUpBc0wsRUFBTzZ6QyxFQUFLbi9DLEdBQUdzTCxLQUFLUCxjQUNwQnUwQyxFQUFPSCxFQUFLbi9DLEdBQUdzL0MsS0FBS3YwQyxjQUNwQnMwQyxFQUFTRixFQUFLbi9DLEdBQUdxL0MsT0FBT3QwQyxjQUVwQjYzQyxFQUNBLE9BQVF4b0QsR0FDSixJQUFLLElBQ0wsSUFBSyxLQUNMLElBQUssTUFDRCxHQUFJa2xELElBQVNpZ0IsRUFDVCxPQUFPcGdCLEVBQUtuL0MsR0FFaEIsTUFFSixJQUFLLE9BQ0QsR0FBSXNMLElBQVNpMEQsRUFDVCxPQUFPcGdCLEVBQUtuL0MsR0FFaEIsTUFFSixJQUFLLFFBQ0QsR0FBSXEvQyxJQUFXa2dCLEVBQ1gsT0FBT3BnQixFQUFLbi9DLFFBSXJCLEdBQUksQ0FBQ3NMLEVBQU1nMEMsRUFBTUQsR0FBUTFrRCxRQUFRNGtFLElBQVksRUFDaEQsT0FBT3BnQixFQUFLbi9DLElBMm1CeEJzaEUsR0FBUXhMLGdCQXRtQlIsU0FBK0JuUyxFQUFLam5ELEdBQ2hDLElBQUkwZixFQUFNdW5DLEVBQUl2RSxPQUFTdUUsRUFBSXo3QixNQUFRLEdBQU0sRUFDekMsWUFBYTdnQixJQUFUM0ssRUFDT3EwQixFQUFNNHlCLEVBQUl2RSxPQUFPMWlELE9BRWpCcTBCLEVBQU00eUIsRUFBSXZFLE9BQU8xaUQsUUFBVUEsRUFBT2luRCxFQUFJN08sUUFBVTE0QixHQWttQi9Ea2xELEdBQVEvRixjQWpnQlIsU0FBdUIxUixHQUluQixPQUhLNUgsRUFBV3pvRCxLQUFNLG1CQUNsQmdpRSxHQUFpQnR3RCxLQUFLMVIsTUFFbkJxd0QsRUFBV3J3RCxLQUFLc2lFLGVBQWlCdGlFLEtBQUtvaUUsWUE4ZmpEMEYsR0FBUWpGLGNBemdCUixTQUF1QnhTLEdBSW5CLE9BSEs1SCxFQUFXem9ELEtBQU0sbUJBQ2xCZ2lFLEdBQWlCdHdELEtBQUsxUixNQUVuQnF3RCxFQUFXcndELEtBQUtxaUUsZUFBaUJyaUUsS0FBS29pRSxZQXNnQmpEMEYsR0FBUWhGLGdCQTVmUixTQUF5QnpTLEdBSXJCLE9BSEs1SCxFQUFXem9ELEtBQU0scUJBQ2xCZ2lFLEdBQWlCdHdELEtBQUsxUixNQUVuQnF3RCxFQUFXcndELEtBQUt1aUUsaUJBQW1CdmlFLEtBQUtvaUUsWUEwZm5EMEYsR0FBUWhxQixPQXA5SFIsU0FBc0I5NkIsRUFBR3BpQixHQUNyQixPQUFLb2lCLEVBS0VwTSxFQUFRNVcsS0FBS3crRCxTQUNkeCtELEtBQUt3K0QsUUFBUXg3QyxFQUFFL2YsU0FDZmpELEtBQUt3K0QsU0FDQXgrRCxLQUFLdytELFFBQVE3YixVQUFZeU8sSUFBa0J4cUQsS0FBS2hHLEdBQzNDLFNBQ0EsY0FDUm9pQixFQUFFL2YsU0FWQzJULEVBQVE1VyxLQUFLdytELFNBQ2R4K0QsS0FBS3crRCxRQUNMeCtELEtBQUt3K0QsUUFBb0IsWUFpOUh2Q3NKLEdBQVEvcEIsWUF0OEhSLFNBQTJCLzZCLEVBQUdwaUIsR0FDMUIsT0FBS29pQixFQUtFcE0sRUFBUTVXLEtBQUs4b0UsY0FDZDlvRSxLQUFLOG9FLGFBQWE5bEQsRUFBRS9mLFNBQ3BCakQsS0FBSzhvRSxhQUNEMVgsR0FBaUJ4cUQsS0FBS2hHLEdBQVUsU0FBVyxjQUM3Q29pQixFQUFFL2YsU0FSQzJULEVBQVE1VyxLQUFLOG9FLGNBQ2Q5b0UsS0FBSzhvRSxhQUNMOW9FLEtBQUs4b0UsYUFBeUIsWUFtOEg1Q2hCLEdBQVFya0IsWUEzNEhSLFNBQTJCK04sRUFBVzV3RCxFQUFRd29ELEdBQzFDLElBQUk1aUQsRUFBR3crQyxFQUFLbUwsRUFFWixHQUFJbndELEtBQUsrb0Usa0JBQ0wsT0FBT3hYLEdBQWtCNy9DLEtBQUsxUixLQUFNd3hELEVBQVc1d0QsRUFBUXdvRCxHQVkzRCxJQVRLcHBELEtBQUs0eEQsZUFDTjV4RCxLQUFLNHhELGFBQWUsR0FDcEI1eEQsS0FBSzZ4RCxpQkFBbUIsR0FDeEI3eEQsS0FBSzh4RCxrQkFBb0IsSUFNeEJ0ckQsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQUssQ0FtQnJCLEdBakJBdytDLEVBQU1rRSxFQUFVLENBQUMsSUFBTTFpRCxJQUNuQjRpRCxJQUFXcHBELEtBQUs2eEQsaUJBQWlCcnJELEtBQ2pDeEcsS0FBSzZ4RCxpQkFBaUJyckQsR0FBSyxJQUFJcEcsT0FDM0IsSUFBTUosS0FBSzg5QyxPQUFPa0gsRUFBSyxJQUFJcmtELFFBQVEsSUFBSyxJQUFNLElBQzlDLEtBRUpYLEtBQUs4eEQsa0JBQWtCdHJELEdBQUssSUFBSXBHLE9BQzVCLElBQU1KLEtBQUsrOUMsWUFBWWlILEVBQUssSUFBSXJrRCxRQUFRLElBQUssSUFBTSxJQUNuRCxNQUdIeW9ELEdBQVdwcEQsS0FBSzR4RCxhQUFhcHJELEtBQzlCMnBELEVBQ0ksSUFBTW53RCxLQUFLODlDLE9BQU9rSCxFQUFLLElBQU0sS0FBT2hsRCxLQUFLKzlDLFlBQVlpSCxFQUFLLElBQzlEaGxELEtBQUs0eEQsYUFBYXByRCxHQUFLLElBQUlwRyxPQUFPK3ZELEVBQU14dkQsUUFBUSxJQUFLLElBQUssTUFJMUR5b0QsR0FDVyxTQUFYeG9ELEdBQ0FaLEtBQUs2eEQsaUJBQWlCcnJELEdBQUdJLEtBQUs0cUQsR0FFOUIsT0FBT2hyRCxFQUNKLEdBQ0g0aUQsR0FDVyxRQUFYeG9ELEdBQ0FaLEtBQUs4eEQsa0JBQWtCdHJELEdBQUdJLEtBQUs0cUQsR0FFL0IsT0FBT2hyRCxFQUNKLElBQUs0aUQsR0FBVXBwRCxLQUFLNHhELGFBQWFwckQsR0FBR0ksS0FBSzRxRCxHQUM1QyxPQUFPaHJELElBNDFIbkJzaEUsR0FBUXBrQixZQTF4SFIsU0FBcUIyTSxHQUNqQixPQUFJcndELEtBQUsrb0UsbUJBQ0F0Z0IsRUFBV3pvRCxLQUFNLGlCQUNsQmt5RCxHQUFtQnhnRCxLQUFLMVIsTUFFeEJxd0QsRUFDT3J3RCxLQUFLeXlELG1CQUVMenlELEtBQUt1eUQsZUFHWDlKLEVBQVd6b0QsS0FBTSxrQkFDbEJBLEtBQUt1eUQsYUFBZWpCLElBRWpCdHhELEtBQUt5eUQsb0JBQXNCcEMsRUFDNUJyd0QsS0FBS3l5RCxtQkFDTHp5RCxLQUFLdXlELGVBMndIbkJ1VixHQUFRN2tCLGlCQS95SFIsU0FBMEJvTixHQUN0QixPQUFJcndELEtBQUsrb0UsbUJBQ0F0Z0IsRUFBV3pvRCxLQUFNLGlCQUNsQmt5RCxHQUFtQnhnRCxLQUFLMVIsTUFFeEJxd0QsRUFDT3J3RCxLQUFLMHlELHdCQUVMMXlELEtBQUt3eUQsb0JBR1gvSixFQUFXem9ELEtBQU0sdUJBQ2xCQSxLQUFLd3lELGtCQUFvQm5CLElBRXRCcnhELEtBQUsweUQseUJBQTJCckMsRUFDakNyd0QsS0FBSzB5RCx3QkFDTDF5RCxLQUFLd3lELG9CQWd5SG5Cc1YsR0FBUXhuQixLQXZoSFIsU0FBb0IwRSxHQUNoQixPQUFPOE8sR0FBVzlPLEVBQUtobEQsS0FBSzA3RCxNQUFNbmIsSUFBS3ZnRCxLQUFLMDdELE1BQU1sYixLQUFLRixNQXVoSDNEd25CLEdBQVFrQixlQTNnSFIsV0FDSSxPQUFPaHBFLEtBQUswN0QsTUFBTWxiLEtBMmdIdEJzbkIsR0FBUW1CLGVBaGhIUixXQUNJLE9BQU9qcEUsS0FBSzA3RCxNQUFNbmIsS0FpaEh0QnVuQixHQUFROXBCLFNBMzVHUixTQUF3Qmg3QixFQUFHcGlCLEdBQ3ZCLElBQUlvOUMsRUFBV3BuQyxFQUFRNVcsS0FBS2twRSxXQUN0QmxwRSxLQUFLa3BFLFVBQ0xscEUsS0FBS2twRSxVQUNEbG1ELElBQVcsSUFBTkEsR0FBY2hqQixLQUFLa3BFLFVBQVV2bUIsU0FBUy83QyxLQUFLaEcsR0FDMUMsU0FDQSxjQUVoQixPQUFhLElBQU5vaUIsRUFDRG14QyxHQUFjblcsRUFBVWgrQyxLQUFLMDdELE1BQU1uYixLQUNuQ3Y5QixFQUNBZzdCLEVBQVNoN0IsRUFBRWhnQixPQUNYZzdDLEdBZzVHVjhwQixHQUFRNXBCLFlBcjRHUixTQUEyQmw3QixHQUN2QixPQUFhLElBQU5BLEVBQ0RteEMsR0FBY24wRCxLQUFLbXBFLGFBQWNucEUsS0FBSzA3RCxNQUFNbmIsS0FDNUN2OUIsRUFDQWhqQixLQUFLbXBFLGFBQWFubUQsRUFBRWhnQixPQUNwQmhELEtBQUttcEUsY0FpNEdmckIsR0FBUTdwQixjQTk0R1IsU0FBNkJqN0IsR0FDekIsT0FBYSxJQUFOQSxFQUNEbXhDLEdBQWNuMEQsS0FBS29wRSxlQUFnQnBwRSxLQUFLMDdELE1BQU1uYixLQUM5Q3Y5QixFQUNBaGpCLEtBQUtvcEUsZUFBZXBtRCxFQUFFaGdCLE9BQ3RCaEQsS0FBS29wRSxnQkEwNEdmdEIsR0FBUWxrQixjQXR6R1IsU0FBNkJtUixFQUFhbjBELEVBQVF3b0QsR0FDOUMsSUFBSTVpRCxFQUFHdytDLEVBQUttTCxFQUVaLEdBQUlud0QsS0FBS3FwRSxvQkFDTCxPQUFPdlUsR0FBb0JwakQsS0FBSzFSLEtBQU0rMEQsRUFBYW4wRCxFQUFRd29ELEdBVS9ELElBUEtwcEQsS0FBS2cxRCxpQkFDTmgxRCxLQUFLZzFELGVBQWlCLEdBQ3RCaDFELEtBQUtrMUQsa0JBQW9CLEdBQ3pCbDFELEtBQUtpMUQsb0JBQXNCLEdBQzNCajFELEtBQUtzcEUsbUJBQXFCLElBR3pCOWlFLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFLLENBNkJwQixHQTFCQXcrQyxFQUFNa0UsRUFBVSxDQUFDLElBQU0sSUFBSWxtRCxJQUFJd0QsR0FDM0I0aUQsSUFBV3BwRCxLQUFLc3BFLG1CQUFtQjlpRSxLQUNuQ3hHLEtBQUtzcEUsbUJBQW1COWlFLEdBQUssSUFBSXBHLE9BQzdCLElBQU1KLEtBQUtnK0MsU0FBU2dILEVBQUssSUFBSXJrRCxRQUFRLElBQUssUUFBVSxJQUNwRCxLQUVKWCxLQUFLaTFELG9CQUFvQnp1RCxHQUFLLElBQUlwRyxPQUM5QixJQUFNSixLQUFLaStDLGNBQWMrRyxFQUFLLElBQUlya0QsUUFBUSxJQUFLLFFBQVUsSUFDekQsS0FFSlgsS0FBS2sxRCxrQkFBa0IxdUQsR0FBSyxJQUFJcEcsT0FDNUIsSUFBTUosS0FBS2srQyxZQUFZOEcsRUFBSyxJQUFJcmtELFFBQVEsSUFBSyxRQUFVLElBQ3ZELE1BR0hYLEtBQUtnMUQsZUFBZXh1RCxLQUNyQjJwRCxFQUNJLElBQ0Fud0QsS0FBS2crQyxTQUFTZ0gsRUFBSyxJQUNuQixLQUNBaGxELEtBQUtpK0MsY0FBYytHLEVBQUssSUFDeEIsS0FDQWhsRCxLQUFLaytDLFlBQVk4RyxFQUFLLElBQzFCaGxELEtBQUtnMUQsZUFBZXh1RCxHQUFLLElBQUlwRyxPQUFPK3ZELEVBQU14dkQsUUFBUSxJQUFLLElBQUssTUFJNUR5b0QsR0FDVyxTQUFYeG9ELEdBQ0FaLEtBQUtzcEUsbUJBQW1COWlFLEdBQUdJLEtBQUttdUQsR0FFaEMsT0FBT3Z1RCxFQUNKLEdBQ0g0aUQsR0FDVyxRQUFYeG9ELEdBQ0FaLEtBQUtpMUQsb0JBQW9CenVELEdBQUdJLEtBQUttdUQsR0FFakMsT0FBT3Z1RCxFQUNKLEdBQ0g0aUQsR0FDVyxPQUFYeG9ELEdBQ0FaLEtBQUtrMUQsa0JBQWtCMXVELEdBQUdJLEtBQUttdUQsR0FFL0IsT0FBT3Z1RCxFQUNKLElBQUs0aUQsR0FBVXBwRCxLQUFLZzFELGVBQWV4dUQsR0FBR0ksS0FBS211RCxHQUM5QyxPQUFPdnVELElBMHZHbkJzaEUsR0FBUXZULGNBN3NHUixTQUF1QmxFLEdBQ25CLE9BQUlyd0QsS0FBS3FwRSxxQkFDQTVnQixFQUFXem9ELEtBQU0sbUJBQ2xCbTFELEdBQXFCempELEtBQUsxUixNQUUxQnF3RCxFQUNPcndELEtBQUsyMUQscUJBRUwzMUQsS0FBS3cxRCxpQkFHWC9NLEVBQVd6b0QsS0FBTSxvQkFDbEJBLEtBQUt3MUQsZUFBaUJiLElBRW5CMzBELEtBQUsyMUQsc0JBQXdCdEYsRUFDOUJyd0QsS0FBSzIxRCxxQkFDTDMxRCxLQUFLdzFELGlCQThyR25Cc1MsR0FBUXhULG1CQTFyR1IsU0FBNEJqRSxHQUN4QixPQUFJcndELEtBQUtxcEUscUJBQ0E1Z0IsRUFBV3pvRCxLQUFNLG1CQUNsQm0xRCxHQUFxQnpqRCxLQUFLMVIsTUFFMUJxd0QsRUFDT3J3RCxLQUFLNDFELDBCQUVMNTFELEtBQUt5MUQsc0JBR1hoTixFQUFXem9ELEtBQU0seUJBQ2xCQSxLQUFLeTFELG9CQUFzQmIsSUFFeEI1MEQsS0FBSzQxRCwyQkFBNkJ2RixFQUNuQ3J3RCxLQUFLNDFELDBCQUNMNTFELEtBQUt5MUQsc0JBMnFHbkJxUyxHQUFRelQsaUJBdnFHUixTQUEwQmhFLEdBQ3RCLE9BQUlyd0QsS0FBS3FwRSxxQkFDQTVnQixFQUFXem9ELEtBQU0sbUJBQ2xCbTFELEdBQXFCempELEtBQUsxUixNQUUxQnF3RCxFQUNPcndELEtBQUs2MUQsd0JBRUw3MUQsS0FBSzAxRCxvQkFHWGpOLEVBQVd6b0QsS0FBTSx1QkFDbEJBLEtBQUswMUQsa0JBQW9CYixJQUV0QjcwRCxLQUFLNjFELHlCQUEyQnhGLEVBQ2pDcndELEtBQUs2MUQsd0JBQ0w3MUQsS0FBSzAxRCxvQkF5cEduQm9TLEdBQVExcEIsS0F2K0ZSLFNBQW9CNTNCLEdBR2hCLE1BQWdELE9BQXhDQSxFQUFRLElBQUk5aUIsY0FBY2lELE9BQU8sSUFxK0Y3Q21oRSxHQUFRenBCLFNBMzlGUixTQUF3QkMsRUFBT0MsRUFBU0MsR0FDcEMsT0FBSUYsRUFBUSxHQUNERSxFQUFVLEtBQU8sS0FFakJBLEVBQVUsS0FBTyxNQW1qR2hDMlksR0FBbUIsS0FBTSxDQUNyQnhSLEtBQU0sQ0FDRixDQUNJQyxNQUFPLGFBQ1BsM0IsTUFBTyxJQUNQNHNCLE9BQVEsRUFDUnhwQyxLQUFNLGNBQ04rekMsT0FBUSxLQUNSQyxLQUFNLE1BRVYsQ0FDSUYsTUFBTyxhQUNQbDNCLE9BQU8sSUFDUDRzQixPQUFRLEVBQ1J4cEMsS0FBTSxnQkFDTit6QyxPQUFRLEtBQ1JDLEtBQU0sT0FHZDFGLHVCQUF3Qix1QkFDeEJDLFFBQVMsU0FBVS83QyxHQUNmLElBQUlnYyxFQUFJaGMsRUFBUyxHQVdqQixPQUFPQSxHQVRnQyxJQUEvQm9xRCxFQUFPcHFELEVBQVMsSUFBTyxJQUNqQixLQUNNLElBQU5nYyxFQUNBLEtBQ00sSUFBTkEsRUFDQSxLQUNNLElBQU5BLEVBQ0EsS0FDQSxTQU90QmlYLEVBQU1wTixLQUFPK2hDLEVBQ1Qsd0RBQ0FpTCxJQUVKNS9CLEVBQU1neUMsU0FBV3JkLEVBQ2IsZ0VBQ0FrTCxJQUdKLElBQUlvUyxHQUFVcmxFLEtBQUtxRixJQW1CbkIsU0FBU2lnRSxHQUFjLytCLEVBQVVsa0IsRUFBTzlsQixFQUFPdS9ELEdBQzNDLElBQUl6QyxFQUFRaUMsR0FBZWo1QyxFQUFPOWxCLEdBTWxDLE9BSkFncUMsRUFBUzR6QixlQUFpQjJCLEVBQVl6QyxFQUFNYyxjQUM1QzV6QixFQUFTNnpCLE9BQVMwQixFQUFZekMsRUFBTWUsTUFDcEM3ekIsRUFBUzh6QixTQUFXeUIsRUFBWXpDLEVBQU1nQixRQUUvQjl6QixFQUFTK3pCLFVBYXBCLFNBQVNpTCxHQUFRcGxFLEdBQ2IsT0FBSUEsRUFBUyxFQUNGSCxLQUFLc2pELE1BQU1uakQsR0FFWEgsS0FBSzZrQyxLQUFLMWtDLEdBMkR6QixTQUFTcWxFLEdBQWF4aUIsR0FHbEIsT0FBZSxLQUFQQSxFQUFlLE9BRzNCLFNBQVN5aUIsR0FBYTlyQixHQUVsQixPQUFpQixPQUFUQSxFQUFtQixLQTREL0IsU0FBUytyQixHQUFPQyxHQUNaLE9BQU8sV0FDSCxPQUFPOXBFLEtBQUsrcEUsR0FBR0QsSUFJdkIsSUFBSUUsR0FBaUJILEdBQU8sTUFDeEJJLEdBQVlKLEdBQU8sS0FDbkJLLEdBQVlMLEdBQU8sS0FDbkJNLEdBQVVOLEdBQU8sS0FDakJPLEdBQVNQLEdBQU8sS0FDaEJRLEdBQVVSLEdBQU8sS0FDakJTLEdBQVdULEdBQU8sS0FDbEJVLEdBQWFWLEdBQU8sS0FDcEJXLEdBQVVYLEdBQU8sS0FXckIsU0FBU1ksR0FBVzM0RCxHQUNoQixPQUFPLFdBQ0gsT0FBTzlSLEtBQUtzcUQsVUFBWXRxRCxLQUFLbTNCLE1BQU1ybEIsR0FBUW01QyxLQUluRCxJQUFJa1QsR0FBZXNNLEdBQVcsZ0JBQzFCeFUsR0FBVXdVLEdBQVcsV0FDckJsc0IsR0FBVWtzQixHQUFXLFdBQ3JCbnNCLEdBQVFtc0IsR0FBVyxTQUNuQnRqQixHQUFPc2pCLEdBQVcsUUFDbEIzc0IsR0FBUzJzQixHQUFXLFVBQ3BCM00sR0FBUTJNLEdBQVcsU0FNdkIsSUFBSW5rQyxHQUFRbmlDLEtBQUttaUMsTUFDYm9rQyxHQUFhLENBQ1RockIsR0FBSSxHQUNKN00sRUFBRyxHQUNIN3ZCLEVBQUcsR0FDSDQ4QixFQUFHLEdBQ0hFLEVBQUcsR0FDSHZtQyxFQUFHLEtBQ0h5bUMsRUFBRyxJQUlYLFNBQVMycUIsR0FBa0J6MEMsRUFBUTV4QixFQUFRdThDLEVBQWVDLEVBQVVxSSxHQUNoRSxPQUFPQSxFQUFPNUosYUFBYWo3QyxHQUFVLElBQUt1OEMsRUFBZTNxQixFQUFRNHFCLEdBb0dyRSxJQUFJOHBCLEdBQVF6bUUsS0FBS3FGLElBRWpCLFNBQVNxMUQsR0FBSzk4RCxHQUNWLE9BQVFBLEVBQUksSUFBTUEsRUFBSSxLQUFPQSxFQUdqQyxTQUFTOG9FLEtBUUwsSUFBSzdxRSxLQUFLc3FELFVBQ04sT0FBT3RxRCxLQUFLdXRELGFBQWFuSSxjQUc3QixJQUdJN0csRUFDQUQsRUFDQXdmLEVBQ0FqckIsRUFFQWk0QixFQUNBQyxFQUNBQyxFQUNBQyxFQVhBaFYsRUFBVTJVLEdBQU01cUUsS0FBS3MrRCxlQUFpQixJQUN0Q25YLEVBQU95akIsR0FBTTVxRSxLQUFLdStELE9BQ2xCemdCLEVBQVM4c0IsR0FBTTVxRSxLQUFLdytELFNBS3BCeDJELEVBQVFoSSxLQUFLaXFFLFlBTWpCLE9BQUtqaUUsR0FPTHUyQyxFQUFVa1EsRUFBU3dILEVBQVUsSUFDN0IzWCxFQUFRbVEsRUFBU2xRLEVBQVUsSUFDM0IwWCxHQUFXLEdBQ1gxWCxHQUFXLEdBR1h1ZixFQUFRclAsRUFBUzNRLEVBQVMsSUFDMUJBLEdBQVUsR0FHVmpMLEVBQUlvakIsRUFBVUEsRUFBUWlWLFFBQVEsR0FBR3ZxRSxRQUFRLFNBQVUsSUFBTSxHQUV6RG1xRSxFQUFZOWlFLEVBQVEsRUFBSSxJQUFNLEdBQzlCK2lFLEVBQVNsTSxHQUFLNytELEtBQUt3K0QsV0FBYUssR0FBSzcyRCxHQUFTLElBQU0sR0FDcERnakUsRUFBV25NLEdBQUs3K0QsS0FBS3UrRCxTQUFXTSxHQUFLNzJELEdBQVMsSUFBTSxHQUNwRGlqRSxFQUFVcE0sR0FBSzcrRCxLQUFLcytELGlCQUFtQk8sR0FBSzcyRCxHQUFTLElBQU0sR0FHdkQ4aUUsRUFDQSxLQUNDaE4sRUFBUWlOLEVBQVNqTixFQUFRLElBQU0sS0FDL0JoZ0IsRUFBU2l0QixFQUFTanRCLEVBQVMsSUFBTSxLQUNqQ3FKLEVBQU82akIsRUFBVzdqQixFQUFPLElBQU0sS0FDL0I3SSxHQUFTQyxHQUFXMFgsRUFBVSxJQUFNLEtBQ3BDM1gsRUFBUTJzQixFQUFVM3NCLEVBQVEsSUFBTSxLQUNoQ0MsRUFBVTBzQixFQUFVMXNCLEVBQVUsSUFBTSxLQUNwQzBYLEVBQVVnVixFQUFVcDRCLEVBQUksSUFBTSxLQTlCeEIsTUFrQ2YsSUFBSXM0QixHQUFVdE4sR0FBU3I5RCxVQXdHdkIsT0F0R0EycUUsR0FBUTdnQixRQWw0RVIsV0FDSSxPQUFPdHFELEtBQUt1cUQsVUFrNEVoQjRnQixHQUFRM2hFLElBM1lSLFdBQ0ksSUFBSWlQLEVBQU96WSxLQUFLbTNCLE1BYWhCLE9BWEFuM0IsS0FBS3MrRCxjQUFnQmtMLEdBQVF4cEUsS0FBS3MrRCxlQUNsQ3QrRCxLQUFLdStELE1BQVFpTCxHQUFReHBFLEtBQUt1K0QsT0FDMUJ2K0QsS0FBS3crRCxRQUFVZ0wsR0FBUXhwRSxLQUFLdytELFNBRTVCL2xELEVBQUswbEQsYUFBZXFMLEdBQVEvd0QsRUFBSzBsRCxjQUNqQzFsRCxFQUFLdzlDLFFBQVV1VCxHQUFRL3dELEVBQUt3OUMsU0FDNUJ4OUMsRUFBSzhsQyxRQUFVaXJCLEdBQVEvd0QsRUFBSzhsQyxTQUM1QjlsQyxFQUFLNmxDLE1BQVFrckIsR0FBUS93RCxFQUFLNmxDLE9BQzFCN2xDLEVBQUtxbEMsT0FBUzByQixHQUFRL3dELEVBQUtxbEMsUUFDM0JybEMsRUFBS3FsRCxNQUFRMEwsR0FBUS93RCxFQUFLcWxELE9BRW5COTlELE1BOFhYbXJFLEdBQVFsN0MsSUFoWFIsU0FBZXpKLEVBQU85bEIsR0FDbEIsT0FBTytvRSxHQUFjenBFLEtBQU13bUIsRUFBTzlsQixFQUFPLElBZ1g3Q3lxRSxHQUFRN2lDLFNBNVdSLFNBQW9COWhCLEVBQU85bEIsR0FDdkIsT0FBTytvRSxHQUFjenBFLEtBQU13bUIsRUFBTzlsQixHQUFRLElBNFc5Q3lxRSxHQUFRcEIsR0EvUlIsU0FBWXZqQixHQUNSLElBQUt4bUQsS0FBS3NxRCxVQUNOLE9BQU9XLElBRVgsSUFBSTlELEVBQ0FySixFQUNBcWdCLEVBQWVuK0QsS0FBS3MrRCxjQUl4QixHQUFjLFdBRmQ5WCxFQUFReUgsRUFBZXpILEtBRVksWUFBVkEsR0FBaUMsU0FBVkEsRUFHNUMsT0FGQVcsRUFBT25uRCxLQUFLdStELE1BQVFKLEVBQWUsTUFDbkNyZ0IsRUFBUzk5QyxLQUFLdytELFFBQVVtTCxHQUFheGlCLEdBQzdCWCxHQUNKLElBQUssUUFDRCxPQUFPMUksRUFDWCxJQUFLLFVBQ0QsT0FBT0EsRUFBUyxFQUNwQixJQUFLLE9BQ0QsT0FBT0EsRUFBUyxRQUt4QixPQURBcUosRUFBT25uRCxLQUFLdStELE1BQVFwNkQsS0FBS21pQyxNQUFNc2pDLEdBQWE1cEUsS0FBS3crRCxVQUN6Q2hZLEdBQ0osSUFBSyxPQUNELE9BQU9XLEVBQU8sRUFBSWdYLEVBQWUsT0FDckMsSUFBSyxNQUNELE9BQU9oWCxFQUFPZ1gsRUFBZSxNQUNqQyxJQUFLLE9BQ0QsT0FBYyxHQUFQaFgsRUFBWWdYLEVBQWUsS0FDdEMsSUFBSyxTQUNELE9BQWMsS0FBUGhYLEVBQWNnWCxFQUFlLElBQ3hDLElBQUssU0FDRCxPQUFjLE1BQVBoWCxFQUFlZ1gsRUFBZSxJQUV6QyxJQUFLLGNBQ0QsT0FBT2g2RCxLQUFLc2pELE1BQWEsTUFBUE4sR0FBZ0JnWCxFQUN0QyxRQUNJLE1BQU0sSUFBSTV2RCxNQUFNLGdCQUFrQmk0QyxLQXlQbEQya0IsR0FBUW5CLGVBQWlCQSxHQUN6Qm1CLEdBQVFsQixVQUFZQSxHQUNwQmtCLEdBQVFqQixVQUFZQSxHQUNwQmlCLEdBQVFoQixRQUFVQSxHQUNsQmdCLEdBQVFmLE9BQVNBLEdBQ2pCZSxHQUFRZCxRQUFVQSxHQUNsQmMsR0FBUWIsU0FBV0EsR0FDbkJhLEdBQVFaLFdBQWFBLEdBQ3JCWSxHQUFRWCxRQUFVQSxHQUNsQlcsR0FBUWxpQixRQTVQUixXQUNJLE9BQUtqcEQsS0FBS3NxRCxVQUlOdHFELEtBQUtzK0QsY0FDUSxNQUFidCtELEtBQUt1K0QsTUFDSnYrRCxLQUFLdytELFFBQVUsR0FBTSxPQUNLLFFBQTNCOVAsRUFBTTF1RCxLQUFLdytELFFBQVUsSUFOZHZULEtBMlBma2dCLEdBQVExTSxRQTVXUixXQUNJLElBSUl4SSxFQUNBMVgsRUFDQUQsRUFDQXdmLEVBQ0FzTixFQVJBak4sRUFBZW4rRCxLQUFLcytELGNBQ3BCblgsRUFBT25uRCxLQUFLdStELE1BQ1p6Z0IsRUFBUzk5QyxLQUFLdytELFFBQ2QvbEQsRUFBT3pZLEtBQUttM0IsTUFnRGhCLE9BckNTZ25DLEdBQWdCLEdBQUtoWCxHQUFRLEdBQUtySixHQUFVLEdBQzVDcWdCLEdBQWdCLEdBQUtoWCxHQUFRLEdBQUtySixHQUFVLElBR2pEcWdCLEdBQXVELE1BQXZDdUwsR0FBUUUsR0FBYTlyQixHQUFVcUosR0FDL0NBLEVBQU8sRUFDUHJKLEVBQVMsR0FLYnJsQyxFQUFLMGxELGFBQWVBLEVBQWUsSUFFbkNsSSxFQUFVeEgsRUFBUzBQLEVBQWUsS0FDbEMxbEQsRUFBS3c5QyxRQUFVQSxFQUFVLEdBRXpCMVgsRUFBVWtRLEVBQVN3SCxFQUFVLElBQzdCeDlDLEVBQUs4bEMsUUFBVUEsRUFBVSxHQUV6QkQsRUFBUW1RLEVBQVNsUSxFQUFVLElBQzNCOWxDLEVBQUs2bEMsTUFBUUEsRUFBUSxHQUVyQjZJLEdBQVFzSCxFQUFTblEsRUFBUSxJQUl6QlIsR0FEQXN0QixFQUFpQjNjLEVBQVNrYixHQUFheGlCLElBRXZDQSxHQUFRdWlCLEdBQVFFLEdBQWF3QixJQUc3QnROLEVBQVFyUCxFQUFTM1EsRUFBUyxJQUMxQkEsR0FBVSxHQUVWcmxDLEVBQUswdUMsS0FBT0EsRUFDWjF1QyxFQUFLcWxDLE9BQVNBLEVBQ2RybEMsRUFBS3FsRCxNQUFRQSxFQUVOOTlELE1BeVRYbXJFLEdBQVExdEQsTUFsT1IsV0FDSSxPQUFPZ2lELEdBQWV6L0QsT0FrTzFCbXJFLEdBQVFudkQsSUEvTlIsU0FBZXdxQyxHQUVYLE9BREFBLEVBQVF5SCxFQUFlekgsR0FDaEJ4bUQsS0FBS3NxRCxVQUFZdHFELEtBQUt3bUQsRUFBUSxPQUFTeUUsS0E4TmxEa2dCLEdBQVFoTixhQUFlQSxHQUN2QmdOLEdBQVFsVixRQUFVQSxHQUNsQmtWLEdBQVE1c0IsUUFBVUEsR0FDbEI0c0IsR0FBUTdzQixNQUFRQSxHQUNoQjZzQixHQUFRaGtCLEtBQU9BLEdBQ2Zna0IsR0FBUWxOLE1BbE5SLFdBQ0ksT0FBT3hQLEVBQVN6dUQsS0FBS21uRCxPQUFTLElBa05sQ2drQixHQUFRcnRCLE9BQVNBLEdBQ2pCcXRCLEdBQVFyTixNQUFRQSxHQUNoQnFOLEdBQVE5RyxTQWxJUixTQUFrQmdILEVBQWVDLEdBQzdCLElBQUt0ckUsS0FBS3NxRCxVQUNOLE9BQU90cUQsS0FBS3V0RCxhQUFhbkksY0FHN0IsSUFFSStELEVBQ0E1RSxFQUhBZ25CLEdBQWEsRUFDYnZ3QyxFQUFLMHZDLEdBeUJULE1BckI2QixpQkFBbEJXLElBQ1BDLEVBQWdCRCxFQUNoQkEsR0FBZ0IsR0FFUyxrQkFBbEJBLElBQ1BFLEVBQWFGLEdBRVksaUJBQWxCQyxJQUNQdHdDLEVBQUtwakIsT0FBT25MLE9BQU8sR0FBSWkrRCxHQUFZWSxHQUNaLE1BQW5CQSxFQUFjejRCLEdBQWlDLE1BQXBCeTRCLEVBQWM1ckIsS0FDekMxa0IsRUFBRzBrQixHQUFLNHJCLEVBQWN6NEIsRUFBSSxJQUtsQzBSLEVBeEZKLFNBQXdCaW5CLEVBQWdCM3FCLEVBQWU2cEIsRUFBWXZoQixHQUMvRCxJQUFJemUsRUFBVyswQixHQUFlK0wsR0FBZ0JoaUUsTUFDMUN5c0QsRUFBVTN2QixHQUFNb0UsRUFBU3EvQixHQUFHLE1BQzVCeHJCLEVBQVVqWSxHQUFNb0UsRUFBU3EvQixHQUFHLE1BQzVCenJCLEVBQVFoWSxHQUFNb0UsRUFBU3EvQixHQUFHLE1BQzFCNWlCLEVBQU83Z0IsR0FBTW9FLEVBQVNxL0IsR0FBRyxNQUN6QmpzQixFQUFTeFgsR0FBTW9FLEVBQVNxL0IsR0FBRyxNQUMzQjlMLEVBQVEzM0IsR0FBTW9FLEVBQVNxL0IsR0FBRyxNQUMxQmpNLEVBQVF4M0IsR0FBTW9FLEVBQVNxL0IsR0FBRyxNQUMxQjFwRCxFQUNLNDFDLEdBQVd5VSxFQUFXaHJCLElBQU0sQ0FBQyxJQUFLdVcsSUFDbENBLEVBQVV5VSxFQUFXNzNCLEdBQUssQ0FBQyxLQUFNb2pCLElBQ2pDMVgsR0FBVyxHQUFLLENBQUMsTUFDakJBLEVBQVVtc0IsRUFBVzFuRCxHQUFLLENBQUMsS0FBTXU3QixJQUNqQ0QsR0FBUyxHQUFLLENBQUMsTUFDZkEsRUFBUW9zQixFQUFXOXFCLEdBQUssQ0FBQyxLQUFNdEIsSUFDL0I2SSxHQUFRLEdBQUssQ0FBQyxNQUNkQSxFQUFPdWpCLEVBQVc1cUIsR0FBSyxDQUFDLEtBQU1xSCxHQWdCdkMsT0Fkb0IsTUFBaEJ1akIsRUFBV254RCxJQUNYOEcsRUFDSUEsR0FDQzQ5QyxHQUFTLEdBQUssQ0FBQyxNQUNmQSxFQUFReU0sRUFBV254RCxHQUFLLENBQUMsS0FBTTBrRCxLQUV4QzU5QyxFQUFJQSxHQUNDeTlCLEdBQVUsR0FBSyxDQUFDLE1BQ2hCQSxFQUFTNHNCLEVBQVcxcUIsR0FBSyxDQUFDLEtBQU1sQyxJQUNoQ2dnQixHQUFTLEdBQUssQ0FBQyxNQUFTLENBQUMsS0FBTUEsSUFFbEMsR0FBS2pkLEVBQ1B4Z0MsRUFBRSxJQUFNbXJELEVBQWlCLEVBQ3pCbnJELEVBQUUsR0FBSzhvQyxFQUNBd2hCLEdBQWtCOXdELE1BQU0sS0FBTXdHLEdBdUQ1Qm9yRCxDQUFlenJFLE1BQU91ckUsRUFBWXZ3QyxFQUQzQ211QixFQUFTbnBELEtBQUt1dEQsY0FHVmdlLElBQ0FobkIsRUFBUzRFLEVBQU95ZixZQUFZNW9FLEtBQU11a0QsSUFHL0I0RSxFQUFPbEksV0FBV3NELElBb0c3QjRtQixHQUFRM0YsWUFBY3FGLEdBQ3RCTSxHQUFROXBFLFNBQVd3cEUsR0FDbkJNLEdBQVF2RixPQUFTaUYsR0FDakJNLEdBQVFoaUIsT0FBU0EsR0FDakJnaUIsR0FBUTVkLFdBQWFBLEdBRXJCNGQsR0FBUU8sWUFBY3hmLEVBQ2xCLHNGQUNBMmUsSUFFSk0sR0FBUWhoRCxLQUFPQSxHQUlma2pDLEVBQWUsSUFBSyxFQUFHLEVBQUcsUUFDMUJBLEVBQWUsSUFBSyxFQUFHLEVBQUcsV0FJMUI2QyxHQUFjLElBQUtKLElBQ25CSSxHQUFjLElBaHVKTyx3QkFpdUpyQlUsR0FBYyxLQUFLLFNBQVVwcUMsRUFBTzVNLEVBQU9reUMsR0FDdkNBLEVBQU8xMEMsR0FBSyxJQUFJd0ksS0FBeUIsSUFBcEIybUIsV0FBVy9mLE9BRXBDb3FDLEdBQWMsS0FBSyxTQUFVcHFDLEVBQU81TSxFQUFPa3lDLEdBQ3ZDQSxFQUFPMTBDLEdBQUssSUFBSXdJLEtBQUs4dUMsRUFBTWxvQyxPQUsvQitRLEVBQU0vYixRQUFVLFNBaitLWjhzQyxFQW0rS1ltVCxHQUVoQmxrQyxFQUFNM2IsR0FBS3FDLEdBQ1hzWixFQUFNbnpCLElBMS9FTixXQUdJLE9BQU9zNUQsR0FBTyxXQUZILEdBQUd4OEQsTUFBTXdRLEtBQUtnTCxVQUFXLEtBMC9FeEM2YSxFQUFNZ1IsSUFyL0VOLFdBR0ksT0FBT20xQixHQUFPLFVBRkgsR0FBR3g4RCxNQUFNd1EsS0FBS2dMLFVBQVcsS0FxL0V4QzZhLEVBQU13SSxJQWgvRUksV0FDTixPQUFPbmdCLEtBQUttZ0IsSUFBTW5nQixLQUFLbWdCLE9BQVMsSUFBSW5nQixNQWcvRXhDMlgsRUFBTSt4QixJQUFNSixFQUNaM3hCLEVBQU1zdUMsS0Exb0JOLFNBQW9Cci9DLEdBQ2hCLE9BQU9pMUMsR0FBb0IsSUFBUmoxQyxJQTBvQnZCK1EsRUFBTXVtQixPQWxoQk4sU0FBb0JsOUMsRUFBUStCLEdBQ3hCLE9BQU9zbEUsR0FBZXJuRSxFQUFRK0IsRUFBTyxXQWtoQnpDNDBCLEVBQU13eEIsT0FBU0EsRUFDZnh4QixFQUFNNHhCLE9BQVNnTyxHQUNmNS9CLEVBQU02b0MsUUFBVXBWLEVBQ2hCenpCLEVBQU1tVCxTQUFXKzBCLEdBQ2pCbG9DLEVBQU15MEIsU0FBV0EsRUFDakJ6MEIsRUFBTXltQixTQWhoQk4sU0FBc0JvcUIsRUFBY3huRSxFQUFRK0IsR0FDeEMsT0FBT3dsRSxHQUFpQkMsRUFBY3huRSxFQUFRK0IsRUFBTyxhQWdoQnpENDBCLEVBQU11dkMsVUE5b0JOLFdBQ0ksT0FBT3JMLEdBQVk1aEQsTUFBTSxLQUFNNkMsV0FBV29xRCxhQThvQjlDdnZDLEVBQU1nMkIsV0FBYTZKLEdBQ25CNy9CLEVBQU1tbkMsV0FBYUEsR0FDbkJubkMsRUFBTXdtQixZQXhoQk4sU0FBeUJuOUMsRUFBUStCLEdBQzdCLE9BQU9zbEUsR0FBZXJuRSxFQUFRK0IsRUFBTyxnQkF3aEJ6QzQwQixFQUFNMm1CLFlBN2dCTixTQUF5QmtxQixFQUFjeG5FLEVBQVErQixHQUMzQyxPQUFPd2xFLEdBQWlCQyxFQUFjeG5FLEVBQVErQixFQUFPLGdCQTZnQnpENDBCLEVBQU1zbUIsYUFBZUEsR0FDckJ0bUIsRUFBTW8wQyxhQXI0R04sU0FBc0I3NUQsRUFBTWc2QyxHQUN4QixHQUFjLE1BQVZBLEVBQWdCLENBQ2hCLElBQUkzQyxFQUNBeWlCLEVBQ0FwZixFQUFlaUssR0FFRSxNQUFqQkMsR0FBUTVrRCxJQUErQyxNQUE5QjRrRCxHQUFRNWtELEdBQU13bEQsYUFFdkNaLEdBQVE1a0QsR0FBTTBrQixJQUFJKzFCLEVBQWFtSyxHQUFRNWtELEdBQU11bEQsUUFBU3ZMLEtBSXJDLE9BRGpCOGYsRUFBWTVVLEdBQVdsbEQsTUFFbkIwNkMsRUFBZW9mLEVBQVV2VSxTQUU3QnZMLEVBQVNTLEVBQWFDLEVBQWNWLEdBQ25CLE1BQWI4ZixJQUlBOWYsRUFBT2hHLEtBQU9oMEMsSUFFbEJxM0MsRUFBUyxJQUFJdUQsRUFBT1osSUFDYndMLGFBQWVaLEdBQVE1a0QsR0FDOUI0a0QsR0FBUTVrRCxHQUFRcTNDLEdBSXBCZ08sR0FBbUJybEQsUUFHRSxNQUFqQjRrRCxHQUFRNWtELEtBQzBCLE1BQTlCNGtELEdBQVE1a0QsR0FBTXdsRCxjQUNkWixHQUFRNWtELEdBQVE0a0QsR0FBUTVrRCxHQUFNd2xELGFBQzFCeGxELElBQVNxbEQsTUFDVEEsR0FBbUJybEQsSUFFQyxNQUFqQjRrRCxHQUFRNWtELFdBQ1I0a0QsR0FBUTVrRCxJQUkzQixPQUFPNGtELEdBQVE1a0QsSUE0MUduQnlsQixFQUFNbS9CLFFBajBHTixXQUNJLE9BQU96eUMsRUFBS3l5QyxLQWkwR2hCbi9CLEVBQU0wbUIsY0FyaEJOLFNBQTJCbXFCLEVBQWN4bkUsRUFBUStCLEdBQzdDLE9BQU93bEUsR0FBaUJDLEVBQWN4bkUsRUFBUStCLEVBQU8sa0JBcWhCekQ0MEIsRUFBTTAyQixlQUFpQkEsRUFDdkIxMkIsRUFBTXMwQyxxQkF0Tk4sU0FBb0NDLEdBQ2hDLFlBQXlCaitELElBQXJCaStELEVBQ094bEMsR0FFcUIsbUJBQXJCd2xDLElBQ1B4bEMsR0FBUXdsQyxHQUNELElBaU5mdjBDLEVBQU13MEMsc0JBM01OLFNBQXFDQyxFQUFXQyxHQUM1QyxZQUE4QnArRCxJQUExQjY4RCxHQUFXc0IsVUFHRG4rRCxJQUFWbytELEVBQ092QixHQUFXc0IsSUFFdEJ0QixHQUFXc0IsR0FBYUMsRUFDTixNQUFkRCxJQUNBdEIsR0FBV2hyQixHQUFLdXNCLEVBQVEsSUFFckIsS0FpTVgxMEMsRUFBTXVzQyxlQXg1RE4sU0FBMkJvSSxFQUFVbnNDLEdBQ2pDLElBQUlsYixFQUFPcW5ELEVBQVNybkQsS0FBS2tiLEVBQUssUUFBUSxHQUN0QyxPQUFPbGIsR0FBUSxFQUNULFdBQ0FBLEdBQVEsRUFDUixXQUNBQSxFQUFPLEVBQ1AsVUFDQUEsRUFBTyxFQUNQLFVBQ0FBLEVBQU8sRUFDUCxVQUNBQSxFQUFPLEVBQ1AsV0FDQSxZQTI0RFYwUyxFQUFNLzJCLFVBQVl5ZCxHQUdsQnNaLEVBQU00MEMsVUFBWSxDQUNkQyxlQUFnQixtQkFDaEJDLHVCQUF3QixzQkFDeEJDLGtCQUFtQiwwQkFDbkJDLEtBQU0sYUFDTkMsS0FBTSxRQUNOQyxhQUFjLFdBQ2RDLFFBQVMsZUFDVEMsS0FBTSxhQUNOQyxNQUFPLFdBR0pyMUMsRUE1aEx5RWplLEksNENDTG5FekwsSUFZZjdOLFdBWnVDNk4sSUFBWDVPLFFBQTZCQSxPQUVuRCxFQUFPLENBQUMsUUFBUyxhQUVoQixLQUYyQixFQUFGLFNBQVk2YyxFQUFROGhDLEdBQzFDLE9BU0osU0FBVTloQyxFQUFROGhDLEdBVTFCLElBQUlpdkIsRUFBV0MsRUFBU0MsRUFzM0J4QixTQUFTQyxFQUFRM3lELEdBQXdULE9BQXRPMnlELEVBQXJELG1CQUFYbDJELFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FBbUMsU0FBaUJzRCxHQUFPLGNBQWNBLEdBQTJCLFNBQWlCQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYdkQsUUFBeUJ1RCxFQUFJeEMsY0FBZ0JmLFFBQVV1RCxJQUFRdkQsT0FBT3RXLFVBQVksZ0JBQWtCNlosSUFBeUJBLEdBZzZCeFYsU0FBUzJ5RCxFQUFRM3lELEdBQXdULE9BQXRPMnlELEVBQXJELG1CQUFYbDJELFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FBbUMsU0FBaUJzRCxHQUFPLGNBQWNBLEdBQTJCLFNBQWlCQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYdkQsUUFBeUJ1RCxFQUFJeEMsY0FBZ0JmLFFBQVV1RCxJQUFRdkQsT0FBT3RXLFVBQVksZ0JBQWtCNlosSUFBeUJBLElBcnhEdlYsU0FBVTR5RCxHQUNQLElBQUlDLEVBQU0va0IsRUFBS2dsQixFQUFTL3ZDLEVBQ3BCZ3dDLEVBQVUsR0FDVkMsRUFBVSxHQUNWdmhCLEVBQVMsR0FDVHdoQixFQUFXLEdBQ1h2ekQsRUFBU25DLE9BQU9wWCxVQUFVd1osZUFDMUJ1ekQsRUFBTSxHQUFHcnNFLE1BQ1Rzc0UsRUFBaUIsUUFFckIsU0FBU0MsRUFBUXB6RCxFQUFLb2MsR0FDbEIsT0FBTzFjLEVBQU9ySSxLQUFLMkksRUFBS29jLEdBVzVCLFNBQVNpM0MsRUFBVTU3RCxFQUFNNjdELEdBQ3JCLElBQUlDLEVBQVdDLEVBQWFDLEVBQVVDLEVBQVVuZ0IsRUFDNUNvZ0IsRUFBUUMsRUFBY0MsRUFBTzFuRSxFQUFHMFcsRUFBR2l4RCxFQUNuQ0MsRUFBWVQsR0FBWUEsRUFBU3ZzRSxNQUFNLEtBQ3ZDVSxFQUFNZ3FELEVBQU9ocUQsSUFDYnVzRSxFQUFXdnNFLEdBQU9BLEVBQUksTUFBUyxHQUduQyxHQUFJZ1EsRUFBTSxDQXdCTixJQXRCQTg3QyxHQURBOTdDLEVBQU9BLEVBQUsxUSxNQUFNLE1BQ0RhLE9BQVMsRUFNdEI2cEQsRUFBT3dpQixjQUFnQmQsRUFBZTVtRSxLQUFLa0wsRUFBSzg3QyxNQUNoRDk3QyxFQUFLODdDLEdBQWE5N0MsRUFBSzg3QyxHQUFXanRELFFBQVE2c0UsRUFBZ0IsS0FJcEMsTUFBdEIxN0QsRUFBSyxHQUFHbkwsT0FBTyxJQUFjeW5FLElBTzdCdDhELEVBRHNCczhELEVBQVVsdEUsTUFBTSxFQUFHa3RFLEVBQVVuc0UsT0FBUyxHQUNqQ2lHLE9BQU80SixJQUlqQ3RMLEVBQUksRUFBR0EsRUFBSXNMLEVBQUs3UCxPQUFRdUUsSUFFekIsR0FBYSxPQURiMm5FLEVBQU9yOEQsRUFBS3RMLElBRVJzTCxFQUFLdUwsT0FBTzdXLEVBQUcsR0FDZkEsR0FBSyxPQUNGLEdBQWEsT0FBVDJuRSxFQUFlLENBTXRCLEdBQVUsSUFBTjNuRSxHQUFrQixJQUFOQSxHQUF1QixPQUFac0wsRUFBSyxJQUFnQyxPQUFoQkEsRUFBS3RMLEVBQUksR0FDckQsU0FDT0EsRUFBSSxJQUNYc0wsRUFBS3VMLE9BQU83VyxFQUFJLEVBQUcsR0FDbkJBLEdBQUssR0FNakJzTCxFQUFPQSxFQUFLbUUsS0FBSyxLQUlyQixJQUFLbTRELEdBQWFDLElBQVl2c0UsRUFBSyxDQUcvQixJQUFLMEUsR0FGTG9uRSxFQUFZOTdELEVBQUsxUSxNQUFNLE1BRUphLE9BQVF1RSxFQUFJLEVBQUdBLEdBQUssRUFBRyxDQUd0QyxHQUZBcW5FLEVBQWNELEVBQVUxc0UsTUFBTSxFQUFHc0YsR0FBR3lQLEtBQUssS0FFckNtNEQsRUFHQSxJQUFLbHhELEVBQUlreEQsRUFBVW5zRSxPQUFRaWIsRUFBSSxFQUFHQSxHQUFLLEVBS25DLElBSkE0d0QsRUFBV2hzRSxFQUFJc3NFLEVBQVVsdEUsTUFBTSxFQUFHZ2MsR0FBR2pILEtBQUssU0FLdEM2M0QsRUFBV0EsRUFBU0QsSUFDTixDQUVWRSxFQUFXRCxFQUNYRSxFQUFTeG5FLEVBQ1QsTUFNaEIsR0FBSXVuRSxFQUNBLE9BTUNFLEdBQWdCSSxHQUFXQSxFQUFRUixLQUNwQ0ksRUFBZUksRUFBUVIsR0FDdkJLLEVBQVExbkUsSUFJWHVuRSxHQUFZRSxJQUNiRixFQUFXRSxFQUNYRCxFQUFTRSxHQUdUSCxJQUNBSCxFQUFVdndELE9BQU8sRUFBRzJ3RCxFQUFRRCxHQUM1Qmo4RCxFQUFPODdELEVBQVUzM0QsS0FBSyxNQUk5QixPQUFPbkUsRUFHWCxTQUFTeThELEVBQVlDLEVBQVNDLEdBQzFCLE9BQU8sV0FJSCxJQUFJNWtELEVBQU8wakQsRUFBSTc3RCxLQUFLZ0wsVUFBVyxHQVEvQixNQUh1QixpQkFBWm1OLEVBQUssSUFBbUMsSUFBaEJBLEVBQUs1bkIsUUFDcEM0bkIsRUFBS3huQixLQUFLLE1BRVA4bEQsRUFBSXR1QyxNQUFNb3pELEVBQU9wakQsRUFBSzNoQixPQUFPLENBQUNzbUUsRUFBU0MsTUFVdEQsU0FBU0MsRUFBU0MsR0FDZCxPQUFPLFNBQVVqdUUsR0FDYjBzRSxFQUFRdUIsR0FBV2p1RSxHQUkzQixTQUFTa3VFLEVBQVE5OEQsR0FDYixHQUFJMjdELEVBQVFKLEVBQVN2N0QsR0FBTyxDQUN4QixJQUFJK1gsRUFBT3dqRCxFQUFRdjdELFVBQ1p1N0QsRUFBUXY3RCxHQUNmdzdELEVBQVN4N0QsSUFBUSxFQUNqQm83RCxFQUFLcnpELE1BQU1vekQsRUFBT3BqRCxHQUd0QixJQUFLNGpELEVBQVFMLEVBQVN0N0QsS0FBVTI3RCxFQUFRSCxFQUFVeDdELEdBQzlDLE1BQU0sSUFBSXZELE1BQU0sTUFBUXVELEdBRTVCLE9BQU9zN0QsRUFBUXQ3RCxHQU1uQixTQUFTKzhELEVBQVkvOEQsR0FDakIsSUFBSW5TLEVBQ0FnRCxFQUFRbVAsRUFBT0EsRUFBSzNRLFFBQVEsTUFBUSxFQUt4QyxPQUpJd0IsR0FBUyxJQUNUaEQsRUFBU21TLEVBQUt1eEMsVUFBVSxFQUFHMWdELEdBQzNCbVAsRUFBT0EsRUFBS3V4QyxVQUFVMWdELEVBQVEsRUFBR21QLEVBQUs3UCxTQUVuQyxDQUFDdEMsRUFBUW1TLEdBS3BCLFNBQVNnOUQsRUFBYU4sR0FDbEIsT0FBT0EsRUFBVUssRUFBWUwsR0FBVyxHQStDNUMsU0FBU08sRUFBV2o5RCxHQUNoQixPQUFPLFdBQ0gsT0FBUWc2QyxHQUFVQSxFQUFPQSxRQUFVQSxFQUFPQSxPQUFPaDZDLElBQVUsSUF6Q25FcTdELEVBQVUsU0FBVXI3RCxFQUFNazlELEdBQ3RCLElBQUlDLEVBbkRlVCxFQW9EZjN0RSxFQUFRZ3VFLEVBQVkvOEQsR0FDcEJuUyxFQUFTa0IsRUFBTSxHQUNmcXVFLEVBQWtCRixFQUFTLEdBMkIvQixPQXpCQWw5RCxFQUFPalIsRUFBTSxHQUVUbEIsSUFFQXN2RSxFQUFTTCxFQURUanZFLEVBQVMrdEUsRUFBVS90RSxFQUFRdXZFLEtBSzNCdnZFLEVBRUltUyxFQURBbTlELEdBQVVBLEVBQU92QixVQUNWdUIsRUFBT3ZCLFVBQVU1N0QsR0FsRWIwOEQsRUFrRWlDVSxFQWpFN0MsU0FBVXA5RCxHQUNiLE9BQU80N0QsRUFBVTU3RCxFQUFNMDhELE1Ba0VaZCxFQUFVNTdELEVBQU1vOUQsSUFLM0J2dkUsR0FEQWtCLEVBQVFndUUsRUFEUi84RCxFQUFPNDdELEVBQVU1N0QsRUFBTW85RCxLQUVSLEdBQ2ZwOUQsRUFBT2pSLEVBQU0sR0FDVGxCLElBQ0FzdkUsRUFBU0wsRUFBUWp2RSxLQUtsQixDQUNIb2hELEVBQUdwaEQsRUFBU0EsRUFBUyxJQUFNbVMsRUFBT0EsRUFDbEM2RixFQUFHN0YsRUFDSHE5RCxHQUFJeHZFLEVBQ0pzckMsRUFBR2drQyxJQVVYN3hDLEVBQVcsQ0FDUDB2QyxRQUFTLFNBQVVoN0QsR0FDZixPQUFPeThELEVBQVl6OEQsSUFFdkI4RCxRQUFTLFNBQVU5RCxHQUNmLElBQUlsRyxFQUFJd2hFLEVBQVF0N0QsR0FDaEIsWUFBaUIsSUFBTmxHLEVBQ0FBLEVBRUN3aEUsRUFBUXQ3RCxHQUFRLElBR2hDUyxPQUFRLFNBQVVULEdBQ2QsTUFBTyxDQUNIekIsR0FBSXlCLEVBQ0pzOUQsSUFBSyxHQUNMeDVELFFBQVN3M0QsRUFBUXQ3RCxHQUNqQmc2QyxPQUFRaWpCLEVBQVdqOUQsTUFLL0JvN0QsRUFBTyxTQUFVcDdELEVBQU11OUQsRUFBTTd5RCxFQUFVZ3lELEdBQ25DLElBQUljLEVBQVdYLEVBQVN2eUQsRUFBS3RhLEVBQUswRSxFQUFHd29FLEVBR2pDTyxFQUZBMWxELEVBQU8sR0FDUDJsRCxTQUFzQmh6RCxFQVExQixHQUhBd3lELEVBQVdGLEVBRFhOLEVBQVVBLEdBQVcxOEQsR0FJQSxjQUFqQjA5RCxHQUFpRCxhQUFqQkEsRUFBNkIsQ0FLN0QsSUFEQUgsR0FBUUEsRUFBS3B0RSxRQUFVdWEsRUFBU3ZhLE9BQVMsQ0FBQyxVQUFXLFVBQVcsVUFBWW90RSxFQUN2RTdvRSxFQUFJLEVBQUdBLEVBQUk2b0UsRUFBS3B0RSxPQUFRdUUsR0FBSyxFQUs5QixHQUFnQixhQUhoQm1vRSxHQURBN3NFLEVBQU1xckUsRUFBUWtDLEVBQUs3b0UsR0FBSXdvRSxJQUNUanVCLEdBSVZsM0IsRUFBS3JqQixHQUFLNDJCLEVBQVMwdkMsUUFBUWg3RCxRQUN4QixHQUFnQixZQUFaNjhELEVBRVA5a0QsRUFBS3JqQixHQUFLNDJCLEVBQVN4bkIsUUFBUTlELEdBQzNCeTlELEdBQWUsT0FDWixHQUFnQixXQUFaWixFQUVQVyxFQUFZemxELEVBQUtyakIsR0FBSzQyQixFQUFTN3FCLE9BQU9ULFFBQ25DLEdBQUkyN0QsRUFBUUwsRUFBU3VCLElBQ2pCbEIsRUFBUUosRUFBU3NCLElBQ2pCbEIsRUFBUUgsRUFBVXFCLEdBQ3pCOWtELEVBQUtyakIsR0FBS29vRSxFQUFRRCxPQUNmLEtBQUk3c0UsRUFBSW1wQyxFQUlYLE1BQU0sSUFBSTE4QixNQUFNdUQsRUFBTyxZQUFjNjhELEdBSHJDN3NFLEVBQUltcEMsRUFBRTVMLEtBQUt2OUIsRUFBSTZWLEVBQUc0MkQsRUFBWUMsR0FBUyxHQUFPRSxFQUFTQyxHQUFVLElBQ2pFOWtELEVBQUtyakIsR0FBSzRtRSxFQUFRdUIsR0FNMUJ2eUQsRUFBTUksRUFBV0EsRUFBUzNDLE1BQU11ekQsRUFBUXQ3RCxHQUFPK1gsUUFBUWhjLEVBRW5EaUUsSUFJSXc5RCxHQUFhQSxFQUFVMTVELFVBQVlxM0QsR0FDL0JxQyxFQUFVMTVELFVBQVl3M0QsRUFBUXQ3RCxHQUNsQ3M3RCxFQUFRdDdELEdBQVF3OUQsRUFBVTE1RCxRQUNuQndHLElBQVE2d0QsR0FBVXNDLElBRXpCbkMsRUFBUXQ3RCxHQUFRc0ssU0FHakJ0SyxJQUdQczdELEVBQVF0N0QsR0FBUTBLLElBSXhCcXdELEVBQVlDLEVBQVUza0IsRUFBTSxTQUFVa25CLEVBQU03eUQsRUFBVWd5RCxFQUFTQyxFQUFXZ0IsR0FDdEUsR0FBb0IsaUJBQVRKLEVBQ1AsT0FBSWp5QyxFQUFTaXlDLEdBRUZqeUMsRUFBU2l5QyxHQUFNN3lELEdBTW5Cb3lELEVBQVF6QixFQUFRa0MsRUFBTVAsRUFBYXR5RCxJQUFXdWtDLEdBQ2xELElBQUtzdUIsRUFBS2h5RCxPQUFRLENBTXJCLElBSkF5dUMsRUFBU3VqQixHQUNFQSxNQUNQbG5CLEVBQUkyRCxFQUFPdWpCLEtBQU12akIsRUFBT3R2QyxXQUV2QkEsRUFDRCxPQUdBQSxFQUFTYSxRQUdUZ3lELEVBQU83eUQsRUFDUEEsRUFBV2d5RCxFQUNYQSxFQUFVLE1BRVZhLEVBQU9wQyxFQTZCZixPQXhCQXp3RCxFQUFXQSxHQUFZLGFBSUEsbUJBQVpneUQsSUFDUEEsRUFBVUMsRUFDVkEsRUFBWWdCLEdBSVpoQixFQUNBdkIsRUFBS0QsRUFBT29DLEVBQU03eUQsRUFBVWd5RCxHQVE1QjFqRSxZQUFXLFdBQ1BvaUUsRUFBS0QsRUFBT29DLEVBQU03eUQsRUFBVWd5RCxLQUM3QixHQUdBcm1CLEdBT1hBLEVBQUkyRCxPQUFTLFNBQVU0akIsR0FDbkIsT0FBT3ZuQixFQUFJdW5CLElBTWY3QyxFQUFVOEMsU0FBV3ZDLEdBRXJCTCxFQUFTLFNBQVVqN0QsRUFBTXU5RCxFQUFNN3lELEdBQzNCLEdBQW9CLGlCQUFUMUssRUFDUCxNQUFNLElBQUl2RCxNQUFNLDZEQUlmOGdFLEVBQUtoeUQsU0FJTmIsRUFBVzZ5RCxFQUNYQSxFQUFPLElBR041QixFQUFRTCxFQUFTdDdELElBQVUyN0QsRUFBUUosRUFBU3Y3RCxLQUM3Q3U3RCxFQUFRdjdELEdBQVEsQ0FBQ0EsRUFBTXU5RCxFQUFNN3lELE1BSTlCb3pELElBQU0sQ0FDVG4wRCxRQUFRLElBdGFoQixHQTBhQXN4RCxFQUFPLFVBQVUsZUFJakJBLEVBQU8sbUJBQW1CLElBQUksV0FVNUIsTUFUYSxDQUNYajdELEtBQU0sa0JBQ04wSixRQUFTLFNBQ1RxMEQsV0FBWSxDQUNWQyxTQUFVLENBQ1JDLE9BQVEsQ0FBQyxRQUFTLE9BQVEsY0FVbENoRCxFQUFPLG1CQUFtQixDQUFDLGFBQWEsU0FBVWlELEdBQ2hELElBQUlDLEVBQWdCLEdBQ2hCQyxFQUFlLEdBQ2ZDLEVBQWtCLEdBQ2xCQyxFQUFnQixRQUVoQkMsRUFBUyxhQW9FYixPQWxFQUEsRUFBT3p2RSxPQUFTLFNBQVVBLEdBQ3hCLEdBQUtBLEVBRUUsQ0FDTCxJQUFJaXBCLEVBQU9uVCxNQUFNbFcsVUFBVVUsTUFBTXdRLEtBQUtnTCxVQUFXLEdBQzdDclUsRUFBTXpILEVBQVNpcEIsRUFBSzVULEtBQUssS0FFN0IsR0FBSWc2RCxFQUFjNW5FLEdBQ2hCLE9BQU80bkUsRUFBYzVuRSxHQUlyQixJQUZBLElBQUl3QyxFQUFNZ2YsRUFBSzVuQixPQUVOOG5CLEVBQU0sRUFBR0EsRUFBTWxmLEVBQUtrZixJQUFPLENBQ2xDLElBQUlycEIsRUFBUW1wQixFQUFLRSxHQUNqQm5wQixFQUFTQSxFQUFPRCxRQUFRLElBQUlQLE9BQU8sZ0JBQWtCMnBCLEVBQU0sZ0JBQWlCLEtBQU1ycEIsR0FPdEYsT0FKRUUsRUFBU0EsRUFBT0QsUUFBUSxJQUFJUCxPQUFPLHFCQUFzQixLQUFNLFFBR2pFNnZFLEVBQWM1bkUsR0FBT3pILEVBQ2RBLEVBbkJQLE1BQU8sSUF1Qlh5dkUsRUFBT25nQyxTQUFXLFNBQVVwK0IsR0FDMUIsSUFBSXpKLEVBQU0sQ0FBQzJuRSxFQUFPbCtELEtBQU1BLEdBQU1tRSxLQUFLLEtBRW5DLEdBQUlpNkQsRUFBYTduRSxHQUNmLE9BQU82bkUsRUFBYTduRSxHQU1wQixJQUpBLElBQUlpb0UsRUFBUXgrRCxFQUFLMVEsTUFBTSxJQUNuQjR2QyxFQUFhLEdBQ2JubUMsRUFBTXlsRSxFQUFNcnVFLE9BRVA4bkIsRUFBTSxFQUFHNGdCLEVBQU0sRUFBRzVnQixFQUFNbGYsRUFBS2tmLElBQU8sQ0FDM0MsSUFBSXdtRCxFQUFRRCxFQUFNdm1ELElBRWdCLElBQTlCcW1ELEVBQWN4cEUsS0FBSzJwRSxLQUNyQnYvQixFQUFXckcsS0FBUyxJQUNwQjRsQyxFQUFRQSxFQUFNbHZFLFdBQVdxQyxlQUczQnN0QyxFQUFXckcsS0FBUzRsQyxFQUd0QixJQUFJeHFELEVBQVlpckIsRUFBVy82QixLQUFLLElBRWhDLE9BREFpNkQsRUFBYTduRSxHQUFPMGQsRUFDYkEsR0FJWHNxRCxFQUFPRyxZQUFjLFNBQVUxK0QsR0FDN0IsR0FBSUEsR0FBUUEsRUFBSzdQLE9BQVEsQ0FDdkIsSUFBSXMxRCxFQUFRemxELEVBQUsxUSxNQUFNLElBQ3ZCbTJELEVBQU0sR0FBS0EsRUFBTSxHQUFHaG1ELGNBQ3BCTyxFQUFPeWxELEVBQU10aEQsS0FBSyxJQU9wQixPQUpLazZELEVBQWdCcitELEtBQ25CcStELEVBQWdCcitELEdBQVF1K0QsRUFBT25nQyxTQUFTbWdDLEVBQU96dkUsT0FBTyxTQUFVb3ZFLEVBQU9sK0QsS0FBTUEsS0FHeEVxK0QsRUFBZ0JyK0QsSUFHbEJ1K0QsS0FNVHRELEVBQU8sYUFBYSxJQUFJLFdBQ3RCLE1BQU8sQ0FDTDBELFNBQVUsU0FBa0IzK0QsRUFBTTQrRCxFQUFTQyxHQUN6QyxJQUFLQSxFQUFLLENBQ1IsSUFBSTc3QyxFQUFVLDBCQUEwQjVzQixPQUFPNEosRUFBTSxzSkFFakRqRyxTQUFvQyxtQkFBbEJBLFFBQVFrUyxRQUM1QmxTLFFBQVFDLEtBQUtncEIsR0FDYmpwQixRQUFRQyxLQUFLLEtBQUs1RCxPQUFPd29FLEtBSTdCLE9BQU9DLE9BUWI1RCxFQUFPLFNBQVMsQ0FBQyxpQkFBaUIsU0FBVTZELEdBQzFDLElBQUlELEVBRUosSUFDRUEsRUFBTS95QixFQUNOLE1BQU9oeUMsSUFJVCxPQUFPZ2xFLEVBQU1ILFNBQVMsU0FBVSw0QkFBNkJFLE1BTS9ENUQsRUFBTyxnQkFBZ0IsQ0FBQyxzQkFBdUIsV0FBVyxTQUFVc0QsRUFBUXp5QixHQUMxRSxJQUFJaXpCLEVBQWMsR0FFZEMsRUFBYyxTQUFxQm52RSxHQUNyQyxJQUFLQSxFQUNILE1BQU0sSUFBSTRNLE1BQU0sdUNBR2xCLEdBQUk1TSxhQUFnQmk4QyxHQUFXLEVBQU8sQ0FDcEMsR0FBb0IsaUJBQVRqOEMsR0FBcUMsaUJBQVRBLEVBR3JDLE1BQU0sSUFBSTRNLE1BQU0seUNBQTJDNU0sRUFBTyxNQUZsRUEsRUFBT2k4QyxFQUFPajhDLEdBTWxCM0IsS0FBS2tELEtBQU9sQixTQUFTTCxFQUFLZixPQUFPLFFBQVMsSUFDMUNaLEtBQUtpRCxNQUFRakIsU0FBU0wsRUFBS2YsT0FBTyxNQUFPLElBQ3pDWixLQUFLK3dFLFVBQVkvdUUsU0FBU0wsRUFBSzhiLFFBQVF3UyxLQUFLLEVBQUcsVUFBVXJ2QixPQUFPLE1BQU8sSUFDdkVaLEtBQUtneEUsVUFBWWh2RSxTQUFTTCxFQUFLOGIsUUFBUXdTLElBQUksRUFBRyxVQUFVcnZCLE9BQU8sTUFBTyxJQUN0RVosS0FBS2dELElBQU1oQixTQUFTTCxFQUFLZixPQUFPLE1BQU8sSUFDdkNaLEtBQUtpeEUsU0FBVyxFQUNoQmp4RSxLQUFLby9DLFFBQVVwOUMsU0FBU0wsRUFBSzhiLFFBQVF3bUQsTUFBTSxTQUFTcmpFLE9BQU8sTUFBTyxJQUNsRVosS0FBS2t4RSxRQUFVdnZFLEVBQUsreEQsVUFDcEIxekQsS0FBSzJCLEtBQU9BLEdBaUJkLE9BZEFtdkUsRUFBWXR3RSxVQUFVYSxTQUFXLFdBQy9CLE9BQU9yQixLQUFLMkIsS0FBS2YsT0FBTyxlQUcxQmt3RSxFQUFZSyxRQUFVLFNBQVVqdUUsRUFBTUQsRUFBT0QsR0FDM0MsSUFBSXJCLEVBQU8wdUUsRUFBT3p2RSxPQUFPLGNBQWVzQyxFQUFNRCxFQUFPRCxHQU1yRCxPQUpLNnRFLEVBQVlsdkUsS0FDZmt2RSxFQUFZbHZFLEdBQVFpOEMsRUFBT2o4QyxFQUFNLGVBRzVCa3ZFLEVBQVlsdkUsSUFHZG12RSxLQU1UL0QsRUFBTyx1QkFBdUIsQ0FBQyx3QkFBd0IsU0FBVXNELEdBQy9ELE1BQU8sQ0FDTHhxRCxJQUFLd3FELEVBQU9HLFlBQVksT0FDeEJZLE9BQVFmLEVBQU9HLFlBQVksVUFDM0JuM0MsS0FBTWczQyxFQUFPRyxZQUFZLFFBQ3pCenhDLE9BQVFzeEMsRUFBT0csWUFBWSxjQU8vQnpELEVBQU8sa0JBQWtCLElBQUksV0FDM0IsTUFBTyxDQUNMc0UsZ0JBQWlCLEtBQ2pCdkIsU0FBVSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDM0c3UixNQUFPLENBQ0xxVCxHQUFJLENBQUMsTUFBTyxRQUFTLFNBQVUsU0FBVSxPQUFRLE9BQVEsT0FDekRDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUMvQ0MsR0FBSSxDQUFDLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQ25DQyxHQUFJLENBQUMsT0FBUSxRQUFTLE1BQU8sT0FBUSxLQUFNLEtBQU0sTUFDakRDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUMvQ3R2RCxHQUFJLENBQUMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FDbkN1dkQsR0FBSSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3pDQyxHQUFJLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDekNDLEdBQUksQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxLQUNuQ0MsR0FBSSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQy9DQyxHQUFJLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDL0NDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUMvQ0MsR0FBSSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQy9DQyxHQUFJLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDL0NDLEdBQUksQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUN6Q0MsR0FBSSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ3pDQyxHQUFJLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDekNDLEdBQUksQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUN6Q0MsR0FBSSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE9BRTNDQyxXQUFZLENBQ1ZsQixHQUFJLENBQUMsUUFBUyxTQUFVLE9BQVEsUUFBUyxPQUFRLFFBQVMsUUFBUyxRQUFTLFNBQVUsU0FBVSxTQUFVLFVBQzFHQyxHQUFJLENBQUMsVUFBVyxXQUFZLFFBQVMsUUFBUyxNQUFPLE1BQU8sT0FBUSxTQUFVLFlBQWEsVUFBVyxXQUFZLFlBQ2xIQyxHQUFJLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTyxNQUFPLE9BQ3pFQyxHQUFJLENBQUMsTUFBTyxPQUFRLE1BQU8sU0FBVSxRQUFTLE1BQU8sUUFBUyxXQUFZLFVBQVcsUUFBUyxPQUFRLE1BQ3RHQyxHQUFJLENBQUMsVUFBVyxVQUFXLE9BQVEsUUFBUyxNQUFPLE9BQVEsVUFBVyxPQUFRLFlBQWEsVUFBVyxXQUFZLFlBQ2xIdHZELEdBQUksQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQU8sT0FDeEV1dkQsR0FBSSxDQUFDLFNBQVUsVUFBVyxPQUFRLFFBQVMsTUFBTyxPQUFRLE9BQVEsU0FBVSxZQUFhLFVBQVcsV0FBWSxZQUNoSEMsR0FBSSxDQUFDLFVBQVcsV0FBWSxRQUFTLFFBQVMsTUFBTyxPQUFRLE9BQVEsV0FBWSxZQUFhLFVBQVcsV0FBWSxZQUNySEMsR0FBSSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTyxPQUN4RUMsR0FBSSxDQUFDLFVBQVcsWUFBYSxRQUFTLFFBQVMsT0FBUSxRQUFTLFFBQVMsU0FBVSxXQUFZLFVBQVcsV0FBWSxZQUN0SEMsR0FBSSxDQUFDLFNBQVUsVUFBVyxRQUFTLFFBQVMsTUFBTyxPQUFRLE9BQVEsU0FBVSxZQUFhLFVBQVcsV0FBWSxZQUNqSEMsR0FBSSxDQUFDLFVBQVcsT0FBUSxTQUFVLFdBQVksTUFBTyxXQUFZLFNBQVUsV0FBWSxXQUFZLGNBQWUsV0FBWSxZQUM5SEMsR0FBSSxDQUFDLFFBQVMsVUFBVyxRQUFTLFFBQVMsT0FBUSxRQUFTLFFBQVMsU0FBVSxhQUFjLFVBQVcsWUFBYSxhQUNySEMsR0FBSSxDQUFDLFVBQVcsV0FBWSxRQUFTLFNBQVUsU0FBVSxTQUFVLFNBQVUsU0FBVSxZQUFhLFVBQVcsV0FBWSxZQUMzSEMsR0FBSSxDQUFDLFFBQVMsT0FBUSxTQUFVLFFBQVMsU0FBVSxTQUFVLFdBQVksUUFBUyxPQUFRLFFBQVMsV0FBWSxZQUMvR0MsR0FBSSxDQUFDLFNBQVUsUUFBUyxXQUFZLFVBQVcsVUFBVyxVQUFXLFNBQVUsVUFBVyxXQUFZLFVBQVcsV0FBWSxXQUM3SEMsR0FBSSxDQUFDLFNBQVUsVUFBVyxPQUFRLFNBQVUsTUFBTyxPQUFRLE9BQVEsU0FBVSxXQUFZLFVBQVcsU0FBVSxXQUM5R0MsR0FBSSxDQUFDLFVBQVcsWUFBYSxRQUFTLFNBQVUsUUFBUyxTQUFVLFNBQVUsVUFBVyxhQUFjLFlBQWEsV0FBWSxhQUMvSEMsR0FBSSxDQUFDLFFBQVMsU0FBVSxPQUFRLFFBQVMsT0FBUSxPQUFRLFNBQVUsUUFBUyxXQUFZLFVBQVcsV0FBWSxhQUVqSHowQixPQUFRLENBQ053ekIsR0FBSSxDQUFDLFFBQVMsU0FBVSxPQUFRLFFBQVMsT0FBUSxRQUFTLFFBQVMsUUFBUyxTQUFVLFNBQVUsU0FBVSxVQUMxR0MsR0FBSSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUNsRkMsR0FBSSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQU8sTUFBTyxPQUN6RUMsR0FBSSxDQUFDLE1BQU8sT0FBUSxNQUFPLFNBQVUsUUFBUyxNQUFPLFFBQVMsV0FBWSxVQUFXLFFBQVMsT0FBUSxNQUN0R0MsR0FBSSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUFRLE9BQVEsTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUNwRnR2RCxHQUFJLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUFPLE9BQ3hFdXZELEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQU8sT0FDeEVDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDbEZDLEdBQUksQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFB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LFdBQW9CLElBTXBCLFFBQWUsWUFBa0IsSSwyRkNKcEIsSUFBSSxJQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsUUFBZSxZQUFrQixJLDJGQ0pwQixJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixRQUFlLFlBQWtCLEksMkZDSnBCLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFFBQWUsWUFBa0IsSSwyRkNKcEIsSUFBSSxJQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsUUFBZSxZQUFrQixJLDJGQ0pwQixJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixRQUFlLFlBQWtCLEksMkZDSnBCLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFFBQWUsWUFBa0IsSSwyRkNKcEIsSUFBSSxJQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsUUFBZSxZQUFrQixJLDJGQ0pwQixJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixRQUFlLFlBQWtCLEksMkZDSnBCLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFFBQWUsWUFBa0IsSSwyRkNKcEIsSUFBSSxJQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsUUFBZSxZQUFrQixJLDBGQ0pwQixJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixRQUFlLFlBQWtCLEksMEZDSnBCLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFFBQWUsWUFBa0IsSSwyRkNKcEIsSUFBSSxJQUxILENBRWQsT0FBaUIsT0FDakIsV0FBb0IsSUFNcEIsUUFBZSxZQUFrQixJLDJGQ0pwQixJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1wQixRQUFlLFlBQWtCLEksMkZDSnBCLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTXBCLFFB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ImZpbGUiOiJ1aS1raXQtZm9ybS1lbGVtZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cbnZhciBOdW1lcmFsRm9ybWF0dGVyID0gZnVuY3Rpb24gKG51bWVyYWxEZWNpbWFsTWFyayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyYWxJbnRlZ2VyU2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmFsRGVjaW1hbFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1lcmFsUG9zaXRpdmVPbmx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBMZWFkaW5nWmVyb2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbkJlZm9yZVByZWZpeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhaWxQcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXIpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIubnVtZXJhbERlY2ltYWxNYXJrID0gbnVtZXJhbERlY2ltYWxNYXJrIHx8ICcuJztcbiAgICBvd25lci5udW1lcmFsSW50ZWdlclNjYWxlID0gbnVtZXJhbEludGVnZXJTY2FsZSA+IDAgPyBudW1lcmFsSW50ZWdlclNjYWxlIDogMDtcbiAgICBvd25lci5udW1lcmFsRGVjaW1hbFNjYWxlID0gbnVtZXJhbERlY2ltYWxTY2FsZSA+PSAwID8gbnVtZXJhbERlY2ltYWxTY2FsZSA6IDI7XG4gICAgb3duZXIubnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUgPSBudW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSB8fCBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUudGhvdXNhbmQ7XG4gICAgb3duZXIubnVtZXJhbFBvc2l0aXZlT25seSA9ICEhbnVtZXJhbFBvc2l0aXZlT25seTtcbiAgICBvd25lci5zdHJpcExlYWRpbmdaZXJvZXMgPSBzdHJpcExlYWRpbmdaZXJvZXMgIT09IGZhbHNlO1xuICAgIG93bmVyLnByZWZpeCA9IChwcmVmaXggfHwgcHJlZml4ID09PSAnJykgPyBwcmVmaXggOiAnJztcbiAgICBvd25lci5zaWduQmVmb3JlUHJlZml4ID0gISFzaWduQmVmb3JlUHJlZml4O1xuICAgIG93bmVyLnRhaWxQcmVmaXggPSAhIXRhaWxQcmVmaXg7XG4gICAgb3duZXIuZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBkZWxpbWl0ZXIgPT09ICcnKSA/IGRlbGltaXRlciA6ICcsJztcbiAgICBvd25lci5kZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG5ldyBSZWdFeHAoJ1xcXFwnICsgZGVsaW1pdGVyLCAnZycpIDogJyc7XG59O1xuXG5OdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUgPSB7XG4gICAgdGhvdXNhbmQ6ICd0aG91c2FuZCcsXG4gICAgbGFraDogICAgICdsYWtoJyxcbiAgICB3YW46ICAgICAgJ3dhbicsXG4gICAgbm9uZTogICAgICdub25lJyAgICBcbn07XG5cbk51bWVyYWxGb3JtYXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGdldFJhd1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UodGhpcy5kZWxpbWl0ZXJSRSwgJycpLnJlcGxhY2UodGhpcy5udW1lcmFsRGVjaW1hbE1hcmssICcuJyk7XG4gICAgfSxcblxuICAgIGZvcm1hdDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBhcnRzLCBwYXJ0U2lnbiwgcGFydFNpZ25BbmRQcmVmaXgsIHBhcnRJbnRlZ2VyLCBwYXJ0RGVjaW1hbCA9ICcnO1xuXG4gICAgICAgIC8vIHN0cmlwIGFscGhhYmV0IGxldHRlcnNcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bQS1aYS16XS9nLCAnJylcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZpcnN0IGRlY2ltYWwgbWFyayB3aXRoIHJlc2VydmVkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAucmVwbGFjZShvd25lci5udW1lcmFsRGVjaW1hbE1hcmssICdNJylcblxuICAgICAgICAgICAgLy8gc3RyaXAgbm9uIG51bWVyaWMgbGV0dGVycyBleGNlcHQgbWludXMgYW5kIFwiTVwiXG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRvIGVuc3VyZSBwcmVmaXggaGFzIGJlZW4gc3RyaXBwZWRcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxcZE0tXS9nLCAnJylcblxuICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgbGVhZGluZyBtaW51cyB3aXRoIHJlc2VydmVkIHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcLS8sICdOJylcblxuICAgICAgICAgICAgLy8gc3RyaXAgdGhlIG90aGVyIG1pbnVzIHNpZ24gKGlmIHByZXNlbnQpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwtL2csICcnKVxuXG4gICAgICAgICAgICAvLyByZXBsYWNlIHRoZSBtaW51cyBzaWduIChpZiBwcmVzZW50KVxuICAgICAgICAgICAgLnJlcGxhY2UoJ04nLCBvd25lci5udW1lcmFsUG9zaXRpdmVPbmx5ID8gJycgOiAnLScpXG5cbiAgICAgICAgICAgIC8vIHJlcGxhY2UgZGVjaW1hbCBtYXJrXG4gICAgICAgICAgICAucmVwbGFjZSgnTScsIG93bmVyLm51bWVyYWxEZWNpbWFsTWFyayk7XG5cbiAgICAgICAgLy8gc3RyaXAgYW55IGxlYWRpbmcgemVyb3NcbiAgICAgICAgaWYgKG93bmVyLnN0cmlwTGVhZGluZ1plcm9lcykge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKC0pPzArKD89XFxkKS8sICckMScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFydFNpZ24gPSB2YWx1ZS5zbGljZSgwLCAxKSA9PT0gJy0nID8gJy0nIDogJyc7XG4gICAgICAgIGlmICh0eXBlb2Ygb3duZXIucHJlZml4ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAob3duZXIuc2lnbkJlZm9yZVByZWZpeCkge1xuICAgICAgICAgICAgICAgIHBhcnRTaWduQW5kUHJlZml4ID0gcGFydFNpZ24gKyBvd25lci5wcmVmaXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRTaWduQW5kUHJlZml4ID0gb3duZXIucHJlZml4ICsgcGFydFNpZ247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJ0U2lnbkFuZFByZWZpeCA9IHBhcnRTaWduO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwYXJ0SW50ZWdlciA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKG93bmVyLm51bWVyYWxEZWNpbWFsTWFyaykgPj0gMCkge1xuICAgICAgICAgICAgcGFydHMgPSB2YWx1ZS5zcGxpdChvd25lci5udW1lcmFsRGVjaW1hbE1hcmspO1xuICAgICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHBhcnREZWNpbWFsID0gb3duZXIubnVtZXJhbERlY2ltYWxNYXJrICsgcGFydHNbMV0uc2xpY2UoMCwgb3duZXIubnVtZXJhbERlY2ltYWxTY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihwYXJ0U2lnbiA9PT0gJy0nKSB7XG4gICAgICAgICAgICBwYXJ0SW50ZWdlciA9IHBhcnRJbnRlZ2VyLnNsaWNlKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG93bmVyLm51bWVyYWxJbnRlZ2VyU2NhbGUgPiAwKSB7XG4gICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0SW50ZWdlci5zbGljZSgwLCBvd25lci5udW1lcmFsSW50ZWdlclNjYWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAob3duZXIubnVtZXJhbFRob3VzYW5kc0dyb3VwU3R5bGUpIHtcbiAgICAgICAgY2FzZSBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUubGFraDpcbiAgICAgICAgICAgIHBhcnRJbnRlZ2VyID0gcGFydEludGVnZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkXFxkKStcXGQkKS9nLCAnJDEnICsgb3duZXIuZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBOdW1lcmFsRm9ybWF0dGVyLmdyb3VwU3R5bGUud2FuOlxuICAgICAgICAgICAgcGFydEludGVnZXIgPSBwYXJ0SW50ZWdlci5yZXBsYWNlKC8oXFxkKSg/PShcXGR7NH0pKyQpL2csICckMScgKyBvd25lci5kZWxpbWl0ZXIpO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE51bWVyYWxGb3JtYXR0ZXIuZ3JvdXBTdHlsZS50aG91c2FuZDpcbiAgICAgICAgICAgIHBhcnRJbnRlZ2VyID0gcGFydEludGVnZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KSskKS9nLCAnJDEnICsgb3duZXIuZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3duZXIudGFpbFByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnRTaWduICsgcGFydEludGVnZXIudG9TdHJpbmcoKSArIChvd25lci5udW1lcmFsRGVjaW1hbFNjYWxlID4gMCA/IHBhcnREZWNpbWFsLnRvU3RyaW5nKCkgOiAnJykgKyBvd25lci5wcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFydFNpZ25BbmRQcmVmaXggKyBwYXJ0SW50ZWdlci50b1N0cmluZygpICsgKG93bmVyLm51bWVyYWxEZWNpbWFsU2NhbGUgPiAwID8gcGFydERlY2ltYWwudG9TdHJpbmcoKSA6ICcnKTtcbiAgICB9XG59O1xuXG52YXIgTnVtZXJhbEZvcm1hdHRlcl8xID0gTnVtZXJhbEZvcm1hdHRlcjtcblxudmFyIERhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZVBhdHRlcm4sIGRhdGVNaW4sIGRhdGVNYXgpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIuZGF0ZSA9IFtdO1xuICAgIG93bmVyLmJsb2NrcyA9IFtdO1xuICAgIG93bmVyLmRhdGVQYXR0ZXJuID0gZGF0ZVBhdHRlcm47XG4gICAgb3duZXIuZGF0ZU1pbiA9IGRhdGVNaW5cbiAgICAgIC5zcGxpdCgnLScpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKTtcbiAgICAgIH0pO1xuICAgIGlmIChvd25lci5kYXRlTWluLmxlbmd0aCA9PT0gMikgb3duZXIuZGF0ZU1pbi51bnNoaWZ0KDApO1xuXG4gICAgb3duZXIuZGF0ZU1heCA9IGRhdGVNYXhcbiAgICAgIC5zcGxpdCgnLScpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKTtcbiAgICAgIH0pO1xuICAgIGlmIChvd25lci5kYXRlTWF4Lmxlbmd0aCA9PT0gMikgb3duZXIuZGF0ZU1heC51bnNoaWZ0KDApO1xuICAgIFxuICAgIG93bmVyLmluaXRCbG9ja3MoKTtcbn07XG5cbkRhdGVGb3JtYXR0ZXIucHJvdG90eXBlID0ge1xuICAgIGluaXRCbG9ja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcztcbiAgICAgICAgb3duZXIuZGF0ZVBhdHRlcm4uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ1knKSB7XG4gICAgICAgICAgICAgICAgb3duZXIuYmxvY2tzLnB1c2goNCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG93bmVyLmJsb2Nrcy5wdXNoKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0RGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgZGF0ZSA9IG93bmVyLmRhdGU7XG5cbiAgICAgICAgcmV0dXJuIGRhdGVbMl0gPyAoXG4gICAgICAgICAgICBkYXRlWzJdICsgJy0nICsgb3duZXIuYWRkTGVhZGluZ1plcm8oZGF0ZVsxXSkgKyAnLScgKyBvd25lci5hZGRMZWFkaW5nWmVybyhkYXRlWzBdKVxuICAgICAgICApIDogJyc7XG4gICAgfSxcblxuICAgIGdldEJsb2NrczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gICAgfSxcblxuICAgIGdldFZhbGlkYXRlZERhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCByZXN1bHQgPSAnJztcblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxkXS9nLCAnJyk7XG5cbiAgICAgICAgb3duZXIuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHN1YjAgPSBzdWIuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvd25lci5kYXRlUGF0dGVybltpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YiA9PT0gJzAwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzAxJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdWIwLCAxMCkgPiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIgPSAnMCcgKyBzdWIwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KHN1YiwgMTApID4gMzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICczMSc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViID09PSAnMDAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWIgPSAnMDEnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlSW50KHN1YjAsIDEwKSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICcwJyArIHN1YjA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoc3ViLCAxMCkgPiAxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzEyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdWI7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcmVtYWluaW5nIHN0cmluZ1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rml4ZWREYXRlU3RyaW5nKHJlc3VsdCk7XG4gICAgfSxcblxuICAgIGdldEZpeGVkRGF0ZVN0cmluZzogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIGRhdGVQYXR0ZXJuID0gb3duZXIuZGF0ZVBhdHRlcm4sIGRhdGUgPSBbXSxcbiAgICAgICAgICAgIGRheUluZGV4ID0gMCwgbW9udGhJbmRleCA9IDAsIHllYXJJbmRleCA9IDAsXG4gICAgICAgICAgICBkYXlTdGFydEluZGV4ID0gMCwgbW9udGhTdGFydEluZGV4ID0gMCwgeWVhclN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgZGF5LCBtb250aCwgeWVhciwgZnVsbFllYXJEb25lID0gZmFsc2U7XG5cbiAgICAgICAgLy8gbW0tZGQgfHwgZGQtbW1cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCAmJiBkYXRlUGF0dGVyblswXS50b0xvd2VyQ2FzZSgpICE9PSAneScgJiYgZGF0ZVBhdHRlcm5bMV0udG9Mb3dlckNhc2UoKSAhPT0gJ3knKSB7XG4gICAgICAgICAgICBkYXlTdGFydEluZGV4ID0gZGF0ZVBhdHRlcm5bMF0gPT09ICdkJyA/IDAgOiAyO1xuICAgICAgICAgICAgbW9udGhTdGFydEluZGV4ID0gMiAtIGRheVN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBkYXkgPSBwYXJzZUludCh2YWx1ZS5zbGljZShkYXlTdGFydEluZGV4LCBkYXlTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1vbnRoID0gcGFyc2VJbnQodmFsdWUuc2xpY2UobW9udGhTdGFydEluZGV4LCBtb250aFN0YXJ0SW5kZXggKyAyKSwgMTApO1xuXG4gICAgICAgICAgICBkYXRlID0gdGhpcy5nZXRGaXhlZERhdGUoZGF5LCBtb250aCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB5eXl5LW1tLWRkIHx8IHl5eXktZGQtbW0gfHwgbW0tZGQteXl5eSB8fCBkZC1tbS15eXl5IHx8IGRkLXl5eXktbW0gfHwgbW0teXl5eS1kZFxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA4KSB7XG4gICAgICAgICAgICBkYXRlUGF0dGVybi5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBkYXlJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICAgICAgbW9udGhJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB5ZWFySW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHllYXJTdGFydEluZGV4ID0geWVhckluZGV4ICogMjtcbiAgICAgICAgICAgIGRheVN0YXJ0SW5kZXggPSAoZGF5SW5kZXggPD0geWVhckluZGV4KSA/IGRheUluZGV4ICogMiA6IChkYXlJbmRleCAqIDIgKyAyKTtcbiAgICAgICAgICAgIG1vbnRoU3RhcnRJbmRleCA9IChtb250aEluZGV4IDw9IHllYXJJbmRleCkgPyBtb250aEluZGV4ICogMiA6IChtb250aEluZGV4ICogMiArIDIpO1xuXG4gICAgICAgICAgICBkYXkgPSBwYXJzZUludCh2YWx1ZS5zbGljZShkYXlTdGFydEluZGV4LCBkYXlTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1vbnRoID0gcGFyc2VJbnQodmFsdWUuc2xpY2UobW9udGhTdGFydEluZGV4LCBtb250aFN0YXJ0SW5kZXggKyAyKSwgMTApO1xuICAgICAgICAgICAgeWVhciA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKHllYXJTdGFydEluZGV4LCB5ZWFyU3RhcnRJbmRleCArIDQpLCAxMCk7XG5cbiAgICAgICAgICAgIGZ1bGxZZWFyRG9uZSA9IHZhbHVlLnNsaWNlKHllYXJTdGFydEluZGV4LCB5ZWFyU3RhcnRJbmRleCArIDQpLmxlbmd0aCA9PT0gNDtcblxuICAgICAgICAgICAgZGF0ZSA9IHRoaXMuZ2V0Rml4ZWREYXRlKGRheSwgbW9udGgsIHllYXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW0teXkgfHwgeXktbW1cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNCAmJiAoZGF0ZVBhdHRlcm5bMF0gPT09ICd5JyB8fCBkYXRlUGF0dGVyblsxXSA9PT0gJ3knKSkge1xuICAgICAgICAgICAgbW9udGhTdGFydEluZGV4ID0gZGF0ZVBhdHRlcm5bMF0gPT09ICdtJyA/IDAgOiAyO1xuICAgICAgICAgICAgeWVhclN0YXJ0SW5kZXggPSAyIC0gbW9udGhTdGFydEluZGV4O1xuICAgICAgICAgICAgbW9udGggPSBwYXJzZUludCh2YWx1ZS5zbGljZShtb250aFN0YXJ0SW5kZXgsIG1vbnRoU3RhcnRJbmRleCArIDIpLCAxMCk7XG4gICAgICAgICAgICB5ZWFyID0gcGFyc2VJbnQodmFsdWUuc2xpY2UoeWVhclN0YXJ0SW5kZXgsIHllYXJTdGFydEluZGV4ICsgMiksIDEwKTtcblxuICAgICAgICAgICAgZnVsbFllYXJEb25lID0gdmFsdWUuc2xpY2UoeWVhclN0YXJ0SW5kZXgsIHllYXJTdGFydEluZGV4ICsgMikubGVuZ3RoID09PSAyO1xuXG4gICAgICAgICAgICBkYXRlID0gWzAsIG1vbnRoLCB5ZWFyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1tLXl5eXkgfHwgeXl5eS1tbVxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA2ICYmIChkYXRlUGF0dGVyblswXSA9PT0gJ1knIHx8IGRhdGVQYXR0ZXJuWzFdID09PSAnWScpKSB7XG4gICAgICAgICAgICBtb250aFN0YXJ0SW5kZXggPSBkYXRlUGF0dGVyblswXSA9PT0gJ20nID8gMCA6IDQ7XG4gICAgICAgICAgICB5ZWFyU3RhcnRJbmRleCA9IDIgLSAwLjUgKiBtb250aFN0YXJ0SW5kZXg7XG4gICAgICAgICAgICBtb250aCA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKG1vbnRoU3RhcnRJbmRleCwgbW9udGhTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIHllYXIgPSBwYXJzZUludCh2YWx1ZS5zbGljZSh5ZWFyU3RhcnRJbmRleCwgeWVhclN0YXJ0SW5kZXggKyA0KSwgMTApO1xuXG4gICAgICAgICAgICBmdWxsWWVhckRvbmUgPSB2YWx1ZS5zbGljZSh5ZWFyU3RhcnRJbmRleCwgeWVhclN0YXJ0SW5kZXggKyA0KS5sZW5ndGggPT09IDQ7XG5cbiAgICAgICAgICAgIGRhdGUgPSBbMCwgbW9udGgsIHllYXJdO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZSA9IG93bmVyLmdldFJhbmdlRml4ZWREYXRlKGRhdGUpO1xuICAgICAgICBvd25lci5kYXRlID0gZGF0ZTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0ZS5sZW5ndGggPT09IDAgPyB2YWx1ZSA6IGRhdGVQYXR0ZXJuLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgKGRhdGVbMF0gPT09IDAgPyAnJyA6IG93bmVyLmFkZExlYWRpbmdaZXJvKGRhdGVbMF0pKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIChkYXRlWzFdID09PSAwID8gJycgOiBvd25lci5hZGRMZWFkaW5nWmVybyhkYXRlWzFdKSk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyAoZnVsbFllYXJEb25lID8gb3duZXIuYWRkTGVhZGluZ1plcm9Gb3JZZWFyKGRhdGVbMl0sIGZhbHNlKSA6ICcnKTtcbiAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIChmdWxsWWVhckRvbmUgPyBvd25lci5hZGRMZWFkaW5nWmVyb0ZvclllYXIoZGF0ZVsyXSwgdHJ1ZSkgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICcnKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBnZXRSYW5nZUZpeGVkRGF0ZTogZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIGRhdGVQYXR0ZXJuID0gb3duZXIuZGF0ZVBhdHRlcm4sXG4gICAgICAgICAgICBkYXRlTWluID0gb3duZXIuZGF0ZU1pbiB8fCBbXSxcbiAgICAgICAgICAgIGRhdGVNYXggPSBvd25lci5kYXRlTWF4IHx8IFtdO1xuXG4gICAgICAgIGlmICghZGF0ZS5sZW5ndGggfHwgKGRhdGVNaW4ubGVuZ3RoIDwgMyAmJiBkYXRlTWF4Lmxlbmd0aCA8IDMpKSByZXR1cm4gZGF0ZTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZGF0ZVBhdHRlcm4uZmluZChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICByZXR1cm4geC50b0xvd2VyQ2FzZSgpID09PSAneSc7XG4gICAgICAgICAgfSkgJiZcbiAgICAgICAgICBkYXRlWzJdID09PSAwXG4gICAgICAgICkgcmV0dXJuIGRhdGU7XG5cbiAgICAgICAgaWYgKGRhdGVNYXgubGVuZ3RoICYmIChkYXRlTWF4WzJdIDwgZGF0ZVsyXSB8fCAoXG4gICAgICAgICAgZGF0ZU1heFsyXSA9PT0gZGF0ZVsyXSAmJiAoZGF0ZU1heFsxXSA8IGRhdGVbMV0gfHwgKFxuICAgICAgICAgICAgZGF0ZU1heFsxXSA9PT0gZGF0ZVsxXSAmJiBkYXRlTWF4WzBdIDwgZGF0ZVswXVxuICAgICAgICAgICkpXG4gICAgICAgICkpKSByZXR1cm4gZGF0ZU1heDtcblxuICAgICAgICBpZiAoZGF0ZU1pbi5sZW5ndGggJiYgKGRhdGVNaW5bMl0gPiBkYXRlWzJdIHx8IChcbiAgICAgICAgICBkYXRlTWluWzJdID09PSBkYXRlWzJdICYmIChkYXRlTWluWzFdID4gZGF0ZVsxXSB8fCAoXG4gICAgICAgICAgICBkYXRlTWluWzFdID09PSBkYXRlWzFdICYmIGRhdGVNaW5bMF0gPiBkYXRlWzBdXG4gICAgICAgICAgKSlcbiAgICAgICAgKSkpIHJldHVybiBkYXRlTWluO1xuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZERhdGU6IGZ1bmN0aW9uIChkYXksIG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIGRheSA9IE1hdGgubWluKGRheSwgMzEpO1xuICAgICAgICBtb250aCA9IE1hdGgubWluKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgPSBwYXJzZUludCgoeWVhciB8fCAwKSwgMTApO1xuXG4gICAgICAgIGlmICgobW9udGggPCA3ICYmIG1vbnRoICUgMiA9PT0gMCkgfHwgKG1vbnRoID4gOCAmJiBtb250aCAlIDIgPT09IDEpKSB7XG4gICAgICAgICAgICBkYXkgPSBNYXRoLm1pbihkYXksIG1vbnRoID09PSAyID8gKHRoaXMuaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogMzApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtkYXksIG1vbnRoLCB5ZWFyXTtcbiAgICB9LFxuXG4gICAgaXNMZWFwWWVhcjogZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICAgcmV0dXJuICgoeWVhciAlIDQgPT09IDApICYmICh5ZWFyICUgMTAwICE9PSAwKSkgfHwgKHllYXIgJSA0MDAgPT09IDApO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVybzogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVyb0ZvclllYXI6IGZ1bmN0aW9uIChudW1iZXIsIGZ1bGxZZWFyTW9kZSkge1xuICAgICAgICBpZiAoZnVsbFllYXJNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAwMCcgOiAobnVtYmVyIDwgMTAwID8gJzAwJyA6IChudW1iZXIgPCAxMDAwID8gJzAnIDogJycpKSkgKyBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH1cbn07XG5cbnZhciBEYXRlRm9ybWF0dGVyXzEgPSBEYXRlRm9ybWF0dGVyO1xuXG52YXIgVGltZUZvcm1hdHRlciA9IGZ1bmN0aW9uICh0aW1lUGF0dGVybiwgdGltZUZvcm1hdCkge1xuICAgIHZhciBvd25lciA9IHRoaXM7XG5cbiAgICBvd25lci50aW1lID0gW107XG4gICAgb3duZXIuYmxvY2tzID0gW107XG4gICAgb3duZXIudGltZVBhdHRlcm4gPSB0aW1lUGF0dGVybjtcbiAgICBvd25lci50aW1lRm9ybWF0ID0gdGltZUZvcm1hdDtcbiAgICBvd25lci5pbml0QmxvY2tzKCk7XG59O1xuXG5UaW1lRm9ybWF0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBpbml0QmxvY2tzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG4gICAgICAgIG93bmVyLnRpbWVQYXR0ZXJuLmZvckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb3duZXIuYmxvY2tzLnB1c2goMik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXRJU09Gb3JtYXRUaW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICB0aW1lID0gb3duZXIudGltZTtcblxuICAgICAgICByZXR1cm4gdGltZVsyXSA/IChcbiAgICAgICAgICAgIG93bmVyLmFkZExlYWRpbmdaZXJvKHRpbWVbMF0pICsgJzonICsgb3duZXIuYWRkTGVhZGluZ1plcm8odGltZVsxXSkgKyAnOicgKyBvd25lci5hZGRMZWFkaW5nWmVybyh0aW1lWzJdKVxuICAgICAgICApIDogJyc7XG4gICAgfSxcblxuICAgIGdldEJsb2NrczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9ja3M7XG4gICAgfSxcblxuICAgIGdldFRpbWVGb3JtYXRPcHRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG4gICAgICAgIGlmIChTdHJpbmcob3duZXIudGltZUZvcm1hdCkgPT09ICcxMicpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWF4SG91ckZpcnN0RGlnaXQ6IDEsXG4gICAgICAgICAgICAgICAgbWF4SG91cnM6IDEyLFxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXNGaXJzdERpZ2l0OiA1LFxuICAgICAgICAgICAgICAgIG1heE1pbnV0ZXM6IDYwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1heEhvdXJGaXJzdERpZ2l0OiAyLFxuICAgICAgICAgICAgbWF4SG91cnM6IDIzLFxuICAgICAgICAgICAgbWF4TWludXRlc0ZpcnN0RGlnaXQ6IDUsXG4gICAgICAgICAgICBtYXhNaW51dGVzOiA2MFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRWYWxpZGF0ZWRUaW1lOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcZF0vZywgJycpO1xuXG4gICAgICAgIHZhciB0aW1lRm9ybWF0T3B0aW9ucyA9IG93bmVyLmdldFRpbWVGb3JtYXRPcHRpb25zKCk7XG5cbiAgICAgICAgb3duZXIuYmxvY2tzLmZvckVhY2goZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YiA9IHZhbHVlLnNsaWNlKDAsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIHN1YjAgPSBzdWIuc2xpY2UoMCwgMSksXG4gICAgICAgICAgICAgICAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvd25lci50aW1lUGF0dGVybltpbmRleF0pIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoc3ViMCwgMTApID4gdGltZUZvcm1hdE9wdGlvbnMubWF4SG91ckZpcnN0RGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9ICcwJyArIHN1YjA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VJbnQoc3ViLCAxMCkgPiB0aW1lRm9ybWF0T3B0aW9ucy5tYXhIb3Vycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gdGltZUZvcm1hdE9wdGlvbnMubWF4SG91cnMgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChzdWIwLCAxMCkgPiB0aW1lRm9ybWF0T3B0aW9ucy5tYXhNaW51dGVzRmlyc3REaWdpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViID0gJzAnICsgc3ViMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZUludChzdWIsIDEwKSA+IHRpbWVGb3JtYXRPcHRpb25zLm1heE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YiA9IHRpbWVGb3JtYXRPcHRpb25zLm1heE1pbnV0ZXMgKyAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc3ViO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHJlbWFpbmluZyBzdHJpbmdcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEZpeGVkVGltZVN0cmluZyhyZXN1bHQpO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZFRpbWVTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCB0aW1lUGF0dGVybiA9IG93bmVyLnRpbWVQYXR0ZXJuLCB0aW1lID0gW10sXG4gICAgICAgICAgICBzZWNvbmRJbmRleCA9IDAsIG1pbnV0ZUluZGV4ID0gMCwgaG91ckluZGV4ID0gMCxcbiAgICAgICAgICAgIHNlY29uZFN0YXJ0SW5kZXggPSAwLCBtaW51dGVTdGFydEluZGV4ID0gMCwgaG91clN0YXJ0SW5kZXggPSAwLFxuICAgICAgICAgICAgc2Vjb25kLCBtaW51dGUsIGhvdXI7XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gNikge1xuICAgICAgICAgICAgdGltZVBhdHRlcm4uZm9yRWFjaChmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kSW5kZXggPSBpbmRleCAqIDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBtaW51dGVJbmRleCA9IGluZGV4ICogMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIGhvdXJJbmRleCA9IGluZGV4ICogMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGhvdXJTdGFydEluZGV4ID0gaG91ckluZGV4O1xuICAgICAgICAgICAgbWludXRlU3RhcnRJbmRleCA9IG1pbnV0ZUluZGV4O1xuICAgICAgICAgICAgc2Vjb25kU3RhcnRJbmRleCA9IHNlY29uZEluZGV4O1xuXG4gICAgICAgICAgICBzZWNvbmQgPSBwYXJzZUludCh2YWx1ZS5zbGljZShzZWNvbmRTdGFydEluZGV4LCBzZWNvbmRTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIG1pbnV0ZSA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKG1pbnV0ZVN0YXJ0SW5kZXgsIG1pbnV0ZVN0YXJ0SW5kZXggKyAyKSwgMTApO1xuICAgICAgICAgICAgaG91ciA9IHBhcnNlSW50KHZhbHVlLnNsaWNlKGhvdXJTdGFydEluZGV4LCBob3VyU3RhcnRJbmRleCArIDIpLCAxMCk7XG5cbiAgICAgICAgICAgIHRpbWUgPSB0aGlzLmdldEZpeGVkVGltZShob3VyLCBtaW51dGUsIHNlY29uZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSA0ICYmIG93bmVyLnRpbWVQYXR0ZXJuLmluZGV4T2YoJ3MnKSA8IDApIHtcbiAgICAgICAgICAgIHRpbWVQYXR0ZXJuLmZvckVhY2goZnVuY3Rpb24gKHR5cGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZUluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgaG91ckluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaG91clN0YXJ0SW5kZXggPSBob3VySW5kZXg7XG4gICAgICAgICAgICBtaW51dGVTdGFydEluZGV4ID0gbWludXRlSW5kZXg7XG5cbiAgICAgICAgICAgIHNlY29uZCA9IDA7XG4gICAgICAgICAgICBtaW51dGUgPSBwYXJzZUludCh2YWx1ZS5zbGljZShtaW51dGVTdGFydEluZGV4LCBtaW51dGVTdGFydEluZGV4ICsgMiksIDEwKTtcbiAgICAgICAgICAgIGhvdXIgPSBwYXJzZUludCh2YWx1ZS5zbGljZShob3VyU3RhcnRJbmRleCwgaG91clN0YXJ0SW5kZXggKyAyKSwgMTApO1xuXG4gICAgICAgICAgICB0aW1lID0gdGhpcy5nZXRGaXhlZFRpbWUoaG91ciwgbWludXRlLCBzZWNvbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duZXIudGltZSA9IHRpbWU7XG5cbiAgICAgICAgcmV0dXJuIHRpbWUubGVuZ3RoID09PSAwID8gdmFsdWUgOiB0aW1lUGF0dGVybi5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIG93bmVyLmFkZExlYWRpbmdaZXJvKHRpbWVbMl0pO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgb3duZXIuYWRkTGVhZGluZ1plcm8odGltZVsxXSk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgKyBvd25lci5hZGRMZWFkaW5nWmVybyh0aW1lWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgJycpO1xuICAgIH0sXG5cbiAgICBnZXRGaXhlZFRpbWU6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIHNlY29uZCkge1xuICAgICAgICBzZWNvbmQgPSBNYXRoLm1pbihwYXJzZUludChzZWNvbmQgfHwgMCwgMTApLCA2MCk7XG4gICAgICAgIG1pbnV0ZSA9IE1hdGgubWluKG1pbnV0ZSwgNjApO1xuICAgICAgICBob3VyID0gTWF0aC5taW4oaG91ciwgNjApO1xuXG4gICAgICAgIHJldHVybiBbaG91ciwgbWludXRlLCBzZWNvbmRdO1xuICAgIH0sXG5cbiAgICBhZGRMZWFkaW5nWmVybzogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICByZXR1cm4gKG51bWJlciA8IDEwID8gJzAnIDogJycpICsgbnVtYmVyO1xuICAgIH1cbn07XG5cbnZhciBUaW1lRm9ybWF0dGVyXzEgPSBUaW1lRm9ybWF0dGVyO1xuXG52YXIgUGhvbmVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZm9ybWF0dGVyLCBkZWxpbWl0ZXIpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgb3duZXIuZGVsaW1pdGVyID0gKGRlbGltaXRlciB8fCBkZWxpbWl0ZXIgPT09ICcnKSA/IGRlbGltaXRlciA6ICcgJztcbiAgICBvd25lci5kZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG5ldyBSZWdFeHAoJ1xcXFwnICsgZGVsaW1pdGVyLCAnZycpIDogJyc7XG5cbiAgICBvd25lci5mb3JtYXR0ZXIgPSBmb3JtYXR0ZXI7XG59O1xuXG5QaG9uZUZvcm1hdHRlci5wcm90b3R5cGUgPSB7XG4gICAgc2V0Rm9ybWF0dGVyOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0dGVyID0gZm9ybWF0dGVyO1xuICAgIH0sXG5cbiAgICBmb3JtYXQ6IGZ1bmN0aW9uIChwaG9uZU51bWJlcikge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIG93bmVyLmZvcm1hdHRlci5jbGVhcigpO1xuXG4gICAgICAgIC8vIG9ubHkga2VlcCBudW1iZXIgYW5kICtcbiAgICAgICAgcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlci5yZXBsYWNlKC9bXlxcZCtdL2csICcnKTtcblxuICAgICAgICAvLyBzdHJpcCBub24tbGVhZGluZyArXG4gICAgICAgIHBob25lTnVtYmVyID0gcGhvbmVOdW1iZXIucmVwbGFjZSgvXlxcKy8sICdCJykucmVwbGFjZSgvXFwrL2csICcnKS5yZXBsYWNlKCdCJywgJysnKTtcblxuICAgICAgICAvLyBzdHJpcCBkZWxpbWl0ZXJcbiAgICAgICAgcGhvbmVOdW1iZXIgPSBwaG9uZU51bWJlci5yZXBsYWNlKG93bmVyLmRlbGltaXRlclJFLCAnJyk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLCBjdXJyZW50LCB2YWxpZGF0ZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaU1heCA9IHBob25lTnVtYmVyLmxlbmd0aDsgaSA8IGlNYXg7IGkrKykge1xuICAgICAgICAgICAgY3VycmVudCA9IG93bmVyLmZvcm1hdHRlci5pbnB1dERpZ2l0KHBob25lTnVtYmVyLmNoYXJBdChpKSk7XG5cbiAgICAgICAgICAgIC8vIGhhcyAoKS0gb3Igc3BhY2UgaW5zaWRlXG4gICAgICAgICAgICBpZiAoL1tcXHMoKS1dL2cudGVzdChjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICB2YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbHNlOiBvdmVyIGxlbmd0aCBpbnB1dFxuICAgICAgICAgICAgICAgIC8vIGl0IHR1cm5zIHRvIGludmFsaWQgbnVtYmVyIGFnYWluXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpcCAoKVxuICAgICAgICAvLyBlLmcuIFVTOiA3MTYxMjM0NTY3IHJldHVybnMgKDcxNikgMTIzLTQ1NjdcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL1soKV0vZywgJycpO1xuICAgICAgICAvLyByZXBsYWNlIGxpYnJhcnkgZGVsaW1pdGVyIHdpdGggdXNlciBjdXN0b21pemVkIGRlbGltaXRlclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvW1xccy1dL2csIG93bmVyLmRlbGltaXRlcik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59O1xuXG52YXIgUGhvbmVGb3JtYXR0ZXJfMSA9IFBob25lRm9ybWF0dGVyO1xuXG52YXIgQ3JlZGl0Q2FyZERldGVjdG9yID0ge1xuICAgIGJsb2Nrczoge1xuICAgICAgICB1YXRwOiAgICAgICAgICBbNCwgNSwgNl0sXG4gICAgICAgIGFtZXg6ICAgICAgICAgIFs0LCA2LCA1XSxcbiAgICAgICAgZGluZXJzOiAgICAgICAgWzQsIDYsIDRdLFxuICAgICAgICBkaXNjb3ZlcjogICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIG1hc3RlcmNhcmQ6ICAgIFs0LCA0LCA0LCA0XSxcbiAgICAgICAgZGFua29ydDogICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICBpbnN0YXBheW1lbnQ6ICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIGpjYjE1OiAgICAgICAgIFs0LCA2LCA1XSxcbiAgICAgICAgamNiOiAgICAgICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICBtYWVzdHJvOiAgICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIHZpc2E6ICAgICAgICAgIFs0LCA0LCA0LCA0XSxcbiAgICAgICAgbWlyOiAgICAgICAgICAgWzQsIDQsIDQsIDRdLFxuICAgICAgICB1bmlvblBheTogICAgICBbNCwgNCwgNCwgNF0sXG4gICAgICAgIGdlbmVyYWw6ICAgICAgIFs0LCA0LCA0LCA0XVxuICAgIH0sXG5cbiAgICByZToge1xuICAgICAgICAvLyBzdGFydHMgd2l0aCAxOyAxNSBkaWdpdHMsIG5vdCBzdGFydHMgd2l0aCAxODAwIChqY2IgY2FyZClcbiAgICAgICAgdWF0cDogL14oPyExODAwKTFcXGR7MCwxNH0vLFxuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIDM0LzM3OyAxNSBkaWdpdHNcbiAgICAgICAgYW1leDogL14zWzQ3XVxcZHswLDEzfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjAxMS82NS82NDQtNjQ5OyAxNiBkaWdpdHNcbiAgICAgICAgZGlzY292ZXI6IC9eKD86NjAxMXw2NVxcZHswLDJ9fDY0WzQtOV1cXGQ/KVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggMzAwLTMwNS8zMDkgb3IgMzYvMzgvMzk7IDE0IGRpZ2l0c1xuICAgICAgICBkaW5lcnM6IC9eMyg/OjAoWzAtNV18OSl8WzY4OV1cXGQ/KVxcZHswLDExfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNTEtNTUvMjIyMeKAkzI3MjA7IDE2IGRpZ2l0c1xuICAgICAgICBtYXN0ZXJjYXJkOiAvXig1WzEtNV1cXGR7MCwyfXwyMlsyLTldXFxkezAsMX18MlszLTddXFxkezAsMn0pXFxkezAsMTJ9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCA1MDE5LzQxNzUvNDU3MTsgMTYgZGlnaXRzXG4gICAgICAgIGRhbmtvcnQ6IC9eKDUwMTl8NDE3NXw0NTcxKVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjM3LTYzOTsgMTYgZGlnaXRzXG4gICAgICAgIGluc3RhcGF5bWVudDogL142M1s3LTldXFxkezAsMTN9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMTMxLzE4MDA7IDE1IGRpZ2l0c1xuICAgICAgICBqY2IxNTogL14oPzoyMTMxfDE4MDApXFxkezAsMTF9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMTMxLzE4MDAvMzU7IDE2IGRpZ2l0c1xuICAgICAgICBqY2I6IC9eKD86MzVcXGR7MCwyfSlcXGR7MCwxMn0vLFxuXG4gICAgICAgIC8vIHN0YXJ0cyB3aXRoIDUwLzU2LTU4LzYzMDQvNjc7IDE2IGRpZ2l0c1xuICAgICAgICBtYWVzdHJvOiAvXig/OjVbMDY3OF1cXGR7MCwyfXw2MzA0fDY3XFxkezAsMn0pXFxkezAsMTJ9LyxcblxuICAgICAgICAvLyBzdGFydHMgd2l0aCAyMjsgMTYgZGlnaXRzXG4gICAgICAgIG1pcjogL14yMjBbMC00XVxcZHswLDEyfS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNDsgMTYgZGlnaXRzXG4gICAgICAgIHZpc2E6IC9eNFxcZHswLDE1fS8sXG5cbiAgICAgICAgLy8gc3RhcnRzIHdpdGggNjIvODE7IDE2IGRpZ2l0c1xuICAgICAgICB1bmlvblBheTogL14oNjJ8ODEpXFxkezAsMTR9L1xuICAgIH0sXG5cbiAgICBnZXRTdHJpY3RCbG9ja3M6IGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgdmFyIHRvdGFsID0gYmxvY2sucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBwcmV2ICsgY3VycmVudDtcbiAgICAgIH0sIDApO1xuXG4gICAgICByZXR1cm4gYmxvY2suY29uY2F0KDE5IC0gdG90YWwpO1xuICAgIH0sXG5cbiAgICBnZXRJbmZvOiBmdW5jdGlvbiAodmFsdWUsIHN0cmljdE1vZGUpIHtcbiAgICAgICAgdmFyIGJsb2NrcyA9IENyZWRpdENhcmREZXRlY3Rvci5ibG9ja3MsXG4gICAgICAgICAgICByZSA9IENyZWRpdENhcmREZXRlY3Rvci5yZTtcblxuICAgICAgICAvLyBTb21lIGNyZWRpdCBjYXJkIGNhbiBoYXZlIHVwIHRvIDE5IGRpZ2l0cyBudW1iZXIuXG4gICAgICAgIC8vIFNldCBzdHJpY3RNb2RlIHRvIHRydWUgd2lsbCByZW1vdmUgdGhlIDE2IG1heC1sZW5ndGggcmVzdHJhaW4sXG4gICAgICAgIC8vIGhvd2V2ZXIsIEkgbmV2ZXIgZm91bmQgYW55IHdlYnNpdGUgdmFsaWRhdGUgY2FyZCBudW1iZXIgbGlrZVxuICAgICAgICAvLyB0aGlzLCBoZW5jZSBwcm9iYWJseSB5b3UgZG9uJ3Qgd2FudCB0byBlbmFibGUgdGhpcyBvcHRpb24uXG4gICAgICAgIHN0cmljdE1vZGUgPSAhIXN0cmljdE1vZGU7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJlKSB7XG4gICAgICAgICAgICBpZiAocmVba2V5XS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVkQmxvY2tzID0gYmxvY2tzW2tleV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZToga2V5LFxuICAgICAgICAgICAgICAgICAgICBibG9ja3M6IHN0cmljdE1vZGUgPyB0aGlzLmdldFN0cmljdEJsb2NrcyhtYXRjaGVkQmxvY2tzKSA6IG1hdGNoZWRCbG9ja3NcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICd1bmtub3duJyxcbiAgICAgICAgICAgIGJsb2Nrczogc3RyaWN0TW9kZSA/IHRoaXMuZ2V0U3RyaWN0QmxvY2tzKGJsb2Nrcy5nZW5lcmFsKSA6IGJsb2Nrcy5nZW5lcmFsXG4gICAgICAgIH07XG4gICAgfVxufTtcblxudmFyIENyZWRpdENhcmREZXRlY3Rvcl8xID0gQ3JlZGl0Q2FyZERldGVjdG9yO1xuXG52YXIgVXRpbCA9IHtcbiAgICBub29wOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIHN0cmlwOiBmdW5jdGlvbiAodmFsdWUsIHJlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlLCAnJyk7XG4gICAgfSxcblxuICAgIGdldFBvc3REZWxpbWl0ZXI6IGZ1bmN0aW9uICh2YWx1ZSwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzKSB7XG4gICAgICAgIC8vIHNpbmdsZSBkZWxpbWl0ZXJcbiAgICAgICAgaWYgKGRlbGltaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXIgPyBkZWxpbWl0ZXIgOiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG11bHRpcGxlIGRlbGltaXRlcnNcbiAgICAgICAgdmFyIG1hdGNoZWREZWxpbWl0ZXIgPSAnJztcbiAgICAgICAgZGVsaW1pdGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2xpY2UoLWN1cnJlbnQubGVuZ3RoKSA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICAgIG1hdGNoZWREZWxpbWl0ZXIgPSBjdXJyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbWF0Y2hlZERlbGltaXRlcjtcbiAgICB9LFxuXG4gICAgZ2V0RGVsaW1pdGVyUkVCeURlbGltaXRlcjogZnVuY3Rpb24gKGRlbGltaXRlcikge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChkZWxpbWl0ZXIucmVwbGFjZSgvKFsuPyorXiRbXFxdXFxcXCgpe318LV0pL2csICdcXFxcJDEnKSwgJ2cnKTtcbiAgICB9LFxuXG4gICAgZ2V0TmV4dEN1cnNvclBvc2l0aW9uOiBmdW5jdGlvbiAocHJldlBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpIHtcbiAgICAgIC8vIElmIGN1cnNvciB3YXMgYXQgdGhlIGVuZCBvZiB2YWx1ZSwganVzdCBwbGFjZSBpdCBiYWNrLlxuICAgICAgLy8gQmVjYXVzZSBuZXcgdmFsdWUgY291bGQgY29udGFpbiBhZGRpdGlvbmFsIGNoYXJzLlxuICAgICAgaWYgKG9sZFZhbHVlLmxlbmd0aCA9PT0gcHJldlBvcykge1xuICAgICAgICAgIHJldHVybiBuZXdWYWx1ZS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2UG9zICsgdGhpcy5nZXRQb3NpdGlvbk9mZnNldChwcmV2UG9zLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIGRlbGltaXRlciAsZGVsaW1pdGVycyk7XG4gICAgfSxcblxuICAgIGdldFBvc2l0aW9uT2Zmc2V0OiBmdW5jdGlvbiAocHJldlBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBkZWxpbWl0ZXIsIGRlbGltaXRlcnMpIHtcbiAgICAgICAgdmFyIG9sZFJhd1ZhbHVlLCBuZXdSYXdWYWx1ZSwgbGVuZ3RoT2Zmc2V0O1xuXG4gICAgICAgIG9sZFJhd1ZhbHVlID0gdGhpcy5zdHJpcERlbGltaXRlcnMob2xkVmFsdWUuc2xpY2UoMCwgcHJldlBvcyksIGRlbGltaXRlciwgZGVsaW1pdGVycyk7XG4gICAgICAgIG5ld1Jhd1ZhbHVlID0gdGhpcy5zdHJpcERlbGltaXRlcnMobmV3VmFsdWUuc2xpY2UoMCwgcHJldlBvcyksIGRlbGltaXRlciwgZGVsaW1pdGVycyk7XG4gICAgICAgIGxlbmd0aE9mZnNldCA9IG9sZFJhd1ZhbHVlLmxlbmd0aCAtIG5ld1Jhd1ZhbHVlLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gKGxlbmd0aE9mZnNldCAhPT0gMCkgPyAobGVuZ3RoT2Zmc2V0IC8gTWF0aC5hYnMobGVuZ3RoT2Zmc2V0KSkgOiAwO1xuICAgIH0sXG5cbiAgICBzdHJpcERlbGltaXRlcnM6IGZ1bmN0aW9uICh2YWx1ZSwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXM7XG5cbiAgICAgICAgLy8gc2luZ2xlIGRlbGltaXRlclxuICAgICAgICBpZiAoZGVsaW1pdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHZhciBkZWxpbWl0ZXJSRSA9IGRlbGltaXRlciA/IG93bmVyLmdldERlbGltaXRlclJFQnlEZWxpbWl0ZXIoZGVsaW1pdGVyKSA6ICcnO1xuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShkZWxpbWl0ZXJSRSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbXVsdGlwbGUgZGVsaW1pdGVyc1xuICAgICAgICBkZWxpbWl0ZXJzLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShvd25lci5nZXREZWxpbWl0ZXJSRUJ5RGVsaW1pdGVyKGxldHRlciksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcblxuICAgIGhlYWRTdHI6IGZ1bmN0aW9uIChzdHIsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfSxcblxuICAgIGdldE1heExlbmd0aDogZnVuY3Rpb24gKGJsb2Nrcykge1xuICAgICAgICByZXR1cm4gYmxvY2tzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIGN1cnJlbnQ7XG4gICAgICAgIH0sIDApO1xuICAgIH0sXG5cbiAgICAvLyBzdHJpcCBwcmVmaXhcbiAgICAvLyBCZWZvcmUgdHlwZSAgfCAgIEFmdGVyIHR5cGUgICAgfCAgICAgUmV0dXJuIHZhbHVlXG4gICAgLy8gUEVGSVgtLi4uICAgIHwgICBQRUZJWC0uLi4gICAgIHwgICAgICcnXG4gICAgLy8gUFJFRklYLTEyMyAgIHwgICBQRUZJWC0xMjMgICAgIHwgICAgIDEyM1xuICAgIC8vIFBSRUZJWC0xMjMgICB8ICAgUFJFRklYLTIzICAgICB8ICAgICAyM1xuICAgIC8vIFBSRUZJWC0xMjMgICB8ICAgUFJFRklYLTEyMzQgICB8ICAgICAxMjM0XG4gICAgZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBwcmVmaXgsIHByZWZpeExlbmd0aCwgcHJldlJlc3VsdCwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzLCBub0ltbWVkaWF0ZVByZWZpeCwgdGFpbFByZWZpeCwgc2lnbkJlZm9yZVByZWZpeCkge1xuICAgICAgICAvLyBObyBwcmVmaXhcbiAgICAgICAgaWYgKHByZWZpeExlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbHVlIGlzIHByZWZpeFxuICAgICAgICBpZiAodmFsdWUgPT09IHByZWZpeCAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2lnbkJlZm9yZVByZWZpeCAmJiAodmFsdWUuc2xpY2UoMCwgMSkgPT0gJy0nKSkge1xuICAgICAgICAgICAgdmFyIHByZXYgPSAocHJldlJlc3VsdC5zbGljZSgwLCAxKSA9PSAnLScpID8gcHJldlJlc3VsdC5zbGljZSgxKSA6IHByZXZSZXN1bHQ7XG4gICAgICAgICAgICByZXR1cm4gJy0nICsgdGhpcy5nZXRQcmVmaXhTdHJpcHBlZFZhbHVlKHZhbHVlLnNsaWNlKDEpLCBwcmVmaXgsIHByZWZpeExlbmd0aCwgcHJldiwgZGVsaW1pdGVyLCBkZWxpbWl0ZXJzLCBub0ltbWVkaWF0ZVByZWZpeCwgdGFpbFByZWZpeCwgc2lnbkJlZm9yZVByZWZpeCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQcmUgcmVzdWx0IHByZWZpeCBzdHJpbmcgZG9lcyBub3QgbWF0Y2ggcHJlLWRlZmluZWQgcHJlZml4XG4gICAgICAgIGlmIChwcmV2UmVzdWx0LnNsaWNlKDAsIHByZWZpeExlbmd0aCkgIT09IHByZWZpeCAmJiAhdGFpbFByZWZpeCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZpcnN0IHRpbWUgdXNlciBlbnRlcmVkIHNvbWV0aGluZ1xuICAgICAgICAgICAgaWYgKG5vSW1tZWRpYXRlUHJlZml4ICYmICFwcmV2UmVzdWx0ICYmIHZhbHVlKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldlJlc3VsdC5zbGljZSgtcHJlZml4TGVuZ3RoKSAhPT0gcHJlZml4ICYmIHRhaWxQcmVmaXgpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBmaXJzdCB0aW1lIHVzZXIgZW50ZXJlZCBzb21ldGhpbmdcbiAgICAgICAgICAgIGlmIChub0ltbWVkaWF0ZVByZWZpeCAmJiAhcHJldlJlc3VsdCAmJiB2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByZXZWYWx1ZSA9IHRoaXMuc3RyaXBEZWxpbWl0ZXJzKHByZXZSZXN1bHQsIGRlbGltaXRlciwgZGVsaW1pdGVycyk7XG5cbiAgICAgICAgLy8gTmV3IHZhbHVlIGhhcyBpc3N1ZSwgc29tZW9uZSB0eXBlZCBpbiBiZXR3ZWVuIHByZWZpeCBsZXR0ZXJzXG4gICAgICAgIC8vIFJldmVydCB0byBwcmUgdmFsdWVcbiAgICAgICAgaWYgKHZhbHVlLnNsaWNlKDAsIHByZWZpeExlbmd0aCkgIT09IHByZWZpeCAmJiAhdGFpbFByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZWYWx1ZS5zbGljZShwcmVmaXhMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnNsaWNlKC1wcmVmaXhMZW5ndGgpICE9PSBwcmVmaXggJiYgdGFpbFByZWZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZWYWx1ZS5zbGljZSgwLCAtcHJlZml4TGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBpc3N1ZSwgc3RyaXAgcHJlZml4IGZvciBuZXcgdmFsdWVcbiAgICAgICAgcmV0dXJuIHRhaWxQcmVmaXggPyB2YWx1ZS5zbGljZSgwLCAtcHJlZml4TGVuZ3RoKSA6IHZhbHVlLnNsaWNlKHByZWZpeExlbmd0aCk7XG4gICAgfSxcblxuICAgIGdldEZpcnN0RGlmZkluZGV4OiBmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICAgIHdoaWxlIChwcmV2LmNoYXJBdChpbmRleCkgPT09IGN1cnJlbnQuY2hhckF0KGluZGV4KSkge1xuICAgICAgICAgICAgaWYgKHByZXYuY2hhckF0KGluZGV4KyspID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgYmxvY2tzLCBibG9ja3NMZW5ndGgsIGRlbGltaXRlciwgZGVsaW1pdGVycywgZGVsaW1pdGVyTGF6eVNob3cpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLFxuICAgICAgICAgICAgbXVsdGlwbGVEZWxpbWl0ZXJzID0gZGVsaW1pdGVycy5sZW5ndGggPiAwLFxuICAgICAgICAgICAgY3VycmVudERlbGltaXRlciA9ICcnO1xuXG4gICAgICAgIC8vIG5vIG9wdGlvbnMsIG5vcm1hbCBpbnB1dFxuICAgICAgICBpZiAoYmxvY2tzTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAobGVuZ3RoLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gdmFsdWUuc2xpY2UoMCwgbGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdCA9IHZhbHVlLnNsaWNlKGxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlwbGVEZWxpbWl0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnREZWxpbWl0ZXIgPSBkZWxpbWl0ZXJzW2RlbGltaXRlckxhenlTaG93ID8gKGluZGV4IC0gMSkgOiBpbmRleF0gfHwgY3VycmVudERlbGltaXRlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50RGVsaW1pdGVyID0gZGVsaW1pdGVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkZWxpbWl0ZXJMYXp5U2hvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gY3VycmVudERlbGltaXRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdWI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN1YjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3ViLmxlbmd0aCA9PT0gbGVuZ3RoICYmIGluZGV4IDwgYmxvY2tzTGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGN1cnJlbnREZWxpbWl0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgcmVtYWluaW5nIHN0cmluZ1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgLy8gbW92ZSBjdXJzb3IgdG8gdGhlIGVuZFxuICAgIC8vIHRoZSBmaXJzdCB0aW1lIHVzZXIgZm9jdXNlcyBvbiBhbiBpbnB1dCB3aXRoIHByZWZpeFxuICAgIGZpeFByZWZpeEN1cnNvcjogZnVuY3Rpb24gKGVsLCBwcmVmaXgsIGRlbGltaXRlciwgZGVsaW1pdGVycykge1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsID0gZWwudmFsdWUsXG4gICAgICAgICAgICBhcHBlbmRpeCA9IGRlbGltaXRlciB8fCAoZGVsaW1pdGVyc1swXSB8fCAnICcpO1xuXG4gICAgICAgIGlmICghZWwuc2V0U2VsZWN0aW9uUmFuZ2UgfHwgIXByZWZpeCB8fCAocHJlZml4Lmxlbmd0aCArIGFwcGVuZGl4Lmxlbmd0aCkgPD0gdmFsLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlbiA9IHZhbC5sZW5ndGggKiAyO1xuXG4gICAgICAgIC8vIHNldCB0aW1lb3V0IHRvIGF2b2lkIGJsaW5rXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZWwuc2V0U2VsZWN0aW9uUmFuZ2UobGVuLCBsZW4pO1xuICAgICAgICB9LCAxKTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2sgaWYgaW5wdXQgZmllbGQgaXMgZnVsbHkgc2VsZWN0ZWRcbiAgICBjaGVja0Z1bGxTZWxlY3Rpb246IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpIHx8IGRvY3VtZW50LmdldFNlbGVjdGlvbigpIHx8IHt9O1xuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnRvU3RyaW5nKCkubGVuZ3RoID09PSB2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBJZ25vcmVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChlbGVtZW50LCBwb3NpdGlvbiwgZG9jKSB7XG4gICAgICAgIGlmIChlbGVtZW50ICE9PSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoZG9jKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3Vyc29yIGlzIGFscmVhZHkgaW4gdGhlIGVuZFxuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnZhbHVlLmxlbmd0aCA8PSBwb3NpdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50LmNyZWF0ZVRleHRSYW5nZSkge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZWxlbWVudC5jcmVhdGVUZXh0UmFuZ2UoKTtcblxuICAgICAgICAgICAgcmFuZ2UubW92ZSgnY2hhcmFjdGVyJywgcG9zaXRpb24pO1xuICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UocG9zaXRpb24sIHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBpbnB1dCBlbGVtZW50IHR5cGUgZG9lcyBub3Qgc3VwcG9ydCBzZWxlY3Rpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRBY3RpdmVFbGVtZW50OiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBwYXJlbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBY3RpdmVFbGVtZW50KGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgfSxcblxuICAgIGlzQW5kcm9pZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yICYmIC9hbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB9LFxuXG4gICAgLy8gT24gQW5kcm9pZCBjaHJvbWUsIHRoZSBrZXl1cCBhbmQga2V5ZG93biBldmVudHNcbiAgICAvLyBhbHdheXMgcmV0dXJuIGtleSBjb2RlIDIyOSBhcyBhIGNvbXBvc2l0aW9uIHRoYXRcbiAgICAvLyBidWZmZXJzIHRoZSB1c2Vy4oCZcyBrZXlzdHJva2VzXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ub3Npci9jbGVhdmUuanMvaXNzdWVzLzE0N1xuICAgIGlzQW5kcm9pZEJhY2tzcGFjZUtleWRvd246IGZ1bmN0aW9uIChsYXN0SW5wdXRWYWx1ZSwgY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQW5kcm9pZCgpIHx8ICFsYXN0SW5wdXRWYWx1ZSB8fCAhY3VycmVudElucHV0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50SW5wdXRWYWx1ZSA9PT0gbGFzdElucHV0VmFsdWUuc2xpY2UoMCwgLTEpO1xuICAgIH1cbn07XG5cbnZhciBVdGlsXzEgPSBVdGlsO1xuXG4vKipcbiAqIFByb3BzIEFzc2lnbm1lbnRcbiAqXG4gKiBTZXBhcmF0ZSB0aGlzLCBzbyByZWFjdCBtb2R1bGUgY2FuIHNoYXJlIHRoZSB1c2FnZVxuICovXG52YXIgRGVmYXVsdFByb3BlcnRpZXMgPSB7XG4gICAgLy8gTWF5YmUgY2hhbmdlIHRvIG9iamVjdC1hc3NpZ25cbiAgICAvLyBmb3Igbm93IGp1c3Qga2VlcCBpdCBhcyBzaW1wbGVcbiAgICBhc3NpZ246IGZ1bmN0aW9uICh0YXJnZXQsIG9wdHMpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICAgICAgICAvLyBjcmVkaXQgY2FyZFxuICAgICAgICB0YXJnZXQuY3JlZGl0Q2FyZCA9ICEhb3B0cy5jcmVkaXRDYXJkO1xuICAgICAgICB0YXJnZXQuY3JlZGl0Q2FyZFN0cmljdE1vZGUgPSAhIW9wdHMuY3JlZGl0Q2FyZFN0cmljdE1vZGU7XG4gICAgICAgIHRhcmdldC5jcmVkaXRDYXJkVHlwZSA9ICcnO1xuICAgICAgICB0YXJnZXQub25DcmVkaXRDYXJkVHlwZUNoYW5nZWQgPSBvcHRzLm9uQ3JlZGl0Q2FyZFR5cGVDaGFuZ2VkIHx8IChmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgdGFyZ2V0LnBob25lID0gISFvcHRzLnBob25lO1xuICAgICAgICB0YXJnZXQucGhvbmVSZWdpb25Db2RlID0gb3B0cy5waG9uZVJlZ2lvbkNvZGUgfHwgJ0FVJztcbiAgICAgICAgdGFyZ2V0LnBob25lRm9ybWF0dGVyID0ge307XG5cbiAgICAgICAgLy8gdGltZVxuICAgICAgICB0YXJnZXQudGltZSA9ICEhb3B0cy50aW1lO1xuICAgICAgICB0YXJnZXQudGltZVBhdHRlcm4gPSBvcHRzLnRpbWVQYXR0ZXJuIHx8IFsnaCcsICdtJywgJ3MnXTtcbiAgICAgICAgdGFyZ2V0LnRpbWVGb3JtYXQgPSBvcHRzLnRpbWVGb3JtYXQgfHwgJzI0JztcbiAgICAgICAgdGFyZ2V0LnRpbWVGb3JtYXR0ZXIgPSB7fTtcblxuICAgICAgICAvLyBkYXRlXG4gICAgICAgIHRhcmdldC5kYXRlID0gISFvcHRzLmRhdGU7XG4gICAgICAgIHRhcmdldC5kYXRlUGF0dGVybiA9IG9wdHMuZGF0ZVBhdHRlcm4gfHwgWydkJywgJ20nLCAnWSddO1xuICAgICAgICB0YXJnZXQuZGF0ZU1pbiA9IG9wdHMuZGF0ZU1pbiB8fCAnJztcbiAgICAgICAgdGFyZ2V0LmRhdGVNYXggPSBvcHRzLmRhdGVNYXggfHwgJyc7XG4gICAgICAgIHRhcmdldC5kYXRlRm9ybWF0dGVyID0ge307XG5cbiAgICAgICAgLy8gbnVtZXJhbFxuICAgICAgICB0YXJnZXQubnVtZXJhbCA9ICEhb3B0cy5udW1lcmFsO1xuICAgICAgICB0YXJnZXQubnVtZXJhbEludGVnZXJTY2FsZSA9IG9wdHMubnVtZXJhbEludGVnZXJTY2FsZSA+IDAgPyBvcHRzLm51bWVyYWxJbnRlZ2VyU2NhbGUgOiAwO1xuICAgICAgICB0YXJnZXQubnVtZXJhbERlY2ltYWxTY2FsZSA9IG9wdHMubnVtZXJhbERlY2ltYWxTY2FsZSA+PSAwID8gb3B0cy5udW1lcmFsRGVjaW1hbFNjYWxlIDogMjtcbiAgICAgICAgdGFyZ2V0Lm51bWVyYWxEZWNpbWFsTWFyayA9IG9wdHMubnVtZXJhbERlY2ltYWxNYXJrIHx8ICcuJztcbiAgICAgICAgdGFyZ2V0Lm51bWVyYWxUaG91c2FuZHNHcm91cFN0eWxlID0gb3B0cy5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSB8fCAndGhvdXNhbmQnO1xuICAgICAgICB0YXJnZXQubnVtZXJhbFBvc2l0aXZlT25seSA9ICEhb3B0cy5udW1lcmFsUG9zaXRpdmVPbmx5O1xuICAgICAgICB0YXJnZXQuc3RyaXBMZWFkaW5nWmVyb2VzID0gb3B0cy5zdHJpcExlYWRpbmdaZXJvZXMgIT09IGZhbHNlO1xuICAgICAgICB0YXJnZXQuc2lnbkJlZm9yZVByZWZpeCA9ICEhb3B0cy5zaWduQmVmb3JlUHJlZml4O1xuICAgICAgICB0YXJnZXQudGFpbFByZWZpeCA9ICEhb3B0cy50YWlsUHJlZml4O1xuXG4gICAgICAgIC8vIG90aGVyc1xuICAgICAgICB0YXJnZXQuc3dhcEhpZGRlbklucHV0ID0gISFvcHRzLnN3YXBIaWRkZW5JbnB1dDtcbiAgICAgICAgXG4gICAgICAgIHRhcmdldC5udW1lcmljT25seSA9IHRhcmdldC5jcmVkaXRDYXJkIHx8IHRhcmdldC5kYXRlIHx8ICEhb3B0cy5udW1lcmljT25seTtcblxuICAgICAgICB0YXJnZXQudXBwZXJjYXNlID0gISFvcHRzLnVwcGVyY2FzZTtcbiAgICAgICAgdGFyZ2V0Lmxvd2VyY2FzZSA9ICEhb3B0cy5sb3dlcmNhc2U7XG5cbiAgICAgICAgdGFyZ2V0LnByZWZpeCA9ICh0YXJnZXQuY3JlZGl0Q2FyZCB8fCB0YXJnZXQuZGF0ZSkgPyAnJyA6IChvcHRzLnByZWZpeCB8fCAnJyk7XG4gICAgICAgIHRhcmdldC5ub0ltbWVkaWF0ZVByZWZpeCA9ICEhb3B0cy5ub0ltbWVkaWF0ZVByZWZpeDtcbiAgICAgICAgdGFyZ2V0LnByZWZpeExlbmd0aCA9IHRhcmdldC5wcmVmaXgubGVuZ3RoO1xuICAgICAgICB0YXJnZXQucmF3VmFsdWVUcmltUHJlZml4ID0gISFvcHRzLnJhd1ZhbHVlVHJpbVByZWZpeDtcbiAgICAgICAgdGFyZ2V0LmNvcHlEZWxpbWl0ZXIgPSAhIW9wdHMuY29weURlbGltaXRlcjtcblxuICAgICAgICB0YXJnZXQuaW5pdFZhbHVlID0gKG9wdHMuaW5pdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgb3B0cy5pbml0VmFsdWUgIT09IG51bGwpID8gb3B0cy5pbml0VmFsdWUudG9TdHJpbmcoKSA6ICcnO1xuXG4gICAgICAgIHRhcmdldC5kZWxpbWl0ZXIgPVxuICAgICAgICAgICAgKG9wdHMuZGVsaW1pdGVyIHx8IG9wdHMuZGVsaW1pdGVyID09PSAnJykgPyBvcHRzLmRlbGltaXRlciA6XG4gICAgICAgICAgICAgICAgKG9wdHMuZGF0ZSA/ICcvJyA6XG4gICAgICAgICAgICAgICAgICAgIChvcHRzLnRpbWUgPyAnOicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgKG9wdHMubnVtZXJhbCA/ICcsJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdHMucGhvbmUgPyAnICcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICcpKSkpO1xuICAgICAgICB0YXJnZXQuZGVsaW1pdGVyTGVuZ3RoID0gdGFyZ2V0LmRlbGltaXRlci5sZW5ndGg7XG4gICAgICAgIHRhcmdldC5kZWxpbWl0ZXJMYXp5U2hvdyA9ICEhb3B0cy5kZWxpbWl0ZXJMYXp5U2hvdztcbiAgICAgICAgdGFyZ2V0LmRlbGltaXRlcnMgPSBvcHRzLmRlbGltaXRlcnMgfHwgW107XG5cbiAgICAgICAgdGFyZ2V0LmJsb2NrcyA9IG9wdHMuYmxvY2tzIHx8IFtdO1xuICAgICAgICB0YXJnZXQuYmxvY2tzTGVuZ3RoID0gdGFyZ2V0LmJsb2Nrcy5sZW5ndGg7XG5cbiAgICAgICAgdGFyZ2V0LnJvb3QgPSAodHlwZW9mIGNvbW1vbmpzR2xvYmFsID09PSAnb2JqZWN0JyAmJiBjb21tb25qc0dsb2JhbCkgPyBjb21tb25qc0dsb2JhbCA6IHdpbmRvdztcbiAgICAgICAgdGFyZ2V0LmRvY3VtZW50ID0gb3B0cy5kb2N1bWVudCB8fCB0YXJnZXQucm9vdC5kb2N1bWVudDtcblxuICAgICAgICB0YXJnZXQubWF4TGVuZ3RoID0gMDtcblxuICAgICAgICB0YXJnZXQuYmFja3NwYWNlID0gZmFsc2U7XG4gICAgICAgIHRhcmdldC5yZXN1bHQgPSAnJztcblxuICAgICAgICB0YXJnZXQub25WYWx1ZUNoYW5nZWQgPSBvcHRzLm9uVmFsdWVDaGFuZ2VkIHx8IChmdW5jdGlvbiAoKSB7fSk7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG59O1xuXG52YXIgRGVmYXVsdFByb3BlcnRpZXNfMSA9IERlZmF1bHRQcm9wZXJ0aWVzO1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIG5ldyBDbGVhdmUgaW5zdGFuY2UgYnkgcGFzc2luZyB0aGUgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZyB8IEhUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICovXG52YXIgQ2xlYXZlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdHMpIHtcbiAgICB2YXIgb3duZXIgPSB0aGlzO1xuICAgIHZhciBoYXNNdWx0aXBsZUVsZW1lbnRzID0gZmFsc2U7XG5cbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG93bmVyLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgICBoYXNNdWx0aXBsZUVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtZW50KS5sZW5ndGggPiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQubGVuZ3RoICE9PSAndW5kZWZpbmVkJyAmJiBlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgb3duZXIuZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgICAgIGhhc011bHRpcGxlRWxlbWVudHMgPSBlbGVtZW50Lmxlbmd0aCA+IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lci5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIW93bmVyLmVsZW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbY2xlYXZlLmpzXSBQbGVhc2UgY2hlY2sgdGhlIGVsZW1lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAoaGFzTXVsdGlwbGVFbGVtZW50cykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnNvbGUud2FybignW2NsZWF2ZS5qc10gTXVsdGlwbGUgaW5wdXQgZmllbGRzIG1hdGNoZWQsIGNsZWF2ZS5qcyB3aWxsIG9ubHkgdGFrZSB0aGUgZmlyc3Qgb25lLicpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBPbGQgSUVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRzLmluaXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWU7XG5cbiAgICBvd25lci5wcm9wZXJ0aWVzID0gQ2xlYXZlLkRlZmF1bHRQcm9wZXJ0aWVzLmFzc2lnbih7fSwgb3B0cyk7XG5cbiAgICBvd25lci5pbml0KCk7XG59O1xuXG5DbGVhdmUucHJvdG90eXBlID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICAvLyBubyBuZWVkIHRvIHVzZSB0aGlzIGxpYlxuICAgICAgICBpZiAoIXBwcy5udW1lcmFsICYmICFwcHMucGhvbmUgJiYgIXBwcy5jcmVkaXRDYXJkICYmICFwcHMudGltZSAmJiAhcHBzLmRhdGUgJiYgKHBwcy5ibG9ja3NMZW5ndGggPT09IDAgJiYgIXBwcy5wcmVmaXgpKSB7XG4gICAgICAgICAgICBvd25lci5vbklucHV0KHBwcy5pbml0VmFsdWUpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcHMubWF4TGVuZ3RoID0gQ2xlYXZlLlV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuXG4gICAgICAgIG93bmVyLmlzQW5kcm9pZCA9IENsZWF2ZS5VdGlsLmlzQW5kcm9pZCgpO1xuICAgICAgICBvd25lci5sYXN0SW5wdXRWYWx1ZSA9ICcnO1xuICAgICAgICBvd25lci5pc0JhY2t3YXJkID0gJyc7XG5cbiAgICAgICAgb3duZXIub25DaGFuZ2VMaXN0ZW5lciA9IG93bmVyLm9uQ2hhbmdlLmJpbmQob3duZXIpO1xuICAgICAgICBvd25lci5vbktleURvd25MaXN0ZW5lciA9IG93bmVyLm9uS2V5RG93bi5iaW5kKG93bmVyKTtcbiAgICAgICAgb3duZXIub25Gb2N1c0xpc3RlbmVyID0gb3duZXIub25Gb2N1cy5iaW5kKG93bmVyKTtcbiAgICAgICAgb3duZXIub25DdXRMaXN0ZW5lciA9IG93bmVyLm9uQ3V0LmJpbmQob3duZXIpO1xuICAgICAgICBvd25lci5vbkNvcHlMaXN0ZW5lciA9IG93bmVyLm9uQ29weS5iaW5kKG93bmVyKTtcblxuICAgICAgICBvd25lci5pbml0U3dhcEhpZGRlbklucHV0KCk7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIG93bmVyLm9uQ2hhbmdlTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvd25lci5vbktleURvd25MaXN0ZW5lcik7XG4gICAgICAgIG93bmVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBvd25lci5vbkZvY3VzTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2N1dCcsIG93bmVyLm9uQ3V0TGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvcHknLCBvd25lci5vbkNvcHlMaXN0ZW5lcik7XG5cblxuICAgICAgICBvd25lci5pbml0UGhvbmVGb3JtYXR0ZXIoKTtcbiAgICAgICAgb3duZXIuaW5pdERhdGVGb3JtYXR0ZXIoKTtcbiAgICAgICAgb3duZXIuaW5pdFRpbWVGb3JtYXR0ZXIoKTtcbiAgICAgICAgb3duZXIuaW5pdE51bWVyYWxGb3JtYXR0ZXIoKTtcblxuICAgICAgICAvLyBhdm9pZCB0b3VjaCBpbnB1dCBmaWVsZCBpZiB2YWx1ZSBpcyBudWxsXG4gICAgICAgIC8vIG90aGVyd2lzZSBGaXJlZm94IHdpbGwgYWRkIHJlZCBib3gtc2hhZG93IGZvciA8aW5wdXQgcmVxdWlyZWQgLz5cbiAgICAgICAgaWYgKHBwcy5pbml0VmFsdWUgfHwgKHBwcy5wcmVmaXggJiYgIXBwcy5ub0ltbWVkaWF0ZVByZWZpeCkpIHtcbiAgICAgICAgICAgIG93bmVyLm9uSW5wdXQocHBzLmluaXRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdFN3YXBIaWRkZW5JbnB1dDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuICAgICAgICBpZiAoIXBwcy5zd2FwSGlkZGVuSW5wdXQpIHJldHVybjtcblxuICAgICAgICB2YXIgaW5wdXRGb3JtYXR0ZXIgPSBvd25lci5lbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnB1dEZvcm1hdHRlciwgb3duZXIuZWxlbWVudCk7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudFN3YXBIaWRkZW4gPSBvd25lci5lbGVtZW50O1xuICAgICAgICBvd25lci5lbGVtZW50U3dhcEhpZGRlbi50eXBlID0gJ2hpZGRlbic7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudCA9IGlucHV0Rm9ybWF0dGVyO1xuICAgICAgICBvd25lci5lbGVtZW50LmlkID0gJyc7XG4gICAgfSxcblxuICAgIGluaXROdW1lcmFsRm9ybWF0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgaWYgKCFwcHMubnVtZXJhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHBzLm51bWVyYWxGb3JtYXR0ZXIgPSBuZXcgQ2xlYXZlLk51bWVyYWxGb3JtYXR0ZXIoXG4gICAgICAgICAgICBwcHMubnVtZXJhbERlY2ltYWxNYXJrLFxuICAgICAgICAgICAgcHBzLm51bWVyYWxJbnRlZ2VyU2NhbGUsXG4gICAgICAgICAgICBwcHMubnVtZXJhbERlY2ltYWxTY2FsZSxcbiAgICAgICAgICAgIHBwcy5udW1lcmFsVGhvdXNhbmRzR3JvdXBTdHlsZSxcbiAgICAgICAgICAgIHBwcy5udW1lcmFsUG9zaXRpdmVPbmx5LFxuICAgICAgICAgICAgcHBzLnN0cmlwTGVhZGluZ1plcm9lcyxcbiAgICAgICAgICAgIHBwcy5wcmVmaXgsXG4gICAgICAgICAgICBwcHMuc2lnbkJlZm9yZVByZWZpeCxcbiAgICAgICAgICAgIHBwcy50YWlsUHJlZml4LFxuICAgICAgICAgICAgcHBzLmRlbGltaXRlclxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBpbml0VGltZUZvcm1hdHRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgaWYgKCFwcHMudGltZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcHBzLnRpbWVGb3JtYXR0ZXIgPSBuZXcgQ2xlYXZlLlRpbWVGb3JtYXR0ZXIocHBzLnRpbWVQYXR0ZXJuLCBwcHMudGltZUZvcm1hdCk7XG4gICAgICAgIHBwcy5ibG9ja3MgPSBwcHMudGltZUZvcm1hdHRlci5nZXRCbG9ja3MoKTtcbiAgICAgICAgcHBzLmJsb2Nrc0xlbmd0aCA9IHBwcy5ibG9ja3MubGVuZ3RoO1xuICAgICAgICBwcHMubWF4TGVuZ3RoID0gQ2xlYXZlLlV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuICAgIH0sXG5cbiAgICBpbml0RGF0ZUZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghcHBzLmRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBwcy5kYXRlRm9ybWF0dGVyID0gbmV3IENsZWF2ZS5EYXRlRm9ybWF0dGVyKHBwcy5kYXRlUGF0dGVybiwgcHBzLmRhdGVNaW4sIHBwcy5kYXRlTWF4KTtcbiAgICAgICAgcHBzLmJsb2NrcyA9IHBwcy5kYXRlRm9ybWF0dGVyLmdldEJsb2NrcygpO1xuICAgICAgICBwcHMuYmxvY2tzTGVuZ3RoID0gcHBzLmJsb2Nrcy5sZW5ndGg7XG4gICAgICAgIHBwcy5tYXhMZW5ndGggPSBDbGVhdmUuVXRpbC5nZXRNYXhMZW5ndGgocHBzLmJsb2Nrcyk7XG4gICAgfSxcblxuICAgIGluaXRQaG9uZUZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghcHBzLnBob25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhdmUuQXNZb3VUeXBlRm9ybWF0dGVyIHNob3VsZCBiZSBwcm92aWRlZCBieVxuICAgICAgICAvLyBleHRlcm5hbCBnb29nbGUgY2xvc3VyZSBsaWJcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBwcy5waG9uZUZvcm1hdHRlciA9IG5ldyBDbGVhdmUuUGhvbmVGb3JtYXR0ZXIoXG4gICAgICAgICAgICAgICAgbmV3IHBwcy5yb290LkNsZWF2ZS5Bc1lvdVR5cGVGb3JtYXR0ZXIocHBzLnBob25lUmVnaW9uQ29kZSksXG4gICAgICAgICAgICAgICAgcHBzLmRlbGltaXRlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW2NsZWF2ZS5qc10gUGxlYXNlIGluY2x1ZGUgcGhvbmUtdHlwZS1mb3JtYXR0ZXIue2NvdW50cnl9LmpzIGxpYicpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBjaGFyQ29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgICAgb3duZXIubGFzdElucHV0VmFsdWUgPSBvd25lci5lbGVtZW50LnZhbHVlO1xuICAgICAgICBvd25lci5pc0JhY2t3YXJkID0gY2hhckNvZGUgPT09IDg7XG4gICAgfSxcblxuICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcyxcbiAgICAgICAgICAgIFV0aWwgPSBDbGVhdmUuVXRpbDtcblxuICAgICAgICBvd25lci5pc0JhY2t3YXJkID0gb3duZXIuaXNCYWNrd2FyZCB8fCBldmVudC5pbnB1dFR5cGUgPT09ICdkZWxldGVDb250ZW50QmFja3dhcmQnO1xuXG4gICAgICAgIHZhciBwb3N0RGVsaW1pdGVyID0gVXRpbC5nZXRQb3N0RGVsaW1pdGVyKG93bmVyLmxhc3RJbnB1dFZhbHVlLCBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycyk7XG5cbiAgICAgICAgaWYgKG93bmVyLmlzQmFja3dhcmQgJiYgcG9zdERlbGltaXRlcikge1xuICAgICAgICAgICAgcHBzLnBvc3REZWxpbWl0ZXJCYWNrc3BhY2UgPSBwb3N0RGVsaW1pdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHBzLnBvc3REZWxpbWl0ZXJCYWNrc3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25JbnB1dCh0aGlzLmVsZW1lbnQudmFsdWUpO1xuICAgIH0sXG5cbiAgICBvbkZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuICAgICAgICBvd25lci5sYXN0SW5wdXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgaWYgKHBwcy5wcmVmaXggJiYgcHBzLm5vSW1tZWRpYXRlUHJlZml4ICYmICFvd25lci5lbGVtZW50LnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm9uSW5wdXQocHBzLnByZWZpeCk7XG4gICAgICAgIH1cblxuICAgICAgICBDbGVhdmUuVXRpbC5maXhQcmVmaXhDdXJzb3Iob3duZXIuZWxlbWVudCwgcHBzLnByZWZpeCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgIH0sXG5cbiAgICBvbkN1dDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFDbGVhdmUuVXRpbC5jaGVja0Z1bGxTZWxlY3Rpb24odGhpcy5lbGVtZW50LnZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvcHlDbGlwYm9hcmREYXRhKGUpO1xuICAgICAgICB0aGlzLm9uSW5wdXQoJycpO1xuICAgIH0sXG5cbiAgICBvbkNvcHk6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghQ2xlYXZlLlV0aWwuY2hlY2tGdWxsU2VsZWN0aW9uKHRoaXMuZWxlbWVudC52YWx1ZSkpIHJldHVybjtcbiAgICAgICAgdGhpcy5jb3B5Q2xpcGJvYXJkRGF0YShlKTtcbiAgICB9LFxuXG4gICAgY29weUNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWUsXG4gICAgICAgICAgICB0ZXh0VG9Db3B5ID0gJyc7XG5cbiAgICAgICAgaWYgKCFwcHMuY29weURlbGltaXRlcikge1xuICAgICAgICAgICAgdGV4dFRvQ29weSA9IFV0aWwuc3RyaXBEZWxpbWl0ZXJzKGlucHV0VmFsdWUsIHBwcy5kZWxpbWl0ZXIsIHBwcy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRUb0NvcHkgPSBpbnB1dFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChlLmNsaXBib2FyZERhdGEpIHtcbiAgICAgICAgICAgICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgnVGV4dCcsIHRleHRUb0NvcHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCdUZXh0JywgdGV4dFRvQ29weSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIC8vICBlbXB0eVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uSW5wdXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLCBwcHMgPSBvd25lci5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgVXRpbCA9IENsZWF2ZS5VdGlsO1xuXG4gICAgICAgIC8vIGNhc2UgMTogZGVsZXRlIG9uZSBtb3JlIGNoYXJhY3RlciBcIjRcIlxuICAgICAgICAvLyAxMjM0KnwgLT4gaGl0IGJhY2tzcGFjZSAtPiAxMjN8XG4gICAgICAgIC8vIGNhc2UgMjogbGFzdCBjaGFyYWN0ZXIgaXMgbm90IGRlbGltaXRlciB3aGljaCBpczpcbiAgICAgICAgLy8gMTJ8MzQqIC0+IGhpdCBiYWNrc3BhY2UgLT4gMXwzNCpcbiAgICAgICAgLy8gbm90ZTogbm8gbmVlZCB0byBhcHBseSB0aGlzIGZvciBudW1lcmFsIG1vZGVcbiAgICAgICAgdmFyIHBvc3REZWxpbWl0ZXJBZnRlciA9IFV0aWwuZ2V0UG9zdERlbGltaXRlcih2YWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuICAgICAgICBpZiAoIXBwcy5udW1lcmFsICYmIHBwcy5wb3N0RGVsaW1pdGVyQmFja3NwYWNlICYmICFwb3N0RGVsaW1pdGVyQWZ0ZXIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gVXRpbC5oZWFkU3RyKHZhbHVlLCB2YWx1ZS5sZW5ndGggLSBwcHMucG9zdERlbGltaXRlckJhY2tzcGFjZS5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGhvbmUgZm9ybWF0dGVyXG4gICAgICAgIGlmIChwcHMucGhvbmUpIHtcbiAgICAgICAgICAgIGlmIChwcHMucHJlZml4ICYmICghcHBzLm5vSW1tZWRpYXRlUHJlZml4IHx8IHZhbHVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gcHBzLnByZWZpeCArIHBwcy5waG9uZUZvcm1hdHRlci5mb3JtYXQodmFsdWUpLnNsaWNlKHBwcy5wcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9IHBwcy5waG9uZUZvcm1hdHRlci5mb3JtYXQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBudW1lcmFsIGZvcm1hdHRlclxuICAgICAgICBpZiAocHBzLm51bWVyYWwpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCBzaG93IHByZWZpeCB3aGVuIG5vSW1tZWRpYXRlUHJlZml4IGlzIHNwZWNpZmllZFxuICAgICAgICAgICAgLy8gVGhpcyBtb3N0bHkgYmVjYXVzZSB3ZSBuZWVkIHRvIHNob3cgdXNlciB0aGUgbmF0aXZlIGlucHV0IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICBpZiAocHBzLnByZWZpeCAmJiBwcHMubm9JbW1lZGlhdGVQcmVmaXggJiYgdmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcHBzLnJlc3VsdCA9ICcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gcHBzLm51bWVyYWxGb3JtYXR0ZXIuZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG93bmVyLnVwZGF0ZVZhbHVlU3RhdGUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGF0ZVxuICAgICAgICBpZiAocHBzLmRhdGUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcHBzLmRhdGVGb3JtYXR0ZXIuZ2V0VmFsaWRhdGVkRGF0ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aW1lXG4gICAgICAgIGlmIChwcHMudGltZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBwcHMudGltZUZvcm1hdHRlci5nZXRWYWxpZGF0ZWRUaW1lKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0cmlwIGRlbGltaXRlcnNcbiAgICAgICAgdmFsdWUgPSBVdGlsLnN0cmlwRGVsaW1pdGVycyh2YWx1ZSwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMpO1xuXG4gICAgICAgIC8vIHN0cmlwIHByZWZpeFxuICAgICAgICB2YWx1ZSA9IFV0aWwuZ2V0UHJlZml4U3RyaXBwZWRWYWx1ZSh2YWx1ZSwgcHBzLnByZWZpeCwgcHBzLnByZWZpeExlbmd0aCwgcHBzLnJlc3VsdCwgcHBzLmRlbGltaXRlciwgcHBzLmRlbGltaXRlcnMsIHBwcy5ub0ltbWVkaWF0ZVByZWZpeCwgcHBzLnRhaWxQcmVmaXgsIHBwcy5zaWduQmVmb3JlUHJlZml4KTtcblxuICAgICAgICAvLyBzdHJpcCBub24tbnVtZXJpYyBjaGFyYWN0ZXJzXG4gICAgICAgIHZhbHVlID0gcHBzLm51bWVyaWNPbmx5ID8gVXRpbC5zdHJpcCh2YWx1ZSwgL1teXFxkXS9nKSA6IHZhbHVlO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgY2FzZVxuICAgICAgICB2YWx1ZSA9IHBwcy51cHBlcmNhc2UgPyB2YWx1ZS50b1VwcGVyQ2FzZSgpIDogdmFsdWU7XG4gICAgICAgIHZhbHVlID0gcHBzLmxvd2VyY2FzZSA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiB2YWx1ZTtcblxuICAgICAgICAvLyBwcmV2ZW50IGZyb20gc2hvd2luZyBwcmVmaXggd2hlbiBubyBpbW1lZGlhdGUgb3B0aW9uIGVuYWJsZWQgd2l0aCBlbXB0eSBpbnB1dCB2YWx1ZVxuICAgICAgICBpZiAocHBzLnByZWZpeCkge1xuICAgICAgICAgICAgaWYgKHBwcy50YWlsUHJlZml4KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSArIHBwcy5wcmVmaXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gcHBzLnByZWZpeCArIHZhbHVlO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIC8vIG5vIGJsb2NrcyBzcGVjaWZpZWQsIG5vIG5lZWQgdG8gZG8gZm9ybWF0dGluZ1xuICAgICAgICAgICAgaWYgKHBwcy5ibG9ja3NMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBwcHMucmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGNyZWRpdCBjYXJkIHByb3BzXG4gICAgICAgIGlmIChwcHMuY3JlZGl0Q2FyZCkge1xuICAgICAgICAgICAgb3duZXIudXBkYXRlQ3JlZGl0Q2FyZFByb3BzQnlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpcCBvdmVyIGxlbmd0aCBjaGFyYWN0ZXJzXG4gICAgICAgIHZhbHVlID0gVXRpbC5oZWFkU3RyKHZhbHVlLCBwcHMubWF4TGVuZ3RoKTtcblxuICAgICAgICAvLyBhcHBseSBibG9ja3NcbiAgICAgICAgcHBzLnJlc3VsdCA9IFV0aWwuZ2V0Rm9ybWF0dGVkVmFsdWUoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHBwcy5ibG9ja3MsIHBwcy5ibG9ja3NMZW5ndGgsXG4gICAgICAgICAgICBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycywgcHBzLmRlbGltaXRlckxhenlTaG93XG4gICAgICAgICk7XG5cbiAgICAgICAgb3duZXIudXBkYXRlVmFsdWVTdGF0ZSgpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVDcmVkaXRDYXJkUHJvcHNCeVZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcyxcbiAgICAgICAgICAgIFV0aWwgPSBDbGVhdmUuVXRpbCxcbiAgICAgICAgICAgIGNyZWRpdENhcmRJbmZvO1xuXG4gICAgICAgIC8vIEF0IGxlYXN0IG9uZSBvZiB0aGUgZmlyc3QgNCBjaGFyYWN0ZXJzIGhhcyBjaGFuZ2VkXG4gICAgICAgIGlmIChVdGlsLmhlYWRTdHIocHBzLnJlc3VsdCwgNCkgPT09IFV0aWwuaGVhZFN0cih2YWx1ZSwgNCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWRpdENhcmRJbmZvID0gQ2xlYXZlLkNyZWRpdENhcmREZXRlY3Rvci5nZXRJbmZvKHZhbHVlLCBwcHMuY3JlZGl0Q2FyZFN0cmljdE1vZGUpO1xuXG4gICAgICAgIHBwcy5ibG9ja3MgPSBjcmVkaXRDYXJkSW5mby5ibG9ja3M7XG4gICAgICAgIHBwcy5ibG9ja3NMZW5ndGggPSBwcHMuYmxvY2tzLmxlbmd0aDtcbiAgICAgICAgcHBzLm1heExlbmd0aCA9IFV0aWwuZ2V0TWF4TGVuZ3RoKHBwcy5ibG9ja3MpO1xuXG4gICAgICAgIC8vIGNyZWRpdCBjYXJkIHR5cGUgY2hhbmdlZFxuICAgICAgICBpZiAocHBzLmNyZWRpdENhcmRUeXBlICE9PSBjcmVkaXRDYXJkSW5mby50eXBlKSB7XG4gICAgICAgICAgICBwcHMuY3JlZGl0Q2FyZFR5cGUgPSBjcmVkaXRDYXJkSW5mby50eXBlO1xuXG4gICAgICAgICAgICBwcHMub25DcmVkaXRDYXJkVHlwZUNoYW5nZWQuY2FsbChvd25lciwgcHBzLmNyZWRpdENhcmRUeXBlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGVWYWx1ZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsXG4gICAgICAgICAgICBVdGlsID0gQ2xlYXZlLlV0aWwsXG4gICAgICAgICAgICBwcHMgPSBvd25lci5wcm9wZXJ0aWVzO1xuXG4gICAgICAgIGlmICghb3duZXIuZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuZFBvcyA9IG93bmVyLmVsZW1lbnQuc2VsZWN0aW9uRW5kO1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSBvd25lci5lbGVtZW50LnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBwcHMucmVzdWx0O1xuXG4gICAgICAgIGVuZFBvcyA9IFV0aWwuZ2V0TmV4dEN1cnNvclBvc2l0aW9uKGVuZFBvcywgb2xkVmFsdWUsIG5ld1ZhbHVlLCBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycyk7XG5cbiAgICAgICAgLy8gZml4IEFuZHJvaWQgYnJvd3NlciB0eXBlPVwidGV4dFwiIGlucHV0IGZpZWxkXG4gICAgICAgIC8vIGN1cnNvciBub3QganVtcGluZyBpc3N1ZVxuICAgICAgICBpZiAob3duZXIuaXNBbmRyb2lkKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgb3duZXIuZWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIFV0aWwuc2V0U2VsZWN0aW9uKG93bmVyLmVsZW1lbnQsIGVuZFBvcywgcHBzLmRvY3VtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgb3duZXIuY2FsbE9uVmFsdWVDaGFuZ2VkKCk7XG4gICAgICAgICAgICB9LCAxKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb3duZXIuZWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBpZiAocHBzLnN3YXBIaWRkZW5JbnB1dCkgb3duZXIuZWxlbWVudFN3YXBIaWRkZW4udmFsdWUgPSBvd25lci5nZXRSYXdWYWx1ZSgpO1xuXG4gICAgICAgIFV0aWwuc2V0U2VsZWN0aW9uKG93bmVyLmVsZW1lbnQsIGVuZFBvcywgcHBzLmRvY3VtZW50LCBmYWxzZSk7XG4gICAgICAgIG93bmVyLmNhbGxPblZhbHVlQ2hhbmdlZCgpO1xuICAgIH0sXG5cbiAgICBjYWxsT25WYWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgcHBzLm9uVmFsdWVDaGFuZ2VkLmNhbGwob3duZXIsIHtcbiAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgIG5hbWU6IG93bmVyLmVsZW1lbnQubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHBzLnJlc3VsdCxcbiAgICAgICAgICAgICAgICByYXdWYWx1ZTogb3duZXIuZ2V0UmF3VmFsdWUoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgc2V0UGhvbmVSZWdpb25Db2RlOiBmdW5jdGlvbiAocGhvbmVSZWdpb25Db2RlKSB7XG4gICAgICAgIHZhciBvd25lciA9IHRoaXMsIHBwcyA9IG93bmVyLnByb3BlcnRpZXM7XG5cbiAgICAgICAgcHBzLnBob25lUmVnaW9uQ29kZSA9IHBob25lUmVnaW9uQ29kZTtcbiAgICAgICAgb3duZXIuaW5pdFBob25lRm9ybWF0dGVyKCk7XG4gICAgICAgIG93bmVyLm9uQ2hhbmdlKCk7XG4gICAgfSxcblxuICAgIHNldFJhd1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcywgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogJyc7XG5cbiAgICAgICAgaWYgKHBwcy5udW1lcmFsKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJy4nLCBwcHMubnVtZXJhbERlY2ltYWxNYXJrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBwcy5wb3N0RGVsaW1pdGVyQmFja3NwYWNlID0gZmFsc2U7XG5cbiAgICAgICAgb3duZXIuZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBvd25lci5vbklucHV0KHZhbHVlKTtcbiAgICB9LFxuXG4gICAgZ2V0UmF3VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG93bmVyID0gdGhpcyxcbiAgICAgICAgICAgIHBwcyA9IG93bmVyLnByb3BlcnRpZXMsXG4gICAgICAgICAgICBVdGlsID0gQ2xlYXZlLlV0aWwsXG4gICAgICAgICAgICByYXdWYWx1ZSA9IG93bmVyLmVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgaWYgKHBwcy5yYXdWYWx1ZVRyaW1QcmVmaXgpIHtcbiAgICAgICAgICAgIHJhd1ZhbHVlID0gVXRpbC5nZXRQcmVmaXhTdHJpcHBlZFZhbHVlKHJhd1ZhbHVlLCBwcHMucHJlZml4LCBwcHMucHJlZml4TGVuZ3RoLCBwcHMucmVzdWx0LCBwcHMuZGVsaW1pdGVyLCBwcHMuZGVsaW1pdGVycywgcHBzLm5vSW1tZWRpYXRlUHJlZml4LCBwcHMudGFpbFByZWZpeCwgcHBzLnNpZ25CZWZvcmVQcmVmaXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBwcy5udW1lcmFsKSB7XG4gICAgICAgICAgICByYXdWYWx1ZSA9IHBwcy5udW1lcmFsRm9ybWF0dGVyLmdldFJhd1ZhbHVlKHJhd1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhd1ZhbHVlID0gVXRpbC5zdHJpcERlbGltaXRlcnMocmF3VmFsdWUsIHBwcy5kZWxpbWl0ZXIsIHBwcy5kZWxpbWl0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0RGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHBzLmRhdGUgPyBwcHMuZGF0ZUZvcm1hdHRlci5nZXRJU09Gb3JtYXREYXRlKCkgOiAnJztcbiAgICB9LFxuXG4gICAgZ2V0SVNPRm9ybWF0VGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzLFxuICAgICAgICAgICAgcHBzID0gb3duZXIucHJvcGVydGllcztcblxuICAgICAgICByZXR1cm4gcHBzLnRpbWUgPyBwcHMudGltZUZvcm1hdHRlci5nZXRJU09Gb3JtYXRUaW1lKCkgOiAnJztcbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3duZXIgPSB0aGlzO1xuXG4gICAgICAgIG93bmVyLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBvd25lci5vbkNoYW5nZUxpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb3duZXIub25LZXlEb3duTGlzdGVuZXIpO1xuICAgICAgICBvd25lci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb3duZXIub25Gb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjdXQnLCBvd25lci5vbkN1dExpc3RlbmVyKTtcbiAgICAgICAgb3duZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb3B5Jywgb3duZXIub25Db3B5TGlzdGVuZXIpO1xuICAgIH0sXG5cbiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ1tDbGVhdmUgT2JqZWN0XSc7XG4gICAgfVxufTtcblxuQ2xlYXZlLk51bWVyYWxGb3JtYXR0ZXIgPSBOdW1lcmFsRm9ybWF0dGVyXzE7XG5DbGVhdmUuRGF0ZUZvcm1hdHRlciA9IERhdGVGb3JtYXR0ZXJfMTtcbkNsZWF2ZS5UaW1lRm9ybWF0dGVyID0gVGltZUZvcm1hdHRlcl8xO1xuQ2xlYXZlLlBob25lRm9ybWF0dGVyID0gUGhvbmVGb3JtYXR0ZXJfMTtcbkNsZWF2ZS5DcmVkaXRDYXJkRGV0ZWN0b3IgPSBDcmVkaXRDYXJkRGV0ZWN0b3JfMTtcbkNsZWF2ZS5VdGlsID0gVXRpbF8xO1xuQ2xlYXZlLkRlZmF1bHRQcm9wZXJ0aWVzID0gRGVmYXVsdFByb3BlcnRpZXNfMTtcblxuLy8gZm9yIGFuZ3VsYXIgZGlyZWN0aXZlXG4oKHR5cGVvZiBjb21tb25qc0dsb2JhbCA9PT0gJ29iamVjdCcgJiYgY29tbW9uanNHbG9iYWwpID8gY29tbW9uanNHbG9iYWwgOiB3aW5kb3cpWydDbGVhdmUnXSA9IENsZWF2ZTtcblxuLy8gQ29tbW9uSlNcbnZhciBDbGVhdmVfMSA9IENsZWF2ZTtcblxuZXhwb3J0IGRlZmF1bHQgQ2xlYXZlXzE7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vYXJyb3cuc3ZnXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gZnJvbSBcIi4vYXJyb3ctd2hpdGUuc3ZnXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5idG57Ym9yZGVyLXJhZGl1czoyMnB4O2hlaWdodDoyNnB4O3BhZGRpbmc6NHB4IDA7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luOjE1cHggMjBweCAxNXB4IDA7cG9zaXRpb246cmVsYXRpdmU7dGV4dC1hbGlnbjpjZW50ZXJ9LmJ0bi5idG5fYm9yZGVye2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4ICNiYzljZmYgc29saWQ7aGVpZ2h0OjIycHg7Ym9yZGVyLXdpZHRoOjJweH0uYnRuLmJ0bl9ib3JkZXIgLmJ0bl9fbGlua3tjb2xvcjojYmM5Y2ZmfS5idG4uYnRuX2dyYWRpZW50e2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKTtjb2xvcjojZmZmZmZmfS5idG4uYnRuX2dyYWRpZW50LmJ0bl9ncmFkaWVudF9wYXl7d2lkdGg6MzIwcHh9LmJ0bjpob3ZlciwuYnRuOmZvY3VzLC5idG4uYnRuX2hvdmVye29wYWNpdHk6MC41fS5idG4gLmJ0bl9fbGlua3tjb2xvcjojZmZmZmZmO2ZvbnQtZmFtaWx5OidNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToxMnB4O3RleHQtYWxpZ246Y2VudGVyO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWRlY29yYXRpb246bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmV9LmJ0biAuYnRuX19hcnJvd3twb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MTJweDtyaWdodDoxNXB4O2NvbnRlbnQ6Jyc7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTNweDtyaWdodDoxMXB4O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIil9LmJ0biAuYnRuX19hcnJvdy5idG5fX2Fycm93X3doaXRle2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2J0bi9idG4uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxLQUNFLGtCQUFtQixDQUNuQixXQUFZLENBQ1osYUFBYyxDQUNkLGNBQWUsQ0FDZix1QkFBd0IsQ0FDeEIsaUJBQWtCLENBQ2xCLGlCQUFrQixDQVBwQixnQkFVSSxxQkFBc0IsQ0FDdEIsd0JBQXlCLENBRXpCLFdBQVksQ0FDWixnQkFBaUIsQ0FkckIsMkJBaUJNLGFBQWMsQ0FqQnBCLGtCQXNCSSw0REFBNkQsQ0FDN0QsYUFBYyxDQXZCbEIsbUNBMEJNLFdBQVksQ0ExQmxCLHFDQWlDSSxXQUFZLENBakNoQixnQkFxQ0ksYUFBYyxDQUNkLDJDQUE0QyxDQUM1QyxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FDaEIsY0FBZSxDQUNmLGlCQUFrQixDQUNsQix3QkFBeUIsQ0FDekIsb0JBQXFCLENBQ3JCLHdCQUF5QixDQTdDN0IsaUJBaURJLGlCQUFrQixDQUNsQixXQUFZLENBQ1osVUFBVyxDQUNYLFVBQVcsQ0FDWCxVQUFXLENBQ1gsV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFVBQVcsQ0FDWCwyQkFBNEIsQ0FDNUIsd0RBQThDLENBNURsRCxrQ0ErRE0sd0RBQW9EXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5idG4ge1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjJweDtcXHJcXG4gIGhlaWdodDogMjZweDtcXHJcXG4gIHBhZGRpbmc6IDRweCAwO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgbWFyZ2luOiAxNXB4IDIwcHggMTVweCAwO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcclxcbiAgJi5idG5fYm9yZGVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gICAgYm9yZGVyOiAxcHggI2JjOWNmZiBzb2xpZDtcXHJcXG5cXHJcXG4gICAgaGVpZ2h0OiAyMnB4O1xcclxcbiAgICBib3JkZXItd2lkdGg6IDJweDtcXHJcXG5cXHJcXG4gICAgLmJ0bl9fbGluayB7XFxyXFxuICAgICAgY29sb3I6ICNiYzljZmY7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gICYuYnRuX2dyYWRpZW50IHtcXHJcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKTtcXHJcXG4gICAgY29sb3I6ICNmZmZmZmY7XFxyXFxuXFxyXFxuICAgICYuYnRuX2dyYWRpZW50X3BheSB7XFxyXFxuICAgICAgd2lkdGg6IDMyMHB4O1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxuXFxyXFxuICAmOmhvdmVyLFxcclxcbiAgJjpmb2N1cyxcXHJcXG4gICYuYnRuX2hvdmVyIHtcXHJcXG4gICAgb3BhY2l0eTogMC41O1xcclxcbiAgfVxcclxcblxcclxcbiAgLmJ0bl9fbGluayB7XFxyXFxuICAgIGNvbG9yOiAjZmZmZmZmO1xcclxcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgICBmb250LXdlaWdodDogNjAwO1xcclxcbiAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgfVxcclxcblxcclxcbiAgLmJ0bl9fYXJyb3cge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGJvdHRvbTogMTJweDtcXHJcXG4gICAgcmlnaHQ6IDE1cHg7XFxyXFxuICAgIGNvbnRlbnQ6ICcnO1xcclxcbiAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdG9wOiAxM3B4O1xcclxcbiAgICByaWdodDogMTFweDtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdAQmxvY2tzL2J0bi9hcnJvdy5zdmcnKTtcXHJcXG5cXHJcXG4gICAgJi5idG5fX2Fycm93X3doaXRlIHtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ0BCbG9ja3MvYnRuL2Fycm93LXdoaXRlLnN2ZycpO1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vYXJyb3dfZm9yd2FyZC5zdmdcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY2FsZW5kYXItYmxvY2t7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDA7bWFyZ2luLXRvcDo1cHg7Ym9yZGVyLXJhZGl1czo0cHh9LmNhbGVuZGFyLWJsb2NrLmNhbGVuZGFyLWJsb2NrX2hpZGV7ZGlzcGxheTpub25lfS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXJ7d2lkdGg6MzIycHg7ei1pbmRleDo1O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItd2lkdGg6MXB4IDFweCAwIDFweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNoYWRvdzowcHggLTIwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JvcmRlci1yYWRpdXM6NHB4O2JhY2tncm91bmQ6I2ZmZjtsZWZ0Oi0xcHg7bWFyZ2luLWxlZnQ6LTFweDtib3gtc2hhZG93OjBweCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KX0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFye3dpZHRoOjEwMCU7aGVpZ2h0OmF1dG87Ym9yZGVyOm5vbmU7Ym94LXNoYWRvdzpub25lO2JhY2tncm91bmQ6I2ZmZjt1c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7Ym9yZGVyLXJhZGl1czo0cHh9LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci10b3B7Ym9yZGVyOm5vbmU7Ym94LXNoYWRvdzpub25lO2JhY2tncm91bmQ6I2ZmZjtwYWRkaW5nOjBweCAwIDU0cHggMDtoZWlnaHQ6MjBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci10b3AgLnBpZ25vc2UtY2FsZW5kYXItdG9wLW5hdnt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O21hcmdpbjoxOXB4fS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItdG9wIC5waWdub3NlLWNhbGVuZGFyLXRvcC1uYXYgLnBpZ25vc2UtY2FsZW5kYXItdG9wLWljb257d2lkdGg6MjRweDtoZWlnaHQ6MjRweH0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLXRvcCAucGlnbm9zZS1jYWxlbmRhci10b3AtbmF2IC5waWdub3NlLWNhbGVuZGFyLXRvcC1pY29uLmljb24tYXJyb3ctbGVmdCwuY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLXRvcCAucGlnbm9zZS1jYWxlbmRhci10b3AtbmF2IC5waWdub3NlLWNhbGVuZGFyLXRvcC1pY29uLmljb24tYXJyb3ctcmlnaHR7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgbm8tcmVwZWF0IGNlbnRlcjt3aWR0aDoyNHB4O2hlaWdodDoyNHB4fS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItdG9wIC5waWdub3NlLWNhbGVuZGFyLXRvcC1uYXYgLnBpZ25vc2UtY2FsZW5kYXItdG9wLWljb24uaWNvbi1hcnJvdy1sZWZ0e3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLXRvcCAucGlnbm9zZS1jYWxlbmRhci10b3AtZGF0ZXtwYWRkaW5nOjIwcHggMCAzMHB4IDA7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci10b3AgLnBpZ25vc2UtY2FsZW5kYXItdG9wLWRhdGUgLnBpZ25vc2UtY2FsZW5kYXItdG9wLW1vbnRoe2ZvbnQtc2l6ZToyMHB4O2xpbmUtaGVpZ2h0OjIxcHg7cGFkZGluZy1yaWdodDo1cHg7bWFyZ2luOjAgMnB4O3RleHQtdHJhbnNmb3JtOm5vbmU7Y29sb3I6IzFmMjA0MTtmb250LXdlaWdodDo3MDA7bGV0dGVyLXNwYWNpbmc6LTFweH0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLXRvcCAucGlnbm9zZS1jYWxlbmRhci10b3AtZGF0ZSAucGlnbm9zZS1jYWxlbmRhci10b3AteWVhcntmb250LXNpemU6MjBweDtsaW5lLWhlaWdodDoyMXB4O2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojMWYyMDQxO2xldHRlci1zcGFjaW5nOi0ycHh9LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci1oZWFkZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbjowIDIwcHh9LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci1oZWFkZXIgLnBpZ25vc2UtY2FsZW5kYXItd2Vla3tmb250LXNpemU6MTBweDt3aWR0aDozOHB4O2hlaWdodDo0MHB4O2NvbG9yOiNiYzljZmY7dGV4dC10cmFuc2Zvcm06bm9uZTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci1ib2R5e3BhZGRpbmctdG9wOjA7bWFyZ2luOjAgMjBweCAyMHB4IDIwcHg7b3ZlcmZsb3c6aGlkZGVufS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYm9keSAucGlnbm9zZS1jYWxlbmRhci1yb3cgYXt0ZXh0LWRlY29yYXRpb246bm9uZX0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXR7aGVpZ2h0OjQwcHg7d2lkdGg6NDBweDtmbG9hdDpsZWZ0fS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYm9keSAucGlnbm9zZS1jYWxlbmRhci1yb3cgLnBpZ25vc2UtY2FsZW5kYXItdW5pdC5waWdub3NlLWNhbGVuZGFyLXVuaXQtZGF0ZSBhe2ZvbnQtc2l6ZToxMnB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtoZWlnaHQ6NDBweDt3aWR0aDo0MHB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXQucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZSBhe2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKTtjb2xvcjojZmZmfS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYm9keSAucGlnbm9zZS1jYWxlbmRhci1yb3cgLnBpZ25vc2UtY2FsZW5kYXItdW5pdC5waWdub3NlLWNhbGVuZGFyLXVuaXQtYWN0aXZlLnBpZ25vc2UtY2FsZW5kYXItdW5pdC1maXJzdC1hY3RpdmV7Ym9yZGVyLXJhZGl1czo1MCUgMCAwIDUwJX0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXQucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZS5waWdub3NlLWNhbGVuZGFyLXVuaXQtZmlyc3QtYWN0aXZlIGF7Ym9yZGVyLXJhZGl1czo1MCV9LmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhciAucGlnbm9zZS1jYWxlbmRhci1ib2R5IC5waWdub3NlLWNhbGVuZGFyLXJvdyAucGlnbm9zZS1jYWxlbmRhci11bml0LnBpZ25vc2UtY2FsZW5kYXItdW5pdC1hY3RpdmUucGlnbm9zZS1jYWxlbmRhci11bml0LXNlY29uZC1hY3RpdmV7Ym9yZGVyLXJhZGl1czowIDUwJSA1MCUgMH0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXQucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZS5waWdub3NlLWNhbGVuZGFyLXVuaXQtc2Vjb25kLWFjdGl2ZSBhe2JvcmRlci1yYWRpdXM6NTAlfS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYm9keSAucGlnbm9zZS1jYWxlbmRhci1yb3cgLnBpZ25vc2UtY2FsZW5kYXItdW5pdC5waWdub3NlLWNhbGVuZGFyLXVuaXQtYWN0aXZlLmFjdGl2ZS1maXJzdCwuY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXQucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZS5hY3RpdmUtc2Vjb25ke2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2VlZTZmZiAwJSwgI2U2ZWFmZSAxMDAlKX0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXQucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZS5hY3RpdmUtZmlyc3QgYSwuY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJvZHkgLnBpZ25vc2UtY2FsZW5kYXItcm93IC5waWdub3NlLWNhbGVuZGFyLXVuaXQucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZS5hY3RpdmUtc2Vjb25kIGF7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpfS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYm9keSAucGlnbm9zZS1jYWxlbmRhci1yb3cgLnBpZ25vc2UtY2FsZW5kYXItdW5pdC5waWdub3NlLWNhbGVuZGFyLXVuaXQtcmFuZ2UgYXtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNlZWU2ZmYgMCUsICNlNmVhZmUgMTAwJSk7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2JvcmRlci1yYWRpdXM6MH0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbi1ncm91cHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Ym94LXNoYWRvdzowcHggMTBweCAyMHB4IDBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3JkZXItd2lkdGg6MCAwIDFweCAwfS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYnV0dG9uLWdyb3VwIC5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbntmb250LWZhbWlseTonTW9udHNlcnJhdCcsIEFyaWFsLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O2hlaWdodDoxNXB4O2NvbG9yOiNiYzljZmY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTt0ZXh0LWRlY29yYXRpb246bm9uZX0uY2FsZW5kYXItYmxvY2sgLmNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyIC5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbi1ncm91cCAucGlnbm9zZS1jYWxlbmRhci1idXR0b24ucGlnbm9zZS1jYWxlbmRhci1idXR0b24tY2FuY2Vse2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTttYXJnaW46MCAwIDE4cHggMTlweDtjb2xvcjojYmM5Y2ZmfS5jYWxlbmRhci1ibG9jayAuY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXIgLnBpZ25vc2UtY2FsZW5kYXItYnV0dG9uLWdyb3VwIC5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbi5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbi1hcHBseXtjb2xvcjojYmM5Y2ZmO21hcmdpbjowIDIwcHggMThweCAwfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvY2FsZW5kYXIvY2FsZW5kYXIuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxnQkFDRSxpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FKcEIsb0NBT0ksWUFBYSxDQVBqQiwwQkFXSSxXQUFZLENBQ1osU0FBVSxDQUNWLG9DQUF3QyxDQUN4QywwQkFBMkIsQ0FDM0IscUJBQXNCLENBQ3RCLDZDQUFpRCxDQUNqRCxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FDaEIsU0FBVSxDQUVWLGdCQUFpQixDQUNqQiw0Q0FBZ0QsQ0F0QnBELDRDQXlCTSxVQUFXLENBQ1gsV0FBWSxDQUNaLFdBQVksQ0FDWixlQUFnQixDQUNoQixlQUFnQixDQUNoQixnQkFBaUIsQ0FDakIscUJBQXNCLENBQ3RCLHdCQUF5QixDQUN6QixvQkFBcUIsQ0FDckIsaUJBQWtCLENBbEN4QixrRUFxQ1EsV0FBWSxDQUNaLGVBQWdCLENBQ2hCLGVBQWdCLENBQ2hCLG9CQUFxQixDQUNyQixXQUFZLENBQ1osWUFBYSxDQUNiLDZCQUE4QixDQTNDdEMsNEZBOENVLFVBQVcsQ0FDWCxXQUFZLENBQ1osV0FBWSxDQWhEdEIsdUhBbURZLFVBQVcsQ0FDWCxXQUFZLENBcER4QiwrUUF3RGMsYUFBYyxDQUNkLG1FQUFzRSxDQUN0RSxVQUFXLENBQ1gsV0FBWSxDQTNEMUIsdUlBK0RjLHdCQUF5QixDQS9EdkMsNkZBcUVVLHFCQUFzQixDQUN0QixZQUFhLENBQ2Isc0JBQXVCLENBdkVqQyx5SEEwRVksY0FBZSxDQUNmLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLG1CQUFvQixDQUNwQixhQUFjLENBQ2QsZUFBZ0IsQ0FDaEIsbUJBQW9CLENBakZoQyx3SEFxRlksY0FBZSxDQUNmLGdCQUFpQixDQUNqQixlQUFnQixDQUNoQixhQUFjLENBQ2QsbUJBQW9CLENBekZoQyxxRUErRlEsWUFBYSxDQUNiLDZCQUE4QixDQUM5QixhQUFjLENBakd0Qiw0RkFvR1UsY0FBZSxDQUNmLFVBQVcsQ0FDWCxXQUFZLENBQ1osYUFBYyxDQUNkLG1CQUFvQixDQUNwQixZQUFhLENBQ2Isc0JBQXVCLENBQ3ZCLGtCQUFtQixDQTNHN0IsbUVBZ0hRLGFBQWMsQ0FDZCx1QkFBd0IsQ0FDeEIsZUFBZ0IsQ0FsSHhCLDJGQXNIWSxvQkFBcUIsQ0F0SGpDLGdIQTBIWSxXQUFZLENBQ1osVUFBVyxDQUNYLFVBQVcsQ0E1SHZCLDZJQWdJZ0IsY0FBZSxDQUNmLHdCQUE0QixDQUM1QixXQUFZLENBQ1osVUFBVyxDQUNYLFlBQWEsQ0FDYixzQkFBdUIsQ0FDdkIsa0JBQW1CLENBdEluQywrSUE0SWdCLDREQUE2RCxDQUM3RCxVQUFXLENBN0kzQixnTEFpSmdCLHlCQUEwQixDQWpKMUMsa0xBb0prQixpQkFBa0IsQ0FwSnBDLGlMQXlKZ0IseUJBQTBCLENBekoxQyxtTEE0SmtCLGlCQUFrQixDQTVKcEMscVRBa0tnQiw0REFBNkQsQ0FsSzdFLHlUQXFLa0IsNERBQTZELENBcksvRSw4SUE0S2dCLDREQUE2RCxDQUM3RCx3QkFBNEIsQ0FDNUIsZUFBZ0IsQ0E5S2hDLDJFQXNMUSxZQUFhLENBQ2IsNkJBQThCLENBQzlCLGdEQUFvRCxDQUNwRCxvQ0FBd0MsQ0FDeEMsc0JBQXVCLENBMUwvQixvR0E2TFUsMkNBQTRDLENBQzVDLGlCQUFrQixDQUNsQixlQUFnQixDQUNoQixjQUFlLENBQ2YsZ0JBQWlCLENBQ2pCLFdBQVksQ0FDWixhQUFjLENBQ2Qsd0JBQXlCLENBQ3pCLGNBQWUsQ0FDZix3QkFBeUIsQ0FDekIsb0JBQXFCLENBdk0vQixtSUEwTVksd0JBQTRCLENBQzVCLG9CQUFxQixDQUNyQixhQUFjLENBNU0xQixrSUFnTlksYUFBYyxDQUNkLG9CQUFxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY2FsZW5kYXItYmxvY2sge1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgei1pbmRleDogMTAwO1xcclxcbiAgbWFyZ2luLXRvcDogNXB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcblxcclxcbiAgJi5jYWxlbmRhci1ibG9ja19oaWRlIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5jYWxlbmRhciB7XFxyXFxuICAgIHdpZHRoOiAzMjJweDtcXHJcXG4gICAgei1pbmRleDogNTtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgYm9yZGVyLXdpZHRoOiAxcHggMXB4IDAgMXB4O1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICBib3gtc2hhZG93OiAwcHggLTIwcHggMjBweCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgIGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuICAgIGxlZnQ6IC0xcHg7XFxyXFxuXFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xcclxcbiAgICBib3gtc2hhZG93OiAwcHggMTBweCAyMHB4IHJnYmEoMzEsIDMyLCA2NSwgMC4wNSk7XFxyXFxuXFxyXFxuICAgIC5waWdub3NlLWNhbGVuZGFyIHtcXHJcXG4gICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICBoZWlnaHQ6IGF1dG87XFxyXFxuICAgICAgYm9yZGVyOiBub25lO1xcclxcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XFxyXFxuICAgICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG5cXHJcXG4gICAgICAucGlnbm9zZS1jYWxlbmRhci10b3Age1xcclxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuICAgICAgICBwYWRkaW5nOiAwcHggMCA1NHB4IDA7XFxyXFxuICAgICAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcblxcclxcbiAgICAgICAgLnBpZ25vc2UtY2FsZW5kYXItdG9wLW5hdiB7XFxyXFxuICAgICAgICAgIHdpZHRoOiAyNHB4O1xcclxcbiAgICAgICAgICBoZWlnaHQ6IDI0cHg7XFxyXFxuICAgICAgICAgIG1hcmdpbjogMTlweDtcXHJcXG5cXHJcXG4gICAgICAgICAgLnBpZ25vc2UtY2FsZW5kYXItdG9wLWljb24ge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAyNHB4O1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjRweDtcXHJcXG5cXHJcXG4gICAgICAgICAgICAmLmljb24tYXJyb3ctbGVmdCxcXHJcXG4gICAgICAgICAgICAmLmljb24tYXJyb3ctcmlnaHQge1xcclxcbiAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJ0BCbG9ja3MvY2FsZW5kYXIvYXJyb3dfZm9yd2FyZC5zdmcnKSBuby1yZXBlYXQgY2VudGVyO1xcclxcbiAgICAgICAgICAgICAgd2lkdGg6IDI0cHg7XFxyXFxuICAgICAgICAgICAgICBoZWlnaHQ6IDI0cHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgICYuaWNvbi1hcnJvdy1sZWZ0IHtcXHJcXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAucGlnbm9zZS1jYWxlbmRhci10b3AtZGF0ZSB7XFxyXFxuICAgICAgICAgIHBhZGRpbmc6IDIwcHggMCAzMHB4IDA7XFxyXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbiAgICAgICAgICAucGlnbm9zZS1jYWxlbmRhci10b3AtbW9udGgge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMjFweDtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiAwIDJweDtcXHJcXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXHJcXG4gICAgICAgICAgICBjb2xvcjogIzFmMjA0MTtcXHJcXG4gICAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAtMXB4O1xcclxcbiAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgIC5waWdub3NlLWNhbGVuZGFyLXRvcC15ZWFyIHtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIxcHg7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMDtcXHJcXG4gICAgICAgICAgICBjb2xvcjogIzFmMjA0MTtcXHJcXG4gICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogLTJweDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAucGlnbm9zZS1jYWxlbmRhci1oZWFkZXIge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICAgIG1hcmdpbjogMCAyMHB4O1xcclxcblxcclxcbiAgICAgICAgLnBpZ25vc2UtY2FsZW5kYXItd2VlayB7XFxyXFxuICAgICAgICAgIGZvbnQtc2l6ZTogMTBweDtcXHJcXG4gICAgICAgICAgd2lkdGg6IDM4cHg7XFxyXFxuICAgICAgICAgIGhlaWdodDogNDBweDtcXHJcXG4gICAgICAgICAgY29sb3I6ICNiYzljZmY7XFxyXFxuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xcclxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLnBpZ25vc2UtY2FsZW5kYXItYm9keSB7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogMDtcXHJcXG4gICAgICAgIG1hcmdpbjogMCAyMHB4IDIwcHggMjBweDtcXHJcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuXFxyXFxuICAgICAgICAucGlnbm9zZS1jYWxlbmRhci1yb3cge1xcclxcbiAgICAgICAgICBhIHtcXHJcXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgLnBpZ25vc2UtY2FsZW5kYXItdW5pdCB7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICAgICAgICAgIHdpZHRoOiA0MHB4O1xcclxcbiAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xcclxcblxcclxcbiAgICAgICAgICAgICYucGlnbm9zZS1jYWxlbmRhci11bml0LWRhdGUge1xcclxcbiAgICAgICAgICAgICAgYSB7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcXHJcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgICYucGlnbm9zZS1jYWxlbmRhci11bml0LWFjdGl2ZSB7XFxyXFxuICAgICAgICAgICAgICBhIHtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKTtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAmLnBpZ25vc2UtY2FsZW5kYXItdW5pdC1maXJzdC1hY3RpdmUge1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCUgMCAwIDUwJTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgYSB7XFxyXFxuICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAmLnBpZ25vc2UtY2FsZW5kYXItdW5pdC1zZWNvbmQtYWN0aXZlIHtcXHJcXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMCA1MCUgNTAlIDA7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIGEge1xcclxcbiAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgICAgJi5hY3RpdmUtZmlyc3QsXFxyXFxuICAgICAgICAgICAgICAmLmFjdGl2ZS1zZWNvbmQge1xcclxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjZWVlNmZmIDAlLCAjZTZlYWZlIDEwMCUpO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICBhIHtcXHJcXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgICYucGlnbm9zZS1jYWxlbmRhci11bml0LXJhbmdlIHtcXHJcXG4gICAgICAgICAgICAgIGEge1xcclxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjZWVlNmZmIDAlLCAjZTZlYWZlIDEwMCUpO1xcclxcbiAgICAgICAgICAgICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAucGlnbm9zZS1jYWxlbmRhci1idXR0b24tZ3JvdXAge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCAxMHB4IDIwcHggMHB4IHJnYmEoMzEsIDMyLCA2NSwgMC4wNSk7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuMjUpO1xcclxcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAwIDAgMXB4IDA7XFxyXFxuXFxyXFxuICAgICAgICAucGlnbm9zZS1jYWxlbmRhci1idXR0b24ge1xcclxcbiAgICAgICAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgICAgICAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNXB4O1xcclxcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XFxyXFxuICAgICAgICAgIGNvbG9yOiAjYmM5Y2ZmO1xcclxcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAgICAgJi5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbi1jYW5jZWwge1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiAwIDAgMThweCAxOXB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAjYmM5Y2ZmO1xcclxcbiAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICYucGlnbm9zZS1jYWxlbmRhci1idXR0b24tYXBwbHkge1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAjYmM5Y2ZmO1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogMCAyMHB4IDE4cHggMDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxle21hcmdpbjo1MHB4IDAgMTdweCAwfS5jaGVja2JveC1saXN0LWV4cGFuZGFibGUgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fdG9waWNCbG9ja3twb3NpdGlvbjpyZWxhdGl2ZTt1c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmV9LmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZSAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2NrIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX2V4cGFuZHt3aWR0aDoxMnB4O2hlaWdodDoxMHB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToycHg7cmlnaHQ6MTVweDtjdXJzb3I6cG9pbnRlcn0uY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX3RvcGljQmxvY2sgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW57dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfS5jaGVja2JveC1saXN0LWV4cGFuZGFibGUgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fdG9waWNCbG9jayBoM3ttYXJnaW46MDtjdXJzb3I6cG9pbnRlcjtmb250LXNpemU6MTJweDtsZXR0ZXItc3BhY2luZzotMC4xcHh9LmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZSAuY2hlY2tib3gtbGlzdCAuY2hlY2tib3gtbGlzdF9fbGFiZWw6YmVmb3Jle2xlZnQ6MDt0b3A6MH0uY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIC5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pbnB1dDpjaGVja2VkKy5jaGVja2JveC1saXN0X19sYWJlbDphZnRlcnt0b3A6NHB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLDBCQUNFLG9CQUFxQixDQUR2QixnRUFJSSxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLHFCQUFzQixDQUN0Qix3QkFBeUIsQ0FDekIsb0JBQXFCLENBUnpCLGtHQVdNLFVBQVcsQ0FDWCxXQUFZLENBQ1osaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxVQUFXLENBQ1gsY0FBZSxDQWhCckIsd0lBbUJRLHdCQUF5QixDQW5CakMsbUVBd0JNLFFBQVMsQ0FDVCxjQUFlLENBQ2YsY0FBZSxDQUNmLHFCQUFzQixDQTNCNUIsc0VBa0NRLE1BQU8sQ0FDUCxLQUFNLENBbkNkLG1HQTBDVSxPQUFRXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jaGVja2JveC1saXN0LWV4cGFuZGFibGUge1xcclxcbiAgbWFyZ2luOiA1MHB4IDAgMTdweCAwO1xcclxcblxcclxcbiAgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fdG9waWNCbG9jayB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG5cXHJcXG4gICAgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kIHtcXHJcXG4gICAgICB3aWR0aDogMTJweDtcXHJcXG4gICAgICBoZWlnaHQ6IDEwcHg7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIGJvdHRvbTogMnB4O1xcclxcbiAgICAgIHJpZ2h0OiAxNXB4O1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgICAmLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW4ge1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaDMge1xcclxcbiAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICAgIGxldHRlci1zcGFjaW5nOiAtMC4xcHg7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5jaGVja2JveC1saXN0IHtcXHJcXG4gICAgLmNoZWNrYm94LWxpc3RfX2xhYmVsIHtcXHJcXG4gICAgICAmOmJlZm9yZSB7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuY2hlY2tib3gtbGlzdF9faW5wdXQge1xcclxcbiAgICAgICY6Y2hlY2tlZCArIC5jaGVja2JveC1saXN0X19sYWJlbCB7XFxyXFxuICAgICAgICAmOmFmdGVyIHtcXHJcXG4gICAgICAgICAgdG9wOiA0cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jaGVja2JveC1saXN0e21hcmdpbi10b3A6MTRweDt3aWR0aDoyMzBweH0uY2hlY2tib3gtbGlzdC5jaGVja2JveC1saXN0X2hpZGV7ZGlzcGxheTpub25lfS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIC5jaGVja2JveC1saXN0X19pbnB1dHtkaXNwbGF5Om5vbmV9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gLmNoZWNrYm94LWxpc3RfX2lucHV0OmNoZWNrZWQrLmNoZWNrYm94LWxpc3RfX2xhYmVsOmFmdGVye2NvbnRlbnQ6Jyc7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NHB4O2hlaWdodDo2cHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDowIDJweCAycHggMDtib3JkZXItY29sb3I6I2JjOWNmZjt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTtsZWZ0OjdweDt0b3A6NnB4fS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIC5jaGVja2JveC1saXN0X19pbnB1dDpjaGVja2VkKy5jaGVja2JveC1saXN0X19sYWJlbDpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNiYzljZmZ9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gLmNoZWNrYm94LWxpc3RfX2xhYmVse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MnB4IDAgMTBweCAzMHB4O2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE4cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO3dpZHRoOmF1dG87dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIC5jaGVja2JveC1saXN0X19sYWJlbDpiZWZvcmV7Y29udGVudDonJztkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjFweDt0b3A6MXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXJhZGl1czo0cHh9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gLmNoZWNrYm94LWxpc3RfX2xhYmVsLmNoZWNrYm94LWxpc3RfX2xhYmVsX2JvbGR7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE0LjVweDtsaW5lLWhlaWdodDoxOHB4O3doaXRlLXNwYWNlOm5vd3JhcDtsZXR0ZXItc3BhY2luZzotMC41cHh9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gcHtwYWRkaW5nLWxlZnQ6MzBweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTRweDttYXJnaW46LTRweCAwIDdweCAwfS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIHAuY2hlY2tib3gtbGlzdF9fcF93aWR0aDIwMHt3aWR0aDoyMDBweH0uY2hlY2tib3gtbGlzdCAuY2hlY2tib3gtbGlzdF9faXRlbSBwLmNoZWNrYm94LWxpc3RfX3Bfd2lkdGgyMjV7d2lkdGg6MjI1cHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9jaGVja2JveC1saXN0L2NoZWNrYm94LWxpc3Quc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxlQUNFLGVBQWdCLENBQ2hCLFdBQVksQ0FGZCxrQ0FLSSxZQUFhLENBTGpCLDBEQVVNLFlBQWEsQ0FWbkIsOEZBY1UsVUFBVyxDQUNYLGlCQUFrQixDQUNsQixTQUFVLENBQ1YsVUFBVyxDQUNYLGtCQUFtQixDQUNuQix3QkFBeUIsQ0FDekIsb0JBQXFCLENBQ3JCLHVCQUF3QixDQUN4QixRQUFTLENBQ1QsT0FBUSxDQXZCbEIsK0ZBMkJVLG9CQUFxQixDQTNCL0IsMERBaUNNLG9CQUFxQixDQUNyQixjQUFlLENBQ2YsaUJBQWtCLENBQ2xCLHVCQUF3QixDQUN4QixjQUFlLENBQ2YsZ0JBQWlCLENBQ2pCLHdCQUE0QixDQUM1QixVQUFXLENBQ1gsZ0JBQWlCLENBQ2pCLHFCQUFzQixDQUN0Qix3QkFBeUIsQ0FDekIsb0JBQXFCLENBNUMzQixpRUErQ1EsVUFBVyxDQUNYLG9CQUFxQixDQUNyQixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULE9BQVEsQ0FDUixxQkFBc0IsQ0FDdEIsVUFBVyxDQUNYLFdBQVksQ0FDWixvQ0FBd0MsQ0FDeEMscUJBQXNCLENBQ3RCLGlCQUFrQixDQXpEMUIsb0ZBNkRRLHlCQUE2QixDQUM3QixlQUFnQixDQUNoQixnQkFBaUIsQ0FDakIsZ0JBQWlCLENBQ2pCLGtCQUFtQixDQUNuQixxQkFBc0IsQ0FsRTlCLHNDQXVFTSxpQkFBa0IsQ0FDbEIsd0JBQTRCLENBQzVCLGNBQWUsQ0FDZixnQkFBaUIsQ0FDakIsbUJBQW9CLENBM0UxQixnRUE4RVEsV0FBWSxDQTlFcEIsZ0VBa0ZRLFdBQVlcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNoZWNrYm94LWxpc3Qge1xcclxcbiAgbWFyZ2luLXRvcDogMTRweDtcXHJcXG4gIHdpZHRoOiAyMzBweDtcXHJcXG5cXHJcXG4gICYuY2hlY2tib3gtbGlzdF9oaWRlIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5jaGVja2JveC1saXN0X19pdGVtIHtcXHJcXG4gICAgLmNoZWNrYm94LWxpc3RfX2lucHV0IHtcXHJcXG4gICAgICBkaXNwbGF5OiBub25lO1xcclxcblxcclxcbiAgICAgICY6Y2hlY2tlZCArIC5jaGVja2JveC1saXN0X19sYWJlbCB7XFxyXFxuICAgICAgICAmOmFmdGVyIHtcXHJcXG4gICAgICAgICAgY29udGVudDogJyc7XFxyXFxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgICAgd2lkdGg6IDRweDtcXHJcXG4gICAgICAgICAgaGVpZ2h0OiA2cHg7XFxyXFxuICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XFxyXFxuICAgICAgICAgIGJvcmRlci13aWR0aDogMCAycHggMnB4IDA7XFxyXFxuICAgICAgICAgIGJvcmRlci1jb2xvcjogI2JjOWNmZjtcXHJcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcclxcbiAgICAgICAgICBsZWZ0OiA3cHg7XFxyXFxuICAgICAgICAgIHRvcDogNnB4O1xcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgJjpiZWZvcmUge1xcclxcbiAgICAgICAgICBib3JkZXItY29sb3I6ICNiYzljZmY7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5jaGVja2JveC1saXN0X19sYWJlbCB7XFxyXFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgcGFkZGluZzogMnB4IDAgMTBweCAzMHB4O1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICBsaW5lLWhlaWdodDogMThweDtcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgIHdpZHRoOiBhdXRvO1xcclxcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFxyXFxuICAgICAgJjpiZWZvcmUge1xcclxcbiAgICAgICAgY29udGVudDogJyc7XFxyXFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICBsZWZ0OiAxcHg7XFxyXFxuICAgICAgICB0b3A6IDFweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICAgICAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAmLmNoZWNrYm94LWxpc3RfX2xhYmVsX2JvbGQge1xcclxcbiAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC43NSk7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxNC41cHg7XFxyXFxuICAgICAgICBsaW5lLWhlaWdodDogMThweDtcXHJcXG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxuICAgICAgICBsZXR0ZXItc3BhY2luZzogLTAuNXB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBwIHtcXHJcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxyXFxuICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgICAgbGluZS1oZWlnaHQ6IDE0cHg7XFxyXFxuICAgICAgbWFyZ2luOiAtNHB4IDAgN3B4IDA7XFxyXFxuXFxyXFxuICAgICAgJi5jaGVja2JveC1saXN0X19wX3dpZHRoMjAwIHtcXHJcXG4gICAgICAgIHdpZHRoOiAyMDBweDtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgJi5jaGVja2JveC1saXN0X19wX3dpZHRoMjI1IHtcXHJcXG4gICAgICAgIHdpZHRoOiAyMjVweDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNvbW1lbnQtYmxvY2t7d2lkdGg6MTAwJTttYXJnaW46MTNweCAwIDMzcHggMH0uY29tbWVudC1ibG9jayAuY29tbWVudC1ibG9ja19fdGl0bGV7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21hcmdpbjowO2hlaWdodDoyMnB4fS5jb21tZW50LWJsb2NrIC5jb21tZW50LWJsb2NrX190aXRsZSBoMntsaW5lLWhlaWdodDoyMXB4fS5jb21tZW50LWJsb2NrIC5jb21tZW50LWJsb2NrX190aXRsZSBwe21hcmdpbjowIDQ0cHggMCAwfS5jb21tZW50LWJsb2NrIC5jb21tZW50LWJsb2NrX19jb21tZW50e21hcmdpbjoyM3B4IDB9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQ6bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOjB9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQgLmNvbW1lbnQtYmxvY2tfX3BlcnNvbntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnR9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQgLmNvbW1lbnQtYmxvY2tfX3BlcnNvbiAuY29tbWVudC1ibG9ja19fcGhvdG97d2lkdGg6NDhweDtoZWlnaHQ6NDhweDttYXJnaW4tYm90dG9tOjEwcHg7d2lkdGg6NDRweDtoZWlnaHQ6NDRweDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXI6MnB4IHNvbGlkICNmZmZmZmY7ZmlsdGVyOmRyb3Atc2hhZG93KDBweCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjEpKX0uY29tbWVudC1ibG9jayAuY29tbWVudC1ibG9ja19fY29tbWVudCAuY29tbWVudC1ibG9ja19fcGVyc29uIC5jb21tZW50LWJsb2NrX19uYW1lLXRpbWV7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjttYXJnaW4tbGVmdDoxMHB4fS5jb21tZW50LWJsb2NrIC5jb21tZW50LWJsb2NrX19jb21tZW50IC5jb21tZW50LWJsb2NrX19wZXJzb24gLmNvbW1lbnQtYmxvY2tfX25hbWUtdGltZSAuY29tbWVudC1ibG9ja19fbmFtZXtmb250LXdlaWdodDo3MDA7bWFyZ2luOjA7bGV0dGVyLXNwYWNpbmc6LTAuMnB4fS5jb21tZW50LWJsb2NrIC5jb21tZW50LWJsb2NrX19jb21tZW50IC5jb21tZW50LWJsb2NrX19wZXJzb24gLmNvbW1lbnQtYmxvY2tfX25hbWUtdGltZSAuY29tbWVudC1ibG9ja19fdGltZXttYXJnaW4tYm90dG9tOjEycHg7bWFyZ2luOjB9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQgLmNvbW1lbnQtYmxvY2tfX3BlcnNvbiAuY29tbWVudC1ibG9ja19fbmFtZS10aW1lIHB7Zm9udC1zaXplOjE0cHh9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQtdGV4dHtkaXNwbGF5OmZsZXh9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQtdGV4dCAubGlrZXttYXJnaW46MnB4IDAgMCAzcHh9LmNvbW1lbnQtYmxvY2sgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQgLmNvbW1lbnQtYmxvY2tfX2NvbW1lbnQtdGV4dCAuY29tbWVudC1ibG9ja19fdGV4dHttYXJnaW46MDttYXJnaW4tbGVmdDoxNXB4fS5jb21tZW50LWJsb2NrIC5jb21tZW50LWJsb2NrX19jb21tZW50IC5jb21tZW50LWJsb2NrX19jb21tZW50LXRleHQgcHt3aWR0aDo4Ni41JTtmb250LXNpemU6MTRweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2NvbW1lbnQtYmxvY2svY29tbWVudC1ibG9jay5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGVBQ0UsVUFBVyxDQUNYLG9CQUFxQixDQUZ2QixxQ0FLSSxZQUFhLENBQ2IsNkJBQThCLENBQzlCLFFBQVMsQ0FDVCxXQUFZLENBUmhCLHdDQVdNLGdCQUFpQixDQVh2Qix1Q0FlTSxpQkFBa0IsQ0FmeEIsdUNBb0JJLGFBQWMsQ0FwQmxCLGtEQXVCTSxlQUFnQixDQXZCdEIsOERBMkJNLFlBQWEsQ0FDYixrQkFBbUIsQ0FDbkIsc0JBQXVCLENBN0I3QixvRkFnQ1EsVUFBVyxDQUNYLFdBQVksQ0FDWixrQkFBbUIsQ0FDbkIsVUFBVyxDQUNYLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsd0JBQXlCLENBQ3pCLG9EQUF3RCxDQXZDaEUsd0ZBMkNRLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsZ0JBQWlCLENBN0N6Qiw2R0FnRFUsZUFBZ0IsQ0FDaEIsUUFBUyxDQUNULHFCQUFzQixDQWxEaEMsNkdBc0RVLGtCQUFtQixDQUNuQixRQUFTLENBdkRuQiwwRkEyRFUsY0FBZSxDQTNEekIsb0VBaUVNLFlBQWEsQ0FqRW5CLDBFQW9FUSxrQkFBbUIsQ0FwRTNCLHlGQXdFUSxRQUFTLENBQ1QsZ0JBQWlCLENBekV6QixzRUE2RVEsV0FBWSxDQUNaLGNBQWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbW1lbnQtYmxvY2sge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBtYXJnaW46IDEzcHggMCAzM3B4IDA7XFxyXFxuXFxyXFxuICAuY29tbWVudC1ibG9ja19fdGl0bGUge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgaGVpZ2h0OiAyMnB4O1xcclxcblxcclxcbiAgICBoMiB7XFxyXFxuICAgICAgbGluZS1oZWlnaHQ6IDIxcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgcCB7XFxyXFxuICAgICAgbWFyZ2luOiAwIDQ0cHggMCAwO1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuY29tbWVudC1ibG9ja19fY29tbWVudCB7XFxyXFxuICAgIG1hcmdpbjogMjNweCAwO1xcclxcblxcclxcbiAgICAmOmxhc3QtY2hpbGQge1xcclxcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmNvbW1lbnQtYmxvY2tfX3BlcnNvbiB7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcclxcblxcclxcbiAgICAgIC5jb21tZW50LWJsb2NrX19waG90byB7XFxyXFxuICAgICAgICB3aWR0aDogNDhweDtcXHJcXG4gICAgICAgIGhlaWdodDogNDhweDtcXHJcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICAgICAgICB3aWR0aDogNDRweDtcXHJcXG4gICAgICAgIGhlaWdodDogNDRweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNmZmZmZmY7XFxyXFxuICAgICAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCAxMHB4IDIwcHggcmdiYSgzMSwgMzIsIDY1LCAwLjEpKTtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLmNvbW1lbnQtYmxvY2tfX25hbWUtdGltZSB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcclxcblxcclxcbiAgICAgICAgLmNvbW1lbnQtYmxvY2tfX25hbWUge1xcclxcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgICAgICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAtMC4ycHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAuY29tbWVudC1ibG9ja19fdGltZSB7XFxyXFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEycHg7XFxyXFxuICAgICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIHAge1xcclxcbiAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5jb21tZW50LWJsb2NrX19jb21tZW50LXRleHQge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuXFxyXFxuICAgICAgLmxpa2Uge1xcclxcbiAgICAgICAgbWFyZ2luOiAycHggMCAwIDNweDtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLmNvbW1lbnQtYmxvY2tfX3RleHQge1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDE1cHg7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIHAge1xcclxcbiAgICAgICAgd2lkdGg6IDg2LjUlO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIGZyb20gXCIuL2V4cGFuZC1tb3JlLnN2Z1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5kcm9wZG93bi1ibG9ja3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3due3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Ym9yZGVyLXJhZGl1czo0cHg7d2lkdGg6MTAwJTtjdXJzb3I6cG9pbnRlcjtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym94LXNpemluZzpib3JkZXItYm94O2hlaWdodDo0NHB4O3BhZGRpbmc6OHB4IDE0cHggOHB4IDE1cHg7bWFyZ2luLXRvcDo1cHg7Zm9udC1mYW1pbHk6J01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWw7dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duOmhvdmVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuNSl9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24uZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duX2RhdGV7d2lkdGg6MTUwcHg7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7Zm9udC1zaXplOjE0cHg7Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOjA7cGFkZGluZzo4cHggMTRweH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25fZGF0ZTpiZWZvcmV7d2lkdGg6MTVweDtoZWlnaHQ6MTFweDtib3R0b206MTRweDtyaWdodDoxMXB4fS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bl9pdGVtcy1zaG93e2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjUpO2JvcmRlci1yYWRpdXM6NHB4IDRweCAwIDB9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd246OmJlZm9yZXtjb250ZW50OicnO3dpZHRoOjE0cHg7aGVpZ2h0OjExcHg7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjE1cHg7cmlnaHQ6MTJweDtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtc3tkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6MCAwIDRweCA0cHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuNSk7bWFyZ2luLXRvcDotMXB4O3otaW5kZXg6MTtwb3NpdGlvbjphYnNvbHV0ZX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXNfaGlkZXtkaXNwbGF5Om5vbmV9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lLC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRuc3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO21hcmdpbi10b3A6LTFweDt3aWR0aDoxMDAlO2hlaWdodDo0MHB4fS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSBoMywuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgaDN7cGFkZGluZzoxM3B4IDE1cHg7bWFyZ2luOjA7bGV0dGVyLXNwYWNpbmc6LTAuNXB4fS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSBoMywuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgc3BhbiwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgaDMsLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIHNwYW57Y29sb3I6IzFmMjA0MX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHksLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6OTJweDttYXJnaW4tcmlnaHQ6N3B4O3VzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzLC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1cywuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzLC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRucyAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1c3tib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czo1MCU7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtmb250LXNpemU6MjBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZy10b3A6MnB4O2N1cnNvcjpwb2ludGVyfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMuZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZSwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LXBsdXMuZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZSwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUsLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5IC5kcm9wZG93bi1ibG9ja19faW5jLXF0eS1wbHVzLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGV7Y3Vyc29yOmRlZmF1bHQ7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC4xNSk7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjE1KX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgc3BhbiwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgc3Bhbntmb250LXdlaWdodDo3MDB9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lIC5saW5rLmxpbmtfY2xlYW4sLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5saW5rLmxpbmtfY2xlYW57bWFyZ2luOmF1dG8gMTVweH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmxpbmsubGlua19vaywuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmsubGlua19va3ttYXJnaW46YXV0byA3cHh9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5ze2hlaWdodDo0OHB4fS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRucy5kcm9wZG93bi1ibG9ja19fYnRuc19mbGV4LWVuZHtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zLmRyb3Bkb3duLWJsb2NrX19idG5zX2ZsZXgtZW5kPi5saW5rX2NsZWFue2Rpc3BsYXk6bm9uZX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmtfY2xlYW57bWFyZ2luOjIxcHggMCAwIDE0cHh9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5saW5rX29re21hcmdpbjoyMXB4IDdweCAwIDB9LmRyb3Bkb3duLWRhdGVze3dpZHRoOjEwMCV9LmRyb3Bkb3duLWRhdGVzIC5kcm9wZG93bi1kYXRlc19fZGF0ZXN7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5kcm9wZG93bi1kYXRlcyAuZHJvcGRvd24tZGF0ZXNfX2RhdGVzIC5kcm9wZG93bi1ibG9ja3t3aWR0aDphdXRvfS5kcm9wZG93bi1kYXRlcyAuZHJvcGRvd24tZGF0ZXNfX2RhdGVzIC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duX2l0ZW1zLXNob3d7Ym9yZGVyLXJhZGl1czo0cHh9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdCQUNFLGlCQUFrQixDQUNsQixVQUFXLENBRmIsMENBS0ksaUJBQWtCLENBQ2xCLHlCQUE2QixDQUM3QixpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLGNBQWUsQ0FDZixvQ0FBd0MsQ0FDeEMscUJBQXNCLENBQ3RCLFdBQVksQ0FDWix5QkFBMEIsQ0FDMUIsY0FBZSxDQUNmLDJDQUE0QyxDQUM1QyxrQkFBbUIsQ0FDbkIsaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQXJCekIsZ0RBd0JNLHlCQUE2QixDQUM3QixtQ0FBdUMsQ0F6QjdDLHdFQTZCTSxXQUFZLENBQ1osdUJBQXdCLENBQ3hCLGNBQWUsQ0FDZixlQUFnQixDQUNoQixnQkFBaUIsQ0FDakIsZ0JBQWlCLENBbEN2QiwrRUFxQ1EsVUFBVyxDQUNYLFdBQVksQ0FDWixXQUFZLENBQ1osVUFBVyxDQXhDbkIsOEVBNkNNLG1DQUF1QyxDQUN2Qyx5QkFBMEIsQ0E5Q2hDLGtEQWtETSxVQUFXLENBQ1gsVUFBVyxDQUNYLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLFVBQVcsQ0FDWCxjQUFlLENBQ2Ysd0JBQXlCLENBQ3pCLHdEQUF5RCxDQUN6RCwyQkFBNEIsQ0EzRGxDLGdEQWdFSSxZQUFhLENBQ2IsY0FBZSxDQUNmLGVBQWdCLENBQ2hCLHlCQUEwQixDQUMxQixtQ0FBdUMsQ0FDdkMsZUFBZ0IsQ0FDaEIsU0FBVSxDQUNWLGlCQUFrQixDQXZFdEIsb0ZBMEVNLFlBQWEsQ0ExRW5CLGtKQStFTSxZQUFhLENBQ2IsNkJBQThCLENBQzlCLHdCQUE0QixDQUM1QixlQUFnQixDQUNoQixVQUFXLENBQ1gsV0FBWSxDQXBGbEIsd0pBdUZRLGlCQUFrQixDQUNsQixRQUFTLENBQ1QscUJBQXNCLENBekY5QixvVEE4RlEsYUFBMEIsQ0E5RmxDLHdNQWtHUSxZQUFhLENBQ2IsNkJBQThCLENBQzlCLGtCQUFtQixDQUNuQixVQUFXLENBQ1gsZ0JBQWlCLENBQ2pCLGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQTFHN0IsMGdCQThHVSxvQ0FBd0MsQ0FDeEMsaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxXQUFZLENBQ1osY0FBZSxDQUNmLFlBQWEsQ0FDYixzQkFBdUIsQ0FDdkIscUJBQXNCLENBQ3RCLGVBQWdCLENBQ2hCLGNBQWUsQ0F2SHpCLDBvQkEwSFksY0FBZSxDQUNmLGdDQUFvQyxDQUNwQyx5QkFBNkIsQ0E1SHpDLGtOQWlJVSxlQUFnQixDQWpJMUIsb0xBdUlVLGdCQUFpQixDQXZJM0IsOEtBMklVLGVBQWdCLENBM0kxQixzRUFpSk0sV0FBWSxDQWpKbEIsb0dBb0pRLHdCQUF5QixDQXBKakMsZ0hBdUpVLFlBQWEsQ0F2SnZCLGtGQTRKUSxvQkFBcUIsQ0E1SjdCLCtFQWdLUSxtQkFBb0IsQ0FDckIsZ0JBTUwsVUFBVyxDQURiLHVDQUlJLFlBQWEsQ0FDYiw2QkFBOEIsQ0FMbEMsdURBUU0sVUFBVyxDQVJqQiw0RkFXUSxpQkFBa0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmRyb3Bkb3duLWJsb2NrIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93biB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC43NSk7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgICBwYWRkaW5nOiA4cHggMTRweCA4cHggMTVweDtcXHJcXG4gICAgbWFyZ2luLXRvcDogNXB4O1xcclxcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcclxcbiAgICAmOmhvdmVyIHtcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjc1KTtcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJi5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25fZGF0ZSB7XFxyXFxuICAgICAgd2lkdGg6IDE1MHB4O1xcclxcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXHJcXG4gICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXHJcXG4gICAgICBsZXR0ZXItc3BhY2luZzogMDtcXHJcXG4gICAgICBwYWRkaW5nOiA4cHggMTRweDtcXHJcXG5cXHJcXG4gICAgICAmOmJlZm9yZSB7XFxyXFxuICAgICAgICB3aWR0aDogMTVweDtcXHJcXG4gICAgICAgIGhlaWdodDogMTFweDtcXHJcXG4gICAgICAgIGJvdHRvbTogMTRweDtcXHJcXG4gICAgICAgIHJpZ2h0OiAxMXB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bl9pdGVtcy1zaG93IHtcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgICAgYm9yZGVyLXJhZGl1czogNHB4IDRweCAwIDA7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJjo6YmVmb3JlIHtcXHJcXG4gICAgICBjb250ZW50OiAnJztcXHJcXG4gICAgICB3aWR0aDogMTRweDtcXHJcXG4gICAgICBoZWlnaHQ6IDExcHg7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIGJvdHRvbTogMTVweDtcXHJcXG4gICAgICByaWdodDogMTJweDtcXHJcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ0BCbG9ja3MvZHJvcGRvd24vZXhwYW5kLW1vcmUuc3ZnJyk7XFxyXFxuICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMCAwIDRweCA0cHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgbWFyZ2luLXRvcDogLTFweDtcXHJcXG4gICAgei1pbmRleDogMTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcblxcclxcbiAgICAmLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtc19oaWRlIHtcXHJcXG4gICAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSxcXHJcXG4gICAgLmRyb3Bkb3duLWJsb2NrX19idG5zIHtcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgIG1hcmdpbi10b3A6IC0xcHg7XFxyXFxuICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgaGVpZ2h0OiA0MHB4O1xcclxcblxcclxcbiAgICAgIGgzIHtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDEzcHggMTVweDtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIGxldHRlci1zcGFjaW5nOiAtMC41cHg7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIGgzLFxcclxcbiAgICAgIHNwYW4ge1xcclxcbiAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMSk7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5IHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgd2lkdGg6IDkycHg7XFxyXFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDdweDtcXHJcXG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFxyXFxuICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMsXFxyXFxuICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1cyB7XFxyXFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgICAgICAgd2lkdGg6IDMwcHg7XFxyXFxuICAgICAgICAgIGhlaWdodDogMzBweDtcXHJcXG4gICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcclxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICAgICAgcGFkZGluZy10b3A6IDJweDtcXHJcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcblxcclxcbiAgICAgICAgICAmLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUge1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcXHJcXG4gICAgICAgICAgICBib3JkZXItY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC4xNSk7XFxyXFxuICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC4xNSk7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIHNwYW4ge1xcclxcbiAgICAgICAgICBmb250LXdlaWdodDogNzAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAubGluayB7XFxyXFxuICAgICAgICAmLmxpbmtfY2xlYW4ge1xcclxcbiAgICAgICAgICBtYXJnaW46IGF1dG8gMTVweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICYubGlua19vayB7XFxyXFxuICAgICAgICAgIG1hcmdpbjogYXV0byA3cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kcm9wZG93bi1ibG9ja19fYnRucyB7XFxyXFxuICAgICAgaGVpZ2h0OiA0OHB4O1xcclxcblxcclxcbiAgICAgICYuZHJvcGRvd24tYmxvY2tfX2J0bnNfZmxleC1lbmQge1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXHJcXG5cXHJcXG4gICAgICAgID4gLmxpbmtfY2xlYW4ge1xcclxcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAubGlua19jbGVhbiB7XFxyXFxuICAgICAgICBtYXJnaW46IDIxcHggMCAwIDE0cHg7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5saW5rX29rIHtcXHJcXG4gICAgICAgIG1hcmdpbjogMjFweCA3cHggMCAwO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4uZHJvcGRvd24tZGF0ZXMge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuXFxyXFxuICAuZHJvcGRvd24tZGF0ZXNfX2RhdGVzIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcblxcclxcbiAgICAuZHJvcGRvd24tYmxvY2sge1xcclxcbiAgICAgIHdpZHRoOiBhdXRvO1xcclxcblxcclxcbiAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25faXRlbXMtc2hvdyB7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5pbmZvLWJsb2Nre21pbi13aWR0aDoyODBweDttYXJnaW4tcmlnaHQ6MTAuNyV9LmluZm8tYmxvY2sgLmluZm8tYmxvY2tfX2l0ZW17ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO21hcmdpbjoyMXB4IDAgMjJweH0uaW5mby1ibG9jayAuaW5mby1ibG9ja19faXRlbSAuaW5mby1ibG9ja19faWNvbi5pbmZvLWJsb2NrX19pY29uX2Vtb3RpY29ue3dpZHRoOjQwcHg7aGVpZ2h0OjQwcHg7bWFyZ2luOjJweCAxNHB4IDJweCA0cHh9LmluZm8tYmxvY2sgLmluZm8tYmxvY2tfX2l0ZW0gLmluZm8tYmxvY2tfX2ljb24uaW5mby1ibG9ja19faWNvbl9jaXR5e3dpZHRoOjM4cHg7aGVpZ2h0OjM4cHg7bWFyZ2luOjJweCAxNXB4IDJweCA1cHh9LmluZm8tYmxvY2sgLmluZm8tYmxvY2tfX2l0ZW0gLmluZm8tYmxvY2tfX2ljb24uaW5mby1ibG9ja19faWNvbl93aGF0c2hvdHt3aWR0aDo0NHB4O2hlaWdodDo0NHB4O21hcmdpbjoycHggMTJweCAycHggMnB4fS5pbmZvLWJsb2NrIC5pbmZvLWJsb2NrX19pdGVtIC5pbmZvLWJsb2NrX190ZXh0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmluZm8tYmxvY2sgLmluZm8tYmxvY2tfX2l0ZW0gLmluZm8tYmxvY2tfX3RleHQgcHttYXJnaW46MDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyMHB4fS5pbmZvLWJsb2NrIC5pbmZvLWJsb2NrX19ocnt3aWR0aDoxMDAlO21hcmdpbjowO2JvcmRlcjowLjVweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMSl9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9pbmZvLWJsb2NrL2luZm8tYmxvY2suc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxZQUNFLGVBQWdCLENBQ2hCLGtCQUFtQixDQUZyQiw4QkFLSSxZQUFhLENBQ2IsY0FBZSxDQUNmLGtCQUFtQixDQVB2QiwwRUFXUSxVQUFXLENBQ1gsV0FBWSxDQUNaLHVCQUF3QixDQWJoQyxzRUFpQlEsVUFBVyxDQUNYLFdBQVksQ0FDWix1QkFBd0IsQ0FuQmhDLDBFQXVCUSxVQUFXLENBQ1gsV0FBWSxDQUNaLHVCQUF3QixDQXpCaEMsZ0RBOEJNLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsNkJBQThCLENBaENwQyxrREFtQ1EsUUFBUyxDQUNULGNBQWUsQ0FDZixnQkFBaUIsQ0FyQ3pCLDRCQTJDSSxVQUFXLENBQ1gsUUFBUyxDQUNULHFDQUF5Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaW5mby1ibG9jayB7XFxyXFxuICBtaW4td2lkdGg6IDI4MHB4O1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAxMC43JTtcXHJcXG5cXHJcXG4gIC5pbmZvLWJsb2NrX19pdGVtIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBtYXJnaW46IDIxcHggMCAyMnB4O1xcclxcblxcclxcbiAgICAuaW5mby1ibG9ja19faWNvbiB7XFxyXFxuICAgICAgJi5pbmZvLWJsb2NrX19pY29uX2Vtb3RpY29uIHtcXHJcXG4gICAgICAgIHdpZHRoOiA0MHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICAgICAgbWFyZ2luOiAycHggMTRweCAycHggNHB4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAmLmluZm8tYmxvY2tfX2ljb25fY2l0eSB7XFxyXFxuICAgICAgICB3aWR0aDogMzhweDtcXHJcXG4gICAgICAgIGhlaWdodDogMzhweDtcXHJcXG4gICAgICAgIG1hcmdpbjogMnB4IDE1cHggMnB4IDVweDtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgJi5pbmZvLWJsb2NrX19pY29uX3doYXRzaG90IHtcXHJcXG4gICAgICAgIHdpZHRoOiA0NHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgICAgICAgbWFyZ2luOiAycHggMTJweCAycHggMnB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuaW5mby1ibG9ja19fdGV4dCB7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHJcXG4gICAgICBwIHtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgLmluZm8tYmxvY2tfX2hyIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgYm9yZGVyOiAwLjVweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuMSk7XFxyXFxuICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vYXJyb3cuc3ZnXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmlucHV0LXRleHR7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJX0uaW5wdXQtdGV4dC5pbnB1dC10ZXh0X3N1YnNjcmlwdGlvbnttYXJnaW4tdG9wOjEwcHh9LmlucHV0LXRleHQuaW5wdXQtdGV4dF9zdWJzY3JpcHRpb24gLmlucHV0LXRleHRfX2lucHV0e2xldHRlci1zcGFjaW5nOjB9LmlucHV0LXRleHQuaW5wdXQtdGV4dF9zdWJzY3JpcHRpb246YWZ0ZXJ7Y29udGVudDonJzt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxMXB4O3JpZ2h0OjExcHg7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKX0uaW5wdXQtdGV4dCAuaW5wdXQtdGV4dF9faW5wdXR7d2lkdGg6MTAwJTtjb2xvcjojMWYyMDQxO291dGxpbmU6bm9uZTtmb250LXNpemU6MTRweDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlci1yYWRpdXM6NHB4O2hlaWdodDo0NHB4O3BhZGRpbmc6OHB4IDE0cHg7bWFyZ2luLXRvcDo1cHg7Zm9udC1mYW1pbHk6J01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWw7bGV0dGVyLXNwYWNpbmc6MC41cHh9LmlucHV0LXRleHQgLmlucHV0LXRleHRfX2lucHV0OmhvdmVyLC5pbnB1dC10ZXh0IC5pbnB1dC10ZXh0X19pbnB1dDpmb2N1cywuaW5wdXQtdGV4dCAuaW5wdXQtdGV4dF9faW5wdXQuaW5wdXQtdGV4dF9faW5wdXRfaG92ZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC41KTtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjE0cHg7bGV0dGVyLXNwYWNpbmc6LTAuNXB4O3BhZGRpbmc6OHB4IDE1cHggMTBweCAxNXB4fS5pbnB1dC10ZXh0IC5pbnB1dC10ZXh0X19pbnB1dC5pbnB1dC10ZXh0X19pbnB1dF9kYXRle3BhZGRpbmc6NXB4IDE0cHggOHB4IDE0cHg7bGV0dGVyLXNwYWNpbmc6MC4xcHh9LmlucHV0LXRleHQgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSl9LmlucHV0LXRleHQgOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpfS5pbnB1dC10ZXh0IDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpfS5pbnB1dC10ZXh0IDotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSl9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9pbnB1dC10ZXh0L2lucHV0LXRleHQuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxZQUNFLGlCQUFrQixDQUNsQixVQUFXLENBRmIsb0NBS0ksZUFBZ0IsQ0FMcEIsdURBUU0sZ0JBQWlCLENBUnZCLDBDQVlNLFVBQVcsQ0FDWCxVQUFXLENBQ1gsV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLFVBQVcsQ0FDWCwyQkFBNEIsQ0FDNUIsd0RBQXFELENBcEIzRCwrQkF5QkksVUFBVyxDQUNYLGFBQTBCLENBQzFCLFlBQWEsQ0FDYixjQUFlLENBQ2Ysb0NBQXdDLENBQ3hDLHFCQUFzQixDQUN0QixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLGdCQUFpQixDQUNqQixjQUFlLENBQ2YsMkNBQTRDLENBQzVDLGtCQUFtQixDQUNuQixpQkFBa0IsQ0FDbEIsb0JBQXFCLENBdEN6QixpSUEyQ00seUJBQTZCLENBQzdCLG1DQUF1QyxDQUN2QyxlQUFnQixDQUNoQixjQUFlLENBQ2YscUJBQXNCLENBQ3RCLDBCQUEyQixDQWhEakMsc0RBb0RNLHlCQUEwQixDQUMxQixvQkFBcUIsQ0FyRDNCLHdDQTJESSx5QkFBNkIsQ0EzRGpDLG1DQStESSx5QkFBNkIsQ0EvRGpDLCtCQW1FSSx5QkFBNkIsQ0FuRWpDLDhCQXVFSSx5QkFBNkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmlucHV0LXRleHQge1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuXFxyXFxuICAmLmlucHV0LXRleHRfc3Vic2NyaXB0aW9uIHtcXHJcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXHJcXG5cXHJcXG4gICAgLmlucHV0LXRleHRfX2lucHV0IHtcXHJcXG4gICAgICBsZXR0ZXItc3BhY2luZzogMDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmOmFmdGVyIHtcXHJcXG4gICAgICBjb250ZW50OiAnJztcXHJcXG4gICAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICBib3R0b206IDExcHg7XFxyXFxuICAgICAgcmlnaHQ6IDExcHg7XFxyXFxuICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ0BCbG9ja3MvaW5wdXQtdGV4dC9hcnJvdy5zdmcnKTtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgLmlucHV0LXRleHRfX2lucHV0IHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDEpO1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbiAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgICBwYWRkaW5nOiA4cHggMTRweDtcXHJcXG4gICAgbWFyZ2luLXRvcDogNXB4O1xcclxcbiAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgICBsZXR0ZXItc3BhY2luZzogMC41cHg7XFxyXFxuXFxyXFxuICAgICY6aG92ZXIsXFxyXFxuICAgICY6Zm9jdXMsXFxyXFxuICAgICYuaW5wdXQtdGV4dF9faW5wdXRfaG92ZXIge1xcclxcbiAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNzUpO1xcclxcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICBmb250LXdlaWdodDogNjAwO1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICBsZXR0ZXItc3BhY2luZzogLTAuNXB4O1xcclxcbiAgICAgIHBhZGRpbmc6IDhweCAxNXB4IDEwcHggMTVweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmLmlucHV0LXRleHRfX2lucHV0X2RhdGUge1xcclxcbiAgICAgIHBhZGRpbmc6IDVweCAxNHB4IDhweCAxNHB4O1xcclxcbiAgICAgIGxldHRlci1zcGFjaW5nOiAwLjFweDtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcXHJcXG4gICAgLyogQ2hyb21lICovXFxyXFxuICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuMjUpO1xcclxcbiAgfVxcclxcbiAgOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XFxyXFxuICAgIC8qIElFIDEwKyAqL1xcclxcbiAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gIH1cXHJcXG4gIDo6LW1vei1wbGFjZWhvbGRlciB7XFxyXFxuICAgIC8qIEZpcmVmb3ggMTkrICovXFxyXFxuICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuMjUpO1xcclxcbiAgfVxcclxcbiAgOi1tb3otcGxhY2Vob2xkZXIge1xcclxcbiAgICAvKiBGaXJlZm94IDQgLSAxOCAqL1xcclxcbiAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9mYXZvcml0ZV9ib3JkZXIuc3ZnXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gZnJvbSBcIi4vZmF2b3JpdGUuc3ZnXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5saWtle2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDozOHB4O2hlaWdodDoxOHB4O2JvcmRlci1yYWRpdXM6MTBweDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7bWFyZ2luOjE1cHggMTBweCAwIDA7Y3Vyc29yOnBvaW50ZXJ9Lmxpa2UubGlrZV9saWtlZHtib3JkZXItY29sb3I6I2JjOWNmZn0ubGlrZSAubGlrZV9faWNve3dpZHRoOjEwcHg7aGVpZ2h0OjEwcHg7bWFyZ2luOjRweCAwIDVweCA0cHg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbn0ubGlrZSAubGlrZV9faWNvLmxpa2VfX2ljb19saWtlZHtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIil9Lmxpa2UgLmxpa2VfX3N1bXttYXJnaW46NHB4IDEwcHggNXB4IDA7Zm9udC1zaXplOjkuNnB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjI1KTtjdXJzb3I6cG9pbnRlcjt1c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmV9Lmxpa2UgLmxpa2VfX3N1bS5saWtlX19zdW1fbGlrZWR7Y29sb3I6I2JjOWNmZn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2xpa2UvbGlrZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLE1BQ0UsWUFBYSxDQUNiLDZCQUE4QixDQUM5QixVQUFXLENBQ1gsV0FBWSxDQUNaLGtCQUFtQixDQUNuQixvQ0FBd0MsQ0FDeEMsb0JBQXFCLENBQ3JCLGNBQWUsQ0FSakIsaUJBV0ksb0JBQXFCLENBWHpCLGlCQWVJLFVBQVcsQ0FDWCxXQUFZLENBQ1osb0JBQXFCLENBQ3JCLGNBQWUsQ0FDZix3REFBNEMsQ0FDNUMsMkJBQTRCLENBQzVCLHVCQUF3QixDQUN4Qix1QkFBd0IsQ0F0QjVCLGlDQXlCTSx3REFBcUMsQ0F6QjNDLGlCQThCSSxxQkFBc0IsQ0FDdEIsZUFBZ0IsQ0FDaEIsWUFBYSxDQUNiLGtCQUFtQixDQUNuQix5QkFBNkIsQ0FDN0IsY0FBZSxDQUNmLGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQXZDekIsaUNBMENNLGFBQWNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxpa2Uge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIHdpZHRoOiAzOHB4O1xcclxcbiAgaGVpZ2h0OiAxOHB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICBtYXJnaW46IDE1cHggMTBweCAwIDA7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAmLmxpa2VfbGlrZWQge1xcclxcbiAgICBib3JkZXItY29sb3I6ICNiYzljZmY7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAubGlrZV9faWNvIHtcXHJcXG4gICAgd2lkdGg6IDEwcHg7XFxyXFxuICAgIGhlaWdodDogMTBweDtcXHJcXG4gICAgbWFyZ2luOiA0cHggMCA1cHggNHB4O1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnZmF2b3JpdGVfYm9yZGVyLnN2ZycpO1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCU7XFxyXFxuICAgIGJhY2tncm91bmQtc2l6ZTogY29udGFpbjtcXHJcXG5cXHJcXG4gICAgJi5saWtlX19pY29fbGlrZWQge1xcclxcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnZmF2b3JpdGUuc3ZnJyk7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5saWtlX19zdW0ge1xcclxcbiAgICBtYXJnaW46IDRweCAxMHB4IDVweCAwO1xcclxcbiAgICBmb250LXNpemU6IDkuNnB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcclxcbiAgICAmLmxpa2VfX3N1bV9saWtlZCB7XFxyXFxuICAgICAgY29sb3I6ICNiYzljZmY7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmxpbmt7Zm9udC1mYW1pbHk6J01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtoZWlnaHQ6MTVweDtjb2xvcjojYmM5Y2ZmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjdXJzb3I6cG9pbnRlcjttYXJnaW46MTVweCAyMHB4IDE1cHggMDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmxpbmsubGlua19jbGVhbntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmxpbmsubGlua19sdXh7bWFyZ2luOjAgMCAwIDNweH0ubGluazpob3Zlcnt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvbGluay9saW5rLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsTUFDRSwyQ0FBNEMsQ0FDNUMsaUJBQWtCLENBQ2xCLGVBQWdCLENBQ2hCLGNBQWUsQ0FDZixnQkFBaUIsQ0FDakIsV0FBWSxDQUNaLGFBQWMsQ0FDZCx3QkFBeUIsQ0FDekIsY0FBZSxDQUNmLHVCQUF3QixDQUN4Qix3QkFBeUIsQ0FDekIsb0JBQXFCLENBWnZCLGlCQWVJLHdCQUE0QixDQWZoQyxlQW1CSSxnQkFBaUIsQ0FuQnJCLFlBdUJJLHlCQUEwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGluayB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICBmb250LXNpemU6IDEycHg7XFxyXFxuICBsaW5lLWhlaWdodDogMTVweDtcXHJcXG4gIGhlaWdodDogMTVweDtcXHJcXG4gIGNvbG9yOiAjYmM5Y2ZmO1xcclxcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIG1hcmdpbjogMTVweCAyMHB4IDE1cHggMDtcXHJcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuXFxyXFxuICAmLmxpbmtfY2xlYW4ge1xcclxcbiAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgfVxcclxcblxcclxcbiAgJi5saW5rX2x1eCB7XFxyXFxuICAgIG1hcmdpbjogMCAwIDAgM3B4O1xcclxcbiAgfVxcclxcblxcclxcbiAgJjpob3ZlciB7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubGlzdC1ibG9ja3t3aWR0aDozNjFweH0ubGlzdC1ibG9jayAubGlzdC1ibG9ja19fbGlzdHttYXJnaW46MDtwYWRkaW5nOjB9Lmxpc3QtYmxvY2sgLmxpc3QtYmxvY2tfX2l0ZW17cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjEwcHggMDtkaXNwbGF5OmZsZXh9Lmxpc3QtYmxvY2sgLmxpc3QtYmxvY2tfX2l0ZW0gLmxpc3QtYmxvY2tfX3BvaW50e3dpZHRoOjEwcHg7aGVpZ2h0OjEwcHg7Ym9yZGVyLXJhZGl1czo1MCU7bWFyZ2luOjdweCAxMHB4IDdweCAwO2JhY2tncm91bmQ6cmdiYSgzMSwzMiw2NSwwLjI1KX0ubGlzdC1ibG9jayAubGlzdC1ibG9ja19faXRlbSBwe3dpZHRoOjI0MHB4O21hcmdpbjowfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvbGlzdC1ibG9jay9saXN0LWJsb2NrLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsWUFDRSxXQUFZLENBRGQsOEJBSUksUUFBUyxDQUNULFNBQVUsQ0FMZCw4QkFTSSxpQkFBa0IsQ0FDbEIsYUFBYyxDQUNkLFlBQWEsQ0FYakIsaURBY00sVUFBVyxDQUNYLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIscUJBQXNCLENBQ3RCLDhCQUFrQyxDQWxCeEMsZ0NBc0JNLFdBQVksQ0FDWixRQUFTXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5saXN0LWJsb2NrIHtcXHJcXG4gIHdpZHRoOiAzNjFweDtcXHJcXG5cXHJcXG4gIC5saXN0LWJsb2NrX19saXN0IHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgfVxcclxcblxcclxcbiAgLmxpc3QtYmxvY2tfX2l0ZW0ge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIG1hcmdpbjogMTBweCAwO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcblxcclxcbiAgICAubGlzdC1ibG9ja19fcG9pbnQge1xcclxcbiAgICAgIHdpZHRoOiAxMHB4O1xcclxcbiAgICAgIGhlaWdodDogMTBweDtcXHJcXG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgICAgbWFyZ2luOiA3cHggMTBweCA3cHggMDtcXHJcXG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDMxLCAzMiwgNjUsIDAuMjUpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHAge1xcclxcbiAgICAgIHdpZHRoOiAyNDBweDtcXHJcXG4gICAgICBtYXJnaW46IDA7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9hcnJvdy13aGl0ZS5zdmdcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucGFnaW5hdGlvbnt3aWR0aDoxMDAlO21hcmdpbjozMHB4IDAgMTBweCAwfS5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19udW0tYmxvY2t7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MTBweCAwIDlweH0ucGFnaW5hdGlvbiAucGFnaW5hdGlvbl9fbnVtLWJsb2NrIC5wYWdpbmF0aW9uX19udW17d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC1zaXplOjExLjVweDtmb250LXdlaWdodDo1MDA7Ym9yZGVyLXJhZGl1czo1MCU7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2N1cnNvcjpwb2ludGVyO3VzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX0ucGFnaW5hdGlvbiAucGFnaW5hdGlvbl9fbnVtLWJsb2NrIC5wYWdpbmF0aW9uX19udW0ucGFnaW5hdGlvbl9fbnVtX2FjdGl2ZXtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSk7Y29sb3I6I2ZmZn0ucGFnaW5hdGlvbiAucGFnaW5hdGlvbl9fbnVtLWJsb2NrIC5wYWdpbmF0aW9uX19udW0ucGFnaW5hdGlvbl9fbnVtX25leHR7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNmZjZjk3IDAlLCAjNjZkMmVhIDEwMCUpO2NvbG9yOiNmZmY7cG9zaXRpb246cmVsYXRpdmV9LnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX251bS1ibG9jayAucGFnaW5hdGlvbl9fbnVtLnBhZ2luYXRpb25fX251bV9uZXh0IC5wYWdpbmF0aW9uX19hcnJvd3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMnB4O3JpZ2h0OjlweDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXR9LnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX251bS1ibG9jayAucGFnaW5hdGlvbl9fbnVtLnBhZ2luYXRpb25fX251bV9uZXh0IC5wYWdpbmF0aW9uX19hcnJvdy5wYWdpbmF0aW9uX19hcnJvd193aGl0ZXtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIil9LnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX2xhYmVse3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxZQUNFLFVBQVcsQ0FDWCxvQkFBcUIsQ0FGdkIsbUNBS0ksVUFBVyxDQUNYLFlBQWEsQ0FDYixzQkFBdUIsQ0FDdkIsaUJBQWtCLENBUnRCLG9EQVdNLFVBQVcsQ0FDWCxXQUFZLENBQ1osd0JBQTRCLENBQzVCLGdCQUFpQixDQUNqQixlQUFnQixDQUNoQixpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLHNCQUF1QixDQUN2QixrQkFBbUIsQ0FDbkIsY0FBZSxDQUNmLGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQXhCM0IsMkVBMkJRLDREQUE2RCxDQUM3RCxVQUFXLENBNUJuQix5RUFnQ1EsNERBQTZELENBQzdELFVBQVcsQ0FDWCxpQkFBa0IsQ0FsQzFCLDRGQXFDVSxVQUFXLENBQ1gsV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFNBQVUsQ0FDViwyQkFBNEIsQ0EzQ3RDLG9IQThDWSx3REFBMkQsQ0E5Q3ZFLCtCQXNESSxVQUFXLENBQ1gsWUFBYSxDQUNiLHNCQUF1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucGFnaW5hdGlvbiB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIG1hcmdpbjogMzBweCAwIDEwcHggMDtcXHJcXG5cXHJcXG4gIC5wYWdpbmF0aW9uX19udW0tYmxvY2sge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIG1hcmdpbjogMTBweCAwIDlweDtcXHJcXG5cXHJcXG4gICAgLnBhZ2luYXRpb25fX251bSB7XFxyXFxuICAgICAgd2lkdGg6IDQwcHg7XFxyXFxuICAgICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgICAgZm9udC1zaXplOiAxMS41cHg7XFxyXFxuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcXHJcXG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcblxcclxcbiAgICAgICYucGFnaW5hdGlvbl9fbnVtX2FjdGl2ZSB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpO1xcclxcbiAgICAgICAgY29sb3I6ICNmZmY7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgICYucGFnaW5hdGlvbl9fbnVtX25leHQge1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKTtcXHJcXG4gICAgICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAgICAgLnBhZ2luYXRpb25fX2Fycm93IHtcXHJcXG4gICAgICAgICAgd2lkdGg6IDIwcHg7XFxyXFxuICAgICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICAgIHRvcDogMTJweDtcXHJcXG4gICAgICAgICAgcmlnaHQ6IDlweDtcXHJcXG4gICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG5cXHJcXG4gICAgICAgICAgJi5wYWdpbmF0aW9uX19hcnJvd193aGl0ZSB7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdAQmxvY2tzL3BhZ2luYXRpb24vYXJyb3ctd2hpdGUuc3ZnJyk7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5wYWdpbmF0aW9uX19sYWJlbCB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnJhZGlvZ3JvdXB7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO3dpZHRoOjEwMCU7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LnJhZGlvZ3JvdXAgLnJhZGlvZ3JvdXBfX3JhZGlvLWJ0bnt2ZXJ0aWNhbC1hbGlnbjpjZW50ZXJ9LnJhZGlvZ3JvdXAgLnJhZGlvZ3JvdXBfX3JhZGlvLWJ0biAucmFkaW9ncm91cF9faW5wdXR7bWFyZ2luOmF1dG8gMTBweCBhdXRvIDA7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtkaXNwbGF5Om5vbmV9LnJhZGlvZ3JvdXAgLnJhZGlvZ3JvdXBfX3JhZGlvLWJ0biAucmFkaW9ncm91cF9faW5wdXQ6Y2hlY2tlZCsucmFkaW9ncm91cF9fbGFiZWw6YWZ0ZXJ7Y29udGVudDonJztiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSk7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MTJweDtoZWlnaHQ6MTJweDtib3JkZXItcmFkaXVzOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjVweDt0b3A6NHB4fS5yYWRpb2dyb3VwIC5yYWRpb2dyb3VwX19yYWRpby1idG4gLnJhZGlvZ3JvdXBfX2lucHV0OmNoZWNrZWQrLnJhZGlvZ3JvdXBfX2xhYmVsOmJlZm9yZXtib3JkZXI6MXB4IHNvbGlkICNiYzljZmZ9LnJhZGlvZ3JvdXAgLnJhZGlvZ3JvdXBfX3JhZGlvLWJ0biAucmFkaW9ncm91cF9fbGFiZWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLXJpZ2h0OjA7bGluZS1oZWlnaHQ6MThweDt1c2VyLXNlbGVjdDpub25lO21hcmdpbjoxMXB4IDIwcHggNXB4IDA7cGFkZGluZy1sZWZ0OjMwcHh9LnJhZGlvZ3JvdXAgLnJhZGlvZ3JvdXBfX3JhZGlvLWJ0biAucmFkaW9ncm91cF9fbGFiZWw6YmVmb3Jle2NvbnRlbnQ6Jyc7YmFja2dyb3VuZC1jb2xvcjojZmZmO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjFweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL3JhZGlvZ3JvdXAvcmFkaW9ncm91cC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFlBQ0UsWUFBYSxDQUNiLGNBQWUsQ0FDZixVQUFXLENBQ1gsMEJBQTJCLENBSjdCLG1DQU9JLHFCQUFzQixDQVAxQixzREFVTSx1QkFBd0IsQ0FDeEIsVUFBVyxDQUNYLFdBQVksQ0FDWixZQUFhLENBYm5CLHVGQWtCWSxVQUFXLENBQ1gsNERBQTZELENBQzdELG9CQUFxQixDQUNyQixVQUFXLENBQ1gsV0FBWSxDQUNaLGlCQUFrQixDQUNsQixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULE9BQVEsQ0ExQnBCLHdGQThCWSx3QkFBeUIsQ0E5QnJDLHNEQXFDTSxvQkFBcUIsQ0FDckIsY0FBZSxDQUNmLGlCQUFrQixDQUNsQixjQUFlLENBQ2YsZ0JBQWlCLENBQ2pCLGdCQUFpQixDQUNqQixzQkFBdUIsQ0FDdkIsaUJBQWtCLENBNUN4Qiw2REErQ1EsVUFBVyxDQUNYLHFCQUFzQixDQUN0QixvQkFBcUIsQ0FDckIsVUFBVyxDQUNYLFdBQVksQ0FDWixpQkFBa0IsQ0FDbEIsb0NBQXdDLENBQ3hDLHFCQUFzQixDQUN0QixpQkFBa0IsQ0FDbEIsUUFBU1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmFkaW9ncm91cCB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxuXFxyXFxuICAucmFkaW9ncm91cF9fcmFkaW8tYnRuIHtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgLnJhZGlvZ3JvdXBfX2lucHV0IHtcXHJcXG4gICAgICBtYXJnaW46IGF1dG8gMTBweCBhdXRvIDA7XFxyXFxuICAgICAgd2lkdGg6IDIwcHg7XFxyXFxuICAgICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuXFxyXFxuICAgICAgJjpjaGVja2VkIHtcXHJcXG4gICAgICAgICsgLnJhZGlvZ3JvdXBfX2xhYmVsIHtcXHJcXG4gICAgICAgICAgJjphZnRlciB7XFxyXFxuICAgICAgICAgICAgY29udGVudDogJyc7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgI2JjOWNmZiAwJSwgIzhiYTRmOSAxMDAlKTtcXHJcXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEycHg7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAxMnB4O1xcclxcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICAgICAgbGVmdDogNXB4O1xcclxcbiAgICAgICAgICAgIHRvcDogNHB4O1xcclxcbiAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICY6YmVmb3JlIHtcXHJcXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjYmM5Y2ZmO1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5yYWRpb2dyb3VwX19sYWJlbCB7XFxyXFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xcclxcbiAgICAgIGxpbmUtaGVpZ2h0OiAxOHB4O1xcclxcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIG1hcmdpbjogMTFweCAyMHB4IDVweCAwO1xcclxcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcXHJcXG5cXHJcXG4gICAgICAmOmJlZm9yZSB7XFxyXFxuICAgICAgICBjb250ZW50OiAnJztcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgbGVmdDogMXB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmFuZ2Utc2xpZGVye3dpZHRoOjEwMCV9LnJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX190b3BpYy1sYWJlbHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyfS5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2xpZGVye3dpZHRoOmNhbGMoMTAwJSAtIDExcHgpO2hlaWdodDo2cHg7bWFyZ2luOjE4cHggMCAxMHB4O3RyYW5zZm9ybTp0cmFuc2xhdGUoNXB4LCAwKTtwb3NpdGlvbjpyZWxhdGl2ZX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlcjpob3ZlcntjdXJzb3I6cG9pbnRlcn0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlcjpiZWZvcmV7Y29udGVudDonJztib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czozcHg7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOmNhbGMoMTAwJSArIDExcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTVweCwgMCk7aGVpZ2h0OjZweH0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19zY2FsZXtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Oi0xfS5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NjYWxlIC5yYW5nZS1zbGlkZXJfX3NjYWxlLWxpbmV7d2lkdGg6MXB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQ6cmdiYSgzMSwzMiw2NSwwLjI1KX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19zY2FsZSAucmFuZ2Utc2xpZGVyX19zY2FsZS12YWx7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7Zm9udC1zaXplOjEwcHh9LnJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX19zbGlkZXIgLnJhbmdlLXNsaWRlcl9fcmFuZ2V7aGVpZ2h0OmNhbGMoMTAwJSArIDBweCk7d2lkdGg6ODVweDtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICM2ZmNmOTcgMCUsICM2NmQyZWEgMTAwJSk7Ym9yZGVyLXJhZGl1czozcHg7Ym94LXNpemluZzpib3JkZXItYm94O3RyYW5zZm9ybTp0cmFuc2xhdGUoNzhweCwgMHB4KX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19sZWZ0LC5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3JpZ2h0e3dpZHRoOjEycHg7aGVpZ2h0OjEycHg7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNmZjZjk3IDAlLCAjNjZkMmVhIDEwMCUpO2JvcmRlcjoycHggc29saWQgI2ZmZjtib3JkZXItcmFkaXVzOjUwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7Y3Vyc29yOnBvaW50ZXI7dG9wOjdweH0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19sZWZ0e2xlZnQ6NzhweDt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC0xMnB4KX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19yaWdodHtsZWZ0OjE2M3B4O3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEycHgpfS5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fcG9zdFRleHR7bWFyZ2luLXRvcDo1cHh9Lm1vdmluZy1zbGlkZXJ7dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGNBQ0UsVUFBVyxDQURiLHlDQUlJLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBTnZCLG9DQVVJLHVCQUF3QixDQUN4QixVQUFXLENBQ1gsa0JBQW1CLENBQ25CLDJCQUE0QixDQUM1QixpQkFBa0IsQ0FkdEIsMENBaUJNLGNBQWUsQ0FqQnJCLDJDQXFCTSxVQUFXLENBQ1gsb0NBQXdDLENBQ3hDLGlCQUFrQixDQUNsQixxQkFBc0IsQ0FDdEIsaUJBQWtCLENBQ2xCLHVCQUF3QixDQUN4Qiw0QkFBNkIsQ0FDN0IsVUFBVyxDQTVCakIseURBZ0NNLGlCQUFrQixDQUNsQixVQUFXLENBakNqQixtRkFvQ1EsU0FBVSxDQUNWLFdBQVksQ0FDWiw4QkFBa0MsQ0F0QzFDLGtGQTBDUSwwQkFBMkIsQ0FDM0IsY0FBZSxDQTNDdkIseURBZ0RNLHVCQUF3QixDQUN4QixVQUFXLENBQ1gsNERBQTZELENBQzdELGlCQUFrQixDQUNsQixxQkFBc0IsQ0FDdEIsOEJBQStCLENBckRyQyxpSEEwRE0sVUFBVyxDQUNYLFdBQVksQ0FDWiw0REFBNkQsQ0FDN0QscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixvQkFBcUIsQ0FDckIsaUJBQWtCLENBQ2xCLGNBQWUsQ0FDZixPQUFRLENBbEVkLHdEQXNFTSxTQUFVLENBQ1YsZ0NBQWlDLENBdkV2Qyx5REEyRU0sVUFBVyxDQUNYLGdDQUFpQyxDQTVFdkMsc0NBaUZJLGNBQWUsQ0FDaEIsZUFJRCxnQkFBaUIsQ0FDakIscUJBQXNCLENBQ3RCLHdCQUF5QixDQUN6QixvQkFBcUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJhbmdlLXNsaWRlciB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gIC5yYW5nZS1zbGlkZXJfX3RvcGljLWxhYmVsIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgfVxcclxcblxcclxcbiAgLnJhbmdlLXNsaWRlcl9fc2xpZGVyIHtcXHJcXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDExcHgpO1xcclxcbiAgICBoZWlnaHQ6IDZweDtcXHJcXG4gICAgbWFyZ2luOiAxOHB4IDAgMTBweDtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNXB4LCAwKTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAmOmhvdmVyIHtcXHJcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJjpiZWZvcmUge1xcclxcbiAgICAgIGNvbnRlbnQ6ICcnO1xcclxcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIHdpZHRoOiBjYWxjKDEwMCUgKyAxMXB4KTtcXHJcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNXB4LCAwKTtcXHJcXG4gICAgICBoZWlnaHQ6IDZweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAucmFuZ2Utc2xpZGVyX19zY2FsZSB7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIHotaW5kZXg6IC0xO1xcclxcblxcclxcbiAgICAgIC5yYW5nZS1zbGlkZXJfX3NjYWxlLWxpbmUge1xcclxcbiAgICAgICAgd2lkdGg6IDFweDtcXHJcXG4gICAgICAgIGhlaWdodDogMTBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5yYW5nZS1zbGlkZXJfX3NjYWxlLXZhbCB7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxyXFxuICAgICAgICBmb250LXNpemU6IDEwcHg7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5yYW5nZS1zbGlkZXJfX3JhbmdlIHtcXHJcXG4gICAgICBoZWlnaHQ6IGNhbGMoMTAwJSArIDBweCk7XFxyXFxuICAgICAgd2lkdGg6IDg1cHg7XFxyXFxuICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKTtcXHJcXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAwcHgpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5yYW5nZS1zbGlkZXJfX2xlZnQsXFxyXFxuICAgIC5yYW5nZS1zbGlkZXJfX3JpZ2h0IHtcXHJcXG4gICAgICB3aWR0aDogMTJweDtcXHJcXG4gICAgICBoZWlnaHQ6IDEycHg7XFxyXFxuICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZmY2Y5NyAwJSwgIzY2ZDJlYSAxMDAlKTtcXHJcXG4gICAgICBib3JkZXI6IDJweCBzb2xpZCAjZmZmO1xcclxcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XFxyXFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgdG9wOiA3cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnJhbmdlLXNsaWRlcl9fbGVmdCB7XFxyXFxuICAgICAgbGVmdDogNzhweDtcXHJcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtMTJweCk7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnJhbmdlLXNsaWRlcl9fcmlnaHQge1xcclxcbiAgICAgIGxlZnQ6IDE2M3B4O1xcclxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC0xMnB4KTtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgLnJhbmdlLXNsaWRlcl9fcG9zdFRleHQge1xcclxcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5tb3Zpbmctc2xpZGVyIHtcXHJcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vc3Rhcl9ib3JkZXIuc3ZnXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gZnJvbSBcIi4vc3Rhci5zdmdcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnJhdGUtYnRue2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDttYXJnaW46MTVweCAyMHB4IDAgMH0ucmF0ZS1idG4gLnJhdGUtYnRuX19zdGFye3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7bWFyZ2luOjAgMnB4O2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCU7YmFja2dyb3VuZC1zaXplOmNvbnRhaW59LnJhdGUtYnRuIC5yYXRlLWJ0bl9fc3Rhci5yYXRlLWJ0bl9fc3Rhcl9hY3RpdmV7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvcmF0ZS1idG4vcmF0ZS1idG4uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxVQUNFLFlBQWEsQ0FDYiwwQkFBMkIsQ0FDM0Isb0JBQXFCLENBSHZCLDBCQU1JLFVBQVcsQ0FDWCxXQUFZLENBQ1osWUFBYSxDQUNiLGNBQWUsQ0FDZix3REFBd0MsQ0FDeEMsMkJBQTRCLENBQzVCLHVCQUF3QixDQUN4Qix1QkFBd0IsQ0FiNUIsZ0RBZ0JNLHdEQUFpQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucmF0ZS1idG4ge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG4gIG1hcmdpbjogMTVweCAyMHB4IDAgMDtcXHJcXG5cXHJcXG4gIC5yYXRlLWJ0bl9fc3RhciB7XFxyXFxuICAgIHdpZHRoOiAyMHB4O1xcclxcbiAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgIG1hcmdpbjogMCAycHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdzdGFyX2JvcmRlci5zdmcnKTtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlO1xcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XFxyXFxuXFxyXFxuICAgICYucmF0ZS1idG5fX3N0YXJfYWN0aXZlIHtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ3N0YXIuc3ZnJyk7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvZ2dsZS1ibG9ja3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luOjNweCAwIDVweH0udG9nZ2xlLWJsb2NrIC50b2dnbGUtYmxvY2tfX3RvZ2dsZXtkaXNwbGF5OmZsZXg7d2lkdGg6MzhweDtoZWlnaHQ6MThweDtib3JkZXItcmFkaXVzOjEwcHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO21hcmdpbjo4cHggMCAwIDFweH0udG9nZ2xlLWJsb2NrIC50b2dnbGUtYmxvY2tfX3RvZ2dsZS50b2dnbGUtYmxvY2tfX3RvZ2dsZV9vZmZ7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LnRvZ2dsZS1ibG9jayAudG9nZ2xlLWJsb2NrX190b2dnbGUudG9nZ2xlLWJsb2NrX190b2dnbGVfb2ZmPi50b2dnbGUtYmxvY2tfX2l0ZW17YmFja2dyb3VuZDpyZ2JhKDMxLDMyLDY1LDAuMjUpfS50b2dnbGUtYmxvY2sgLnRvZ2dsZS1ibG9ja19fdG9nZ2xlLnRvZ2dsZS1ibG9ja19fdG9nZ2xlX29ue2p1c3RpZnktY29udGVudDpmbGV4LWVuZDtib3JkZXI6MXB4IHNvbGlkICNiYzljZmZ9LnRvZ2dsZS1ibG9jayAudG9nZ2xlLWJsb2NrX190b2dnbGUudG9nZ2xlLWJsb2NrX190b2dnbGVfb24+LnRvZ2dsZS1ibG9ja19faXRlbXtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNiYzljZmYgMCUsICM4YmE0ZjkgMTAwJSl9LnRvZ2dsZS1ibG9jayAudG9nZ2xlLWJsb2NrX190b2dnbGUgLnRvZ2dsZS1ibG9ja19faXRlbXt3aWR0aDoxMnB4O2hlaWdodDoxMnB4O2JvcmRlci1yYWRpdXM6NTAlO21hcmdpbjozcHh9LnRvZ2dsZS1ibG9jayBwe21hcmdpbjo1cHggMCAwIDEwcHg7dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvdG9nZ2xlLWJsb2NrL3RvZ2dsZS1ibG9jay5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGNBQ0UsWUFBYSxDQUNiLDBCQUEyQixDQUMzQixjQUFlLENBQ2YsZ0JBQWlCLENBSm5CLG9DQU9JLFlBQWEsQ0FDYixVQUFXLENBQ1gsV0FBWSxDQUNaLGtCQUFtQixDQUNuQixvQ0FBd0MsQ0FDeEMsa0JBQW1CLENBWnZCLDZEQWVNLDBCQUEyQixDQWZqQyxpRkFrQlEsOEJBQWtDLENBbEIxQyw0REF1Qk0sd0JBQXlCLENBQ3pCLHdCQUF5QixDQXhCL0IsZ0ZBMkJRLDREQUE2RCxDQTNCckUsd0RBZ0NNLFVBQVcsQ0FDWCxXQUFZLENBQ1osaUJBQWtCLENBQ2xCLFVBQVcsQ0FuQ2pCLGdCQXdDSSxtQkFBb0IsQ0FDcEIsZ0JBQWlCLENBQ2pCLHFCQUFzQixDQUN0Qix3QkFBeUIsQ0FDekIsb0JBQXFCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50b2dnbGUtYmxvY2sge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIG1hcmdpbjogM3B4IDAgNXB4O1xcclxcblxcclxcbiAgLnRvZ2dsZS1ibG9ja19fdG9nZ2xlIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgd2lkdGg6IDM4cHg7XFxyXFxuICAgIGhlaWdodDogMThweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgbWFyZ2luOiA4cHggMCAwIDFweDtcXHJcXG5cXHJcXG4gICAgJi50b2dnbGUtYmxvY2tfX3RvZ2dsZV9vZmYge1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG5cXHJcXG4gICAgICA+IC50b2dnbGUtYmxvY2tfX2l0ZW0ge1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJi50b2dnbGUtYmxvY2tfX3RvZ2dsZV9vbiB7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjYmM5Y2ZmO1xcclxcblxcclxcbiAgICAgID4gLnRvZ2dsZS1ibG9ja19faXRlbSB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjYmM5Y2ZmIDAlLCAjOGJhNGY5IDEwMCUpO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAudG9nZ2xlLWJsb2NrX19pdGVtIHtcXHJcXG4gICAgICB3aWR0aDogMTJweDtcXHJcXG4gICAgICBoZWlnaHQ6IDEycHg7XFxyXFxuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgIG1hcmdpbjogM3B4O1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxuXFxyXFxuICBwIHtcXHJcXG4gICAgbWFyZ2luOiA1cHggMCAwIDEwcHg7XFxyXFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi50b3BpYy1sYWJlbHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnRvcGljLWxhYmVsIGgzLC50b3BpYy1sYWJlbCBwe21hcmdpbjowfS50b3BpYy1sYWJlbCBwe2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjExcHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2NvbG9yOiMxZjIwNDE7bGV0dGVyLXNwYWNpbmc6LTAuMXB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvdG9waWMtbGFiZWwvdG9waWMtbGFiZWwuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUNFLFlBQWEsQ0FDYiw2QkFBOEIsQ0FGaEMsK0JBTUksUUFBUyxDQU5iLGVBVUksY0FBZSxDQUNmLGdCQUFpQixDQUNqQix3QkFBeUIsQ0FDekIsYUFBYyxDQUNkLHFCQUFzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudG9waWMtbGFiZWwge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHJcXG4gIGgzLFxcclxcbiAgcCB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIHAge1xcclxcbiAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxMXB4O1xcclxcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgICBjb2xvcjogIzFmMjA0MTtcXHJcXG4gICAgbGV0dGVyLXNwYWNpbmc6IC0wLjFweDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnN0YXJ0LXBhZ2V7cGFkZGluZzo4MHB4IDguNCV9LnN0YXJ0LXBhZ2UgLnN0YXJ0LXBhZ2VfX2xpbmtze2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Ym9keXttYXJnaW46MDtwYWRkaW5nOjA7Zm9udC1mYW1pbHk6J01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjEzLjdweDtsaW5lLWhlaWdodDoyNHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7bWluLXdpZHRoOjMyMHB4fWgxe2ZvbnQtZmFtaWx5OidNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjI0cHg7bGluZS1oZWlnaHQ6MzBweH1oMntmb250LWZhbWlseTonTW9udHNlcnJhdCcsIEFyaWFsLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxOXB4O2xpbmUtaGVpZ2h0OjI0cHh9aDN7Zm9udC1mYW1pbHk6J01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX1oMSxoMixoM3ttYXJnaW46MH1ib2R5LHB7Zm9udC1mYW1pbHk6J01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweH1he2N1cnNvcjpwb2ludGVyfWEgOmhvdmVye3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9aW1ne3VzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxZQUNFLGlCQUFrQixDQURwQiwrQkFJSSxZQUFhLENBQ2IscUJBQXNCLENBQ3ZCLEtBSUQsUUFBUyxDQUNULFNBQVUsQ0FDViwyQ0FBNEMsQ0FDNUMsaUJBQWtCLENBQ2xCLGtCQUFtQixDQUNuQixnQkFBaUIsQ0FDakIsZ0JBQWlCLENBQ2pCLHlCQUE2QixDQUM3QixlQUFnQixDQUNqQixHQUdDLDJDQUE0QyxDQUM1QyxjQUFlLENBQ2YsZ0JBQWlCLENBQ2xCLEdBR0MsMkNBQTRDLENBQzVDLGNBQWUsQ0FDZixnQkFBaUIsQ0FDbEIsR0FHQywyQ0FBNEMsQ0FDNUMsY0FBZSxDQUNmLGdCQUFpQixDQUNqQix3QkFBeUIsQ0FDMUIsU0FLQyxRQUFTLENBQ1YsT0FJQywyQ0FBNEMsQ0FDNUMsaUJBQWtCLENBQ2xCLGtCQUFtQixDQUNuQixjQUFlLENBQ2YsZ0JBQWlCLENBQ2xCLEVBR0MsY0FBZSxDQURqQixTQUdJLHlCQUEwQixDQUMzQixJQUlELGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3RhcnQtcGFnZSB7XFxyXFxuICBwYWRkaW5nOiA4MHB4IDguNCU7XFxyXFxuXFxyXFxuICAuc3RhcnQtcGFnZV9fbGlua3Mge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICBmb250LXNpemU6IDEzLjdweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcclxcbiAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC43NSk7XFxyXFxuICBtaW4td2lkdGg6IDMyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5oMSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gIGZvbnQtc2l6ZTogMjRweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5oMiB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gIGZvbnQtc2l6ZTogMTlweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG5oMyB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xcclxcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG59XFxyXFxuXFxyXFxuaDEsXFxyXFxuaDIsXFxyXFxuaDMge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5LFxcclxcbnAge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgOmhvdmVyIHtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbmltZyB7XFxyXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudWkta2l0LWZvcm0tZWxlbWVudHN7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO3BhZGRpbmc6MTIzcHggNTBweCAxMzBweCAxMjBweDtwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTQ0MHB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2ljby1sb2dve3dpZHRoOjQ4cHg7aGVpZ2h0OjQ4cHg7cG9zaXRpb246YWJzb2x1dGU7bGVmdDozMXB4O3RvcDozMHB4fS51aS1raXQtZm9ybS1lbGVtZW50cyBoM3tmb250LXNpemU6MTIuNXB4O2xldHRlci1zcGFjaW5nOi0wLjRweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGt7bWFyZ2luOjIwcHggMjBweCAzOXB4IDIwcHg7d2lkdGg6MzIwcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrIC51aS1raXQtZm9ybS1lbGVtZW50c19fZmxleC1ibG9ja3tkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18xe21hcmdpbi1yaWdodDoxMDZweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18xIC5pbnB1dC10ZXh0e21hcmdpbi1ib3R0b206MjBweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18xIC5pbnB1dC10ZXh0Om50aC1jaGlsZCgyKSAudG9waWMtbGFiZWwgcHtsaW5lLWhlaWdodDoxNnB4O2ZvbnQtc2l6ZToxMS43cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMSAuZHJvcGRvd24tYmxvY2t7bWFyZ2luLWJvdHRvbToyM3B4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzEgLmRyb3Bkb3duLWRhdGVze21hcmdpbi10b3A6MzlweDttYXJnaW4tYm90dG9tOjE4cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMSAuZHJvcGRvd24tZGF0ZXMgLmNhbGVuZGFyLWJsb2NrIC5jYWxlbmRhci1ibG9ja19fYnRuc3t3aWR0aDozMDFweDt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMS4ycHgpfS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzEgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19pbnB1dC1ibGstbmFycm93e3dpZHRoOjI2N3B4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzEgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19pbnB1dC1ibGstbmFycm93IC5pbnB1dC10ZXh0X3N1YnNjcmlwdGlvbnttYXJnaW46NDFweCAwfS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzEgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19pbnB1dC1ibGstbmFycm93IC5pbnB1dC10ZXh0X3N1YnNjcmlwdGlvbiAuaW5wdXQtdGV4dF9faW5wdXR7d2lkdGg6MTAwJX0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18ye21hcmdpbi1yaWdodDo1MnB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzIgLmNoZWNrYm94LWxpc3R7bWFyZ2luLWJvdHRvbTozMXB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzIgLnJhZGlvZ3JvdXBfX3JhZGlvLWJ0bnttYXJnaW4tYm90dG9tOjI2cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMiAucmFkaW9ncm91cF9fcmFkaW8tYnRuIC5yYWRpb2dyb3VwX19sYWJlbHtwYWRkaW5nLWxlZnQ6MzBweDttYXJnaW46MTZweCAyMHB4IDE2cHggMH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18yIGgzOm50aC1jaGlsZCg1KXtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxN3B4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzIgLnRvZ2dsZS1ibG9jazpudGgtY2hpbGQoNil7bWFyZ2luLXRvcDo3cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMiAudG9nZ2xlLWJsb2NrOm50aC1jaGlsZCg3KXttYXJnaW4tYm90dG9tOjQzcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMiAubGlrZXttYXJnaW46MTZweCA5cHggNDBweCAxcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMiAucmF0ZS1idG57bWFyZ2luOjE3cHggMTlweCAwIDFweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18zIC5idG57bWFyZ2luOjE2cHggMTdweCAxNHB4IDFweDtoZWlnaHQ6MzZweDtsaW5lLWhlaWdodDozNXB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzMgLmJ0bi5idG5fZ3JhZGllbnR7d2lkdGg6MTAwcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMyAuYnRuLmJ0bl9ib3JkZXJ7d2lkdGg6OTVweDtoZWlnaHQ6MzJweDtsaW5lLWhlaWdodDozMnB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzMgLmJ0bi5idG5fZ3JhZGllbnRfcGF5e3dpZHRoOjEwMCU7bWFyZ2luOjE1cHggMjBweCA0MHB4IDB9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMyAuYnRuLmJ0bl9ncmFkaWVudF9wYXkgLmJ0bl9fbGlua3tsZXR0ZXItc3BhY2luZzowLjFweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18zIC5idG4gLmJ0bl9fbGlua3tsZXR0ZXItc3BhY2luZzotMC4zcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMyAubGlua3tmb250LXNpemU6MTJweDttYXJnaW4tdG9wOjE3cHg7bWFyZ2luLWxlZnQ6MnB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzMgLnBhZ2luYXRpb257bWFyZ2luOjE2cHggMCA5cHggMXB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzMgLnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX251bS1ibG9jaywudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18zIC5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19sYWJlbHtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18zIC5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19sYWJlbHttYXJnaW4tbGVmdDo2cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfc2xpZGVye3dpZHRoOjMyMHB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrX3NsaWRlciAudWkta2l0LWZvcm0tZWxlbWVudHNfX3NsaWRlci1ibGt7d2lkdGg6MjY2cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfc2xpZGVyIC51aS1raXQtZm9ybS1lbGVtZW50c19fc2xpZGVyLWJsayAucmFuZ2Utc2xpZGVye21hcmdpbi1ib3R0b206OHB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrX3NsaWRlciAudWkta2l0LWZvcm0tZWxlbWVudHNfX3NsaWRlci1ibGsgLnJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX190b3BpYy1sYWJlbHthbGlnbi1pdGVtczpmbGV4LXN0YXJ0fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrX3NsaWRlciAudWkta2l0LWZvcm0tZWxlbWVudHNfX3NsaWRlci1ibGsgLnJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX190b3BpYy1sYWJlbCAucmFuZ2Utc2xpZGVyX19sYWJlbC1ibG9ja3ttYXJnaW46MnB4IDAgNnB4IDA7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTJweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa180e3dpZHRoOjI2NXB4O2hlaWdodDoyNjFweDttYXJnaW46MjBweCAxNjFweCAzOXB4IDIwcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNCAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1ze3BhZGRpbmctYm90dG9tOjVweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa180IC5kcm9wZG93bi1ibG9jaywudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181IC5kcm9wZG93bi1ibG9jaywudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa182IC5kcm9wZG93bi1ibG9ja3ttYXJnaW4tYm90dG9tOjIwcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNCAuZHJvcGRvd24tYmxvY2sgLnRvcGljLWxhYmVsLC51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzUgLmRyb3Bkb3duLWJsb2NrIC50b3BpYy1sYWJlbCwudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa182IC5kcm9wZG93bi1ibG9jayAudG9waWMtbGFiZWx7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzQgLmRyb3Bkb3duLWJsb2NrIC50b3BpYy1sYWJlbCBoMywudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa180IC5kcm9wZG93bi1ibG9jayAudG9waWMtbGFiZWwgcCwudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181IC5kcm9wZG93bi1ibG9jayAudG9waWMtbGFiZWwgaDMsLnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNSAuZHJvcGRvd24tYmxvY2sgLnRvcGljLWxhYmVsIHAsLnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNiAuZHJvcGRvd24tYmxvY2sgLnRvcGljLWxhYmVsIGgzLC51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzYgLmRyb3Bkb3duLWJsb2NrIC50b3BpYy1sYWJlbCBwe21hcmdpbjowfS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzQgLmRyb3Bkb3duLWJsb2NrIC50b3BpYy1sYWJlbCBwLC51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzUgLmRyb3Bkb3duLWJsb2NrIC50b3BpYy1sYWJlbCBwLC51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzYgLmRyb3Bkb3duLWJsb2NrIC50b3BpYy1sYWJlbCBwe2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2NvbG9yOiMxZjIwNDF9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNCAuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93biwudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLC51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzYgLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd257Ym9yZGVyLXJhZGl1czo0cHggNHB4IDAgMH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa180IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSwudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSwudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa182IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZXtoZWlnaHQ6YXV0b30udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa180IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSBoMywudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSBoMywudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa182IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSBoM3twYWRkaW5nOjEzcHggMTNweCAxMHB4IDE0cHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNCAuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHksLnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNSAuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHksLnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNiAuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHl7bWFyZ2luOjVweCA1cHggMCAwfS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzQgLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5IHNwYW4sLnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNSAuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgc3BhbiwudWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa182IC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSBzcGFue2ZvbnQtc2l6ZToxMnB4O21hcmdpbi1ib3R0b206M3B4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzV7bWFyZ2luOjIwcHggNTJweCAyMHB4IDIwcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNSAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1ze3BhZGRpbmctYm90dG9tOjB9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNSAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRuc3toZWlnaHQ6YXV0b30udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181IC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5saW5rX29re21hcmdpbjoyMHB4IDZweCAxMXB4IDB9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNiAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRuc3toZWlnaHQ6YXV0b30udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa182IC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5saW5rX2NsZWFue21hcmdpbjoyMHB4IDAgMTFweCAxNHB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzYgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmtfb2t7bWFyZ2luOjIwcHggNnB4IDExcHggMH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa183e3dpZHRoOjI2NXB4O21hcmdpbi1yaWdodDoxNjFweDttYXJnaW46MjBweCAxNjFweCA1cHggMjBweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa183IC5jaGVja2JveC1saXN0LWV4cGFuZGFibGV7bWFyZ2luOjAgMCA1MHB4IDB9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNyAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIC5jaGVja2JveC1saXN0LmNoZWNrYm94LWxpc3RfaGlkZSsuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2NrIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX2V4cGFuZHt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNyAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIC5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19sYWJlbHtwYWRkaW5nOjAgMCA5cHggMjlweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa184e3dpZHRoOjI2MHB4O21hcmdpbi1yaWdodDoxMTJweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa184IC5jaGVja2JveC1saXN0e21hcmdpbi10b3A6MTRweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa184IC5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtOm50aC1jaGlsZCgxKXt3aWR0aDoyMjBweH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa184IC5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19sYWJlbHtwYWRkaW5nOjFweCAwIDEwcHggMzBweDt3aGl0ZS1zcGFjZTpub3dyYXA7bGV0dGVyLXNwYWNpbmc6LTAuNHB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzkgLmxpc3QtYmxvY2sgaDN7bWFyZ2luLWJvdHRvbToxM3B4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzkgLmxpc3QtYmxvY2sgLmxpc3QtYmxvY2tfX2l0ZW06YmVmb3Jle21hcmdpbjo3cHggMTJweCA3cHggMH0udWkta2l0LWZvcm0tZWxlbWVudHMgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGsudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18xMHt3aWR0aDoyNzhweDttYXJnaW46MTlweCAxNDlweCAzOXB4IDIwcHh9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMTAgLmluZm8tYmxvY2t7d2lkdGg6MTAwJTttaW4td2lkdGg6dW5zZXQ7bWFyZ2luOjB9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMTAgLmluZm8tYmxvY2sgLmluZm8tYmxvY2tfX2l0ZW17bWFyZ2luOjI0cHggMCAyMnB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzEwIC5pbmZvLWJsb2NrIC5pbmZvLWJsb2NrX19pdGVtIC5pbmZvLWJsb2NrX19pY29ue21hcmdpbi1sZWZ0OjRweDttYXJnaW4tdG9wOjB9LnVpLWtpdC1mb3JtLWVsZW1lbnRzIC51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMTAgLmluZm8tYmxvY2sgLmluZm8tYmxvY2tfX2l0ZW0gLmluZm8tYmxvY2tfX3RleHQgcHtsaW5lLWhlaWdodDoxNHB4O21hcmdpbi1ib3R0b206MnB4fS51aS1raXQtZm9ybS1lbGVtZW50cyAudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsay51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzExe21hcmdpbjoyNnB4IDIwcHggMzlweCAyMHB4O3dpZHRoOjc1NXB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9wYWdlcy91aS1raXQtZm9ybS1lbGVtZW50cy91aS1raXQtZm9ybS1lbGVtZW50cy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHNCQUNFLFlBQWEsQ0FDYixjQUFlLENBQ2YsOEJBQStCLENBQy9CLGlCQUFrQixDQUNsQixxQkFBc0IsQ0FDdEIsWUFBYSxDQU5mLHNEQVNJLFVBQVcsQ0FDWCxXQUFZLENBQ1osaUJBQWtCLENBQ2xCLFNBQVUsQ0FDVixRQUFTLENBYmIseUJBaUJJLGdCQUFpQixDQUNqQixxQkFBc0IsQ0FsQjFCLGlEQXNCSSwwQkFBMkIsQ0FDM0IsV0FBWSxDQXZCaEIsbUZBMEJNLFlBQWEsQ0FDYixVQUFXLENBQ1gsMEJBQTJCLENBNUJqQyw2RUFnQ00sa0JBQW1CLENBaEN6Qix5RkFtQ1Esa0JBQW1CLENBbkMzQixxSEF3Q2MsZ0JBQWlCLENBQ2pCLGdCQUFpQixDQXpDL0IsNkZBZ0RRLGtCQUFtQixDQWhEM0IsNkZBb0RRLGVBQWdCLENBQ2hCLGtCQUFtQixDQXJEM0IsbUlBeURZLFdBQVksQ0FDWiw0QkFBNkIsQ0ExRHpDLHFIQWdFUSxXQUFZLENBaEVwQiw4SUFtRVUsYUFBYyxDQW5FeEIsaUtBc0VZLFVBQVcsQ0F0RXZCLDZFQStFTSxpQkFBa0IsQ0EvRXhCLDRGQWtGUSxrQkFBbUIsQ0FsRjNCLG9HQXNGUSxrQkFBbUIsQ0F0RjNCLHVIQXlGVSxpQkFBa0IsQ0FDbEIsdUJBQXdCLENBMUZsQyw2RkFnR1EsY0FBZSxDQUNmLGdCQUFpQixDQWpHekIsd0dBc0dVLGNBQWUsQ0F0R3pCLHdHQXlHVSxrQkFBbUIsQ0F6RzdCLG1GQThHUSx3QkFBeUIsQ0E5R2pDLHVGQWtIUSxzQkFBdUIsQ0FsSC9CLGtGQTBIUSx5QkFBMEIsQ0FDMUIsV0FBWSxDQUNaLGdCQUFpQixDQTVIekIsK0ZBK0hVLFdBQVksQ0EvSHRCLDZGQW1JVSxVQUFXLENBQ1gsV0FBWSxDQUNaLGdCQUFpQixDQXJJM0IsbUdBeUlVLFVBQVcsQ0FDWCx1QkFBd0IsQ0ExSWxDLDhHQTZJWSxvQkFBcUIsQ0E3SWpDLDZGQWtKVSxxQkFBc0IsQ0FsSmhDLG1GQXVKUSxjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIsZUFBZ0IsQ0F6SnhCLHlGQTZKUSxxQkFBc0IsQ0E3SjlCLDROQWlLVSwwQkFBMkIsQ0FqS3JDLDRHQXFLVSxlQUFnQixDQXJLMUIsa0ZBMktNLFdBQVksQ0EzS2xCLG9IQThLUSxXQUFZLENBOUtwQixrSUFpTFUsaUJBQWtCLENBakw1Qiw2SkFvTFksc0JBQXVCLENBcExuQyx3TEF1TGMsa0JBQW1CLENBQ25CLGNBQWUsQ0FDZixnQkFBaUIsQ0F6TC9CLDZFQW1NTSxXQUFZLENBQ1osWUFBYSxDQUNiLDJCQUE0QixDQXJNbEMsNkdBd01RLGtCQUFtQixDQXhNM0IsdVJBZ05RLGtCQUFtQixDQWhOM0IsOFRBbU5VLFlBQWEsQ0FDYiw2QkFBOEIsQ0FwTnhDLDJvQkF3TlksUUFBUyxDQXhOckIsb1VBNE5ZLGNBQWUsQ0FDZixnQkFBaUIsQ0FDakIsd0JBQXlCLENBQ3pCLGFBQWMsQ0EvTjFCLHFXQW9PVSx5QkFBMEIsQ0FwT3BDLDJjQXlPWSxXQUFZLENBek94QixvZEE0T2MsMkJBQTRCLENBNU8xQyw0aEJBZ1BjLGtCQUFtQixDQWhQakMsMmlCQW1QZ0IsY0FBZSxDQUNmLGlCQUFrQixDQXBQbEMsNkVBNlBNLDBCQUEyQixDQTdQakMsNkdBZ1FRLGdCQUFpQixDQWhRekIsbUlBbVFVLFdBQVksQ0FuUXRCLDRJQXNRWSxzQkFBdUIsQ0F0UW5DLG1JQStRVSxXQUFZLENBL1F0QiwrSUFrUlksdUJBQXdCLENBbFJwQyw0SUFzUlksc0JBQXVCLENBdFJuQyw2RUErUk0sV0FBWSxDQUNaLGtCQUFtQixDQUNuQiwwQkFBMkIsQ0FqU2pDLHVHQW9TUSxpQkFBa0IsQ0FwUzFCLGlOQTBTZ0Isd0JBQXlCLENBMVN6Qyw0SUFnVFksb0JBQXFCLENBaFRqQyw2RUF5VE0sV0FBWSxDQUNaLGtCQUFtQixDQTFUekIsNEZBNlRRLGVBQWdCLENBN1R4Qiw4SEFnVVUsV0FBWSxDQWhVdEIsa0hBb1VVLHVCQUF3QixDQUN4QixrQkFBbUIsQ0FDbkIscUJBQXNCLENBdFVoQyw0RkFnVlUsa0JBQW1CLENBaFY3QixrSEFvVlUscUJBQXNCLENBcFZoQyw4RUE0Vk0sV0FBWSxDQUNaLDJCQUE0QixDQTdWbEMsMEZBZ1dRLFVBQVcsQ0FDWCxlQUFnQixDQUNoQixRQUFTLENBbFdqQiw0R0FxV1Usa0JBQW1CLENBclc3Qiw4SEF3V1ksZUFBZ0IsQ0FDaEIsWUFBYSxDQXpXekIsZ0lBNldZLGdCQUFpQixDQUNqQixpQkFBa0IsQ0E5VzlCLDhFQXVYTSwwQkFBMkIsQ0FDM0IsV0FBWVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudWkta2l0LWZvcm0tZWxlbWVudHMge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gIHBhZGRpbmc6IDEyM3B4IDUwcHggMTMwcHggMTIwcHg7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgd2lkdGg6IDE0NDBweDtcXHJcXG5cXHJcXG4gIC51aS1raXQtZm9ybS1lbGVtZW50c19faWNvLWxvZ28ge1xcclxcbiAgICB3aWR0aDogNDhweDtcXHJcXG4gICAgaGVpZ2h0OiA0OHB4O1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIGxlZnQ6IDMxcHg7XFxyXFxuICAgIHRvcDogMzBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIGgzIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMi41cHg7XFxyXFxuICAgIGxldHRlci1zcGFjaW5nOiAtMC40cHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAudWkta2l0LWZvcm0tZWxlbWVudHNfX2JsayB7XFxyXFxuICAgIG1hcmdpbjogMjBweCAyMHB4IDM5cHggMjBweDtcXHJcXG4gICAgd2lkdGg6IDMyMHB4O1xcclxcblxcclxcbiAgICAudWkta2l0LWZvcm0tZWxlbWVudHNfX2ZsZXgtYmxvY2sge1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICYudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa18xIHtcXHJcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDEwNnB4O1xcclxcblxcclxcbiAgICAgIC5pbnB1dC10ZXh0IHtcXHJcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuXFxyXFxuICAgICAgICAmOm50aC1jaGlsZCgyKSB7XFxyXFxuICAgICAgICAgIC50b3BpYy1sYWJlbCB7XFxyXFxuICAgICAgICAgICAgcCB7XFxyXFxuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTZweDtcXHJcXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTEuN3B4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAuZHJvcGRvd24tYmxvY2sge1xcclxcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjNweDtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLmRyb3Bkb3duLWRhdGVzIHtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDM5cHg7XFxyXFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAxOHB4O1xcclxcblxcclxcbiAgICAgICAgLmNhbGVuZGFyLWJsb2NrIHtcXHJcXG4gICAgICAgICAgLmNhbGVuZGFyLWJsb2NrX19idG5zIHtcXHJcXG4gICAgICAgICAgICB3aWR0aDogMzAxcHg7XFxyXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xLjJweCk7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19pbnB1dC1ibGstbmFycm93IHtcXHJcXG4gICAgICAgIHdpZHRoOiAyNjdweDtcXHJcXG5cXHJcXG4gICAgICAgIC5pbnB1dC10ZXh0X3N1YnNjcmlwdGlvbiB7XFxyXFxuICAgICAgICAgIG1hcmdpbjogNDFweCAwO1xcclxcblxcclxcbiAgICAgICAgICAuaW5wdXQtdGV4dF9faW5wdXQge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMiB7XFxyXFxuICAgICAgbWFyZ2luLXJpZ2h0OiA1MnB4O1xcclxcblxcclxcbiAgICAgIC5jaGVja2JveC1saXN0IHtcXHJcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDMxcHg7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5yYWRpb2dyb3VwX19yYWRpby1idG4ge1xcclxcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjZweDtcXHJcXG5cXHJcXG4gICAgICAgIC5yYWRpb2dyb3VwX19sYWJlbCB7XFxyXFxuICAgICAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcXHJcXG4gICAgICAgICAgbWFyZ2luOiAxNnB4IDIwcHggMTZweCAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICBoMzpudGgtY2hpbGQoNSkge1xcclxcbiAgICAgICAgLy9Ub2dnbGVcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAudG9nZ2xlLWJsb2NrIHtcXHJcXG4gICAgICAgICY6bnRoLWNoaWxkKDYpIHtcXHJcXG4gICAgICAgICAgbWFyZ2luLXRvcDogN3B4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgJjpudGgtY2hpbGQoNykge1xcclxcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0M3B4O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAubGlrZSB7XFxyXFxuICAgICAgICBtYXJnaW46IDE2cHggOXB4IDQwcHggMXB4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAucmF0ZS1idG4ge1xcclxcbiAgICAgICAgbWFyZ2luOiAxN3B4IDE5cHggMCAxcHg7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMyB7XFxyXFxuICAgICAgLmJ0biB7XFxyXFxuICAgICAgICBtYXJnaW46IDE2cHggMTdweCAxNHB4IDFweDtcXHJcXG4gICAgICAgIGhlaWdodDogMzZweDtcXHJcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzNXB4O1xcclxcblxcclxcbiAgICAgICAgJi5idG5fZ3JhZGllbnQge1xcclxcbiAgICAgICAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmLmJ0bl9ib3JkZXIge1xcclxcbiAgICAgICAgICB3aWR0aDogOTVweDtcXHJcXG4gICAgICAgICAgaGVpZ2h0OiAzMnB4O1xcclxcbiAgICAgICAgICBsaW5lLWhlaWdodDogMzJweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICYuYnRuX2dyYWRpZW50X3BheSB7XFxyXFxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgICBtYXJnaW46IDE1cHggMjBweCA0MHB4IDA7XFxyXFxuXFxyXFxuICAgICAgICAgIC5idG5fX2xpbmsge1xcclxcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjFweDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgLmJ0bl9fbGluayB7XFxyXFxuICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAtMC4zcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5saW5rIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDE3cHg7XFxyXFxuICAgICAgICBtYXJnaW4tbGVmdDogMnB4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAucGFnaW5hdGlvbiB7XFxyXFxuICAgICAgICBtYXJnaW46IDE2cHggMCA5cHggMXB4O1xcclxcblxcclxcbiAgICAgICAgLnBhZ2luYXRpb25fX251bS1ibG9jayxcXHJcXG4gICAgICAgIC5wYWdpbmF0aW9uX19sYWJlbCB7XFxyXFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5wYWdpbmF0aW9uX19sYWJlbCB7XFxyXFxuICAgICAgICAgIG1hcmdpbi1sZWZ0OiA2cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgICYudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa19zbGlkZXIge1xcclxcbiAgICAgIHdpZHRoOiAzMjBweDtcXHJcXG5cXHJcXG4gICAgICAudWkta2l0LWZvcm0tZWxlbWVudHNfX3NsaWRlci1ibGsge1xcclxcbiAgICAgICAgd2lkdGg6IDI2NnB4O1xcclxcblxcclxcbiAgICAgICAgLnJhbmdlLXNsaWRlciB7XFxyXFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcXHJcXG5cXHJcXG4gICAgICAgICAgLnJhbmdlLXNsaWRlcl9fdG9waWMtbGFiZWwge1xcclxcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcclxcblxcclxcbiAgICAgICAgICAgIC5yYW5nZS1zbGlkZXJfX2xhYmVsLWJsb2NrIHtcXHJcXG4gICAgICAgICAgICAgIG1hcmdpbjogMnB4IDAgNnB4IDA7XFxyXFxuICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTJweDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxyXFxuXFxyXFxuICAgICYudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa180IHtcXHJcXG4gICAgICB3aWR0aDogMjY1cHg7XFxyXFxuICAgICAgaGVpZ2h0OiAyNjFweDtcXHJcXG4gICAgICBtYXJnaW46IDIwcHggMTYxcHggMzlweCAyMHB4O1xcclxcblxcclxcbiAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMge1xcclxcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDVweDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJi51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzQsXFxyXFxuICAgICYudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa181LFxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNiB7XFxyXFxuICAgICAgLmRyb3Bkb3duLWJsb2NrIHtcXHJcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuXFxyXFxuICAgICAgICAudG9waWMtbGFiZWwge1xcclxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuXFxyXFxuICAgICAgICAgIGgzLFxcclxcbiAgICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgcCB7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNXB4O1xcclxcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxuICAgICAgICAgICAgY29sb3I6ICMxZjIwNDE7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24ge1xcclxcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMge1xcclxcbiAgICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUge1xcclxcbiAgICAgICAgICAgIGhlaWdodDogYXV0bztcXHJcXG5cXHJcXG4gICAgICAgICAgICBoMyB7XFxyXFxuICAgICAgICAgICAgICBwYWRkaW5nOiAxM3B4IDEzcHggMTBweCAxNHB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSB7XFxyXFxuICAgICAgICAgICAgICBtYXJnaW46IDVweCA1cHggMCAwO1xcclxcblxcclxcbiAgICAgICAgICAgICAgc3BhbiB7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogM3B4O1xcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNSB7XFxyXFxuICAgICAgbWFyZ2luOiAyMHB4IDUycHggMjBweCAyMHB4O1xcclxcblxcclxcbiAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMge1xcclxcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDA7XFxyXFxuXFxyXFxuICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2J0bnMge1xcclxcbiAgICAgICAgICBoZWlnaHQ6IGF1dG87XFxyXFxuXFxyXFxuICAgICAgICAgIC5saW5rX29rIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IDIwcHggNnB4IDExcHggMDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNiB7XFxyXFxuICAgICAgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyB7XFxyXFxuICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2J0bnMge1xcclxcbiAgICAgICAgICBoZWlnaHQ6IGF1dG87XFxyXFxuXFxyXFxuICAgICAgICAgIC5saW5rX2NsZWFuIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IDIwcHggMCAxMXB4IDE0cHg7XFxyXFxuICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgLmxpbmtfb2sge1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogMjBweCA2cHggMTFweCAwO1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfNyB7XFxyXFxuICAgICAgd2lkdGg6IDI2NXB4O1xcclxcbiAgICAgIG1hcmdpbi1yaWdodDogMTYxcHg7XFxyXFxuICAgICAgbWFyZ2luOiAyMHB4IDE2MXB4IDVweCAyMHB4O1xcclxcblxcclxcbiAgICAgIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGUge1xcclxcbiAgICAgICAgbWFyZ2luOiAwIDAgNTBweCAwO1xcclxcblxcclxcbiAgICAgICAgLmNoZWNrYm94LWxpc3Qge1xcclxcbiAgICAgICAgICAmLmNoZWNrYm94LWxpc3RfaGlkZSB7XFxyXFxuICAgICAgICAgICAgKyAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2NrIHtcXHJcXG4gICAgICAgICAgICAgIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX2V4cGFuZCB7XFxyXFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgIC5jaGVja2JveC1saXN0X19sYWJlbCB7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMCAwIDlweCAyOXB4O1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfOCB7XFxyXFxuICAgICAgd2lkdGg6IDI2MHB4O1xcclxcbiAgICAgIG1hcmdpbi1yaWdodDogMTEycHg7XFxyXFxuXFxyXFxuICAgICAgLmNoZWNrYm94LWxpc3Qge1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogMTRweDtcXHJcXG5cXHJcXG4gICAgICAgIC5jaGVja2JveC1saXN0X19pdGVtOm50aC1jaGlsZCgxKSB7XFxyXFxuICAgICAgICAgIHdpZHRoOiAyMjBweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5jaGVja2JveC1saXN0X19sYWJlbCB7XFxyXFxuICAgICAgICAgIHBhZGRpbmc6IDFweCAwIDEwcHggMzBweDtcXHJcXG4gICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IC0wLjRweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxyXFxuXFxyXFxuICAgICYudWkta2l0LWZvcm0tZWxlbWVudHNfX2Jsa185IHtcXHJcXG4gICAgICAubGlzdC1ibG9jayB7XFxyXFxuICAgICAgICBoMyB7XFxyXFxuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEzcHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAubGlzdC1ibG9ja19faXRlbTpiZWZvcmUge1xcclxcbiAgICAgICAgICBtYXJnaW46IDdweCAxMnB4IDdweCAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXHJcXG5cXHJcXG4gICAgJi51aS1raXQtZm9ybS1lbGVtZW50c19fYmxrXzEwIHtcXHJcXG4gICAgICB3aWR0aDogMjc4cHg7XFxyXFxuICAgICAgbWFyZ2luOiAxOXB4IDE0OXB4IDM5cHggMjBweDtcXHJcXG5cXHJcXG4gICAgICAuaW5mby1ibG9jayB7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogdW5zZXQ7XFxyXFxuICAgICAgICBtYXJnaW46IDA7XFxyXFxuXFxyXFxuICAgICAgICAuaW5mby1ibG9ja19faXRlbSB7XFxyXFxuICAgICAgICAgIG1hcmdpbjogMjRweCAwIDIycHg7XFxyXFxuXFxyXFxuICAgICAgICAgIC5pbmZvLWJsb2NrX19pY29uIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XFxyXFxuICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgLmluZm8tYmxvY2tfX3RleHQgcCB7XFxyXFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE0cHg7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnB4O1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcclxcblxcclxcbiAgICAmLnVpLWtpdC1mb3JtLWVsZW1lbnRzX19ibGtfMTEge1xcclxcbiAgICAgIG1hcmdpbjogMjZweCAyMHB4IDM5cHggMjBweDtcXHJcXG4gICAgICB3aWR0aDogNzU1cHg7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9tb250c2VycmF0LWJvbGQud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWJvbGQud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIGZyb20gXCIuL21vbnRzZXJyYXQtYm9sZC50dGZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyBmcm9tIFwiLi9tb250c2VycmF0LWJsYWNrLWl0YWxpYy53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fIGZyb20gXCIuL21vbnRzZXJyYXQtYmxhY2staXRhbGljLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWJsYWNrLWl0YWxpYy50dGZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyBmcm9tIFwiLi9tb250c2VycmF0LWV4dHJhLWxpZ2h0LndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1leHRyYS1saWdodC53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1leHRyYS1saWdodC50dGZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWJvbGQtaXRhbGljLndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fIGZyb20gXCIuL21vbnRzZXJyYXQtYm9sZC1pdGFsaWMud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWJvbGQtaXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMl9fXyBmcm9tIFwiLi9tb250c2VycmF0LWxpZ2h0LndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEzX19fIGZyb20gXCIuL21vbnRzZXJyYXQtbGlnaHQud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNF9fXyBmcm9tIFwiLi9tb250c2VycmF0LWxpZ2h0LnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWV4dHJhLWxpZ2h0LWl0YWxpYy53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xNl9fXyBmcm9tIFwiLi9tb250c2VycmF0LWV4dHJhLWxpZ2h0LWl0YWxpYy53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE3X19fIGZyb20gXCIuL21vbnRzZXJyYXQtZXh0cmEtbGlnaHQtaXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xOF9fXyBmcm9tIFwiLi9tb250c2VycmF0LWl0YWxpYy53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xOV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWl0YWxpYy53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzIwX19fIGZyb20gXCIuL21vbnRzZXJyYXQtaXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yMV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWV4dHJhLWJvbGQud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMjJfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1leHRyYS1ib2xkLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMjNfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1leHRyYS1ib2xkLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yNF9fXyBmcm9tIFwiLi9tb250c2VycmF0LWV4dHJhLWJvbGQtaXRhbGljLndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI1X19fIGZyb20gXCIuL21vbnRzZXJyYXQtZXh0cmEtYm9sZC1pdGFsaWMud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yNl9fXyBmcm9tIFwiLi9tb250c2VycmF0LWV4dHJhLWJvbGQtaXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yN19fXyBmcm9tIFwiLi9tb250c2VycmF0LWJsYWNrLndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI4X19fIGZyb20gXCIuL21vbnRzZXJyYXQtYmxhY2sud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yOV9fXyBmcm9tIFwiLi9tb250c2VycmF0LWJsYWNrLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zMF9fXyBmcm9tIFwiLi9tb250c2VycmF0LXRoaW4taXRhbGljLndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzMxX19fIGZyb20gXCIuL21vbnRzZXJyYXQtdGhpbi1pdGFsaWMud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zMl9fXyBmcm9tIFwiLi9tb250c2VycmF0LXRoaW4taXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zM19fXyBmcm9tIFwiLi9tb250c2VycmF0LXNlbWktYm9sZC1pdGFsaWMud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMzRfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1zZW1pLWJvbGQtaXRhbGljLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMzVfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1zZW1pLWJvbGQtaXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zNl9fXyBmcm9tIFwiLi9tb250c2VycmF0LXRoaW4ud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMzdfX18gZnJvbSBcIi4vbW9udHNlcnJhdC10aGluLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMzhfX18gZnJvbSBcIi4vbW9udHNlcnJhdC10aGluLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zOV9fXyBmcm9tIFwiLi9tb250c2VycmF0LXJlZ3VsYXIud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNDBfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1yZWd1bGFyLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNDFfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1yZWd1bGFyLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80Ml9fXyBmcm9tIFwiLi9tb250c2VycmF0LWxpZ2h0LWl0YWxpYy53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80M19fXyBmcm9tIFwiLi9tb250c2VycmF0LWxpZ2h0LWl0YWxpYy53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ0X19fIGZyb20gXCIuL21vbnRzZXJyYXQtbGlnaHQtaXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80NV9fXyBmcm9tIFwiLi9tb250c2VycmF0LW1lZGl1bS1pdGFsaWMud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNDZfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1tZWRpdW0taXRhbGljLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNDdfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1tZWRpdW0taXRhbGljLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80OF9fXyBmcm9tIFwiLi9tb250c2VycmF0LW1lZGl1bS53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80OV9fXyBmcm9tIFwiLi9tb250c2VycmF0LW1lZGl1bS53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzUwX19fIGZyb20gXCIuL21vbnRzZXJyYXQtbWVkaXVtLnR0ZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81MV9fXyBmcm9tIFwiLi9tb250c2VycmF0LXNlbWktYm9sZC53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81Ml9fXyBmcm9tIFwiLi9tb250c2VycmF0LXNlbWktYm9sZC53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzUzX19fIGZyb20gXCIuL21vbnRzZXJyYXQtc2VtaS1ib2xkLnR0ZlwiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzExX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEyX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEzX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE0X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE1X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE2X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xN19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE3X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE4X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzE5X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzIwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzIxX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzIyX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzIzX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI0X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI1X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI2X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yN19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI3X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI4X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzI5X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzMwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzMxX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzMyX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzMzX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzM0X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zNV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzM1X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzM2X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zN19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzM3X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zOF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzM4X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzM5X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80MF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80MV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQxX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80Ml9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQyX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80M19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQzX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80NF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ0X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80NV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ1X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80Nl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ2X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80N19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ3X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80OF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ4X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80OV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzQ5X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81MF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzUwX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81MV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzUxX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81Ml9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzUyX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81M19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzUzX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qTW9udHNlcnJhdCovXFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIGZvcm1hdCgnd29mZjInKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpIGZvcm1hdCgnd29mZjInKSxcXHJcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBmb3JtYXQoJ3dvZmYnKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fICsgXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAyMDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMV9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMl9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEzX19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xNF9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogMzAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE1X19fICsgXCIpIGZvcm1hdCgnd29mZjInKSxcXHJcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTZfX18gKyBcIikgZm9ybWF0KCd3b2ZmJyksXFxyXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzE3X19fICsgXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAyMDA7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMThfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xOV9fXyArIFwiKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMjBfX18gKyBcIikgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yMV9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzIyX19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yM19fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yNF9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzI1X19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yNl9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yN19fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzI4X19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yOV9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzMwX19fICsgXCIpIGZvcm1hdCgnd29mZjInKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMzFfX18gKyBcIikgZm9ybWF0KCd3b2ZmJyksXFxyXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzMyX19fICsgXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAxMDA7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMzNfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zNF9fXyArIFwiKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMzVfX18gKyBcIikgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zNl9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzM3X19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zOF9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogMTAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzM5X19fICsgXCIpIGZvcm1hdCgnd29mZjInKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDBfX18gKyBcIikgZm9ybWF0KCd3b2ZmJyksXFxyXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQxX19fICsgXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDJfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80M19fXyArIFwiKSBmb3JtYXQoJ3dvZmYnKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDRfX18gKyBcIikgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80NV9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQ2X19fICsgXCIpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80N19fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzQ4X19fICsgXCIpIGZvcm1hdCgnd29mZjInKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNDlfX18gKyBcIikgZm9ybWF0KCd3b2ZmJyksXFxyXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzUwX19fICsgXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNTFfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81Ml9fXyArIFwiKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNTNfX18gKyBcIikgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2ZvbnQvZm9udHMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGFBQWE7O0FBRWI7RUFDRSx5QkFBeUI7RUFDekI7OERBQytDO0VBQy9DLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCO3NIQUMyRztFQUMzRyxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6Qjs4REFDc0Q7RUFDdEQsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekI7K0RBQ3NEO0VBQ3RELGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCOytEQUNnRDtFQUNoRCxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6Qjs7K0RBRTZEO0VBQzdELGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCOytEQUNpRDtFQUNqRCxtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QjsrREFDcUQ7RUFDckQsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekI7OytEQUU0RDtFQUM1RCxpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QjsrREFDZ0Q7RUFDaEQsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekI7K0RBQ3NEO0VBQ3RELGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCOzsrREFFMkQ7RUFDM0QsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekI7K0RBQytDO0VBQy9DLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCOytEQUNrRDtFQUNsRCxtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6Qjt3SEFDMkc7RUFDM0csZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekI7OytEQUV3RDtFQUN4RCxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QjsrREFDaUQ7RUFDakQsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekI7K0RBQ29EO0VBQ3BELGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qTW9udHNlcnJhdCovXFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoJ21vbnRzZXJyYXQtYm9sZC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCdtb250c2VycmF0LWJvbGQud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtYm9sZC50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoJ21vbnRzZXJyYXQtYmxhY2staXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtYmxhY2staXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSwgdXJsKCdtb250c2VycmF0LWJsYWNrLWl0YWxpYy50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogOTAwO1xcclxcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybCgnbW9udHNlcnJhdC1leHRyYS1saWdodC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCdtb250c2VycmF0LWV4dHJhLWxpZ2h0LndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCdtb250c2VycmF0LWV4dHJhLWxpZ2h0LnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAyMDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LWJvbGQtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJ21vbnRzZXJyYXQtYm9sZC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtYm9sZC1pdGFsaWMudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LWxpZ2h0LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJ21vbnRzZXJyYXQtbGlnaHQud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtbGlnaHQudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoJ21vbnRzZXJyYXQtZXh0cmEtbGlnaHQtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtZXh0cmEtbGlnaHQtaXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCdtb250c2VycmF0LWV4dHJhLWxpZ2h0LWl0YWxpYy50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogMjAwO1xcclxcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybCgnbW9udHNlcnJhdC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnbW9udHNlcnJhdC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtaXRhbGljLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LWV4dHJhLWJvbGQud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnbW9udHNlcnJhdC1leHRyYS1ib2xkLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCdtb250c2VycmF0LWV4dHJhLWJvbGQudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LWV4dHJhLWJvbGQtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtZXh0cmEtYm9sZC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtZXh0cmEtYm9sZC1pdGFsaWMudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LWJsYWNrLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJ21vbnRzZXJyYXQtYmxhY2sud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtYmxhY2sudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoJ21vbnRzZXJyYXQtdGhpbi1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnbW9udHNlcnJhdC10aGluLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXFxyXFxuICAgIHVybCgnbW9udHNlcnJhdC10aGluLWl0YWxpYy50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogMTAwO1xcclxcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybCgnbW9udHNlcnJhdC1zZW1pLWJvbGQtaXRhbGljLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtc2VtaS1ib2xkLWl0YWxpYy53b2ZmJykgZm9ybWF0KCd3b2ZmJyksXFxyXFxuICAgIHVybCgnbW9udHNlcnJhdC1zZW1pLWJvbGQtaXRhbGljLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LXRoaW4ud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnbW9udHNlcnJhdC10aGluLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCdtb250c2VycmF0LXRoaW4udHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDEwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoJ21vbnRzZXJyYXQtcmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSwgdXJsKCdtb250c2VycmF0LXJlZ3VsYXIud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtcmVndWxhci50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybCgnbW9udHNlcnJhdC1saWdodC1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuICAgIHVybCgnbW9udHNlcnJhdC1saWdodC1pdGFsaWMud29mZicpIGZvcm1hdCgnd29mZicpLCB1cmwoJ21vbnRzZXJyYXQtbGlnaHQtaXRhbGljLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxyXFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JztcXHJcXG4gIHNyYzogdXJsKCdtb250c2VycmF0LW1lZGl1bS1pdGFsaWMud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuICAgIHVybCgnbW9udHNlcnJhdC1tZWRpdW0taXRhbGljLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCdtb250c2VycmF0LW1lZGl1bS1pdGFsaWMudHRmJykgZm9ybWF0KCd0cnVldHlwZScpO1xcclxcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXHJcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcXHJcXG4gIGZvbnQtZGlzcGxheTogc3dhcDtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiB1cmwoJ21vbnRzZXJyYXQtbWVkaXVtLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLCB1cmwoJ21vbnRzZXJyYXQtbWVkaXVtLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCdtb250c2VycmF0LW1lZGl1bS50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCc7XFxyXFxuICBzcmM6IHVybCgnbW9udHNlcnJhdC1zZW1pLWJvbGQud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIHVybCgnbW9udHNlcnJhdC1zZW1pLWJvbGQud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJ21vbnRzZXJyYXQtc2VtaS1ib2xkLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LWRpc3BsYXk6IHN3YXA7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDAwZmRlNTM0YjlhNzYyODQ1NDM3NDY1ZTE1NDVhMjQuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhmMmZkZmRkNjJiYzg0MDMyZGQ2ZmEwNWRiZmFjNmU5LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4ZjJmZGZkZDYyYmM4NDAzMmRkNmZhMDVkYmZhYzZlOS5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWZjMjg0ZDNjOTIwOTI4NzZjZGEwNDIyZjg2YWQzN2Yuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhmMmZkZmRkNjJiYzg0MDMyZGQ2ZmEwNWRiZmFjNmU5LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhY2RiZTA5OGZhNTQ5YmJiNjA3ZjBhN2RkOGQ3NWNhZC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNTIxZDMxOWVlNGQyOGQzZjQzNTVkMTg4YmI3YzNmZWYuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImQwMGZkZTUzNGI5YTc2Mjg0NTQzNzQ2NWUxNTQ1YTI0LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2ZTc0ZGE3MDVlNTdkMTA0Njk5NjMxMmRkNTIwODUwNy5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYmEyOTVhZDQ1OTQxN2Q1ZjE1N2VhNmFlYjY4OWY3NGEuc3ZnXCI7IiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIxLTAzLTAyVDE3OjA4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdFx0XHQvLyBJbiBDaHJvbWUsIGlmIGFuIGVsZW1lbnQgaGF2aW5nIGEgZm9jdXNvdXQgaGFuZGxlciBpcyBibHVycmVkIGJ5XG5cdFx0XHRcdFx0XHQvLyBjbGlja2luZyBvdXRzaWRlIG9mIGl0LCBpdCBpbnZva2VzIHRoZSBoYW5kbGVyIHN5bmNocm9ub3VzbHkuIElmXG5cdFx0XHRcdFx0XHQvLyB0aGF0IGhhbmRsZXIgY2FsbHMgYC5yZW1vdmUoKWAgb24gdGhlIGVsZW1lbnQsIHRoZSBkYXRhIGlzIGNsZWFyZWQsXG5cdFx0XHRcdFx0XHQvLyBsZWF2aW5nIGByZXN1bHRgIHVuZGVmaW5lZC4gV2UgbmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgYXMgaXQncyBhbHJlYWR5IGJlaW5nIGZpcmVkXG5cdFx0Ly8gaW4gbGV2ZXJhZ2VOYXRpdmUuXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQWZyaWthYW5zIFthZl1cbi8vISBhdXRob3IgOiBXZXJuZXIgTW9sbGVudHplIDogaHR0cHM6Ly9naXRodWIuY29tL3dlcm5lcm1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBhZiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FmJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTXJ0X0Fwcl9NZWlfSnVuX0p1bF9BdWdfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1NvbmRhZ19NYWFuZGFnX0RpbnNkYWdfV29lbnNkYWdfRG9uZGVyZGFnX1ZyeWRhZ19TYXRlcmRhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1Nvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19NYV9EaV9Xb19Eb19Wcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3ZtfG5tL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9ebm0kL2kudGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAndm0nIDogJ1ZNJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnbm0nIDogJ05NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tWYW5kYWcgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTcO0cmUgb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbR2lzdGVyIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYWFzXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvb3IgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGdlbGVkZScsXG4gICAgICAgICAgICBzOiBcIiduIHBhYXIgc2Vrb25kZXNcIixcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vrb25kZXMnLFxuICAgICAgICAgICAgbTogXCInbiBtaW51dXRcIixcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlJyxcbiAgICAgICAgICAgIGg6IFwiJ24gdXVyXCIsXG4gICAgICAgICAgICBoaDogJyVkIHVyZScsXG4gICAgICAgICAgICBkOiBcIiduIGRhZ1wiLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWUnLFxuICAgICAgICAgICAgTTogXCInbiBtYWFuZFwiLFxuICAgICAgICAgICAgTU06ICclZCBtYWFuZGUnLFxuICAgICAgICAgICAgeTogXCInbiBqYWFyXCIsXG4gICAgICAgICAgICB5eTogJyVkIGphYXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjAgPyAnc3RlJyA6ICdkZScpXG4gICAgICAgICAgICApOyAvLyBUaGFua3MgdG8gSm9yaXMgUsO2bGluZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qanVwaXRlclxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1hYW5kYWcgaXMgZGllIGVlcnN0ZSBkYWcgdmFuIGRpZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBEaWUgd2VlayB3YXQgZGllIDRkZSBKYW51YXJpZSBiZXZhdCBpcyBkaWUgZWVyc3RlIHdlZWsgdmFuIGRpZSBqYWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFmO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoQWxnZXJpYSkgW2FyLWR6XVxuLy8hIGF1dGhvciA6IEFtaW5lIFJvdWtoOiBodHRwczovL2dpdGh1Yi5jb20vQW1pbmUyN1xuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcbi8vISBhdXRob3IgOiBBaG1lZCBFbGtoYXRpYlxuLy8hIGF1dGhvciA6IGZvcmFiaSBodHRwczovL2dpdGh1Yi5jb20vZm9yYWJpXG4vLyEgYXV0aG9yIDogTm91cmVkZGluZSBMT1VBSEVESiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub3VyZWRkaW5lbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IG4gPT09IDFcbiAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICA6IG4gPT09IDJcbiAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwXG4gICAgICAgICAgICAgICAgPyAzXG4gICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDExXG4gICAgICAgICAgICAgICAgPyA0XG4gICAgICAgICAgICAgICAgOiA1O1xuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxzID0ge1xuICAgICAgICAgICAgczogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9ir2KfZhtmK2KrYp9mGJywgJ9ir2KfZhtmK2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINir2YjYp9mGJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGg6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICfYs9in2LnYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGQ6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2YrZiNmFJyxcbiAgICAgICAgICAgICAgICAn2YrZiNmFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9mK2YjZhdin2YYnLCAn2YrZiNmF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIE06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAn2LTZh9ixINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsdinJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ixJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB5OiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi52KfZhScsXG4gICAgICAgICAgICAgICAgJ9i52KfZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYudmI2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBwbHVyYWxGb3JtKG51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJbd2l0aG91dFN1ZmZpeCA/IDAgOiAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9is2KfZhtmB2YonLFxuICAgICAgICAgICAgJ9mB2YrZgdix2YonLFxuICAgICAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgICAgICfYo9mB2LHZitmEJyxcbiAgICAgICAgICAgICfZhdin2YonLFxuICAgICAgICAgICAgJ9is2YjYp9mGJyxcbiAgICAgICAgICAgICfYrNmI2YrZhNmK2KknLFxuICAgICAgICAgICAgJ9ij2YjYqicsXG4gICAgICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgICAgICfYo9mD2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICAgICAn2K/Zitiz2YXYqNixJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBhckR6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItZHonLCB7XG4gICAgICAgIG1vbnRoczogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfYqNi52K8gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIG06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW06IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBoaDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIE06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU06IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgICAgICB5eTogcGx1cmFsaXplKCd5JyksXG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyRHo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChLdXdhaXQpIFthci1rd11cbi8vISBhdXRob3IgOiBOdXNyZXQgUGFybGFrOiBodHRwczovL2dpdGh1Yi5jb20vbnVzcmV0cGFybGFrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYXJLdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWt3Jywge1xuICAgICAgICBtb250aHM6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYqtmG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KfYrdivX9in2KrZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyS3c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJhYmljIChMeWJpYSkgW2FyLWx5XVxuLy8hIGF1dGhvciA6IEFsaSBIbWVyOiBodHRwczovL2dpdGh1Yi5jb20va2lrb2FuaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAnMScsXG4gICAgICAgICAgICAyOiAnMicsXG4gICAgICAgICAgICAzOiAnMycsXG4gICAgICAgICAgICA0OiAnNCcsXG4gICAgICAgICAgICA1OiAnNScsXG4gICAgICAgICAgICA2OiAnNicsXG4gICAgICAgICAgICA3OiAnNycsXG4gICAgICAgICAgICA4OiAnOCcsXG4gICAgICAgICAgICA5OiAnOScsXG4gICAgICAgICAgICAwOiAnMCcsXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPT09IDBcbiAgICAgICAgICAgICAgICA/IDBcbiAgICAgICAgICAgICAgICA6IG4gPT09IDFcbiAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICA6IG4gPT09IDJcbiAgICAgICAgICAgICAgICA/IDJcbiAgICAgICAgICAgICAgICA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwXG4gICAgICAgICAgICAgICAgPyAzXG4gICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDExXG4gICAgICAgICAgICAgICAgPyA0XG4gICAgICAgICAgICAgICAgOiA1O1xuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxzID0ge1xuICAgICAgICAgICAgczogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYq9in2YbZitipJyxcbiAgICAgICAgICAgICAgICAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9ir2KfZhtmK2KrYp9mGJywgJ9ir2KfZhtmK2KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINir2YjYp9mGJyxcbiAgICAgICAgICAgICAgICAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgICAgICAnJWQg2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGg6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LPYp9i52KknLFxuICAgICAgICAgICAgICAgICfYs9in2LnYqSDZiNin2K3Yr9ipJyxcbiAgICAgICAgICAgICAgICBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAnJWQg2LPYp9i52KknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGQ6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2YrZiNmFJyxcbiAgICAgICAgICAgICAgICAn2YrZiNmFINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9mK2YjZhdin2YYnLCAn2YrZiNmF2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINmK2YjZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIE06IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2LTZh9ixJyxcbiAgICAgICAgICAgICAgICAn2LTZh9ixINmI2KfYrdivJyxcbiAgICAgICAgICAgICAgICBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsdinJyxcbiAgICAgICAgICAgICAgICAnJWQg2LTZh9ixJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB5OiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi52KfZhScsXG4gICAgICAgICAgICAgICAgJ9i52KfZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYudmI2KfZhScsXG4gICAgICAgICAgICAgICAgJyVkINi52KfZhdmL2KcnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YUnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBwbHVyYWxGb3JtKG51bWJlciksXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHJbd2l0aG91dFN1ZmZpeCA/IDAgOiAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzID0gW1xuICAgICAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAgICAgJ9mB2KjYsdin2YrYsScsXG4gICAgICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAgICAgJ9mF2KfZitmIJyxcbiAgICAgICAgICAgICfZitmI2YbZitmIJyxcbiAgICAgICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgICAgICfYo9i62LPYt9izJyxcbiAgICAgICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICAgICAn2YbZiNmB2YXYqNixJyxcbiAgICAgICAgICAgICfYr9mK2LPZhdio2LEnLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGFyTHkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1seScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgc3M6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbTogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgZGQ6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTTogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICB5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5OiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJMeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgKE1vcm9jY28pIFthci1tYV1cbi8vISBhdXRob3IgOiBFbEZhZGlsaSBZYXNzaW5lIDogaHR0cHM6Ly9naXRodWIuY29tL0VsRmFkaWxpWVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYXJNYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLW1hJywge1xuICAgICAgICBtb250aHM6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZil/ZitmI2YbZitmIX9mK2YjZhNmK2YjYsl/Yuti02Kpf2LTYqtmG2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmG2KjYsV/Yr9is2YbYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2KfYrdivX9in2KvZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzczogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbTogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW06ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGg6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE06ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU06ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5OiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPZhtmI2KfYqicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhck1hO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEFyYWJpYyAoU2F1ZGkgQXJhYmlhKSBbYXItc2FdXG4vLyEgYXV0aG9yIDogU3VoYWlsIEFsa293YWlsZWV0IDogaHR0cHM6Ly9naXRodWIuY29tL3hzb2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn2aEnLFxuICAgICAgICAgICAgMjogJ9miJyxcbiAgICAgICAgICAgIDM6ICfZoycsXG4gICAgICAgICAgICA0OiAn2aQnLFxuICAgICAgICAgICAgNTogJ9mlJyxcbiAgICAgICAgICAgIDY6ICfZpicsXG4gICAgICAgICAgICA3OiAn2acnLFxuICAgICAgICAgICAgODogJ9moJyxcbiAgICAgICAgICAgIDk6ICfZqScsXG4gICAgICAgICAgICAwOiAn2aAnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICAgICAn2aAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYXJTYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXNhJywge1xuICAgICAgICBtb250aHM6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyU2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlICA6ICBBcmFiaWMgKFR1bmlzaWEpIFthci10bl1cbi8vISBhdXRob3IgOiBOYWRlciBUb3VrYWJyaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9uYWRlcmlvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgYXJUbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXRuJywge1xuICAgICAgICBtb250aHM6ICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3M6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJUbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBcmFiaWMgW2FyXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hYmRlbHNhaWRcbi8vISBhdXRob3IgOiBBaG1lZCBFbGtoYXRpYlxuLy8hIGF1dGhvciA6IGZvcmFiaSBodHRwczovL2dpdGh1Yi5jb20vZm9yYWJpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9mhJyxcbiAgICAgICAgICAgIDI6ICfZoicsXG4gICAgICAgICAgICAzOiAn2aMnLFxuICAgICAgICAgICAgNDogJ9mkJyxcbiAgICAgICAgICAgIDU6ICfZpScsXG4gICAgICAgICAgICA2OiAn2aYnLFxuICAgICAgICAgICAgNzogJ9mnJyxcbiAgICAgICAgICAgIDg6ICfZqCcsXG4gICAgICAgICAgICA5OiAn2aknLFxuICAgICAgICAgICAgMDogJ9mgJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAgICAgJ9mgJzogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBuID09PSAwXG4gICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgOiBuID09PSAxXG4gICAgICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICAgICAgOiBuID09PSAyXG4gICAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgICAgOiBuICUgMTAwID49IDMgJiYgbiAlIDEwMCA8PSAxMFxuICAgICAgICAgICAgICAgID8gM1xuICAgICAgICAgICAgICAgIDogbiAlIDEwMCA+PSAxMVxuICAgICAgICAgICAgICAgID8gNFxuICAgICAgICAgICAgICAgIDogNTtcbiAgICAgICAgfSxcbiAgICAgICAgcGx1cmFscyA9IHtcbiAgICAgICAgICAgIHM6IFtcbiAgICAgICAgICAgICAgICAn2KPZgtmEINmF2YYg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICAgICAgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLFxuICAgICAgICAgICAgICAgICclZCDYq9mI2KfZhicsXG4gICAgICAgICAgICAgICAgJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgICAgICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICfYr9mC2YrZgtipINmI2KfYrdiv2KknLFxuICAgICAgICAgICAgICAgIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICAgICAgJyVkINiv2YLZitmC2KknLFxuICAgICAgICAgICAgICAgICclZCDYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBoOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINiz2KfYudipJyxcbiAgICAgICAgICAgICAgICAn2LPYp9i52Kkg2YjYp9it2K/YqScsXG4gICAgICAgICAgICAgICAgWyfYs9in2LnYqtin2YYnLCAn2LPYp9i52KrZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgICAgICclZCDYs9in2LnYqScsXG4gICAgICAgICAgICAgICAgJyVkINiz2KfYudipJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBkOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINmK2YjZhScsXG4gICAgICAgICAgICAgICAgJ9mK2YjZhSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgICAgICclZCDZitmI2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2YrZiNmFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBNOiBbXG4gICAgICAgICAgICAgICAgJ9ij2YLZhCDZhdmGINi02YfYsScsXG4gICAgICAgICAgICAgICAgJ9i02YfYsSDZiNin2K3YrycsXG4gICAgICAgICAgICAgICAgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSxcbiAgICAgICAgICAgICAgICAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgICAgICclZCDYtNmH2LHYpycsXG4gICAgICAgICAgICAgICAgJyVkINi02YfYsScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeTogW1xuICAgICAgICAgICAgICAgICfYo9mC2YQg2YXZhiDYudin2YUnLFxuICAgICAgICAgICAgICAgICfYudin2YUg2YjYp9it2K8nLFxuICAgICAgICAgICAgICAgIFsn2LnYp9mF2KfZhicsICfYudin2YXZitmGJ10sXG4gICAgICAgICAgICAgICAgJyVkINij2LnZiNin2YUnLFxuICAgICAgICAgICAgICAgICclZCDYudin2YXZi9inJyxcbiAgICAgICAgICAgICAgICAnJWQg2LnYp9mFJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICAgICAgaWYgKGYgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfZitmG2KfZitixJyxcbiAgICAgICAgICAgICfZgdio2LHYp9mK2LEnLFxuICAgICAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgICAgICfYo9io2LHZitmEJyxcbiAgICAgICAgICAgICfZhdin2YrZiCcsXG4gICAgICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICAgICAn2YrZiNmE2YrZiCcsXG4gICAgICAgICAgICAn2KPYutiz2LfYsycsXG4gICAgICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgICAgICfYo9mD2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICAgICAn2K/Zitiz2YXYqNixJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBhciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzczogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIG1tOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGg6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIE1NOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXk6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBemVyYmFpamFuaSBbYXpdXG4vLyEgYXV0aG9yIDogdG9wY2hpeWV2IDogaHR0cHM6Ly9naXRodWIuY29tL3RvcGNoaXlldlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiAnLWluY2knLFxuICAgICAgICA1OiAnLWluY2knLFxuICAgICAgICA4OiAnLWluY2knLFxuICAgICAgICA3MDogJy1pbmNpJyxcbiAgICAgICAgODA6ICctaW5jaScsXG4gICAgICAgIDI6ICctbmNpJyxcbiAgICAgICAgNzogJy1uY2knLFxuICAgICAgICAyMDogJy1uY2knLFxuICAgICAgICA1MDogJy1uY2knLFxuICAgICAgICAzOiAnLcO8bmPDvCcsXG4gICAgICAgIDQ6ICctw7xuY8O8JyxcbiAgICAgICAgMTAwOiAnLcO8bmPDvCcsXG4gICAgICAgIDY6ICctbmPEsScsXG4gICAgICAgIDk6ICctdW5jdScsXG4gICAgICAgIDEwOiAnLXVuY3UnLFxuICAgICAgICAzMDogJy11bmN1JyxcbiAgICAgICAgNjA6ICctxLFuY8SxJyxcbiAgICAgICAgOTA6ICctxLFuY8SxJyxcbiAgICB9O1xuXG4gICAgdmFyIGF6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXonLCB7XG4gICAgICAgIG1vbnRoczogJ3lhbnZhcl9mZXZyYWxfbWFydF9hcHJlbF9tYXlfaXl1bl9peXVsX2F2cXVzdF9zZW50eWFicl9va3R5YWJyX25veWFicl9kZWthYnInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAneWFuX2Zldl9tYXJfYXByX21heV9peW5faXlsX2F2cV9zZW5fb2t0X25veV9kZWsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnQmF6YXJfQmF6YXIgZXJ0yZlzaV/Dh8mZcsWfyZluYsmZIGF4xZ9hbcSxX8OHyZlyxZ/JmW5iyZlfQ8O8bcmZIGF4xZ9hbcSxX0PDvG3JmV/FnsmZbmLJmScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0Jhel9CekVfw4dBeF/Dh8mZcl9DQXhfQ8O8bV/FnsmZbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdCel9CRV/Dh0Ffw4fJmV9DQV9Dw7xfxZ7JmScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2J1Z8O8biBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3NhYmFoIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW2fJmWzJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tkw7xuyZluXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1trZcOnyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgc29ucmEnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMmZdnbJmWwnLFxuICAgICAgICAgICAgczogJ2JpciBuZcOnyZkgc2FuaXnJmScsXG4gICAgICAgICAgICBzczogJyVkIHNhbml5yZknLFxuICAgICAgICAgICAgbTogJ2JpciBkyZlxaXHJmScsXG4gICAgICAgICAgICBtbTogJyVkIGTJmXFpccmZJyxcbiAgICAgICAgICAgIGg6ICdiaXIgc2FhdCcsXG4gICAgICAgICAgICBoaDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgZDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICBNOiAnYmlyIGF5JyxcbiAgICAgICAgICAgIE1NOiAnJWQgYXknLFxuICAgICAgICAgICAgeTogJ2JpciBpbCcsXG4gICAgICAgICAgICB5eTogJyVkIGlsJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2dlY8mZfHPJmWjJmXJ8Z8O8bmTDvHp8YXjFn2FtLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14oZ8O8bmTDvHp8YXjFn2FtKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnZWPJmSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc8mZaMmZcic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZ8O8bmTDvHonO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2F4xZ9hbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0oxLFuY8SxfGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLcSxbmPEsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSAobnVtYmVyICUgMTAwKSAtIGEsXG4gICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBhejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCZWxhcnVzaWFuIFtiZV1cbi8vISBhdXRob3IgOiBEbWl0cnkgRGVtaWRvdiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZW1pZG92OTFcbi8vISBhdXRob3I6IFByYWxlc2thOiBodHRwOi8vcHJhbGVza2EucHJvL1xuLy8hIEF1dGhvciA6IE1lbmVsaW9uIEVsZW5zw7psZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9PaXJlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTFcbiAgICAgICAgICAgID8gZm9ybXNbMF1cbiAgICAgICAgICAgIDogbnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApXG4gICAgICAgICAgICA/IGZvcm1zWzFdXG4gICAgICAgICAgICA6IGZvcm1zWzJdO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzczogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtbTogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsF/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L0nIDogJ9GF0LLRltC70ZbQvdGDX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScsXG4gICAgICAgICAgICBoaDogd2l0aG91dFN1ZmZpeCA/ICfQs9Cw0LTQt9GW0L3QsF/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nIDogJ9Cz0LDQtNC30ZbQvdGDX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvScsXG4gICAgICAgICAgICBkZDogJ9C00LfQtdC90Yxf0LTQvdGWX9C00LfRkdC9JyxcbiAgICAgICAgICAgIE1NOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0Ytf0LzQtdGB0Y/RhtCw0Z4nLFxuICAgICAgICAgICAgeXk6ICfQs9C+0LRf0LPQsNC00Ytf0LPQsNC00L7RnicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstGW0LvRltC90LAnIDogJ9GF0LLRltC70ZbQvdGDJztcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LAnIDogJ9Cz0LDQtNC30ZbQvdGDJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmUnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0YHRgtGD0LTQt9C10L3Rj1/Qu9GO0YLQsNCz0LBf0YHQsNC60LDQstGW0LrQsF/QutGA0LDRgdCw0LLRltC60LBf0YLRgNCw0Z7QvdGPX9GH0Y3RgNCy0LXQvdGPX9C70ZbQv9C10L3Rj1/QttC90ZbRntC90Y9f0LLQtdGA0LDRgdC90Y9f0LrQsNGB0YLRgNGL0YfQvdGW0LrQsF/Qu9GW0YHRgtCw0L/QsNC00LBf0YHQvdC10LbQvdGPJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0YHRgtGD0LTQt9C10L3RjF/Qu9GO0YLRi1/RgdCw0LrQsNCy0ZbQul/QutGA0LDRgdCw0LLRltC6X9GC0YDQsNCy0LXQvdGMX9GH0Y3RgNCy0LXQvdGMX9C70ZbQv9C10L3RjF/QttC90ZbQstC10L3RjF/QstC10YDQsNGB0LXQvdGMX9C60LDRgdGC0YDRi9GH0L3RltC6X9C70ZbRgdGC0LDQv9Cw0LRf0YHQvdC10LbQsNC90YwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRgdGC0YPQtF/Qu9GO0YJf0YHQsNC6X9C60YDQsNGBX9GC0YDQsNCyX9GH0Y3RgNCyX9C70ZbQv1/QttC90ZbQsl/QstC10YBf0LrQsNGB0YJf0LvRltGB0YJf0YHQvdC10LYnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfQvdGP0LTQt9C10LvRjl/Qv9Cw0L3Rj9C00LfQtdC70LDQul/QsNGe0YLQvtGA0LDQul/RgdC10YDQsNC00YNf0YfQsNGG0LLQtdGAX9C/0Y/RgtC90ZbRhtGDX9GB0YPQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9C90Y/QtNC30LXQu9GPX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTQsF/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0LBf0YHRg9Cx0L7RgtCwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9Cj0YPRnl0gPyg/OtC80ZbQvdGD0LvRg9GOfNC90LDRgdGC0YPQv9C90YPRjik/ID9cXF0gP2RkZGQvLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC0X9C/0L1f0LDRgl/RgdGAX9GH0YZf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDQsy4sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHRkdC90L3RjyDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0Z7RgtGA0LAg0Z5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0KPRh9C+0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vQo10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQoyDQvNGW0L3Rg9C70YPRjl0gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRi10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQv9GA0LDQtyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg0YLQsNC80YMnLFxuICAgICAgICAgICAgczogJ9C90LXQutCw0LvRjNC60ZYg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6ICfQtNC30LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5OiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Yt80YDQsNC90ZbRhtGLfNC00L3Rj3zQstC10YfQsNGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LDRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRiyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDQsNC90ZbRhtGLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9Cw0YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0ZZ80Yt80LPQsCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW1iZXIgJSAxMCA9PT0gMiB8fCBudW1iZXIgJSAxMCA9PT0gMykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciAlIDEwMCAhPT0gMTIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlciAlIDEwMCAhPT0gMTNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbnVtYmVyICsgJy3RlidcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVtYmVyICsgJy3Riyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0LAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBiZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCdWxnYXJpYW4gW2JnXVxuLy8hIGF1dGhvciA6IEtyYXNlbiBCb3Jpc292IDogaHR0cHM6Ly9naXRodWIuY29tL2tyYXpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBiZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JnJywge1xuICAgICAgICBtb250aHM6ICfRj9C90YPQsNGA0Lhf0YTQtdCy0YDRg9Cw0YDQuF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Rg1/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9C90LXQtNC10LvRj1/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0Y/QtNCwX9GH0LXRgtCy0YrRgNGC0YrQul/Qv9C10YLRitC6X9GB0YrQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtF/Qv9C+0L1f0LLRgtC+X9GB0YDRj1/Rh9C10YJf0L/QtdGCX9GB0YrQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQlNC90LXRgSDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQo9GC0YDQtSDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwINCyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JzQuNC90LDQu9Cw0YLQsF0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JzQuNC90LDQu9C40Y9dIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0YHQu9C10LQgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9C/0YDQtdC00LggJXMnLFxuICAgICAgICAgICAgczogJ9C90Y/QutC+0LvQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzOiAnJWQg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgbTogJ9C80LjQvdGD0YLQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC80LjQvdGD0YLQuCcsXG4gICAgICAgICAgICBoOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YfQsNGB0LAnLFxuICAgICAgICAgICAgZDogJ9C00LXQvScsXG4gICAgICAgICAgICBkZDogJyVkINC00LXQvdCwJyxcbiAgICAgICAgICAgIHc6ICfRgdC10LTQvNC40YbQsCcsXG4gICAgICAgICAgICB3dzogJyVkINGB0LXQtNC80LjRhtC4JyxcbiAgICAgICAgICAgIE06ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LzQtdGB0LXRhtCwJyxcbiAgICAgICAgICAgIHk6ICfQs9C+0LTQuNC90LAnLFxuICAgICAgICAgICAgeXk6ICclZCDQs9C+0LTQuNC90LgnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC10LJ80LXQvXzRgtC4fNCy0Lh80YDQuHzQvNC4KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJnO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJhbWJhcmEgW2JtXVxuLy8hIGF1dGhvciA6IEVzdGVsbGUgQ29tbWVudCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9lc3RlbGxlY29tbWVudFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGJtID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm0nLCB7XG4gICAgICAgIG1vbnRoczogJ1phbnd1eWVrYWxvX0Zld3VydXlla2Fsb19NYXJpc2lrYWxvX0F3aXJpbGlrYWxvX03Jm2thbG9fWnV3yZtua2Fsb19adWx1eWVrYWxvX1V0aWthbG9fU8mbdGFuYnVydWthbG9fyZRrdXTJlGJ1cnVrYWxvX05vd2FuYnVydWthbG9fRGVzYW5idXJ1a2Fsbycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdaYW5fRmV3X01hcl9Bd2lfTcmbX1p1d19adWxfVXRpX1PJm3RfyZRrdV9Ob3dfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0thcmlfTnTJm27Jm25fVGFyYXRhX0FyYWJhX0FsYW1pc2FfSnVtYV9TaWJpcmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdLYXJfTnTJm19UYXJfQXJhX0FsYV9KdW1fU2liJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0thX050X1RhX0FyX0FsX0p1X1NpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVkgW2zJm3LJm10gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZIFtsyZtyyZtdIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQmkgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1NpbmkgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2RvbiBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS3VudSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbdMmbbcmbbmVuIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBryZRuyZQnLFxuICAgICAgICAgICAgcGFzdDogJ2EgYsmbICVzIGLJlCcsXG4gICAgICAgICAgICBzOiAnc2FuZ2EgZGFtYSBkYW1hJyxcbiAgICAgICAgICAgIHNzOiAnc2Vrb25kaSAlZCcsXG4gICAgICAgICAgICBtOiAnbWluaXRpIGtlbGVuJyxcbiAgICAgICAgICAgIG1tOiAnbWluaXRpICVkJyxcbiAgICAgICAgICAgIGg6ICdsyZtyyZsga2VsZW4nLFxuICAgICAgICAgICAgaGg6ICdsyZtyyZsgJWQnLFxuICAgICAgICAgICAgZDogJ3RpbGUga2VsZW4nLFxuICAgICAgICAgICAgZGQ6ICd0aWxlICVkJyxcbiAgICAgICAgICAgIE06ICdrYWxvIGtlbGVuJyxcbiAgICAgICAgICAgIE1NOiAna2FsbyAlZCcsXG4gICAgICAgICAgICB5OiAnc2FuIGtlbGVuJyxcbiAgICAgICAgICAgIHl5OiAnc2FuICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJtO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEJlbmdhbGkgKEJhbmdsYWRlc2gpIFtibi1iZF1cbi8vISBhdXRob3IgOiBBc3JhZiBIb3NzYWluIFBhdG9hcnkgOiBodHRwczovL2dpdGh1Yi5jb20vYXNod29vbGZvcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4KenJyxcbiAgICAgICAgICAgIDI6ICfgp6gnLFxuICAgICAgICAgICAgMzogJ+CnqScsXG4gICAgICAgICAgICA0OiAn4KeqJyxcbiAgICAgICAgICAgIDU6ICfgp6snLFxuICAgICAgICAgICAgNjogJ+CnrCcsXG4gICAgICAgICAgICA3OiAn4KetJyxcbiAgICAgICAgICAgIDg6ICfgp64nLFxuICAgICAgICAgICAgOTogJ+CnrycsXG4gICAgICAgICAgICAwOiAn4KemJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Cnpyc6ICcxJyxcbiAgICAgICAgICAgICfgp6gnOiAnMicsXG4gICAgICAgICAgICAn4KepJzogJzMnLFxuICAgICAgICAgICAgJ+Cnqic6ICc0JyxcbiAgICAgICAgICAgICfgp6snOiAnNScsXG4gICAgICAgICAgICAn4KesJzogJzYnLFxuICAgICAgICAgICAgJ+CnrSc6ICc3JyxcbiAgICAgICAgICAgICfgp64nOiAnOCcsXG4gICAgICAgICAgICAn4KevJzogJzknLFxuICAgICAgICAgICAgJ+Cnpic6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBibkJkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4tYmQnLCB7XG4gICAgICAgIG1vbnRoczogJ+CmnOCmvuCmqOCngeCnn+CmvuCmsOCmv1/gpqvgp4fgpqzgp43gprDgp4Hgp5/gpr7gprDgpr9f4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4Kaf4KeH4Kau4KeN4Kas4KawX+CmheCmleCnjeCmn+Cni+CmrOCmsF/gpqjgpq3gp4fgpq7gp43gpqzgprBf4Kah4Ka/4Ka44KeH4Kau4KeN4Kas4KawJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqzgp43gprDgp4Ff4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprngprjgp43gpqrgpqTgpr9f4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka5X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CmhuCmnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgppfgpqTgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgpqrgprDgp4cnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCmhuCml+CnhycsXG4gICAgICAgICAgICBzOiAn4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBzczogJyVkIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBtOiAn4KaP4KaVIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBtbTogJyVkIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBoOiAn4KaP4KaVIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBoaDogJyVkIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBkOiAn4KaP4KaVIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBNOiAn4KaP4KaVIOCmruCmvuCmuCcsXG4gICAgICAgICAgICBNTTogJyVkIOCmruCmvuCmuCcsXG4gICAgICAgICAgICB5OiAn4KaP4KaVIOCmrOCmm+CmsCcsXG4gICAgICAgICAgICB5eTogJyVkIOCmrOCmm+CmsCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgp6fgp6jgp6ngp6rgp6vgp6zgp63gp67gp6/gp6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CmsOCmvuCmpHzgpq3gp4vgprB84Ka44KaV4Ka+4KayfOCmpuCngeCmquCngeCmsHzgpqzgpr/gppXgpr7gprJ84Ka44Kao4KeN4Kan4KeN4Kav4Ka+fOCmsOCmvuCmpC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmreCni+CmsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgprjgppXgpr7gprInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kam4KeB4Kaq4KeB4KawJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDMgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmrOCmv+CmleCmvuCmsicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CmuOCmqOCnjeCmp+CnjeCmr+CmvicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpq3gp4vgprAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmuOCmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kam4KeB4Kaq4KeB4KawJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqzgpr/gppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmuOCmqOCnjeCmp+CnjeCmr+Cmvic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJuQmQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQmVuZ2FsaSBbYm5dXG4vLyEgYXV0aG9yIDogS2F1c2hpayBHYW5kaGkgOiBodHRwczovL2dpdGh1Yi5jb20va2F1c2hpa2dhbmRoaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgp6cnLFxuICAgICAgICAgICAgMjogJ+CnqCcsXG4gICAgICAgICAgICAzOiAn4KepJyxcbiAgICAgICAgICAgIDQ6ICfgp6onLFxuICAgICAgICAgICAgNTogJ+CnqycsXG4gICAgICAgICAgICA2OiAn4KesJyxcbiAgICAgICAgICAgIDc6ICfgp60nLFxuICAgICAgICAgICAgODogJ+CnricsXG4gICAgICAgICAgICA5OiAn4KevJyxcbiAgICAgICAgICAgIDA6ICfgp6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KenJzogJzEnLFxuICAgICAgICAgICAgJ+CnqCc6ICcyJyxcbiAgICAgICAgICAgICfgp6knOiAnMycsXG4gICAgICAgICAgICAn4KeqJzogJzQnLFxuICAgICAgICAgICAgJ+Cnqyc6ICc1JyxcbiAgICAgICAgICAgICfgp6wnOiAnNicsXG4gICAgICAgICAgICAn4KetJzogJzcnLFxuICAgICAgICAgICAgJ+Cnric6ICc4JyxcbiAgICAgICAgICAgICfgp68nOiAnOScsXG4gICAgICAgICAgICAn4KemJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGJuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4nLCB7XG4gICAgICAgIG1vbnRoczogJ+CmnOCmvuCmqOCngeCnn+CmvuCmsOCmv1/gpqvgp4fgpqzgp43gprDgp4Hgp5/gpr7gprDgpr9f4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4Kaf4KeH4Kau4KeN4Kas4KawX+CmheCmleCnjeCmn+Cni+CmrOCmsF/gpqjgpq3gp4fgpq7gp43gpqzgprBf4Kah4Ka/4Ka44KeH4Kau4KeN4Kas4KawJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqzgp43gprDgp4Ff4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsOCmv+Cmsl/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsuCmvuCmh1/gpobgppfgprjgp43gpp9f4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaX4KayX+CmrOCngeCmp1/gpqzgp4Pgprngprjgp43gpqrgpqTgpr9f4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka5X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CmhuCmnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgppfgpqTgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDgpqrgprDgp4cnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCmhuCml+CnhycsXG4gICAgICAgICAgICBzOiAn4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBzczogJyVkIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBtOiAn4KaP4KaVIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBtbTogJyVkIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBoOiAn4KaP4KaVIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBoaDogJyVkIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBkOiAn4KaP4KaVIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBkZDogJyVkIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBNOiAn4KaP4KaVIOCmruCmvuCmuCcsXG4gICAgICAgICAgICBNTTogJyVkIOCmruCmvuCmuCcsXG4gICAgICAgICAgICB5OiAn4KaP4KaVIOCmrOCmm+CmsCcsXG4gICAgICAgICAgICB5eTogJyVkIOCmrOCmm+CmsCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgp6fgp6jgp6ngp6rgp6vgp6zgp63gp67gp6/gp6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gprDgpr7gpqR84Ka44KaV4Ka+4KayfOCmpuCngeCmquCngeCmsHzgpqzgpr/gppXgpr7gprJ84Kaw4Ka+4KakLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmpuCngeCmquCngeCmsCcgJiYgaG91ciA8IDUpIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpqzgpr/gppXgpr7gprInXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprjgppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmpuCngeCmquCngeCmsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kas4Ka/4KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGliZXRhbiBbYm9dXG4vLyEgYXV0aG9yIDogVGh1cHRlbiBOLiBDaGFrcmlzaGFyIDogaHR0cHM6Ly9naXRodWIuY29tL3ZhanJhZG9nXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+C8oScsXG4gICAgICAgICAgICAyOiAn4LyiJyxcbiAgICAgICAgICAgIDM6ICfgvKMnLFxuICAgICAgICAgICAgNDogJ+C8pCcsXG4gICAgICAgICAgICA1OiAn4LylJyxcbiAgICAgICAgICAgIDY6ICfgvKYnLFxuICAgICAgICAgICAgNzogJ+C8pycsXG4gICAgICAgICAgICA4OiAn4LyoJyxcbiAgICAgICAgICAgIDk6ICfgvKknLFxuICAgICAgICAgICAgMDogJ+C8oCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgvKEnOiAnMScsXG4gICAgICAgICAgICAn4LyiJzogJzInLFxuICAgICAgICAgICAgJ+C8oyc6ICczJyxcbiAgICAgICAgICAgICfgvKQnOiAnNCcsXG4gICAgICAgICAgICAn4LylJzogJzUnLFxuICAgICAgICAgICAgJ+C8pic6ICc2JyxcbiAgICAgICAgICAgICfgvKcnOiAnNycsXG4gICAgICAgICAgICAn4LyoJzogJzgnLFxuICAgICAgICAgICAgJ+C8qSc6ICc5JyxcbiAgICAgICAgICAgICfgvKAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgYm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibycsIHtcbiAgICAgICAgbW9udGhzOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4L2f4L6z4LyLMV/gvZ/gvrPgvIsyX+C9n+C+s+C8izNf4L2f4L6z4LyLNF/gvZ/gvrPgvIs1X+C9n+C+s+C8izZf4L2f4L6z4LyLN1/gvZ/gvrPgvIs4X+C9n+C+s+C8izlf4L2f4L6z4LyLMTBf4L2f4L6z4LyLMTFf4L2f4L6z4LyLMTInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKOC9n+C+s+C8i1xcZHsxLDJ9KS8sXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4L2C4L2f4L2g4LyL4L2J4L2y4LyL4L2Y4LyLX+C9guC9n+C9oOC8i+C9n+C+s+C8i+C9luC8i1/gvYLgvZ/gvaDgvIvgvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2C4L2f4L2g4LyL4L2j4L634L2C4LyL4L2U4LyLX+C9guC9n+C9oOC8i+C9leC9tOC9ouC8i+C9luC9tF/gvYLgvZ/gvaDgvIvgvZTgvIvgvabgvYTgvabgvItf4L2C4L2f4L2g4LyL4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C9ieC9sl/gvZ/gvrNf4L2Y4L2y4L2CX+C9o+C+t+C9gl/gvZXgvbTgvaJf4L2m4L2E4L2mX+C9puC+pOC9uuC9kycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgvZHgvbLgvIvgvaLgvbLgvYRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4L2m4L2E4LyL4L2J4L2y4L2TXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvaLgvpfgvbrgvabgvIvgvZhdLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+C9geC8i+C9puC9hF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4L2W4L2R4L204L2T4LyL4L2V4L6y4L2C4LyL4L2Y4L2Q4L2g4LyL4L2YXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOC9o+C8iycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4L2m4L6U4L2T4LyL4L2jJyxcbiAgICAgICAgICAgIHM6ICfgvaPgvZjgvIvgvabgvYQnLFxuICAgICAgICAgICAgc3M6ICclZCDgvabgvpDgvaLgvIvgvYbgvI0nLFxuICAgICAgICAgICAgbTogJ+C9puC+kOC9ouC8i+C9mOC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBtbTogJyVkIOC9puC+kOC9ouC8i+C9mCcsXG4gICAgICAgICAgICBoOiAn4L2G4L204LyL4L2a4L284L2R4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4L2G4L204LyL4L2a4L284L2RJyxcbiAgICAgICAgICAgIGQ6ICfgvYngvbLgvZPgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgZGQ6ICclZCDgvYngvbLgvZPgvIsnLFxuICAgICAgICAgICAgTTogJ+C9n+C+s+C8i+C9luC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBNTTogJyVkIOC9n+C+s+C8i+C9licsXG4gICAgICAgICAgICB5OiAn4L2j4L284LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4L2j4L28JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+C8oeC8ouC8o+C8pOC8peC8puC8p+C8qOC8qeC8oF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C9mOC9muC9k+C8i+C9mOC9vHzgvZ7gvbzgvYLgvabgvIvgvYDgvaZ84L2J4L2y4L2T4LyL4L2C4L204L2EfOC9keC9guC9vOC9hOC8i+C9keC9gnzgvZjgvZrgvZPgvIvgvZjgvbwvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2Y4L2a4L2T4LyL4L2Y4L28JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2J4L2y4L2T4LyL4L2C4L204L2EJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C9keC9guC9vOC9hOC8i+C9keC9gidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9nuC9vOC9guC9puC8i+C9gOC9pic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2J4L2y4L2T4LyL4L2C4L204L2EJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBibztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCcmV0b24gW2JyXVxuLy8hIGF1dGhvciA6IEplYW4tQmFwdGlzdGUgTGUgRHVpZ291IDogaHR0cHM6Ly9naXRodWIuY29tL2pibGVkdWlnb3VcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbW06ICdtdW51dGVubicsXG4gICAgICAgICAgICBNTTogJ21peicsXG4gICAgICAgICAgICBkZDogJ2RldmV6aCcsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBtdXRhdGlvbihmb3JtYXRba2V5XSwgbnVtYmVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BlY2lhbE11dGF0aW9uRm9yWWVhcnMobnVtYmVyKSB7XG4gICAgICAgIHN3aXRjaCAobGFzdE51bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgYmxvYXonO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyB2bG9heic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbGFzdE51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA+IDkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0TnVtYmVyKG51bWJlciAlIDEwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtdXRhdGlvbih0ZXh0LCBudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIHNvZnRNdXRhdGlvbih0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29mdE11dGF0aW9uKHRleHQpIHtcbiAgICAgICAgdmFyIG11dGF0aW9uVGFibGUgPSB7XG4gICAgICAgICAgICBtOiAndicsXG4gICAgICAgICAgICBiOiAndicsXG4gICAgICAgICAgICBkOiAneicsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChtdXRhdGlvblRhYmxlW3RleHQuY2hhckF0KDApXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gKyB0ZXh0LnN1YnN0cmluZygxKTtcbiAgICB9XG5cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmdlbi9pLFxuICAgICAgICAgICAgL15jW8q8XFwnXWh3ZS9pLFxuICAgICAgICAgICAgL15tZXUvaSxcbiAgICAgICAgICAgIC9eZWJyL2ksXG4gICAgICAgICAgICAvXm1hZS9pLFxuICAgICAgICAgICAgL14obWV6fGV2ZSkvaSxcbiAgICAgICAgICAgIC9eZ291L2ksXG4gICAgICAgICAgICAvXmVvcy9pLFxuICAgICAgICAgICAgL15nd2UvaSxcbiAgICAgICAgICAgIC9eaGVyL2ksXG4gICAgICAgICAgICAvXmR1L2ksXG4gICAgICAgICAgICAvXmtlci9pLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNSZWdleCA9IC9eKGdlbnZlcnxjW8q8XFwnXWh3ZXZyZXJ8bWV1cnpofGVicmVsfG1hZXxtZXpoZXZlbnxnb3VlcmV8ZW9zdHxnd2VuZ29sb3xoZXJlfGR1fGtlcnp1fGdlbnxjW8q8XFwnXWh3ZXxtZXV8ZWJyfG1hZXxldmV8Z291fGVvc3xnd2V8aGVyfGR1fGtlcikvaSxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXggPSAvXihnZW52ZXJ8Y1vKvFxcJ11od2V2cmVyfG1ldXJ6aHxlYnJlbHxtYWV8bWV6aGV2ZW58Z291ZXJlfGVvc3R8Z3dlbmdvbG98aGVyZXxkdXxrZXJ6dSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleCA9IC9eKGdlbnxjW8q8XFwnXWh3ZXxtZXV8ZWJyfG1hZXxldmV8Z291fGVvc3xnd2V8aGVyfGR1fGtlcikvaSxcbiAgICAgICAgZnVsbFdlZWtkYXlzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXnN1bC9pLFxuICAgICAgICAgICAgL15sdW4vaSxcbiAgICAgICAgICAgIC9ebWV1cnpoL2ksXG4gICAgICAgICAgICAvXm1lcmNbyrxcXCddaGVyL2ksXG4gICAgICAgICAgICAvXnlhb3UvaSxcbiAgICAgICAgICAgIC9eZ3dlbmVyL2ksXG4gICAgICAgICAgICAvXnNhZG9ybi9pLFxuICAgICAgICBdLFxuICAgICAgICBzaG9ydFdlZWtkYXlzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXlN1bC9pLFxuICAgICAgICAgICAgL15MdW4vaSxcbiAgICAgICAgICAgIC9eTWV1L2ksXG4gICAgICAgICAgICAvXk1lci9pLFxuICAgICAgICAgICAgL15ZYW8vaSxcbiAgICAgICAgICAgIC9eR3dlL2ksXG4gICAgICAgICAgICAvXlNhZC9pLFxuICAgICAgICBdLFxuICAgICAgICBtaW5XZWVrZGF5c1BhcnNlID0gW1xuICAgICAgICAgICAgL15TdS9pLFxuICAgICAgICAgICAgL15MdS9pLFxuICAgICAgICAgICAgL15NZShbXnJdfCQpL2ksXG4gICAgICAgICAgICAvXk1lci9pLFxuICAgICAgICAgICAgL15ZYS9pLFxuICAgICAgICAgICAgL15Hdy9pLFxuICAgICAgICAgICAgL15TYS9pLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGJyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnInLCB7XG4gICAgICAgIG1vbnRoczogJ0dlbnZlcl9Dyrxod2V2cmVyX01ldXJ6aF9FYnJlbF9NYWVfTWV6aGV2ZW5fR291ZXJlX0Vvc3RfR3dlbmdvbG9fSGVyZV9EdV9LZXJ6dScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdHZW5fQ8q8aHdlX01ldV9FYnJfTWFlX0V2ZV9Hb3VfRW9zX0d3ZV9IZXJfRHVfS2VyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bF9MdW5fTWV1cnpoX01lcmPKvGhlcl9ZYW91X0d3ZW5lcl9TYWRvcm4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdWxfTHVuX01ldV9NZXJfWWFvX0d3ZV9TYWQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTHVfTWVfTWVyX1lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlOiBtaW5XZWVrZGF5c1BhcnNlLFxuICAgICAgICBmdWxsV2Vla2RheXNQYXJzZTogZnVsbFdlZWtkYXlzUGFyc2UsXG4gICAgICAgIHNob3J0V2Vla2RheXNQYXJzZTogc2hvcnRXZWVrZGF5c1BhcnNlLFxuICAgICAgICBtaW5XZWVrZGF5c1BhcnNlOiBtaW5XZWVrZGF5c1BhcnNlLFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiBtb250aHNTdHJpY3RSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogbW9udGhzU2hvcnRTdHJpY3RSZWdleCxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2Egdml6XSBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbYSB2aXpdIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hpeml2IGRhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1dhcmPKvGhvYXpoIGRhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2RhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0RlY8q8aCBkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtwYXNldCBkYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdhLWJlbm4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMq8em8nLFxuICAgICAgICAgICAgczogJ3VuIG5lYmV1ZCBzZWdvbmRlbm5vw7knLFxuICAgICAgICAgICAgc3M6ICclZCBlaWxlbm4nLFxuICAgICAgICAgICAgbTogJ3VyIHZ1bnV0ZW5uJyxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBoOiAndW4gZXVyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgZXVyJyxcbiAgICAgICAgICAgIGQ6ICd1biBkZXZlemgnLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIE06ICd1ciBtaXonLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIHk6ICd1ciBibG9heicsXG4gICAgICAgICAgICB5eTogc3BlY2lhbE11dGF0aW9uRm9yWWVhcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShhw7F8dmV0KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnYcOxJyA6ICd2ZXQnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvYS5tLnxnLm0uLywgLy8gZ291ZGUgbWVyZW5uIHwgYS1yYW9rIG1lcmVublxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbiA9PT0gJ2cubS4nO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICdhLm0uJyA6ICdnLm0uJztcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBicjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCb3NuaWFuIFtic11cbi8vISBhdXRob3IgOiBOZWRpbSBDaG9saWNoIDogaHR0cHM6Ly9naXRodWIuY29tL2Zyb250eWFyZFxuLy8hIGJhc2VkIG9uIChocikgdHJhbnNsYXRpb24gYnkgQm9qYW4gTWFya292acSHXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYnMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdicycsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJpamUgJXMnLFxuICAgICAgICAgICAgczogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICdkYW4nLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06ICdtamVzZWMnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBicztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDYXRhbGFuIFtjYV1cbi8vISBhdXRob3IgOiBKdWFuIEcuIEh1cnRhZG8gOiBodHRwczovL2dpdGh1Yi5jb20vanVhbmdodXJ0YWRvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgY2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjYScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAnZ2VuZXJfZmVicmVyX21hcsOnX2FicmlsX21haWdfanVueV9qdWxpb2xfYWdvc3Rfc2V0ZW1icmVfb2N0dWJyZV9ub3ZlbWJyZV9kZXNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiBcImRlIGdlbmVyX2RlIGZlYnJlcl9kZSBtYXLDp19kJ2FicmlsX2RlIG1haWdfZGUganVueV9kZSBqdWxpb2xfZCdhZ29zdF9kZSBzZXRlbWJyZV9kJ29jdHVicmVfZGUgbm92ZW1icmVfZGUgZGVzZW1icmVcIi5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXHMpK01NTU0vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlnX2p1bnlfanVsLl9hZy5fc2V0Ll9vY3QuX25vdi5fZGVzLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkaXVtZW5nZV9kaWxsdW5zX2RpbWFydHNfZGltZWNyZXNfZGlqb3VzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RnLl9kbC5fZHQuX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkZ19kbF9kdF9kY19kal9kdl9kcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gW2RlXSBZWVlZIFthIGxlc10gSDptbScsXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZLCBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQgRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXZ1aSBhICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZGVtw6AgYSAnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1thaGlyIGEgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzc2F0IGEgJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnbGVzJyA6ICdsYScpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogXCJkJ2FxdcOtICVzXCIsXG4gICAgICAgICAgICBwYXN0OiAnZmEgJXMnLFxuICAgICAgICAgICAgczogJ3VucyBzZWdvbnMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWdvbnMnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRzJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmVzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkaWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaWVzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNvcycsXG4gICAgICAgICAgICB5OiAndW4gYW55JyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW55cycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShyfG58dHzDqHxhKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgbnVtYmVyID09PSAxXG4gICAgICAgICAgICAgICAgICAgID8gJ3InXG4gICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSAyXG4gICAgICAgICAgICAgICAgICAgID8gJ24nXG4gICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSAzXG4gICAgICAgICAgICAgICAgICAgID8gJ3InXG4gICAgICAgICAgICAgICAgICAgIDogbnVtYmVyID09PSA0XG4gICAgICAgICAgICAgICAgICAgID8gJ3QnXG4gICAgICAgICAgICAgICAgICAgIDogJ8OoJztcbiAgICAgICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDemVjaCBbY3NdXG4vLyEgYXV0aG9yIDogcGV0cmJlbGEgOiBodHRwczovL2dpdGh1Yi5jb20vcGV0cmJlbGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSAnbGVkZW5fw7pub3JfYsWZZXplbl9kdWJlbl9rdsSbdGVuX8SNZXJ2ZW5fxI1lcnZlbmVjX3NycGVuX3rDocWZw61fxZnDrWplbl9saXN0b3BhZF9wcm9zaW5lYycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnbGVkX8O6bm9fYsWZZV9kdWJfa3bEm1/EjXZuX8SNdmNfc3JwX3rDocWZX8WZw61qX2xpc19wcm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15sZWQvaSxcbiAgICAgICAgICAgIC9ew7puby9pLFxuICAgICAgICAgICAgL15ixZllL2ksXG4gICAgICAgICAgICAvXmR1Yi9pLFxuICAgICAgICAgICAgL15rdsSbL2ksXG4gICAgICAgICAgICAvXijEjXZufMSNZXJ2ZW4kfMSNZXJ2bmEpL2ksXG4gICAgICAgICAgICAvXijEjXZjfMSNZXJ2ZW5lY3zEjWVydmVuY2UpL2ksXG4gICAgICAgICAgICAvXnNycC9pLFxuICAgICAgICAgICAgL156w6HFmS9pLFxuICAgICAgICAgICAgL17FmcOtai9pLFxuICAgICAgICAgICAgL15saXMvaSxcbiAgICAgICAgICAgIC9ecHJvL2ksXG4gICAgICAgIF0sXG4gICAgICAgIC8vIE5PVEU6ICfEjWVydmVuJyBpcyBzdWJzdHJpbmcgb2YgJ8SNZXJ2ZW5lYyc7IHRoZXJlZm9yZSAnxI1lcnZlbmVjJyBtdXN0IHByZWNlZGUgJ8SNZXJ2ZW4nIGluIHRoZSByZWdleCB0byBiZSBmdWxseSBtYXRjaGVkLlxuICAgICAgICAvLyBPdGhlcndpc2UgcGFyc2VyIG1hdGNoZXMgJzEuIMSNZXJ2ZW5lYycgYXMgJzEuIMSNZXJ2ZW4nICsgJ2VjJy5cbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihsZWRlbnzDum5vcnxixZllemVufGR1YmVufGt2xJt0ZW58xI1lcnZlbmVjfMSNZXJ2ZW5jZXzEjWVydmVufMSNZXJ2bmF8c3JwZW58esOhxZnDrXzFmcOtamVufGxpc3RvcGFkfHByb3NpbmVjfGxlZHzDum5vfGLFmWV8ZHVifGt2xJt8xI12bnzEjXZjfHNycHx6w6HFmXzFmcOtanxsaXN8cHJvKS9pO1xuXG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPiAxICYmIG4gPCA1ICYmIH5+KG4gLyAxMCkgIT09IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAncMOhciBzZWt1bmQnIDogJ3DDoXIgc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzogLy8gOSBzZWNvbmRzIC8gaW4gOSBzZWNvbmRzIC8gOSBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2VrdW5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWt1bmRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ20nOiAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6IGlzRnV0dXJlID8gJ21pbnV0dScgOiAnbWludXRvdSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6IC8vIDkgbWludXRlcyAvIGluIDkgbWludXRlcyAvIDkgbWludXRlcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pbnV0eScgOiAnbWludXQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbnV0YW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdoJzogLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiBpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOiAvLyA5IGhvdXJzIC8gaW4gOSBob3VycyAvIDkgaG91cnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdob2RpbnknIDogJ2hvZGluJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZCc6IC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkZW4nIDogJ2RuZW0nO1xuICAgICAgICAgICAgY2FzZSAnZGQnOiAvLyA5IGRheXMgLyBpbiA5IGRheXMgLyA5IGRheXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdkbnknIDogJ2Ruw60nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RueSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnTSc6IC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtxJtzw61jJyA6ICdtxJtzw61jZW0nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOiAvLyA5IG1vbnRocyAvIGluIDkgbW9udGhzIC8gOSBtb250aHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtxJtzw61jZScgOiAnbcSbc8OtY8WvJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtxJtzw61jaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAneSc6IC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdyb2snIDogJ3Jva2VtJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzogLy8gOSB5ZWFycyAvIGluIDkgeWVhcnMgLyA5IHllYXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAnbGV0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdsZXR5JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY3MgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjcycsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgLy8gTk9URTogJ8SNZXJ2ZW4nIGlzIHN1YnN0cmluZyBvZiAnxI1lcnZlbmVjJzsgdGhlcmVmb3JlICfEjWVydmVuZWMnIG11c3QgcHJlY2VkZSAnxI1lcnZlbicgaW4gdGhlIHJlZ2V4IHRvIGJlIGZ1bGx5IG1hdGNoZWQuXG4gICAgICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14obGVkZW58bGVkbmF8w7pub3JhfMO6bm9yfGLFmWV6ZW58YsWZZXpuYXxkdWJlbnxkdWJuYXxrdsSbdGVufGt2xJt0bmF8xI1lcnZlbmVjfMSNZXJ2ZW5jZXzEjWVydmVufMSNZXJ2bmF8c3JwZW58c3JwbmF8esOhxZnDrXzFmcOtamVufMWZw61qbmF8bGlzdG9wYWR1fGxpc3RvcGFkfHByb3NpbmVjfHByb3NpbmNlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihsZWR8w7pub3xixZllfGR1YnxrdsSbfMSNdm58xI12Y3xzcnB8esOhxZl8xZnDrWp8bGlzfHBybykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWTEm2xlX3BvbmTEm2zDrV/DunRlcsO9X3N0xZllZGFfxI10dnJ0ZWtfcMOhdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgbDogJ0QuIE0uIFlZWVknLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIHZdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbesOtdHJhIHZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgxI10dnJ0ZWsgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHDDoXRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgdl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMOpXSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3DFmWVkICVzJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaHV2YXNoIFtjdl1cbi8vISBhdXRob3IgOiBBbmF0b2x5IE1pcm9ub3YgOiBodHRwczovL2dpdGh1Yi5jb20vbWlyb250b2xpXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgY3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjdicsIHtcbiAgICAgICAgbW9udGhzOiAn0LrTkdGA0LvQsNGHX9C90LDRgNOR0YFf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GA0YLQvNC1X9GD0YLTkV/Sq9GD0YDQu9CwX9Cw0LLTkdC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGI0YLQsNCyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9C605HRgF/QvdCw0YBf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GAX9GD0YLTkV/Sq9GD0YBf0LDQstC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9Cy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L0nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQstGL0YBf0YLRg9C9X9GL0YLQu1/RjtC9X9C605fSq1/RjdGA0L1f0YjTkdC8Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cy0YBf0YLQvV/Ri9GCX9GO0L1f0LrSq1/RjdGAX9GI0LwnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10nLFxuICAgICAgICAgICAgTExMOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQn9Cw0Y/QvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cr0YDQsNC9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb05bQvdC10YBdIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0qrQuNGC0LXRgV0gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9CY0YDRgtC905ddIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBhZmZpeCA9IC/RgdC10YXQtdGCJC9pLmV4ZWMob3V0cHV0KVxuICAgICAgICAgICAgICAgICAgICA/ICfRgNC10L0nXG4gICAgICAgICAgICAgICAgICAgIDogL9Kr0YPQuyQvaS5leGVjKG91dHB1dClcbiAgICAgICAgICAgICAgICAgICAgPyAn0YLQsNC9J1xuICAgICAgICAgICAgICAgICAgICA6ICfRgNCw0L0nO1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyBhZmZpeDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0OiAnJXMg0LrQsNGP0LvQu9CwJyxcbiAgICAgICAgICAgIHM6ICfQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBzczogJyVkINKr0LXQutC60YPQvdGCJyxcbiAgICAgICAgICAgIG06ICfQv9OX0YAg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBtbTogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaDogJ9C/05fRgCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQtdGF0LXRgicsXG4gICAgICAgICAgICBkOiAn0L/Tl9GAINC60YPQvScsXG4gICAgICAgICAgICBkZDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNOiAn0L/Tl9GAINGD0LnTkdGFJyxcbiAgICAgICAgICAgIE1NOiAnJWQg0YPQudOR0YUnLFxuICAgICAgICAgICAgeTogJ9C/05fRgCDSq9GD0LsnLFxuICAgICAgICAgICAgeXk6ICclZCDSq9GD0LsnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0t0LzTl9GILyxcbiAgICAgICAgb3JkaW5hbDogJyVkLdC805fRiCcsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBjdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBXZWxzaCBbY3ldXG4vLyEgYXV0aG9yIDogUm9iZXJ0IEFsbGVuIDogaHR0cHM6Ly9naXRodWIuY29tL3JvYmdhbGxlblxuLy8hIGF1dGhvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yeWFuZ3JlYXZlc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGN5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3knLCB7XG4gICAgICAgIG1vbnRoczogJ0lvbmF3cl9DaHdlZnJvcl9NYXdydGhfRWJyaWxsX01haV9NZWhlZmluX0dvcmZmZW5uYWZfQXdzdF9NZWRpX0h5ZHJlZl9UYWNod2VkZF9SaGFnZnlyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0lvbl9DaHdlX01hd19FYnJfTWFpX01laF9Hb3JfQXdzX01lZF9IeWRfVGFjaF9SaGFnJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ0R5ZGQgU3VsX0R5ZGQgTGx1bl9EeWRkIE1hd3J0aF9EeWRkIE1lcmNoZXJfRHlkZCBJYXVfRHlkZCBHd2VuZXJfRHlkZCBTYWR3cm4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdWxfTGx1bl9NYXdfTWVyX0lhdV9Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X0xsX01hX01lX0lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIC8vIHRpbWUgZm9ybWF0cyBhcmUgdGhlIHNhbWUgYXMgZW4tZ2JcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIZWRkaXcgYW1dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbWWZvcnkgYW1dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYW1dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRGRvZSBhbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtkaXdldGhhZiBhbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdtZXduICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB5biDDtGwnLFxuICAgICAgICAgICAgczogJ3ljaHlkaWcgZWlsaWFkYXUnLFxuICAgICAgICAgICAgc3M6ICclZCBlaWxpYWQnLFxuICAgICAgICAgICAgbTogJ211bnVkJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbXVudWQnLFxuICAgICAgICAgICAgaDogJ2F3cicsXG4gICAgICAgICAgICBoaDogJyVkIGF3cicsXG4gICAgICAgICAgICBkOiAnZGl3cm5vZCcsXG4gICAgICAgICAgICBkZDogJyVkIGRpd3Jub2QnLFxuICAgICAgICAgICAgTTogJ21pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1pcycsXG4gICAgICAgICAgICB5OiAnYmx3eWRkeW4nLFxuICAgICAgICAgICAgeXk6ICclZCBmbHluZWRkJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGZlZHxhaW58YWZ8aWx8eWRkfGVkfGVnKS8sXG4gICAgICAgIC8vIHRyYWRpdGlvbmFsIG9yZGluYWwgbnVtYmVycyBhYm92ZSAzMSBhcmUgbm90IGNvbW1vbmx5IHVzZWQgaW4gY29sbG9xdWlhbCBXZWxzaFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlcixcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICAgICAnYWYnLFxuICAgICAgICAgICAgICAgICAgICAnaWwnLFxuICAgICAgICAgICAgICAgICAgICAneWRkJyxcbiAgICAgICAgICAgICAgICAgICAgJ3lkZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZCcsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsIC8vIDFhZiB0byAxMGZlZFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2VnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZCcsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdlZycsXG4gICAgICAgICAgICAgICAgICAgICdmZWQnLFxuICAgICAgICAgICAgICAgICAgICAnZWcnLFxuICAgICAgICAgICAgICAgICAgICAnZmVkJywgLy8gMTFlZyB0byAyMGZlZFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoYiA+IDIwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGIgPT09IDQwIHx8IGIgPT09IDUwIHx8IGIgPT09IDYwIHx8IGIgPT09IDgwIHx8IGIgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnZmVkJzsgLy8gbm90IDMwYWluLCA3MGFpbiBvciA5MGFpblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhaW4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYiA+IDApIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBsb29rdXBbYl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRGFuaXNoIFtkYV1cbi8vISBhdXRob3IgOiBVbHJpayBOaWVsc2VuIDogaHR0cHM6Ly9naXRodWIuY29tL21yYmFzZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGEnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgW2QuXSBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ3DDpSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbaV0gZGRkZFtzIGtsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgc2lkZW4nLFxuICAgICAgICAgICAgczogJ2bDpSBzZWt1bmRlcicsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG06ICdldCBtaW51dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgICAgIGg6ICdlbiB0aW1lJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGltZXInLFxuICAgICAgICAgICAgZDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2UnLFxuICAgICAgICAgICAgTTogJ2VuIG3DpW5lZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5lZGVyJyxcbiAgICAgICAgICAgIHk6ICdldCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlcm1hbiAoQXVzdHJpYSkgW2RlLWF0XVxuLy8hIGF1dGhvciA6IGxsdWNocyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sbHVjaHNcbi8vISBhdXRob3I6IE1lbmVsaW9uIEVsZW5zw7psZTogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiBNYXJ0aW4gR3JvbGxlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9NYWRNR1xuLy8hIGF1dGhvciA6IE1pa29sYWogRGFkZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL21pazAxYWpcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBtOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgaDogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgIGQ6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgIGRkOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgdzogWydlaW5lIFdvY2hlJywgJ2VpbmVyIFdvY2hlJ10sXG4gICAgICAgICAgICBNOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgeTogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1hdCcsIHtcbiAgICAgICAgbW9udGhzOiAnSsOkbm5lcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0rDpG4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAndm9yICVzJyxcbiAgICAgICAgICAgIHM6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzczogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgd3c6ICclZCBXb2NoZW4nLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR2VybWFuIChTd2l0emVybGFuZCkgW2RlLWNoXVxuLy8hIGF1dGhvciA6IHNzY2h1ZWxsZXIgOiBodHRwczovL2dpdGh1Yi5jb20vc3NjaHVlbGxlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG06IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICBoOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgZDogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICB3OiBbJ2VpbmUgV29jaGUnLCAnZWluZXIgV29jaGUnXSxcbiAgICAgICAgICAgIE06IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICB5OiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ10sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGVDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWNoJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICd2b3IgJXMnLFxuICAgICAgICAgICAgczogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiAnJWQgTWludXRlbicsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHc6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3dzogJyVkIFdvY2hlbicsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVDaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHZXJtYW4gW2RlXVxuLy8hIGF1dGhvciA6IGxsdWNocyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9sbHVjaHNcbi8vISBhdXRob3I6IE1lbmVsaW9uIEVsZW5zw7psZTogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiBNaWtvbGFqIERhZGVsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWswMWFqXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgbTogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgIGg6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICBkOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgIHc6IFsnZWluZSBXb2NoZScsICdlaW5lciBXb2NoZSddLFxuICAgICAgICAgICAgTTogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgIHk6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAndm9yICVzJyxcbiAgICAgICAgICAgIHM6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzczogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB3OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgd3c6ICclZCBXb2NoZW4nLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGRpdmlhbiBbZHZdXG4vLyEgYXV0aG9yIDogSmF3aXNoIEhhbWVlZCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXdpc2hcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAn3pberN6C3qreh96m3oPeqScsXG4gICAgICAgICAgICAn3orerN6E3rDeg96q3ofept6D3qknLFxuICAgICAgICAgICAgJ96J3qfeg96o3pfeqicsXG4gICAgICAgICAgICAn3oferd6V3rDeg96p3o3eqicsXG4gICAgICAgICAgICAn3onerScsXG4gICAgICAgICAgICAn3pbeq96C3rAnLFxuICAgICAgICAgICAgJ96W3qrejd6m3ofeqCcsXG4gICAgICAgICAgICAn3ofer96O3qbekN6w3pPeqicsXG4gICAgICAgICAgICAn3pDerN6V3rDek96s3onesN6E3qbeg96qJyxcbiAgICAgICAgICAgICfeh96u3obesN6T3q/ehN6m3oPeqicsXG4gICAgICAgICAgICAn3oLert6I3qzeid6w3oTept6D3qonLFxuICAgICAgICAgICAgJ96R3qjekN6s3onesN6E3qbeg96qJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXMgPSBbXG4gICAgICAgICAgICAn3ofep96L3qjeh96w3ozepicsXG4gICAgICAgICAgICAn3oDer96J3qYnLFxuICAgICAgICAgICAgJ96H3qbegt6w3o7ep96D3qYnLFxuICAgICAgICAgICAgJ96E3qrei96mJyxcbiAgICAgICAgICAgICfehN6q3oPep96Q3rDeit6m3ozeqCcsXG4gICAgICAgICAgICAn3oDeqt6G3qreg96qJyxcbiAgICAgICAgICAgICfegN6u3oLeqN6A3qjeg96qJyxcbiAgICAgICAgXTtcblxuICAgIHZhciBkdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2R2Jywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46ICfeh96n3oveqF/egN6v3onepl/eh96m3oLesF/ehN6q3ovepl/ehN6q3oPep1/egN6q3obeql/egN6u3oLeqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv3onehnzeid6KLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ96J3oonID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ96J3oYnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ96J3oonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1veid6o3ofept6L3qpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb3onep96L3qbeid6nXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1veh96o3ofesN6U3qxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW96K3qfeh96o3ozeqt6I3qhdIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfejN6s3oPerd6O3qbeh96oICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfeht6q3oPeqN6C3rAgJXMnLFxuICAgICAgICAgICAgczogJ96Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAnLFxuICAgICAgICAgICAgc3M6ICdkJSDekN6o3obeqt6C3rDejN6qJyxcbiAgICAgICAgICAgIG06ICfeid6o3oLeqN6T3qzeh96wJyxcbiAgICAgICAgICAgIG1tOiAn3oneqN6C3qjek96qICVkJyxcbiAgICAgICAgICAgIGg6ICfejt6m3pHeqN6H3qjeg96s3ofesCcsXG4gICAgICAgICAgICBoaDogJ96O3qbekd6o3ofeqN6D3qogJWQnLFxuICAgICAgICAgICAgZDogJ96L3qreiN6m3oDerN6H3rAnLFxuICAgICAgICAgICAgZGQ6ICfei96q3ojept6Q3rAgJWQnLFxuICAgICAgICAgICAgTTogJ96J3qbegN6s3ofesCcsXG4gICAgICAgICAgICBNTTogJ96J3qbekN6wICVkJyxcbiAgICAgICAgICAgIHk6ICfeh96m3oDept6D3qzeh96wJyxcbiAgICAgICAgICAgIHl5OiAn3ofept6A3qbeg96qICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDcsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiAxMiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHcmVlayBbZWxdXG4vLyEgYXV0aG9yIDogQWdnZWxvcyBLYXJhbGlhcyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tZWhpZWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGVsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZWwnLCB7XG4gICAgICAgIG1vbnRoc05vbWluYXRpdmVFbDogJ86ZzrHOvc6/z4XOrM+BzrnOv8+CX86mzrXOss+Bzr/Phc6sz4HOuc6/z4JfzpzOrM+Bz4TOuc6/z4JfzpHPgM+Bzq/Ou865zr/Pgl/OnM6szrnOv8+CX86Zzr/Pjc69zrnOv8+CX86Zzr/Pjc67zrnOv8+CX86Rz43Os86/z4XPg8+Ezr/Pgl/Oo861z4DPhM6tzrzOss+BzrnOv8+CX86fzrrPhM+OzrLPgc65zr/Pgl/Onc6/zq3OvM6yz4HOuc6/z4JfzpTOtc66zq3OvM6yz4HOuc6/z4InLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc0dlbml0aXZlRWw6ICfOmc6xzr3Ov8+FzrHPgc6vzr/PhV/Ops61zrLPgc6/z4XOsc+Bzq/Ov8+FX86czrHPgc+Ezq/Ov8+FX86Rz4DPgc65zrvOr86/z4VfzpzOsc6Qzr/PhV/Omc6/z4XOvc6vzr/PhV/Omc6/z4XOu86vzr/PhV/Okc+FzrPOv8+Nz4PPhM6/z4VfzqPOtc+Az4TOtc68zrLPgc6vzr/PhV/On866z4TPic6yz4HOr86/z4Vfzp3Ov861zrzOss+Bzq/Ov8+FX86UzrXOus61zrzOss+Bzq/Ov8+FJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHM6IGZ1bmN0aW9uIChtb21lbnRUb0Zvcm1hdCwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudFRvRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc05vbWluYXRpdmVFbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgICAgICAvRC8udGVzdChmb3JtYXQuc3Vic3RyaW5nKDAsIGZvcm1hdC5pbmRleE9mKCdNTU1NJykpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBkYXkgbnVtYmVyIGJlZm9yZSAnTU1NTSdcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzR2VuaXRpdmVFbFttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc05vbWluYXRpdmVFbFttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfOmc6xzr1fzqbOtc6yX86czrHPgV/Okc+Az4FfzpzOsc+KX86Zzr/Phc69X86Zzr/Phc67X86Rz4XOs1/Oo861z4Bfzp/Ous+EX86dzr/OtV/OlM61zronLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnzprPhc+BzrnOsc66zq5fzpTOtc+Fz4TOrc+BzrFfzqTPgc6vz4TOt1/OpM61z4TOrM+Bz4TOt1/OoM6tzrzPgM+EzrdfzqDOsc+BzrHPg866zrXPhc6uX86jzqzOss6yzrHPhM6/Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnzprPhc+BX86UzrXPhV/OpM+BzrlfzqTOtc+EX86gzrXOvF/OoM6xz4FfzqPOsc6yJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ86az4VfzpTOtV/OpM+BX86kzrVfzqDOtV/OoM6xX86jzrEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnzrzOvCcgOiAnzpzOnCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8+AzrwnIDogJ86gzpwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKVswXSA9PT0gJ868JztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL1vOoM6cXVxcLj/OnD9cXC4/L2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyRWw6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbzqPOrs68zrXPgc6xIHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW86Rz43Pgc65zr8ge31dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbe31dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbzqfOuM61z4Ige31dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW8+Ezr8gz4DPgc6/zrfOs86/z43OvM61zr3Ov10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW8+EzrfOvSDPgM+Bzr/Ot86zzr/Pjc68zrXOvc63XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjogZnVuY3Rpb24gKGtleSwgbW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJFbFtrZXldLFxuICAgICAgICAgICAgICAgIGhvdXJzID0gbW9tICYmIG1vbS5ob3VycygpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3V0cHV0KSkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5hcHBseShtb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKCd7fScsIGhvdXJzICUgMTIgPT09IDEgPyAnz4PPhM63JyA6ICfPg8+EzrnPgicpO1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ8+DzrUgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIM+Az4HOuc69JyxcbiAgICAgICAgICAgIHM6ICfOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgc3M6ICclZCDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgbTogJ86tzr3OsSDOu861z4DPhM+MJyxcbiAgICAgICAgICAgIG1tOiAnJWQgzrvOtc+Az4TOrCcsXG4gICAgICAgICAgICBoOiAnzrzOr86xIM+Oz4HOsScsXG4gICAgICAgICAgICBoaDogJyVkIM+Oz4HOtc+CJyxcbiAgICAgICAgICAgIGQ6ICfOvM6vzrEgzrzOrc+BzrEnLFxuICAgICAgICAgICAgZGQ6ICclZCDOvM6tz4HOtc+CJyxcbiAgICAgICAgICAgIE06ICfOrc69zrHPgiDOvM6uzr3Osc+CJyxcbiAgICAgICAgICAgIE1NOiAnJWQgzrzOrs69zrXPgicsXG4gICAgICAgICAgICB5OiAnzq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CJyxcbiAgICAgICAgICAgIHl5OiAnJWQgz4fPgc+Mzr3Ouc6xJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9zrcvLFxuICAgICAgICBvcmRpbmFsOiAnJWTOtycsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDRzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChBdXN0cmFsaWEpIFtlbi1hdV1cbi8vISBhdXRob3IgOiBKYXJlZCBNb3JzZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJjb2FsXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5BdSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWF1Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbkF1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKENhbmFkYSkgW2VuLWNhXVxuLy8hIGF1dGhvciA6IEpvbmF0aGFuIEFib3VyYmloIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmJjYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1jYScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuQ2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoVW5pdGVkIEtpbmdkb20pIFtlbi1nYl1cbi8vISBhdXRob3IgOiBDaHJpcyBHZWRyaW0gOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNnZWRyaW1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbkdiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tZ2InLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5HYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChJcmVsYW5kKSBbZW4taWVdXG4vLyEgYXV0aG9yIDogQ2hyaXMgQ2FydGxpZGdlIDogaHR0cHM6Ly9naXRodWIuY29tL2NocmlzY2FydGxpZGdlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5JZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWllJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChJc3JhZWwpIFtlbi1pbF1cbi8vISBhdXRob3IgOiBDaHJpcyBHZWRyaW0gOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNnZWRyaW1cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbklsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWwnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRW5nbGlzaCAoSW5kaWEpIFtlbi1pbl1cbi8vISBhdXRob3IgOiBKYXRpbiBBZ3Jhd2FsIDogaHR0cHM6Ly9naXRodWIuY29tL2phdGluYWcyMlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGVuSW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1pbicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUzogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTTogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5OiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFbmdsaXNoIChOZXcgWmVhbGFuZCkgW2VuLW56XVxuLy8hIGF1dGhvciA6IEx1a2UgTWNHcmVnb3IgOiBodHRwczovL2dpdGh1Yi5jb20vbHVrZW1jZ3JlZ29yXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5OeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLW56Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhZ28nLFxuICAgICAgICAgICAgczogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG06ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGg6ICclZCBob3VycycsXG4gICAgICAgICAgICBkOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE06ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHk6ICdhIHllYXInLFxuICAgICAgICAgICAgeXk6ICclZCB5ZWFycycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBlbk56O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEVuZ2xpc2ggKFNpbmdhcG9yZSkgW2VuLXNnXVxuLy8hIGF1dGhvciA6IE1hdHRoZXcgQ2FzdHJpbGxvbi1NYWRyaWdhbCA6IGh0dHBzOi8vZ2l0aHViLmNvbS90ZWNoZGltZW5zaW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZW5TZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLXNnJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgICAgICBzOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQ6ICdhIGRheScsXG4gICAgICAgICAgICBkZDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTTogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU06ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eTogJyVkIHllYXJzJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdzdCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnbmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuU2c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRXNwZXJhbnRvIFtlb11cbi8vISBhdXRob3IgOiBDb2xpbiBEZWFuIDogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluZGVhblxuLy8hIGF1dGhvciA6IE1pYSBOb3JkZW50b2Z0IEltcGVyYXRvcmkgOiBodHRwczovL2dpdGh1Yi5jb20vbWllc3Rhc21pYVxuLy8hIGNvbW1lbnQgOiBtaWVzdGFzbWlhIGNvcnJlY3RlZCB0aGUgdHJhbnNsYXRpb24gYnkgY29saW5kZWFuXG4vLyEgY29tbWVudCA6IFZpdmFrdm8gY29ycmVjdGVkIHRoZSB0cmFuc2xhdGlvbiBieSBjb2xpbmRlYW4gYW5kIG1pZXN0YXNtaWFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBlbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VvJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJvX2ZlYnJ1YXJvX21hcnRvX2Fwcmlsb19tYWpvX2p1bmlvX2p1bGlvX2HFrWd1c3RvX3NlcHRlbWJyb19va3RvYnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFydF9hcHJfbWFqX2p1bl9qdWxfYcWtZ19zZXB0X29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWFuxIlvX2x1bmRvX21hcmRvX21lcmtyZWRvX8S1YcWtZG9fdmVuZHJlZG9fc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGltX2x1bl9tYXJkX21lcmtfxLVhxa1fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkaV9sdV9tYV9tZV/EtWFfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnW2xhXSBEWy1hbiBkZV0gTU1NTSwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdbbGFdIERbLWFuIGRlXSBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkW25dLCBbbGFdIERbLWFuIGRlXSBNTU1NLCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIFtsYV0gRFstYW4gZGVdIE1NTSwgWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9bYXBdXFwudFxcLm0vaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPT09ICdwJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwLnQubS4nIDogJ1AuVC5NLic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2EudC5tLicgOiAnQS5ULk0uJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9kaWHFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNb3JnYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGRbbiBqZV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIaWVyYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1twYXNpbnRhbl0gZGRkZFtuIGplXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3Bvc3QgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2FudGHFrSAlcycsXG4gICAgICAgICAgICBzOiAna2Vsa2FqIHNla3VuZG9qJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kb2onLFxuICAgICAgICAgICAgbTogJ3VudSBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9qJyxcbiAgICAgICAgICAgIGg6ICd1bnUgaG9ybycsXG4gICAgICAgICAgICBoaDogJyVkIGhvcm9qJyxcbiAgICAgICAgICAgIGQ6ICd1bnUgdGFnbycsIC8vbmUgJ2RpdXJubycsIMSJYXIgZXN0YXMgdXppdGEgcG9yIHByb2tzaW11bW9cbiAgICAgICAgICAgIGRkOiAnJWQgdGFnb2onLFxuICAgICAgICAgICAgTTogJ3VudSBtb25hdG8nLFxuICAgICAgICAgICAgTU06ICclZCBtb25hdG9qJyxcbiAgICAgICAgICAgIHk6ICd1bnUgamFybycsXG4gICAgICAgICAgICB5eTogJyVkIGphcm9qJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9YS8sXG4gICAgICAgIG9yZGluYWw6ICclZGEnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoRG9taW5pY2FuIFJlcHVibGljKSBbZXMtZG9dXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzRG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy1kbycsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHM6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICB3OiAndW5hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYcOxb3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzRG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoTWV4aWNvKSBbZXMtbXhdXG4vLyEgYXV0aG9yIDogSkMgRnJhbmNvIDogaHR0cHM6Ly9naXRodWIuY29tL2pjZnJhbmNvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzTXggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy1teCcsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICddIExUJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGg6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgdzogJ3VuYSBzZW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1hbmFzJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eTogJyVkIGHDsW9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZERhdGU6ICdGZWNoYSBpbnbDoWxpZGEnLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzTXg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCAoVW5pdGVkIFN0YXRlcykgW2VzLXVzXVxuLy8hIGF1dGhvciA6IGJ1c3R0YSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9idXN0dGFcbi8vISBhdXRob3IgOiBjaHJpc3JvZHogOiBodHRwczovL2dpdGh1Yi5jb20vY2hyaXNyb2R6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzVXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy11cycsIHtcbiAgICAgICAgbW9udGhzOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ01NL0REL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHM6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQ6ICclZCBkw61hcycsXG4gICAgICAgICAgICB3OiAndW5hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYcOxb3MnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzVXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3BhbmlzaCBbZXNdXG4vLyEgYXV0aG9yIDogSnVsaW8gTmFwdXLDrSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qdWxpb25jXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9eZW5lL2ksXG4gICAgICAgICAgICAvXmZlYi9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9eYWJyL2ksXG4gICAgICAgICAgICAvXm1heS9pLFxuICAgICAgICAgICAgL15qdW4vaSxcbiAgICAgICAgICAgIC9eanVsL2ksXG4gICAgICAgICAgICAvXmFnby9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2N0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kaWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMnLCB7XG4gICAgICAgIG1vbnRoczogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKHRoaXMuaG91cnMoKSAhPT0gMSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmhvdXJzKCkgIT09IDEgPyAncycgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnXSBMVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgczogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIHc6ICd1bmEgc2VtYW5hJyxcbiAgICAgICAgICAgIHd3OiAnJWQgc2VtYW5hcycsXG4gICAgICAgICAgICBNOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeTogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXk6ICclZCBhw7FvcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWREYXRlOiAnRmVjaGEgaW52w6FsaWRhJyxcbiAgICB9KTtcblxuICAgIHJldHVybiBlcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBFc3RvbmlhbiBbZXRdXG4vLyEgYXV0aG9yIDogSGVucnkgS2VobG1hbm4gOiBodHRwczovL2dpdGh1Yi5jb20vbWFkaGVucnlcbi8vISBpbXByb3ZlbWVudHMgOiBJbGxpbWFyIFRhbWJlayA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYWd1bGthXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWydtw7VuZSBzZWt1bmRpJywgJ23DtW5pIHNla3VuZCcsICdwYWFyIHNla3VuZGl0J10sXG4gICAgICAgICAgICBzczogW251bWJlciArICdzZWt1bmRpJywgbnVtYmVyICsgJ3Nla3VuZGl0J10sXG4gICAgICAgICAgICBtOiBbJ8O8aGUgbWludXRpJywgJ8O8a3MgbWludXQnXSxcbiAgICAgICAgICAgIG1tOiBbbnVtYmVyICsgJyBtaW51dGknLCBudW1iZXIgKyAnIG1pbnV0aXQnXSxcbiAgICAgICAgICAgIGg6IFsnw7xoZSB0dW5uaScsICd0dW5kIGFlZ2EnLCAnw7xrcyB0dW5kJ10sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcgdHVubmknLCBudW1iZXIgKyAnIHR1bmRpJ10sXG4gICAgICAgICAgICBkOiBbJ8O8aGUgcMOkZXZhJywgJ8O8a3MgcMOkZXYnXSxcbiAgICAgICAgICAgIE06IFsna3V1IGFqYScsICdrdXUgYWVnYScsICfDvGtzIGt1dSddLFxuICAgICAgICAgICAgTU06IFtudW1iZXIgKyAnIGt1dScsIG51bWJlciArICcga3V1ZCddLFxuICAgICAgICAgICAgeTogWyfDvGhlIGFhc3RhJywgJ2Fhc3RhJywgJ8O8a3MgYWFzdGEnXSxcbiAgICAgICAgICAgIHl5OiBbbnVtYmVyICsgJyBhYXN0YScsIG51bWJlciArICcgYWFzdGF0J10sXG4gICAgICAgIH07XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0W2tleV1bMl0gPyBmb3JtYXRba2V5XVsyXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXQnLCB7XG4gICAgICAgIG1vbnRoczogJ2phYW51YXJfdmVlYnJ1YXJfbcOkcnRzX2FwcmlsbF9tYWlfanV1bmlfanV1bGlfYXVndXN0X3NlcHRlbWJlcl9va3Rvb2Jlcl9ub3ZlbWJlcl9kZXRzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFhbl92ZWVicl9tw6RydHNfYXByX21haV9qdXVuaV9qdXVsaV9hdWdfc2VwdF9va3Rfbm92X2RldHMnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAncMO8aGFww6Rldl9lc21hc3DDpGV2X3RlaXNpcMOkZXZfa29sbWFww6Rldl9uZWxqYXDDpGV2X3JlZWRlX2xhdXDDpGV2Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbVMOkbmEsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0hvbW1lLF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbSsOkcmdtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbRWlsZSxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0VlbG1pbmVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBww6RyYXN0JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB0YWdhc2knLFxuICAgICAgICAgICAgczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkOiAnJWQgcMOkZXZhJyxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBCYXNxdWUgW2V1XVxuLy8hIGF1dGhvciA6IEVuZWtvIElsbGFycmFtZW5kaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9laWxsYXJyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGV1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXUnLCB7XG4gICAgICAgIG1vbnRoczogJ3VydGFycmlsYV9vdHNhaWxhX21hcnR4b2FfYXBpcmlsYV9tYWlhdHphX2VrYWluYV91enRhaWxhX2FidXp0dWFfaXJhaWxhX3VycmlhX2F6YXJvYV9hYmVuZHVhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ3VydC5fb3RzLl9tYXIuX2FwaS5fbWFpLl9la2EuX3V6dC5fYWJ1Ll9pcmEuX3Vyci5fYXphLl9hYmUuJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2lnYW5kZWFfYXN0ZWxlaGVuYV9hc3RlYXJ0ZWFfYXN0ZWF6a2VuYV9vc3RlZ3VuYV9vc3RpcmFsYV9sYXJ1bmJhdGEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdpZy5fYWwuX2FyLl9hei5fb2cuX29sLl9sci4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnaWdfYWxfYXJfYXpfb2dfb2xfbHInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVktTS1EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWVtrb10gTU1NIERbYV0nLFxuICAgICAgICAgICAgbGxsOiAnWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tnYXVyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2JpaGFyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFRbZXRhbl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1thdHpvXSBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1thdXJyZWtvXSBkZGRkIExUW2V0YW5dJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgYmFycnUnLFxuICAgICAgICAgICAgcGFzdDogJ2R1ZWxhICVzJyxcbiAgICAgICAgICAgIHM6ICdzZWd1bmRvIGJhdHp1aycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbTogJ21pbnV0dSBiYXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHUnLFxuICAgICAgICAgICAgaDogJ29yZHUgYmF0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JkdScsXG4gICAgICAgICAgICBkOiAnZWd1biBiYXQnLFxuICAgICAgICAgICAgZGQ6ICclZCBlZ3VuJyxcbiAgICAgICAgICAgIE06ICdoaWxhYmV0ZSBiYXQnLFxuICAgICAgICAgICAgTU06ICclZCBoaWxhYmV0ZScsXG4gICAgICAgICAgICB5OiAndXJ0ZSBiYXQnLFxuICAgICAgICAgICAgeXk6ICclZCB1cnRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBldTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQZXJzaWFuIFtmYV1cbi8vISBhdXRob3IgOiBFYnJhaGltIEJ5YWdvd2kgOiBodHRwczovL2dpdGh1Yi5jb20vZWJyYW1pbmlvXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9uxJyxcbiAgICAgICAgICAgIDI6ICfbsicsXG4gICAgICAgICAgICAzOiAn27MnLFxuICAgICAgICAgICAgNDogJ9u0JyxcbiAgICAgICAgICAgIDU6ICfbtScsXG4gICAgICAgICAgICA2OiAn27YnLFxuICAgICAgICAgICAgNzogJ9u3JyxcbiAgICAgICAgICAgIDg6ICfbuCcsXG4gICAgICAgICAgICA5OiAn27knLFxuICAgICAgICAgICAgMDogJ9uwJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9uxJzogJzEnLFxuICAgICAgICAgICAgJ9uyJzogJzInLFxuICAgICAgICAgICAgJ9uzJzogJzMnLFxuICAgICAgICAgICAgJ9u0JzogJzQnLFxuICAgICAgICAgICAgJ9u1JzogJzUnLFxuICAgICAgICAgICAgJ9u2JzogJzYnLFxuICAgICAgICAgICAgJ9u3JzogJzcnLFxuICAgICAgICAgICAgJ9u4JzogJzgnLFxuICAgICAgICAgICAgJ9u5JzogJzknLFxuICAgICAgICAgICAgJ9uwJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGZhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmEnLCB7XG4gICAgICAgIG1vbnRoczogJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn2pjYp9mG2YjbjNmHX9mB2YjYsduM2Ydf2YXYp9ix2LNf2KLZiNix24zZhF/ZhdmHX9qY2YjYptmGX9qY2YjYptuM2Ydf2KfZiNiqX9iz2b7Yqtin2YXYqNixX9in2qnYqtio2LFf2YbZiNin2YXYqNixX9iv2LPYp9mF2KjYsScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfbjF/Yr1/Ys1/ahl/Zvl/YrF/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Zgtio2YQg2KfYsiDYuNmH2LF82KjYudivINin2LIg2LjZh9ixLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL9io2LnYryDYp9iyINi42YfYsS8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZgtio2YQg2KfYsiDYuNmH2LEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9io2LnYryDYp9iyINi42YfYsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YXYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2YHYsdiv2Kcg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2K/bjNix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvZvtuM2LRdIFvYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfYr9ixICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDZvtuM2LQnLFxuICAgICAgICAgICAgczogJ9qG2YbYryDYq9in2YbbjNmHJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2KvYp9mG24zZhycsXG4gICAgICAgICAgICBtOiAn24zaqSDYr9mC24zZgtmHJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/ZgtuM2YLZhycsXG4gICAgICAgICAgICBoOiAn24zaqSDYs9in2LnYqicsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYudiqJyxcbiAgICAgICAgICAgIGQ6ICfbjNqpINix2YjYsicsXG4gICAgICAgICAgICBkZDogJyVkINix2YjYsicsXG4gICAgICAgICAgICBNOiAn24zaqSDZhdin2YcnLFxuICAgICAgICAgICAgTU06ICclZCDZhdin2YcnLFxuICAgICAgICAgICAgeTogJ9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9mEJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9uwLdu5XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfdmFLyxcbiAgICAgICAgb3JkaW5hbDogJyVk2YUnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZpbm5pc2ggW2ZpXVxuLy8hIGF1dGhvciA6IFRhcm1vIEFpZGFudGF1c3RhIDogaHR0cHM6Ly9naXRodWIuY29tL2JsZWFkb2ZcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBudW1iZXJzUGFzdCA9ICdub2xsYSB5a3NpIGtha3NpIGtvbG1lIG5lbGrDpCB2aWlzaSBrdXVzaSBzZWl0c2Vtw6RuIGthaGRla3NhbiB5aGRla3PDpG4nLnNwbGl0KFxuICAgICAgICAgICAgJyAnXG4gICAgICAgICksXG4gICAgICAgIG51bWJlcnNGdXR1cmUgPSBbXG4gICAgICAgICAgICAnbm9sbGEnLFxuICAgICAgICAgICAgJ3loZGVuJyxcbiAgICAgICAgICAgICdrYWhkZW4nLFxuICAgICAgICAgICAgJ2tvbG1lbicsXG4gICAgICAgICAgICAnbmVsasOkbicsXG4gICAgICAgICAgICAndmlpZGVuJyxcbiAgICAgICAgICAgICdrdXVkZW4nLFxuICAgICAgICAgICAgbnVtYmVyc1Bhc3RbN10sXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs4XSxcbiAgICAgICAgICAgIG51bWJlcnNQYXN0WzldLFxuICAgICAgICBdO1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ211dXRhbWFuIHNla3VubmluJyA6ICdtdXV0YW1hIHNla3VudGknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3Nla3VubmluJyA6ICdzZWt1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbWludXV0aW4nIDogJ21pbnV1dHRpJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6QnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkw6QnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1c2knO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3R0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpICsgJyAnICsgcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyIDwgMTBcbiAgICAgICAgICAgID8gaXNGdXR1cmVcbiAgICAgICAgICAgICAgICA/IG51bWJlcnNGdXR1cmVbbnVtYmVyXVxuICAgICAgICAgICAgICAgIDogbnVtYmVyc1Bhc3RbbnVtYmVyXVxuICAgICAgICAgICAgOiBudW1iZXI7XG4gICAgfVxuXG4gICAgdmFyIGZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmknLCB7XG4gICAgICAgIG1vbnRoczogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAndGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc8OkX2hlaW7DpF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICdzdW5udW50YWlfbWFhbmFudGFpX3RpaXN0YWlfa2Vza2l2aWlra29fdG9yc3RhaV9wZXJqYW50YWlfbGF1YW50YWknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0RvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBsOiAnRC5NLllZWVknLFxuICAgICAgICAgICAgbGw6ICdEbyBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGw6ICdEbyBNTU0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdMOkbsOkw6RuXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2h1b21lbm5hXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tlaWxlbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbdmlpbWVdIGRkZGRbbmFdIFtrbG9dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgcMOkw6RzdMOkJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzaXR0ZW4nLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZpbGlwaW5vIFtmaWxdXG4vLyEgYXV0aG9yIDogRGFuIEhhZ21hbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oYWdtYW5kYW5cbi8vISBhdXRob3IgOiBNYXR0aGV3IENvIDogaHR0cHM6Ly9naXRodWIuY29tL21hdHRoZXdkZWVjb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGZpbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZpbCcsIHtcbiAgICAgICAgbW9udGhzOiAnRW5lcm9fUGVicmVyb19NYXJzb19BYnJpbF9NYXlvX0h1bnlvX0h1bHlvX0Fnb3N0b19TZXR5ZW1icmVfT2t0dWJyZV9Ob2J5ZW1icmVfRGlzeWVtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0VuZV9QZWJfTWFyX0Ficl9NYXlfSHVuX0h1bF9BZ29fU2V0X09rdF9Ob2JfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0xpbmdnb19MdW5lc19NYXJ0ZXNfTWl5ZXJrdWxlc19IdXdlYmVzX0JpeWVybmVzX1NhYmFkbycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0xpbl9MdW5fTWFyX01peV9IdXdfQml5X1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdMaV9MdV9NYV9NaV9IdV9CaV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdNTS9EL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBNTU1NIERELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdMVCBbbmdheW9uZyBhcmF3XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0J1a2FzIG5nXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xUIFtzYSBzdXN1bm9kIG5hXSBkZGRkJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdMVCBba2FoYXBvbl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMVCBbbm9vbmcgbmFrYXJhYW5nXSBkZGRkJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnc2EgbG9vYiBuZyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYW5nIG5ha2FsaXBhcycsXG4gICAgICAgICAgICBzOiAnaWxhbmcgc2VndW5kbycsXG4gICAgICAgICAgICBzczogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbTogJ2lzYW5nIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0bycsXG4gICAgICAgICAgICBoOiAnaXNhbmcgb3JhcycsXG4gICAgICAgICAgICBoaDogJyVkIG9yYXMnLFxuICAgICAgICAgICAgZDogJ2lzYW5nIGFyYXcnLFxuICAgICAgICAgICAgZGQ6ICclZCBhcmF3JyxcbiAgICAgICAgICAgIE06ICdpc2FuZyBidXdhbicsXG4gICAgICAgICAgICBNTTogJyVkIGJ1d2FuJyxcbiAgICAgICAgICAgIHk6ICdpc2FuZyB0YW9uJyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGFvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmaWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRmFyb2VzZSBbZm9dXG4vLyEgYXV0aG9yIDogUmFnbmFyIEpvaGFubmVzZW4gOiBodHRwczovL2dpdGh1Yi5jb20vcmFnbmFyMTIzXG4vLyEgYXV0aG9yIDogS3Jpc3RpYW4gU2FrYXJpc3NvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zYWthcmlzc29uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmbycsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHLDrWxfbWFpX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVzZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnc3VubnVkYWd1cl9tw6FuYWRhZ3VyX3TDvXNkYWd1cl9taWt1ZGFndXJfaMOzc2RhZ3VyX2Zyw61nZ2phZGFndXJfbGV5Z2FyZGFndXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdW5fbcOhbl90w71zX21pa19ow7NzX2Zyw61fbGV5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3N1X23DoV90w71fbWlfaMOzX2ZyX2xlJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vDjSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW8ONIG1vcmdpbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW8ONIGdqw6FyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbc8Otw7BzdHVdIGRkZGQgW2tsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3VtICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzw63DsGFuaScsXG4gICAgICAgICAgICBzOiAnZsOhIHNla3VuZCcsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGlyJyxcbiAgICAgICAgICAgIG06ICdlaW4gbWludXR0dXInLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHRpcicsXG4gICAgICAgICAgICBoOiAnZWluIHTDrW1pJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdMOtbWFyJyxcbiAgICAgICAgICAgIGQ6ICdlaW4gZGFndXInLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNOiAnZWluIG3DoW5hw7B1cicsXG4gICAgICAgICAgICBNTTogJyVkIG3DoW5hw7BpcicsXG4gICAgICAgICAgICB5OiAnZWl0dCDDoXInLFxuICAgICAgICAgICAgeXk6ICclZCDDoXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyZW5jaCAoQ2FuYWRhKSBbZnItY2FdXG4vLyEgYXV0aG9yIDogSm9uYXRoYW4gQWJvdXJiaWggOiBodHRwczovL2dpdGh1Yi5jb20vam9uYmNhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgZnJDYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyLWNhJywge1xuICAgICAgICBtb250aHM6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkOiAndW4gam91cicsXG4gICAgICAgICAgICBkZDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE06ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6ICclZCBhbnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8ZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyQ2E7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRnJlbmNoIChTd2l0emVybGFuZCkgW2ZyLWNoXVxuLy8hIGF1dGhvciA6IEdhc3BhcmQgQnVjaGVyIDogaHR0cHM6Ly9naXRodWIuY29tL2dhc3BhcmRcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBmckNoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2gnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHM6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzczogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG06ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQ6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTTogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbicsXG4gICAgICAgICAgICB5eTogJyVkIGFucycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBmckNoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyZW5jaCBbZnJdXG4vLyEgYXV0aG9yIDogSm9obiBGaXNjaGVyIDogaHR0cHM6Ly9naXRodWIuY29tL2pmcm9mZmljZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRoc1N0cmljdFJlZ2V4ID0gL14oamFudmllcnxmw6l2cmllcnxtYXJzfGF2cmlsfG1haXxqdWlufGp1aWxsZXR8YW/Du3R8c2VwdGVtYnJlfG9jdG9icmV8bm92ZW1icmV8ZMOpY2VtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gLyhqYW52XFwuP3xmw6l2clxcLj98bWFyc3xhdnJcXC4/fG1haXxqdWlufGp1aWxcXC4/fGFvw7t0fHNlcHRcXC4/fG9jdFxcLj98bm92XFwuP3xkw6ljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvKGphbnZcXC4/fGbDqXZyXFwuP3xtYXJzfGF2clxcLj98bWFpfGp1aW58anVpbFxcLj98YW/Du3R8c2VwdFxcLj98b2N0XFwuP3xub3ZcXC4/fGTDqWNcXC4/fGphbnZpZXJ8ZsOpdnJpZXJ8bWFyc3xhdnJpbHxtYWl8anVpbnxqdWlsbGV0fGFvw7t0fHNlcHRlbWJyZXxvY3RvYnJlfG5vdmVtYnJlfGTDqWNlbWJyZSkvaSxcbiAgICAgICAgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXmphbnYvaSxcbiAgICAgICAgICAgIC9eZsOpdnIvaSxcbiAgICAgICAgICAgIC9ebWFycy9pLFxuICAgICAgICAgICAgL15hdnIvaSxcbiAgICAgICAgICAgIC9ebWFpL2ksXG4gICAgICAgICAgICAvXmp1aW4vaSxcbiAgICAgICAgICAgIC9eanVpbC9pLFxuICAgICAgICAgICAgL15hb8O7dC9pLFxuICAgICAgICAgICAgL15zZXB0L2ksXG4gICAgICAgICAgICAvXm9jdC9pLFxuICAgICAgICAgICAgL15ub3YvaSxcbiAgICAgICAgICAgIC9eZMOpYy9pLFxuICAgICAgICBdO1xuXG4gICAgdmFyIGZyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnInLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IG1vbnRoc1N0cmljdFJlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiBtb250aHNTaG9ydFN0cmljdFJlZ2V4LFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5czogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgczogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbTogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGg6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGg6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQ6ICclZCBqb3VycycsXG4gICAgICAgICAgICB3OiAndW5lIHNlbWFpbmUnLFxuICAgICAgICAgICAgd3c6ICclZCBzZW1haW5lcycsXG4gICAgICAgICAgICBNOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuICdlJyB3aGVuIGRheSBvZiBtb250aCA+IDEuIE1vdmUgdGhpcyBjYXNlIGluc2lkZVxuICAgICAgICAgICAgICAgIC8vIGJsb2NrIGZvciBtYXNjdWxpbmUgd29yZHMgYmVsb3cuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8zMzc1XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEZyaXNpYW4gW2Z5XVxuLy8hIGF1dGhvciA6IFJvYmluIHZhbiBkZXIgVmxpZXQgOiBodHRwczovL2dpdGh1Yi5jb20vcm9iaW4wdmFuMGRlcjB2XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9ICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21haV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApO1xuXG4gICAgdmFyIGZ5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnknLCB7XG4gICAgICAgIG1vbnRoczogJ2phbm5ld2FyaXNfZmVicmV3YXJpc19tYWFydF9hcHJpbF9tYWFpZV9qdW55X2p1bHlfYXVndXN0dXNfc2VwdGltYmVyX29rdG9iZXJfbm92aW1iZXJfZGVzaW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ3NuZWluX21vYW5kZWlfdGlpc2RlaV93b2Fuc2RlaV90b25nZXJzZGVpX2ZyZWVkX3NuZW9uJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NpX01vX1RpX1dvX1RvX0ZyX1NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toam9lZCBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb2FybiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW8O0ZnLDu25lXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvZXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGx5bicsXG4gICAgICAgICAgICBzOiAnaW4gcGVhciBzZWtvbmRlbicsXG4gICAgICAgICAgICBzczogJyVkIHNla29uZGVuJyxcbiAgICAgICAgICAgIG06ICdpZW4gbWluw7p0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoOiAnaWVuIG9lcmUnLFxuICAgICAgICAgICAgaGg6ICclZCBvZXJlbicsXG4gICAgICAgICAgICBkOiAnaWVuIGRlaScsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2VuJyxcbiAgICAgICAgICAgIE06ICdpZW4gbW9hbm5lJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbW9hbm5lbicsXG4gICAgICAgICAgICB5OiAnaWVuIGppZXInLFxuICAgICAgICAgICAgeXk6ICclZCBqaWVycmVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIG51bWJlciArXG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwID8gJ3N0ZScgOiAnZGUnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IElyaXNoIG9yIElyaXNoIEdhZWxpYyBbZ2FdXG4vLyEgYXV0aG9yIDogQW5kcsOpIFNpbHZhIDogaHR0cHM6Ly9naXRodWIuY29tL2Fza3B0XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAgICAgJ0VhbsOhaXInLFxuICAgICAgICAgICAgJ0ZlYWJocmEnLFxuICAgICAgICAgICAgJ03DoXJ0YScsXG4gICAgICAgICAgICAnQWlicmXDoW4nLFxuICAgICAgICAgICAgJ0JlYWx0YWluZScsXG4gICAgICAgICAgICAnTWVpdGhlYW1oJyxcbiAgICAgICAgICAgICdJw7ppbCcsXG4gICAgICAgICAgICAnTMO6bmFzYScsXG4gICAgICAgICAgICAnTWXDoW4gRsOzbWhhaXInLFxuICAgICAgICAgICAgJ0RlaXJlYWRoIEbDs21oYWlyJyxcbiAgICAgICAgICAgICdTYW1oYWluJyxcbiAgICAgICAgICAgICdOb2xsYWlnJyxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSBbXG4gICAgICAgICAgICAnRWFuJyxcbiAgICAgICAgICAgICdGZWFiaCcsXG4gICAgICAgICAgICAnTcOhcnQnLFxuICAgICAgICAgICAgJ0FpYicsXG4gICAgICAgICAgICAnQmVhbCcsXG4gICAgICAgICAgICAnTWVpdGgnLFxuICAgICAgICAgICAgJ0nDumlsJyxcbiAgICAgICAgICAgICdMw7puJyxcbiAgICAgICAgICAgICdNLkYuJyxcbiAgICAgICAgICAgICdELkYuJyxcbiAgICAgICAgICAgICdTYW1oJyxcbiAgICAgICAgICAgICdOb2xsJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXMgPSBbXG4gICAgICAgICAgICAnRMOpIERvbWhuYWlnaCcsXG4gICAgICAgICAgICAnRMOpIEx1YWluJyxcbiAgICAgICAgICAgICdEw6kgTcOhaXJ0JyxcbiAgICAgICAgICAgICdEw6kgQ8OpYWRhb2luJyxcbiAgICAgICAgICAgICdEw6lhcmRhb2luJyxcbiAgICAgICAgICAgICdEw6kgaEFvaW5lJyxcbiAgICAgICAgICAgICdEw6kgU2F0aGFpcm4nLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0ID0gWydEb21oJywgJ0x1YW4nLCAnTcOhaXJ0JywgJ0PDqWFkJywgJ0TDqWFyJywgJ0FvaW5lJywgJ1NhdGgnXSxcbiAgICAgICAgd2Vla2RheXNNaW4gPSBbJ0RvJywgJ0x1JywgJ03DoScsICdDw6knLCAnRMOpJywgJ0EnLCAnU2EnXTtcblxuICAgIHZhciBnYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dhJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRoc1Nob3J0LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IHdlZWtkYXlzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzTWluOiB3ZWVrZGF5c01pbixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJbm5pdSBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbcOhcmFjaCBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJbm7DqSBhZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW8gY2FpdGVdIFthZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDsyBzaGluJyxcbiAgICAgICAgICAgIHM6ICdjw7pwbGEgc29pY2luZCcsXG4gICAgICAgICAgICBzczogJyVkIHNvaWNpbmQnLFxuICAgICAgICAgICAgbTogJ27Ds2ltw6lhZCcsXG4gICAgICAgICAgICBtbTogJyVkIG7Ds2ltw6lhZCcsXG4gICAgICAgICAgICBoOiAndWFpciBhbiBjaGxvaWcnLFxuICAgICAgICAgICAgaGg6ICclZCB1YWlyIGFuIGNobG9pZycsXG4gICAgICAgICAgICBkOiAnbMOhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgbMOhJyxcbiAgICAgICAgICAgIE06ICdtw60nLFxuICAgICAgICAgICAgTU06ICclZCBtw61vbm5hJyxcbiAgICAgICAgICAgIHk6ICdibGlhaW4nLFxuICAgICAgICAgICAgeXk6ICclZCBibGlhaW4nLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZHxuYXxtaCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyID09PSAxID8gJ2QnIDogbnVtYmVyICUgMTAgPT09IDIgPyAnbmEnIDogJ21oJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTY290dGlzaCBHYWVsaWMgW2dkXVxuLy8hIGF1dGhvciA6IEpvbiBBc2hkb3duIDogaHR0cHM6Ly9naXRodWIuY29tL2pvbmFzaGRvd25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAnQW0gRmFvaWxsZWFjaCcsXG4gICAgICAgICAgICAnQW4gR2VhcnJhbicsXG4gICAgICAgICAgICAnQW0gTcOgcnQnLFxuICAgICAgICAgICAgJ0FuIEdpYmxlYW4nLFxuICAgICAgICAgICAgJ0FuIEPDqGl0ZWFuJyxcbiAgICAgICAgICAgICdBbiB0LcOSZ21oaW9zJyxcbiAgICAgICAgICAgICdBbiB0LUl1Y2hhcicsXG4gICAgICAgICAgICAnQW4gTMO5bmFzdGFsJyxcbiAgICAgICAgICAgICdBbiB0LVN1bHRhaW4nLFxuICAgICAgICAgICAgJ0FuIETDoG1oYWlyJyxcbiAgICAgICAgICAgICdBbiB0LVNhbWhhaW4nLFxuICAgICAgICAgICAgJ0FuIETDuWJobGFjaGQnLFxuICAgICAgICBdLFxuICAgICAgICBtb250aHNTaG9ydCA9IFtcbiAgICAgICAgICAgICdGYW9pJyxcbiAgICAgICAgICAgICdHZWFyJyxcbiAgICAgICAgICAgICdNw6BydCcsXG4gICAgICAgICAgICAnR2libCcsXG4gICAgICAgICAgICAnQ8OoaXQnLFxuICAgICAgICAgICAgJ8OSZ21oJyxcbiAgICAgICAgICAgICdJdWNoJyxcbiAgICAgICAgICAgICdMw7luJyxcbiAgICAgICAgICAgICdTdWx0JyxcbiAgICAgICAgICAgICdEw6BtaCcsXG4gICAgICAgICAgICAnU2FtaCcsXG4gICAgICAgICAgICAnRMO5YmgnLFxuICAgICAgICBdLFxuICAgICAgICB3ZWVrZGF5cyA9IFtcbiAgICAgICAgICAgICdEaWTDsm1obmFpY2gnLFxuICAgICAgICAgICAgJ0RpbHVhaW4nLFxuICAgICAgICAgICAgJ0RpbcOgaXJ0JyxcbiAgICAgICAgICAgICdEaWNpYWRhaW4nLFxuICAgICAgICAgICAgJ0RpYXJkYW9pbicsXG4gICAgICAgICAgICAnRGloYW9pbmUnLFxuICAgICAgICAgICAgJ0Rpc2F0aGFpcm5lJyxcbiAgICAgICAgXSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA9IFsnRGlkJywgJ0RpbCcsICdEaW0nLCAnRGljJywgJ0RpYScsICdEaWgnLCAnRGlzJ10sXG4gICAgICAgIHdlZWtkYXlzTWluID0gWydEw7InLCAnTHUnLCAnTcOgJywgJ0NpJywgJ0FyJywgJ0hhJywgJ1NhJ107XG5cbiAgICB2YXIgZ2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnZCcsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbjogd2Vla2RheXNNaW4sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0EtbcOgaXJlYWNoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthaWddIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW8gY2hhaWRoXSBbYWlnXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2FubiBhbiAlcycsXG4gICAgICAgICAgICBwYXN0OiAnYmhvIGNoaW9ubiAlcycsXG4gICAgICAgICAgICBzOiAnYmVhZ2FuIGRpb2dhbicsXG4gICAgICAgICAgICBzczogJyVkIGRpb2dhbicsXG4gICAgICAgICAgICBtOiAnbWlvbmFpZCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pb25haWRlYW4nLFxuICAgICAgICAgICAgaDogJ3VhaXInLFxuICAgICAgICAgICAgaGg6ICclZCB1YWlyZWFuJyxcbiAgICAgICAgICAgIGQ6ICdsYXRoYScsXG4gICAgICAgICAgICBkZDogJyVkIGxhdGhhJyxcbiAgICAgICAgICAgIE06ICdtw6xvcycsXG4gICAgICAgICAgICBNTTogJyVkIG3DrG9zYW4nLFxuICAgICAgICAgICAgeTogJ2JsaWFkaG5hJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYmxpYWRobmEnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZHxuYXxtaCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyID09PSAxID8gJ2QnIDogbnVtYmVyICUgMTAgPT09IDIgPyAnbmEnIDogJ21oJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBHYWxpY2lhbiBbZ2xdXG4vLyEgYXV0aG9yIDogSnVhbiBHLiBIdXJ0YWRvIDogaHR0cHM6Ly9naXRodWIuY29tL2p1YW5naHVydGFkb1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGdsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2wnLCB7XG4gICAgICAgIG1vbnRoczogJ3hhbmVpcm9fZmVicmVpcm9fbWFyem9fYWJyaWxfbWFpb194dcOxb194dWxsb19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZWNlbWJybycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICd4YW4uX2ZlYi5fbWFyLl9hYnIuX21haS5feHXDsS5feHVsLl9hZ28uX3NldC5fb3V0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19sdW5zX21hcnRlc19tw6lyY29yZXNfeG92ZXNfdmVucmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb20uX2x1bi5fbWFyLl9tw6lyLl94b3YuX3Zlbi5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnZG9fbHVfbWFfbcOpX3hvX3ZlX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3hlICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnw6EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDscOhICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnw6EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6FzJyA6ICdhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29udGUgJyArICh0aGlzLmhvdXJzKCkgIT09IDEgPyAnw6EnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICdbb10gZGRkZCBbcGFzYWRvICcgKyAodGhpcy5ob3VycygpICE9PSAxID8gJ8OhcycgOiAnYScpICsgJ10gTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgICAgIGlmIChzdHIuaW5kZXhPZigndW4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ24nICsgc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuICcgKyBzdHI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdDogJ2hhaSAlcycsXG4gICAgICAgICAgICBzOiAndW5zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VuaGEgaG9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQ6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgTTogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTTogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHk6ICd1biBhbm8nLFxuICAgICAgICAgICAgeXk6ICclZCBhbm9zJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBnbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLb25rYW5pIERldmFuYWdhcmkgc2NyaXB0IFtnb20tZGV2YV1cbi8vISBhdXRob3IgOiBUaGUgRGlzY292ZXJlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9XaWtpRGlzY292ZXJlclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHM6IFsn4KSl4KWL4KSh4KSv4KS+IOCkuOClheCkleCkguCkoeCkvuCkguCkqOClgCcsICfgpKXgpYvgpKHgpYcg4KS44KWF4KSV4KSC4KShJ10sXG4gICAgICAgICAgICBzczogW251bWJlciArICcg4KS44KWF4KSV4KSC4KSh4KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpLjgpYXgpJXgpILgpKEnXSxcbiAgICAgICAgICAgIG06IFsn4KSP4KSV4KS+IOCkruCkv+Cko+Ckn+CkvuCkqCcsICfgpI/gpJUg4KSu4KS/4KSo4KWC4KSfJ10sXG4gICAgICAgICAgICBtbTogW251bWJlciArICcg4KSu4KS/4KSj4KSf4KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpK7gpL/gpKPgpJ/gpL7gpIInXSxcbiAgICAgICAgICAgIGg6IFsn4KSP4KSV4KS+IOCkteCksOCkvuCkqCcsICfgpI/gpJUg4KS14KSwJ10sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcg4KS14KSw4KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpLXgpLDgpL7gpIInXSxcbiAgICAgICAgICAgIGQ6IFsn4KSP4KSV4KS+IOCkpuCkv+CkuOCkvuCkqCcsICfgpI/gpJUg4KSm4KWA4KS4J10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcg4KSm4KS/4KS44KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpKbgpYDgpLgnXSxcbiAgICAgICAgICAgIE06IFsn4KSP4KSV4KS+IOCkruCljeCkueCkr+CkqOCljeCkr+CkvuCkqCcsICfgpI/gpJUg4KSu4KWN4KS54KSv4KSo4KWLJ10sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcg4KSu4KWN4KS54KSv4KSo4KWN4KSv4KS+4KSo4KWAJywgbnVtYmVyICsgJyDgpK7gpY3gpLngpK/gpKjgpYcnXSxcbiAgICAgICAgICAgIHk6IFsn4KSP4KSV4KS+IOCkteCksOCljeCkuOCkvuCkqCcsICfgpI/gpJUg4KS14KSw4KWN4KS4J10sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcg4KS14KSw4KWN4KS44KS+4KSC4KSo4KWAJywgbnVtYmVyICsgJyDgpLXgpLDgpY3gpLjgpL7gpIInXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZ29tRGV2YSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dvbS1kZXZhJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpYDgpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpK9f4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWA4KSa4KWN4KSv4KS+X+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgOCkmuCljeCkr+Ckvl/gpK7gpL7gpLDgpY3gpJrgpL7gpJrgpY3gpK/gpL5f4KSP4KSq4KWN4KSw4KWA4KSy4KS+4KSa4KWN4KSv4KS+X+CkruClh+Ckr+CkvuCkmuCljeCkr+Ckvl/gpJzgpYLgpKjgpL7gpJrgpY3gpK/gpL5f4KSc4KWB4KSy4KSv4KS+4KSa4KWN4KSv4KS+X+CkkeCkl+CkuOCljeCkn+CkvuCkmuCljeCkr+Ckvl/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLDgpL7gpJrgpY3gpK/gpL5f4KSR4KSV4KWN4KSf4KWL4KSs4KSw4KS+4KSa4KWN4KSv4KS+X+CkqOCli+CkteCljeCkueClh+CkguCkrOCksOCkvuCkmuCljeCkr+Ckvl/gpKHgpL/gpLjgpYfgpILgpKzgpLDgpL7gpJrgpY3gpK/gpL4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvTU1NTShcXHMpK0Rbb0RdPy8sXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4KSc4KS+4KSo4KWHLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpYAuX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpJHgpJcuX+CkuOCkquCljeCkn+Clh+Ckgi5f4KSR4KSV4KWN4KSf4KWLLl/gpKjgpYvgpLXgpY3gpLngpYfgpIIuX+CkoeCkv+CkuOClh+Ckgi4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4KSG4KSv4KSk4KS+4KSwX+CkuOCli+CkruCkvuCksF/gpK7gpILgpJfgpLPgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+CkrOCkv+CksOClh+CkuOCljeCkpOCkvuCksF/gpLjgpYHgpJXgpY3gpLDgpL7gpLBf4KS24KWH4KSo4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSG4KSv4KSkLl/gpLjgpYvgpK4uX+CkruCkguCkl+Cksy5f4KSs4KWB4KSnLl/gpKzgpY3gpLDgpYfgpLjgpY3gpKQuX+CkuOClgeCkleCljeCksC5f4KS24KWH4KSoLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgpIZf4KS44KWLX+CkruCkgl/gpKzgpYFf4KSs4KWN4KSw4KWHX+CkuOClgV/gpLbgpYcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgICAgICBMOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEEgaDptbSBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgTU1NTSBEbywgWVlZWSwgQSBoOm1tIFvgpLXgpL7gpJzgpKTgpL7gpIJdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBb4KS14KS+4KSc4KSk4KS+4KSCXScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CkhuCkr+CknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgpKvgpL7gpLLgpY3gpK/gpL7gpIJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW+Ckq+ClgeCkoeCksuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CkleCkvuCksl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSr4KS+4KSf4KSy4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIOCkhuCkpuClgOCkgicsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgpLXgpYfgpLApLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBvcmRpbmFsICfgpLXgpYfgpLAnIG9ubHkgYXBwbGllcyB0byBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4KS14KWH4KSwJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWtcbiAgICAgICAgICAgIGRveTogMywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyICg3ICsgMCAtIDQpXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpYB84KS44KSV4KS+4KSz4KWA4KSCfOCkpuCkqOCkquCkvuCksOCkvuCkgnzgpLjgpL7gpILgpJzgpYcvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpJXgpL7gpLPgpYDgpIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KSo4KSq4KS+4KSw4KS+4KSCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID4gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkguCknOClhycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkleCkvuCks+ClgOCkgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KSo4KSq4KS+4KSw4KS+4KSCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpILgpJzgpYcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOClgCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ29tRGV2YTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLb25rYW5pIExhdGluIHNjcmlwdCBbZ29tLWxhdG5dXG4vLyEgYXV0aG9yIDogVGhlIERpc2NvdmVyZXIgOiBodHRwczovL2dpdGh1Yi5jb20vV2lraURpc2NvdmVyZXJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICBzOiBbJ3Rob2RkZWEgc2Vrb25kYW1uaScsICd0aG9kZGUgc2Vrb25kJ10sXG4gICAgICAgICAgICBzczogW251bWJlciArICcgc2Vrb25kYW1uaScsIG51bWJlciArICcgc2Vrb25kJ10sXG4gICAgICAgICAgICBtOiBbJ2VrYSBtaW50YW4nLCAnZWsgbWludXQnXSxcbiAgICAgICAgICAgIG1tOiBbbnVtYmVyICsgJyBtaW50YW1uaScsIG51bWJlciArICcgbWludGFtJ10sXG4gICAgICAgICAgICBoOiBbJ2VrYSB2b3JhbicsICdlayB2b3InXSxcbiAgICAgICAgICAgIGhoOiBbbnVtYmVyICsgJyB2b3JhbW5pJywgbnVtYmVyICsgJyB2b3JhbSddLFxuICAgICAgICAgICAgZDogWydla2EgZGlzYW4nLCAnZWsgZGlzJ10sXG4gICAgICAgICAgICBkZDogW251bWJlciArICcgZGlzYW1uaScsIG51bWJlciArICcgZGlzJ10sXG4gICAgICAgICAgICBNOiBbJ2VrYSBtaG9pbmVhbicsICdlayBtaG9pbm8nXSxcbiAgICAgICAgICAgIE1NOiBbbnVtYmVyICsgJyBtaG9pbmVhbW5pJywgbnVtYmVyICsgJyBtaG9pbmUnXSxcbiAgICAgICAgICAgIHk6IFsnZWthIHZvcnNhbicsICdlayB2b3JvcyddLFxuICAgICAgICAgICAgeXk6IFtudW1iZXIgKyAnIHZvcnNhbW5pJywgbnVtYmVyICsgJyB2b3JzYW0nXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZ29tTGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dvbS1sYXRuJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6ICdKYW5lcmFjaGVhX0ZlYnJlcmFjaGVhX01hcnNhY2hlYV9BYnJpbGFjaGVhX01haWFjaGVhX0p1bmFjaGVhX0p1bGFpYWNoZWFfQWdvc3RhY2hlYV9TZXRlbWJyYWNoZWFfT3R1YnJhY2hlYV9Ob3ZlbWJyYWNoZWFfRGV6ZW1icmFjaGVhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL01NTU0oXFxzKStEW29EXT8vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbi5fRmViLl9NYXJzX0Fici5fTWFpX0p1bl9KdWwuX0Fnby5fU2V0Ll9PdHUuX05vdi5fRGV6Licuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IFwiQWl0YXJfU29tYXJfTW9uZ2xsYXJfQnVkaHZhcl9CaXJlc3Rhcl9TdWtyYXJfU29uJ3ZhclwiLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBaXQuX1NvbS5fTW9uLl9CdWQuX0JyZS5fU3VrLl9Tb24uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0FpX1NtX01vX0J1X0JyX1N1X1NuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyBbdmF6dGFdJyxcbiAgICAgICAgICAgIEw6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRG8sIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQWl6XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ZhbGVhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbRnVkZGxvXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2FsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tGYXR0bG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgYWRpbScsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcikvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ2VyJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ2VyJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWtcbiAgICAgICAgICAgIGRveTogMywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyICg3ICsgMCAtIDQpXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9yYXRpfHNva2FsbGltfGRvbnBhcmFtfHNhbmplLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncmF0aScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3Nva2FsbGltJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2RvbnBhcmFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID4gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NhbmplJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Nva2FsbGltJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb25wYXJhbSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2FuamUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvbUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogR3VqYXJhdGkgW2d1XVxuLy8hIGF1dGhvciA6IEthdXNoaWsgVGhhbmtpIDogaHR0cHM6Ly9naXRodWIuY29tL0thdXNoaWsxOTg3XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+CrpycsXG4gICAgICAgICAgICAyOiAn4KuoJyxcbiAgICAgICAgICAgIDM6ICfgq6knLFxuICAgICAgICAgICAgNDogJ+CrqicsXG4gICAgICAgICAgICA1OiAn4KurJyxcbiAgICAgICAgICAgIDY6ICfgq6wnLFxuICAgICAgICAgICAgNzogJ+CrrScsXG4gICAgICAgICAgICA4OiAn4KuuJyxcbiAgICAgICAgICAgIDk6ICfgq68nLFxuICAgICAgICAgICAgMDogJ+CrpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgq6cnOiAnMScsXG4gICAgICAgICAgICAn4KuoJzogJzInLFxuICAgICAgICAgICAgJ+CrqSc6ICczJyxcbiAgICAgICAgICAgICfgq6onOiAnNCcsXG4gICAgICAgICAgICAn4KurJzogJzUnLFxuICAgICAgICAgICAgJ+CrrCc6ICc2JyxcbiAgICAgICAgICAgICfgq60nOiAnNycsXG4gICAgICAgICAgICAn4KuuJzogJzgnLFxuICAgICAgICAgICAgJ+Crryc6ICc5JyxcbiAgICAgICAgICAgICfgq6YnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgZ3UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdndScsIHtcbiAgICAgICAgbW9udGhzOiAn4Kqc4Kq+4Kqo4KuN4Kqv4KuB4KqG4Kqw4KuAX+Cqq+Crh+CqrOCrjeCqsOCrgeCqhuCqsOCrgF/gqq7gqr7gqrDgq43gqppf4KqP4Kqq4KuN4Kqw4Kq/4KqyX+CqruCrh1/gqpzgq4Lgqqhf4Kqc4KuB4Kqy4Kq+4KqIX+CqkeCql+CquOCrjeCqn1/gqrjgqqrgq43gqp/gq4fgqq7gq43gqqzgqrBf4KqR4KqV4KuN4Kqf4KuN4Kqs4KqwX+CqqOCqteCrh+CqruCrjeCqrOCqsF/gqqHgqr/gqrjgq4fgqq7gq43gqqzgqrAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4Kqc4Kq+4Kqo4KuN4Kqv4KuBLl/gqqvgq4fgqqzgq43gqrDgq4EuX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr8uX+CqruCrh1/gqpzgq4Lgqqhf4Kqc4KuB4Kqy4Kq+Ll/gqpHgqpcuX+CquOCqquCrjeCqn+Crhy5f4KqR4KqV4KuN4Kqf4KuNLl/gqqjgqrXgq4cuX+CqoeCqv+CquOCrhy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4Kqw4Kq14Kq/4Kq14Kq+4KqwX+CquOCri+CqruCqteCqvuCqsF/gqq7gqoLgqpfgqrPgqrXgqr7gqrBf4Kqs4KuB4Kqn4KuN4Kq14Kq+4KqwX+Cql+CrgeCqsOCrgeCqteCqvuCqsF/gqrbgq4HgqpXgq43gqrDgqrXgqr7gqrBf4Kq24Kqo4Kq/4Kq14Kq+4KqwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Kqw4Kq14Kq/X+CquOCri+Cqrl/gqq7gqoLgqpfgqrNf4Kqs4KuB4Kqn4KuNX+Cql+CrgeCqsOCrgV/gqrbgq4HgqpXgq43gqrBf4Kq24Kqo4Kq/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CqsF/gqrjgq4tf4Kqu4KqCX+CqrOCrgV/gqpfgq4Ff4Kq24KuBX+Cqticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KqG4KqcXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+Cql+Cqh+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4Kqq4Kq+4Kqb4Kqy4Kq+XSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCqruCqvicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4Kqq4Kq54KuH4Kqy4Kq+JyxcbiAgICAgICAgICAgIHM6ICfgqoXgqq7gq4HgqpUg4Kqq4Kqz4KuLJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Kq44KuH4KqV4KqC4KqhJyxcbiAgICAgICAgICAgIG06ICfgqo/gqpUg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIGg6ICfgqo/gqpUg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGQ6ICfgqo/gqpUg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIE06ICfgqo/gqpUg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIHk6ICfgqo/gqpUg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Crp+CrqOCrqeCrquCrq+CrrOCrreCrruCrr+Crpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gR3VqYXJhdGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gR3VqYXJhdGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gqrDgqr7gqqR84Kqs4Kqq4KuL4KqwfOCquOCqteCqvuCqsHzgqrjgqr7gqoLgqpwvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgqrDgqr7gqqQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqrjgqrXgqr7gqrAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kqs4Kqq4KuL4KqwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqrjgqr7gqoLgqpwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqw4Kq+4KqkJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrjgqrXgqr7gqrAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqrOCqquCri+CqsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kq44Kq+4KqC4KqcJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrDgqr7gqqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSGVicmV3IFtoZV1cbi8vISBhdXRob3IgOiBUb21lciBDb2hlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90b21lclxuLy8hIGF1dGhvciA6IE1vc2hlIFNpbWFudG92IDogaHR0cHM6Ly9naXRodWIuY29tL0RldmVsb3BtZW50SUxcbi8vISBhdXRob3IgOiBUYWwgQXRlciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9UYWxBdGVyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgaGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoZScsIHtcbiAgICAgICAgbW9udGhzOiAn15nXoNeV15DXqF/XpNeR16jXldeQ16hf157XqNelX9eQ16TXqNeZ15xf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXkteV16HXmF/Xodek15jXnteR16hf15DXlden15jXldeR16hf16DXldeR157XkdeoX9eT16bXnteR16gnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn15nXoNeV17Nf16TXkdeo17Nf157XqNelX9eQ16TXqNezX9ee15DXmV/XmdeV16DXmV/XmdeV15zXmV/XkNeV15LXs1/Xodek15jXs1/XkNeV16fXs1/XoNeV15HXs1/Xk9em157Xsycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfXqNeQ16nXldefX9ep16DXmV/Xqdec15nXqdeZX9eo15HXmdei15lf15fXnteZ16nXmV/XqdeZ16nXmV/XqdeR16onLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfXkNezX9eR17Nf15LXs1/Xk9ezX9eU17Nf15XXs1/XqdezJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9eQX9eRX9eSX9eTX9eUX9eVX9epJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgW9eRXU1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIFvXkV1NTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgW9eRXU1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9eU15nXldedINeR1r5dTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vXnteX16gg15HWvl1MVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9eR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9eQ16rXnteV15wg15HWvl1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vXkdeZ15XXnV0gZGRkZCBb15TXkNeX16jXldefINeR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9eR16LXldeTICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfXnNek16DXmSAlcycsXG4gICAgICAgICAgICBzOiAn157Xodek16gg16nXoNeZ15XXqicsXG4gICAgICAgICAgICBzczogJyVkINep16DXmdeV16onLFxuICAgICAgICAgICAgbTogJ9eT16fXlCcsXG4gICAgICAgICAgICBtbTogJyVkINeT16fXldeqJyxcbiAgICAgICAgICAgIGg6ICfXqdei15QnLFxuICAgICAgICAgICAgaGg6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn16nXoteq15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoteV16onO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGQ6ICfXmdeV150nLFxuICAgICAgICAgICAgZGQ6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn15nXldee15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg15nXnteZ150nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE06ICfXl9eV15PXqScsXG4gICAgICAgICAgICBNTTogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXl9eV15PXqdeZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeX15XXk9ep15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeTogJ9ep16DXlCcsXG4gICAgICAgICAgICB5eTogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXqdeg16rXmdeZ150nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyICUgMTAgPT09IDAgJiYgbnVtYmVyICE9PSAxMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdeg15QnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdeg15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv15DXl9eUXCLXpnzXnNek16DXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815zXpNeg15kg15TXpteU16jXmdeZ151815zXpNeg15XXqiDXkdeV16fXqHzXkdeR15XXp9eofNeR16LXqNeRL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNeQ15fXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815HXoteo15EpJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9ec16TXoNeV16og15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXnNek16DXlFwi16YnIDogJ9ec16TXoNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15DXl9eUXCLXpicgOiAn15DXl9eo15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR16LXqNeRJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBoZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBIaW5kaSBbaGldXG4vLyEgYXV0aG9yIDogTWF5YW5rIFNpbmdoYWwgOiBodHRwczovL2dpdGh1Yi5jb20vbWF5YW5rc2luZ2hhbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgpacnLFxuICAgICAgICAgICAgMjogJ+ClqCcsXG4gICAgICAgICAgICAzOiAn4KWpJyxcbiAgICAgICAgICAgIDQ6ICfgpaonLFxuICAgICAgICAgICAgNTogJ+ClqycsXG4gICAgICAgICAgICA2OiAn4KWsJyxcbiAgICAgICAgICAgIDc6ICfgpa0nLFxuICAgICAgICAgICAgODogJ+ClricsXG4gICAgICAgICAgICA5OiAn4KWvJyxcbiAgICAgICAgICAgIDA6ICfgpaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICAgICAn4KWmJzogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9e4KSc4KSoL2ksXG4gICAgICAgICAgICAvXuCkq+CkvOCksHzgpKvgpLAvaSxcbiAgICAgICAgICAgIC9e4KSu4KS+4KSw4KWN4KSaL2ksXG4gICAgICAgICAgICAvXuCkheCkquCljeCksOCliC9pLFxuICAgICAgICAgICAgL17gpK7gpIgvaSxcbiAgICAgICAgICAgIC9e4KSc4KWC4KSoL2ksXG4gICAgICAgICAgICAvXuCknOClgeCksi9pLFxuICAgICAgICAgICAgL17gpIXgpJcvaSxcbiAgICAgICAgICAgIC9e4KS44KS/4KSk4KSCfOCkuOCkv+CkpC9pLFxuICAgICAgICAgICAgL17gpIXgpJXgpY3gpJ/gpYIvaSxcbiAgICAgICAgICAgIC9e4KSo4KS1fOCkqOCkteCkgi9pLFxuICAgICAgICAgICAgL17gpKbgpL/gpLjgpIJ84KSm4KS/4KS4L2ksXG4gICAgICAgIF0sXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgPSBbXG4gICAgICAgICAgICAvXuCknOCkqC9pLFxuICAgICAgICAgICAgL17gpKvgpLzgpLAvaSxcbiAgICAgICAgICAgIC9e4KSu4KS+4KSw4KWN4KSaL2ksXG4gICAgICAgICAgICAvXuCkheCkquCljeCksOCliC9pLFxuICAgICAgICAgICAgL17gpK7gpIgvaSxcbiAgICAgICAgICAgIC9e4KSc4KWC4KSoL2ksXG4gICAgICAgICAgICAvXuCknOClgeCksi9pLFxuICAgICAgICAgICAgL17gpIXgpJcvaSxcbiAgICAgICAgICAgIC9e4KS44KS/4KSkL2ksXG4gICAgICAgICAgICAvXuCkheCkleCljeCkn+Clgi9pLFxuICAgICAgICAgICAgL17gpKjgpLUvaSxcbiAgICAgICAgICAgIC9e4KSm4KS/4KS4L2ksXG4gICAgICAgIF07XG5cbiAgICB2YXIgaGkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoaScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KS84KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSu4KWN4KSs4KSwX+CkpuCkv+CkuOCkruCljeCkrOCksCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ+CknOCkqOCkteCksOClgF/gpKvgpLDgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliOCksl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLjgpY3gpKRf4KS44KS/4KSk4KSC4KSs4KSwX+CkheCkleCljeCkn+ClguCkrOCksF/gpKjgpLXgpILgpKzgpLBf4KSm4KS/4KS44KSC4KSs4KSwJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4KSc4KSoLl/gpKvgpLzgpLAuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYguX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpIXgpJcuX+CkuOCkv+CkpC5f4KSF4KSV4KWN4KSf4KWCLl/gpKjgpLUuX+CkpuCkv+CkuC4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLLgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLJf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IHNob3J0TW9udGhzUGFyc2UsXG5cbiAgICAgICAgbW9udGhzUmVnZXg6IC9eKOCknOCkqOCkteCksOClgHzgpJzgpKhcXC4/fOCkq+CkvOCksOCkteCksOClgHzgpKvgpLDgpLXgpLDgpYB84KSr4KS84KSwXFwuP3zgpK7gpL7gpLDgpY3gpJo/fOCkheCkquCljeCksOCliOCksnzgpIXgpKrgpY3gpLDgpYhcXC4/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLLgpL7gpIh84KSc4KWB4KSyXFwuP3zgpIXgpJfgpLjgpY3gpKR84KSF4KSXXFwuP3zgpLjgpL/gpKTgpK7gpY3gpKzgpLB84KS44KS/4KSk4KSC4KSs4KSwfOCkuOCkv+CkpFxcLj984KSF4KSV4KWN4KSf4KWC4KSs4KSwfOCkheCkleCljeCkn+ClglxcLj984KSo4KS14KSu4KWN4KSs4KSwfOCkqOCkteCkguCkrOCksHzgpKjgpLVcXC4/fOCkpuCkv+CkuOCkruCljeCkrOCksHzgpKbgpL/gpLjgpILgpKzgpLB84KSm4KS/4KS4XFwuPykvaSxcblxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvXijgpJzgpKjgpLXgpLDgpYB84KSc4KSoXFwuP3zgpKvgpLzgpLDgpLXgpLDgpYB84KSr4KSw4KS14KSw4KWAfOCkq+CkvOCksFxcLj984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYjgpLJ84KSF4KSq4KWN4KSw4KWIXFwuP3zgpK7gpIg/fOCknOClguCkqD984KSc4KWB4KSy4KS+4KSIfOCknOClgeCkslxcLj984KSF4KSX4KS44KWN4KSkfOCkheCkl1xcLj984KS44KS/4KSk4KSu4KWN4KSs4KSwfOCkuOCkv+CkpOCkguCkrOCksHzgpLjgpL/gpKRcXC4/fOCkheCkleCljeCkn+ClguCkrOCksHzgpIXgpJXgpY3gpJ/gpYJcXC4/fOCkqOCkteCkruCljeCkrOCksHzgpKjgpLXgpILgpKzgpLB84KSo4KS1XFwuP3zgpKbgpL/gpLjgpK7gpY3gpKzgpLB84KSm4KS/4KS44KSC4KSs4KSwfOCkpuCkv+CkuFxcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKOCknOCkqOCkteCksOClgD984KSr4KS84KSw4KS14KSw4KWAfOCkq+CksOCkteCksOClgD984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYjgpLI/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLLgpL7gpIg/fOCkheCkl+CkuOCljeCkpD984KS44KS/4KSk4KSu4KWN4KSs4KSwfOCkuOCkv+CkpOCkguCkrOCksHzgpLjgpL/gpKQ/XFwuP3zgpIXgpJXgpY3gpJ/gpYLgpKzgpLB84KSF4KSV4KWN4KSf4KWCXFwuP3zgpKjgpLXgpK7gpY3gpKzgpLB84KSo4KS14KSC4KSs4KSwP3zgpKbgpL/gpLjgpK7gpY3gpKzgpLB84KSm4KS/4KS44KSC4KSs4KSwPykvaSxcblxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXijgpJzgpKhcXC4/fOCkq+CkvOCksFxcLj984KSu4KS+4KSw4KWN4KSaP3zgpIXgpKrgpY3gpLDgpYhcXC4/fOCkruCkiD984KSc4KWC4KSoP3zgpJzgpYHgpLJcXC4/fOCkheCkl1xcLj984KS44KS/4KSkXFwuP3zgpIXgpJXgpY3gpJ/gpYJcXC4/fOCkqOCktVxcLj984KSm4KS/4KS4XFwuPykvaSxcblxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpKrgpL/gpJvgpLLgpYddIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4KSu4KWH4KSCJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpKrgpLngpLLgpYcnLFxuICAgICAgICAgICAgczogJ+CkleClgeCkmyDgpLngpYAg4KSV4KWN4KS34KSjJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4KS44KWH4KSV4KSC4KShJyxcbiAgICAgICAgICAgIG06ICfgpI/gpJUg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgICAgIGg6ICfgpI/gpJUg4KSY4KSC4KSf4KS+JyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KSY4KSC4KSf4KWHJyxcbiAgICAgICAgICAgIGQ6ICfgpI/gpJUg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE06ICfgpI/gpJUg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgICAgIHk6ICfgpI/gpJUg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSGluZGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gSGluZGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKR84KS44KWB4KSs4KS5fOCkpuCli+CkquCkueCksHzgpLbgpL7gpK4vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpYHgpKzgpLknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KWL4KSq4KS54KSwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLbgpL7gpK4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSkJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpYHgpKzgpLknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuCli+CkquCkueCksCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS24KS+4KSuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ3JvYXRpYW4gW2hyXVxuLy8hIGF1dGhvciA6IEJvamFuIE1hcmtvdmnEhyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ibWFya292aWNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZG5hIG1pbnV0YScgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRhbiBzYXQnIDogJ2plZG5vZyBzYXRhJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2RhbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBociA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hyJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3NpamXEjW5qYV92ZWxqYcSNZV9vxb51amthX3RyYXZuamFfc3ZpYm5qYV9saXBuamFfc3JwbmphX2tvbG92b3phX3J1am5hX2xpc3RvcGFkYV9zdHVkZW5vZ2FfcHJvc2luY2EnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzaWplxI1hbmpfdmVsamHEjWFfb8W+dWpha190cmF2YW5qX3N2aWJhbmpfbGlwYW5qX3NycGFual9rb2xvdm96X3J1amFuX2xpc3RvcGFkX3N0dWRlbmlfcHJvc2luYWMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdzaWouX3ZlbGouX2/FvnUuX3RyYS5fc3ZpLl9saXAuX3NycC5fa29sLl9ydWouX2xpcy5fc3R1Ll9wcm8uJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRG8gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0RvIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEbyBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbHVdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3ByaWplICVzJyxcbiAgICAgICAgICAgIHM6ICdwYXIgc2VrdW5kaScsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnZGFuJyxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5OiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSHVuZ2FyaWFuIFtodV1cbi8vISBhdXRob3IgOiBBZGFtIEJydW5uZXIgOiBodHRwczovL2dpdGh1Yi5jb20vYWRhbWJydW5uZXJcbi8vISBhdXRob3IgOiBQZXRlciBWaXN6dCAgOiBodHRwczovL2dpdGh1Yi5jb20vcGFzc2F0Z3RcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB3ZWVrRW5kaW5ncyA9ICd2YXPDoXJuYXAgaMOpdGbFkW4ga2VkZGVuIHN6ZXJkw6FuIGNzw7x0w7ZydMO2a8O2biBww6ludGVrZW4gc3pvbWJhdG9uJy5zcGxpdChcbiAgICAgICAgJyAnXG4gICAgKTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW0gPSBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgICAgICAgICA/ICduw6low6FueSBtw6Fzb2RwZXJjJ1xuICAgICAgICAgICAgICAgICAgICA6ICduw6low6FueSBtw6Fzb2RwZXJjZSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4KVxuICAgICAgICAgICAgICAgICAgICA/ICcgbcOhc29kcGVyYydcbiAgICAgICAgICAgICAgICAgICAgOiAnIG3DoXNvZHBlcmNlJztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIHBlcmMnIDogJyBwZXJjZScpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOzcmEnIDogJyDDs3LDoWphJyk7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDs3JhJyA6ICcgw7Nyw6FqYScpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBuYXAnIDogJyBuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBow7NuYXAnIDogJyBow7NuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOpdicgOiAnIMOpdmUnKTtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOpdicgOiAnIMOpdmUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdlZWsoaXNGdXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChpc0Z1dHVyZSA/ICcnIDogJ1ttw7psdF0gJykgK1xuICAgICAgICAgICAgJ1snICtcbiAgICAgICAgICAgIHdlZWtFbmRpbmdzW3RoaXMuZGF5KCldICtcbiAgICAgICAgICAgICddIExUWy1rb3JdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgICAgICBtb250aHM6ICdqYW51w6FyX2ZlYnJ1w6FyX23DoXJjaXVzX8OhcHJpbGlzX23DoWp1c19qw7puaXVzX2rDumxpdXNfYXVndXN6dHVzX3N6ZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX23DoXJjLl/DoXByLl9tw6FqLl9qw7puLl9qw7psLl9hdWcuX3N6ZXB0Ll9va3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAndmFzX2jDqXRfa2VkZF9zemVfY3PDvHRfcMOpbl9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAndl9oX2tfc3plX2NzX3Bfc3pvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMOiAnWVlZWS4gTU1NTSBELicsXG4gICAgICAgICAgICBMTEw6ICdZWVlZLiBNTU1NIEQuIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9kZXxkdS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKSA9PT0gJ3UnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2RlJyA6ICdERSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2R1JyA6ICdEVSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW21hXSBMVFsta29yXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Vlay5jYWxsKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbdGVnbmFwXSBMVFsta29yXScsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgbcO6bHZhJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcycsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQXJtZW5pYW4gW2h5LWFtXVxuLy8hIGF1dGhvciA6IEFybWVuZGFyYWJ5YW4gOiBodHRwczovL2dpdGh1Yi5jb20vYXJtZW5kYXJhYnlhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGh5QW0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoeS1hbScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfVsNW41oLVttW+1aHWgNWrX9aD1aXVv9aA1b7VodaA1atf1bTVodaA1b/Vq1/VodW61oDVq9Ws1atf1bTVodW11avVvdWrX9Ww1bjWgtW21avVvdWrX9Ww1bjWgtWs1avVvdWrX9aF1aPVuNW91b/VuNW91atf1b3VpdW61b/VpdW01aLVpdaA1atf1bDVuNWv1b/VpdW01aLVpdaA1atf1bbVuNW11aXVtNWi1aXWgNWrX9Wk1aXVr9W/1aXVtNWi1aXWgNWrJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn1bDVuNaC1bbVvtWh1oBf1oPVpdW/1oDVvtWh1oBf1bTVodaA1b9f1aHVutaA1avVrF/VtNWh1bXVq9W9X9Ww1bjWgtW21avVvV/VsNW41oLVrNWr1b1f1oXVo9W41b3Vv9W41b1f1b3VpdW61b/VpdW01aLVpdaAX9Ww1bjVr9W/1aXVtNWi1aXWgF/VttW41bXVpdW01aLVpdaAX9Wk1aXVr9W/1aXVtNWi1aXWgCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ9Ww1bbVvl/Wg9W/1oBf1bTWgNW/X9Wh1brWgF/VtNW11b1f1bDVttW9X9Ww1azVvV/WhdWj1b1f1b3VutW/X9Ww1a/Vv1/VttW01aJf1aTVr9W/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9Wv1avWgNWh1a/Vq1/VpdaA1a/VuNaC1bfVodWi1anVq1/VpdaA1aXWhNW31aHVotWp1atf1bnVuNaA1aXWhNW31aHVotWp1atf1bDVq9W21aPVt9Wh1aLVqdWrX9W41oLWgNWi1aHVqV/Vt9Wh1aLVodWpJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVkg1akuJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vVodW11b3WhdaAXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9W+1aHVstWoXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Wl1oDVpdWvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vVodW21oHVodWuXSBkZGRkIFvWhdaA1agg1arVodW01ahdIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINWw1aXVv9W4JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDVodW81aHVuycsXG4gICAgICAgICAgICBzOiAn1bTVqyDWhNWh1bbVqyDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIHNzOiAnJWQg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgICAgICBtOiAn1oDVuNW61aUnLFxuICAgICAgICAgICAgbW06ICclZCDWgNW41brVpScsXG4gICAgICAgICAgICBoOiAn1arVodW0JyxcbiAgICAgICAgICAgIGhoOiAnJWQg1arVodW0JyxcbiAgICAgICAgICAgIGQ6ICfWhdaAJyxcbiAgICAgICAgICAgIGRkOiAnJWQg1oXWgCcsXG4gICAgICAgICAgICBNOiAn1aHVtNWr1b0nLFxuICAgICAgICAgICAgTU06ICclZCDVodW01avVvScsXG4gICAgICAgICAgICB5OiAn1b/VodaA1asnLFxuICAgICAgICAgICAgeXk6ICclZCDVv9Wh1oDVqycsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Vo9Wr1bfVpdaA1b7VoXzVodW81aHVvtW41b/VvtWhfNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijWgdWl1oDVpdWv1b7VoXzVpdaA1aXVr9W41bXVodW2KSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aPVq9W31aXWgNW+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wh1bzVodW+1bjVv9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9aB1aXWgNWl1a/VvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVpdaA1aXVr9W41bXVodW2JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9fFxcZHsxLDJ9LSjVq9W2fNaA1aQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREbyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdWr1bYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdaA1aQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBoeUFtO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEluZG9uZXNpYW4gW2lkXVxuLy8hIGF1dGhvciA6IE1vaGFtbWFkIFNhdHJpbyBVdG9tbyA6IGh0dHBzOi8vZ2l0aHViLmNvbS90eW9rXG4vLyEgcmVmZXJlbmNlOiBodHRwOi8vaWQud2lraXNvdXJjZS5vcmcvd2lraS9QZWRvbWFuX1VtdW1fRWphYW5fQmFoYXNhX0luZG9uZXNpYV95YW5nX0Rpc2VtcHVybmFrYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBpZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lkJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWd0X1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdNaW5nZ3VfU2VuaW5fU2VsYXNhX1JhYnVfS2FtaXNfSnVtYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdNaW5fU2VuX1NlbF9SYWJfS2FtX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnTWdfU25fU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHNpYW5nfHNvcmV8bWFsYW0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpYW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb3JlJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2lhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb3JlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Jlc29rIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0tlbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGFsdSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeWFuZyBsYWx1JyxcbiAgICAgICAgICAgIHM6ICdiZWJlcmFwYSBkZXRpaycsXG4gICAgICAgICAgICBzczogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG06ICdzZW1lbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWVuaXQnLFxuICAgICAgICAgICAgaDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQ6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE06ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YWh1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBpZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJY2VsYW5kaWMgW2lzXVxuLy8hIGF1dGhvciA6IEhpbnJpayDDlnJuIFNpZ3Vyw7Bzc29uIDogaHR0cHM6Ly9naXRodWIuY29tL2hpbnJpa1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgaWYgKG4gJSAxMDAgPT09IDExKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChuICUgMTAgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyAnbm9ra3JhciBzZWvDum5kdXInXG4gICAgICAgICAgICAgICAgICAgIDogJ25va2tydW0gc2Vrw7puZHVtJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArXG4gICAgICAgICAgICAgICAgICAgICAgICAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWvDum5kdXInIDogJ3Nla8O6bmR1bScpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2Vrw7puZGEnO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbcOtbsO6dGEnIDogJ23DrW7DunR1JztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ23DrW7DunR1cicgOiAnbcOtbsO6dHVtJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAna2x1a2t1c3R1bmRpcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdrbHVra3VzdHVuZHVtJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdrbHVra3VzdHVuZCc7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RhZ3VyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2RhZycgOiAnZGVnaSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RhZ2FyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ2RhZ2EnIDogJ2TDtmd1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2RhZ3VyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdkYWcnIDogJ2RlZ2knKTtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbcOhbnXDsHVyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ23DoW51w7AnIDogJ23DoW51w7BpJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOhbnXDsGlyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ23DoW51w7BpJyA6ICdtw6FudcOwdW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwdXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ23DoW51w7AnIDogJ23DoW51w7BpJyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcmknO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJ1bScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJpJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpcycsIHtcbiAgICAgICAgbW9udGhzOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYcOtX2rDum5fasO6bF/DoWfDul9zZXBfb2t0X27Ds3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ3N1bm51ZGFndXJfbcOhbnVkYWd1cl/DvnJpw7BqdWRhZ3VyX21pw7B2aWt1ZGFndXJfZmltbXR1ZGFndXJfZsO2c3R1ZGFndXJfbGF1Z2FyZGFndXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X03DoV/DnnJfTWlfRmlfRsO2X0xhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbw60gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vDoSBtb3JndW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vDrSBnw6ZyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbc8Otw7Bhc3RhXSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZWZ0aXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2Z5cmlyICVzIHPDrcOwYW4nLFxuICAgICAgICAgICAgczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiAna2x1a2t1c3R1bmQnLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBpcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBJdGFsaWFuIChTd2l0emVybGFuZCkgW2l0LWNoXVxuLy8hIGF1dGhvciA6IHhmaCA6IGh0dHBzOi8vZ2l0aHViLmNvbS94ZmhcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBpdENoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQtY2gnLCB7XG4gICAgICAgIG1vbnRoczogJ2dlbm5haW9fZmViYnJhaW9fbWFyem9fYXByaWxlX21hZ2dpb19naXVnbm9fbHVnbGlvX2Fnb3N0b19zZXR0ZW1icmVfb3R0b2JyZV9ub3ZlbWJyZV9kaWNlbWJyZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnZG9tX2x1bl9tYXJfbWVyX2dpb192ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvX2x1X21hX21lX2dpX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKC9eWzAtOV0uKyQvLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0OiAnJXMgZmEnLFxuICAgICAgICAgICAgczogJ2FsY3VuaSBzZWNvbmRpJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGg6IFwidW4nb3JhXCIsXG4gICAgICAgICAgICBoaDogJyVkIG9yZScsXG4gICAgICAgICAgICBkOiAndW4gZ2lvcm5vJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIE06ICd1biBtZXNlJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWVzaScsXG4gICAgICAgICAgICB5OiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eTogJyVkIGFubmknLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0Q2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSXRhbGlhbiBbaXRdXG4vLyEgYXV0aG9yIDogTG9yZW56byA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbGllbVxuLy8hIGF1dGhvcjogTWF0dGlhIExhcmVudGlzOiBodHRwczovL2dpdGh1Yi5jb20vbm9zdGFsZ2lhelxuLy8hIGF1dGhvcjogTWFyY28gOiBodHRwczovL2dpdGh1Yi5jb20vTWFuZnJlOThcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBpdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2l0Jywge1xuICAgICAgICBtb250aHM6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnZ2VuX2ZlYl9tYXJfYXByX21hZ19naXVfbHVnX2Fnb19zZXRfb3R0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnZG9tZW5pY2FfbHVuZWTDrF9tYXJ0ZWTDrF9tZXJjb2xlZMOsX2dpb3ZlZMOsX3ZlbmVyZMOsX3NhYmF0bycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkb19sdV9tYV9tZV9naV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tPZ2dpIGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tEb21hbmkgYScgK1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5ob3VycygpID4gMSA/ICdsbGUgJyA6IHRoaXMuaG91cnMoKSA9PT0gMCA/ICcgJyA6IFwibGwnXCIpICtcbiAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ2RkZGQgW2EnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgJ1tJZXJpIGEnICtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDEgPyAnbGxlICcgOiB0aGlzLmhvdXJzKCkgPT09IDAgPyAnICcgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICddTFQnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbTGEgc2NvcnNhXSBkZGRkIFthJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbGxlICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhvdXJzKCkgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdbTG8gc2NvcnNvXSBkZGRkIFthJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaG91cnMoKSA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnbGxlICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmhvdXJzKCkgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcImxsJ1wiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ11MVCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAndHJhICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBmYScsXG4gICAgICAgICAgICBzOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRpJyxcbiAgICAgICAgICAgIG06ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaDogXCJ1bidvcmFcIixcbiAgICAgICAgICAgIGhoOiAnJWQgb3JlJyxcbiAgICAgICAgICAgIGQ6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQ6ICclZCBnaW9ybmknLFxuICAgICAgICAgICAgdzogJ3VuYSBzZXR0aW1hbmEnLFxuICAgICAgICAgICAgd3c6ICclZCBzZXR0aW1hbmUnLFxuICAgICAgICAgICAgTTogJ3VuIG1lc2UnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHk6ICd1biBhbm5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5uaScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gaXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSmFwYW5lc2UgW2phXVxuLy8hIGF1dGhvciA6IExJIExvbmcgOiBodHRwczovL2dpdGh1Yi5jb20vYmFyeW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgamEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqYScsIHtcbiAgICAgICAgZXJhczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmNlOiAnMjAxOS0wNS0wMScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfku6TlkownLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+OLvycsXG4gICAgICAgICAgICAgICAgYWJicjogJ1InLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE5ODktMDEtMDgnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMjAxOS0wNC0zMCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICflubPmiJAnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONuycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0gnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE5MjYtMTItMjUnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTk4OS0wMS0wNycsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfmmK3lkownLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONvCcsXG4gICAgICAgICAgICAgICAgYWJicjogJ1MnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE5MTItMDctMzAnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTkyNi0xMi0yNCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICflpKfmraMnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONvScsXG4gICAgICAgICAgICAgICAgYWJicjogJ1QnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzE4NzMtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTkxMi0wNy0yOScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiA2LFxuICAgICAgICAgICAgICAgIG5hbWU6ICfmmI7msrsnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ+ONvicsXG4gICAgICAgICAgICAgICAgYWJicjogJ00nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDEtMDEtMDEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAnMTg3My0xMi0zMScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfopb/mmqYnLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICfntIDlhYPliY0nLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0JDJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQkMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgZXJhWWVhck9yZGluYWxSZWdleDogLyjlhYN8XFxkKynlubQvLFxuICAgICAgICBlcmFZZWFyT3JkaW5hbFBhcnNlOiBmdW5jdGlvbiAoaW5wdXQsIG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV0gPT09ICflhYMnID8gMSA6IHBhcnNlSW50KG1hdGNoWzFdIHx8IGlucHV0LCAxMCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoczogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+aXpeabnOaXpV/mnIjmm5zml6Vf54Gr5puc5pelX+awtOabnOaXpV/mnKjmm5zml6Vf6YeR5puc5pelX+Wcn+abnOaXpScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfml6Vf5pyIX+eBq1/msLRf5pyoX+mHkV/lnJ8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelIGRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgbGw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGw6ICdZWVlZ5bm0TeaciETml6UoZGRkKSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/ljYjliY185Y2I5b6ML2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn5Y2I5b6MJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOWJjSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Y2I5b6MJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5pelXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuaXpV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5p2l6YCxXWRkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb5pio5pelXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndlZWsoKSAhPT0gbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vlhYjpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ95pelLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gJ+WFg+W5tCcgOiBudW1iZXIgKyAn5bm0JztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0OiAnJXPliY0nLFxuICAgICAgICAgICAgczogJ+aVsOenkicsXG4gICAgICAgICAgICBzczogJyVk56eSJyxcbiAgICAgICAgICAgIG06ICcx5YiGJyxcbiAgICAgICAgICAgIG1tOiAnJWTliIYnLFxuICAgICAgICAgICAgaDogJzHmmYLplpMnLFxuICAgICAgICAgICAgaGg6ICclZOaZgumWkycsXG4gICAgICAgICAgICBkOiAnMeaXpScsXG4gICAgICAgICAgICBkZDogJyVk5pelJyxcbiAgICAgICAgICAgIE06ICcx44O25pyIJyxcbiAgICAgICAgICAgIE1NOiAnJWTjg7bmnIgnLFxuICAgICAgICAgICAgeTogJzHlubQnLFxuICAgICAgICAgICAgeXk6ICclZOW5tCcsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gamE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogSmF2YW5lc2UgW2p2XVxuLy8hIGF1dGhvciA6IFJvbnkgTGFudGlwIDogaHR0cHM6Ly9naXRodWIuY29tL2xhbnRpcFxuLy8hIHJlZmVyZW5jZTogaHR0cDovL2p2Lndpa2lwZWRpYS5vcmcvd2lraS9CYXNhX0phd2FcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBqdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2p2Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWdzX1NlcF9Pa3RfTm9wX0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdNaW5nZ3VfU2VuZW5fU2Vsb3NvX1JlYnVfS2VtaXNfSmVtdXdhaF9TZXB0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdNZ19Tbl9TbF9SYl9LbV9KbV9TcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2VuamluZ3xzaXlhbmd8c29udGVufG5kYWx1LyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAnZW5qaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpeWFuZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29udGVuJyB8fCBtZXJpZGllbSA9PT0gJ25kYWx1Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbmppbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb250ZW4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25kYWx1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRGludGVuIHB1bmlrbyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tLYWxhIHdpbmdpIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd3b250ZW4gaW5nICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpbmdrYW5nIGtlcGVuZ2tlcicsXG4gICAgICAgICAgICBzOiAnc2F3ZXRhd2lzIGRldGlrJyxcbiAgICAgICAgICAgIHNzOiAnJWQgZGV0aWsnLFxuICAgICAgICAgICAgbTogJ3NldHVuZ2dhbCBtZW5pdCcsXG4gICAgICAgICAgICBtbTogJyVkIG1lbml0JyxcbiAgICAgICAgICAgIGg6ICdzZXR1bmdnYWwgamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWRpbnRlbicsXG4gICAgICAgICAgICBkZDogJyVkIGRpbnRlbicsXG4gICAgICAgICAgICBNOiAnc2V3dWxhbicsXG4gICAgICAgICAgICBNTTogJyVkIHd1bGFuJyxcbiAgICAgICAgICAgIHk6ICdzZXRhdW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YXVuJyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGp2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEdlb3JnaWFuIFtrYV1cbi8vISBhdXRob3IgOiBJcmFrbGkgSmFuaWFzaHZpbGkgOiBodHRwczovL2dpdGh1Yi5jb20vSXJha2xpSmFuaVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGthID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2EnLCB7XG4gICAgICAgIG1vbnRoczogJ+GDmOGDkOGDnOGDleGDkOGDoOGDmF/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg5hf4YOb4YOQ4YOg4YOi4YOYX+GDkOGDnuGDoOGDmOGDmuGDmF/hg5vhg5Dhg5jhg6Hhg5hf4YOY4YOV4YOc4YOY4YOh4YOYX+GDmOGDleGDmuGDmOGDoeGDmF/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg51f4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOYX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDmF/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg5hf4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOYJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+GDmOGDkOGDnF/hg5fhg5Thg5Ff4YOb4YOQ4YOgX+GDkOGDnuGDoF/hg5vhg5Dhg5hf4YOY4YOV4YOcX+GDmOGDleGDml/hg5Dhg5Lhg5Vf4YOh4YOU4YOlX+GDneGDpeGDol/hg5zhg53hg5Rf4YOT4YOU4YOZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ+GDmeGDleGDmOGDoOGDkF/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDmF/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOYX+GDqOGDkOGDkeGDkOGDl+GDmCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZm9ybWF0OiAn4YOZ4YOV4YOY4YOg4YOQ4YOhX+GDneGDoOGDqOGDkOGDkeGDkOGDl+GDoV/hg6Hhg5Dhg5vhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOd4YOX4YOu4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDruGDo+GDl+GDqOGDkOGDkeGDkOGDl+GDoV/hg57hg5Dhg6Dhg5Dhg6Hhg5nhg5Thg5Xhg6Ff4YOo4YOQ4YOR4YOQ4YOX4YOhJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogLyjhg6zhg5jhg5zhg5B84YOo4YOU4YOb4YOT4YOU4YOSKS8sXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4YOZ4YOVX+GDneGDoF/hg6Hhg5Bf4YOd4YOXX+GDruGDo1/hg57hg5Bf4YOo4YOQJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+GDk+GDpuGDlOGDoV0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhg67hg5Xhg5Dhg5pdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4YOS4YOj4YOo4YOY4YOcXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vhg6jhg5Thg5vhg5Phg5Thg5JdIGRkZGQgTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4YOs4YOY4YOc4YOQXSBkZGRkIExULeGDluGDlCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8o4YOs4YOQ4YObfOGDrOGDo+GDl3zhg6Hhg5Dhg5Dhg5d84YOs4YOU4YOafOGDk+GDpnzhg5fhg5UpKOGDmHzhg5QpLywgZnVuY3Rpb24gKFxuICAgICAgICAgICAgICAgICAgICAkMCxcbiAgICAgICAgICAgICAgICAgICAgJDEsXG4gICAgICAgICAgICAgICAgICAgICQyXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkMiA9PT0gJ+GDmCcgPyAkMSArICfhg6jhg5gnIDogJDEgKyAkMiArICfhg6jhg5gnO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3Q6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgaWYgKC8o4YOs4YOQ4YOb4YOYfOGDrOGDo+GDl+GDmHzhg6Hhg5Dhg5Dhg5fhg5h84YOT4YOm4YOUfOGDl+GDleGDlCkvLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKOGDmHzhg5QpJC8sICfhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgv4YOs4YOU4YOa4YOYLy50ZXN0KHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoL+GDrOGDlOGDmuGDmCQvLCAn4YOs4YOa4YOY4YOhIOGDrOGDmOGDnCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzOiAn4YOg4YOQ4YOb4YOT4YOU4YOc4YOY4YOb4YOUIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBzczogJyVkIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBtOiAn4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIGg6ICfhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICAgICAgaGg6ICclZCDhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICAgICAgZDogJ+GDk+GDpuGDlCcsXG4gICAgICAgICAgICBkZDogJyVkIOGDk+GDpuGDlCcsXG4gICAgICAgICAgICBNOiAn4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIHk6ICfhg6zhg5Thg5rhg5gnLFxuICAgICAgICAgICAgeXk6ICclZCDhg6zhg5Thg5rhg5gnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvMHwxLeGDmuGDmHzhg5vhg5QtXFxkezEsMn18XFxkezEsMn0t4YOULyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOa4YOYJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBudW1iZXIgPCAyMCB8fFxuICAgICAgICAgICAgICAgIChudW1iZXIgPD0gMTAwICYmIG51bWJlciAlIDIwID09PSAwKSB8fFxuICAgICAgICAgICAgICAgIG51bWJlciAlIDEwMCA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfhg5vhg5QtJyArIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLeGDlCc7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSxcbiAgICAgICAgICAgIGRveTogNyxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBrYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBLYXpha2ggW2trXVxuLy8hIGF1dGhvcnMgOiBOdXJsYW4gUmFraGltemhhbm92IDogaHR0cHM6Ly9naXRodWIuY29tL251cmxhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGI0ZYnLFxuICAgICAgICAxOiAnLdGI0ZYnLFxuICAgICAgICAyOiAnLdGI0ZYnLFxuICAgICAgICAzOiAnLdGI0ZYnLFxuICAgICAgICA0OiAnLdGI0ZYnLFxuICAgICAgICA1OiAnLdGI0ZYnLFxuICAgICAgICA2OiAnLdGI0YsnLFxuICAgICAgICA3OiAnLdGI0ZYnLFxuICAgICAgICA4OiAnLdGI0ZYnLFxuICAgICAgICA5OiAnLdGI0YsnLFxuICAgICAgICAxMDogJy3RiNGLJyxcbiAgICAgICAgMjA6ICct0YjRiycsXG4gICAgICAgIDMwOiAnLdGI0YsnLFxuICAgICAgICA0MDogJy3RiNGLJyxcbiAgICAgICAgNTA6ICct0YjRlicsXG4gICAgICAgIDYwOiAnLdGI0YsnLFxuICAgICAgICA3MDogJy3RiNGWJyxcbiAgICAgICAgODA6ICct0YjRlicsXG4gICAgICAgIDkwOiAnLdGI0YsnLFxuICAgICAgICAxMDA6ICct0YjRlicsXG4gICAgfTtcblxuICAgIHZhciBrayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2trJywge1xuICAgICAgICBtb250aHM6ICfSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L0nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0pvQsNKjX9Cw0pvQv1/QvdCw0YNf0YHTmdGDX9C80LDQvF/QvNCw0YNf0YjRltC7X9GC0LDQvF/Sm9GL0YBf0pvQsNC3X9Kb0LDRgF/QttC10LsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0LbQtdC60YHQtdC90LHRll/QtNKv0LnRgdC10L3QsdGWX9GB0LXQudGB0LXQvdCx0ZZf0YHTmdGA0YHQtdC90LHRll/QsdC10LnRgdC10L3QsdGWX9C20rHQvNCwX9GB0LXQvdCx0ZYnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0LbQul/QtNC5X9GB0Llf0YHRgF/QsdC5X9C20Lxf0YHQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JXRgNGC0LXSoyDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb06jRgtC60LXQvSDQsNC/0YLQsNC90YvSo10gZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDRltGI0ZbQvdC00LUnLFxuICAgICAgICAgICAgcGFzdDogJyVzINCx0rHRgNGL0L0nLFxuICAgICAgICAgICAgczogJ9Cx0ZbRgNC90LXRiNC1INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzczogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtOiAn0LHRltGAINC80LjQvdGD0YInLFxuICAgICAgICAgICAgbW06ICclZCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIGg6ICfQsdGW0YAg0YHQsNKT0LDRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0LDSk9Cw0YInLFxuICAgICAgICAgICAgZDogJ9Cx0ZbRgCDQutKv0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTTogJ9Cx0ZbRgCDQsNC5JyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LDQuScsXG4gICAgICAgICAgICB5OiAn0LHRltGAINC20YvQuycsXG4gICAgICAgICAgICB5eTogJyVkINC20YvQuycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YjRlnzRiNGLKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENhbWJvZGlhbiBba21dXG4vLyEgYXV0aG9yIDogS3J1eSBWYW5uYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rcnV5dmFubmFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAxOiAn4Z+hJyxcbiAgICAgICAgICAgIDI6ICfhn6InLFxuICAgICAgICAgICAgMzogJ+GfoycsXG4gICAgICAgICAgICA0OiAn4Z+kJyxcbiAgICAgICAgICAgIDU6ICfhn6UnLFxuICAgICAgICAgICAgNjogJ+GfpicsXG4gICAgICAgICAgICA3OiAn4Z+nJyxcbiAgICAgICAgICAgIDg6ICfhn6gnLFxuICAgICAgICAgICAgOTogJ+GfqScsXG4gICAgICAgICAgICAwOiAn4Z+gJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+GfoSc6ICcxJyxcbiAgICAgICAgICAgICfhn6InOiAnMicsXG4gICAgICAgICAgICAn4Z+jJzogJzMnLFxuICAgICAgICAgICAgJ+GfpCc6ICc0JyxcbiAgICAgICAgICAgICfhn6UnOiAnNScsXG4gICAgICAgICAgICAn4Z+mJzogJzYnLFxuICAgICAgICAgICAgJ+Gfpyc6ICc3JyxcbiAgICAgICAgICAgICfhn6gnOiAnOCcsXG4gICAgICAgICAgICAn4Z+pJzogJzknLFxuICAgICAgICAgICAgJ+GfoCc6ICcwJyxcbiAgICAgICAgfTtcblxuICAgIHZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgICAgICBtb250aHM6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Z6i4Z62X+GehV/hnqJf4Z6WX+GeluGfkuGeml/hnp/hnrtf4Z6fJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+GeluGfkuGemuGeueGegHzhnpvhn5LhnoThnrbhnoUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+Gem+GfkuGehOGetuGehSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfhnpbhn5LhnprhnrnhnoAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+Gem+GfkuGehOGetuGehSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+GekOGfkuGehOGfg+Gek+GfgeGfhyDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4Z6f4Z+S4Z6i4Z+C4Z6AIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4Z6Y4Z+S4Z6f4Z634Z6b4Z6Y4Z634Z6JIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvhnp/hnpThn5Lhno/hnrbhnqDhn43hnpjhnrvhnpNdIFvhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPhnpHhn4Dhno8nLFxuICAgICAgICAgICAgcGFzdDogJyVz4Z6Y4Z674Z6TJyxcbiAgICAgICAgICAgIHM6ICfhnpThn4nhnrvhnpPhn5LhnpjhnrbhnpPhnpzhnrfhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgc3M6ICclZCDhnpzhnrfhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbTogJ+GemOGeveGemeGek+GetuGekeGeuCcsXG4gICAgICAgICAgICBtbTogJyVkIOGek+GetuGekeGeuCcsXG4gICAgICAgICAgICBoOiAn4Z6Y4Z694Z6Z4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgICAgIGQ6ICfhnpjhnr3hnpnhnpDhn5LhnoThn4MnLFxuICAgICAgICAgICAgZGQ6ICclZCDhnpDhn5LhnoThn4MnLFxuICAgICAgICAgICAgTTogJ+GemOGeveGemeGegeGfgicsXG4gICAgICAgICAgICBNTTogJyVkIOGegeGfgicsXG4gICAgICAgICAgICB5OiAn4Z6Y4Z694Z6Z4Z6G4Z+S4Z6T4Z624Z+GJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Z6G4Z+S4Z6T4Z624Z+GJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL+GekeGeuFxcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogJ+GekeGeuCVkJyxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+GfoeGfouGfo+GfpOGfpeGfpuGfp+GfqOGfqeGfoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGttO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEthbm5hZGEgW2tuXVxuLy8hIGF1dGhvciA6IFJhamVldiBOYWlrIDogaHR0cHM6Ly9naXRodWIuY29tL3JhamVldm5haWt0ZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgs6cnLFxuICAgICAgICAgICAgMjogJ+CzqCcsXG4gICAgICAgICAgICAzOiAn4LOpJyxcbiAgICAgICAgICAgIDQ6ICfgs6onLFxuICAgICAgICAgICAgNTogJ+CzqycsXG4gICAgICAgICAgICA2OiAn4LOsJyxcbiAgICAgICAgICAgIDc6ICfgs60nLFxuICAgICAgICAgICAgODogJ+CzricsXG4gICAgICAgICAgICA5OiAn4LOvJyxcbiAgICAgICAgICAgIDA6ICfgs6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4LOnJzogJzEnLFxuICAgICAgICAgICAgJ+CzqCc6ICcyJyxcbiAgICAgICAgICAgICfgs6knOiAnMycsXG4gICAgICAgICAgICAn4LOqJzogJzQnLFxuICAgICAgICAgICAgJ+Czqyc6ICc1JyxcbiAgICAgICAgICAgICfgs6wnOiAnNicsXG4gICAgICAgICAgICAn4LOtJzogJzcnLFxuICAgICAgICAgICAgJ+Czric6ICc4JyxcbiAgICAgICAgICAgICfgs68nOiAnOScsXG4gICAgICAgICAgICAn4LOmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIGtuID0gbW9tZW50LmRlZmluZUxvY2FsZSgna24nLCB7XG4gICAgICAgIG1vbnRoczogJ+CynOCyqOCyteCysOCyv1/gsqvgs4bgsqzgs43gsrDgsrXgsrDgsr9f4LKu4LK+4LKw4LON4LKa4LONX+Cyj+CyquCzjeCysOCyv+CysuCzjV/gsq7gs4bgs5Vf4LKc4LOC4LKo4LONX+CynOCzgeCysuCzhuCzll/gsobgspfgsrjgs43gsp/gs41f4LK44LOG4LKq4LON4LKf4LOG4LKC4LKs4LKw4LONX+CyheCyleCzjeCyn+CzhuCzguCzleCyrOCysOCzjV/gsqjgsrXgs4bgsoLgsqzgsrDgs41f4LKh4LK/4LK44LOG4LKC4LKs4LKw4LONJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+CynOCyqF/gsqvgs4bgsqzgs43gsrBf4LKu4LK+4LKw4LON4LKa4LONX+Cyj+CyquCzjeCysOCyv+CysuCzjV/gsq7gs4bgs5Vf4LKc4LOC4LKo4LONX+CynOCzgeCysuCzhuCzll/gsobgspfgsrjgs43gsp/gs41f4LK44LOG4LKq4LON4LKf4LOG4LKCX+CyheCyleCzjeCyn+CzhuCzguCzlV/gsqjgsrXgs4bgsoJf4LKh4LK/4LK44LOG4LKCJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CyreCyvuCyqOCzgeCyteCyvuCysF/gsrjgs4bgs4Lgs5Xgsq7gsrXgsr7gsrBf4LKu4LKC4LKX4LKz4LK14LK+4LKwX+CyrOCzgeCyp+CyteCyvuCysF/gspfgs4HgsrDgs4HgsrXgsr7gsrBf4LK24LOB4LKV4LON4LKw4LK14LK+4LKwX+CytuCyqOCyv+CyteCyvuCysCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CyreCyvuCyqOCzgV/gsrjgs4bgs4Lgs5Xgsq5f4LKu4LKC4LKX4LKzX+CyrOCzgeCyp1/gspfgs4HgsrDgs4Ff4LK24LOB4LKV4LON4LKwX+CytuCyqOCyvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgsq3gsr5f4LK44LOG4LOC4LOVX+CyruCygl/gsqzgs4Ff4LKX4LOBX+CytuCzgV/gsrYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LKH4LKC4LKm4LOBXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CyqOCyvuCys+Czhl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CyqOCyv+CyqOCzjeCyqOCzhl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4LKV4LOG4LOC4LKo4LOG4LKvXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCyqOCyguCypOCysCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4LK54LK/4LKC4LKm4LOGJyxcbiAgICAgICAgICAgIHM6ICfgspXgs4bgsrLgsrXgs4Eg4LKV4LON4LK34LKj4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4LK44LOG4LKV4LOG4LKC4LKh4LOB4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIG06ICfgspLgsoLgsqbgs4Eg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIGg6ICfgspLgsoLgsqbgs4Eg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgICAgIGQ6ICfgspLgsoLgsqbgs4Eg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIE06ICfgspLgsoLgsqbgs4Eg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHk6ICfgspLgsoLgsqbgs4Eg4LK14LKw4LON4LK3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4LK14LKw4LON4LK3JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Czp+CzqOCzqeCzquCzq+CzrOCzreCzruCzr+Czpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CysOCyvuCypOCzjeCysOCyv3zgsqzgs4bgsrPgsr/gspfgs43gspfgs4Z84LKu4LKn4LON4LKv4LK+4LK54LON4LKofOCyuOCyguCynOCzhi8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CysOCyvuCypOCzjeCysOCyvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+CzhicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsq7gsqfgs43gsq/gsr7gsrngs43gsqgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyuOCyguCynOCzhicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrDgsr7gsqTgs43gsrDgsr8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrjgsoLgspzgs4YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgsqjgs4bgs5UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgsqjgs4bgs5UnO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS29yZWFuIFtrb11cbi8vISBhdXRob3IgOiBLeXVuZ3dvb2ssIFBhcmsgOiBodHRwczovL2dpdGh1Yi5jb20va3l1bmd3MDBrXG4vLyEgYXV0aG9yIDogSmVlZXl1bCBMZWUgPGplZWV5dWxAZ21haWwuY29tPlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGtvID0gbW9tZW50LmRlZmluZUxvY2FsZSgna28nLCB7XG4gICAgICAgIG1vbnRoczogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+ydvOyalOydvF/sm5TsmpTsnbxf7ZmU7JqU7J28X+yImOyalOydvF/rqqnsmpTsnbxf6riI7JqU7J28X+2GoOyalOydvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+ydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMOiAnWVlZWeuFhCBNTU1NIETsnbwnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaDptbScsXG4gICAgICAgICAgICBsOiAnWVlZWS5NTS5ERC4nLFxuICAgICAgICAgICAgbGw6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBsbGw6ICdZWVlZ64WEIE1NTU0gROydvCBBIGg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ1lZWVnrhYQgTU1NTSBE7J28IGRkZGQgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICfsmKTripggTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ+uCtOydvCBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ+yWtOygnCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ+yngOuCnOyjvCBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg7ZuEJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDsoIQnLFxuICAgICAgICAgICAgczogJ+uqhyDstIgnLFxuICAgICAgICAgICAgc3M6ICclZOy0iCcsXG4gICAgICAgICAgICBtOiAnMeu2hCcsXG4gICAgICAgICAgICBtbTogJyVk67aEJyxcbiAgICAgICAgICAgIGg6ICftlZwg7Iuc6rCEJyxcbiAgICAgICAgICAgIGhoOiAnJWTsi5zqsIQnLFxuICAgICAgICAgICAgZDogJ+2VmOujqCcsXG4gICAgICAgICAgICBkZDogJyVk7J28JyxcbiAgICAgICAgICAgIE06ICftlZwg64usJyxcbiAgICAgICAgICAgIE1NOiAnJWTri6wnLFxuICAgICAgICAgICAgeTogJ+ydvCDrhYQnLFxuICAgICAgICAgICAgeXk6ICclZOuFhCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjsnbx87JuUfOyjvCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfsnbwnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+yblCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7KO8JztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv7Jik7KCEfOyYpO2bhC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuID09PSAn7Jik7ZuEJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzVXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VyIDwgMTIgPyAn7Jik7KCEJyA6ICfsmKTtm4QnO1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IEt1cmRpc2ggW2t1XVxuLy8hIGF1dGhvciA6IFNoYWhyYW0gTWViYXNoYXIgOiBodHRwczovL2dpdGh1Yi5jb20vU2hhaHJhbU1lYmFzaGFyXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ9mhJyxcbiAgICAgICAgICAgIDI6ICfZoicsXG4gICAgICAgICAgICAzOiAn2aMnLFxuICAgICAgICAgICAgNDogJ9mkJyxcbiAgICAgICAgICAgIDU6ICfZpScsXG4gICAgICAgICAgICA2OiAn2aYnLFxuICAgICAgICAgICAgNzogJ9mnJyxcbiAgICAgICAgICAgIDg6ICfZqCcsXG4gICAgICAgICAgICA5OiAn2aknLFxuICAgICAgICAgICAgMDogJ9mgJyxcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAgICAgJ9mgJzogJzAnLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHMgPSBbXG4gICAgICAgICAgICAn2qnYp9mG2YjZhtuMINiv2YjZiNuV2YUnLFxuICAgICAgICAgICAgJ9i02YjYqNin2KonLFxuICAgICAgICAgICAgJ9im2KfYstin2LEnLFxuICAgICAgICAgICAgJ9mG24zYs9in2YYnLFxuICAgICAgICAgICAgJ9im2KfbjNin2LEnLFxuICAgICAgICAgICAgJ9it2YjYstuV24zYsdin2YYnLFxuICAgICAgICAgICAgJ9iq25XZhdmF2YjYsicsXG4gICAgICAgICAgICAn2KbYp9ioJyxcbiAgICAgICAgICAgICfYptuV24zZhNmI2YjZhCcsXG4gICAgICAgICAgICAn2KrYtNix24zZhtuMINuM25XZg9uV2YUnLFxuICAgICAgICAgICAgJ9iq2LTYsduM2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgICAgICfZg9in2YbZiNmG24wg24zbldqp25XZhScsXG4gICAgICAgIF07XG5cbiAgICB2YXIga3UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrdScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiAn24zZh+KAjNmD2LTZh+KAjNmF2YXZh+KAjF/Yr9mI2YjYtNmH4oCM2YXZhdmH4oCMX9iz247YtNmH4oCM2YXZhdmH4oCMX9qG2YjYp9ix2LTZh+KAjNmF2YXZh+KAjF/ZvtuO2YbYrNi02YfigIzZhdmF2YfigIxf2YfZh+KAjNuM2YbbjF/YtNmH4oCM2YXZhdmH4oCMJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn24zZh+KAjNmD2LTZh+KAjNmFX9iv2YjZiNi02YfigIzZhV/Ys9uO2LTZh+KAjNmFX9qG2YjYp9ix2LTZh+KAjNmFX9m+247Zhtis2LTZh+KAjNmFX9mH2YfigIzbjNmG24xf2LTZh+KAjNmF2YXZh+KAjCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfbjF/Yr1/Ys1/ahl/Zvl/Zh1/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YptuO2YjYp9ix2YfigIx82KjZh+KAjNuM2KfZhtuMLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL9im247ZiNin2LHZh+KAjC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNmH4oCM24zYp9mG24wnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9im247ZiNin2LHZh+KAjCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9im2YfigIzZhdix24Yg2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2KjZh+KAjNuM2KfZhtuMINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9mD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9iv2YjbjtmG244g2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YTZh+KAjCAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMnLFxuICAgICAgICAgICAgczogJ9qG2YfigIzZhtivINqG2LHZg9mH4oCM24zZh+KAjNmDJyxcbiAgICAgICAgICAgIHNzOiAn2obYsdmD2YfigIwgJWQnLFxuICAgICAgICAgICAgbTogJ9uM2YfigIzZgyDYrtmI2YTZh+KAjNmDJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K7ZiNmE2YfigIzZgycsXG4gICAgICAgICAgICBoOiAn24zZh+KAjNmDINmD2KfYqtqY2YXbjtixJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgZDogJ9uM2YfigIzZgyDalduG2pgnLFxuICAgICAgICAgICAgZGQ6ICclZCDalduG2pgnLFxuICAgICAgICAgICAgTTogJ9uM2YfigIzZgyDZhdin2YbarycsXG4gICAgICAgICAgICBNTTogJyVkINmF2KfZhtqvJyxcbiAgICAgICAgICAgIHk6ICfbjNmH4oCM2YMg2LPYp9q1JyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9q1JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4ga3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS3lyZ3l6IFtreV1cbi8vISBhdXRob3IgOiBDaHluZ3l6IEFyeXN0YW4gdXVsdSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jaHluZ3l6XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YfSrycsXG4gICAgICAgIDE6ICct0YfQuCcsXG4gICAgICAgIDI6ICct0YfQuCcsXG4gICAgICAgIDM6ICct0YfSrycsXG4gICAgICAgIDQ6ICct0YfSrycsXG4gICAgICAgIDU6ICct0YfQuCcsXG4gICAgICAgIDY6ICct0YfRiycsXG4gICAgICAgIDc6ICct0YfQuCcsXG4gICAgICAgIDg6ICct0YfQuCcsXG4gICAgICAgIDk6ICct0YfRgycsXG4gICAgICAgIDEwOiAnLdGH0YMnLFxuICAgICAgICAyMDogJy3Rh9GLJyxcbiAgICAgICAgMzA6ICct0YfRgycsXG4gICAgICAgIDQwOiAnLdGH0YsnLFxuICAgICAgICA1MDogJy3Rh9KvJyxcbiAgICAgICAgNjA6ICct0YfRiycsXG4gICAgICAgIDcwOiAnLdGH0LgnLFxuICAgICAgICA4MDogJy3Rh9C4JyxcbiAgICAgICAgOTA6ICct0YfRgycsXG4gICAgICAgIDEwMDogJy3Rh9KvJyxcbiAgICB9O1xuXG4gICAgdmFyIGt5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3knLCB7XG4gICAgICAgIG1vbnRoczogJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRj9C90LJf0YTQtdCyX9C80LDRgNGCX9Cw0L/RgF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfQltC10LrRiNC10LzQsdC4X9CU0q/QudGI06nQvNCx0q9f0KjQtdC50YjQtdC80LHQuF/QqNCw0YDRiNC10LzQsdC4X9CR0LXQudGI0LXQvNCx0Lhf0JbRg9C80LBf0JjRiNC10LzQsdC4Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0JbQtdC6X9CU0q/QuV/QqNC10Llf0KjQsNGAX9CR0LXQuV/QltGD0Lxf0JjRiNC1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9CW0Lpf0JTQuV/QqNC5X9Co0YBf0JHQuV/QltC8X9CY0YgnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JHSr9Cz0q/QvSDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQrdGA0YLQtdKjINGB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Ca0LXRh9GN0Y0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9Oo0YLQutOp0L0g0LDQv9GC0LDQvdGL0L1dIGRkZGQgW9C60q/QvdKvXSBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg0LjRh9C40L3QtNC1JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQvNGD0YDRg9C9JyxcbiAgICAgICAgICAgIHM6ICfQsdC40YDQvdC10YfQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6ICclZCDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbTogJ9Cx0LjRgCDQvNKv0L3TqdGCJyxcbiAgICAgICAgICAgIG1tOiAnJWQg0LzSr9C906nRgicsXG4gICAgICAgICAgICBoOiAn0LHQuNGAINGB0LDQsNGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQsNCw0YInLFxuICAgICAgICAgICAgZDogJ9Cx0LjRgCDQutKv0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTTogJ9Cx0LjRgCDQsNC5JyxcbiAgICAgICAgICAgIE1NOiAnJWQg0LDQuScsXG4gICAgICAgICAgICB5OiAn0LHQuNGAINC20YvQuycsXG4gICAgICAgICAgICB5eTogJyVkINC20YvQuycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YfQuHzRh9GLfNGH0q980YfRgykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBreTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMdXhlbWJvdXJnaXNoIFtsYl1cbi8vISBhdXRob3IgOiBtd2VpbWVyc2tpcmNoIDogaHR0cHM6Ly9naXRodWIuY29tL213ZWltZXJza2lyY2hcbi8vISBhdXRob3IgOiBEYXZpZCBSYWlzb24gOiBodHRwczovL2dpdGh1Yi5jb20va3dpc2F0elxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIG06IFsnZW5nIE1pbnV0dCcsICdlbmdlciBNaW51dHQnXSxcbiAgICAgICAgICAgIGg6IFsnZW5nIFN0b25uJywgJ2VuZ2VyIFN0b25uJ10sXG4gICAgICAgICAgICBkOiBbJ2VlbiBEYWcnLCAnZW5nZW0gRGFnJ10sXG4gICAgICAgICAgICBNOiBbJ2VlIE1vdW50JywgJ2VuZ2VtIE1vdW50J10sXG4gICAgICAgICAgICB5OiBbJ2VlIEpvZXInLCAnZW5nZW0gSm9lciddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NGdXR1cmVUaW1lKHN0cmluZykge1xuICAgICAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICAgICAgaWYgKGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2EgJyArIHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FuICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXN0VGltZShzdHJpbmcpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YoJyAnKSk7XG4gICAgICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICd2aXJ1ICcgKyBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd2aXJ1biAnICsgc3RyaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHdvcmQgYmVmb3JlIHRoZSBnaXZlbiBudW1iZXIgbG9zZXMgdGhlICctbicgZW5kaW5nLlxuICAgICAqIGUuZy4gJ2FuIDEwIERlZWcnIGJ1dCAnYSA1IERlZWcnXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbnVtYmVyIHtpbnRlZ2VyfVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpIHtcbiAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyLCAxMCk7XG4gICAgICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIE51bWJlciAtLT4gYWx3YXlzIHRydWVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwKSB7XG4gICAgICAgICAgICAvLyBPbmx5IDEgZGlnaXRcbiAgICAgICAgICAgIGlmICg0IDw9IG51bWJlciAmJiBudW1iZXIgPD0gNykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMCkge1xuICAgICAgICAgICAgLy8gMiBkaWdpdHNcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBmaXJzdERpZ2l0ID0gbnVtYmVyIC8gMTA7XG4gICAgICAgICAgICBpZiAobGFzdERpZ2l0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihmaXJzdERpZ2l0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobGFzdERpZ2l0KTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDAwMCkge1xuICAgICAgICAgICAgLy8gMyBvciA0IGRpZ2l0cyAtLT4gcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3QgZGlnaXRcbiAgICAgICAgICAgIHdoaWxlIChudW1iZXIgPj0gMTApIHtcbiAgICAgICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFueXRoaW5nIGxhcmdlciB0aGFuIDQgZGlnaXRzOiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBuLTMgZGlnaXRzXG4gICAgICAgICAgICBudW1iZXIgPSBudW1iZXIgLyAxMDAwO1xuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxiID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbGInLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZWJydWFyX03DpGVyel9BYnLDq2xsX01lZV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbi5fRmVici5fTXJ6Ll9BYnIuX01lZV9KdW4uX0p1bC5fQXVnLl9TZXB0Ll9Pa3QuX05vdi5fRGV6Licuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25uZGVnX03DqWluZGVnX0TDq25zY2hkZWdfTcOrdHR3b2NoX0Rvbm5lc2NoZGVnX0ZyZWlkZWdfU2Ftc2NoZGVnJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX03DqS5fRMOrLl9Nw6suX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX03DqV9Ew6tfTcOrX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0gW0F1ZXJdJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MgW0F1ZXJdJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGF1dCB1bV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTXVlciB1bV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tHw6tzY2h0ZXIgdW1dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGRhdGUgc3RyaW5nIGZvciAnRMOrbnNjaGRlZycgKFR1ZXNkYXkpIGFuZCAnRG9ubmVzY2hkZWcnIChUaHVyc2RheSkgZHVlIHRvIHBob25vbG9naWNhbCBydWxlXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZW5dIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiBwcm9jZXNzRnV0dXJlVGltZSxcbiAgICAgICAgICAgIHBhc3Q6IHByb2Nlc3NQYXN0VGltZSxcbiAgICAgICAgICAgIHM6ICdlIHB1ZXIgU2Vrb25uZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBTZWtvbm5lbicsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06ICclZCBNaW51dHRlbicsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6ICclZCBTdG9ubmVuJyxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogJyVkIERlZWcnLFxuICAgICAgICAgICAgTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NOiAnJWQgTcOpaW50JyxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogJyVkIEpvZXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IExhbyBbbG9dXG4vLyEgYXV0aG9yIDogUnlhbiBIYXJ0IDogaHR0cHM6Ly9naXRodWIuY29tL3J5YW5oYXJ0MlxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIGxvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbG8nLCB7XG4gICAgICAgIG1vbnRoczogJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+C6reC6suC6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgupdf4LqIX+C6reC6hF/gup5f4Lqe4LqrX+C6quC6gV/guqonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAn4Lqn4Lqx4LqZZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gupXguq3gupngu4Dguorgurvgu4ngurJ84LqV4Lqt4LqZ4LuB4Lql4LqHLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vguqHgurfgu4ngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4Lqh4Lq34LuJ4Lqt4Lq34LuI4LqZ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vguqfgurHgupldZGRkZFvgu5zgu4ngurLgu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4Lqh4Lq34LuJ4Lqn4Lqy4LqZ4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vguqfgurHgupldZGRkZFvgu4HguqXgu4nguqfgupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn4Lqt4Lq14LqBICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+C6nOC7iOC6suC6meC6oeC6sicsXG4gICAgICAgICAgICBzOiAn4Lqa4LuN4LuI4LuA4LqX4Lq74LuI4Lqy4LuD4LqU4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIG06ICcxIOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBtbTogJyVkIOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBoOiAnMSDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgaGg6ICclZCDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgZDogJzEg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIE06ICcxIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgICAgICBNTTogJyVkIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgICAgICB5OiAnMSDgupvgurUnLFxuICAgICAgICAgICAgeXk6ICclZCDgupvgurUnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvKOC6l+C6teC7iClcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqX4Lq14LuIJyArIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBsbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBMaXRodWFuaWFuIFtsdF1cbi8vISBhdXRob3IgOiBNaW5kYXVnYXMgTW96xatyYXMgOiBodHRwczovL2dpdGh1Yi5jb20vbW1venVyYXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1bml0cyA9IHtcbiAgICAgICAgc3M6ICdzZWt1bmTEl19zZWt1bmTFvmnFs19zZWt1bmRlcycsXG4gICAgICAgIG06ICdtaW51dMSXX21pbnV0xJdzX21pbnV0xJknLFxuICAgICAgICBtbTogJ21pbnV0xJdzX21pbnXEjWnFs19taW51dGVzJyxcbiAgICAgICAgaDogJ3ZhbGFuZGFfdmFsYW5kb3NfdmFsYW5kxIUnLFxuICAgICAgICBoaDogJ3ZhbGFuZG9zX3ZhbGFuZMWzX3ZhbGFuZGFzJyxcbiAgICAgICAgZDogJ2RpZW5hX2RpZW5vc19kaWVuxIUnLFxuICAgICAgICBkZDogJ2RpZW5vc19kaWVuxbNfZGllbmFzJyxcbiAgICAgICAgTTogJ23El251b19txJduZXNpb19txJduZXPErycsXG4gICAgICAgIE1NOiAnbcSXbmVzaWFpX23El25lc2nFs19txJduZXNpdXMnLFxuICAgICAgICB5OiAnbWV0YWlfbWV0xbNfbWV0dXMnLFxuICAgICAgICB5eTogJ21ldGFpX21ldMWzX21ldHVzJyxcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVNlY29uZHMobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2tlbGlvcyBzZWt1bmTEl3MnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2tlbGnFsyBzZWt1bmTFvmnFsycgOiAna2VsaWFzIHNla3VuZGVzJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXhcbiAgICAgICAgICAgID8gZm9ybXMoa2V5KVswXVxuICAgICAgICAgICAgOiBpc0Z1dHVyZVxuICAgICAgICAgICAgPyBmb3JtcyhrZXkpWzFdXG4gICAgICAgICAgICA6IGZvcm1zKGtleSlbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwZWNpYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMCB8fCAobnVtYmVyID4gMTAgJiYgbnVtYmVyIDwgMjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuaXRzW2tleV0uc3BsaXQoJ18nKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHJlc3VsdCArIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5WzBdLCBpc0Z1dHVyZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgZm9ybXMoa2V5KVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChzcGVjaWFsKG51bWJlcikgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGx0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbHQnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2F1c2lvX3Zhc2FyaW9fa292b19iYWxhbmTFvmlvX2dlZ3XFvsSXc19iaXLFvmVsaW9fbGllcG9zX3J1Z3BqxavEjWlvX3J1Z3PEl2pvX3NwYWxpb19sYXBrcmnEjWlvX2dydW9kxb5pbycuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ3NhdXNpc192YXNhcmlzX2tvdmFzX2JhbGFuZGlzX2dlZ3XFvsSXX2JpcsW+ZWxpc19saWVwYV9ydWdwasWrdGlzX3J1Z3PEl2ppc19zcGFsaXNfbGFwa3JpdGlzX2dydW9kaXMnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NP3xNTU1NPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrRFtvRF0/LyxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdzYXVfdmFzX2tvdl9iYWxfZ2VnX2Jpcl9saWVfcmdwX3Jnc19zcGFfbGFwX2dyZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3Nla21hZGllbsSvX3Bpcm1hZGllbsSvX2FudHJhZGllbsSvX3RyZcSNaWFkaWVuxK9fa2V0dmlydGFkaWVuxK9fcGVua3RhZGllbsSvX8WhZcWhdGFkaWVuxK8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzZWttYWRpZW5pc19waXJtYWRpZW5pc19hbnRyYWRpZW5pc190cmXEjWlhZGllbmlzX2tldHZpcnRhZGllbmlzX3Blbmt0YWRpZW5pc1/FoWXFoXRhZGllbmlzJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL2RkZGQgSEg6bW0vLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU2VrX1Bpcl9BbnRfVHJlX0tldF9QZW5fxaBlxaEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU19QX0FfVF9LX1BuX8WgJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIGRkZGQsIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBsOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBsbDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgICAgICBsbGw6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGQsIEhIOm1tIFt2YWwuXScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW8WgaWFuZGllbl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tSeXRval0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbVmFrYXJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW1ByYcSXanVzxK9dIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdwbyAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJpZcWhICVzJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZVNlY29uZHMsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tb2ppLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICctb2ppJztcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGx0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IExhdHZpYW4gW2x2XVxuLy8hIGF1dGhvciA6IEtyaXN0YXBzIEthcmxzb25zIDogaHR0cHM6Ly9naXRodWIuY29tL3NrYWtyaVxuLy8hIGF1dGhvciA6IErEgW5pcyBFbG1lcmlzIDogaHR0cHM6Ly9naXRodWIuY29tL0phbmlzRVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICBzczogJ3Nla3VuZGVzX3Nla3VuZMSTbV9zZWt1bmRlX3Nla3VuZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICBtOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1tOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGg6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICAgICBoaDogJ3N0dW5kYXNfc3R1bmTEgW1fc3R1bmRhX3N0dW5kYXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGQ6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGRkOiAnZGllbmFzX2RpZW7EgW1fZGllbmFfZGllbmFzJy5zcGxpdCgnXycpLFxuICAgICAgICBNOiAnbcSTbmXFoWFfbcSTbmXFoWllbV9txJNuZXNpc19txJNuZcWhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgTU06ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICAgICB5OiAnZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB5eTogJ2dhZGFfZ2FkaWVtX2dhZHNfZ2FkaScuc3BsaXQoJ18nKSxcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB3aXRob3V0U3VmZml4IGJvb2xlYW4gdHJ1ZSA9IGEgbGVuZ3RoIG9mIHRpbWU7IGZhbHNlID0gYmVmb3JlL2FmdGVyIGEgcGVyaW9kIG9mIHRpbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1zLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3RlXCIsIFwiMyBtaW7Fq3Rlc1wiLlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxICYmIG51bWJlciAlIDEwMCAhPT0gMTEgPyBmb3Jtc1syXSA6IGZvcm1zWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVzXCIgYXMgaW4gXCJwxJNjIDIxIG1pbsWrdGVzXCIuXG4gICAgICAgICAgICAvLyBFLmcuIFwiMyBtaW7Fq3TEk21cIiBhcyBpbiBcInDEk2MgMyBtaW7Fq3TEk21cIi5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiBmb3Jtc1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdkYcW+YXMgc2VrdW5kZXMnIDogJ2Rhxb7EgW0gc2VrdW5kxJNtJztcbiAgICB9XG5cbiAgICB2YXIgbHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudsSBcmlzX2ZlYnJ1xIFyaXNfbWFydHNfYXByxKtsaXNfbWFpanNfasWrbmlqc19qxatsaWpzX2F1Z3VzdHNfc2VwdGVtYnJpc19va3RvYnJpc19ub3ZlbWJyaXNfZGVjZW1icmlzJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWlfasWrbl9qxatsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnc3bEk3RkaWVuYV9waXJtZGllbmFfb3RyZGllbmFfdHJlxaFkaWVuYV9jZXR1cnRkaWVuYV9waWVrdGRpZW5hX3Nlc3RkaWVuYScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVkuJyxcbiAgICAgICAgICAgIExMOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0nLFxuICAgICAgICAgICAgTExMOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTSwgZGRkZCwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vFoG9kaWVuIHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1LEq3QgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbVmFrYXIgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW1BhZ8SBanXFocSBXSBkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdwxJNjICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwaXJtcyAlcycsXG4gICAgICAgICAgICBzOiByZWxhdGl2ZVNlY29uZHMsXG4gICAgICAgICAgICBzczogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgaGg6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBkZDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbHY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogTW9udGVuZWdyaW4gW21lXVxuLy8hIGF1dGhvciA6IE1pb2RyYWcgTmlrYcSNIDxtaW9kcmFnQHJlc3RhcnRpdC5tZT4gOiBodHRwczovL2dpdGh1Yi5jb20vbWlvZHJhZ25pa2FjXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHtcbiAgICAgICAgICAgIC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmQnLCAnc2VrdW5kYScsICdzZWt1bmRpJ10sXG4gICAgICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0YScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtamVzZWMnLCAnbWplc2VjYScsICdtamVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddLFxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxXG4gICAgICAgICAgICAgICAgPyB3b3JkS2V5WzBdXG4gICAgICAgICAgICAgICAgOiBudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNFxuICAgICAgICAgICAgICAgID8gd29yZEtleVsxXVxuICAgICAgICAgICAgICAgIDogd29yZEtleVsyXTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBtZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21lJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5fanVsX2F2Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JpLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3NqdXRyYSB1XSBMVCcsXG5cbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGplbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRqZWxqa2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyaWplZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzOiAnbmVrb2xpa28gc2VrdW5kaScsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJ2RhbicsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hb3JpIFttaV1cbi8vISBhdXRob3IgOiBKb2huIENvcnJpZ2FuIDxyb2JiaWVjbG9zZXRAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb2huaWRlYWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21pJywge1xuICAgICAgICBtb250aHM6ICdLb2hpLXTEgXRlX0h1aS10YW5ndXJ1X1BvdXTFqy10ZS1yYW5naV9QYWVuZ2Etd2jEgXdoxIFfSGFyYXR1YV9QaXBpcmlfSMWNbmdvaW5nb2lfSGVyZS10dXJpLWvFjWvEgV9NYWh1cnVfV2hpcmluZ2EtxIEtbnVrdV9XaGlyaW5nYS3EgS1yYW5naV9IYWtpaGVhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0tvaGlfSHVpX1BvdV9QYWVfSGFyYV9QaXBpX0jFjW5nb2lfSGVyZV9NYWh1X1doaS1udV9XaGktcmFfSGFraScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsMn0vaSxcbiAgICAgICAgd2Vla2RheXM6ICdSxIF0YXB1X01hbmVfVMWrcmVpX1dlbmVyZWlfVMSBaXRlX1BhcmFpcmVfSMSBdGFyZWknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdUYV9NYV9UxatfV2VfVMSBaV9QYV9IxIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtpXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW2ldIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSB0ZWllIG1haGFuYSwgaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1thcG9wbyBpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaW5hbmFoaSBpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3doYWthbXV0dW5nYSBpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2kgcm90byBpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpIG11YScsXG4gICAgICAgICAgICBzOiAndGUgaMSTa29uYSBydWFydWEnLFxuICAgICAgICAgICAgc3M6ICclZCBoxJNrb25hJyxcbiAgICAgICAgICAgIG06ICdoZSBtZW5ldGknLFxuICAgICAgICAgICAgbW06ICclZCBtZW5ldGknLFxuICAgICAgICAgICAgaDogJ3RlIGhhb3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaGFvcmEnLFxuICAgICAgICAgICAgZDogJ2hlIHJhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgcmEnLFxuICAgICAgICAgICAgTTogJ2hlIG1hcmFtYScsXG4gICAgICAgICAgICBNTTogJyVkIG1hcmFtYScsXG4gICAgICAgICAgICB5OiAnaGUgdGF1JyxcbiAgICAgICAgICAgIHl5OiAnJWQgdGF1JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWNlZG9uaWFuIFtta11cbi8vISBhdXRob3IgOiBCb3Jpc2xhdiBNaWNrb3YgOiBodHRwczovL2dpdGh1Yi5jb20vQjBrMFxuLy8hIGF1dGhvciA6IFNhc2hrbyBUb2Rvcm92IDogaHR0cHM6Ly9naXRodWIuY29tL2JreWNlaFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1rID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWsnLCB7XG4gICAgICAgIG1vbnRoczogJ9GY0LDQvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C90Lhf0ZjRg9C70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0ZjQsNC9X9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn0L3QtdC00LXQu9CwX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0L7Qul/Qv9C10YLQvtC6X9GB0LDQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtF/Qv9C+0L1f0LLRgtC+X9GB0YDQtV/Rh9C10YJf0L/QtdGCX9GB0LDQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvWVf0L9vX9Cy0YJf0YHRgF/Rh9C1X9C/0LVf0YFhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQlNC10L3QtdGBINCy0L5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0KPRgtGA0LUg0LLQvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0JLQvl0gZGRkZCBb0LLQvl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwINCy0L5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtCw0YLQsF0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQmNC30LzQuNC90LDRgtC40L7Rgl0gZGRkZCBb0LLQvl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9C/0YDQtdC0ICVzJyxcbiAgICAgICAgICAgIHM6ICfQvdC10LrQvtC70LrRgyDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzczogJyVkINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIG06ICfQtdC00L3QsCDQvNC40L3Rg9GC0LAnLFxuICAgICAgICAgICAgbW06ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICAgICAgaDogJ9C10LTQtdC9INGH0LDRgScsXG4gICAgICAgICAgICBoaDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgICAgIGQ6ICfQtdC00LXQvSDQtNC10L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQtNC10L3QsCcsXG4gICAgICAgICAgICBNOiAn0LXQtNC10L0g0LzQtdGB0LXRhicsXG4gICAgICAgICAgICBNTTogJyVkINC80LXRgdC10YbQuCcsXG4gICAgICAgICAgICB5OiAn0LXQtNC90LAg0LPQvtC00LjQvdCwJyxcbiAgICAgICAgICAgIHl5OiAnJWQg0LPQvtC00LjQvdC4JyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgbGFzdDJEaWdpdHMgPSBudW1iZXIgJSAxMDA7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQsic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LXQvSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3QyRGlnaXRzID4gMTAgJiYgbGFzdDJEaWdpdHMgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QstC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YDQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gNyB8fCBsYXN0RGlnaXQgPT09IDgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QvNC4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheWFsYW0gW21sXVxuLy8hIGF1dGhvciA6IEZsb3lkIFBpbmsgOiBodHRwczovL2dpdGh1Yi5jb20vZmxveWRwaW5rXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbCcsIHtcbiAgICAgICAgbW9udGhzOiAn4LSc4LSo4LWB4LS14LSw4LS/X+C0q+C1huC0rOC1jeC0sOC1geC0teC0sOC0v1/gtK7gtL7gtbzgtJrgtY3gtJrgtY1f4LSP4LSq4LWN4LSw4LS/4LW9X+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWIX+C0k+C0l+C0uOC1jeC0seC1jeC0seC1jV/gtLjgtYbgtKrgtY3gtLHgtY3gtLHgtILgtKzgtbxf4LSS4LSV4LWN4LSf4LWL4LSs4LW8X+C0qOC0teC0guC0rOC1vF/gtKHgtL/gtLjgtILgtKzgtbwnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4LSc4LSo4LWBLl/gtKvgtYbgtKzgtY3gtLDgtYEuX+C0ruC0vuC1vC5f4LSP4LSq4LWN4LSw4LS/Ll/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iC5f4LST4LSXLl/gtLjgtYbgtKrgtY3gtLHgtY3gtLEuX+C0kuC0leC1jeC0n+C1iy5f4LSo4LS14LSCLl/gtKHgtL/gtLjgtIIuJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+C0nuC0vuC0r+C0seC0vuC0tOC1jeC0ml/gtKTgtL/gtJngtY3gtJXgtLPgtL7gtLTgtY3gtJpf4LSa4LWK4LS14LWN4LS14LS+4LS04LWN4LSaX+C0rOC1geC0p+C0qOC0vuC0tOC1jeC0ml/gtLXgtY3gtK/gtL7gtLTgtL7gtLTgtY3gtJpf4LS14LWG4LSz4LWN4LSz4LS/4LSv4LS+4LS04LWN4LSaX+C0tuC0qOC0v+C0r+C0vuC0tOC1jeC0micuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+C0nuC0vuC0r+C1vF/gtKTgtL/gtJngtY3gtJXgtb5f4LSa4LWK4LS14LWN4LS1X+C0rOC1geC0p+C1u1/gtLXgtY3gtK/gtL7gtLTgtIJf4LS14LWG4LSz4LWN4LSz4LS/X+C0tuC0qOC0vycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgtJ7gtL5f4LSk4LS/X+C0muC1il/gtKzgtYFf4LS14LWN4LSv4LS+X+C0teC1hl/gtLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyAt4LSo4LWBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgtIfgtKjgtY3gtKjgtY1dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4LSo4LS+4LSz4LWGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LSH4LSo4LWN4LSo4LSy4LWGXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgtJXgtLTgtL/gtJ7gtY3gtJ5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4LSV4LS04LS/4LSe4LWN4LSe4LWNJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgtK7gtYHgtbvgtKrgtY0nLFxuICAgICAgICAgICAgczogJ+C0heC1veC0qiDgtKjgtL/gtK7gtL/gtLfgtJngtY3gtJngtb4nLFxuICAgICAgICAgICAgc3M6ICclZCDgtLjgtYbgtJXgtY3gtJXgtbvgtKHgtY0nLFxuICAgICAgICAgICAgbTogJ+C0kuC0sOC1gSDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgbW06ICclZCDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgaDogJ+C0kuC0sOC1gSDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbwnLFxuICAgICAgICAgICAgaGg6ICclZCDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbwnLFxuICAgICAgICAgICAgZDogJ+C0kuC0sOC1gSDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgZGQ6ICclZCDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgTTogJ+C0kuC0sOC1gSDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgTU06ICclZCDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgeTogJ+C0kuC0sOC1gSDgtLXgtbzgtLfgtIInLFxuICAgICAgICAgICAgeXk6ICclZCDgtLXgtbzgtLfgtIInLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LSw4LS+4LSk4LWN4LSw4LS/fOC0sOC0vuC0teC0v+C0suC1hnzgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNfOC0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gnzgtLDgtL7gtKTgtY3gtLDgtL8vaSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+C0sOC0vuC0pOC1jeC0sOC0vycgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0teC0v+C0suC1hic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1vbmdvbGlhbiBbbW5dXG4vLyEgYXV0aG9yIDogSmF2a2hsYW50dWdzIE55YW1kb3JqIDogaHR0cHM6Ly9naXRodWIuY29tL2phdmtoYWFuajdcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LQnIDogJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LTRi9C9JztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGB0LXQutGD0L3QtCcgOiAnINGB0LXQutGD0L3QtNGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0LzQuNC90YPRgicgOiAnINC80LjQvdGD0YLRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGG0LDQsycgOiAnINGG0LDQs9C40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDTqdC006nRgCcgOiAnINOp0LTRgNC40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRgdCw0YAnIDogJyDRgdCw0YDRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINC20LjQuycgOiAnINC20LjQu9C40LnQvScpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbW4nLCB7XG4gICAgICAgIG1vbnRoczogJ9Cd0Y3Qs9C00q/Qs9GN0Y3RgCDRgdCw0YBf0KXQvtGR0YDQtNGD0LPQsNCw0YAg0YHQsNGAX9CT0YPRgNCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CU06nRgNOp0LLQtNKv0LPRjdGN0YAg0YHQsNGAX9Ci0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JfRg9GA0LPQsNC00YPQs9Cw0LDRgCDRgdCw0YBf0JTQvtC70LTRg9Cz0LDQsNGAINGB0LDRgF/QndCw0LnQvNC00YPQs9Cw0LDRgCDRgdCw0YBf0JXRgdC00q/Qs9GN0Y3RgCDRgdCw0YBf0JDRgNCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CQ0YDQstCw0L0g0L3RjdCz0LTSr9Cz0Y3RjdGAINGB0LDRgF/QkNGA0LLQsNC9INGF0L7RkdGA0LTRg9Cz0LDQsNGAINGB0LDRgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcxINGB0LDRgF8yINGB0LDRgF8zINGB0LDRgF80INGB0LDRgF81INGB0LDRgF82INGB0LDRgF83INGB0LDRgF84INGB0LDRgF85INGB0LDRgF8xMCDRgdCw0YBfMTEg0YHQsNGAXzEyINGB0LDRgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfQndGP0Lxf0JTQsNCy0LDQsF/QnNGP0LPQvNCw0YBf0JvRhdCw0LPQstCwX9Cf0q/RgNGN0LJf0JHQsNCw0YHQsNC9X9CR0Y/QvNCx0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQndGP0Lxf0JTQsNCyX9Cc0Y/Qs1/Qm9GF0LBf0J/Sr9GAX9CR0LDQsF/QkdGP0LwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0J3Rj1/QlNCwX9Cc0Y9f0JvRhV/Qn9KvX9CR0LBf0JHRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQnLFxuICAgICAgICAgICAgTExMOiAnWVlZWSDQvtC90YsgTU1NTdGL0L0gRCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgWVlZWSDQvtC90YsgTU1NTdGL0L0gRCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/SrtOofNKu0KUvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfSrtClJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku06gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku0KUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vTqNC906nTqdC006nRgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQnNCw0YDQs9Cw0LDRiF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0JjRgNGN0YVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vTqNGH0LjQs9C006nRgF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb06jQvdCz06nRgNGB06nQvV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINC00LDRgNCw0LAnLFxuICAgICAgICAgICAgcGFzdDogJyVzINOp0LzQvdOpJyxcbiAgICAgICAgICAgIHM6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9INOp0LTTqdGALyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINOp0LTTqdGAJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1uO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hcmF0aGkgW21yXVxuLy8hIGF1dGhvciA6IEhhcnNoYWQgS2FsZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYWxlaHZcbi8vISBhdXRob3IgOiBWaXZlayBBdGhhbHllIDogaHR0cHM6Ly9naXRodWIuY29tL3ZuYXRoYWx5ZVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgpacnLFxuICAgICAgICAgICAgMjogJ+ClqCcsXG4gICAgICAgICAgICAzOiAn4KWpJyxcbiAgICAgICAgICAgIDQ6ICfgpaonLFxuICAgICAgICAgICAgNTogJ+ClqycsXG4gICAgICAgICAgICA2OiAn4KWsJyxcbiAgICAgICAgICAgIDc6ICfgpa0nLFxuICAgICAgICAgICAgODogJ+ClricsXG4gICAgICAgICAgICA5OiAn4KWvJyxcbiAgICAgICAgICAgIDA6ICfgpaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICAgICAn4KWmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lTXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSmJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KS44KWH4KSV4KSC4KSmJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSu4KS/4KSo4KS/4KSfJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSu4KS/4KSo4KS/4KSf4KWHJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSk4KS+4KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSk4KS+4KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSm4KS/4KS14KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS4JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KSu4KS54KS/4KSo4KS+JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KSu4KS54KS/4KSo4KWHJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICfgpI/gpJUg4KS14KSw4KWN4KS3JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJWQg4KS14KSw4KWN4KS34KWHJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpuCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkuOClh+CkleCkguCkpuCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkruCkv+CkqOCkv+Ckn+Ckvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+CkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpOCkvuCkuOCkvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkpOCkvuCkuOCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpuCkv+CkteCkuOCkvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuOCkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkruCkueCkv+CkqOCljeCkr+Ckvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOCljeCkr+CkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkteCksOCljeCkt+Ckvic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+CkvuCkgic7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgbXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcicsIHtcbiAgICAgICAgbW9udGhzOiAn4KSc4KS+4KSo4KWH4KS14KS+4KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCkvuCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSP4KSq4KWN4KSw4KS/4KSyX+CkruClh1/gpJzgpYLgpKhf4KSc4KWB4KSy4KWIX+CkkeCkl+CkuOCljeCkn1/gpLjgpKrgpY3gpJ/gpYfgpILgpKzgpLBf4KSR4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkteCljeCkueClh+CkguCkrOCksF/gpKHgpL/gpLjgpYfgpILgpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4KSc4KS+4KSo4KWHLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkmi5f4KSP4KSq4KWN4KSw4KS/Ll/gpK7gpYcuX+CknOClguCkqC5f4KSc4KWB4KSy4KWILl/gpJHgpJcuX+CkuOCkquCljeCkn+Clh+Ckgi5f4KSR4KSV4KWN4KSf4KWLLl/gpKjgpYvgpLXgpY3gpLngpYfgpIIuX+CkoeCkv+CkuOClh+Ckgi4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLPgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSw4KS14KS/X+CkuOCli+Ckrl/gpK7gpILgpJfgpLNf4KSs4KWB4KSnX+Ckl+ClgeCksOClgl/gpLbgpYHgpJXgpY3gpLBf4KS24KSo4KS/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3Mg4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KSG4KScXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CkieCkpuCljeCkr+Ckvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CkleCkvuCksl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4KSu4KS+4KSX4KWA4KSyXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4KSu4KSn4KWN4KSv4KWHJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+CkquClguCksOCljeCkteClgCcsXG4gICAgICAgICAgICBzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIE06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgeTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpKrgpLngpL7gpJ/gpYd84KS44KSV4KS+4KSz4KWAfOCkpuClgeCkquCkvuCksOClgHzgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYB84KSw4KS+4KSk4KWN4KSw4KWALyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSq4KS54KS+4KSf4KWHJyB8fCBtZXJpZGllbSA9PT0gJ+CkuOCkleCkvuCks+ClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpKbgpYHgpKrgpL7gpLDgpYAnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpY3gpLDgpYAnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA+PSAwICYmIGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKrgpLngpL7gpJ/gpYcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkleCkvuCks+ClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWB4KSq4KS+4KSw4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCljeCksOClgCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWxheSBbbXMtbXldXG4vLyEgbm90ZSA6IERFUFJFQ0FURUQsIHRoZSBjb3JyZWN0IG9uZSBpcyBbbXNdXG4vLyEgYXV0aG9yIDogV2VsZGFuIEphbWlsaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWxkYW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtc015ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMtbXknLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfT2dzX1NlcF9Pa3RfTm92X0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQWhfSXNfU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHRlbmdhaGFyaXxwZXRhbmd8bWFsYW0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAncGV0YW5nJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFsYW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgczogJ2JlYmVyYXBhIHNhYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIG06ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWluaXQnLFxuICAgICAgICAgICAgaDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQ6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE06ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YWh1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtc015O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE1hbGF5IFttc11cbi8vISBhdXRob3IgOiBXZWxkYW4gSmFtaWxpIDogaHR0cHM6Ly9naXRodWIuY29tL3dlbGRhblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1zID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfT2dzX1NlcF9Pa3RfTm92X0Rpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnQWhfSXNfU2xfUmJfS21fSm1fU2InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9wYWdpfHRlbmdhaGFyaXxwZXRhbmd8bWFsYW0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3RlbmdhaGFyaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAncGV0YW5nJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VsbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFsYW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgczogJ2JlYmVyYXBhIHNhYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIG06ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWluaXQnLFxuICAgICAgICAgICAgaDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQ6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQ6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE06ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeTogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXk6ICclZCB0YWh1bicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBtcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBNYWx0ZXNlIChNYWx0YSkgW210XVxuLy8hIGF1dGhvciA6IEFsZXNzYW5kcm8gTWFydWNjaWEgOiBodHRwczovL2dpdGh1Yi5jb20vYWxlc21hXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtdCcsIHtcbiAgICAgICAgbW9udGhzOiAnSmFubmFyX0ZyYXJfTWFyenVfQXByaWxfTWVqanVfxKB1bmp1X0x1bGp1X0F3d2lzc3VfU2V0dGVtYnJ1X090dHVicnVfTm92ZW1icnVfRGnEi2VtYnJ1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GcmFfTWFyX0Fwcl9NZWpfxKB1bl9MdWxfQXd3X1NldF9PdHRfTm92X0RpxIsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnSWwtxKZhZGRfSXQtVG5lam5fSXQtVGxpZXRhX0wtRXJiZ8SnYV9JbC3EpmFtaXNfSWwtxKBpbWfEp2FfSXMtU2lidCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ8SmYWRfVG5lX1RsaV9FcmJfxKZhbV/EoGltX1NpYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfEpmFfVG5fVGxfRXJfxKZhX8SgaV9TaScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJbGx1bSBmaWwtXUxUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbR8SnYWRhIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtmaWwtXUxUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWwtYmllcmHEpyBmaWwtXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbbGkgZ8SnYWRkYV0gW2ZpbC1dTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdm4oCZICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBpbHUnLFxuICAgICAgICAgICAgczogJ2Z0aXQgc2Vrb25kaScsXG4gICAgICAgICAgICBzczogJyVkIHNla29uZGknLFxuICAgICAgICAgICAgbTogJ21pbnV0YScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0aScsXG4gICAgICAgICAgICBoOiAnc2llZ8SnYScsXG4gICAgICAgICAgICBoaDogJyVkIHNpZWfEp2F0JyxcbiAgICAgICAgICAgIGQ6ICfEoXVybmF0YScsXG4gICAgICAgICAgICBkZDogJyVkIMShcmFuZXQnLFxuICAgICAgICAgICAgTTogJ3hhaGFyJyxcbiAgICAgICAgICAgIE1NOiAnJWQgeGh1cicsXG4gICAgICAgICAgICB5OiAnc2VuYScsXG4gICAgICAgICAgICB5eTogJyVkIHNuaScsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQnVybWVzZSBbbXldXG4vLyEgYXV0aG9yIDogU3F1YXIgdGVhbSwgbXlzcXVhci5jb21cbi8vISBhdXRob3IgOiBEYXZpZCBSb3NzZWxsYXQgOiBodHRwczovL2dpdGh1Yi5jb20vZ2hvbGFkclxuLy8hIGF1dGhvciA6IFRpbiBBdW5nIExpbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS90aGFueWF3emlubWluXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+GBgScsXG4gICAgICAgICAgICAyOiAn4YGCJyxcbiAgICAgICAgICAgIDM6ICfhgYMnLFxuICAgICAgICAgICAgNDogJ+GBhCcsXG4gICAgICAgICAgICA1OiAn4YGFJyxcbiAgICAgICAgICAgIDY6ICfhgYYnLFxuICAgICAgICAgICAgNzogJ+GBhycsXG4gICAgICAgICAgICA4OiAn4YGIJyxcbiAgICAgICAgICAgIDk6ICfhgYknLFxuICAgICAgICAgICAgMDogJ+GBgCcsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfhgYEnOiAnMScsXG4gICAgICAgICAgICAn4YGCJzogJzInLFxuICAgICAgICAgICAgJ+GBgyc6ICczJyxcbiAgICAgICAgICAgICfhgYQnOiAnNCcsXG4gICAgICAgICAgICAn4YGFJzogJzUnLFxuICAgICAgICAgICAgJ+GBhic6ICc2JyxcbiAgICAgICAgICAgICfhgYcnOiAnNycsXG4gICAgICAgICAgICAn4YGIJzogJzgnLFxuICAgICAgICAgICAgJ+GBiSc6ICc5JyxcbiAgICAgICAgICAgICfhgYAnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgbXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdteScsIHtcbiAgICAgICAgbW9udGhzOiAn4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuX+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArl/hgJnhgJDhgLpf4YCn4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCH4YCw4YCc4YCt4YCv4YCE4YC6X+GAnuGAvOGAguGAr+GAkOGAul/hgIXhgIDhgLrhgJDhgIThgLrhgJjhgKxf4YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsX+GAlOGAreGAr+GAneGAhOGAuuGAmOGArF/hgJLhgK7hgIfhgIThgLrhgJjhgKwnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4YCH4YCU4YC6X+GAluGAsV/hgJnhgJDhgLpf4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCc4YCt4YCv4YCE4YC6X+GAnuGAvF/hgIXhgIDhgLpf4YCh4YCx4YCs4YCA4YC6X+GAlOGAreGAr1/hgJLhgK4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn4YCQ4YCU4YCE4YC64YC54YCC4YCU4YC94YCxX+GAkOGAlOGAhOGAuuGAueGAnOGArF/hgKHhgIThgLrhgLnhgILhgKtf4YCX4YCv4YCS4YC54YCT4YCf4YCw4YC4X+GAgOGAvOGArOGAnuGAleGAkOGAseGAuF/hgJ7hgLHhgKzhgIDhgLzhgKxf4YCF4YCU4YCxJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+GAlOGAveGAsV/hgJzhgKxf4YCC4YCrX+GAn+GAsOGAuF/hgIDhgLzhgKxf4YCe4YCx4YCsX+GAlOGAsScuc3BsaXQoJ18nKSxcblxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4YCa4YCU4YCxLl0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhgJnhgJThgIDhgLrhgJbhgLzhgJThgLpdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+GAmeGAlOGAsS7hgIBdIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+GAleGAvOGAruGAuOGAgeGAsuGAt+GAnuGAseGArF0gZGRkZCBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+GAnOGArOGAmeGAiuGAuuGAtyAlcyDhgJnhgL7hgKwnLFxuICAgICAgICAgICAgcGFzdDogJ+GAnOGAveGAlOGAuuGAgeGAsuGAt+GAnuGAseGArCAlcyDhgIAnLFxuICAgICAgICAgICAgczogJ+GAheGAgOGAueGAgOGAlOGAui7hgKHhgJThgIrhgLrhgLjhgIThgJrhgLonLFxuICAgICAgICAgICAgc3M6ICclZCDhgIXhgIDhgLnhgIDhgJThgLfhgLonLFxuICAgICAgICAgICAgbTogJ+GAkOGAheGAuuGAmeGAreGAlOGAheGAuicsXG4gICAgICAgICAgICBtbTogJyVkIOGAmeGAreGAlOGAheGAuicsXG4gICAgICAgICAgICBoOiAn4YCQ4YCF4YC64YCU4YCs4YCb4YCuJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4YCU4YCs4YCb4YCuJyxcbiAgICAgICAgICAgIGQ6ICfhgJDhgIXhgLrhgJvhgIDhgLonLFxuICAgICAgICAgICAgZGQ6ICclZCDhgJvhgIDhgLonLFxuICAgICAgICAgICAgTTogJ+GAkOGAheGAuuGAnCcsXG4gICAgICAgICAgICBNTTogJyVkIOGAnCcsXG4gICAgICAgICAgICB5OiAn4YCQ4YCF4YC64YCU4YC+4YCF4YC6JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4YCU4YC+4YCF4YC6JyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+GBgeGBguGBg+GBhOGBheGBhuGBh+GBiOGBieGBgF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG15O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5vcndlZ2lhbiBCb2ttw6VsIFtuYl1cbi8vISBhdXRob3JzIDogRXNwZW4gSG92bGFuZHNkYWwgOiBodHRwczovL2dpdGh1Yi5jb20vcmV4eGFyc1xuLy8hICAgICAgICAgICBTaWd1cmQgR2FydG1hbm4gOiBodHRwczovL2dpdGh1Yi5jb20vc2lndXJkZ2Fcbi8vISAgICAgICAgICAgU3RlcGhlbiBSYW10aHVuIDogaHR0cHM6Ly9naXRodWIuY29tL3N0ZXBoZW5yYW10aHVuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbmIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCduYicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyc19hcHIuX21haV9qdW5pX2p1bGlfYXVnLl9zZXAuX29rdC5fbm92Ll9kZXMuJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7guX21hLl90aS5fb24uX3RvLl9mci5fbMO4Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpIGfDpXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tmb3JyaWdlXSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHM6ICdub2VuIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbTogJ2V0dCBtaW51dHQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dHRlcicsXG4gICAgICAgICAgICBoOiAnZW4gdGltZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQ6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlcicsXG4gICAgICAgICAgICB3OiAnZW4gdWtlJyxcbiAgICAgICAgICAgIHd3OiAnJWQgdWtlcicsXG4gICAgICAgICAgICBNOiAnZW4gbcOlbmVkJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeTogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5iO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5lcGFsZXNlIFtuZV1cbi8vISBhdXRob3IgOiBzdXZhc2ggOiBodHRwczovL2dpdGh1Yi5jb20vc3V2YXNoXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAgICAgMTogJ+ClpycsXG4gICAgICAgICAgICAyOiAn4KWoJyxcbiAgICAgICAgICAgIDM6ICfgpaknLFxuICAgICAgICAgICAgNDogJ+ClqicsXG4gICAgICAgICAgICA1OiAn4KWrJyxcbiAgICAgICAgICAgIDY6ICfgpawnLFxuICAgICAgICAgICAgNzogJ+ClrScsXG4gICAgICAgICAgICA4OiAn4KWuJyxcbiAgICAgICAgICAgIDk6ICfgpa8nLFxuICAgICAgICAgICAgMDogJ+ClpicsXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICAgICAn4KWoJzogJzInLFxuICAgICAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICAgICAn4KWrJzogJzUnLFxuICAgICAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICAgICAn4KWuJzogJzgnLFxuICAgICAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgICAgICfgpaYnOiAnMCcsXG4gICAgICAgIH07XG5cbiAgICB2YXIgbmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCduZScsIHtcbiAgICAgICAgbW9udGhzOiAn4KSc4KSo4KS14KSw4KWAX+Ckq+Clh+CkrOCljeCksOClgeCkteCksOClgF/gpK7gpL7gpLDgpY3gpJpf4KSF4KSq4KWN4KSw4KS/4KSyX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSIX+CkheCkl+Ckt+CljeCkn1/gpLjgpYfgpKrgpY3gpJ/gpYfgpK7gpY3gpKzgpLBf4KSF4KSV4KWN4KSf4KWL4KSs4KSwX+CkqOCli+CkreClh+CkruCljeCkrOCksF/gpKHgpL/gpLjgpYfgpK7gpY3gpKzgpLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4KSc4KSoLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL8uX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSILl/gpIXgpJcuX+CkuOClh+CkquCljeCkny5f4KSF4KSV4KWN4KSf4KWLLl/gpKjgpYvgpK3gpYcuX+CkoeCkv+CkuOClhy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4KSG4KSH4KSk4KSs4KS+4KSwX+CkuOCli+CkruCkrOCkvuCksF/gpK7gpJngpY3gpJfgpLLgpKzgpL7gpLBf4KSs4KWB4KSn4KSs4KS+4KSwX+CkrOCkv+CkueCkv+CkrOCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpKzgpL7gpLBf4KS24KSo4KS/4KSs4KS+4KSwJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4KSG4KSH4KSkLl/gpLjgpYvgpK4uX+CkruCkmeCljeCkl+Cksi5f4KSs4KWB4KSnLl/gpKzgpL/gpLngpL8uX+CktuClgeCkleCljeCksC5f4KS24KSo4KS/Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgpIYuX+CkuOCliy5f4KSu4KSCLl/gpKzgpYEuX+CkrOCkvy5f4KS24KWBLl/gpLYuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0HgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTFRTOiAnQeCkleCliyBoOm1tOnNzIOCkrOCknOClhycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgpafgpajgpangpargpavgpazgpa3gpa7gpa/gpaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKTgpL984KSs4KS/4KS54KS+4KSofOCkpuCkv+CkieCkgeCkuOCli3zgpLjgpL7gpIHgpJ0vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKzgpL/gpLngpL7gpKgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KS/4KSJ4KSB4KS44KWLJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpIHgpJ0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKzgpL/gpLngpL7gpKgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuCkv+CkieCkgeCkuOCliyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSB4KSdJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KSt4KWL4KSy4KS/XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgpIbgpIngpIHgpKbgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgpLngpL/gpJzgpYtdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+Ckl+Ckj+CkleCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4KSu4KS+JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgpIXgpJfgpL7gpKHgpL8nLFxuICAgICAgICAgICAgczogJ+CkleClh+CkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3M6ICclZCDgpLjgpYfgpJXgpYfgpKPgpY3gpKEnLFxuICAgICAgICAgICAgbTogJ+Ckj+CklSDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICAgICAgbW06ICclZCDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICAgICAgaDogJ+Ckj+CklSDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgaGg6ICclZCDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgZDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgTTogJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICAgICAgTU06ICclZCDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICAgICAgeTogJ+Ckj+CklSDgpKzgpLDgpY3gpLcnLFxuICAgICAgICAgICAgeXk6ICclZCDgpKzgpLDgpY3gpLcnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogRHV0Y2ggKEJlbGdpdW0pIFtubC1iZV1cbi8vISBhdXRob3IgOiBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pvcmlzcm9saW5nXG4vLyEgYXV0aG9yIDogSmFjb2IgTWlkZGFnIDogaHR0cHM6Ly9naXRodWIuY29tL21pZGRhZ2pcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15qYW4vaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXm1hYXJ0fG1ydC4/JC9pLFxuICAgICAgICAgICAgL15hcHIvaSxcbiAgICAgICAgICAgIC9ebWVpJC9pLFxuICAgICAgICAgICAgL15qdW5baS5dPyQvaSxcbiAgICAgICAgICAgIC9eanVsW2kuXT8kL2ksXG4gICAgICAgICAgICAvXmF1Zy9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2t0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kZWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmxCZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25sLWJlJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzOiAnem9uZGFnX21hYW5kYWdfZGluc2RhZ193b2Vuc2RhZ19kb25kZXJkYWdfdnJpamRhZ196YXRlcmRhZycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgZ2VsZWRlbicsXG4gICAgICAgICAgICBzOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICAgICAgc3M6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtOiAnw6nDqW4gbWludXV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdXVyJyxcbiAgICAgICAgICAgIGQ6ICfDqcOpbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNOiAnw6nDqW4gbWFhbmQnLFxuICAgICAgICAgICAgTU06ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHk6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFhcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCA/ICdzdGUnIDogJ2RlJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBubEJlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IER1dGNoIFtubF1cbi8vISBhdXRob3IgOiBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pvcmlzcm9saW5nXG4vLyEgYXV0aG9yIDogSmFjb2IgTWlkZGFnIDogaHR0cHM6Ly9naXRodWIuY29tL21pZGRhZ2pcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlID0gW1xuICAgICAgICAgICAgL15qYW4vaSxcbiAgICAgICAgICAgIC9eZmViL2ksXG4gICAgICAgICAgICAvXm1hYXJ0fG1ydC4/JC9pLFxuICAgICAgICAgICAgL15hcHIvaSxcbiAgICAgICAgICAgIC9ebWVpJC9pLFxuICAgICAgICAgICAgL15qdW5baS5dPyQvaSxcbiAgICAgICAgICAgIC9eanVsW2kuXT8kL2ksXG4gICAgICAgICAgICAvXmF1Zy9pLFxuICAgICAgICAgICAgL15zZXAvaSxcbiAgICAgICAgICAgIC9eb2t0L2ksXG4gICAgICAgICAgICAvXm5vdi9pLFxuICAgICAgICAgICAgL15kZWMvaSxcbiAgICAgICAgXSxcbiAgICAgICAgbW9udGhzUmVnZXggPSAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcblxuICAgICAgICB3ZWVrZGF5czogJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICd6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW3ZhbmRhYWcgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dpc3RlcmVuIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1thZmdlbG9wZW5dIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ292ZXIgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgczogJ2VlbiBwYWFyIHNlY29uZGVuJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vjb25kZW4nLFxuICAgICAgICAgICAgbTogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaDogJ8Opw6luIHV1cicsXG4gICAgICAgICAgICBoaDogJyVkIHV1cicsXG4gICAgICAgICAgICBkOiAnw6nDqW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgdzogJ8Opw6luIHdlZWsnLFxuICAgICAgICAgICAgd3c6ICclZCB3ZWtlbicsXG4gICAgICAgICAgICBNOiAnw6nDqW4gbWFhbmQnLFxuICAgICAgICAgICAgTU06ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHk6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFhcicsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCA/ICdzdGUnIDogJ2RlJylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBubDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBOeW5vcnNrIFtubl1cbi8vISBhdXRob3JzIDogaHR0cHM6Ly9naXRodWIuY29tL21lY2h1d2luZFxuLy8hICAgICAgICAgICBTdGVwaGVuIFJhbXRodW4gOiBodHRwczovL2dpdGh1Yi5jb20vc3RlcGhlbnJhbXRodW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBubiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25uJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbi5fZmViLl9tYXJzX2Fwci5fbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnc3VuZGFnX23DpW5kYWdfdHlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sYXVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc3UuX23DpS5fdHkuX29uLl90by5fZnIuX2xhdS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc3VfbcOlX3R5X29uX3RvX2ZyX2xhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0kgZGFnIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tJIG1vcmdvbiBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0kgZ8OlciBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0bDuHJlZ8OlYW5kZV0gZGRkZCBba2xva2thXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBzaWRhbicsXG4gICAgICAgICAgICBzOiAnbm9rcmUgc2VrdW5kJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kJyxcbiAgICAgICAgICAgIG06ICdlaXQgbWludXR0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXR0JyxcbiAgICAgICAgICAgIGg6ICdlaW4gdGltZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbWFyJyxcbiAgICAgICAgICAgIGQ6ICdlaW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgdzogJ2VpIHZla2UnLFxuICAgICAgICAgICAgd3c6ICclZCB2ZWtlcicsXG4gICAgICAgICAgICBNOiAnZWluIG3DpW5hZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHk6ICdlaXQgw6VyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6VyJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBubjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBPY2NpdGFuLCBsZW5nYWRvY2lhbiBkaWFsZWN0ZSBbb2MtbG5jXVxuLy8hIGF1dGhvciA6IFF1ZW50aW4gUEFHw4hTIDogaHR0cHM6Ly9naXRodWIuY29tL1F1ZW50eTMxXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgb2NMbmMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdvYy1sbmMnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ2dlbmnDqHJfZmVicmnDqHJfbWFyw6dfYWJyaWxfbWFpX2p1bmhfanVsaGV0X2Fnb3N0X3NldGVtYnJlX29jdMOyYnJlX25vdmVtYnJlX2RlY2VtYnJlJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBmb3JtYXQ6IFwiZGUgZ2VuacOocl9kZSBmZWJyacOocl9kZSBtYXLDp19kJ2FicmlsX2RlIG1haV9kZSBqdW5oX2RlIGp1bGhldF9kJ2Fnb3N0X2RlIHNldGVtYnJlX2Qnb2N0w7JicmVfZGUgbm92ZW1icmVfZGUgZGVjZW1icmVcIi5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXHMpK01NTU0vLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlfanVuaF9qdWxoLl9hZ28uX3NldC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZGltZW5nZV9kaWx1bnNfZGltYXJzX2RpbcOoY3Jlc19kaWrDsnVzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ2RnLl9kbC5fZG0uX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdkZ19kbF9kbV9kY19kal9kdl9kcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gW2RlXSBZWVlZIFthXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFtkZV0gWVlZWSBbYV0gSDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkIEQgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t1w6hpIGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbZGVtYW4gYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2nDqHIgYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtwYXNzYXQgYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IFwiZCdhcXXDrSAlc1wiLFxuICAgICAgICAgICAgcGFzdDogJ2ZhICVzJyxcbiAgICAgICAgICAgIHM6ICd1bmFzIHNlZ29uZGFzJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2Vnb25kYXMnLFxuICAgICAgICAgICAgbTogJ3VuYSBtaW51dGEnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGFzJyxcbiAgICAgICAgICAgIGg6ICd1bmEgb3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JhcycsXG4gICAgICAgICAgICBkOiAndW4gam9ybicsXG4gICAgICAgICAgICBkZDogJyVkIGpvcm5zJyxcbiAgICAgICAgICAgIE06ICd1biBtZXMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW4gYW4nLFxuICAgICAgICAgICAgeXk6ICclZCBhbnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0ocnxufHR8w6h8YSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPVxuICAgICAgICAgICAgICAgIG51bWJlciA9PT0gMVxuICAgICAgICAgICAgICAgICAgICA/ICdyJ1xuICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gMlxuICAgICAgICAgICAgICAgICAgICA/ICduJ1xuICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gM1xuICAgICAgICAgICAgICAgICAgICA/ICdyJ1xuICAgICAgICAgICAgICAgICAgICA6IG51bWJlciA9PT0gNFxuICAgICAgICAgICAgICAgICAgICA/ICd0J1xuICAgICAgICAgICAgICAgICAgICA6ICfDqCc7XG4gICAgICAgICAgICBpZiAocGVyaW9kID09PSAndycgfHwgcGVyaW9kID09PSAnVycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9jTG5jO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFB1bmphYmkgKEluZGlhKSBbcGEtaW5dXG4vLyEgYXV0aG9yIDogSGFycHJlZXQgU2luZ2ggOiBodHRwczovL2dpdGh1Yi5jb20vaGFycHJlZXRraGFsc2FndGJpdFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgqacnLFxuICAgICAgICAgICAgMjogJ+CpqCcsXG4gICAgICAgICAgICAzOiAn4KmpJyxcbiAgICAgICAgICAgIDQ6ICfgqaonLFxuICAgICAgICAgICAgNTogJ+CpqycsXG4gICAgICAgICAgICA2OiAn4KmsJyxcbiAgICAgICAgICAgIDc6ICfgqa0nLFxuICAgICAgICAgICAgODogJ+CpricsXG4gICAgICAgICAgICA5OiAn4KmvJyxcbiAgICAgICAgICAgIDA6ICfgqaYnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4KmnJzogJzEnLFxuICAgICAgICAgICAgJ+CpqCc6ICcyJyxcbiAgICAgICAgICAgICfgqaknOiAnMycsXG4gICAgICAgICAgICAn4KmqJzogJzQnLFxuICAgICAgICAgICAgJ+Cpqyc6ICc1JyxcbiAgICAgICAgICAgICfgqawnOiAnNicsXG4gICAgICAgICAgICAn4KmtJzogJzcnLFxuICAgICAgICAgICAgJ+Cpric6ICc4JyxcbiAgICAgICAgICAgICfgqa8nOiAnOScsXG4gICAgICAgICAgICAn4KmmJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIHBhSW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwYS1pbicsIHtcbiAgICAgICAgLy8gVGhlcmUgYXJlIG1vbnRocyBuYW1lIGFzIHBlciBOYW5ha3NoYWhpIENhbGVuZGFyIGJ1dCB0aGV5IGFyZSBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBQdW5qYWJpLlxuICAgICAgICBtb250aHM6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfgqJDgqKTgqLXgqL7gqLBf4Ki44KmL4Kiu4Ki14Ki+4KiwX+CoruCpsOCol+CosuCoteCovuCosF/gqKzgqYHgqKfgqLXgqL7gqLBf4Ki14KmA4Kiw4Ki14Ki+4KiwX+CouOCovOCpgeCpseColeCosOCoteCovuCosF/gqLjgqLzgqKjgqYDgqJrgqLDgqLXgqL7gqLAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgqIXgqJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vgqIXgqJfgqLLgqL5dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgqKrgqL/gqJvgqLLgqYddIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4Ki14Ki/4Kmx4KiaJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgqKrgqL/gqJvgqLLgqYcnLFxuICAgICAgICAgICAgczogJ+ColeCpgeConSDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgc3M6ICclZCDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbTogJ+Coh+ColSDgqK7gqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbW06ICclZCDgqK7gqL/gqbDgqJ8nLFxuICAgICAgICAgICAgaDogJ+Coh+CpseColSDgqJjgqbDgqJ/gqL4nLFxuICAgICAgICAgICAgaGg6ICclZCDgqJjgqbDgqJ/gqYcnLFxuICAgICAgICAgICAgZDogJ+Coh+CpseColSDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgTTogJ+Coh+CpseColSDgqK7gqLngqYDgqKjgqL4nLFxuICAgICAgICAgICAgTU06ICclZCDgqK7gqLngqYDgqKjgqYcnLFxuICAgICAgICAgICAgeTogJ+Coh+CpseColSDgqLjgqL7gqLInLFxuICAgICAgICAgICAgeXk6ICclZCDgqLjgqL7gqLInLFxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kmn4Kmo4Kmp4Kmq4Kmr4Kms4Kmt4Kmu4Kmv4KmmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBQdW5qYWJpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gqLDgqL7gqKR84Ki44Ki14KmH4KiwfOCopuCpgeCoquCoueCov+CosHzgqLjgqLzgqL7gqK4vLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgqLDgqL7gqKQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLXgqYfgqLAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kim4KmB4Kiq4Ki54Ki/4KiwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLzgqL7gqK4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kiw4Ki+4KikJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLjgqLXgqYfgqLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CopuCpgeCoquCoueCov+CosCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ki44Ki84Ki+4KiuJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA2LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGFJbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb2xpc2ggW3BsXVxuLy8hIGF1dGhvciA6IFJhZmFsIEhpcnN6IDogaHR0cHM6Ly9naXRodWIuY29tL2V2b0xcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHNOb21pbmF0aXZlID0gJ3N0eWN6ZcWEX2x1dHlfbWFyemVjX2t3aWVjaWXFhF9tYWpfY3plcndpZWNfbGlwaWVjX3NpZXJwaWXFhF93cnplc2llxYRfcGHFumR6aWVybmlrX2xpc3RvcGFkX2dydWR6aWXFhCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU3ViamVjdGl2ZSA9ICdzdHljem5pYV9sdXRlZ29fbWFyY2Ffa3dpZXRuaWFfbWFqYV9jemVyd2NhX2xpcGNhX3NpZXJwbmlhX3dyemXFm25pYV9wYcW6ZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZSA9IFtcbiAgICAgICAgICAgIC9ec3R5L2ksXG4gICAgICAgICAgICAvXmx1dC9pLFxuICAgICAgICAgICAgL15tYXIvaSxcbiAgICAgICAgICAgIC9ea3dpL2ksXG4gICAgICAgICAgICAvXm1hai9pLFxuICAgICAgICAgICAgL15jemUvaSxcbiAgICAgICAgICAgIC9ebGlwL2ksXG4gICAgICAgICAgICAvXnNpZS9pLFxuICAgICAgICAgICAgL153cnovaSxcbiAgICAgICAgICAgIC9ecGHFui9pLFxuICAgICAgICAgICAgL15saXMvaSxcbiAgICAgICAgICAgIC9eZ3J1L2ksXG4gICAgICAgIF07XG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gJSAxMCA8IDUgJiYgbiAlIDEwID4gMSAmJiB+fihuIC8gMTApICUgMTAgIT09IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2VrdW5kJyk7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0xJknO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZ29kemluYScgOiAnZ29kemluxJknO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZ29kemlueScgOiAnZ29kemluJyk7XG4gICAgICAgICAgICBjYXNlICd3dyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICd0eWdvZG5pZScgOiAndHlnb2RuaScpO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWllc2nEhWNlJyA6ICdtaWVzacSZY3knKTtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2xhdGEnIDogJ2xhdCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBsID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGwnLCB7XG4gICAgICAgIG1vbnRoczogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzTm9taW5hdGl2ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL0QgTU1NTS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ3N0eV9sdXRfbWFyX2t3aV9tYWpfY3plX2xpcF9zaWVfd3J6X3BhxbpfbGlzX2dydScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXM6ICduaWVkemllbGFfcG9uaWVkemlhxYJla193dG9yZWtfxZtyb2RhX2N6d2FydGVrX3BpxIV0ZWtfc29ib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmR6X3Bvbl93dF/Fm3JfY3p3X3B0X3NvYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdOZF9Qbl9XdF/FmnJfQ3pfUHRfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRHppxZsgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tKdXRybyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIG5pZWR6aWVsxJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1dlIHd0b3JlayBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyDFm3JvZMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHNvYm90xJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXXSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbV2N6b3JhaiBvXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIG5pZWR6aWVsxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIMWbcm9kxJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgsSFIHNvYm90xJkgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYJ5XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIHRlbXUnLFxuICAgICAgICAgICAgczogJ2tpbGthIHNla3VuZCcsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiAnMSBkemllxYQnLFxuICAgICAgICAgICAgZGQ6ICclZCBkbmknLFxuICAgICAgICAgICAgdzogJ3R5ZHppZcWEJyxcbiAgICAgICAgICAgIHd3OiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNOiAnbWllc2nEhWMnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdyb2snLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBwbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBQb3J0dWd1ZXNlIChCcmF6aWwpIFtwdC1icl1cbi8vISBhdXRob3IgOiBDYWlvIFJpYmVpcm8gUGVyZWlyYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jYWlvLXJpYmVpcm8tcGVyZWlyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHB0QnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwdC1icicsIHtcbiAgICAgICAgbW9udGhzOiAnamFuZWlyb19mZXZlcmVpcm9fbWFyw6dvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2Zldl9tYXJfYWJyX21haV9qdW5fanVsX2Fnb19zZXRfb3V0X25vdl9kZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnZG9taW5nb19zZWd1bmRhLWZlaXJhX3RlcsOnYS1mZWlyYV9xdWFydGEtZmVpcmFfcXVpbnRhLWZlaXJhX3NleHRhLWZlaXJhX3PDoWJhZG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdkb21fc2VnX3Rlcl9xdWFfcXVpX3NleF9zw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2RvXzLCql8zwqpfNMKqXzXCql82wqpfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSA9PT0gMCB8fCB0aGlzLmRheSgpID09PSA2XG4gICAgICAgICAgICAgICAgICAgID8gJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICAgICA6ICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2jDoSAlcycsXG4gICAgICAgICAgICBzOiAncG91Y29zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbTogJ3VtIG1pbnV0bycsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaDogJ3VtYSBob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZDogJ3VtIGRpYScsXG4gICAgICAgICAgICBkZDogJyVkIGRpYXMnLFxuICAgICAgICAgICAgTTogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW0gYW5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5vcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICBpbnZhbGlkRGF0ZTogJ0RhdGEgaW52w6FsaWRhJyxcbiAgICB9KTtcblxuICAgIHJldHVybiBwdEJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBvcnR1Z3Vlc2UgW3B0XVxuLy8hIGF1dGhvciA6IEplZmZlcnNvbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYWxleDc5XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgcHQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwdCcsIHtcbiAgICAgICAgbW9udGhzOiAnamFuZWlyb19mZXZlcmVpcm9fbWFyw6dvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuX2Zldl9tYXJfYWJyX21haV9qdW5fanVsX2Fnb19zZXRfb3V0X25vdl9kZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnRG9taW5nb19TZWd1bmRhLWZlaXJhX1RlcsOnYS1mZWlyYV9RdWFydGEtZmVpcmFfUXVpbnRhLWZlaXJhX1NleHRhLWZlaXJhX1PDoWJhZG8nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0RvXzLCql8zwqpfNMKqXzXCql82wqpfU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSA9PT0gMCB8fCB0aGlzLmRheSgpID09PSA2XG4gICAgICAgICAgICAgICAgICAgID8gJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICAgICA6ICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2jDoSAlcycsXG4gICAgICAgICAgICBzOiAnc2VndW5kb3MnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtOiAndW0gbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoOiAndW1hIGhvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkOiAndW0gZGlhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGlhcycsXG4gICAgICAgICAgICB3OiAndW1hIHNlbWFuYScsXG4gICAgICAgICAgICB3dzogJyVkIHNlbWFuYXMnLFxuICAgICAgICAgICAgTTogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU06ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5OiAndW0gYW5vJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYW5vcycsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUm9tYW5pYW4gW3JvXVxuLy8hIGF1dGhvciA6IFZsYWQgR3VyZGlnYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ndXJkaWdhXG4vLyEgYXV0aG9yIDogVmFsZW50aW4gQWdhY2hpIDogaHR0cHM6Ly9naXRodWIuY29tL2F2YWx5XG4vLyEgYXV0aG9yIDogRW1hbnVlbCBDZXBvaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9jZXBlbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgICAgIHNzOiAnc2VjdW5kZScsXG4gICAgICAgICAgICAgICAgbW06ICdtaW51dGUnLFxuICAgICAgICAgICAgICAgIGhoOiAnb3JlJyxcbiAgICAgICAgICAgICAgICBkZDogJ3ppbGUnLFxuICAgICAgICAgICAgICAgIHd3OiAnc8SDcHTEg23Dom5pJyxcbiAgICAgICAgICAgICAgICBNTTogJ2x1bmknLFxuICAgICAgICAgICAgICAgIHl5OiAnYW5pJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAnICc7XG4gICAgICAgIGlmIChudW1iZXIgJSAxMDAgPj0gMjAgfHwgKG51bWJlciA+PSAxMDAgJiYgbnVtYmVyICUgMTAwID09PSAwKSkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gJyBkZSAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBzZXBhcmF0b3IgKyBmb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgcm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdybycsIHtcbiAgICAgICAgbW9udGhzOiAnaWFudWFyaWVfZmVicnVhcmllX21hcnRpZV9hcHJpbGllX21haV9pdW5pZV9pdWxpZV9hdWd1c3Rfc2VwdGVtYnJpZV9vY3RvbWJyaWVfbm9pZW1icmllX2RlY2VtYnJpZScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdpYW4uX2ZlYi5fbWFydC5fYXByLl9tYWlfaXVuLl9pdWwuX2F1Zy5fc2VwdC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnZHVtaW5pY8SDX2x1bmlfbWFyyJtpX21pZXJjdXJpX2pvaV92aW5lcmlfc8OibWLEg3TEgycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0R1bV9MdW5fTWFyX01pZV9Kb2lfVmluX1PDom0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnRHVfTHVfTWFfTWlfSm9fVmlfU8OiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYXppIGxhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW23DomluZSBsYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtsYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpZXJpIGxhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tmb3N0YV0gZGRkZCBbbGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAncGVzdGUgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMOubiB1cm3EgycsXG4gICAgICAgICAgICBzOiAnY8OidGV2YSBzZWN1bmRlJyxcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbTogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaDogJ28gb3LEgycsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQ6ICdvIHppJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgdzogJ28gc8SDcHTEg23Dom7EgycsXG4gICAgICAgICAgICB3dzogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICdvIGx1bsSDJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogUnVzc2lhbiBbcnVdXG4vLyEgYXV0aG9yIDogVmlrdG9ybWluYXRvciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9WaWt0b3JtaW5hdG9yXG4vLyEgYXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcbi8vISBhdXRob3IgOiDQmtC+0YDQtdC90LHQtdGA0LMg0JzQsNGA0LogOiBodHRwczovL2dpdGh1Yi5jb20vc29ja2V0cGFpclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExXG4gICAgICAgICAgICA/IGZvcm1zWzBdXG4gICAgICAgICAgICA6IG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKVxuICAgICAgICAgICAgPyBmb3Jtc1sxXVxuICAgICAgICAgICAgOiBmb3Jtc1syXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgc3M6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbW06IHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyA6ICfQvNC40L3Rg9GC0YNf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInLFxuICAgICAgICAgICAgaGg6ICfRh9Cw0YFf0YfQsNGB0LBf0YfQsNGB0L7QsicsXG4gICAgICAgICAgICBkZDogJ9C00LXQvdGMX9C00L3Rj1/QtNC90LXQuScsXG4gICAgICAgICAgICB3dzogJ9C90LXQtNC10LvRj1/QvdC10LTQtdC70Lhf0L3QtdC00LXQu9GMJyxcbiAgICAgICAgICAgIE1NOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0LBf0LzQtdGB0Y/RhtC10LInLFxuICAgICAgICAgICAgeXk6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LAnIDogJ9C80LjQvdGD0YLRgyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbXG4gICAgICAgIC9e0Y/QvdCyL2ksXG4gICAgICAgIC9e0YTQtdCyL2ksXG4gICAgICAgIC9e0LzQsNGAL2ksXG4gICAgICAgIC9e0LDQv9GAL2ksXG4gICAgICAgIC9e0LzQsFvQudGPXS9pLFxuICAgICAgICAvXtC40Y7QvS9pLFxuICAgICAgICAvXtC40Y7Quy9pLFxuICAgICAgICAvXtCw0LLQsy9pLFxuICAgICAgICAvXtGB0LXQvS9pLFxuICAgICAgICAvXtC+0LrRgi9pLFxuICAgICAgICAvXtC90L7Rjy9pLFxuICAgICAgICAvXtC00LXQui9pLFxuICAgIF07XG5cbiAgICAvLyBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9ydWxlcy8xMzktcHJvcCA6IMKnIDEwM1xuICAgIC8vINCh0L7QutGA0LDRidC10L3QuNGPINC80LXRgdGP0YbQtdCyOiBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9idXJvL3NlYXJjaC1hbnN3ZXI/cz0yNDI2MzdcbiAgICAvLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbiAgICB2YXIgcnUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdydScsIHtcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LLQsNGA0Y9f0YTQtdCy0YDQsNC70Y9f0LzQsNGA0YLQsF/QsNC/0YDQtdC70Y9f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQs9GD0YHRgtCwX9GB0LXQvdGC0Y/QsdGA0Y9f0L7QutGC0Y/QsdGA0Y9f0L3QvtGP0LHRgNGPX9C00LXQutCw0LHRgNGPJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0Y/QvdCy0LDRgNGMX9GE0LXQstGA0LDQu9GMX9C80LDRgNGCX9Cw0L/RgNC10LvRjF/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGA0Yxf0L7QutGC0Y/QsdGA0Yxf0L3QvtGP0LHRgNGMX9C00LXQutCw0LHRgNGMJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0OiB7XG4gICAgICAgICAgICAvLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YM/XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YDRgl/QsNC/0YAuX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNGDX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtGDX9GB0YPQsdCx0L7RgtGDJy5zcGxpdChcbiAgICAgICAgICAgICAgICAnXydcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9CS0LJdID8oPzrQv9GA0L7RiNC70YPRjnzRgdC70LXQtNGD0Y7RidGD0Y580Y3RgtGDKT8gP10gP2RkZGQvLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQstGBX9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LgsINC/0L4g0YLRgNC4INCx0YPQutCy0YssINC00LvRjyDQvdC10LrQvtGC0L7RgNGL0YUsINC/0L4gNCDQsdGD0LrQstGLLCDRgdC+0LrRgNCw0YnQtdC90LjRjyDRgSDRgtC+0YfQutC+0Lkg0Lgg0LHQtdC3INGC0L7Rh9C60LhcbiAgICAgICAgbW9udGhzUmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC60L7Qv9C40Y8g0L/RgNC10LTRi9C00YPRidC10LPQvlxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4XG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXijRj9C90LLQsNGAW9GP0YxdfNGE0LXQstGA0LDQu1vRj9GMXXzQvNCw0YDRgtCwP3zQsNC/0YDQtdC7W9GP0YxdfNC80LBb0Y/QuV180LjRjtC9W9GP0YxdfNC40Y7Qu1vRj9GMXXzQsNCy0LPRg9GB0YLQsD980YHQtdC90YLRj9Cx0YBb0Y/RjF180L7QutGC0Y/QsdGAW9GP0YxdfNC90L7Rj9Cx0YBb0Y/RjF180LTQtdC60LDQsdGAW9GP0YxdKS9pLFxuXG4gICAgICAgIC8vINCS0YvRgNCw0LbQtdC90LjQtSwg0LrQvtGC0L7RgNC+0LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKNGP0L3QslxcLnzRhNC10LLRgD9cXC580LzQsNGAW9GCLl180LDQv9GAXFwufNC80LBb0Y/QuV180LjRjtC9W9GM0Y8uXXzQuNGO0Ltb0YzRjy5dfNCw0LLQs1xcLnzRgdC10L3Rgj9cXC580L7QutGCXFwufNC90L7Rj9CxP1xcLnzQtNC10LpcXC4pL2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Ch0LXQs9C+0LTQvdGPLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0LLRgtGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CS0YfQtdGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC10LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70L7QtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9GH0LXRgNC10LcgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzINC90LDQt9Cw0LQnLFxuICAgICAgICAgICAgczogJ9C90LXRgdC60L7Qu9GM0LrQviDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ9C00LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgdzogJ9C90LXQtNC10LvRjycsXG4gICAgICAgICAgICB3dzogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE06ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeTogJ9Cz0L7QtCcsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9C10YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GD0YLRgNCwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0Y8nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBydTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTaW5kaGkgW3NkXVxuLy8hIGF1dGhvciA6IE5hcmFpbiBTYWdhciA6IGh0dHBzOi8vZ2l0aHViLmNvbS9uYXJhaW5zYWdhclxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgICAgICfYrNmG2YjYsdmKJyxcbiAgICAgICAgICAgICfZgdmK2KjYsdmI2LHZiicsXG4gICAgICAgICAgICAn2YXYp9ix2oYnLFxuICAgICAgICAgICAgJ9in2b7YsdmK2YQnLFxuICAgICAgICAgICAgJ9mF2KbZiicsXG4gICAgICAgICAgICAn2KzZiNmGJyxcbiAgICAgICAgICAgICfYrNmI2YTYp9ih2ZAnLFxuICAgICAgICAgICAgJ9ii2q/Ys9m9JyxcbiAgICAgICAgICAgICfYs9mK2b7ZvdmF2KjYsScsXG4gICAgICAgICAgICAn2KLaqtm92YjYqNixJyxcbiAgICAgICAgICAgICfZhtmI2YXYqNixJyxcbiAgICAgICAgICAgICfaitiz2YXYqNixJyxcbiAgICAgICAgXSxcbiAgICAgICAgZGF5cyA9IFsn2KLahtixJywgJ9iz2YjZhdixJywgJ9in2rHYp9ix2YgnLCAn2KfYsdio2LknLCAn2K7ZhdmK2LMnLCAn2KzZhdi5JywgJ9qH2Ybah9ixJ107XG5cbiAgICB2YXIgc2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZCcsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGF5cyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9qEXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9iz2oDYp9q72YpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2Kfas9mK2YYg2YfZgdiq2Yog2KrZil0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vaqtin2YTZh9mHXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1var9iy2LHZitmEINmH2YHYqtmKXSBkZGRkIFvYqtmKXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINm+2YjYoScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2KfasycsXG4gICAgICAgICAgICBzOiAn2obZhtivINiz2YraqtmG2oonLFxuICAgICAgICAgICAgc3M6ICclZCDYs9mK2qrZhtqKJyxcbiAgICAgICAgICAgIG06ICfZh9qqINmF2YbZvScsXG4gICAgICAgICAgICBtbTogJyVkINmF2YbZvScsXG4gICAgICAgICAgICBoOiAn2YfaqiDaqtmE2KfaqicsXG4gICAgICAgICAgICBoaDogJyVkINqq2YTYp9qqJyxcbiAgICAgICAgICAgIGQ6ICfZh9qqINqP2YrZhtmH2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDaj9mK2YbZh9mGJyxcbiAgICAgICAgICAgIE06ICfZh9qqINmF2YfZitmG2YgnLFxuICAgICAgICAgICAgTU06ICclZCDZhdmH2YrZhtinJyxcbiAgICAgICAgICAgIHk6ICfZh9qqINiz2KfZhCcsXG4gICAgICAgICAgICB5eTogJyVkINiz2KfZhCcsXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IE5vcnRoZXJuIFNhbWkgW3NlXVxuLy8hIGF1dGhvcnMgOiBCw6VyZCBSb2xzdGFkIEhlbnJpa3NlbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rYXJhbWVsbFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHNlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2UnLCB7XG4gICAgICAgIG1vbnRoczogJ2/EkcSRYWphZ2Vtw6FubnVfZ3VvdnZhbcOhbm51X25qdWvEjWFtw6FubnVfY3VvxYtvbcOhbm51X21pZXNzZW3DoW5udV9nZWFzc2Vtw6FubnVfc3VvaWRuZW3DoW5udV9ib3JnZW3DoW5udV/EjWFrxI1hbcOhbm51X2dvbGdnb3Rtw6FubnVfc2vDoWJtYW3DoW5udV9qdW92bGFtw6FubnUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnb8SRxJFqX2d1b3Zfbmp1a19jdW9fbWllc19nZWFzX3N1b2lfYm9yZ1/EjWFrxI1fZ29sZ19za8OhYl9qdW92Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ3NvdG5hYmVhaXZpX3Z1b3Nzw6FyZ2FfbWHFi8WLZWLDoXJnYV9nYXNrYXZhaGtrdV9kdW9yYXN0YXRfYmVhcmphZGF0X2zDoXZ2YXJkYXQnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzb3RuX3Z1b3NfbWHFi19nYXNrX2R1b3JfYmVhcl9sw6F2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3Nfdl9tX2dfZF9iX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnTU1NTSBELiBbYi5dIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbb3RuZSB0aV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpaHR0aW4gdGldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdGldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWt0ZSB0aV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbb3ZkZGl0XSBkZGRkIFt0aV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyBnZWHFvmVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdtYcWLaXQgJXMnLFxuICAgICAgICAgICAgczogJ21vYWRkZSBzZWt1bmRkYXQnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRkYXQnLFxuICAgICAgICAgICAgbTogJ29rdGEgbWludWh0YScsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnVodGF0JyxcbiAgICAgICAgICAgIGg6ICdva3RhIGRpaW1tdScsXG4gICAgICAgICAgICBoaDogJyVkIGRpaW1tdXQnLFxuICAgICAgICAgICAgZDogJ29rdGEgYmVhaXZpJyxcbiAgICAgICAgICAgIGRkOiAnJWQgYmVhaXZ2aXQnLFxuICAgICAgICAgICAgTTogJ29rdGEgbcOhbm51JyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOhbnV0JyxcbiAgICAgICAgICAgIHk6ICdva3RhIGphaGtpJyxcbiAgICAgICAgICAgIHl5OiAnJWQgamFnaXQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNpbmhhbGVzZSBbc2ldXG4vLyEgYXV0aG9yIDogU2FtcGF0aCBTaXRpbmFtYWx1d2EgOiBodHRwczovL2dpdGh1Yi5jb20vc2FtcGF0aHNyaXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIC8qanNoaW50IC1XMTAwKi9cbiAgICB2YXIgc2kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaScsIHtcbiAgICAgICAgbW9udGhzOiAn4Lai4Lax4LeA4LeP4La74LeSX+C2tOC3meC2tuC2u+C3gOC3j+C2u+C3kl/gtrjgt4/gtrvgt4rgtq3gt5Rf4LaF4La04LeK4oCN4La74Lea4La94LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3neC3g+C3iuC2reC3lF/gt4Pgt5DgtrTgt4rgtq3gt5Dgtrjgt4rgtrbgtrvgt4pf4LaU4Laa4LeK4Lat4Led4La24La74LeKX+C2seC3nOC3gOC3kOC2uOC3iuC2tuC2u+C3il/gtq/gt5ngt4Pgt5Dgtrjgt4rgtrbgtrvgt4onLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4Lai4LaxX+C2tOC3meC2tl/gtrjgt4/gtrvgt4pf4LaF4La04LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3nV/gt4Pgt5DgtrTgt4pf4LaU4Laa4LeKX+C2seC3nOC3gOC3kF/gtq/gt5ngt4Pgt5AnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4LaJ4La74LeSX+C3g+C2s+C3lF/gtoXgtp9f4La24Lav4LePX+C2tuC3iuKAjeC2u+C3hF/gt4Pgt5Lgtprgt5Rf4LeD4LeZ4LaxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C2iV/gt4Nf4LaFX+C2tl/gtrbgt4rigI3gtrtf4LeD4LeSX+C3g+C3mScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdhIGg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnYSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMOiAnWVlZWSBNTU1NIEQnLFxuICAgICAgICAgICAgTExMOiAnWVlZWSBNTU1NIEQsIGEgaDptbScsXG4gICAgICAgICAgICBMTExMOiAnWVlZWSBNTU1NIEQgW+C3gOC3kOC2seC3kl0gZGRkZCwgYSBoOm1tOnNzJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LaF4LavXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4LeE4LeZ4LanXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4LaK4La64LeaXSBMVFvgtqddJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+C2tOC3g+C3lOC2nOC3kuC2ul0gZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPgtprgt5LgtrHgt4onLFxuICAgICAgICAgICAgcGFzdDogJyVz4Laa4LanIOC2tOC3meC2uycsXG4gICAgICAgICAgICBzOiAn4Lat4Lat4LeK4La04La7IOC2muC3kuC3hOC3kuC2tOC2uicsXG4gICAgICAgICAgICBzczogJ+C2reC2reC3iuC2tOC2uyAlZCcsXG4gICAgICAgICAgICBtOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeU4LeAJyxcbiAgICAgICAgICAgIG1tOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeUICVkJyxcbiAgICAgICAgICAgIGg6ICfgtrTgt5DgtronLFxuICAgICAgICAgICAgaGg6ICfgtrTgt5DgtrogJWQnLFxuICAgICAgICAgICAgZDogJ+C2r+C3kuC2seC2uicsXG4gICAgICAgICAgICBkZDogJ+C2r+C3kuC2sSAlZCcsXG4gICAgICAgICAgICBNOiAn4La44LeP4LeD4La6JyxcbiAgICAgICAgICAgIE1NOiAn4La44LeP4LeDICVkJyxcbiAgICAgICAgICAgIHk6ICfgt4Dgt4PgtrsnLFxuICAgICAgICAgICAgeXk6ICfgt4Dgt4PgtrsgJWQnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0g4LeA4LeQ4Lax4LeSLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg4LeA4LeQ4Lax4LeSJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C2tOC3meC2uyDgt4Dgtrvgt5R84La04LeD4LeKIOC3gOC2u+C3lHzgtrTgt5ku4LeAfOC2tC7gt4AuLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfgtrQu4LeALicgfHwgaW5wdXQgPT09ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfgtrQu4LeALicgOiAn4La04LeD4LeKIOC3gOC2u+C3lCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tOC3mS7gt4AuJyA6ICfgtrTgt5ngtrsg4LeA4La74LeUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTbG92YWsgW3NrXVxuLy8hIGF1dGhvciA6IE1hcnRpbiBNaW5rYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9rMnNcbi8vISBiYXNlZCBvbiB3b3JrIG9mIHBldHJiZWxhIDogaHR0cHM6Ly9naXRodWIuY29tL3BldHJiZWxhXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbW9udGhzID0gJ2phbnXDoXJfZmVicnXDoXJfbWFyZWNfYXByw61sX23DoWpfasO6bl9qw7psX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2phbl9mZWJfbWFyX2Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiBuID4gMSAmJiBuIDwgNTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6IC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdww6FyIHNla8O6bmQnIDogJ3DDoXIgc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzogLy8gOSBzZWNvbmRzIC8gaW4gOSBzZWNvbmRzIC8gOSBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2Vrw7puZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2VrdW5kYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdtJzogLy8gYSBtaW51dGUgLyBpbiBhIG1pbnV0ZSAvIGEgbWludXRlIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbsO6dGEnIDogaXNGdXR1cmUgPyAnbWluw7p0dScgOiAnbWluw7p0b3UnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW7DunR5JyA6ICdtaW7DunQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbsO6dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaCc6IC8vIGFuIGhvdXIgLyBpbiBhbiBob3VyIC8gYW4gaG91ciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdob2RpbmEnIDogaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91JztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2TDrW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdkJzogLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RlxYgnIDogJ2TFiG9tJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG5pJyA6ICdkbsOtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkxYhhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ00nOiAvLyBhIG1vbnRoIC8gaW4gYSBtb250aCAvIGEgbW9udGggYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzaWFjJyA6ICdtZXNpYWNvbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21lc2lhY2UnIDogJ21lc2lhY292Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtZXNpYWNtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAneSc6IC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdyb2snIDogJ3Jva29tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzogLy8gOSB5ZWFycyAvIGluIDkgeWVhcnMgLyA5IHllYXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAncm9rb3YnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Jva21pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2sgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaycsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgd2Vla2RheXM6ICduZWRlxL5hX3BvbmRlbG9rX3V0b3Jva19zdHJlZGFfxaF0dnJ0b2tfcGlhdG9rX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RuZXMgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t6YWp0cmEgb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdm8gxaF0dnJ0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHBpYXRvayBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0OiAncHJlZCAlcycsXG4gICAgICAgICAgICBzOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGg6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5OiB0cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU2xvdmVuaWFuIFtzbF1cbi8vISBhdXRob3IgOiBSb2JlcnQgU2Vkb3bFoWVrIDogaHR0cHM6Ly9naXRodWIuY29tL3NlZG92c2VrXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyAnbmVrYWogc2VrdW5kJ1xuICAgICAgICAgICAgICAgICAgICA6ICduZWthaiBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnc2VrdW5kbycgOiAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2VrdW5kaScgOiAnc2VrdW5kYWgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWt1bmRlJyA6ICdzZWt1bmRhaCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIG1pbnV0YScgOiAnZW5vIG1pbnV0byc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0byc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRpJyA6ICdtaW51dGFtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0ZScgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0JyA6ICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgdXJhJyA6ICdlbm8gdXJvJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3VyYScgOiAndXJvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmknIDogJ3VyYW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJlJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXInIDogJ3VyYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIGRhbicgOiAnZW5pbSBkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RhbicgOiAnZG5lbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2b21hJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkbmknIDogJ2RuZXZpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIG1lc2VjJyA6ICdlbmltIG1lc2VjZW0nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWMnIDogJ21lc2VjZW0nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjYScgOiAnbWVzZWNlbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2UnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNldicgOiAnbWVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VubyBsZXRvJyA6ICdlbmltIGxldG9tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldG8nIDogJ2xldG9tJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRpJyA6ICdsZXRvbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRhJyA6ICdsZXRpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXQnIDogJ2xldGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2wnLCB7XG4gICAgICAgIG1vbnRoczogJ2phbnVhcl9mZWJydWFyX21hcmVjX2FwcmlsX21hal9qdW5pal9qdWxpal9hdmd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl90b3IuX3NyZS5fxI1ldC5fcGV0Ll9zb2IuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3RvX3NyX8SNZV9wZV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELiBNTS4gWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5lcyBvYl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tqdXRyaSBvYl0gTFQnLFxuXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYWogb2JdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW3NvYm90b10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qaV0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfEjWV6ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHM6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzczogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eTogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBBbGJhbmlhbiBbc3FdXG4vLyEgYXV0aG9yIDogRmxha8OrcmltIElzbWFuaSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mbGFrZXJpbWlcbi8vISBhdXRob3IgOiBNZW5lbGlvbiBFbGVuc8O6bGUgOiBodHRwczovL2dpdGh1Yi5jb20vT2lyZVxuLy8hIGF1dGhvciA6IE9lcmQgQ3VrYWxsYSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9vZXJkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgc3EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcScsIHtcbiAgICAgICAgbW9udGhzOiAnSmFuYXJfU2hrdXJ0X01hcnNfUHJpbGxfTWFqX1FlcnNob3JfS29ycmlrX0d1c2h0X1NodGF0b3JfVGV0b3JfTsOrbnRvcl9EaGpldG9yJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9TaGtfTWFyX1ByaV9NYWpfUWVyX0tvcl9HdXNfU2h0X1RldF9Ow6tuX0Roaicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6snLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdEaWVfSMOrbl9NYXJfTcOrcl9FbmpfUHJlX1NodCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdEX0hfTWFfTcOrX0VfUF9TaCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvUER8TUQvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkgPT09ICdNJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXJzIDwgMTIgPyAnUEQnIDogJ01EJztcbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tTb3QgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW05lc8OrciBuw6tdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbsOrXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0RqZSBuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZSBrYWx1YXIgbsOrXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ27DqyAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgbcOrIHBhcsOrJyxcbiAgICAgICAgICAgIHM6ICdkaXNhIHNla29uZGEnLFxuICAgICAgICAgICAgc3M6ICclZCBzZWtvbmRhJyxcbiAgICAgICAgICAgIG06ICduasOrIG1pbnV0w6snLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGEnLFxuICAgICAgICAgICAgaDogJ25qw6sgb3LDqycsXG4gICAgICAgICAgICBoaDogJyVkIG9yw6snLFxuICAgICAgICAgICAgZDogJ25qw6sgZGl0w6snLFxuICAgICAgICAgICAgZGQ6ICclZCBkaXTDqycsXG4gICAgICAgICAgICBNOiAnbmrDqyBtdWFqJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbXVhaicsXG4gICAgICAgICAgICB5OiAnbmrDqyB2aXQnLFxuICAgICAgICAgICAgeXk6ICclZCB2aXRlJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzcTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBTZXJiaWFuIEN5cmlsbGljIFtzci1jeXJsXVxuLy8hIGF1dGhvciA6IE1pbGFuIEphbmHEjWtvdmnEhzxtaWxhbmphbmFja292aWNAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWxhbi1qXG4vLyEgYXV0aG9yIDogU3RlZmFuIENybmpha292acSHIDxzdGVmYW5AaG90bWFpbC5ycz4gOiBodHRwczovL2dpdGh1Yi5jb20vY3JuamFrb3ZpY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7XG4gICAgICAgICAgICAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsn0YHQtdC60YPQvdC00LAnLCAn0YHQtdC60YPQvdC00LUnLCAn0YHQtdC60YPQvdC00LgnXSxcbiAgICAgICAgICAgIG06IFsn0ZjQtdC00LDQvSDQvNC40L3Rg9GCJywgJ9GY0LXQtNC90LUg0LzQuNC90YPRgtC1J10sXG4gICAgICAgICAgICBtbTogWyfQvNC40L3Rg9GCJywgJ9C80LjQvdGD0YLQtScsICfQvNC40L3Rg9GC0LAnXSxcbiAgICAgICAgICAgIGg6IFsn0ZjQtdC00LDQvSDRgdCw0YInLCAn0ZjQtdC00L3QvtCzINGB0LDRgtCwJ10sXG4gICAgICAgICAgICBoaDogWyfRgdCw0YInLCAn0YHQsNGC0LAnLCAn0YHQsNGC0LgnXSxcbiAgICAgICAgICAgIGRkOiBbJ9C00LDQvScsICfQtNCw0L3QsCcsICfQtNCw0L3QsCddLFxuICAgICAgICAgICAgTU06IFsn0LzQtdGB0LXRhicsICfQvNC10YHQtdGG0LAnLCAn0LzQtdGB0LXRhtC4J10sXG4gICAgICAgICAgICB5eTogWyfQs9C+0LTQuNC90LAnLCAn0LPQvtC00LjQvdC1JywgJ9Cz0L7QtNC40L3QsCddLFxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxXG4gICAgICAgICAgICAgICAgPyB3b3JkS2V5WzBdXG4gICAgICAgICAgICAgICAgOiBudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNFxuICAgICAgICAgICAgICAgID8gd29yZEtleVsxXVxuICAgICAgICAgICAgICAgIDogd29yZEtleVsyXTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBudW1iZXIgK1xuICAgICAgICAgICAgICAgICAgICAnICcgK1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgIHZhciBzckN5cmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzci1jeXJsJywge1xuICAgICAgICBtb250aHM6ICfRmNCw0L3Rg9Cw0YBf0YTQtdCx0YDRg9Cw0YBf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LHQsNGAX9C+0LrRgtC+0LHQsNGAX9C90L7QstC10LzQsdCw0YBf0LTQtdGG0LXQvNCx0LDRgCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRmNCw0L0uX9GE0LXQsS5f0LzQsNGALl/QsNC/0YAuX9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQsy5f0YHQtdC/Ll/QvtC60YIuX9C90L7Qsi5f0LTQtdGGLicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfQvdC10LTQtdGZ0LBf0L/QvtC90LXQtNC10ZnQsNC6X9GD0YLQvtGA0LDQul/RgdGA0LXQtNCwX9GH0LXRgtCy0YDRgtCw0Lpf0L/QtdGC0LDQul/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfQvdC10LQuX9C/0L7QvS5f0YPRgtC+Ll/RgdGA0LUuX9GH0LXRgi5f0L/QtdGCLl/RgdGD0LEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9C90LVf0L/Qvl/Rg9GCX9GB0YBf0YfQtV/Qv9C1X9GB0YMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdELiBNLiBZWVlZLicsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWS4nLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZLiBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkuIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQtNCw0L3QsNGBINGDXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9GB0YPRgtGA0LAg0YNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0L3QtdC00LXRmdGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvRgdGA0LXQtNGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvRgdGD0LHQvtGC0YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gZGRkZCBb0YNdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1vRmNGD0YfQtSDRg10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9C90LXQtNC10ZnQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C+0L3QtdC00LXRmdC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0YPRgtC+0YDQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvRgdGA0LXQtNC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GH0LXRgtCy0YDRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0L/QtdGC0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRg9Cx0L7RgtC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICfQv9GA0LUgJXMnLFxuICAgICAgICAgICAgczogJ9C90LXQutC+0LvQuNC60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICfQtNCw0L0nLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ9C80LXRgdC10YYnLFxuICAgICAgICAgICAgTU06IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ9Cz0L7QtNC40L3RgycsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3JDeXJsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFNlcmJpYW4gW3NyXVxuLy8hIGF1dGhvciA6IE1pbGFuIEphbmHEjWtvdmnEhzxtaWxhbmphbmFja292aWNAZ21haWwuY29tPiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWxhbi1qXG4vLyEgYXV0aG9yIDogU3RlZmFuIENybmpha292acSHIDxzdGVmYW5AaG90bWFpbC5ycz4gOiBodHRwczovL2dpdGh1Yi5jb20vY3JuamFrb3ZpY1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7XG4gICAgICAgICAgICAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsnc2VrdW5kYScsICdzZWt1bmRlJywgJ3Nla3VuZGknXSxcbiAgICAgICAgICAgIG06IFsnamVkYW4gbWludXQnLCAnamVkbmUgbWludXRlJ10sXG4gICAgICAgICAgICBtbTogWydtaW51dCcsICdtaW51dGUnLCAnbWludXRhJ10sXG4gICAgICAgICAgICBoOiBbJ2plZGFuIHNhdCcsICdqZWRub2cgc2F0YSddLFxuICAgICAgICAgICAgaGg6IFsnc2F0JywgJ3NhdGEnLCAnc2F0aSddLFxuICAgICAgICAgICAgZGQ6IFsnZGFuJywgJ2RhbmEnLCAnZGFuYSddLFxuICAgICAgICAgICAgTU06IFsnbWVzZWMnLCAnbWVzZWNhJywgJ21lc2VjaSddLFxuICAgICAgICAgICAgeXk6IFsnZ29kaW5hJywgJ2dvZGluZScsICdnb2RpbmEnXSxcbiAgICAgICAgfSxcbiAgICAgICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMVxuICAgICAgICAgICAgICAgID8gd29yZEtleVswXVxuICAgICAgICAgICAgICAgIDogbnVtYmVyID49IDIgJiYgbnVtYmVyIDw9IDRcbiAgICAgICAgICAgICAgICA/IHdvcmRLZXlbMV1cbiAgICAgICAgICAgICAgICA6IHdvcmRLZXlbMl07XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XTtcbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyICtcbiAgICAgICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICB2YXIgc3IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JlLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnRC4gTS4gWVlZWS4nLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVkuJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWS4gSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZLiBIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanXEjWUgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JlZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXZWVrRGF5c1t0aGlzLmRheSgpXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdwcmUgJXMnLFxuICAgICAgICAgICAgczogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICAgICAgc3M6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQ6ICdkYW4nLFxuICAgICAgICAgICAgZGQ6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ21lc2VjJyxcbiAgICAgICAgICAgIE1NOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHk6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXk6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IHNpU3dhdGkgW3NzXVxuLy8hIGF1dGhvciA6IE5pY29sYWkgRGF2aWVzPG1haWxAbmljb2xhaS5pbz4gOiBodHRwczovL2dpdGh1Yi5jb20vbmljb2xhaWRhdmllc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3MnLCB7XG4gICAgICAgIG1vbnRoczogXCJCaGltYmlkdndhbmVfSW5kbG92YW5hX0luZGxvdidsZW5raHVsdV9NYWJhc2FfSW5raHdla2h3ZXRpX0luaGxhYmFfS2hvbHdhbmVfSW5nY2lfSW55b25pX0ltcGhhbGFfTHdldGlfSW5nb25nb25pXCIuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdCaGlfSW5hX0ludV9NYWJfSW5rX0luaF9LaG9fSWdjX0lueV9JbXBfTHdlX0lnbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdMaXNvbnRmb19VbXNvbWJ1bHVrb19MZXNpYmlsaV9MZXNpdHNhdGZ1X0xlc2luZV9MZXNpaGxhbnVfVW1nY2liZWxvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTGlzX1VtYl9Mc2JfTGVzX0xzaV9Mc2hfVW1nJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0xpX1VzX0xiX0x0X0xzX0xoX1VnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW05hbXVobGEgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0t1c2FzYSBuZ2FdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbmdhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0l0b2xvIG5nYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtsZWxpcGhlbGlsZV0gW25nYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICduZ2EgJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3dlbnRla2EgbmdhICVzJyxcbiAgICAgICAgICAgIHM6ICdlbWl6dXp3YW5hIGxvbWNhbmUnLFxuICAgICAgICAgICAgc3M6ICclZCBtenV6d2FuYScsXG4gICAgICAgICAgICBtOiAndW16dXp1JyxcbiAgICAgICAgICAgIG1tOiAnJWQgZW1penV6dScsXG4gICAgICAgICAgICBoOiAnbGlob3JhJyxcbiAgICAgICAgICAgIGhoOiAnJWQgZW1haG9yYScsXG4gICAgICAgICAgICBkOiAnbGlsYW5nYScsXG4gICAgICAgICAgICBkZDogJyVkIGVtYWxhbmdhJyxcbiAgICAgICAgICAgIE06ICdpbnlhbmdhJyxcbiAgICAgICAgICAgIE1NOiAnJWQgdGlueWFuZ2EnLFxuICAgICAgICAgICAgeTogJ3Vtbnlha2EnLFxuICAgICAgICAgICAgeXk6ICclZCBpbWlueWFrYScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdla3VzZW5pJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW1pbmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbnRzYW1iYW1hJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlYnVzdWt1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAnZWt1c2VuaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbWluaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW50c2FtYmFtYScgfHwgbWVyaWRpZW0gPT09ICdlYnVzdWt1Jykge1xuICAgICAgICAgICAgICAgIGlmIChob3VyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsOiAnJWQnLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3M7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogU3dlZGlzaCBbc3ZdXG4vLyEgYXV0aG9yIDogSmVucyBBbG0gOiBodHRwczovL2dpdGh1Yi5jb20vdWxtdXNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N2Jywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc8O2X23DpV90aV9vbl90b19mcl9sw7YnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkIEQgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ltb3Jnb25dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWfDpXJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tJXSBkZGRkW3NdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ2bDtnIgJXMgc2VkYW4nLFxuICAgICAgICAgICAgczogJ27DpWdyYSBzZWt1bmRlcicsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG06ICdlbiBtaW51dCcsXG4gICAgICAgICAgICBtbTogJyVkIG1pbnV0ZXInLFxuICAgICAgICAgICAgaDogJ2VuIHRpbW1lJyxcbiAgICAgICAgICAgIGhoOiAnJWQgdGltbWFyJyxcbiAgICAgICAgICAgIGQ6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNOiAnZW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbcOlbmFkZXInLFxuICAgICAgICAgICAgeTogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXk6ICclZCDDpXInLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oXFw6ZXxcXDphKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID1cbiAgICAgICAgICAgICAgICAgICAgfn4oKG51bWJlciAlIDEwMCkgLyAxMCkgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJzplJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICc6YSdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMlxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnOmEnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJzplJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAnOmUnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFN3YWhpbGkgW3N3XVxuLy8hIGF1dGhvciA6IEZhaGFkIEthc3NpbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWRzZWxcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3N3Jywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfQWdvX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdKdW1hcGlsaV9KdW1hdGF0dV9KdW1hbm5lX0p1bWF0YW5vX0FsaGFtaXNpX0lqdW1hYV9KdW1hbW9zaScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0pwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnSjJfSjNfSjRfSjVfQWxfSWpfSjEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnaGg6bW0gQScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2xlbyBzYWFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdba2VzaG8gc2FhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1t3aWtpIGlqYXlvXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2phbmFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW3dpa2kgaWxpeW9waXRhXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIGJhYWRheWUnLFxuICAgICAgICAgICAgcGFzdDogJ3Rva2VhICVzJyxcbiAgICAgICAgICAgIHM6ICdoaXZpIHB1bmRlJyxcbiAgICAgICAgICAgIHNzOiAnc2VrdW5kZSAlZCcsXG4gICAgICAgICAgICBtOiAnZGFraWthIG1vamEnLFxuICAgICAgICAgICAgbW06ICdkYWtpa2EgJWQnLFxuICAgICAgICAgICAgaDogJ3NhYSBsaW1vamEnLFxuICAgICAgICAgICAgaGg6ICdtYXNhYSAlZCcsXG4gICAgICAgICAgICBkOiAnc2lrdSBtb2phJyxcbiAgICAgICAgICAgIGRkOiAnc2lrdSAlZCcsXG4gICAgICAgICAgICBNOiAnbXdlemkgbW1vamEnLFxuICAgICAgICAgICAgTU06ICdtaWV6aSAlZCcsXG4gICAgICAgICAgICB5OiAnbXdha2EgbW1vamEnLFxuICAgICAgICAgICAgeXk6ICdtaWFrYSAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiBzdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYW1pbCBbdGFdXG4vLyEgYXV0aG9yIDogQXJqdW5rdW1hciBLcmlzaG5hbW9vcnRoeSA6IGh0dHBzOi8vZ2l0aHViLmNvbS90azEyMDQwNFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgIDE6ICfgr6cnLFxuICAgICAgICAgICAgMjogJ+CvqCcsXG4gICAgICAgICAgICAzOiAn4K+pJyxcbiAgICAgICAgICAgIDQ6ICfgr6onLFxuICAgICAgICAgICAgNTogJ+CvqycsXG4gICAgICAgICAgICA2OiAn4K+sJyxcbiAgICAgICAgICAgIDc6ICfgr60nLFxuICAgICAgICAgICAgODogJ+CvricsXG4gICAgICAgICAgICA5OiAn4K+vJyxcbiAgICAgICAgICAgIDA6ICfgr6YnLFxuICAgICAgICB9LFxuICAgICAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICAgICAn4K+nJzogJzEnLFxuICAgICAgICAgICAgJ+CvqCc6ICcyJyxcbiAgICAgICAgICAgICfgr6knOiAnMycsXG4gICAgICAgICAgICAn4K+qJzogJzQnLFxuICAgICAgICAgICAgJ+Cvqyc6ICc1JyxcbiAgICAgICAgICAgICfgr6wnOiAnNicsXG4gICAgICAgICAgICAn4K+tJzogJzcnLFxuICAgICAgICAgICAgJ+Cvric6ICc4JyxcbiAgICAgICAgICAgICfgr68nOiAnOScsXG4gICAgICAgICAgICAn4K+mJzogJzAnLFxuICAgICAgICB9O1xuXG4gICAgdmFyIHRhID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGEnLCB7XG4gICAgICAgIG1vbnRoczogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+CunuCuvuCur+Cuv+CuseCvjeCuseCvgeCuleCvjeCuleCuv+CutOCuruCviF/grqTgrr/grpngr43grpXgrp/gr43grpXgrr/grrTgrq7gr4hf4K6a4K+G4K614K+N4K614K6+4K6v4K+N4K6V4K6/4K604K6u4K+IX+CuquCvgeCupOCuqeCvjeCuleCuv+CutOCuruCviF/grrXgrr/grq/grr7grrTgrpXgr43grpXgrr/grrTgrq7gr4hf4K614K+G4K6z4K+N4K6z4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IX+CumuCuqeCuv+CuleCvjeCuleCuv+CutOCuruCviCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuvycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgrp7grr5f4K6k4K6/X+CumuCvhl/grqrgr4Ff4K614K6/X+CuteCvhl/grponLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVksIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vgrofgrqngr43grrHgr4FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4K6o4K6+4K6z4K+IXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4K6o4K+H4K6x4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgrpXgrp/grqjgr43grqQg4K614K6+4K6w4K6u4K+NXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCuh+CusuCvjScsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4K6u4K+B4K6p4K+NJyxcbiAgICAgICAgICAgIHM6ICfgrpLgrrDgr4Eg4K6a4K6/4K6yIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBzczogJyVkIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBtOiAn4K6S4K6w4K+BIOCuqOCuv+CuruCuv+Cun+CuruCvjScsXG4gICAgICAgICAgICBtbTogJyVkIOCuqOCuv+CuruCuv+Cun+CumeCvjeCuleCus+CvjScsXG4gICAgICAgICAgICBoOiAn4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICAgICAgaGg6ICclZCDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NJyxcbiAgICAgICAgICAgIGQ6ICfgrpLgrrDgr4Eg4K6o4K6+4K6z4K+NJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIE06ICfgrpLgrrDgr4Eg4K6u4K6+4K6k4K6u4K+NJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4K6u4K6+4K6k4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIHk6ICfgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4K6G4K6j4K+N4K6f4K+B4K6V4K6z4K+NJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94K614K6k4K+BLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgrrXgrqTgr4EnO1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4K+n4K+o4K+p4K+q4K+r4K+s4K+t4K+u4K+v4K+mXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyByZWZlciBodHRwOi8vdGEud2lraXBlZGlhLm9yZy9zLzFlcjFcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+Cur+CuvuCuruCuruCvjXzgrrXgr4jgrpXgrrHgr4h84K6V4K6+4K6y4K+IfOCuqOCuo+CvjeCuquCuleCusuCvjXzgro7grrHgr43grqrgrr7grp/gr4F84K6u4K6+4K6y4K+ILyxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCur+CuvuCuruCuruCvjSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCA2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K614K+I4K6V4K6x4K+IJzsgLy8g4K614K+I4K6V4K6x4K+IXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuleCuvuCusuCviCc7IC8vIOCuleCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrqjgrqPgr43grqrgrpXgrrLgr40nOyAvLyDgrqjgrqPgr43grqrgrpXgrrLgr41cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6O4K6x4K+N4K6q4K6+4K6f4K+BJzsgLy8g4K6O4K6x4K+N4K6q4K6+4K6f4K+BXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuruCuvuCusuCviCc7IC8vIOCuruCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgrq/grr7grq7grq7gr40nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrrXgr4jgrpXgrrHgr4gnIHx8IG1lcmlkaWVtID09PSAn4K6V4K6+4K6y4K+IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CuqOCuo+CvjeCuquCuleCusuCvjScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0YTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZWx1Z3UgW3RlXVxuLy8hIGF1dGhvciA6IEtyaXNobmEgQ2hhaXRhbnlhIFRob3RhIDogaHR0cHM6Ly9naXRodWIuY29tL2tjdGhvdGFcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB0ZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RlJywge1xuICAgICAgICBtb250aHM6ICfgsJzgsKjgsLXgsLDgsL9f4LCr4LC/4LCs4LGN4LCw4LC14LCw4LC/X+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL/gsLLgsY1f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCX4LC44LGN4LCf4LGBX+CwuOCxhuCwquCxjeCwn+CxhuCwguCwrOCwsOCxjV/gsIXgsJXgsY3gsJ/gsYvgsKzgsLDgsY1f4LCo4LC14LCC4LCs4LCw4LGNX+CwoeCwv+CwuOCxhuCwguCwrOCwsOCxjScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgsJzgsKguX+Cwq+Cwv+CwrOCxjeCwsC5f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwvy5f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCXLl/gsLjgsYbgsKrgsY0uX+CwheCwleCxjeCwn+Cxiy5f4LCo4LC1Ll/gsKHgsL/gsLjgsYYuJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CwhuCwpuCwv+CwteCwvuCwsOCwgl/gsLjgsYvgsK7gsLXgsL7gsLDgsIJf4LCu4LCC4LCX4LCz4LC14LC+4LCw4LCCX+CwrOCxgeCwp+CwteCwvuCwsOCwgl/gsJfgsYHgsLDgsYHgsLXgsL7gsLDgsIJf4LC24LGB4LCV4LGN4LCw4LC14LC+4LCw4LCCX+CwtuCwqOCwv+CwteCwvuCwsOCwgicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CwhuCwpuCwv1/gsLjgsYvgsK5f4LCu4LCC4LCX4LCzX+CwrOCxgeCwp1/gsJfgsYHgsLDgsYFf4LC24LGB4LCV4LGN4LCwX+CwtuCwqOCwvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgsIZf4LC44LGLX+CwruCwgl/gsKzgsYFf4LCX4LGBX+CwtuCxgV/gsLYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFM6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4LCo4LGH4LCh4LGBXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CwsOCxh+CwquCxgV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+CwqOCwv+CwqOCxjeCwqF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4LCX4LCkXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCwsuCxiycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4LCV4LGN4LCw4LC/4LCk4LCCJyxcbiAgICAgICAgICAgIHM6ICfgsJXgsYrgsKjgsY3gsKjgsL8g4LCV4LGN4LC34LCj4LC+4LCy4LGBJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4LC44LGG4LCV4LCo4LGN4LCy4LGBJyxcbiAgICAgICAgICAgIG06ICfgsJLgsJUg4LCo4LC/4LCu4LC/4LC34LCCJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4LCo4LC/4LCu4LC/4LC34LC+4LCy4LGBJyxcbiAgICAgICAgICAgIGg6ICfgsJLgsJUg4LCX4LCC4LCfJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LCX4LCC4LCf4LCy4LGBJyxcbiAgICAgICAgICAgIGQ6ICfgsJLgsJUg4LCw4LGL4LCc4LGBJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4LCw4LGL4LCc4LGB4LCy4LGBJyxcbiAgICAgICAgICAgIE06ICfgsJLgsJUg4LCo4LGG4LCyJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LCo4LGG4LCy4LCy4LGBJyxcbiAgICAgICAgICAgIHk6ICfgsJLgsJUg4LC44LCC4LC14LCk4LGN4LC44LCw4LCCJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4LC44LCC4LC14LCk4LGN4LC44LCw4LC+4LCy4LGBJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94LC1LyxcbiAgICAgICAgb3JkaW5hbDogJyVk4LC1JyxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CwsOCwvuCwpOCxjeCwsOCwv3zgsIngsKbgsK/gsIJ84LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCfOCwuOCwvuCwr+CwguCwpOCxjeCwsOCwgi8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CwsOCwvuCwpOCxjeCwsOCwvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwieCwpuCwr+CwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwieCwpuCwr+Cwgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUZXR1biBEaWxpIChFYXN0IFRpbW9yKSBbdGV0XVxuLy8hIGF1dGhvciA6IEpvc2h1YSBCcm9va3MgOiBodHRwczovL2dpdGh1Yi5jb20vam9zaGJyb29rc1xuLy8hIGF1dGhvciA6IE9ub3JpbyBEZSBKLiBBZm9uc28gOiBodHRwczovL2dpdGh1Yi5jb20vbWFyb2JvXG4vLyEgYXV0aG9yIDogU29uaWEgU2ltb2VzIDogaHR0cHM6Ly9naXRodWIuY29tL3Nvbmlhc2ltb2VzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGV0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGV0Jywge1xuICAgICAgICBtb250aHM6ICdKYW5laXJ1X0ZldmVyZWlydV9NYXJzdV9BYnJpbF9NYWl1X0p1w7F1X0p1bGx1X0FndXN0dV9TZXRlbWJydV9PdXR1YnJ1X05vdmVtYnJ1X0RlemVtYnJ1Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0RvbWluZ3VfU2VndW5kYV9UZXJzYV9LdWFydGFfS2ludGFfU2VzdGFfU2FiYWR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnRG9tX1NlZ19UZXJzX0t1YV9LaW50X1Nlc3RfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0RvX1NlZ19UZV9LdV9LaV9TZXNfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2hpbiBpaGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQWJhbiBpaGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaWhhXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0hvcmlzZWlrIGloYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW1hbmEga290dWtdIFtpaGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaWhhICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBsaXViYScsXG4gICAgICAgICAgICBzOiAnc2VndW5kdSBiYWx1bicsXG4gICAgICAgICAgICBzczogJ3NlZ3VuZHUgJWQnLFxuICAgICAgICAgICAgbTogJ21pbnV0dSBpZGEnLFxuICAgICAgICAgICAgbW06ICdtaW51dHUgJWQnLFxuICAgICAgICAgICAgaDogJ29yYXMgaWRhJyxcbiAgICAgICAgICAgIGhoOiAnb3JhcyAlZCcsXG4gICAgICAgICAgICBkOiAnbG9yb24gaWRhJyxcbiAgICAgICAgICAgIGRkOiAnbG9yb24gJWQnLFxuICAgICAgICAgICAgTTogJ2Z1bGFuIGlkYScsXG4gICAgICAgICAgICBNTTogJ2Z1bGFuICVkJyxcbiAgICAgICAgICAgIHk6ICd0aW5hbiBpZGEnLFxuICAgICAgICAgICAgeXk6ICd0aW5hbiAlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIH5+KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVGFqaWsgW3RnXVxuLy8hIGF1dGhvciA6IE9yaWYgTi4gSnIuIDogaHR0cHM6Ly9naXRodWIuY29tL29yaWYtanJcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMDogJy3Rg9C8JyxcbiAgICAgICAgMTogJy3Rg9C8JyxcbiAgICAgICAgMjogJy3RjtC8JyxcbiAgICAgICAgMzogJy3RjtC8JyxcbiAgICAgICAgNDogJy3Rg9C8JyxcbiAgICAgICAgNTogJy3Rg9C8JyxcbiAgICAgICAgNjogJy3Rg9C8JyxcbiAgICAgICAgNzogJy3Rg9C8JyxcbiAgICAgICAgODogJy3Rg9C8JyxcbiAgICAgICAgOTogJy3Rg9C8JyxcbiAgICAgICAgMTA6ICct0YPQvCcsXG4gICAgICAgIDEyOiAnLdGD0LwnLFxuICAgICAgICAxMzogJy3Rg9C8JyxcbiAgICAgICAgMjA6ICct0YPQvCcsXG4gICAgICAgIDMwOiAnLdGO0LwnLFxuICAgICAgICA0MDogJy3Rg9C8JyxcbiAgICAgICAgNTA6ICct0YPQvCcsXG4gICAgICAgIDYwOiAnLdGD0LwnLFxuICAgICAgICA3MDogJy3Rg9C8JyxcbiAgICAgICAgODA6ICct0YPQvCcsXG4gICAgICAgIDkwOiAnLdGD0LwnLFxuICAgICAgICAxMDA6ICct0YPQvCcsXG4gICAgfTtcblxuICAgIHZhciB0ZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RnJywge1xuICAgICAgICBtb250aHM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GP0L3QstCw0YDQuF/RhNC10LLRgNCw0LvQuF/QvNCw0YDRgtC4X9Cw0L/RgNC10LvQuF/QvNCw0LnQuF/QuNGO0L3QuF/QuNGO0LvQuF/QsNCy0LPRg9GB0YLQuF/RgdC10L3RgtGP0LHRgNC4X9C+0LrRgtGP0LHRgNC4X9C90L7Rj9Cx0YDQuF/QtNC10LrQsNCx0YDQuCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICApLFxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9GP0LrRiNCw0L3QsdC1X9C00YPRiNCw0L3QsdC1X9GB0LXRiNCw0L3QsdC1X9GH0L7RgNGI0LDQvdCx0LVf0L/QsNC90rfRiNCw0L3QsdC1X9K30YPQvNGK0LBf0YjQsNC90LHQtScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9GP0YjQsV/QtNGI0LFf0YHRiNCxX9GH0YjQsV/Qv9GI0LFf0rfRg9C8X9GI0L3QsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfRj9GIX9C00Yhf0YHRiF/Rh9GIX9C/0Yhf0rfQvF/RiNCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9CY0LzRgNOv0Lcg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQpNCw0YDQtNC+INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JTQuNGA06/QtyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGRb0LhdIFvSs9Cw0YTRgtCw0Lgg0L7Rj9C90LTQsCDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGRb0LhdIFvSs9Cw0YTRgtCw0Lgg0LPRg9C30LDRiNGC0LAg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQsdCw0YrQtNC4ICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDQv9C10YgnLFxuICAgICAgICAgICAgczogJ9GP0LrRh9Cw0L3QtCDRgdC+0L3QuNGPJyxcbiAgICAgICAgICAgIG06ICfRj9C6INC00LDSm9C40pvQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC00LDSm9C40pvQsCcsXG4gICAgICAgICAgICBoOiAn0Y/QuiDRgdC+0LDRgicsXG4gICAgICAgICAgICBoaDogJyVkINGB0L7QsNGCJyxcbiAgICAgICAgICAgIGQ6ICfRj9C6INGA06/QtycsXG4gICAgICAgICAgICBkZDogJyVkINGA06/QtycsXG4gICAgICAgICAgICBNOiAn0Y/QuiDQvNC+0rMnLFxuICAgICAgICAgICAgTU06ICclZCDQvNC+0rMnLFxuICAgICAgICAgICAgeTogJ9GP0Log0YHQvtC7JyxcbiAgICAgICAgICAgIHl5OiAnJWQg0YHQvtC7JyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9GI0LDQsXzRgdGD0LHSs3zRgNOv0Ld80LHQtdCz0L7Ssy8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ9GI0LDQsScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GB0YPQsdKzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GA06/QtycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0LHQtdCz0L7SsycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRiNCw0LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GB0YPQsdKzJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNOv0LcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cx0LXQs9C+0rMnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GI0LDQsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YPQvHzRjtC8KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRnO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRoYWkgW3RoXVxuLy8hIGF1dGhvciA6IEtyaWRzYWRhIFRoYW5hYnVscG9uZyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaXJuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0aCcsIHtcbiAgICAgICAgbW9udGhzOiAn4Lih4LiB4Lij4Liy4LiE4LihX+C4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jF/guKHguLXguJnguLLguITguKFf4LmA4Lih4Lip4Liy4Lii4LiZX+C4nuC4pOC4qeC4oOC4suC4hOC4oV/guKHguLTguJbguLjguJnguLLguKLguJlf4LiB4Lij4LiB4LiO4Liy4LiE4LihX+C4quC4tOC4h+C4q+C4suC4hOC4oV/guIHguLHguJnguKLguLLguKLguJlf4LiV4Li44Lil4Liy4LiE4LihX+C4nuC4pOC4qOC4iOC4tOC4geC4suC4ouC4mV/guJjguLHguJnguKfguLLguITguKEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4LihLuC4hC5f4LiBLuC4ni5f4Lih4Li1LuC4hC5f4LmA4LihLuC4oi5f4LieLuC4hC5f4Lih4Li0LuC4oi5f4LiBLuC4hC5f4LiqLuC4hC5f4LiBLuC4oi5f4LiVLuC4hC5f4LieLuC4oi5f4LiYLuC4hC4nLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4quC4muC4lOC4tV/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLCAvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxuICAgICAgICB3ZWVrZGF5c01pbjogJ+C4reC4si5f4LiILl/guK0uX+C4ni5f4Lie4LikLl/guKguX+C4qi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ+C4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHfOC4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Lin4Lix4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vguJ7guKPguLjguYjguIfguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGRb4Lir4LiZ4LmJ4LiyIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vguKfguLHguJldZGRkZFvguJfguLXguYjguYHguKXguYnguKcg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+C4reC4teC4gSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXPguJfguLXguYjguYHguKXguYnguKcnLFxuICAgICAgICAgICAgczogJ+C5hOC4oeC5iOC4geC4teC5iOC4p+C4tOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBzczogJyVkIOC4p+C4tOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBtOiAnMSDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgbW06ICclZCDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgaDogJzEg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGQ6ICcxIOC4p+C4seC4mScsXG4gICAgICAgICAgICBkZDogJyVkIOC4p+C4seC4mScsXG4gICAgICAgICAgICB3OiAnMSDguKrguLHguJvguJTguLLguKvguYwnLFxuICAgICAgICAgICAgd3c6ICclZCDguKrguLHguJvguJTguLLguKvguYwnLFxuICAgICAgICAgICAgTTogJzEg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIHk6ICcxIOC4m+C4tScsXG4gICAgICAgICAgICB5eTogJyVkIOC4m+C4tScsXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVHVya21lbiBbdGtdXG4vLyEgYXV0aG9yIDogQXRhbXlyYXQgQWJkeXJhaG1hbm92IDogaHR0cHM6Ly9naXRodWIuY29tL2F0YW15cmF0YWJkeVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiBcIidpbmppXCIsXG4gICAgICAgIDU6IFwiJ2luamlcIixcbiAgICAgICAgODogXCInaW5qaVwiLFxuICAgICAgICA3MDogXCInaW5qaVwiLFxuICAgICAgICA4MDogXCInaW5qaVwiLFxuICAgICAgICAyOiBcIiduamlcIixcbiAgICAgICAgNzogXCInbmppXCIsXG4gICAgICAgIDIwOiBcIiduamlcIixcbiAgICAgICAgNTA6IFwiJ25qaVwiLFxuICAgICAgICAzOiBcIifDvG5qaVwiLFxuICAgICAgICA0OiBcIifDvG5qaVwiLFxuICAgICAgICAxMDA6IFwiJ8O8bmppXCIsXG4gICAgICAgIDY6IFwiJ25qeVwiLFxuICAgICAgICA5OiBcIid1bmp5XCIsXG4gICAgICAgIDEwOiBcIid1bmp5XCIsXG4gICAgICAgIDMwOiBcIid1bmp5XCIsXG4gICAgICAgIDYwOiBcIid5bmp5XCIsXG4gICAgICAgIDkwOiBcIid5bmp5XCIsXG4gICAgfTtcblxuICAgIHZhciB0ayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RrJywge1xuICAgICAgICBtb250aHM6ICfDnWFud2FyX0Zld3JhbF9NYXJ0X0FwcmVsX01hw71fScO9dW5fScO9dWxfQXdndXN0X1NlbnTDvWFicl9Pa3TDvWFicl9Ob8O9YWJyX0Rla2Ficicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfDnWFuX0Zld19NYXJfQXByX01hw71fScO9bl9Jw71sX0F3Z19TZW5fT2t0X05vw71fRGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ8OdZWvFn2VuYmVfRHXFn2VuYmVfU2nFn2VuYmVfw4dhcsWfZW5iZV9QZW7Fn2VuYmVfQW5uYV/FnmVuYmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfDnWVrX0R1xZ9fU2nFn1/Dh2FyX1Blbl9Bbm5fxZ5lbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfDnWtfRMWfX1PFn1/Dh3JfUG5fQW5fxZ5uJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2J1Z8O8biBzYWdhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tlcnRpciBzYWdhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbaW5kaWtpXSBkZGRkIFtzYWdhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tkw7zDvW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2dlw6dlbl0gZGRkZCBbc2FnYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMgc2/FiCcsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw7bFiCcsXG4gICAgICAgICAgICBzOiAnYmlybsOkw6dlIHNla3VudCcsXG4gICAgICAgICAgICBtOiAnYmlyIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXQnLFxuICAgICAgICAgICAgaDogJ2JpciBzYWdhdCcsXG4gICAgICAgICAgICBoaDogJyVkIHNhZ2F0JyxcbiAgICAgICAgICAgIGQ6ICdiaXIgZ8O8bicsXG4gICAgICAgICAgICBkZDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgTTogJ2JpciBhw70nLFxuICAgICAgICAgICAgTU06ICclZCBhw70nLFxuICAgICAgICAgICAgeTogJ2JpciDDvXlsJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw715bCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIFwiJ3VuanlcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IChudW1iZXIgJSAxMDApIC0gYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUYWdhbG9nIChQaGlsaXBwaW5lcykgW3RsLXBoXVxuLy8hIGF1dGhvciA6IERhbiBIYWdtYW4gOiBodHRwczovL2dpdGh1Yi5jb20vaGFnbWFuZGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdGxQaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RsLXBoJywge1xuICAgICAgICBtb250aHM6ICdFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmUnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnRW5lX1BlYl9NYXJfQWJyX01heV9IdW5fSHVsX0Fnb19TZXRfT2t0X05vYl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnTGluZ2dvX0x1bmVzX01hcnRlc19NaXllcmt1bGVzX0h1d2ViZXNfQml5ZXJuZXNfU2FiYWRvJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0xpX0x1X01hX01pX0h1X0JpX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ01NL0QvWVlZWScsXG4gICAgICAgICAgICBMTDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gREQsIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ0xUIFtuZ2F5b25nIGFyYXddJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQnVrYXMgbmddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTFQgW3NhIHN1c3Vub2QgbmFdIGRkZGQnLFxuICAgICAgICAgICAgbGFzdERheTogJ0xUIFtrYWhhcG9uXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xUIFtub29uZyBuYWthcmFhbmddIGRkZGQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdzYSBsb29iIG5nICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyBhbmcgbmFrYWxpcGFzJyxcbiAgICAgICAgICAgIHM6ICdpbGFuZyBzZWd1bmRvJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtOiAnaXNhbmcgbWludXRvJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRvJyxcbiAgICAgICAgICAgIGg6ICdpc2FuZyBvcmFzJyxcbiAgICAgICAgICAgIGhoOiAnJWQgb3JhcycsXG4gICAgICAgICAgICBkOiAnaXNhbmcgYXJhdycsXG4gICAgICAgICAgICBkZDogJyVkIGFyYXcnLFxuICAgICAgICAgICAgTTogJ2lzYW5nIGJ1d2FuJyxcbiAgICAgICAgICAgIE1NOiAnJWQgYnV3YW4nLFxuICAgICAgICAgICAgeTogJ2lzYW5nIHRhb24nLFxuICAgICAgICAgICAgeXk6ICclZCB0YW9uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsUGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogS2xpbmdvbiBbdGxoXVxuLy8hIGF1dGhvciA6IERvbWluaWthIEtydWsgOiBodHRwczovL2dpdGh1Yi5jb20vYW1hcmFudGhyb3NlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgbnVtYmVyc05vdW5zID0gJ3BhZ2hfd2HigJlfY2hh4oCZX3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0Jy5zcGxpdCgnXycpO1xuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlRnV0dXJlKG91dHB1dCkge1xuICAgICAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICAgICAgdGltZSA9XG4gICAgICAgICAgICBvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xXG4gICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICdsZVMnXG4gICAgICAgICAgICAgICAgOiBvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xXG4gICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICd3YVEnXG4gICAgICAgICAgICAgICAgOiBvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xXG4gICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICduZW0nXG4gICAgICAgICAgICAgICAgOiB0aW1lICsgJyBwSXEnO1xuICAgICAgICByZXR1cm4gdGltZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVQYXN0KG91dHB1dCkge1xuICAgICAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICAgICAgdGltZSA9XG4gICAgICAgICAgICBvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xXG4gICAgICAgICAgICAgICAgPyB0aW1lLnNsaWNlKDAsIC0zKSArICdIdeKAmSdcbiAgICAgICAgICAgICAgICA6IG91dHB1dC5pbmRleE9mKCdqYXInKSAhPT0gLTFcbiAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dlbidcbiAgICAgICAgICAgICAgICA6IG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTFcbiAgICAgICAgICAgICAgICA/IHRpbWUuc2xpY2UoMCwgLTMpICsgJ2JlbidcbiAgICAgICAgICAgICAgICA6IHRpbWUgKyAnIHJldCc7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG51bWJlck5vdW4gPSBudW1iZXJBc05vdW4obnVtYmVyKTtcbiAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgbHVwJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgdHVwJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgcmVwJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFqJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFyJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgRElTJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bWJlckFzTm91bihudW1iZXIpIHtcbiAgICAgICAgdmFyIGh1bmRyZWQgPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDAwKSAvIDEwMCksXG4gICAgICAgICAgICB0ZW4gPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDApIC8gMTApLFxuICAgICAgICAgICAgb25lID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICB3b3JkID0gJyc7XG4gICAgICAgIGlmIChodW5kcmVkID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSBudW1iZXJzTm91bnNbaHVuZHJlZF0gKyAndmF0bGgnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW4gPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9ICh3b3JkICE9PSAnJyA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1t0ZW5dICsgJ21hSCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZSA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gKHdvcmQgIT09ICcnID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW29uZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdvcmQgPT09ICcnID8gJ3BhZ2gnIDogd29yZDtcbiAgICB9XG5cbiAgICB2YXIgdGxoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGxoJywge1xuICAgICAgICBtb250aHM6ICd0ZXJh4oCZIGphciB3YeKAmV90ZXJh4oCZIGphciBjaGHigJlfdGVyYeKAmSBqYXIgd2VqX3RlcmHigJkgamFyIGxvU190ZXJh4oCZIGphciB2YWdoX3RlcmHigJkgamFyIGphdl90ZXJh4oCZIGphciBTb2NoX3RlcmHigJkgamFyIGNob3JnaF90ZXJh4oCZIGphciBIdXRfdGVyYeKAmSBqYXIgd2HigJltYUhfdGVyYeKAmSBqYXIgd2HigJltYUggd2HigJlfdGVyYeKAmSBqYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phciB3YeKAmV9qYXIgY2hh4oCZX2phciB3ZWpfamFyIGxvU19qYXIgdmFnaF9qYXIgamF2X2phciBTb2NoX2phciBjaG9yZ2hfamFyIEh1dF9qYXIgd2HigJltYUhfamFyIHdh4oCZbWFIIHdh4oCZX2phciB3YeKAmW1hSCBjaGHigJknLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEYUhqYWpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbd2HigJlsZVNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTExMJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbd2HigJlIdeKAmV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMTEwnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6IHRyYW5zbGF0ZUZ1dHVyZSxcbiAgICAgICAgICAgIHBhc3Q6IHRyYW5zbGF0ZVBhc3QsXG4gICAgICAgICAgICBzOiAncHVTIGx1cCcsXG4gICAgICAgICAgICBzczogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbTogJ3dh4oCZIHR1cCcsXG4gICAgICAgICAgICBtbTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaDogJ3dh4oCZIHJlcCcsXG4gICAgICAgICAgICBoaDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZDogJ3dh4oCZIGphaicsXG4gICAgICAgICAgICBkZDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTTogJ3dh4oCZIGphcicsXG4gICAgICAgICAgICBNTTogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeTogJ3dh4oCZIERJUycsXG4gICAgICAgICAgICB5eTogdHJhbnNsYXRlLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBUdXJraXNoIFt0cl1cbi8vISBhdXRob3JzIDogRXJoYW4gR3VuZG9nYW4gOiBodHRwczovL2dpdGh1Yi5jb20vZXJoYW5ndW5kb2dhbixcbi8vISAgICAgICAgICAgQnVyYWsgWWnEn2l0IEtheWE6IGh0dHBzOi8vZ2l0aHViLmNvbS9CWUtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogXCInaW5jaVwiLFxuICAgICAgICA1OiBcIidpbmNpXCIsXG4gICAgICAgIDg6IFwiJ2luY2lcIixcbiAgICAgICAgNzA6IFwiJ2luY2lcIixcbiAgICAgICAgODA6IFwiJ2luY2lcIixcbiAgICAgICAgMjogXCInbmNpXCIsXG4gICAgICAgIDc6IFwiJ25jaVwiLFxuICAgICAgICAyMDogXCInbmNpXCIsXG4gICAgICAgIDUwOiBcIiduY2lcIixcbiAgICAgICAgMzogXCInw7xuY8O8XCIsXG4gICAgICAgIDQ6IFwiJ8O8bmPDvFwiLFxuICAgICAgICAxMDA6IFwiJ8O8bmPDvFwiLFxuICAgICAgICA2OiBcIiduY8SxXCIsXG4gICAgICAgIDk6IFwiJ3VuY3VcIixcbiAgICAgICAgMTA6IFwiJ3VuY3VcIixcbiAgICAgICAgMzA6IFwiJ3VuY3VcIixcbiAgICAgICAgNjA6IFwiJ8SxbmPEsVwiLFxuICAgICAgICA5MDogXCInxLFuY8SxXCIsXG4gICAgfTtcblxuICAgIHZhciB0ciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RyJywge1xuICAgICAgICBtb250aHM6ICdPY2FrX8WedWJhdF9NYXJ0X05pc2FuX01hecSxc19IYXppcmFuX1RlbW11el9BxJ91c3Rvc19FeWzDvGxfRWtpbV9LYXPEsW1fQXJhbMSxaycuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdPY2FfxZ51Yl9NYXJfTmlzX01heV9IYXpfVGVtX0HEn3VfRXlsX0VraV9LYXNfQXJhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1BhemFyX1BhemFydGVzaV9TYWzEsV/Dh2FyxZ9hbWJhX1BlcsWfZW1iZV9DdW1hX0N1bWFydGVzaScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1Bhel9QdHNfU2FsX8OHYXJfUGVyX0N1bV9DdHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnUHpfUHRfU2Ffw4dhX1BlX0N1X0N0Jy5zcGxpdCgnXycpLFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8O2w7YnIDogJ8OWw5YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfDtnMnIDogJ8OWUyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/DtsO2fMOWw5Z8w7ZzfMOWUy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAnw7ZzJyB8fCBpbnB1dCA9PT0gJ8OWUyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbeWFyxLFuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW2dlbGVjZWtdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZMO8bl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZ2XDp2VuXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDtm5jZScsXG4gICAgICAgICAgICBzOiAnYmlya2HDpyBzYW5peWUnLFxuICAgICAgICAgICAgc3M6ICclZCBzYW5peWUnLFxuICAgICAgICAgICAgbTogJ2JpciBkYWtpa2EnLFxuICAgICAgICAgICAgbW06ICclZCBkYWtpa2EnLFxuICAgICAgICAgICAgaDogJ2JpciBzYWF0JyxcbiAgICAgICAgICAgIGhoOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBkOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQ6ICclZCBnw7xuJyxcbiAgICAgICAgICAgIHc6ICdiaXIgaGFmdGEnLFxuICAgICAgICAgICAgd3c6ICclZCBoYWZ0YScsXG4gICAgICAgICAgICBNOiAnYmlyIGF5JyxcbiAgICAgICAgICAgIE1NOiAnJWQgYXknLFxuICAgICAgICAgICAgeTogJ2JpciB5xLFsJyxcbiAgICAgICAgICAgIHl5OiAnJWQgecSxbCcsXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIFwiJ8SxbmPEsVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gKG51bWJlciAlIDEwMCkgLSBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFRhbG9zc2FuIFt0emxdXG4vLyEgYXV0aG9yIDogUm9iaW4gdmFuIGRlciBWbGlldCA6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2JpbjB2YW4wZGVyMHZcbi8vISBhdXRob3IgOiBJdXN0w6wgQ2FudW5cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIC8vIEFmdGVyIHRoZSB5ZWFyIHRoZXJlIHNob3VsZCBiZSBhIHNsYXNoIGFuZCB0aGUgYW1vdW50IG9mIHllYXJzIHNpbmNlIERlY2VtYmVyIDI2LCAxOTc5IGluIFJvbWFuIG51bWVyYWxzLlxuICAgIC8vIFRoaXMgaXMgY3VycmVudGx5IHRvbyBkaWZmaWN1bHQgKG1heWJlIGV2ZW4gaW1wb3NzaWJsZSkgdG8gYWRkLlxuICAgIHZhciB0emwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0emwnLCB7XG4gICAgICAgIG1vbnRoczogJ0phbnVhcl9GZXZyYWdsaF9NYXLDp19BdnLDr3VfTWFpX0fDvG5fSnVsaWFfR3VzY2h0X1NldGVtdmFyX0xpc3RvcMOkdHNfTm9lbXZhcl9aZWNlbXZhcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW5fRmV2X01hcl9BdnJfTWFpX0fDvG5fSnVsX0d1c19TZXRfTGlzX05vZV9aZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAnU8O6bGFkaV9Mw7puZcOnaV9NYWl0emlfTcOhcmN1cmlfWGjDumFkaV9WacOpbmVyw6dpX1PDoXR1cmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTw7psX0zDum5fTWFpX03DoXJfWGjDul9WacOpX1PDoXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU8O6X0zDul9NYV9Nw6FfWGhfVmlfU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISC5tbScsXG4gICAgICAgICAgICBMVFM6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIFtsaV0gRC4gTU1NTSBbZGFsbGFzXSBZWVlZIEhILm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RcXCdvfGRcXCdhL2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZCdvXCIgPT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyBcImQnb1wiIDogXCJEJ09cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyBcImQnYVwiIDogXCJEJ0FcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbb3hoaSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tkZW3DoCDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpZWlyaSDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbc8O8ciBlbF0gZGRkZCBbbGFzdGV1IMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29zcHJlaSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnamElcycsXG4gICAgICAgICAgICBzOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3M6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGg6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQ6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU06IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5OiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXk6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWw6ICclZC4nLFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgczogWyd2aWVuc2FzIHNlY3VuZHMnLCBcIidpZW5zYXMgc2VjdW5kc1wiXSxcbiAgICAgICAgICAgIHNzOiBbbnVtYmVyICsgJyBzZWN1bmRzJywgJycgKyBudW1iZXIgKyAnIHNlY3VuZHMnXSxcbiAgICAgICAgICAgIG06IFtcIiduIG3DrXV0XCIsIFwiJ2llbnMgbcOtdXRcIl0sXG4gICAgICAgICAgICBtbTogW251bWJlciArICcgbcOtdXRzJywgJycgKyBudW1iZXIgKyAnIG3DrXV0cyddLFxuICAgICAgICAgICAgaDogW1wiJ24gw75vcmFcIiwgXCInaWVuc2Egw75vcmFcIl0sXG4gICAgICAgICAgICBoaDogW251bWJlciArICcgw75vcmFzJywgJycgKyBudW1iZXIgKyAnIMO+b3JhcyddLFxuICAgICAgICAgICAgZDogW1wiJ24geml1YVwiLCBcIidpZW5zYSB6aXVhXCJdLFxuICAgICAgICAgICAgZGQ6IFtudW1iZXIgKyAnIHppdWFzJywgJycgKyBudW1iZXIgKyAnIHppdWFzJ10sXG4gICAgICAgICAgICBNOiBbXCInbiBtZXNcIiwgXCInaWVucyBtZXNcIl0sXG4gICAgICAgICAgICBNTTogW251bWJlciArICcgbWVzZW4nLCAnJyArIG51bWJlciArICcgbWVzZW4nXSxcbiAgICAgICAgICAgIHk6IFtcIiduIGFyXCIsIFwiJ2llbnMgYXJcIl0sXG4gICAgICAgICAgICB5eTogW251bWJlciArICcgYXJzJywgJycgKyBudW1iZXIgKyAnIGFycyddLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXNGdXR1cmVcbiAgICAgICAgICAgID8gZm9ybWF0W2tleV1bMF1cbiAgICAgICAgICAgIDogd2l0aG91dFN1ZmZpeFxuICAgICAgICAgICAgPyBmb3JtYXRba2V5XVswXVxuICAgICAgICAgICAgOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHpsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IENlbnRyYWwgQXRsYXMgVGFtYXppZ2h0IExhdGluIFt0em0tbGF0bl1cbi8vISBhdXRob3IgOiBBYmRlbCBTYWlkIDogaHR0cHM6Ly9naXRodWIuY29tL2FiZGVsc2FpZFxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHR6bUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0tbGF0bicsIHtcbiAgICAgICAgbW9udGhzOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1thc2RraCBnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2Fza2EgZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2Fzc2FudCBnXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2ddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnZGFka2ggcyB5YW4gJXMnLFxuICAgICAgICAgICAgcGFzdDogJ3lhbiAlcycsXG4gICAgICAgICAgICBzOiAnaW1paycsXG4gICAgICAgICAgICBzczogJyVkIGltaWsnLFxuICAgICAgICAgICAgbTogJ21pbnXhuI0nLFxuICAgICAgICAgICAgbW06ICclZCBtaW514biNJyxcbiAgICAgICAgICAgIGg6ICdzYcmbYScsXG4gICAgICAgICAgICBoaDogJyVkIHRhc3NhyZtpbicsXG4gICAgICAgICAgICBkOiAnYXNzJyxcbiAgICAgICAgICAgIGRkOiAnJWQgb3NzYW4nLFxuICAgICAgICAgICAgTTogJ2F5b3dyJyxcbiAgICAgICAgICAgIE1NOiAnJWQgaXl5aXJuJyxcbiAgICAgICAgICAgIHk6ICdhc2dhcycsXG4gICAgICAgICAgICB5eTogJyVkIGlzZ2FzbicsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogMTIsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHptTGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDZW50cmFsIEF0bGFzIFRhbWF6aWdodCBbdHptXVxuLy8hIGF1dGhvciA6IEFiZGVsIFNhaWQgOiBodHRwczovL2dpdGh1Yi5jb20vYWJkZWxzYWlkXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdHptID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptJywge1xuICAgICAgICBtb250aHM6ICfitYnitY/itY/itLDitaLitZRf4rSx4rWV4rSw4rWi4rWVX+K1juK0sOK1leK1ml/itYnitLHitZTitYnitZRf4rWO4rSw4rWi4rWi4rWTX+K1ouK1k+K1j+K1ouK1k1/itaLitZPitY3itaLitZPitaNf4rWW4rWT4rWb4rWcX+K1m+K1k+K1nOK0sOK1j+K0seK1ieK1lF/itL3itZ/itZPitLHitZVf4rWP4rWT4rWh4rSw4rWP4rSx4rWJ4rWUX+K0t+K1k+K1iuK1j+K0seK1ieK1lCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfitYnitY/itY/itLDitaLitZRf4rSx4rWV4rSw4rWi4rWVX+K1juK0sOK1leK1ml/itYnitLHitZTitYnitZRf4rWO4rSw4rWi4rWi4rWTX+K1ouK1k+K1j+K1ouK1k1/itaLitZPitY3itaLitZPitaNf4rWW4rWT4rWb4rWcX+K1m+K1k+K1nOK0sOK1j+K0seK1ieK1lF/itL3itZ/itZPitLHitZVf4rWP4rWT4rWh4rSw4rWP4rSx4rWJ4rWUX+K0t+K1k+K1iuK1j+K0seK1ieK1lCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4rSw4rWZ4rS34rWFIOK0tF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vitLDitZnitL3itLAg4rS0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW+K0tF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vitLDitZritLDitY/itZwg4rS0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+K0tF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfitLfitLDitLfitYUg4rWZIOK1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBwYXN0OiAn4rWi4rSw4rWPICVzJyxcbiAgICAgICAgICAgIHM6ICfitYnitY7itYnitL0nLFxuICAgICAgICAgICAgc3M6ICclZCDitYnitY7itYnitL0nLFxuICAgICAgICAgICAgbTogJ+K1juK1ieK1j+K1k+K0uicsXG4gICAgICAgICAgICBtbTogJyVkIOK1juK1ieK1j+K1k+K0uicsXG4gICAgICAgICAgICBoOiAn4rWZ4rSw4rWE4rSwJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4rWc4rSw4rWZ4rWZ4rSw4rWE4rWJ4rWPJyxcbiAgICAgICAgICAgIGQ6ICfitLDitZnitZknLFxuICAgICAgICAgICAgZGQ6ICclZCBv4rWZ4rWZ4rSw4rWPJyxcbiAgICAgICAgICAgIE06ICfitLDitaJv4rWT4rWUJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4rWJ4rWi4rWi4rWJ4rWU4rWPJyxcbiAgICAgICAgICAgIHk6ICfitLDitZnitLPitLDitZknLFxuICAgICAgICAgICAgeXk6ICclZCDitYnitZnitLPitLDitZnitY8nLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDEyLCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHR6bTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVeWdodXIgKENoaW5hKSBbdWctY25dXG4vLyEgYXV0aG9yOiBib3lhcSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9ib3lhcVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHVnQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1Zy1jbicsIHtcbiAgICAgICAgbW9udGhzOiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2YrbldmD2LTbldmG2KjblV/Yr9uI2LTbldmG2KjblV/Ys9uV2YrYtNuV2YbYqNuVX9qG2KfYsdi025XZhtio25Vf2b7bldmK2LTbldmG2KjblV/YrNuI2YXblV/YtNuV2YbYqNuVJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfZituVX9iv24hf2LPblV/ahtinX9m+25Vf2KzbiF/YtNuVJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YknLFxuICAgICAgICAgICAgTExMOiAnWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRk2IwgWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9mK25DYsdmJ2YUg2YPbkNqG25V82LPbldq+25XYsXzahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhnzahtuI2LR82obbiNi02KrZidmGINmD25DZitmJ2YZ82YPbldqGLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2YrbkNix2YnZhSDZg9uQ2obblScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9iz25XavtuV2LEnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJyB8fCBtZXJpZGllbSA9PT0gJ9mD25XahicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZituQ2LHZidmFINmD25DahtuVJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9iz25XavtuV2LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfahtuI2LQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZg9uV2oYnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYqNuI2q/biNmGINiz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2Kbbldiq25Ug2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb2YPbkNmE25XYsdmD2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KrbhtmG24jar9uI2YZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9im2KfZhNiv2YnZhtmC2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg2YPbkNmK2YnZhicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2Kjbh9ix24fZhicsXG4gICAgICAgICAgICBzOiAn2YbbldqG2obblSDYs9uQ2YPZiNmG2KonLFxuICAgICAgICAgICAgc3M6ICclZCDYs9uQ2YPZiNmG2KonLFxuICAgICAgICAgICAgbTogJ9io2YnYsSDZhdmJ2Ybbh9iqJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2YXZidmG24fYqicsXG4gICAgICAgICAgICBoOiAn2KjZidixINiz2KfYptuV2KonLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2KbbldiqJyxcbiAgICAgICAgICAgIGQ6ICfYqNmJ2LEg2YPbiNmGJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2YPbiNmGJyxcbiAgICAgICAgICAgIE06ICfYqNmJ2LEg2KbYp9mKJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KbYp9mKJyxcbiAgICAgICAgICAgIHk6ICfYqNmJ2LEg2YrZidmEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2YrZidmEJyxcbiAgICAgICAgfSxcblxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oLdmD24jZhtmJfC3Yptin2Yp8Ldq+25XZvtiq25UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdmD24jZhtmJJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct2r7bldm+2KrblSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdWdDbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBVa3JhaW5pYW4gW3VrXVxuLy8hIGF1dGhvciA6IHplbWxhbmluIDogaHR0cHM6Ly9naXRodWIuY29tL3plbWxhbmluXG4vLyEgQXV0aG9yIDogTWVuZWxpb24gRWxlbnPDumxlIDogaHR0cHM6Ly9naXRodWIuY29tL09pcmVcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMVxuICAgICAgICAgICAgPyBmb3Jtc1swXVxuICAgICAgICAgICAgOiBudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMClcbiAgICAgICAgICAgID8gZm9ybXNbMV1cbiAgICAgICAgICAgIDogZm9ybXNbMl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgIHNzOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Lhf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG1tOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLQuNC70LjQvdCwX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScgOiAn0YXQstC40LvQuNC90YNf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyxcbiAgICAgICAgICAgIGhoOiB3aXRob3V0U3VmZml4ID8gJ9Cz0L7QtNC40L3QsF/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvScgOiAn0LPQvtC00LjQvdGDX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9JyxcbiAgICAgICAgICAgIGRkOiAn0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyJyxcbiAgICAgICAgICAgIE1NOiAn0LzRltGB0Y/RhtGMX9C80ZbRgdGP0YbRll/QvNGW0YHRj9GG0ZbQsicsXG4gICAgICAgICAgICB5eTogJ9GA0ZbQul/RgNC+0LrQuF/RgNC+0LrRltCyJyxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsCcgOiAn0YXQstC40LvQuNC90YMnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LAnIDogJ9Cz0L7QtNC40L3Rgyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c0Nhc2VSZXBsYWNlKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSB7XG4gICAgICAgICAgICAgICAgbm9taW5hdGl2ZTogJ9C90LXQtNGW0LvRj1/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00LBf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGPX9GB0YPQsdC+0YLQsCcuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgYWNjdXNhdGl2ZTogJ9C90LXQtNGW0LvRjl/Qv9C+0L3QtdC00ZbQu9C+0Lpf0LLRltCy0YLQvtGA0L7Qul/RgdC10YDQtdC00YNf0YfQtdGC0LLQtdGAX9C/4oCZ0Y/RgtC90LjRhtGOX9GB0YPQsdC+0YLRgycuc3BsaXQoXG4gICAgICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgZ2VuaXRpdmU6ICfQvdC10LTRltC70ZZf0L/QvtC90LXQtNGW0LvQutCwX9Cy0ZbQstGC0L7RgNC60LBf0YHQtdGA0LXQtNC4X9GH0LXRgtCy0LXRgNCz0LBf0L/igJnRj9GC0L3QuNGG0ZZf0YHRg9Cx0L7RgtC4Jy5zcGxpdChcbiAgICAgICAgICAgICAgICAgICAgJ18nXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub3VuQ2FzZTtcblxuICAgICAgICBpZiAobSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ11cbiAgICAgICAgICAgICAgICAuc2xpY2UoMSwgNylcbiAgICAgICAgICAgICAgICAuY29uY2F0KHdlZWtkYXlzWydub21pbmF0aXZlJ10uc2xpY2UoMCwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ107XG4gICAgICAgIH1cblxuICAgICAgICBub3VuQ2FzZSA9IC8oXFxbW9CS0LLQo9GDXVxcXSkgP2RkZGQvLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgPyAnYWNjdXNhdGl2ZSdcbiAgICAgICAgICAgIDogL1xcWz8oPzrQvNC40L3Rg9C70L7Rl3zQvdCw0YHRgtGD0L/QvdC+0ZcpPyA/XFxdID9kZGRkLy50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgID8gJ2dlbml0aXZlJ1xuICAgICAgICAgICAgOiAnbm9taW5hdGl2ZSc7XG4gICAgICAgIHJldHVybiB3ZWVrZGF5c1tub3VuQ2FzZV1bbS5kYXkoKV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArICfQvicgKyAodGhpcy5ob3VycygpID09PSAxMSA/ICfQsScgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHVrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWsnLCB7XG4gICAgICAgIG1vbnRoczoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0YHRltGH0L3Rj1/Qu9GO0YLQvtCz0L5f0LHQtdGA0LXQt9C90Y9f0LrQstGW0YLQvdGPX9GC0YDQsNCy0L3Rj1/Rh9C10YDQstC90Y9f0LvQuNC/0L3Rj1/RgdC10YDQv9C90Y9f0LLQtdGA0LXRgdC90Y9f0LbQvtCy0YLQvdGPX9C70LjRgdGC0L7Qv9Cw0LTQsF/Qs9GA0YPQtNC90Y8nLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwnLnNwbGl0KFxuICAgICAgICAgICAgICAgICdfJ1xuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfRgdGW0Ydf0LvRjtGCX9Cx0LXRgF/QutCy0ZbRgl/RgtGA0LDQsl/Rh9C10YDQsl/Qu9C40L9f0YHQtdGA0L9f0LLQtdGAX9C20L7QstGCX9C70LjRgdGCX9Cz0YDRg9C0Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXNDYXNlUmVwbGFjZSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWSDRgC4nLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkg0YAuLCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkg0YAuLCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Ch0YzQvtCz0L7QtNC90ZYgJyksXG4gICAgICAgICAgICBuZXh0RGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CX0LDQstGC0YDQsCAnKSxcbiAgICAgICAgICAgIGxhc3REYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JLRh9C+0YDQsCAnKSxcbiAgICAgICAgICAgIG5leHRXZWVrOiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CjXSBkZGRkIFsnKSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Cc0LjQvdGD0LvQvtGXXSBkZGRkIFsnKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0LPQvl0gZGRkZCBbJykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDRgtC+0LzRgycsXG4gICAgICAgICAgICBzOiAn0LTQtdC60ZbQu9GM0LrQsCDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoOiAn0LPQvtC00LjQvdGDJyxcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZDogJ9C00LXQvdGMJyxcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTTogJ9C80ZbRgdGP0YbRjCcsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHk6ICfRgNGW0LonLFxuICAgICAgICAgICAgeXk6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRlnzRgNCw0L3QutGDfNC00L3Rj3zQstC10YfQvtGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRlic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDQsNC90LrRgyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQvtGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC5fNCz0L4pLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC5JztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNywgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFVyZHUgW3VyXVxuLy8hIGF1dGhvciA6IFNhd29vZCBBbGFtIDogaHR0cHM6Ly9naXRodWIuY29tL2libmVzYXllZWRcbi8vISBhdXRob3IgOiBaYWNrIDogaHR0cHM6Ly9naXRodWIuY29tL1phY2tWaXNpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICAgICAn2KzZhtmI2LHbjCcsXG4gICAgICAgICAgICAn2YHYsdmI2LHbjCcsXG4gICAgICAgICAgICAn2YXYp9ix2oYnLFxuICAgICAgICAgICAgJ9in2b7YsduM2YQnLFxuICAgICAgICAgICAgJ9mF2KbbjCcsXG4gICAgICAgICAgICAn2KzZiNmGJyxcbiAgICAgICAgICAgICfYrNmI2YTYp9im24wnLFxuICAgICAgICAgICAgJ9in2q/Ys9iqJyxcbiAgICAgICAgICAgICfYs9iq2YXYqNixJyxcbiAgICAgICAgICAgICfYp9qp2KrZiNio2LEnLFxuICAgICAgICAgICAgJ9mG2YjZhdio2LEnLFxuICAgICAgICAgICAgJ9iv2LPZhdio2LEnLFxuICAgICAgICBdLFxuICAgICAgICBkYXlzID0gWyfYp9iq2YjYp9ixJywgJ9m+24zYsScsICfZhdmG2q/ZhCcsICfYqNiv2r4nLCAn2KzZhdi52LHYp9iqJywgJ9is2YXYuduBJywgJ9uB2YHYqtuBJ107XG5cbiAgICB2YXIgdXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1cicsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGF5cyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYotisINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9qp2YQg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2q/YsNi02KrbgSDYsdmI2LIg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9qv2LDYtNiq24FdIGRkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINio2LnYrycsXG4gICAgICAgICAgICBwYXN0OiAnJXMg2YLYqNmEJyxcbiAgICAgICAgICAgIHM6ICfahtmG2K8g2LPbjNqp2YbaiCcsXG4gICAgICAgICAgICBzczogJyVkINiz24zaqdmG2ognLFxuICAgICAgICAgICAgbTogJ9in24zaqSDZhdmG2bknLFxuICAgICAgICAgICAgbW06ICclZCDZhdmG2bknLFxuICAgICAgICAgICAgaDogJ9in24zaqSDar9q+2YbZuduBJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2q/avtmG2bnbkicsXG4gICAgICAgICAgICBkOiAn2KfbjNqpINiv2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDYr9mGJyxcbiAgICAgICAgICAgIE06ICfYp9uM2qkg2YXYp9uBJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2YXYp9uBJyxcbiAgICAgICAgICAgIHk6ICfYp9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5OiAnJWQg2LPYp9mEJyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXpiZWsgTGF0aW4gW3V6LWxhdG5dXG4vLyEgYXV0aG9yIDogUmFzdWxiZWsgTWlyemF5ZXYgOiBnaXRodWIuY29tL1Jhc3VsYmVlZWtcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIC8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuICAgIHZhciB1ekxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1ei1sYXRuJywge1xuICAgICAgICBtb250aHM6ICdZYW52YXJfRmV2cmFsX01hcnRfQXByZWxfTWF5X0l5dW5fSXl1bF9Bdmd1c3RfU2VudGFicl9Pa3RhYnJfTm95YWJyX0Rla2Ficicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdZYW5fRmV2X01hcl9BcHJfTWF5X0l5dW5fSXl1bF9BdmdfU2VuX09rdF9Ob3lfRGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ1lha3NoYW5iYV9EdXNoYW5iYV9TZXNoYW5iYV9DaG9yc2hhbmJhX1BheXNoYW5iYV9KdW1hX1NoYW5iYScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1lha19EdXNoX1Nlc2hfQ2hvcl9QYXlfSnVtX1NoYW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnWWFfRHVfU2VfQ2hvX1BhX0p1X1NoYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnRCBNTU1NIFlZWVksIGRkZGQgSEg6bW0nLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tCdWd1biBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRXJ0YWdhXSBMVCBbZGFdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2VjaGEgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBsYXN0V2VlazogXCJbTyd0Z2FuXSBkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV1cIixcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnWWFxaW4gJXMgaWNoaWRhJyxcbiAgICAgICAgICAgIHBhc3Q6ICdCaXIgbmVjaGEgJXMgb2xkaW4nLFxuICAgICAgICAgICAgczogJ3Nvbml5YScsXG4gICAgICAgICAgICBzczogJyVkIHNvbml5YScsXG4gICAgICAgICAgICBtOiAnYmlyIGRhcWlxYScsXG4gICAgICAgICAgICBtbTogJyVkIGRhcWlxYScsXG4gICAgICAgICAgICBoOiAnYmlyIHNvYXQnLFxuICAgICAgICAgICAgaGg6ICclZCBzb2F0JyxcbiAgICAgICAgICAgIGQ6ICdiaXIga3VuJyxcbiAgICAgICAgICAgIGRkOiAnJWQga3VuJyxcbiAgICAgICAgICAgIE06ICdiaXIgb3knLFxuICAgICAgICAgICAgTU06ICclZCBveScsXG4gICAgICAgICAgICB5OiAnYmlyIHlpbCcsXG4gICAgICAgICAgICB5eTogJyVkIHlpbCcsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1ekxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogVXpiZWsgW3V6XVxuLy8hIGF1dGhvciA6IFNhcmRvciBNdW1pbm92IDogaHR0cHM6Ly9naXRodWIuY29tL211bWlub2ZmXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgdXogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1eicsIHtcbiAgICAgICAgbW9udGhzOiAn0Y/QvdCy0LDRgF/RhNC10LLRgNCw0Ltf0LzQsNGA0YJf0LDQv9GA0LXQu1/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YBf0L7QutGC0Y/QsdGAX9C90L7Rj9Cx0YBf0LTQtdC60LDQsdGAJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9Cv0LrRiNCw0L3QsdCwX9CU0YPRiNCw0L3QsdCwX9Ch0LXRiNCw0L3QsdCwX9Cn0L7RgNGI0LDQvdCx0LBf0J/QsNC50YjQsNC90LHQsF/QltGD0LzQsF/QqNCw0L3QsdCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0K/QutGIX9CU0YPRiF/QodC10Yhf0KfQvtGAX9Cf0LDQuV/QltGD0Lxf0KjQsNC9Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9Cv0Lpf0JTRg1/QodC1X9Cn0L5f0J/QsF/QltGDX9Co0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ0QgTU1NTSBZWVlZLCBkZGRkIEhIOm1tJyxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0JHRg9Cz0YPQvSDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0K3RgNGC0LDQs9CwXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0JrQtdGH0LAg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vQo9GC0LPQsNC9XSBkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn0K/QutC40L0gJXMg0LjRh9C40LTQsCcsXG4gICAgICAgICAgICBwYXN0OiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICAgICAgczogJ9GE0YPRgNGB0LDRgicsXG4gICAgICAgICAgICBzczogJyVkINGE0YPRgNGB0LDRgicsXG4gICAgICAgICAgICBtOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBtbTogJyVkINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBoOiAn0LHQuNGAINGB0L7QsNGCJyxcbiAgICAgICAgICAgIGhoOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZDogJ9Cx0LjRgCDQutGD0L0nLFxuICAgICAgICAgICAgZGQ6ICclZCDQutGD0L0nLFxuICAgICAgICAgICAgTTogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgICAgIE1NOiAnJWQg0L7QuScsXG4gICAgICAgICAgICB5OiAn0LHQuNGAINC50LjQuycsXG4gICAgICAgICAgICB5eTogJyVkINC50LjQuycsXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDcsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB1ejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBWaWV0bmFtZXNlIFt2aV1cbi8vISBhdXRob3IgOiBCYW5nIE5ndXllbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9iYW5nbmtcbi8vISBhdXRob3IgOiBDaGllbiBLaXJhIDogaHR0cHM6Ly9naXRodWIuY29tL2NoaWVua2lyYVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgndmknLCB7XG4gICAgICAgIG1vbnRoczogJ3Row6FuZyAxX3Row6FuZyAyX3Row6FuZyAzX3Row6FuZyA0X3Row6FuZyA1X3Row6FuZyA2X3Row6FuZyA3X3Row6FuZyA4X3Row6FuZyA5X3Row6FuZyAxMF90aMOhbmcgMTFfdGjDoW5nIDEyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ1RoZyAwMV9UaGcgMDJfVGhnIDAzX1RoZyAwNF9UaGcgMDVfVGhnIDA2X1RoZyAwN19UaGcgMDhfVGhnIDA5X1RoZyAxMF9UaGcgMTFfVGhnIDEyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ2No4bunIG5o4bqtdF90aOG7qSBoYWlfdGjhu6kgYmFfdGjhu6kgdMawX3Ro4bupIG7Eg21fdGjhu6kgc8OhdV90aOG7qSBi4bqjeScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9zYXxjaC9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3NhJyA6ICdTQSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2NoJyA6ICdDSCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFtuxINtXSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBbbsSDbV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFtuxINtXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGw6ICdERC9NL1lZWVknLFxuICAgICAgICAgICAgbGw6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0jDtG0gbmF5IGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmfDoHkgbWFpIGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSMO0bSBxdWEgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0deG6p24gdHLGsOG7m2MgbMO6Y10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyB04bubaScsXG4gICAgICAgICAgICBwYXN0OiAnJXMgdHLGsOG7m2MnLFxuICAgICAgICAgICAgczogJ3bDoGkgZ2nDonknLFxuICAgICAgICAgICAgc3M6ICclZCBnacOieScsXG4gICAgICAgICAgICBtOiAnbeG7mXQgcGjDunQnLFxuICAgICAgICAgICAgbW06ICclZCBwaMO6dCcsXG4gICAgICAgICAgICBoOiAnbeG7mXQgZ2nhu50nLFxuICAgICAgICAgICAgaGg6ICclZCBnaeG7nScsXG4gICAgICAgICAgICBkOiAnbeG7mXQgbmfDoHknLFxuICAgICAgICAgICAgZGQ6ICclZCBuZ8OgeScsXG4gICAgICAgICAgICB3OiAnbeG7mXQgdHXhuqduJyxcbiAgICAgICAgICAgIHd3OiAnJWQgdHXhuqduJyxcbiAgICAgICAgICAgIE06ICdt4buZdCB0aMOhbmcnLFxuICAgICAgICAgICAgTU06ICclZCB0aMOhbmcnLFxuICAgICAgICAgICAgeTogJ23hu5l0IG7Eg20nLFxuICAgICAgICAgICAgeXk6ICclZCBuxINtJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8hIGxvY2FsZSA6IFBzZXVkbyBbeC1wc2V1ZG9dXG4vLyEgYXV0aG9yIDogQW5kcmV3IEhvb2QgOiBodHRwczovL2dpdGh1Yi5jb20vYW5kcmV3aG9vZDEyNVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHhQc2V1ZG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd4LXBzZXVkbycsIHtcbiAgICAgICAgbW9udGhzOiAnSn7DocOxw7rDoX5yw71fRn7DqWJyw7p+w6Fyw71ffk3DoXJjfmhfw4FwfnLDrWxffk3DocO9X35Kw7rDscOpfl9Kw7psfsO9X8OBw7p+Z8O6c3R+X1PDqXB+dMOpbWJ+w6lyX8OTfmN0w7NifsOpcl/DkX7Ds3bDqW1+YsOpcl9+RMOpY8Opfm1iw6lyJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ0p+w6HDsV9+RsOpYl9+TcOhcl9+w4Fwcl9+TcOhw71ffkrDusOxX35Kw7psX37DgcO6Z19+U8OpcF9+w5NjdF9+w5HDs3ZffkTDqWMnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnU37DusOxZMOhfsO9X03Ds37DsWTDocO9fl9Uw7rDqX5zZMOhw71+X1fDqWR+w7HDqXNkfsOhw71fVH5ow7pyc35kw6HDvV9+RnLDrWR+w6HDvV9TfsOhdMO6cn5kw6HDvScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ1N+w7rDsV9+TcOzw7FfflTDusOpX35Xw6lkX35UaMO6X35GcsOtX35Tw6F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N+w7pfTcOzfl9Uw7pfflfDqV9UfmhfRnJ+X1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW1R+w7Nkw6F+w70gw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1R+w7Ntw7N+cnLDs353IMOhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbw51+w6lzdH7DqXJkw6F+w70gw6F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tMfsOhc3RdIGRkZGQgW8OhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfDrX7DsSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgw6F+Z8OzJyxcbiAgICAgICAgICAgIHM6ICfDoSB+ZsOpdyB+c8OpY8OzfsOxZHMnLFxuICAgICAgICAgICAgc3M6ICclZCBzfsOpY8Ozw7F+ZHMnLFxuICAgICAgICAgICAgbTogJ8OhIH5tw63DsX7DunTDqScsXG4gICAgICAgICAgICBtbTogJyVkIG1+w63DscO6fnTDqXMnLFxuICAgICAgICAgICAgaDogJ8OhfsOxIGjDs37DunInLFxuICAgICAgICAgICAgaGg6ICclZCBofsOzw7pycycsXG4gICAgICAgICAgICBkOiAnw6EgfmTDocO9JyxcbiAgICAgICAgICAgIGRkOiAnJWQgZH7DocO9cycsXG4gICAgICAgICAgICBNOiAnw6Egfm3Ds8OxfnRoJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbX7Ds8OxdH5ocycsXG4gICAgICAgICAgICB5OiAnw6EgfsO9w6nDoXInLFxuICAgICAgICAgICAgeXk6ICclZCDDvX7DqcOhcnMnLFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPVxuICAgICAgICAgICAgICAgICAgICB+figobnVtYmVyICUgMTAwKSAvIDEwKSA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAndGgnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3N0J1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICduZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gM1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAncmQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0LCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4geFBzZXVkbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBZb3J1YmEgTmlnZXJpYSBbeW9dXG4vLyEgYXV0aG9yIDogQXRvbGFnYmUgQWJpc295ZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmRlbGEtYmF0b2xhZ2JlXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgeW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd5bycsIHtcbiAgICAgICAgbW9udGhzOiAnU+G6ucyBcuG6ucyBX0XMgHJlzIBsZcyAX+G6uHLhurnMgG5hzIBfScyAZ2JlzIFfRcyAYmliaV9PzIBrdcyAZHVfQWfhurltb19PzIBndcyBbl9Pd2V3ZV/hu4zMgHdhzIByYcyAX0JlzIFsdcyBX+G7jMyAcOG6ucyAzIAnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnU+G6ucyBcl9FzIBybF/hurhybl9JzIBnYl9FzIBiaV9PzIBrdcyAX0Fn4bq5X0/MgGd1zIFfT3dlX+G7jMyAd2HMgF9CZcyBbF/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0HMgGnMgGt1zIFfQWplzIFfScyAc+G6ucyBZ3VuX+G7jGrhu43MgXJ1zIFf4buMauG7jcyBYuG7jV/hurh0acyAX0HMgGJhzIFt4bq5zIF0YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ0HMgGnMgGtfQWplzIFfScyAc+G6ucyBX+G7jGpyX+G7jGpiX+G6uHRpzIBfQcyAYmHMgScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdBzIBpzIBfQWpfScyAc1/hu4xyX+G7jGJf4bq4dF9BzIBiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPzIBuacyAIG5pXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+G7jMyAbGEgbmldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBcImRkZGQgW+G7jHPhurnMgCB0b8yBbidi4buNXSBbbmldIExUXCIsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0HMgG5hIG5pXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+G7jHPhurnMgCB0b8yBbOG7jcyBXSBbbmldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbmnMgSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMga+G7jWphzIEnLFxuICAgICAgICAgICAgczogJ2nMgHPhurlqdcyBIGFheWHMgSBkaWUnLFxuICAgICAgICAgICAgc3M6ICdhYXlhzIEgJWQnLFxuICAgICAgICAgICAgbTogJ2nMgHPhurlqdcyBIGthbicsXG4gICAgICAgICAgICBtbTogJ2nMgHPhurlqdcyBICVkJyxcbiAgICAgICAgICAgIGg6ICd3YcyBa2F0aSBrYW4nLFxuICAgICAgICAgICAgaGg6ICd3YcyBa2F0aSAlZCcsXG4gICAgICAgICAgICBkOiAn4buNauG7jcyBIGthbicsXG4gICAgICAgICAgICBkZDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgICAgICBNOiAnb3N1zIAga2FuJyxcbiAgICAgICAgICAgIE1NOiAnb3N1zIAgJWQnLFxuICAgICAgICAgICAgeTogJ+G7jWR1zIFuIGthbicsXG4gICAgICAgICAgICB5eTogJ+G7jWR1zIFuICVkJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL+G7jWrhu43MgVxcc1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQsIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiB5bztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vISBsb2NhbGUgOiBDaGluZXNlIChDaGluYSkgW3poLWNuXVxuLy8hIGF1dGhvciA6IHN1dXBpYyA6IGh0dHBzOi8vZ2l0aHViLmNvbS9zdXVwaWNcbi8vISBhdXRob3IgOiBaZW5vIFplbmcgOiBodHRwczovL2dpdGh1Yi5jb20vemVub3plbmdcbi8vISBhdXRob3IgOiB1dTEwOSA6IGh0dHBzOi8vZ2l0aHViLmNvbS91dTEwOVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG4gICAgdmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICAgICAgbW9udGhzOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn5ZGo5pelX+WRqOS4gF/lkajkuoxf5ZGo5LiJX+WRqOWbm1/lkajkupRf5ZGo5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMOiAnWVlZWeW5tE3mnIhE5pelQWjngrltbeWIhicsXG4gICAgICAgICAgICBMTExMOiAnWVlZWeW5tE3mnIhE5pelZGRkZEFo54K5bW3liIYnLFxuICAgICAgICAgICAgbDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gJ+S4reWNiCdcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7lpKldTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5LiLXWRkZExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vmnKxdZGRkTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndlZWsoKSAhPT0gbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vkuIpdZGRkTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+acrF1kZGRMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOWRqCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5ZGoJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5ZCOJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5Yeg56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumSnycsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumSnycsXG4gICAgICAgICAgICBoOiAnMSDlsI/ml7YnLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/ml7YnLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIHc6ICcxIOWRqCcsXG4gICAgICAgICAgICB3dzogJyVkIOWRqCcsXG4gICAgICAgICAgICBNOiAnMSDkuKrmnIgnLFxuICAgICAgICAgICAgTU06ICclZCDkuKrmnIgnLFxuICAgICAgICAgICAgeTogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5OiAnJWQg5bm0JyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoQ247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoSG9uZyBLb25nKSBbemgtaGtdXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG4vLyEgYXV0aG9yIDogS29uc3RhbnRpbiA6IGh0dHBzOi8vZ2l0aHViLmNvbS9za2ZkXG4vLyEgYXV0aG9yIDogQW50aG9ueSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbnRob255bGF1XG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhIayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLWhrJywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPT09IDEyMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vmmI7lpKldTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb5LiLXWRkZGRMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vkuIpdZGRkZExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5b6MJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE06ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTTogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoSGs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoTWFjYXUpIFt6aC1tb11cbi8vISBhdXRob3IgOiBCZW4gOiBodHRwczovL2dpdGh1Yi5jb20vYmVuLWxpblxuLy8hIGF1dGhvciA6IENocmlzIExhbSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9oZWhhY2hyaXNcbi8vISBhdXRob3IgOiBUYW4gWXVhbmhvbmcgOiBodHRwczovL2dpdGh1Yi5jb20vbGUwdGFuXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhNbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLW1vJywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjlpKldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+S4il1kZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5YWnJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE06ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTTogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoTW87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG4vLyEgbG9jYWxlIDogQ2hpbmVzZSAoVGFpd2FuKSBbemgtdHddXG4vLyEgYXV0aG9yIDogQmVuIDogaHR0cHM6Ly9naXRodWIuY29tL2Jlbi1saW5cbi8vISBhdXRob3IgOiBDaHJpcyBMYW0gOiBodHRwczovL2dpdGh1Yi5jb20vaGVoYWNocmlzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbiAgICB2YXIgemhUdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLXR3Jywge1xuICAgICAgICBtb250aHM6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEw6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb5LuK5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+aYjuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vmmKjlpKldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+S4il1kZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz5b6MJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+WJjScsXG4gICAgICAgICAgICBzOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG06ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbTogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGg6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE06ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTTogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5OiAnMSDlubQnLFxuICAgICAgICAgICAgeXk6ICclZCDlubQnLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoVHc7XG5cbn0pKSk7XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWZcIjogMjc4Nixcblx0XCIuL2FmLmpzXCI6IDI3ODYsXG5cdFwiLi9hclwiOiA4NjcsXG5cdFwiLi9hci1kelwiOiA0MTMwLFxuXHRcIi4vYXItZHouanNcIjogNDEzMCxcblx0XCIuL2FyLWt3XCI6IDYxMzUsXG5cdFwiLi9hci1rdy5qc1wiOiA2MTM1LFxuXHRcIi4vYXItbHlcIjogNjQ0MCxcblx0XCIuL2FyLWx5LmpzXCI6IDY0NDAsXG5cdFwiLi9hci1tYVwiOiA3NzAyLFxuXHRcIi4vYXItbWEuanNcIjogNzcwMixcblx0XCIuL2FyLXNhXCI6IDYwNDAsXG5cdFwiLi9hci1zYS5qc1wiOiA2MDQwLFxuXHRcIi4vYXItdG5cIjogNzEwMCxcblx0XCIuL2FyLXRuLmpzXCI6IDcxMDAsXG5cdFwiLi9hci5qc1wiOiA4NjcsXG5cdFwiLi9helwiOiAxMDgzLFxuXHRcIi4vYXouanNcIjogMTA4Myxcblx0XCIuL2JlXCI6IDk4MDgsXG5cdFwiLi9iZS5qc1wiOiA5ODA4LFxuXHRcIi4vYmdcIjogODMzOCxcblx0XCIuL2JnLmpzXCI6IDgzMzgsXG5cdFwiLi9ibVwiOiA3NDM4LFxuXHRcIi4vYm0uanNcIjogNzQzOCxcblx0XCIuL2JuXCI6IDg5MDUsXG5cdFwiLi9ibi1iZFwiOiA2MjI1LFxuXHRcIi4vYm4tYmQuanNcIjogNjIyNSxcblx0XCIuL2JuLmpzXCI6IDg5MDUsXG5cdFwiLi9ib1wiOiA1Njg0LFxuXHRcIi4vYm8uanNcIjogNTY4NCxcblx0XCIuL2JyXCI6IDEyNzgsXG5cdFwiLi9ici5qc1wiOiAxMjc4LFxuXHRcIi4vYnNcIjogNjIyLFxuXHRcIi4vYnMuanNcIjogNjIyLFxuXHRcIi4vY2FcIjogMjQ2OCxcblx0XCIuL2NhLmpzXCI6IDI0NjgsXG5cdFwiLi9jc1wiOiA1ODIyLFxuXHRcIi4vY3MuanNcIjogNTgyMixcblx0XCIuL2N2XCI6IDg3Nyxcblx0XCIuL2N2LmpzXCI6IDg3Nyxcblx0XCIuL2N5XCI6IDczNzMsXG5cdFwiLi9jeS5qc1wiOiA3MzczLFxuXHRcIi4vZGFcIjogNDc4MCxcblx0XCIuL2RhLmpzXCI6IDQ3ODAsXG5cdFwiLi9kZVwiOiA5NzQwLFxuXHRcIi4vZGUtYXRcIjogMjE3LFxuXHRcIi4vZGUtYXQuanNcIjogMjE3LFxuXHRcIi4vZGUtY2hcIjogODk0LFxuXHRcIi4vZGUtY2guanNcIjogODk0LFxuXHRcIi4vZGUuanNcIjogOTc0MCxcblx0XCIuL2R2XCI6IDUzMDAsXG5cdFwiLi9kdi5qc1wiOiA1MzAwLFxuXHRcIi4vZWxcIjogODM3LFxuXHRcIi4vZWwuanNcIjogODM3LFxuXHRcIi4vZW4tYXVcIjogODM0OCxcblx0XCIuL2VuLWF1LmpzXCI6IDgzNDgsXG5cdFwiLi9lbi1jYVwiOiA3OTI1LFxuXHRcIi4vZW4tY2EuanNcIjogNzkyNSxcblx0XCIuL2VuLWdiXCI6IDIyNDMsXG5cdFwiLi9lbi1nYi5qc1wiOiAyMjQzLFxuXHRcIi4vZW4taWVcIjogNjQzNixcblx0XCIuL2VuLWllLmpzXCI6IDY0MzYsXG5cdFwiLi9lbi1pbFwiOiA3MjA3LFxuXHRcIi4vZW4taWwuanNcIjogNzIwNyxcblx0XCIuL2VuLWluXCI6IDQxNzUsXG5cdFwiLi9lbi1pbi5qc1wiOiA0MTc1LFxuXHRcIi4vZW4tbnpcIjogNjMxOSxcblx0XCIuL2VuLW56LmpzXCI6IDYzMTksXG5cdFwiLi9lbi1zZ1wiOiAxNjYyLFxuXHRcIi4vZW4tc2cuanNcIjogMTY2Mixcblx0XCIuL2VvXCI6IDI5MTUsXG5cdFwiLi9lby5qc1wiOiAyOTE1LFxuXHRcIi4vZXNcIjogNTY1NSxcblx0XCIuL2VzLWRvXCI6IDUyNTEsXG5cdFwiLi9lcy1kby5qc1wiOiA1MjUxLFxuXHRcIi4vZXMtbXhcIjogNjExMixcblx0XCIuL2VzLW14LmpzXCI6IDYxMTIsXG5cdFwiLi9lcy11c1wiOiAxMTQ2LFxuXHRcIi4vZXMtdXMuanNcIjogMTE0Nixcblx0XCIuL2VzLmpzXCI6IDU2NTUsXG5cdFwiLi9ldFwiOiA1NjAzLFxuXHRcIi4vZXQuanNcIjogNTYwMyxcblx0XCIuL2V1XCI6IDc3NjMsXG5cdFwiLi9ldS5qc1wiOiA3NzYzLFxuXHRcIi4vZmFcIjogNjk1OSxcblx0XCIuL2ZhLmpzXCI6IDY5NTksXG5cdFwiLi9maVwiOiAxODk3LFxuXHRcIi4vZmkuanNcIjogMTg5Nyxcblx0XCIuL2ZpbFwiOiAyNTQ5LFxuXHRcIi4vZmlsLmpzXCI6IDI1NDksXG5cdFwiLi9mb1wiOiA0Njk0LFxuXHRcIi4vZm8uanNcIjogNDY5NCxcblx0XCIuL2ZyXCI6IDQ0NzAsXG5cdFwiLi9mci1jYVwiOiAzMDQ5LFxuXHRcIi4vZnItY2EuanNcIjogMzA0OSxcblx0XCIuL2ZyLWNoXCI6IDIzMzAsXG5cdFwiLi9mci1jaC5qc1wiOiAyMzMwLFxuXHRcIi4vZnIuanNcIjogNDQ3MCxcblx0XCIuL2Z5XCI6IDUwNDQsXG5cdFwiLi9meS5qc1wiOiA1MDQ0LFxuXHRcIi4vZ2FcIjogOTI5NSxcblx0XCIuL2dhLmpzXCI6IDkyOTUsXG5cdFwiLi9nZFwiOiAyMTAxLFxuXHRcIi4vZ2QuanNcIjogMjEwMSxcblx0XCIuL2dsXCI6IDg3OTQsXG5cdFwiLi9nbC5qc1wiOiA4Nzk0LFxuXHRcIi4vZ29tLWRldmFcIjogNzg4NCxcblx0XCIuL2dvbS1kZXZhLmpzXCI6IDc4ODQsXG5cdFwiLi9nb20tbGF0blwiOiAzMTY4LFxuXHRcIi4vZ29tLWxhdG4uanNcIjogMzE2OCxcblx0XCIuL2d1XCI6IDUzNDksXG5cdFwiLi9ndS5qc1wiOiA1MzQ5LFxuXHRcIi4vaGVcIjogNDIwNixcblx0XCIuL2hlLmpzXCI6IDQyMDYsXG5cdFwiLi9oaVwiOiA5NCxcblx0XCIuL2hpLmpzXCI6IDk0LFxuXHRcIi4vaHJcIjogMzE2LFxuXHRcIi4vaHIuanNcIjogMzE2LFxuXHRcIi4vaHVcIjogMjEzOCxcblx0XCIuL2h1LmpzXCI6IDIxMzgsXG5cdFwiLi9oeS1hbVwiOiAxNDIzLFxuXHRcIi4vaHktYW0uanNcIjogMTQyMyxcblx0XCIuL2lkXCI6IDkyMTgsXG5cdFwiLi9pZC5qc1wiOiA5MjE4LFxuXHRcIi4vaXNcIjogMTM1LFxuXHRcIi4vaXMuanNcIjogMTM1LFxuXHRcIi4vaXRcIjogNjI2LFxuXHRcIi4vaXQtY2hcIjogMTUwLFxuXHRcIi4vaXQtY2guanNcIjogMTUwLFxuXHRcIi4vaXQuanNcIjogNjI2LFxuXHRcIi4vamFcIjogOTE4Myxcblx0XCIuL2phLmpzXCI6IDkxODMsXG5cdFwiLi9qdlwiOiA0Mjg2LFxuXHRcIi4vanYuanNcIjogNDI4Nixcblx0XCIuL2thXCI6IDIxMDUsXG5cdFwiLi9rYS5qc1wiOiAyMTA1LFxuXHRcIi4va2tcIjogNzc3Mixcblx0XCIuL2trLmpzXCI6IDc3NzIsXG5cdFwiLi9rbVwiOiA4NzU4LFxuXHRcIi4va20uanNcIjogODc1OCxcblx0XCIuL2tuXCI6IDkyODIsXG5cdFwiLi9rbi5qc1wiOiA5MjgyLFxuXHRcIi4va29cIjogMzczMCxcblx0XCIuL2tvLmpzXCI6IDM3MzAsXG5cdFwiLi9rdVwiOiAxNDA4LFxuXHRcIi4va3UuanNcIjogMTQwOCxcblx0XCIuL2t5XCI6IDMyOTEsXG5cdFwiLi9reS5qc1wiOiAzMjkxLFxuXHRcIi4vbGJcIjogNjg0MSxcblx0XCIuL2xiLmpzXCI6IDY4NDEsXG5cdFwiLi9sb1wiOiA1NDY2LFxuXHRcIi4vbG8uanNcIjogNTQ2Nixcblx0XCIuL2x0XCI6IDcwMTAsXG5cdFwiLi9sdC5qc1wiOiA3MDEwLFxuXHRcIi4vbHZcIjogNzU5NSxcblx0XCIuL2x2LmpzXCI6IDc1OTUsXG5cdFwiLi9tZVwiOiA5ODYxLFxuXHRcIi4vbWUuanNcIjogOTg2MSxcblx0XCIuL21pXCI6IDU0OTMsXG5cdFwiLi9taS5qc1wiOiA1NDkzLFxuXHRcIi4vbWtcIjogNTk2Nixcblx0XCIuL21rLmpzXCI6IDU5NjYsXG5cdFwiLi9tbFwiOiA3MzQxLFxuXHRcIi4vbWwuanNcIjogNzM0MSxcblx0XCIuL21uXCI6IDUxMTUsXG5cdFwiLi9tbi5qc1wiOiA1MTE1LFxuXHRcIi4vbXJcIjogMzcwLFxuXHRcIi4vbXIuanNcIjogMzcwLFxuXHRcIi4vbXNcIjogOTg0Nyxcblx0XCIuL21zLW15XCI6IDEyMzcsXG5cdFwiLi9tcy1teS5qc1wiOiAxMjM3LFxuXHRcIi4vbXMuanNcIjogOTg0Nyxcblx0XCIuL210XCI6IDIxMjYsXG5cdFwiLi9tdC5qc1wiOiAyMTI2LFxuXHRcIi4vbXlcIjogNjE2NSxcblx0XCIuL215LmpzXCI6IDYxNjUsXG5cdFwiLi9uYlwiOiA0OTI0LFxuXHRcIi4vbmIuanNcIjogNDkyNCxcblx0XCIuL25lXCI6IDY3NDQsXG5cdFwiLi9uZS5qc1wiOiA2NzQ0LFxuXHRcIi4vbmxcIjogMzkwMSxcblx0XCIuL25sLWJlXCI6IDk4MTQsXG5cdFwiLi9ubC1iZS5qc1wiOiA5ODE0LFxuXHRcIi4vbmwuanNcIjogMzkwMSxcblx0XCIuL25uXCI6IDM4NzcsXG5cdFwiLi9ubi5qc1wiOiAzODc3LFxuXHRcIi4vb2MtbG5jXCI6IDIxMzUsXG5cdFwiLi9vYy1sbmMuanNcIjogMjEzNSxcblx0XCIuL3BhLWluXCI6IDU4NTgsXG5cdFwiLi9wYS1pbi5qc1wiOiA1ODU4LFxuXHRcIi4vcGxcIjogNDQ5NSxcblx0XCIuL3BsLmpzXCI6IDQ0OTUsXG5cdFwiLi9wdFwiOiA5NTIwLFxuXHRcIi4vcHQtYnJcIjogNzk3MSxcblx0XCIuL3B0LWJyLmpzXCI6IDc5NzEsXG5cdFwiLi9wdC5qc1wiOiA5NTIwLFxuXHRcIi4vcm9cIjogNjQ1OSxcblx0XCIuL3JvLmpzXCI6IDY0NTksXG5cdFwiLi9ydVwiOiAxNzkzLFxuXHRcIi4vcnUuanNcIjogMTc5Myxcblx0XCIuL3NkXCI6IDk1MCxcblx0XCIuL3NkLmpzXCI6IDk1MCxcblx0XCIuL3NlXCI6IDQ5MCxcblx0XCIuL3NlLmpzXCI6IDQ5MCxcblx0XCIuL3NpXCI6IDEyNCxcblx0XCIuL3NpLmpzXCI6IDEyNCxcblx0XCIuL3NrXCI6IDQyNDksXG5cdFwiLi9zay5qc1wiOiA0MjQ5LFxuXHRcIi4vc2xcIjogNDk4NSxcblx0XCIuL3NsLmpzXCI6IDQ5ODUsXG5cdFwiLi9zcVwiOiAxMTA0LFxuXHRcIi4vc3EuanNcIjogMTEwNCxcblx0XCIuL3NyXCI6IDkxMzEsXG5cdFwiLi9zci1jeXJsXCI6IDk5MTUsXG5cdFwiLi9zci1jeXJsLmpzXCI6IDk5MTUsXG5cdFwiLi9zci5qc1wiOiA5MTMxLFxuXHRcIi4vc3NcIjogNTg5Myxcblx0XCIuL3NzLmpzXCI6IDU4OTMsXG5cdFwiLi9zdlwiOiA4NzYwLFxuXHRcIi4vc3YuanNcIjogODc2MCxcblx0XCIuL3N3XCI6IDExNzIsXG5cdFwiLi9zdy5qc1wiOiAxMTcyLFxuXHRcIi4vdGFcIjogNzMzMyxcblx0XCIuL3RhLmpzXCI6IDczMzMsXG5cdFwiLi90ZVwiOiAzMTEwLFxuXHRcIi4vdGUuanNcIjogMzExMCxcblx0XCIuL3RldFwiOiAyMDk1LFxuXHRcIi4vdGV0LmpzXCI6IDIwOTUsXG5cdFwiLi90Z1wiOiA3MzIxLFxuXHRcIi4vdGcuanNcIjogNzMyMSxcblx0XCIuL3RoXCI6IDkwNDEsXG5cdFwiLi90aC5qc1wiOiA5MDQxLFxuXHRcIi4vdGtcIjogOTAwNSxcblx0XCIuL3RrLmpzXCI6IDkwMDUsXG5cdFwiLi90bC1waFwiOiA1NzY4LFxuXHRcIi4vdGwtcGguanNcIjogNTc2OCxcblx0XCIuL3RsaFwiOiA5NDQ0LFxuXHRcIi4vdGxoLmpzXCI6IDk0NDQsXG5cdFwiLi90clwiOiAyMzk3LFxuXHRcIi4vdHIuanNcIjogMjM5Nyxcblx0XCIuL3R6bFwiOiA4MjU0LFxuXHRcIi4vdHpsLmpzXCI6IDgyNTQsXG5cdFwiLi90em1cIjogMTEwNixcblx0XCIuL3R6bS1sYXRuXCI6IDY5OSxcblx0XCIuL3R6bS1sYXRuLmpzXCI6IDY5OSxcblx0XCIuL3R6bS5qc1wiOiAxMTA2LFxuXHRcIi4vdWctY25cIjogOTI4OCxcblx0XCIuL3VnLWNuLmpzXCI6IDkyODgsXG5cdFwiLi91a1wiOiA3NjkxLFxuXHRcIi4vdWsuanNcIjogNzY5MSxcblx0XCIuL3VyXCI6IDM3OTUsXG5cdFwiLi91ci5qc1wiOiAzNzk1LFxuXHRcIi4vdXpcIjogNjc5MSxcblx0XCIuL3V6LWxhdG5cIjogNTg4LFxuXHRcIi4vdXotbGF0bi5qc1wiOiA1ODgsXG5cdFwiLi91ei5qc1wiOiA2NzkxLFxuXHRcIi4vdmlcIjogNTY2Nixcblx0XCIuL3ZpLmpzXCI6IDU2NjYsXG5cdFwiLi94LXBzZXVkb1wiOiA0Mzc4LFxuXHRcIi4veC1wc2V1ZG8uanNcIjogNDM3OCxcblx0XCIuL3lvXCI6IDU4MDUsXG5cdFwiLi95by5qc1wiOiA1ODA1LFxuXHRcIi4vemgtY25cIjogMzgzOSxcblx0XCIuL3poLWNuLmpzXCI6IDM4MzksXG5cdFwiLi96aC1oa1wiOiA1NzI2LFxuXHRcIi4vemgtaGsuanNcIjogNTcyNixcblx0XCIuL3poLW1vXCI6IDk4MDcsXG5cdFwiLi96aC1tby5qc1wiOiA5ODA3LFxuXHRcIi4vemgtdHdcIjogNDE1Mixcblx0XCIuL3poLXR3LmpzXCI6IDQxNTJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2NzAwOyIsIi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4yOS4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlucHV0ICE9IG51bGwgJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHk6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0OiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93OiAtMixcbiAgICAgICAgICAgIGNoYXJzTGVmdE92ZXI6IDAsXG4gICAgICAgICAgICBudWxsSW5wdXQ6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZEVyYTogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRNb250aDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQ6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbzogZmFsc2UsXG4gICAgICAgICAgICBwYXJzZWREYXRlUGFydHM6IFtdLFxuICAgICAgICAgICAgZXJhOiBudWxsLFxuICAgICAgICAgICAgbWVyaWRpZW06IG51bGwsXG4gICAgICAgICAgICByZmMyODIyOiBmYWxzZSxcbiAgICAgICAgICAgIHdlZWtkYXlNaXNtYXRjaDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICAgICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgICAgIG0uX3BmID0gZGVmYXVsdFBhcnNpbmdGbGFncygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9wZjtcbiAgICB9XG5cbiAgICB2YXIgc29tZTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICAgICAgc29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICBsZW4gPSB0Lmxlbmd0aCA+Pj4gMCxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSksXG4gICAgICAgICAgICAgICAgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgICAgICAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRFcmEgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgICAgIGlzTm93VmFsaWQgPVxuICAgICAgICAgICAgICAgICAgICBpc05vd1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5iaWdIb3VyID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICAgICAgbS5faXNWYWxpZCA9IGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSAoaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdKSxcbiAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBvYmogaW5zdGFuY2VvZiBNb21lbnQgfHwgKG9iaiAhPSBudWxsICYmIG9iai5faXNBTW9tZW50T2JqZWN0ICE9IG51bGwpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBjb25zb2xlLndhcm5cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBhcmcsXG4gICAgICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgICAgIGtleTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGFyZ3VtZW50c1swXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgICAgIG1zZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnXFxuQXJndW1lbnRzOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlb2YgRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHx8XG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0KGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY29uZmlnLCBpKSkge1xuICAgICAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgK1xuICAgICAgICAgICAgICAgIC9cXGR7MSwyfS8uc291cmNlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSxcbiAgICAgICAgICAgIHByb3A7XG4gICAgICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBwYXJlbnRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGNoaWxkQ29uZmlnW3Byb3BdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBwYXJlbnRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cztcblxuICAgIGlmIChPYmplY3Qua2V5cykge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHZhciBpLFxuICAgICAgICAgICAgICAgIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5OiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5OiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxlbmRhcihrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICAgICAgdmFyIGFic051bWJlciA9ICcnICsgTWF0aC5hYnMobnVtYmVyKSxcbiAgICAgICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzaWduID8gKGZvcmNlU2lnbiA/ICcrJyA6ICcnKSA6ICctJykgK1xuICAgICAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgK1xuICAgICAgICAgICAgYWJzTnVtYmVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oW0hoXW1tKHNzKT98TW98TU0/TT9NP3xEb3xERERvfEREP0Q/RD98ZGRkP2Q/fGRvP3x3W298d10/fFdbb3xXXT98UW8/fE57MSw1fXxZWVlZWVl8WVlZWVl8WVlZWXxZWXx5ezIsNH18eW8/fGdnKGdnZz8pP3xHRyhHR0c/KT98ZXxFfGF8QXxoaD98SEg/fGtrP3xtbT98c3M/fFN7MSw5fXx4fFh8eno/fFpaP3wuKS9nLFxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nLFxuICAgICAgICBmb3JtYXRGdW5jdGlvbnMgPSB7fSxcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnMgPSB7fTtcblxuICAgIC8vIHRva2VuOiAgICAnTSdcbiAgICAvLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4gICAgLy8gb3JkaW5hbDogICdNbydcbiAgICAvLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbiAgICBmdW5jdGlvbiBhZGRGb3JtYXRUb2tlbih0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0Lm1hdGNoKC9cXFtbXFxzXFxTXS8pKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2VucyksXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgICAgIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSlcbiAgICAgICAgICAgICAgICAgICAgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9XG4gICAgICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vuc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgICAgICBMVFM6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVDogJ2g6bW0gQScsXG4gICAgICAgIEw6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgTEw6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICBMTEw6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdChrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlclxuICAgICAgICAgICAgLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0b2spIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NTU0nIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvayA9PT0gJ01NJyB8fFxuICAgICAgICAgICAgICAgICAgICB0b2sgPT09ICdERCcgfHxcbiAgICAgICAgICAgICAgICAgICAgdG9rID09PSAnZGRkZCdcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvay5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvaztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuam9pbignJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG4gICAgZnVuY3Rpb24gaW52YWxpZERhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnLFxuICAgICAgICBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZTogJ2luICVzJyxcbiAgICAgICAgcGFzdDogJyVzIGFnbycsXG4gICAgICAgIHM6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3M6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgbTogJ2EgbWludXRlJyxcbiAgICAgICAgbW06ICclZCBtaW51dGVzJyxcbiAgICAgICAgaDogJ2FuIGhvdXInLFxuICAgICAgICBoaDogJyVkIGhvdXJzJyxcbiAgICAgICAgZDogJ2EgZGF5JyxcbiAgICAgICAgZGQ6ICclZCBkYXlzJyxcbiAgICAgICAgdzogJ2Egd2VlaycsXG4gICAgICAgIHd3OiAnJWQgd2Vla3MnLFxuICAgICAgICBNOiAnYSBtb250aCcsXG4gICAgICAgIE1NOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeTogJ2EgeWVhcicsXG4gICAgICAgIHl5OiAnJWQgeWVhcnMnLFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KVxuICAgICAgICAgICAgPyBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKVxuICAgICAgICAgICAgOiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXN0RnV0dXJlKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdEFsaWFzKHVuaXQsIHNob3J0aGFuZCkge1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICAgICAgcHJvcDtcblxuICAgICAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xuICAgIH1cblxuICAgIHZhciBwcmlvcml0aWVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICAgICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICAgICAgdmFyIHVuaXRzID0gW10sXG4gICAgICAgICAgICB1O1xuICAgICAgICBmb3IgKHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKHVuaXRzT2JqLCB1KSkge1xuICAgICAgICAgICAgICAgIHVuaXRzLnB1c2goeyB1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICAgICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgICAgIHZhbHVlID0gMDtcblxuICAgICAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0KHVuaXQsIGtlZXBUaW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0JDEodGhpcywgdW5pdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0KG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKVxuICAgICAgICAgICAgPyBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKVxuICAgICAgICAgICAgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0JDEobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdW5pdCA9PT0gJ0Z1bGxZZWFyJyAmJlxuICAgICAgICAgICAgICAgIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiZcbiAgICAgICAgICAgICAgICBtb20ubW9udGgoKSA9PT0gMSAmJlxuICAgICAgICAgICAgICAgIG1vbS5kYXRlKCkgPT09IDI5XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBtb20ubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0KHVuaXRzLCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgICAgICB2YXIgcHJpb3JpdGl6ZWQgPSBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzKSxcbiAgICAgICAgICAgICAgICBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSA9IC9cXGQvLCAvLyAgICAgICAwIC0gOVxuICAgICAgICBtYXRjaDIgPSAvXFxkXFxkLywgLy8gICAgICAwMCAtIDk5XG4gICAgICAgIG1hdGNoMyA9IC9cXGR7M30vLCAvLyAgICAgMDAwIC0gOTk5XG4gICAgICAgIG1hdGNoNCA9IC9cXGR7NH0vLCAvLyAgICAwMDAwIC0gOTk5OVxuICAgICAgICBtYXRjaDYgPSAvWystXT9cXGR7Nn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMiA9IC9cXGRcXGQ/LywgLy8gICAgICAgMCAtIDk5XG4gICAgICAgIG1hdGNoM3RvNCA9IC9cXGRcXGRcXGRcXGQ/LywgLy8gICAgIDk5OSAtIDk5OTlcbiAgICAgICAgbWF0Y2g1dG82ID0gL1xcZFxcZFxcZFxcZFxcZFxcZD8vLCAvLyAgIDk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoMXRvMyA9IC9cXGR7MSwzfS8sIC8vICAgICAgIDAgLSA5OTlcbiAgICAgICAgbWF0Y2gxdG80ID0gL1xcZHsxLDR9LywgLy8gICAgICAgMCAtIDk5OTlcbiAgICAgICAgbWF0Y2gxdG82ID0gL1srLV0/XFxkezEsNn0vLCAvLyAtOTk5OTk5IC0gOTk5OTk5XG4gICAgICAgIG1hdGNoVW5zaWduZWQgPSAvXFxkKy8sIC8vICAgICAgIDAgLSBpbmZcbiAgICAgICAgbWF0Y2hTaWduZWQgPSAvWystXT9cXGQrLywgLy8gICAgLWluZiAtIGluZlxuICAgICAgICBtYXRjaE9mZnNldCA9IC9afFsrLV1cXGRcXGQ6P1xcZFxcZC9naSwgLy8gKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG4gICAgICAgIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naSwgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICAgICAgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vLCAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuICAgICAgICAvLyBhbnkgd29yZCAob3IgdHdvKSBjaGFyYWN0ZXJzIG9yIG51bWJlcnMgaW5jbHVkaW5nIHR3by90aHJlZSB3b3JkIG1vbnRoIGluIGFyYWJpYy5cbiAgICAgICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgICAgICBtYXRjaFdvcmQgPSAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaSxcbiAgICAgICAgcmVnZXhlcztcblxuICAgIHJlZ2V4ZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFJlZ2V4VG9rZW4odG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpXG4gICAgICAgICAgICA/IHJlZ2V4XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4ID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKFxuICAgICAgICAgICAgc1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdcXFxcJywgJycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKFxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkLFxuICAgICAgICAgICAgICAgICAgICBwMSxcbiAgICAgICAgICAgICAgICAgICAgcDIsXG4gICAgICAgICAgICAgICAgICAgIHAzLFxuICAgICAgICAgICAgICAgICAgICBwNFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICAgIH1cblxuICAgIHZhciB0b2tlbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFBhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW4gPSBbdG9rZW5dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4odG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwLFxuICAgICAgICBNT05USCA9IDEsXG4gICAgICAgIERBVEUgPSAyLFxuICAgICAgICBIT1VSID0gMyxcbiAgICAgICAgTUlOVVRFID0gNCxcbiAgICAgICAgU0VDT05EID0gNSxcbiAgICAgICAgTUlMTElTRUNPTkQgPSA2LFxuICAgICAgICBXRUVLID0gNyxcbiAgICAgICAgV0VFS0RBWSA9IDg7XG5cbiAgICBmdW5jdGlvbiBtb2QobiwgeCkge1xuICAgICAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2Y7XG5cbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgLy8gSSBrbm93XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgICAgIHJldHVybiBtb2RNb250aCA9PT0gMVxuICAgICAgICAgICAgPyBpc0xlYXBZZWFyKHllYXIpXG4gICAgICAgICAgICAgICAgPyAyOVxuICAgICAgICAgICAgICAgIDogMjhcbiAgICAgICAgICAgIDogMzEgLSAoKG1vZE1vbnRoICUgNykgJSAyKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignTScsIFsnTU0nLCAyXSwgJ01vJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTU0nLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbW9udGgnLCA4KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ00nLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG4gICAgYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBmaW5kIGEgbW9udGggbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkLlxuICAgICAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHMgPSAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0ID0gJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vLFxuICAgICAgICBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZCxcbiAgICAgICAgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRocylcbiAgICAgICAgICAgICAgICA/IHRoaXMuX21vbnRoc1xuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKVxuICAgICAgICAgICAgPyB0aGlzLl9tb250aHNbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNbXG4gICAgICAgICAgICAgICAgICAodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgID8gJ2Zvcm1hdCdcbiAgICAgICAgICAgICAgICAgICAgICA6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgICAgICBdW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHNTaG9ydClcbiAgICAgICAgICAgID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXVxuICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFtcbiAgICAgICAgICAgICAgICAgIE1PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTU0nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ01NTScgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzZXRNb250aChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCgpIHtcbiAgICAgICAgcmV0dXJuIGRheXNJbk1vbnRoKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl9tb250aHNTdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/IHplcm9GaWxsKHksIDQpIDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCA0XSwgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgNV0sIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID1cbiAgICAgICAgICAgIGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICBob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xuICAgIH07XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbiAgICBmdW5jdGlvbiBnZXRJc0xlYXBZZWFyKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgICAgICAvLyBjYW4ndCBqdXN0IGFwcGx5KCkgdG8gY3JlYXRlIGEgZGF0ZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5ICsgNDAwLCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgICAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRGdWxsWWVhcigpKSkge1xuICAgICAgICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSh5KSB7XG4gICAgICAgIHZhciBkYXRlLCBhcmdzO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLFxuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobW9tLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICAgICAgcmVzV2VlayxcbiAgICAgICAgICAgIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgd2VlayxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0b2tlblxuICAgICkge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrKG1vbSkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2VlaztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveTogNiwgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWsuZG93O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayhpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrKGlucHV0KSB7XG4gICAgICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2QnLCAwLCAnZG8nLCAnZGF5Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbiAgICBhZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtkYXknLCAnRScpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignZCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignRScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignZGQnLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZGQnLCAnZGRkJywgJ2RkZGQnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgICAgIGlmICh3ZWVrZGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkV2Vla2RheSA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2QnLCAnZScsICdFJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIGZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05hTihpbnB1dCkgPyBudWxsIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gTE9DQUxFU1xuICAgIGZ1bmN0aW9uIHNoaWZ0V2Vla2RheXMod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkLFxuICAgICAgICBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKVxuICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1xuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1tcbiAgICAgICAgICAgICAgICAgIG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICA/ICdmb3JtYXQnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgID8gd2Vla2RheXNbbS5kYXkoKV1cbiAgICAgICAgICAgIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydChtKSB7XG4gICAgICAgIHJldHVybiBtID09PSB0cnVlXG4gICAgICAgICAgICA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXVxuICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluKG0pIHtcbiAgICAgICAgcmV0dXJuIG0gPT09IHRydWVcbiAgICAgICAgICAgID8gc2hpZnRXZWVrZGF5cyh0aGlzLl93ZWVrZGF5c01pbiwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IG1cbiAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV1cbiAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RyaWN0UGFyc2UkMSh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBpaSxcbiAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4oXG4gICAgICAgICAgICAgICAgICAgIG1vbSxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICApLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KFxuICAgICAgICAgICAgICAgICAgICBtb20sXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICAgICAgJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgICAgICdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLFxuICAgICAgICAgICAgICAgICAgICAnaSdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICAgICAgICAnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsXG4gICAgICAgICAgICAgICAgICAgICdpJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9XG4gICAgICAgICAgICAgICAgICAgICdeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXMobW9tLCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAnfF4nICtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgJ3xeJyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3RyaWN0ICYmXG4gICAgICAgICAgICAgICAgZm9ybWF0ID09PSAnZGRkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHN0cmljdCAmJlxuICAgICAgICAgICAgICAgIGZvcm1hdCA9PT0gJ2RkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBzdHJpY3QgJiZcbiAgICAgICAgICAgICAgICBmb3JtYXQgPT09ICdkZCcgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkYXk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdlZWtkYXlzUmVnZXgoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0XG4gICAgICAgICAgICAgICAgPyB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4XG4gICAgICAgICAgICAgICAgOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c01pblJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCAmJiBpc1N0cmljdFxuICAgICAgICAgICAgICAgID8gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleFxuICAgICAgICAgICAgICAgIDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sXG4gICAgICAgICAgICBzaG9ydFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbG9uZ1BpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtb20sXG4gICAgICAgICAgICBtaW5wLFxuICAgICAgICAgICAgc2hvcnRwLFxuICAgICAgICAgICAgbG9uZ3A7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgbWlucCA9IHJlZ2V4RXNjYXBlKHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykpO1xuICAgICAgICAgICAgc2hvcnRwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdwID0gcmVnZXhFc2NhcGUodGhpcy53ZWVrZGF5cyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChsb25ncCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICAgICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBsb25nUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLFxuICAgICAgICAgICAgJ2knXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsXG4gICAgICAgICAgICAnaSdcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICcnICtcbiAgICAgICAgICAgIGhGb3JtYXQuYXBwbHkodGhpcykgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKVxuICAgICAgICApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgJycgK1xuICAgICAgICAgICAgdGhpcy5ob3VycygpICtcbiAgICAgICAgICAgIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMilcbiAgICAgICAgKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbShcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJzKCksXG4gICAgICAgICAgICAgICAgdGhpcy5taW51dGVzKCksXG4gICAgICAgICAgICAgICAgbG93ZXJjYXNlXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0EnLCBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdrJywgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNCxcbiAgICAgICAgICAgIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQsXG4gICAgICAgICAgICBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaSxcbiAgICAgICAgLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4gICAgICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgICAgICAvLyB0aGlzIHJ1bGUuXG4gICAgICAgIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlTWVyaWRpZW0oaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJhc2VDb25maWcgPSB7XG4gICAgICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgICAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgICAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgICAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSxcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge30sXG4gICAgICAgIGxvY2FsZUZhbWlsaWVzID0ge30sXG4gICAgICAgIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIGNvbW1vblByZWZpeChhcnIxLCBhcnIyKSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAgbWlubCA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtaW5sOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgICAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4gICAgLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbiAgICAvLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG4gICAgZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgICAgIHZhciBpID0gMCxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBuZXh0LFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgbmV4dCAmJlxuICAgICAgICAgICAgICAgICAgICBuZXh0Lmxlbmd0aCA+PSBqICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vblByZWZpeChzcGxpdCwgbmV4dCkgPj0gaiAtIDFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsLFxuICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmU7XG4gICAgICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJlxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIG5vdCBmb3VuZCB0byBhdm9pZCByZXBlYXRpbmcgZXhwZW5zaXZlIGZpbGUgcmVxdWlyZSBjYWxsIGNhdXNpbmcgaGlnaCBDUFVcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRyeWluZyB0byBmaW5kIGVuLVVTLCBlbl9VUywgZW4tdXMgZm9yIGV2ZXJ5IGZvcm1hdCBjYWxsXG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG51bGw7IC8vIG51bGwgbWVhbnMgbm90IGZvdW5kXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZShrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGdsb2JhbExvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0xvY2FsZSAnICsga2V5ICsgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxlLFxuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKFxuICAgICAgICAgICAgICAgICAgICAnZGVmaW5lTG9jYWxlT3ZlcnJpZGUnLFxuICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgICAgICAvLyBjcmVhdGVkLCBzbyB3ZSB3b24ndCBlbmQgdXAgd2l0aCB0aGUgY2hpbGQgbG9jYWxlIHNldC5cbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSxcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcblxuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCAmJiBsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIGNoaWxkIGxvY2FsZSBpbi1wbGFjZSB0byBhdm9pZCBtZW1vcnktbGVha3NcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdLnNldChtZXJnZUNvbmZpZ3MobG9jYWxlc1tuYW1lXS5fY29uZmlnLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAodG1wTG9jYWxlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlTG9jYWxlIGlzIGNhbGxlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBhYmJyIHNvIGl0IHdpbGwgaGF2ZSBhIG5hbWUgKGdldHRlcnMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZGVmaW5lZCBvdGhlcndpc2UpLlxuICAgICAgICAgICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsZSA9IG5ldyBMb2NhbGUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gZ2V0U2V0R2xvYmFsTG9jYWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyhtKSB7XG4gICAgICAgIHZhciBvdmVyZmxvdyxcbiAgICAgICAgICAgIGEgPSBtLl9hO1xuXG4gICAgICAgIGlmIChhICYmIGdldFBhcnNpbmdGbGFncyhtKS5vdmVyZmxvdyA9PT0gLTIpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgICAgICBhW01PTlRIXSA8IDAgfHwgYVtNT05USF0gPiAxMVxuICAgICAgICAgICAgICAgICAgICA/IE1PTlRIXG4gICAgICAgICAgICAgICAgICAgIDogYVtEQVRFXSA8IDEgfHwgYVtEQVRFXSA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKVxuICAgICAgICAgICAgICAgICAgICA/IERBVEVcbiAgICAgICAgICAgICAgICAgICAgOiBhW0hPVVJdIDwgMCB8fFxuICAgICAgICAgICAgICAgICAgICAgIGFbSE9VUl0gPiAyNCB8fFxuICAgICAgICAgICAgICAgICAgICAgIChhW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoYVtNSU5VVEVdICE9PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW1NFQ09ORF0gIT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdICE9PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgPyBIT1VSXG4gICAgICAgICAgICAgICAgICAgIDogYVtNSU5VVEVdIDwgMCB8fCBhW01JTlVURV0gPiA1OVxuICAgICAgICAgICAgICAgICAgICA/IE1JTlVURVxuICAgICAgICAgICAgICAgICAgICA6IGFbU0VDT05EXSA8IDAgfHwgYVtTRUNPTkRdID4gNTlcbiAgICAgICAgICAgICAgICAgICAgPyBTRUNPTkRcbiAgICAgICAgICAgICAgICAgICAgOiBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTlcbiAgICAgICAgICAgICAgICAgICAgPyBNSUxMSVNFQ09ORFxuICAgICAgICAgICAgICAgICAgICA6IC0xO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd0RheU9mWWVhciAmJlxuICAgICAgICAgICAgICAgIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIGlzbyA4NjAxIHJlZ2V4XG4gICAgLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG4gICAgdmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbKy1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLyxcbiAgICAgICAgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGR8KSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoWystXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC8sXG4gICAgICAgIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy8sXG4gICAgICAgIGlzb0RhdGVzID0gW1xuICAgICAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgICAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICAgICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAgICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgICAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dLFxuICAgICAgICAgICAgWydZWVlZTU0nLCAvXFxkezZ9LywgZmFsc2VdLFxuICAgICAgICAgICAgWydZWVlZJywgL1xcZHs0fS8sIGZhbHNlXSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xuICAgICAgICBpc29UaW1lcyA9IFtcbiAgICAgICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgICAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgICAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgICAgICBbJ0hIJywgL1xcZFxcZC9dLFxuICAgICAgICBdLFxuICAgICAgICBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKC0/XFxkKykvaSxcbiAgICAgICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgICAgICByZmMyODIyID0gL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLyxcbiAgICAgICAgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgICAgIFVUOiAwLFxuICAgICAgICAgICAgR01UOiAwLFxuICAgICAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICAgICAgRVNUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTURUOiAtNiAqIDYwLFxuICAgICAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICAgICAgUFNUOiAtOCAqIDYwLFxuICAgICAgICB9O1xuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLFxuICAgICAgICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgICAgICAgIHRpbWVGb3JtYXQsXG4gICAgICAgICAgICB0ekZvcm1hdDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgeWVhclN0cixcbiAgICAgICAgbW9udGhTdHIsXG4gICAgICAgIGRheVN0cixcbiAgICAgICAgaG91clN0cixcbiAgICAgICAgbWludXRlU3RyLFxuICAgICAgICBzZWNvbmRTdHJcbiAgICApIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKSxcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpXG4gICAgICAgICAgICAucmVwbGFjZSgvXlxcc1xccyovLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW5kZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRJbnB1dFswXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkSW5wdXRbMV0sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZElucHV0WzJdXG4gICAgICAgICAgICAgICAgKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKSxcbiAgICAgICAgICAgICAgICBtID0gaG0gJSAxMDAsXG4gICAgICAgICAgICAgICAgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICAgICAgcmV0dXJuIGggKiA2MCArIG07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGFuZCB0aW1lIGZyb20gcmVmIDI4MjIgZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKSxcbiAgICAgICAgICAgIHBhcnNlZEFycmF5O1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhcbiAgICAgICAgICAgICAgICBtYXRjaFs0XSxcbiAgICAgICAgICAgICAgICBtYXRjaFszXSxcbiAgICAgICAgICAgICAgICBtYXRjaFsyXSxcbiAgICAgICAgICAgICAgICBtYXRjaFs1XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs2XSxcbiAgICAgICAgICAgICAgICBtYXRjaFs3XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gMSkgQVNQLk5FVCwgMikgSVNPLCAzKSBSRkMgMjgyMiBmb3JtYXRzLCBvciA0KSBvcHRpb25hbCBmYWxsYmFjayBpZiBwYXJzaW5nIGlzbid0IHN0cmljdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX3N0cmljdCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaW5hbCBhdHRlbXB0LCB1c2UgSW5wdXQgRmFsbGJhY2tcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAgICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAgICAgJ2Rpc2NvdXJhZ2VkLiBQbGVhc2UgcmVmZXIgdG8gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuICAgIGZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAgICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICAgICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICBub3dWYWx1ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgICAgIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5KGNvbmZpZykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGRhdGUsXG4gICAgICAgICAgICBpbnB1dCA9IFtdLFxuICAgICAgICAgICAgY3VycmVudERhdGUsXG4gICAgICAgICAgICBleHBlY3RlZFdlZWtkYXksXG4gICAgICAgICAgICB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHxcbiAgICAgICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoeWVhclRvVXNlLCAwLCBjb25maWcuX2RheU9mWWVhcik7XG4gICAgICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAgICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAvLyAqIGlmIGRheSBvZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBtb250aCBhbmQgeWVhclxuICAgICAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgICAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDMgJiYgY29uZmlnLl9hW2ldID09IG51bGw7ICsraSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFplcm8gb3V0IHdoYXRldmVyIHdhcyBub3QgZGVmYXVsdGVkLCBpbmNsdWRpbmcgdGltZVxuICAgICAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPVxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9PSBudWxsID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbmZpZy5fbmV4dERheSA9IHRydWU7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLl9kID0gKGNvbmZpZy5fdXNlVVRDID8gY3JlYXRlVVRDRGF0ZSA6IGNyZWF0ZURhdGUpLmFwcGx5KFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGlucHV0XG4gICAgICAgICk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDXG4gICAgICAgICAgICA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKVxuICAgICAgICAgICAgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAgICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgICAgIC8vIHdpdGggcGFyc2Vab25lLlxuICAgICAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fdyAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdywgY3VyV2VlaztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKFxuICAgICAgICAgICAgICAgIHcuR0csXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1lFQVJdLFxuICAgICAgICAgICAgICAgIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgdG9rZW5zLFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgICAgICBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwLFxuICAgICAgICAgICAgZXJhO1xuXG4gICAgICAgIHRva2VucyA9XG4gICAgICAgICAgICBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fFxuICAgICAgICAgICAgICAgIFtdKVswXTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2UoXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSArIHBhcnNlZElucHV0Lmxlbmd0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkb24ndCBwYXJzZSBpZiBpdCdzIG5vdCBhIGtub3duIHRva2VuXG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuY2hhcnNMZWZ0T3ZlciA9XG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChcbiAgICAgICAgICAgIGNvbmZpZy5fbG9jYWxlLFxuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdLFxuICAgICAgICAgICAgY29uZmlnLl9tZXJpZGllbVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGhhbmRsZSBlcmFcbiAgICAgICAgZXJhID0gZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZXJhO1xuICAgICAgICBpZiAoZXJhICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSBjb25maWcuX2xvY2FsZS5lcmFzQ29udmVydFllYXIoZXJhLCBjb25maWcuX2FbWUVBUl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcbiAgICAgICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSxcbiAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmQsXG4gICAgICAgICAgICBiZXN0Rm9ybWF0SXNWYWxpZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnLl9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRGb3JtYXRGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoIWJlc3RGb3JtYXRJc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0IHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkRm9ybWF0Rm91bmRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRGb3JtYXRGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEZvcm1hdElzVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcmVUb0JlYXQgPSBjdXJyZW50U2NvcmU7XG4gICAgICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpLFxuICAgICAgICAgICAgZGF5T3JEYXRlID0gaS5kYXkgPT09IHVuZGVmaW5lZCA/IGkuZGF0ZSA6IGkuZGF5O1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoXG4gICAgICAgICAgICBbaS55ZWFyLCBpLm1vbnRoLCBkYXlPckRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqICYmIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBmb3JtYXQgPSBjb25maWcuX2Y7XG5cbiAgICAgICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKHsgbnVsbElucHV0OiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgICAgICB2YXIgYyA9IHt9O1xuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IHRydWUgfHwgZm9ybWF0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RyaWN0ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlTWluID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKSxcbiAgICAgICAgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAgICAgJ21vbWVudCgpLm1heCBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1pbiBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgIC8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4gICAgLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuICAgIC8vXG4gICAgLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuICAgIC8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG4gICAgZnVuY3Rpb24gcGlja0J5KGZuLCBtb21lbnRzKSB7XG4gICAgICAgIHZhciByZXMsIGk7XG4gICAgICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgICAgICBtb21lbnRzID0gbW9tZW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbW9tZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG4gICAgZnVuY3Rpb24gbWluKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArbmV3IERhdGUoKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gW1xuICAgICAgICAneWVhcicsXG4gICAgICAgICdxdWFydGVyJyxcbiAgICAgICAgJ21vbnRoJyxcbiAgICAgICAgJ3dlZWsnLFxuICAgICAgICAnZGF5JyxcbiAgICAgICAgJ2hvdXInLFxuICAgICAgICAnbWludXRlJyxcbiAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIHZhciBrZXksXG4gICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IGZhbHNlLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGhhc093blByb3AobSwga2V5KSAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmRlcmluZy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gb25seSBhbGxvdyBub24taW50ZWdlcnMgZm9yIHNtYWxsZXN0IHVuaXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdEhhc0RlY2ltYWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBEdXJhdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID1cbiAgICAgICAgICAgICttaWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgICAgIG1pbnV0ZXMgKiA2ZTQgKyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgICAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAgICAgLy8gZGF5IHdoZW4gd29ya2luZyBhcm91bmQgRFNULCB3ZSBuZWVkIHRvIHN0b3JlIHRoZW0gc2VwYXJhdGVseVxuICAgICAgICB0aGlzLl9kYXlzID0gK2RheXMgKyB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgKyBxdWFydGVycyAqIDMgKyB5ZWFycyAqIDEyO1xuXG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcblxuICAgICAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgICAgICB0aGlzLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjb21wYXJlIHR3byBhcnJheXMsIHJldHVybiB0aGUgbnVtYmVyIG9mIGRpZmZlcmVuY2VzXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgbGVuZ3RoRGlmZiA9IE1hdGguYWJzKGFycmF5MS5sZW5ndGggLSBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpLFxuICAgICAgICAgICAgICAgIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgc2lnbiArXG4gICAgICAgICAgICAgICAgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgc2VwYXJhdG9yICtcbiAgICAgICAgICAgICAgICB6ZXJvRmlsbCh+fm9mZnNldCAlIDYwLCAyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KCdaJywgJzonKTtcbiAgICBvZmZzZXQoJ1paJywgJycpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignWicsIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpLFxuICAgICAgICAgICAgY2h1bmssXG4gICAgICAgICAgICBwYXJ0cyxcbiAgICAgICAgICAgIG1pbnV0ZXM7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY2h1bmsgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHBhcnRzID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICAgICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgPyAwIDogcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPVxuICAgICAgICAgICAgICAgIChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KVxuICAgICAgICAgICAgICAgICAgICA/IGlucHV0LnZhbHVlT2YoKVxuICAgICAgICAgICAgICAgICAgICA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0KG0pIHtcbiAgICAgICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgICAgIHJldHVybiAtTWF0aC5yb3VuZChtLl9kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lKGlucHV0LCBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gLWlucHV0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5faSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0Y09mZnNldCh0Wm9uZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0KGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoNSkudXRjT2Zmc2V0KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge30sXG4gICAgICAgICAgICBvdGhlcjtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID1cbiAgICAgICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJiBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faXNEU1RTaGlmdGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTG9jYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbiAgICB2YXIgYXNwTmV0UmVnZXggPSAvXigtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspOihcXGQrKSg/OjooXFxkKykoXFwuXFxkKik/KT8kLyxcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAgICAgLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuICAgICAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgICAgIGlzb1JlZ2V4ID0gL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uKGlucHV0LCBrZXkpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICAgICAgc2lnbixcbiAgICAgICAgICAgIHJldCxcbiAgICAgICAgICAgIGRpZmZSZXM7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBtczogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgICAgICBNOiBpbnB1dC5fbW9udGhzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkgfHwgIWlzTmFOKCtpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9ICtpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gK2lucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKChtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IG1hdGNoWzFdID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgIGQ6IHRvSW50KG1hdGNoW0RBVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaDogdG9JbnQobWF0Y2hbSE9VUl0pICogc2lnbixcbiAgICAgICAgICAgICAgICBtOiB0b0ludChtYXRjaFtNSU5VVEVdKSAqIHNpZ24sXG4gICAgICAgICAgICAgICAgczogdG9JbnQobWF0Y2hbU0VDT05EXSkgKiBzaWduLFxuICAgICAgICAgICAgICAgIG1zOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduLCAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gbWF0Y2hbMV0gPT09ICctJyA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHk6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgdzogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQ6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgbTogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHM6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksXG4gICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgICAgIHJldC5fbG9jYWxlID0gaW5wdXQuX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2lzVmFsaWQnKSkge1xuICAgICAgICAgICAgcmV0Ll9pc1ZhbGlkID0gaW5wdXQuX2lzVmFsaWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyhpbnAsIHNpZ24pIHtcbiAgICAgICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAgICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgICAgIC8vIGlucCBtYXkgYmUgdW5kZWZpbmVkLCBzbyBjYXJlZnVsIGNhbGxpbmcgcmVwbGFjZSBvbiBpdC5cbiAgICAgICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICAgICAgcmV0dXJuIChpc05hTihyZXMpID8gMCA6IHJlcykgKiBzaWduO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcyA9IHt9O1xuXG4gICAgICAgIHJlcy5tb250aHMgPVxuICAgICAgICAgICAgb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArIChvdGhlci55ZWFyKCkgLSBiYXNlLnllYXIoKSkgKiAxMjtcbiAgICAgICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAgICAgLS1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICtiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJyk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXIgPSBjbG9uZVdpdGhPZmZzZXQob3RoZXIsIGJhc2UpO1xuICAgICAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXMubW9udGhzID0gLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIC8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbiAgICBmdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgICAgICBpZiAocGVyaW9kICE9PSBudWxsICYmICFpc05hTigrcGVyaW9kKSkge1xuICAgICAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgJ21vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRtcCA9IHZhbDtcbiAgICAgICAgICAgICAgICB2YWwgPSBwZXJpb2Q7XG4gICAgICAgICAgICAgICAgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgICAgICBpZiAobW9udGhzKSB7XG4gICAgICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlzKSB7XG4gICAgICAgICAgICBzZXQkMShtb20sICdEYXRlJywgZ2V0KG1vbSwgJ0RhdGUnKSArIGRheXMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgbW9tLl9kLnNldFRpbWUobW9tLl9kLnZhbHVlT2YoKSArIG1pbGxpc2Vjb25kcyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQobW9tLCBkYXlzIHx8IG1vbnRocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYWRkID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpLFxuICAgICAgICBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IGlucHV0IGluc3RhbmNlb2YgU3RyaW5nO1xuICAgIH1cblxuICAgIC8vIHR5cGUgTW9tZW50SW5wdXQgPSBNb21lbnQgfCBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyIHwgKG51bWJlciB8IHN0cmluZylbXSB8IE1vbWVudElucHV0T2JqZWN0IHwgdm9pZDsgLy8gbnVsbCB8IHVuZGVmaW5lZFxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzTW9tZW50KGlucHV0KSB8fFxuICAgICAgICAgICAgaXNEYXRlKGlucHV0KSB8fFxuICAgICAgICAgICAgaXNTdHJpbmcoaW5wdXQpIHx8XG4gICAgICAgICAgICBpc051bWJlcihpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTnVtYmVyT3JTdHJpbmdBcnJheShpbnB1dCkgfHxcbiAgICAgICAgICAgIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHx8XG4gICAgICAgICAgICBpbnB1dCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgaW5wdXQgPT09IHVuZGVmaW5lZFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50SW5wdXRPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICd5ZWFycycsXG4gICAgICAgICAgICAgICAgJ3llYXInLFxuICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAnbW9udGhzJyxcbiAgICAgICAgICAgICAgICAnbW9udGgnLFxuICAgICAgICAgICAgICAgICdNJyxcbiAgICAgICAgICAgICAgICAnZGF5cycsXG4gICAgICAgICAgICAgICAgJ2RheScsXG4gICAgICAgICAgICAgICAgJ2QnLFxuICAgICAgICAgICAgICAgICdkYXRlcycsXG4gICAgICAgICAgICAgICAgJ2RhdGUnLFxuICAgICAgICAgICAgICAgICdEJyxcbiAgICAgICAgICAgICAgICAnaG91cnMnLFxuICAgICAgICAgICAgICAgICdob3VyJyxcbiAgICAgICAgICAgICAgICAnaCcsXG4gICAgICAgICAgICAgICAgJ21pbnV0ZXMnLFxuICAgICAgICAgICAgICAgICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdtJyxcbiAgICAgICAgICAgICAgICAnc2Vjb25kcycsXG4gICAgICAgICAgICAgICAgJ3NlY29uZCcsXG4gICAgICAgICAgICAgICAgJ3MnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZHMnLFxuICAgICAgICAgICAgICAgICdtaWxsaXNlY29uZCcsXG4gICAgICAgICAgICAgICAgJ21zJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcHJvcGVydHk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHByb3BlcnR5VGVzdCA9IHByb3BlcnR5VGVzdCB8fCBoYXNPd25Qcm9wKGlucHV0LCBwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqZWN0VGVzdCAmJiBwcm9wZXJ0eVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNOdW1iZXJPclN0cmluZ0FycmF5KGlucHV0KSB7XG4gICAgICAgIHZhciBhcnJheVRlc3QgPSBpc0FycmF5KGlucHV0KSxcbiAgICAgICAgICAgIGRhdGFUeXBlVGVzdCA9IGZhbHNlO1xuICAgICAgICBpZiAoYXJyYXlUZXN0KSB7XG4gICAgICAgICAgICBkYXRhVHlwZVRlc3QgPVxuICAgICAgICAgICAgICAgIGlucHV0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzTnVtYmVyKGl0ZW0pICYmIGlzU3RyaW5nKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9KS5sZW5ndGggPT09IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5VGVzdCAmJiBkYXRhVHlwZVRlc3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNDYWxlbmRhclNwZWMoaW5wdXQpIHtcbiAgICAgICAgdmFyIG9iamVjdFRlc3QgPSBpc09iamVjdChpbnB1dCkgJiYgIWlzT2JqZWN0RW1wdHkoaW5wdXQpLFxuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gZmFsc2UsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgICdzYW1lRGF5JyxcbiAgICAgICAgICAgICAgICAnbmV4dERheScsXG4gICAgICAgICAgICAgICAgJ2xhc3REYXknLFxuICAgICAgICAgICAgICAgICduZXh0V2VlaycsXG4gICAgICAgICAgICAgICAgJ2xhc3RXZWVrJyxcbiAgICAgICAgICAgICAgICAnc2FtZUVsc2UnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBwcm9wZXJ0eTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgcHJvcGVydHlUZXN0ID0gcHJvcGVydHlUZXN0IHx8IGhhc093blByb3AoaW5wdXQsIHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmplY3RUZXN0ICYmIHByb3BlcnR5VGVzdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTZcbiAgICAgICAgICAgID8gJ3NhbWVFbHNlJ1xuICAgICAgICAgICAgOiBkaWZmIDwgLTFcbiAgICAgICAgICAgID8gJ2xhc3RXZWVrJ1xuICAgICAgICAgICAgOiBkaWZmIDwgMFxuICAgICAgICAgICAgPyAnbGFzdERheSdcbiAgICAgICAgICAgIDogZGlmZiA8IDFcbiAgICAgICAgICAgID8gJ3NhbWVEYXknXG4gICAgICAgICAgICA6IGRpZmYgPCAyXG4gICAgICAgICAgICA/ICduZXh0RGF5J1xuICAgICAgICAgICAgOiBkaWZmIDwgN1xuICAgICAgICAgICAgPyAnbmV4dFdlZWsnXG4gICAgICAgICAgICA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSh0aW1lLCBmb3JtYXRzKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIHNpbmdsZSBwYXJhbWV0ZXIsIGZvcm1hdHMgb25seSBvdmVybG9hZCB0byB0aGUgY2FsZW5kYXIgZnVuY3Rpb25cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01vbWVudElucHV0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGZvcm1hdHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2FsZW5kYXJTcGVjKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXRzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIHRpbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJyxcbiAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgZm9ybWF0cyAmJlxuICAgICAgICAgICAgICAgIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSlcbiAgICAgICAgICAgICAgICAgICAgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpXG4gICAgICAgICAgICAgICAgICAgIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQoXG4gICAgICAgICAgICBvdXRwdXQgfHwgdGhpcy5sb2NhbGVEYXRhKCkuY2FsZW5kYXIoZm9ybWF0LCB0aGlzLCBjcmVhdGVMb2NhbChub3cpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0FmdGVyKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4oZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgICAgICB2YXIgbG9jYWxGcm9tID0gaXNNb21lbnQoZnJvbSkgPyBmcm9tIDogY3JlYXRlTG9jYWwoZnJvbSksXG4gICAgICAgICAgICBsb2NhbFRvID0gaXNNb21lbnQodG8pID8gdG8gOiBjcmVhdGVMb2NhbCh0byk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsRnJvbS5pc1ZhbGlkKCkgJiYgbG9jYWxUby5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzBdID09PSAnKCdcbiAgICAgICAgICAgICAgICA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKVxuICAgICAgICAgICAgICAgIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJ1xuICAgICAgICAgICAgICAgID8gdGhpcy5pc0JlZm9yZShsb2NhbFRvLCB1bml0cylcbiAgICAgICAgICAgICAgICA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZShpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgICAgIGlucHV0TXM7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID09PSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmXG4gICAgICAgICAgICAgICAgaW5wdXRNcyA8PSB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQWZ0ZXIoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZihpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICAgICAgdmFyIHRoYXQsIHpvbmVEZWx0YSwgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzO1xuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCAqIDcsIG5lZ2F0ZSBkc3RcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmKGEsIGIpIHtcbiAgICAgICAgaWYgKGEuZGF0ZSgpIDwgYi5kYXRlKCkpIHtcbiAgICAgICAgICAgIC8vIGVuZC1vZi1tb250aCBjYWxjdWxhdGlvbnMgd29yayBjb3JyZWN0IHdoZW4gdGhlIHN0YXJ0IG1vbnRoIGhhcyBtb3JlXG4gICAgICAgICAgICAvLyBkYXlzIHRoYW4gdGhlIGVuZCBtb250aC5cbiAgICAgICAgICAgIHJldHVybiAtbW9udGhEaWZmKGIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9IChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICAgICAgYW5jaG9yID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiwgJ21vbnRocycpLFxuICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZSxcbiAgICAgICAgICAgIG0gPSB1dGMgPyB0aGlzLmNsb25lKCkudXRjKCkgOiB0aGlzO1xuICAgICAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChcbiAgICAgICAgICAgICAgICBtLFxuICAgICAgICAgICAgICAgIHV0Y1xuICAgICAgICAgICAgICAgICAgICA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nXG4gICAgICAgICAgICAgICAgICAgIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKVxuICAgICAgICAgICAgICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KFxuICAgICAgICAgICAgbSxcbiAgICAgICAgICAgIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb21lbnQuaW52YWxpZCgvKiAnICsgdGhpcy5faSArICcgKi8pJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZnVuYyA9ICdtb21lbnQnLFxuICAgICAgICAgICAgem9uZSA9ICcnLFxuICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgIGRhdGV0aW1lLFxuICAgICAgICAgICAgc3VmZml4O1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgICAgIHpvbmUgPSAnWic7XG4gICAgICAgIH1cbiAgICAgICAgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgeWVhciA9IDAgPD0gdGhpcy55ZWFyKCkgJiYgdGhpcy55ZWFyKCkgPD0gOTk5OSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQocHJlZml4ICsgeWVhciArIGRhdGV0aW1lICsgc3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKClcbiAgICAgICAgICAgICAgICA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGNcbiAgICAgICAgICAgICAgICA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dHB1dCA9IGZvcm1hdE1vbWVudCh0aGlzLCBpbnB1dFN0cmluZyk7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbSh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fCBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgdG86IHRoaXMsIGZyb206IHRpbWUgfSlcbiAgICAgICAgICAgICAgICAubG9jYWxlKHRoaXMubG9jYWxlKCkpXG4gICAgICAgICAgICAgICAgLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbU5vdyh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8odGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHwgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7IGZyb206IHRoaXMsIHRvOiB0aW1lIH0pXG4gICAgICAgICAgICAgICAgLmxvY2FsZSh0aGlzLmxvY2FsZSgpKVxuICAgICAgICAgICAgICAgIC5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93KHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlKGtleSkge1xuICAgICAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2NhbGUuX2FiYnI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICBpZiAobmV3TG9jYWxlRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGxhbmcgPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDAsXG4gICAgICAgIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQsXG4gICAgICAgIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFLFxuICAgICAgICBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoKGRpdmlkZW5kICUgZGl2aXNvcikgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCkgLSAodGhpcy5tb250aCgpICUgMyksXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMShcbiAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgIE1TX1BFUl9IT1VSXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZE9mKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lLCBzdGFydE9mRGF0ZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPVxuICAgICAgICAgICAgICAgICAgICBzdGFydE9mRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb250aCgpIC0gKHRoaXMubW9udGgoKSAlIDMpICsgMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgKyAxLCAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID1cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZkRhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3XG4gICAgICAgICAgICAgICAgICAgICkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vbnRoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUoKSAtICh0aGlzLmlzb1dlZWtkYXkoKSAtIDEpICsgN1xuICAgICAgICAgICAgICAgICAgICApIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPVxuICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUiAtXG4gICAgICAgICAgICAgICAgICAgIG1vZCQxKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZSArICh0aGlzLl9pc1VUQyA/IDAgOiB0aGlzLnV0Y09mZnNldCgpICogTVNfUEVSX01JTlVURSksXG4gICAgICAgICAgICAgICAgICAgICAgICBNU19QRVJfSE9VUlxuICAgICAgICAgICAgICAgICAgICApIC1cbiAgICAgICAgICAgICAgICAgICAgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAodGhpcy5fb2Zmc2V0IHx8IDApICogNjAwMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgbS55ZWFyKCksXG4gICAgICAgICAgICBtLm1vbnRoKCksXG4gICAgICAgICAgICBtLmRhdGUoKSxcbiAgICAgICAgICAgIG0uaG91cigpLFxuICAgICAgICAgICAgbS5taW51dGUoKSxcbiAgICAgICAgICAgIG0uc2Vjb25kKCksXG4gICAgICAgICAgICBtLm1pbGxpc2Vjb25kKCksXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkQXQoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZEZvcm1hdFRva2VuKCdOJywgMCwgMCwgJ2VyYUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk4nLCAwLCAwLCAnZXJhQWJicicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdOTk5OJywgMCwgMCwgJ2VyYU5hbWUnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignTk5OTk4nLCAwLCAwLCAnZXJhTmFycm93Jyk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneScsIDFdLCAneW8nLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eScsIDJdLCAwLCAnZXJhWWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd5JywgWyd5eXknLCAzXSwgMCwgJ2VyYVllYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneScsIFsneXl5eScsIDRdLCAwLCAnZXJhWWVhcicpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk4nLCBtYXRjaEVyYUFiYnIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ05OTicsIG1hdGNoRXJhQWJicik7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTicsIG1hdGNoRXJhTmFtZSk7XG4gICAgYWRkUmVnZXhUb2tlbignTk5OTk4nLCBtYXRjaEVyYU5hcnJvdyk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTicsICdOTicsICdOTk4nLCAnTk5OTicsICdOTk5OTiddLCBmdW5jdGlvbiAoXG4gICAgICAgIGlucHV0LFxuICAgICAgICBhcnJheSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0b2tlblxuICAgICkge1xuICAgICAgICB2YXIgZXJhID0gY29uZmlnLl9sb2NhbGUuZXJhc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICBpZiAoZXJhKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lcmEgPSBlcmE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRXJhID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3knLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eScsIG1hdGNoVW5zaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3l5eXknLCBtYXRjaFVuc2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCd5bycsIG1hdGNoRXJhWWVhck9yZGluYWwpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ3knLCAneXknLCAneXl5JywgJ3l5eXknXSwgWUVBUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3lvJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICBpZiAoY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpIHtcbiAgICAgICAgICAgIG1hdGNoID0gaW5wdXQubWF0Y2goY29uZmlnLl9sb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbG9jYWxlLmVyYVllYXJPcmRpbmFsUGFyc2UpIHtcbiAgICAgICAgICAgIGFycmF5W1lFQVJdID0gY29uZmlnLl9sb2NhbGUuZXJhWWVhck9yZGluYWxQYXJzZShpbnB1dCwgbWF0Y2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkYXRlLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuX2VyYXMgfHwgZ2V0TG9jYWxlKCdlbicpLl9lcmFzO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBob29rcyhlcmFzW2ldLnNpbmNlKS5zdGFydE9mKCdkYXknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS5zaW5jZSA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0udW50aWwgPSArSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IGhvb2tzKGVyYXNbaV0udW50aWwpLnN0YXJ0T2YoJ2RheScpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgZXJhc1tpXS51bnRpbCA9IGRhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJhcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVFcmFzUGFyc2UoZXJhTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMuZXJhcygpLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFiYnIsXG4gICAgICAgICAgICBuYXJyb3c7XG4gICAgICAgIGVyYU5hbWUgPSBlcmFOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBuYW1lID0gZXJhc1tpXS5uYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBhYmJyID0gZXJhc1tpXS5hYmJyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBuYXJyb3cgPSBlcmFzW2ldLm5hcnJvdy50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ05OJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYmJyID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdOTk5OTic6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFycm93ID09PSBlcmFOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtuYW1lLCBhYmJyLCBuYXJyb3ddLmluZGV4T2YoZXJhTmFtZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRXJhc0NvbnZlcnRZZWFyKGVyYSwgeWVhcikge1xuICAgICAgICB2YXIgZGlyID0gZXJhLnNpbmNlIDw9IGVyYS51bnRpbCA/ICsxIDogLTE7XG4gICAgICAgIGlmICh5ZWFyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBob29rcyhlcmEuc2luY2UpLnllYXIoKSArICh5ZWFyIC0gZXJhLm9mZnNldCkgKiBkaXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFOYW1lKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChlcmFzW2ldLnNpbmNlIDw9IHZhbCAmJiB2YWwgPD0gZXJhc1tpXS51bnRpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcmFzW2ldLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEVyYU5hcnJvdygpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJhc1tpXS51bnRpbCA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0uc2luY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5uYXJyb3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RXJhQWJicigpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgZXJhcyA9IHRoaXMubG9jYWxlRGF0YSgpLmVyYXMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aW1lXG4gICAgICAgICAgICB2YWwgPSB0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykudmFsdWVPZigpO1xuXG4gICAgICAgICAgICBpZiAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJhc1tpXS5hYmJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVyYXNbaV0uYWJicjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFcmFZZWFyKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBkaXIsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5sb2NhbGVEYXRhKCkuZXJhcygpO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gZXJhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGRpciA9IGVyYXNbaV0uc2luY2UgPD0gZXJhc1tpXS51bnRpbCA/ICsxIDogLTE7XG5cbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRpbWVcbiAgICAgICAgICAgIHZhbCA9IHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKS52YWx1ZU9mKCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoZXJhc1tpXS5zaW5jZSA8PSB2YWwgJiYgdmFsIDw9IGVyYXNbaV0udW50aWwpIHx8XG4gICAgICAgICAgICAgICAgKGVyYXNbaV0udW50aWwgPD0gdmFsICYmIHZhbCA8PSBlcmFzW2ldLnNpbmNlKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMueWVhcigpIC0gaG9va3MoZXJhc1tpXS5zaW5jZSkueWVhcigpKSAqIGRpciArXG4gICAgICAgICAgICAgICAgICAgIGVyYXNbaV0ub2Zmc2V0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnllYXIoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcmFzTmFtZVJlZ2V4KGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX2VyYXNOYW1lUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYW1lUmVnZXggOiB0aGlzLl9lcmFzUmVnZXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJhc0FiYnJSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzQWJiclJlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVFcmFzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgPyB0aGlzLl9lcmFzQWJiclJlZ2V4IDogdGhpcy5fZXJhc1JlZ2V4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNOYXJyb3dSZWdleChpc1N0cmljdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19lcmFzTmFycm93UmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZUVyYXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/IHRoaXMuX2VyYXNOYXJyb3dSZWdleCA6IHRoaXMuX2VyYXNSZWdleDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXRjaEVyYUFiYnIoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNBYmJyUmVnZXgoaXNTdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hdGNoRXJhTmFtZShpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZXJhc05hbWVSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFOYXJyb3coaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmVyYXNOYXJyb3dSZWdleChpc1N0cmljdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF0Y2hFcmFZZWFyT3JkaW5hbChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX2VyYVllYXJPcmRpbmFsUmVnZXggfHwgbWF0Y2hVbnNpZ25lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlRXJhc1BhcnNlKCkge1xuICAgICAgICB2YXIgYWJiclBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFtZVBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgbmFycm93UGllY2VzID0gW10sXG4gICAgICAgICAgICBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGwsXG4gICAgICAgICAgICBlcmFzID0gdGhpcy5lcmFzKCk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGVyYXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBuYW1lUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICBhYmJyUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5hYmJyKSk7XG4gICAgICAgICAgICBuYXJyb3dQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLm5hcnJvdykpO1xuXG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHJlZ2V4RXNjYXBlKGVyYXNbaV0ubmFtZSkpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChyZWdleEVzY2FwZShlcmFzW2ldLmFiYnIpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gocmVnZXhFc2NhcGUoZXJhc1tpXS5uYXJyb3cpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VyYXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fZXJhc05hbWVSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG5hbWVQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9lcmFzQWJiclJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgYWJiclBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX2VyYXNOYXJyb3dSZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAnXignICsgbmFycm93UGllY2VzLmpvaW4oJ3wnKSArICcpJyxcbiAgICAgICAgICAgICdpJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzb1dlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAnaXNvV2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHRycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChcbiAgICAgICAgaW5wdXQsXG4gICAgICAgIHdlZWssXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgdG9rZW5cbiAgICApIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3lcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMuaXNvV2VlaygpLFxuICAgICAgICAgICAgdGhpcy5pc29XZWVrZGF5KCksXG4gICAgICAgICAgICAxLFxuICAgICAgICAgICAgNFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyKCkge1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5JU09XZWVrWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMuaXNvV2Vla1llYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luV2Vla1llYXIoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy53ZWVrWWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGxcbiAgICAgICAgICAgID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpXG4gICAgICAgICAgICA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgKHRoaXMubW9udGgoKSAlIDMpKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdFxuICAgICAgICAgICAgPyBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2VcbiAgICAgICAgICAgIDogbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydEJywgJ0REJ10sIERBVEUpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXlPZlllYXInLCAnREREJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEREQnLCBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9XG4gICAgICAgICAgICBNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1XG4gICAgICAgICAgICApICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZChpbnB1dCAtIGRheU9mWWVhciwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydzJywgJ3NzJ10sIFNFQ09ORCk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDA7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuLCBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG5cbiAgICBnZXRTZXRNaWxsaXNlY29uZCA9IG1ha2VHZXRTZXQoJ01pbGxpc2Vjb25kcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCd6JywgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJicigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ0Nvb3JkaW5hdGVkIFVuaXZlcnNhbCBUaW1lJyA6ICcnO1xuICAgIH1cblxuICAgIHZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbiAgICBwcm90by5hZGQgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiA9IGRpZmY7XG4gICAgcHJvdG8uZW5kT2YgPSBlbmRPZjtcbiAgICBwcm90by5mb3JtYXQgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSA9IGZyb207XG4gICAgcHJvdG8uZnJvbU5vdyA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gPSB0bztcbiAgICBwcm90by50b05vdyA9IHRvTm93O1xuICAgIHByb3RvLmdldCA9IHN0cmluZ0dldDtcbiAgICBwcm90by5pbnZhbGlkQXQgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciA9IGlzQWZ0ZXI7XG4gICAgcHJvdG8uaXNCZWZvcmUgPSBpc0JlZm9yZTtcbiAgICBwcm90by5pc0JldHdlZW4gPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCA9IGlzVmFsaWQkMjtcbiAgICBwcm90by5sYW5nID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgPSBsb2NhbGU7XG4gICAgcHJvdG8ubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ID0gcHJvdG90eXBlTWF4O1xuICAgIHByb3RvLm1pbiA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ID0gc3RyaW5nU2V0O1xuICAgIHByb3RvLnN0YXJ0T2YgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ID0gaW5zcGVjdDtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLmZvciAhPSBudWxsKSB7XG4gICAgICAgIHByb3RvW1N5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICdNb21lbnQ8JyArIHRoaXMuZm9ybWF0KCkgKyAnPic7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RvLnRvSlNPTiA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggPSB1bml4O1xuICAgIHByb3RvLnZhbHVlT2YgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSA9IGNyZWF0aW9uRGF0YTtcbiAgICBwcm90by5lcmFOYW1lID0gZ2V0RXJhTmFtZTtcbiAgICBwcm90by5lcmFOYXJyb3cgPSBnZXRFcmFOYXJyb3c7XG4gICAgcHJvdG8uZXJhQWJiciA9IGdldEVyYUFiYnI7XG4gICAgcHJvdG8uZXJhWWVhciA9IGdldEVyYVllYXI7XG4gICAgcHJvdG8ueWVhciA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgPSBwcm90by53ZWVrcyA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayA9IHByb3RvLmlzb1dlZWtzID0gZ2V0U2V0SVNPV2VlaztcbiAgICBwcm90by53ZWVrc0luWWVhciA9IGdldFdlZWtzSW5ZZWFyO1xuICAgIHByb3RvLndlZWtzSW5XZWVrWWVhciA9IGdldFdlZWtzSW5XZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmlzb1dlZWtzSW5JU09XZWVrWWVhciA9IGdldElTT1dlZWtzSW5JU09XZWVrWWVhcjtcbiAgICBwcm90by5kYXRlID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgPSBwcm90by5kYXlzID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgPSBnZXRTZXREYXlPZlllYXI7XG4gICAgcHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcbiAgICBwcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuICAgIHByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG4gICAgcHJvdG8ubWlsbGlzZWNvbmQgPSBwcm90by5taWxsaXNlY29uZHMgPSBnZXRTZXRNaWxsaXNlY29uZDtcbiAgICBwcm90by51dGNPZmZzZXQgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xuICAgIHByb3RvLmhhc0FsaWduZWRIb3VyT2Zmc2V0ID0gaGFzQWxpZ25lZEhvdXJPZmZzZXQ7XG4gICAgcHJvdG8uaXNEU1QgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbiAgICBwcm90by5pc0xvY2FsID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgPSBkZXByZWNhdGUoXG4gICAgICAgICdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsXG4gICAgICAgIGdldFNldERheU9mTW9udGhcbiAgICApO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbnRocyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgbW9udGggaW5zdGVhZCcsXG4gICAgICAgIGdldFNldE1vbnRoXG4gICAgKTtcbiAgICBwcm90by55ZWFycyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ3llYXJzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSB5ZWFyIGluc3RlYWQnLFxuICAgICAgICBnZXRTZXRZZWFyXG4gICAgKTtcbiAgICBwcm90by56b25lID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLFxuICAgICAgICBnZXRTZXRab25lXG4gICAgKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoXG4gICAgICAgICdpc0RTVFNoaWZ0ZWQgaXMgZGVwcmVjYXRlZC4gU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZHN0LXNoaWZ0ZWQvIGZvciBtb3JlIGluZm9ybWF0aW9uJyxcbiAgICAgICAgaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkXG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVuaXgoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQoc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDEgPSBMb2NhbGUucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMS5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlID0gaW52YWxpZERhdGU7XG4gICAgcHJvdG8kMS5vcmRpbmFsID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlID0gcHJlUGFyc2VQb3N0Rm9ybWF0O1xuICAgIHByb3RvJDEucG9zdGZvcm1hdCA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ID0gc2V0O1xuICAgIHByb3RvJDEuZXJhcyA9IGxvY2FsZUVyYXM7XG4gICAgcHJvdG8kMS5lcmFzUGFyc2UgPSBsb2NhbGVFcmFzUGFyc2U7XG4gICAgcHJvdG8kMS5lcmFzQ29udmVydFllYXIgPSBsb2NhbGVFcmFzQ29udmVydFllYXI7XG4gICAgcHJvdG8kMS5lcmFzQWJiclJlZ2V4ID0gZXJhc0FiYnJSZWdleDtcbiAgICBwcm90byQxLmVyYXNOYW1lUmVnZXggPSBlcmFzTmFtZVJlZ2V4O1xuICAgIHByb3RvJDEuZXJhc05hcnJvd1JlZ2V4ID0gZXJhc05hcnJvd1JlZ2V4O1xuXG4gICAgcHJvdG8kMS5tb250aHMgPSBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCA9IGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgPSBsb2NhbGVNb250aHNQYXJzZTtcbiAgICBwcm90byQxLm1vbnRoc1JlZ2V4ID0gbW9udGhzUmVnZXg7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzID0gbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiA9IGxvY2FsZVdlZWtkYXlzTWluO1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydCA9IGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlID0gbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCA9IHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggPSB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ID0gd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgICAgICB1dGMgPSBjcmVhdGVVVEMoKS5zZXQoc2V0dGVyLCBpbmRleCk7XG4gICAgICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBvdXQgPSBbXTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyhmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0TW9udGhzSW1wbChmb3JtYXQsIGluZGV4LCAnbW9udGhzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0KGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyhsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbihsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBlcmFzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luY2U6ICcwMDAxLTAxLTAxJyxcbiAgICAgICAgICAgICAgICB1bnRpbDogK0luZmluaXR5LFxuICAgICAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQW5ubyBEb21pbmknLFxuICAgICAgICAgICAgICAgIG5hcnJvdzogJ0FEJyxcbiAgICAgICAgICAgICAgICBhYmJyOiAnQUQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5jZTogJzAwMDAtMTItMzEnLFxuICAgICAgICAgICAgICAgIHVudGlsOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdCZWZvcmUgQ2hyaXN0JyxcbiAgICAgICAgICAgICAgICBuYXJyb3c6ICdCQycsXG4gICAgICAgICAgICAgICAgYWJicjogJ0JDJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9XG4gICAgICAgICAgICAgICAgICAgIHRvSW50KChudW1iZXIgJSAxMDApIC8gMTApID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICd0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYiA9PT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGIgPT09IDJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ25kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBiID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdyZCdcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICBob29rcy5sYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLFxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGVcbiAgICApO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsXG4gICAgICAgIGdldExvY2FsZVxuICAgICk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gbWF0aEFicyh0aGlzLl9taWxsaXNlY29uZHMpO1xuICAgICAgICB0aGlzLl9kYXlzID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWF0aEFicyhkYXRhLm1pbGxpc2Vjb25kcyk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICAgICAgZGF0YS5taW51dGVzID0gbWF0aEFicyhkYXRhLm1pbnV0ZXMpO1xuICAgICAgICBkYXRhLmhvdXJzID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICAgICAgZGF0YS55ZWFycyA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMShkdXJhdGlvbiwgaW5wdXQsIHZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHZhbHVlKTtcblxuICAgICAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLl9kYXlzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgMSk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSgpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzLFxuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzLFxuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RhdGEsXG4gICAgICAgICAgICBzZWNvbmRzLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBtb250aHNGcm9tRGF5cztcblxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbWl4IG9mIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2YWx1ZXMsIGJ1YmJsZSBkb3duIGZpcnN0XG4gICAgICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMClcbiAgICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMoZGF5cykge1xuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDEyIG1vbnRocyA9PT0gNDgwMFxuICAgICAgICByZXR1cm4gKGRheXMgKiA0ODAwKSAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gKG1vbnRocyAqIDE0NjA5NykgLyA0ODAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXMsXG4gICAgICAgICAgICBtb250aHMsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHM7XG4gICAgICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aHMgLyAzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzIC8gMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgbWlsbGlzZWNvbmRzIHNlcGFyYXRlbHkgYmVjYXVzZSBvZiBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyAoaXNzdWUgIzE4NjcpXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5cyAvIDcgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAyNCArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheXMgKiAxNDQwICsgbWlsbGlzZWNvbmRzIC8gNmU0O1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG4gICAgZnVuY3Rpb24gdmFsdWVPZiQxKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyhhbGlhcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKSxcbiAgICAgICAgYXNTZWNvbmRzID0gbWFrZUFzKCdzJyksXG4gICAgICAgIGFzTWludXRlcyA9IG1ha2VBcygnbScpLFxuICAgICAgICBhc0hvdXJzID0gbWFrZUFzKCdoJyksXG4gICAgICAgIGFzRGF5cyA9IG1ha2VBcygnZCcpLFxuICAgICAgICBhc1dlZWtzID0gbWFrZUFzKCd3JyksXG4gICAgICAgIGFzTW9udGhzID0gbWFrZUFzKCdNJyksXG4gICAgICAgIGFzUXVhcnRlcnMgPSBtYWtlQXMoJ1EnKSxcbiAgICAgICAgYXNZZWFycyA9IG1ha2VBcygneScpO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5fZGF0YVtuYW1lXSA6IE5hTjtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gbWFrZUdldHRlcignbWlsbGlzZWNvbmRzJyksXG4gICAgICAgIHNlY29uZHMgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyksXG4gICAgICAgIG1pbnV0ZXMgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyksXG4gICAgICAgIGhvdXJzID0gbWFrZUdldHRlcignaG91cnMnKSxcbiAgICAgICAgZGF5cyA9IG1ha2VHZXR0ZXIoJ2RheXMnKSxcbiAgICAgICAgbW9udGhzID0gbWFrZUdldHRlcignbW9udGhzJyksXG4gICAgICAgIHllYXJzID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzKCkge1xuICAgICAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbiAgICB9XG5cbiAgICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgICB0aHJlc2hvbGRzID0ge1xuICAgICAgICAgICAgc3M6IDQ0LCAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgICAgIHM6IDQ1LCAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgICAgICAgICAgbTogNDUsIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICAgICAgaDogMjIsIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICAgICAgZDogMjYsIC8vIGRheXMgdG8gbW9udGgvd2Vla1xuICAgICAgICAgICAgdzogbnVsbCwgLy8gd2Vla3MgdG8gbW9udGhcbiAgICAgICAgICAgIE06IDExLCAvLyBtb250aHMgdG8geWVhclxuICAgICAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMShwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgdGhyZXNob2xkcywgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKSxcbiAgICAgICAgICAgIHNlY29uZHMgPSByb3VuZChkdXJhdGlvbi5hcygncycpKSxcbiAgICAgICAgICAgIG1pbnV0ZXMgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKSxcbiAgICAgICAgICAgIGhvdXJzID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSksXG4gICAgICAgICAgICBkYXlzID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSksXG4gICAgICAgICAgICBtb250aHMgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKSxcbiAgICAgICAgICAgIHdlZWtzID0gcm91bmQoZHVyYXRpb24uYXMoJ3cnKSksXG4gICAgICAgICAgICB5ZWFycyA9IHJvdW5kKGR1cmF0aW9uLmFzKCd5JykpLFxuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgKHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSkgfHxcbiAgICAgICAgICAgICAgICAoc2Vjb25kcyA8IHRocmVzaG9sZHMucyAmJiBbJ3NzJywgc2Vjb25kc10pIHx8XG4gICAgICAgICAgICAgICAgKG1pbnV0ZXMgPD0gMSAmJiBbJ20nXSkgfHxcbiAgICAgICAgICAgICAgICAobWludXRlcyA8IHRocmVzaG9sZHMubSAmJiBbJ21tJywgbWludXRlc10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDw9IDEgJiYgWydoJ10pIHx8XG4gICAgICAgICAgICAgICAgKGhvdXJzIDwgdGhyZXNob2xkcy5oICYmIFsnaGgnLCBob3Vyc10pIHx8XG4gICAgICAgICAgICAgICAgKGRheXMgPD0gMSAmJiBbJ2QnXSkgfHxcbiAgICAgICAgICAgICAgICAoZGF5cyA8IHRocmVzaG9sZHMuZCAmJiBbJ2RkJywgZGF5c10pO1xuXG4gICAgICAgIGlmICh0aHJlc2hvbGRzLncgIT0gbnVsbCkge1xuICAgICAgICAgICAgYSA9XG4gICAgICAgICAgICAgICAgYSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8PSAxICYmIFsndyddKSB8fFxuICAgICAgICAgICAgICAgICh3ZWVrcyA8IHRocmVzaG9sZHMudyAmJiBbJ3d3Jywgd2Vla3NdKTtcbiAgICAgICAgfVxuICAgICAgICBhID0gYSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8PSAxICYmIFsnTSddKSB8fFxuICAgICAgICAgICAgKG1vbnRocyA8IHRocmVzaG9sZHMuTSAmJiBbJ01NJywgbW9udGhzXSkgfHxcbiAgICAgICAgICAgICh5ZWFycyA8PSAxICYmIFsneSddKSB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyhyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHJvdW5kaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplKGFyZ1dpdGhTdWZmaXgsIGFyZ1RocmVzaG9sZHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgd2l0aFN1ZmZpeCA9IGZhbHNlLFxuICAgICAgICAgICAgdGggPSB0aHJlc2hvbGRzLFxuICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGFyZ1RocmVzaG9sZHMgPSBhcmdXaXRoU3VmZml4O1xuICAgICAgICAgICAgYXJnV2l0aFN1ZmZpeCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYXJnV2l0aFN1ZmZpeCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB3aXRoU3VmZml4ID0gYXJnV2l0aFN1ZmZpeDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFyZ1RocmVzaG9sZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aCA9IE9iamVjdC5hc3NpZ24oe30sIHRocmVzaG9sZHMsIGFyZ1RocmVzaG9sZHMpO1xuICAgICAgICAgICAgaWYgKGFyZ1RocmVzaG9sZHMucyAhPSBudWxsICYmIGFyZ1RocmVzaG9sZHMuc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoLnNzID0gYXJnVGhyZXNob2xkcy5zIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgdGgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICh4ID4gMCkgLSAoeCA8IDApIHx8ICt4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nJDEoKSB7XG4gICAgICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgICAgIC8vICAqIG1pbGxpc2Vjb25kcyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgaG91cnNcbiAgICAgICAgLy8gICogZGF5cyBkbyBub3QgYnViYmxlIGF0IGFsbFxuICAgICAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGVyZSBpcyBubyBjb250ZXh0LWZyZWUgY29udmVyc2lvbiBiZXR3ZWVuIGhvdXJzIGFuZCBkYXlzXG4gICAgICAgIC8vICh0aGluayBvZiBjbG9jayBjaGFuZ2VzKVxuICAgICAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWNvbmRzID0gYWJzJDEodGhpcy5fbWlsbGlzZWNvbmRzKSAvIDEwMDAsXG4gICAgICAgICAgICBkYXlzID0gYWJzJDEodGhpcy5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnMkMSh0aGlzLl9tb250aHMpLFxuICAgICAgICAgICAgbWludXRlcyxcbiAgICAgICAgICAgIGhvdXJzLFxuICAgICAgICAgICAgeWVhcnMsXG4gICAgICAgICAgICBzLFxuICAgICAgICAgICAgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpLFxuICAgICAgICAgICAgdG90YWxTaWduLFxuICAgICAgICAgICAgeW1TaWduLFxuICAgICAgICAgICAgZGF5c1NpZ24sXG4gICAgICAgICAgICBobXNTaWduO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgaG91cnMgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBzZWNvbmRzICU9IDYwO1xuICAgICAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICAgICAgeWVhcnMgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuICAgICAgICAvLyBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZG9yZGlsbGUvbW9tZW50LWlzb2R1cmF0aW9uL2Jsb2IvbWFzdGVyL21vbWVudC5pc29kdXJhdGlvbi5qc1xuICAgICAgICBzID0gc2Vjb25kcyA/IHNlY29uZHMudG9GaXhlZCgzKS5yZXBsYWNlKC9cXC4/MCskLywgJycpIDogJyc7XG5cbiAgICAgICAgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgZGF5c1NpZ24gPSBzaWduKHRoaXMuX2RheXMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgICAgICBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0b3RhbFNpZ24gK1xuICAgICAgICAgICAgJ1AnICtcbiAgICAgICAgICAgICh5ZWFycyA/IHltU2lnbiArIHllYXJzICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChtb250aHMgPyB5bVNpZ24gKyBtb250aHMgKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKGRheXMgPyBkYXlzU2lnbiArIGRheXMgKyAnRCcgOiAnJykgK1xuICAgICAgICAgICAgKGhvdXJzIHx8IG1pbnV0ZXMgfHwgc2Vjb25kcyA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaG91cnMgPyBobXNTaWduICsgaG91cnMgKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG1pbnV0ZXMgPyBobXNTaWduICsgbWludXRlcyArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoc2Vjb25kcyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbiAgICBwcm90byQyLmlzVmFsaWQgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgPSBhYnM7XG4gICAgcHJvdG8kMi5hZGQgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzID0gYXNNaW51dGVzO1xuICAgIHByb3RvJDIuYXNIb3VycyA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgPSBhc0RheXM7XG4gICAgcHJvdG8kMi5hc1dlZWtzID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgPSBhc1llYXJzO1xuICAgIHByb3RvJDIudmFsdWVPZiA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLnNlY29uZHMgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyA9IGRheXM7XG4gICAgcHJvdG8kMi53ZWVrcyA9IHdlZWtzO1xuICAgIHByb3RvJDIubW9udGhzID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlID0gbG9jYWxlO1xuICAgIHByb3RvJDIubG9jYWxlRGF0YSA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLFxuICAgICAgICB0b0lTT1N0cmluZyQxXG4gICAgKTtcbiAgICBwcm90byQyLmxhbmcgPSBsYW5nO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKCd4JywgMCwgMCwgJ3ZhbHVlT2YnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWCcsIG1hdGNoVGltZXN0YW1wKTtcbiAgICBhZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQpICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8hIG1vbWVudC5qc1xuXG4gICAgaG9va3MudmVyc2lvbiA9ICcyLjI5LjEnO1xuXG4gICAgc2V0SG9va0NhbGxiYWNrKGNyZWF0ZUxvY2FsKTtcblxuICAgIGhvb2tzLmZuID0gcHJvdG87XG4gICAgaG9va3MubWluID0gbWluO1xuICAgIGhvb2tzLm1heCA9IG1heDtcbiAgICBob29rcy5ub3cgPSBub3c7XG4gICAgaG9va3MudXRjID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggPSBjcmVhdGVVbml4O1xuICAgIGhvb2tzLm1vbnRocyA9IGxpc3RNb250aHM7XG4gICAgaG9va3MuaXNEYXRlID0gaXNEYXRlO1xuICAgIGhvb2tzLmxvY2FsZSA9IGdldFNldEdsb2JhbExvY2FsZTtcbiAgICBob29rcy5pbnZhbGlkID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGhvb2tzLmlzTW9tZW50ID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiA9IGlzRHVyYXRpb247XG4gICAgaG9va3MubW9udGhzU2hvcnQgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuICAgIGhvb2tzLm5vcm1hbGl6ZVVuaXRzID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgPSBnZXRDYWxlbmRhckZvcm1hdDtcbiAgICBob29rcy5wcm90b3R5cGUgPSBwcm90bztcblxuICAgIC8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG4gICAgaG9va3MuSFRNTDVfRk1UID0ge1xuICAgICAgICBEQVRFVElNRV9MT0NBTDogJ1lZWVktTU0tRERUSEg6bW0nLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgLz5cbiAgICAgICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIERBVEU6ICdZWVlZLU1NLUREJywgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScsIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmIChyb290ID09PSB1bmRlZmluZWQgJiYgd2luZG93ICE9PSB1bmRlZmluZWQpIHJvb3QgPSB3aW5kb3c7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW1wianF1ZXJ5XCIsXCJtb21lbnRcIl0sIGZ1bmN0aW9uIChqcXVlcnksIG1vbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIChmYWN0b3J5KGpxdWVyeSwgbW9tZW50KSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgdmFyIG1vZHVsZV9leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpLHJlcXVpcmUoXCJtb21lbnRcIikpO1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG1vZHVsZV9leHBvcnRzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShyb290W1wianF1ZXJ5XCJdLHJvb3RbXCJtb21lbnRcIl0pO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKGpxdWVyeSwgbW9tZW50KSB7XG5cbiAgICAvKipcbiAqIEBsaWNlbnNlIGFsbW9uZCAwLjMuMyBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycy5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLCBodHRwOi8vZ2l0aHViLmNvbS9yZXF1aXJlanMvYWxtb25kL0xJQ0VOU0VcbiAqL1xuLy9Hb2luZyBzbG9wcHkgdG8gYXZvaWQgJ3VzZSBzdHJpY3QnIHN0cmluZyBjb3N0LCBidXQgc3RyaWN0IHByYWN0aWNlcyBzaG91bGRcbi8vYmUgZm9sbG93ZWQuXG4vKmdsb2JhbCBzZXRUaW1lb3V0OiBmYWxzZSAqL1xuXG52YXIgcmVxdWlyZWpzLCByZXF1aXJlLCBkZWZpbmU7XG4oZnVuY3Rpb24gKHVuZGVmKSB7XG4gICAgdmFyIG1haW4sIHJlcSwgbWFrZU1hcCwgaGFuZGxlcnMsXG4gICAgICAgIGRlZmluZWQgPSB7fSxcbiAgICAgICAgd2FpdGluZyA9IHt9LFxuICAgICAgICBjb25maWcgPSB7fSxcbiAgICAgICAgZGVmaW5pbmcgPSB7fSxcbiAgICAgICAgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbiAgICAgICAgYXBzID0gW10uc2xpY2UsXG4gICAgICAgIGpzU3VmZml4UmVnRXhwID0gL1xcLmpzJC87XG5cbiAgICBmdW5jdGlvbiBoYXNQcm9wKG9iaiwgcHJvcCkge1xuICAgICAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBwcm9wKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHJlbGF0aXZlIG1vZHVsZSBuYW1lLCBsaWtlIC4vc29tZXRoaW5nLCBub3JtYWxpemUgaXQgdG9cbiAgICAgKiBhIHJlYWwgbmFtZSB0aGF0IGNhbiBiZSBtYXBwZWQgdG8gYSBwYXRoLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIHRoZSByZWxhdGl2ZSBuYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJhc2VOYW1lIGEgcmVhbCBuYW1lIHRoYXQgdGhlIG5hbWUgYXJnIGlzIHJlbGF0aXZlXG4gICAgICogdG8uXG4gICAgICogQHJldHVybnMge1N0cmluZ30gbm9ybWFsaXplZCBuYW1lXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKG5hbWUsIGJhc2VOYW1lKSB7XG4gICAgICAgIHZhciBuYW1lUGFydHMsIG5hbWVTZWdtZW50LCBtYXBWYWx1ZSwgZm91bmRNYXAsIGxhc3RJbmRleCxcbiAgICAgICAgICAgIGZvdW5kSSwgZm91bmRTdGFyTWFwLCBzdGFySSwgaSwgaiwgcGFydCwgbm9ybWFsaXplZEJhc2VQYXJ0cyxcbiAgICAgICAgICAgIGJhc2VQYXJ0cyA9IGJhc2VOYW1lICYmIGJhc2VOYW1lLnNwbGl0KFwiL1wiKSxcbiAgICAgICAgICAgIG1hcCA9IGNvbmZpZy5tYXAsXG4gICAgICAgICAgICBzdGFyTWFwID0gKG1hcCAmJiBtYXBbJyonXSkgfHwge307XG5cbiAgICAgICAgLy9BZGp1c3QgYW55IHJlbGF0aXZlIHBhdGhzLlxuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIGxhc3RJbmRleCA9IG5hbWUubGVuZ3RoIC0gMTtcblxuICAgICAgICAgICAgLy8gSWYgd2FudGluZyBub2RlIElEIGNvbXBhdGliaWxpdHksIHN0cmlwIC5qcyBmcm9tIGVuZFxuICAgICAgICAgICAgLy8gb2YgSURzLiBIYXZlIHRvIGRvIHRoaXMgaGVyZSwgYW5kIG5vdCBpbiBuYW1lVG9VcmxcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugbm9kZSBhbGxvd3MgZWl0aGVyIC5qcyBvciBub24gLmpzIHRvIG1hcFxuICAgICAgICAgICAgLy8gdG8gc2FtZSBmaWxlLlxuICAgICAgICAgICAgaWYgKGNvbmZpZy5ub2RlSWRDb21wYXQgJiYganNTdWZmaXhSZWdFeHAudGVzdChuYW1lW2xhc3RJbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgbmFtZVtsYXN0SW5kZXhdID0gbmFtZVtsYXN0SW5kZXhdLnJlcGxhY2UoanNTdWZmaXhSZWdFeHAsICcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RhcnRzIHdpdGggYSAnLicgc28gbmVlZCB0aGUgYmFzZU5hbWVcbiAgICAgICAgICAgIGlmIChuYW1lWzBdLmNoYXJBdCgwKSA9PT0gJy4nICYmIGJhc2VQYXJ0cykge1xuICAgICAgICAgICAgICAgIC8vQ29udmVydCBiYXNlTmFtZSB0byBhcnJheSwgYW5kIGxvcCBvZmYgdGhlIGxhc3QgcGFydCxcbiAgICAgICAgICAgICAgICAvL3NvIHRoYXQgLiBtYXRjaGVzIHRoYXQgJ2RpcmVjdG9yeScgYW5kIG5vdCBuYW1lIG9mIHRoZSBiYXNlTmFtZSdzXG4gICAgICAgICAgICAgICAgLy9tb2R1bGUuIEZvciBpbnN0YW5jZSwgYmFzZU5hbWUgb2YgJ29uZS90d28vdGhyZWUnLCBtYXBzIHRvXG4gICAgICAgICAgICAgICAgLy8nb25lL3R3by90aHJlZS5qcycsIGJ1dCB3ZSB3YW50IHRoZSBkaXJlY3RvcnksICdvbmUvdHdvJyBmb3JcbiAgICAgICAgICAgICAgICAvL3RoaXMgbm9ybWFsaXphdGlvbi5cbiAgICAgICAgICAgICAgICBub3JtYWxpemVkQmFzZVBhcnRzID0gYmFzZVBhcnRzLnNsaWNlKDAsIGJhc2VQYXJ0cy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICBuYW1lID0gbm9ybWFsaXplZEJhc2VQYXJ0cy5jb25jYXQobmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vc3RhcnQgdHJpbURvdHNcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IG5hbWVbaV07XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgICAgICAgICAgICAgICBuYW1lLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBhdCB0aGUgc3RhcnQsIG9yIHByZXZpb3VzIHZhbHVlIGlzIHN0aWxsIC4uLFxuICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIHRoZW0gc28gdGhhdCB3aGVuIGNvbnZlcnRlZCB0byBhIHBhdGggaXQgbWF5XG4gICAgICAgICAgICAgICAgICAgIC8vIHN0aWxsIHdvcmsgd2hlbiBjb252ZXJ0ZWQgdG8gYSBwYXRoLCBldmVuIHRob3VnaFxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBhbiBJRCBpdCBpcyBsZXNzIHRoYW4gaWRlYWwuIEluIGxhcmdlciBwb2ludFxuICAgICAgICAgICAgICAgICAgICAvLyByZWxlYXNlcywgbWF5IGJlIGJldHRlciB0byBqdXN0IGtpY2sgb3V0IGFuIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCB8fCAoaSA9PT0gMSAmJiBuYW1lWzJdID09PSAnLi4nKSB8fCBuYW1lW2kgLSAxXSA9PT0gJy4uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc3BsaWNlKGkgLSAxLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vZW5kIHRyaW1Eb3RzXG5cbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLmpvaW4oJy8nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQXBwbHkgbWFwIGNvbmZpZyBpZiBhdmFpbGFibGUuXG4gICAgICAgIGlmICgoYmFzZVBhcnRzIHx8IHN0YXJNYXApICYmIG1hcCkge1xuICAgICAgICAgICAgbmFtZVBhcnRzID0gbmFtZS5zcGxpdCgnLycpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSBuYW1lUGFydHMubGVuZ3RoOyBpID4gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgbmFtZVNlZ21lbnQgPSBuYW1lUGFydHMuc2xpY2UoMCwgaSkuam9pbihcIi9cIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoYmFzZVBhcnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vRmluZCB0aGUgbG9uZ2VzdCBiYXNlTmFtZSBzZWdtZW50IG1hdGNoIGluIHRoZSBjb25maWcuXG4gICAgICAgICAgICAgICAgICAgIC8vU28sIGRvIGpvaW5zIG9uIHRoZSBiaWdnZXN0IHRvIHNtYWxsZXN0IGxlbmd0aHMgb2YgYmFzZVBhcnRzLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSBiYXNlUGFydHMubGVuZ3RoOyBqID4gMDsgaiAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZSA9IG1hcFtiYXNlUGFydHMuc2xpY2UoMCwgaikuam9pbignLycpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iYXNlTmFtZSBzZWdtZW50IGhhcyAgY29uZmlnLCBmaW5kIGlmIGl0IGhhcyBvbmUgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgbmFtZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZhbHVlID0gbWFwVmFsdWVbbmFtZVNlZ21lbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL01hdGNoLCB1cGRhdGUgbmFtZSB0byB0aGUgbmV3IHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZE1hcCA9IG1hcFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEkgPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZm91bmRNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9DaGVjayBmb3IgYSBzdGFyIG1hcCBtYXRjaCwgYnV0IGp1c3QgaG9sZCBvbiB0byBpdCxcbiAgICAgICAgICAgICAgICAvL2lmIHRoZXJlIGlzIGEgc2hvcnRlciBzZWdtZW50IG1hdGNoIGxhdGVyIGluIGEgbWF0Y2hpbmdcbiAgICAgICAgICAgICAgICAvL2NvbmZpZywgdGhlbiBmYXZvciBvdmVyIHRoaXMgc3RhciBtYXAuXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZFN0YXJNYXAgJiYgc3Rhck1hcCAmJiBzdGFyTWFwW25hbWVTZWdtZW50XSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZFN0YXJNYXAgPSBzdGFyTWFwW25hbWVTZWdtZW50XTtcbiAgICAgICAgICAgICAgICAgICAgc3RhckkgPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFmb3VuZE1hcCAmJiBmb3VuZFN0YXJNYXApIHtcbiAgICAgICAgICAgICAgICBmb3VuZE1hcCA9IGZvdW5kU3Rhck1hcDtcbiAgICAgICAgICAgICAgICBmb3VuZEkgPSBzdGFySTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZvdW5kTWFwKSB7XG4gICAgICAgICAgICAgICAgbmFtZVBhcnRzLnNwbGljZSgwLCBmb3VuZEksIGZvdW5kTWFwKTtcbiAgICAgICAgICAgICAgICBuYW1lID0gbmFtZVBhcnRzLmpvaW4oJy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VSZXF1aXJlKHJlbE5hbWUsIGZvcmNlU3luYykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9BIHZlcnNpb24gb2YgYSByZXF1aXJlIGZ1bmN0aW9uIHRoYXQgcGFzc2VzIGEgbW9kdWxlTmFtZVxuICAgICAgICAgICAgLy92YWx1ZSBmb3IgaXRlbXMgdGhhdCBtYXkgbmVlZCB0b1xuICAgICAgICAgICAgLy9sb29rIHVwIHBhdGhzIHJlbGF0aXZlIHRvIHRoZSBtb2R1bGVOYW1lXG4gICAgICAgICAgICB2YXIgYXJncyA9IGFwcy5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgICAgIC8vSWYgZmlyc3QgYXJnIGlzIG5vdCByZXF1aXJlKCdzdHJpbmcnKSwgYW5kIHRoZXJlIGlzIG9ubHlcbiAgICAgICAgICAgIC8vb25lIGFyZywgaXQgaXMgdGhlIGFycmF5IGZvcm0gd2l0aG91dCBhIGNhbGxiYWNrLiBJbnNlcnRcbiAgICAgICAgICAgIC8vYSBudWxsIHNvIHRoYXQgdGhlIGZvbGxvd2luZyBjb25jYXQgaXMgY29ycmVjdC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSAhPT0gJ3N0cmluZycgJiYgYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVxLmFwcGx5KHVuZGVmLCBhcmdzLmNvbmNhdChbcmVsTmFtZSwgZm9yY2VTeW5jXSkpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VOb3JtYWxpemUocmVsTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUobmFtZSwgcmVsTmFtZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUxvYWQoZGVwTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBkZWZpbmVkW2RlcE5hbWVdID0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbERlcChuYW1lKSB7XG4gICAgICAgIGlmIChoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IHdhaXRpbmdbbmFtZV07XG4gICAgICAgICAgICBkZWxldGUgd2FpdGluZ1tuYW1lXTtcbiAgICAgICAgICAgIGRlZmluaW5nW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIG1haW4uYXBwbHkodW5kZWYsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKGRlZmluaW5nLCBuYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyAnICsgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmluZWRbbmFtZV07XG4gICAgfVxuXG4gICAgLy9UdXJucyBhIHBsdWdpbiFyZXNvdXJjZSB0byBbcGx1Z2luLCByZXNvdXJjZV1cbiAgICAvL3dpdGggdGhlIHBsdWdpbiBiZWluZyB1bmRlZmluZWQgaWYgdGhlIG5hbWVcbiAgICAvL2RpZCBub3QgaGF2ZSBhIHBsdWdpbiBwcmVmaXguXG4gICAgZnVuY3Rpb24gc3BsaXRQcmVmaXgobmFtZSkge1xuICAgICAgICB2YXIgcHJlZml4LFxuICAgICAgICAgICAgaW5kZXggPSBuYW1lID8gbmFtZS5pbmRleE9mKCchJykgOiAtMTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHByZWZpeCA9IG5hbWUuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZyhpbmRleCArIDEsIG5hbWUubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3ByZWZpeCwgbmFtZV07XG4gICAgfVxuXG4gICAgLy9DcmVhdGVzIGEgcGFydHMgYXJyYXkgZm9yIGEgcmVsTmFtZSB3aGVyZSBmaXJzdCBwYXJ0IGlzIHBsdWdpbiBJRCxcbiAgICAvL3NlY29uZCBwYXJ0IGlzIHJlc291cmNlIElELiBBc3N1bWVzIHJlbE5hbWUgaGFzIGFscmVhZHkgYmVlbiBub3JtYWxpemVkLlxuICAgIGZ1bmN0aW9uIG1ha2VSZWxQYXJ0cyhyZWxOYW1lKSB7XG4gICAgICAgIHJldHVybiByZWxOYW1lID8gc3BsaXRQcmVmaXgocmVsTmFtZSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIG5hbWUgbWFwLCBub3JtYWxpemluZyB0aGUgbmFtZSwgYW5kIHVzaW5nIGEgcGx1Z2luXG4gICAgICogZm9yIG5vcm1hbGl6YXRpb24gaWYgbmVjZXNzYXJ5LiBHcmFicyBhIHJlZiB0byBwbHVnaW5cbiAgICAgKiB0b28sIGFzIGFuIG9wdGltaXphdGlvbi5cbiAgICAgKi9cbiAgICBtYWtlTWFwID0gZnVuY3Rpb24gKG5hbWUsIHJlbFBhcnRzKSB7XG4gICAgICAgIHZhciBwbHVnaW4sXG4gICAgICAgICAgICBwYXJ0cyA9IHNwbGl0UHJlZml4KG5hbWUpLFxuICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF0sXG4gICAgICAgICAgICByZWxSZXNvdXJjZU5hbWUgPSByZWxQYXJ0c1sxXTtcblxuICAgICAgICBuYW1lID0gcGFydHNbMV07XG5cbiAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgICAgcHJlZml4ID0gbm9ybWFsaXplKHByZWZpeCwgcmVsUmVzb3VyY2VOYW1lKTtcbiAgICAgICAgICAgIHBsdWdpbiA9IGNhbGxEZXAocHJlZml4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vTm9ybWFsaXplIGFjY29yZGluZ1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICBpZiAocGx1Z2luICYmIHBsdWdpbi5ub3JtYWxpemUpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gcGx1Z2luLm5vcm1hbGl6ZShuYW1lLCBtYWtlTm9ybWFsaXplKHJlbFJlc291cmNlTmFtZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gbm9ybWFsaXplKG5hbWUsIHJlbFJlc291cmNlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuYW1lID0gbm9ybWFsaXplKG5hbWUsIHJlbFJlc291cmNlTmFtZSk7XG4gICAgICAgICAgICBwYXJ0cyA9IHNwbGl0UHJlZml4KG5hbWUpO1xuICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF07XG4gICAgICAgICAgICBuYW1lID0gcGFydHNbMV07XG4gICAgICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9Vc2luZyByaWRpY3Vsb3VzIHByb3BlcnR5IG5hbWVzIGZvciBzcGFjZSByZWFzb25zXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmOiBwcmVmaXggPyBwcmVmaXggKyAnIScgKyBuYW1lIDogbmFtZSwgLy9mdWxsTmFtZVxuICAgICAgICAgICAgbjogbmFtZSxcbiAgICAgICAgICAgIHByOiBwcmVmaXgsXG4gICAgICAgICAgICBwOiBwbHVnaW5cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWFrZUNvbmZpZyhuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKGNvbmZpZyAmJiBjb25maWcuY29uZmlnICYmIGNvbmZpZy5jb25maWdbbmFtZV0pIHx8IHt9O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGhhbmRsZXJzID0ge1xuICAgICAgICByZXF1aXJlOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VSZXF1aXJlKG5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBleHBvcnRzOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdmFyIGUgPSBkZWZpbmVkW25hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRlZmluZWRbbmFtZV0gPSB7fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vZHVsZTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IG5hbWUsXG4gICAgICAgICAgICAgICAgdXJpOiAnJyxcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBkZWZpbmVkW25hbWVdLFxuICAgICAgICAgICAgICAgIGNvbmZpZzogbWFrZUNvbmZpZyhuYW1lKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBtYWluID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKSB7XG4gICAgICAgIHZhciBjanNNb2R1bGUsIGRlcE5hbWUsIHJldCwgbWFwLCBpLCByZWxQYXJ0cyxcbiAgICAgICAgICAgIGFyZ3MgPSBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrVHlwZSA9IHR5cGVvZiBjYWxsYmFjayxcbiAgICAgICAgICAgIHVzaW5nRXhwb3J0cztcblxuICAgICAgICAvL1VzZSBuYW1lIGlmIG5vIHJlbE5hbWVcbiAgICAgICAgcmVsTmFtZSA9IHJlbE5hbWUgfHwgbmFtZTtcbiAgICAgICAgcmVsUGFydHMgPSBtYWtlUmVsUGFydHMocmVsTmFtZSk7XG5cbiAgICAgICAgLy9DYWxsIHRoZSBjYWxsYmFjayB0byBkZWZpbmUgdGhlIG1vZHVsZSwgaWYgbmVjZXNzYXJ5LlxuICAgICAgICBpZiAoY2FsbGJhY2tUeXBlID09PSAndW5kZWZpbmVkJyB8fCBjYWxsYmFja1R5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vUHVsbCBvdXQgdGhlIGRlZmluZWQgZGVwZW5kZW5jaWVzIGFuZCBwYXNzIHRoZSBvcmRlcmVkXG4gICAgICAgICAgICAvL3ZhbHVlcyB0byB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICAvL0RlZmF1bHQgdG8gW3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZV0gaWYgbm8gZGVwc1xuICAgICAgICAgICAgZGVwcyA9ICFkZXBzLmxlbmd0aCAmJiBjYWxsYmFjay5sZW5ndGggPyBbJ3JlcXVpcmUnLCAnZXhwb3J0cycsICdtb2R1bGUnXSA6IGRlcHM7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIG1hcCA9IG1ha2VNYXAoZGVwc1tpXSwgcmVsUGFydHMpO1xuICAgICAgICAgICAgICAgIGRlcE5hbWUgPSBtYXAuZjtcblxuICAgICAgICAgICAgICAgIC8vRmFzdCBwYXRoIENvbW1vbkpTIHN0YW5kYXJkIGRlcGVuZGVuY2llcy5cbiAgICAgICAgICAgICAgICBpZiAoZGVwTmFtZSA9PT0gXCJyZXF1aXJlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGhhbmRsZXJzLnJlcXVpcmUobmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXBOYW1lID09PSBcImV4cG9ydHNcIikge1xuICAgICAgICAgICAgICAgICAgICAvL0NvbW1vbkpTIG1vZHVsZSBzcGVjIDEuMVxuICAgICAgICAgICAgICAgICAgICBhcmdzW2ldID0gaGFuZGxlcnMuZXhwb3J0cyhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdXNpbmdFeHBvcnRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09IFwibW9kdWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9Db21tb25KUyBtb2R1bGUgc3BlYyAxLjFcbiAgICAgICAgICAgICAgICAgICAgY2pzTW9kdWxlID0gYXJnc1tpXSA9IGhhbmRsZXJzLm1vZHVsZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc1Byb3AoZGVmaW5lZCwgZGVwTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Byb3Aod2FpdGluZywgZGVwTmFtZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Byb3AoZGVmaW5pbmcsIGRlcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBjYWxsRGVwKGRlcE5hbWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwLnApIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwLnAubG9hZChtYXAubiwgbWFrZVJlcXVpcmUocmVsTmFtZSwgdHJ1ZSksIG1ha2VMb2FkKGRlcE5hbWUpLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBkZWZpbmVkW2RlcE5hbWVdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihuYW1lICsgJyBtaXNzaW5nICcgKyBkZXBOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldCA9IGNhbGxiYWNrID8gY2FsbGJhY2suYXBwbHkoZGVmaW5lZFtuYW1lXSwgYXJncykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgLy9JZiBzZXR0aW5nIGV4cG9ydHMgdmlhIFwibW9kdWxlXCIgaXMgaW4gcGxheSxcbiAgICAgICAgICAgICAgICAvL2Zhdm9yIHRoYXQgb3ZlciByZXR1cm4gdmFsdWUgYW5kIGV4cG9ydHMuIEFmdGVyIHRoYXQsXG4gICAgICAgICAgICAgICAgLy9mYXZvciBhIG5vbi11bmRlZmluZWQgcmV0dXJuIHZhbHVlIG92ZXIgZXhwb3J0cyB1c2UuXG4gICAgICAgICAgICAgICAgaWYgKGNqc01vZHVsZSAmJiBjanNNb2R1bGUuZXhwb3J0cyAhPT0gdW5kZWYgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZS5leHBvcnRzICE9PSBkZWZpbmVkW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSBjanNNb2R1bGUuZXhwb3J0cztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJldCAhPT0gdW5kZWYgfHwgIXVzaW5nRXhwb3J0cykge1xuICAgICAgICAgICAgICAgICAgICAvL1VzZSB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICAgICAgICBkZWZpbmVkW25hbWVdID0gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAvL01heSBqdXN0IGJlIGFuIG9iamVjdCBkZWZpbml0aW9uIGZvciB0aGUgbW9kdWxlLiBPbmx5XG4gICAgICAgICAgICAvL3dvcnJ5IGFib3V0IGRlZmluaW5nIGlmIGhhdmUgYSBtb2R1bGUgbmFtZS5cbiAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSBjYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXF1aXJlanMgPSByZXF1aXJlID0gcmVxID0gZnVuY3Rpb24gKGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lLCBmb3JjZVN5bmMsIGFsdCkge1xuICAgICAgICBpZiAodHlwZW9mIGRlcHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChoYW5kbGVyc1tkZXBzXSkge1xuICAgICAgICAgICAgICAgIC8vY2FsbGJhY2sgaW4gdGhpcyBjYXNlIGlzIHJlYWxseSByZWxOYW1lXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJzW2RlcHNdKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vSnVzdCByZXR1cm4gdGhlIG1vZHVsZSB3YW50ZWQuIEluIHRoaXMgc2NlbmFyaW8sIHRoZVxuICAgICAgICAgICAgLy9kZXBzIGFyZyBpcyB0aGUgbW9kdWxlIG5hbWUsIGFuZCBzZWNvbmQgYXJnIChpZiBwYXNzZWQpXG4gICAgICAgICAgICAvL2lzIGp1c3QgdGhlIHJlbE5hbWUuXG4gICAgICAgICAgICAvL05vcm1hbGl6ZSBtb2R1bGUgbmFtZSwgaWYgaXQgY29udGFpbnMgLiBvciAuLlxuICAgICAgICAgICAgcmV0dXJuIGNhbGxEZXAobWFrZU1hcChkZXBzLCBtYWtlUmVsUGFydHMoY2FsbGJhY2spKS5mKTtcbiAgICAgICAgfSBlbHNlIGlmICghZGVwcy5zcGxpY2UpIHtcbiAgICAgICAgICAgIC8vZGVwcyBpcyBhIGNvbmZpZyBvYmplY3QsIG5vdCBhbiBhcnJheS5cbiAgICAgICAgICAgIGNvbmZpZyA9IGRlcHM7XG4gICAgICAgICAgICBpZiAoY29uZmlnLmRlcHMpIHtcbiAgICAgICAgICAgICAgICByZXEoY29uZmlnLmRlcHMsIGNvbmZpZy5jYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2suc3BsaWNlKSB7XG4gICAgICAgICAgICAgICAgLy9jYWxsYmFjayBpcyBhbiBhcnJheSwgd2hpY2ggbWVhbnMgaXQgaXMgYSBkZXBlbmRlbmN5IGxpc3QuXG4gICAgICAgICAgICAgICAgLy9BZGp1c3QgYXJncyBpZiB0aGVyZSBhcmUgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICAgICAgZGVwcyA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gcmVsTmFtZTtcbiAgICAgICAgICAgICAgICByZWxOYW1lID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVwcyA9IHVuZGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9TdXBwb3J0IHJlcXVpcmUoWydhJ10pXG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAgICAgLy9JZiByZWxOYW1lIGlzIGEgZnVuY3Rpb24sIGl0IGlzIGFuIGVycmJhY2sgaGFuZGxlcixcbiAgICAgICAgLy9zbyByZW1vdmUgaXQuXG4gICAgICAgIGlmICh0eXBlb2YgcmVsTmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVsTmFtZSA9IGZvcmNlU3luYztcbiAgICAgICAgICAgIGZvcmNlU3luYyA9IGFsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vU2ltdWxhdGUgYXN5bmMgY2FsbGJhY2s7XG4gICAgICAgIGlmIChmb3JjZVN5bmMpIHtcbiAgICAgICAgICAgIG1haW4odW5kZWYsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vVXNpbmcgYSBub24temVybyB2YWx1ZSBiZWNhdXNlIG9mIGNvbmNlcm4gZm9yIHdoYXQgb2xkIGJyb3dzZXJzXG4gICAgICAgICAgICAvL2RvLCBhbmQgbGF0ZXN0IGJyb3dzZXJzIFwidXBncmFkZVwiIHRvIDQgaWYgbG93ZXIgdmFsdWUgaXMgdXNlZDpcbiAgICAgICAgICAgIC8vaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGltZXJzLmh0bWwjZG9tLXdpbmRvd3RpbWVycy1zZXR0aW1lb3V0OlxuICAgICAgICAgICAgLy9JZiB3YW50IGEgdmFsdWUgaW1tZWRpYXRlbHksIHVzZSByZXF1aXJlKCdpZCcpIGluc3RlYWQgLS0gc29tZXRoaW5nXG4gICAgICAgICAgICAvL3RoYXQgd29ya3MgaW4gYWxtb25kIG9uIHRoZSBnbG9iYWwgbGV2ZWwsIGJ1dCBub3QgZ3VhcmFudGVlZCBhbmRcbiAgICAgICAgICAgIC8vdW5saWtlbHkgdG8gd29yayBpbiBvdGhlciBBTUQgaW1wbGVtZW50YXRpb25zLlxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbWFpbih1bmRlZiwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpO1xuICAgICAgICAgICAgfSwgNCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVxO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBKdXN0IGRyb3BzIHRoZSBjb25maWcgb24gdGhlIGZsb29yLCBidXQgcmV0dXJucyByZXEgaW4gY2FzZVxuICAgICAqIHRoZSBjb25maWcgcmV0dXJuIHZhbHVlIGlzIHVzZWQuXG4gICAgICovXG4gICAgcmVxLmNvbmZpZyA9IGZ1bmN0aW9uIChjZmcpIHtcbiAgICAgICAgcmV0dXJuIHJlcShjZmcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFeHBvc2UgbW9kdWxlIHJlZ2lzdHJ5IGZvciBkZWJ1Z2dpbmcgYW5kIHRvb2xpbmdcbiAgICAgKi9cbiAgICByZXF1aXJlanMuX2RlZmluZWQgPSBkZWZpbmVkO1xuXG4gICAgZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2VlIGFsbW9uZCBSRUFETUU6IGluY29ycmVjdCBtb2R1bGUgYnVpbGQsIG5vIG1vZHVsZSBuYW1lJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL1RoaXMgbW9kdWxlIG1heSBub3QgaGF2ZSBkZXBlbmRlbmNpZXNcbiAgICAgICAgaWYgKCFkZXBzLnNwbGljZSkge1xuICAgICAgICAgICAgLy9kZXBzIGlzIG5vdCBhbiBhcnJheSwgc28gcHJvYmFibHkgbWVhbnNcbiAgICAgICAgICAgIC8vYW4gb2JqZWN0IGxpdGVyYWwgb3IgZmFjdG9yeSBmdW5jdGlvbiBmb3JcbiAgICAgICAgICAgIC8vdGhlIHZhbHVlLiBBZGp1c3QgYXJncy5cbiAgICAgICAgICAgIGNhbGxiYWNrID0gZGVwcztcbiAgICAgICAgICAgIGRlcHMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzUHJvcChkZWZpbmVkLCBuYW1lKSAmJiAhaGFzUHJvcCh3YWl0aW5nLCBuYW1lKSkge1xuICAgICAgICAgICAgd2FpdGluZ1tuYW1lXSA9IFtuYW1lLCBkZXBzLCBjYWxsYmFja107XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZGVmaW5lLmFtZCA9IHtcbiAgICAgICAgalF1ZXJ5OiB0cnVlXG4gICAgfTtcbn0oKSk7XG5cbmRlZmluZShcImFsbW9uZFwiLCBmdW5jdGlvbigpe30pO1xuXG5cblxuZGVmaW5lKCdjb21wb25lbnQvbW9kZWxzJyxbXSwgZnVuY3Rpb24gKCkge1xuICB2YXIgbW9kZWxzID0ge1xuICAgIG5hbWU6ICdwaWdub3NlQ2FsZW5kYXInLFxuICAgIHZlcnNpb246ICcxLjQuMzEnLFxuICAgIHByZWZlcmVuY2U6IHtcbiAgICAgIHN1cHBvcnRzOiB7XG4gICAgICAgIHRoZW1lczogWydsaWdodCcsICdkYXJrJywgJ2JsdWUnXVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG1vZGVscztcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZWxzLmpzLm1hcFxuO1xuXG5cbmRlZmluZSgnY29tcG9uZW50L2hlbHBlcicsWycuL21vZGVscyddLCBmdW5jdGlvbiAobW9kZWxzKSB7XG4gIHZhciBtX2Zvcm1hdENhY2hlID0ge307XG4gIHZhciBtX2NsYXNzQ2FjaGUgPSB7fTtcbiAgdmFyIG1fc3ViQ2xhc3NDYWNoZSA9IHt9O1xuICB2YXIgbV9yZWdleF91cHBlciA9IC9bQS1aXS87XG5cbiAgdmFyIGhlbHBlciA9IGZ1bmN0aW9uIENvbnN0cnVjdG9yKCkge307XG5cbiAgaGVscGVyLmZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIga2V5ID0gZm9ybWF0ICsgYXJncy5qb2luKCcuJyk7XG5cbiAgICAgIGlmIChtX2Zvcm1hdENhY2hlW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIG1fZm9ybWF0Q2FjaGVba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gYXJnc1tpZHhdO1xuICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKG5ldyBSZWdFeHAoJygoPyFcXFxcXFxcXCk/XFxcXHsnICsgaWR4ICsgJyg/IVxcXFxcXFxcKT9cXFxcfSknLCAnZycpLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcXFxcXHsoWzAtOV0rKVxcXFxcXFxcfScsICdnJyksICd7JDF9Jyk7XG4gICAgICB9XG5cbiAgICAgIG1fZm9ybWF0Q2FjaGVba2V5XSA9IGZvcm1hdDtcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuICB9O1xuXG4gIGhlbHBlci5nZXRDbGFzcyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGtleSA9IFttb2RlbHMubmFtZSwgbmFtZV0uam9pbignLicpO1xuXG4gICAgaWYgKG1fY2xhc3NDYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gbV9jbGFzc0NhY2hlW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGFycyA9IG5hbWUuc3BsaXQoJycpO1xuICAgICAgdmFyIGNsYXNzTmFtZXMgPSBbXTtcbiAgICAgIHZhciBsZW4gPSBjaGFycy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGlkeCA9IDAsIHBvcyA9IDA7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICAgICAgdmFyIF9jaGFyID0gY2hhcnNbaWR4XTtcblxuICAgICAgICBpZiAobV9yZWdleF91cHBlci50ZXN0KF9jaGFyKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNsYXNzTmFtZXNbcG9zKytdID0gJy0nO1xuICAgICAgICAgIF9jaGFyID0gX2NoYXIudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xhc3NOYW1lc1twb3MrK10gPSBfY2hhcjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXMuam9pbignJyk7XG4gICAgICBtX2NsYXNzQ2FjaGVba2V5XSA9IGNsYXNzTmFtZTtcbiAgICAgIHJldHVybiBjbGFzc05hbWU7XG4gICAgfVxuICB9O1xuXG4gIGhlbHBlci5nZXRTdWJDbGFzcyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgbmFtZS5sZW5ndGgpIHtcbiAgICAgIHZhciBuYW1lcyA9IG5hbWUuc3BsaXQoJycpO1xuICAgICAgbmFtZXNbMF0gPSBuYW1lc1swXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgbmFtZSA9IG5hbWVzLmpvaW4oJycpO1xuICAgIH1cblxuICAgIGlmICghbV9zdWJDbGFzc0NhY2hlW25hbWVdKSB7XG4gICAgICBtX3N1YkNsYXNzQ2FjaGVbbmFtZV0gPSBoZWxwZXIuZ2V0Q2xhc3MoaGVscGVyLmZvcm1hdCgnezB9ezF9JywgbW9kZWxzLm5hbWUsIG5hbWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbV9zdWJDbGFzc0NhY2hlW25hbWVdO1xuICB9O1xuXG4gIHJldHVybiBoZWxwZXI7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlci5qcy5tYXBcbjtcblxuXG5kZWZpbmUoJ3NoaW0vdXRpbHMnLFtdLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGluc3RhbGwsIGxpYikge1xuICAgICAgaWYgKCFsaWIpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBcIlBJR05PU0UgQ2FsZW5kYXIgbmVlZHMgXCIuY29uY2F0KG5hbWUsIFwiIGxpYnJhcnkuXFxuSWYgeW91IHdhbnQgdG8gdXNlIGJ1aWx0LWluIHBsdWdpbiwgSW1wb3J0IGRpc3QvcGlnbm9zZS5jYWxlbmRhci5mdWxsLmpzLlxcblR5cGUgYmVsb3cgY29kZSBpbiB5b3VyIGNvbW1hbmQgbGluZSB0byBpbnN0YWxsIHRoZSBsaWJyYXJ5LlwiKTtcblxuICAgICAgICBpZiAoY29uc29sZSAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCIkIFwiLmNvbmNhdChpbnN0YWxsKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpYjtcbiAgICB9XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuO1xuXG5cbmRlZmluZSgnbW9tZW50JyxbJy4vc2hpbS91dGlscyddLCBmdW5jdGlvbiAodXRpbHMpIHtcbiAgdmFyIGxpYjtcblxuICB0cnkge1xuICAgIGxpYiA9IG1vbWVudDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIDtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5yZWdpc3RlcignbW9tZW50JywgJ25wbSBpbnN0YWxsIG1vbWVudCAtLXNhdmUnLCBsaWIpO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb21lbnQuanMubWFwXG47XG5cblxuZGVmaW5lKCdtYW5hZ2VyL2luZGV4JyxbJy4uL2NvbXBvbmVudC9oZWxwZXInLCAnbW9tZW50J10sIGZ1bmN0aW9uIChoZWxwZXIsIG1vbWVudCkge1xuICB2YXIgbV9kYXRlQ2FjaGUgPSB7fTtcblxuICB2YXIgRGF0ZU1hbmFnZXIgPSBmdW5jdGlvbiBDb25zdHJ1Y3RvcihkYXRlKSB7XG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IHBhcmFtZXRlciBgZGF0ZWAgbXVzdCBiZSBnYXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBtb21lbnQgPT09IGZhbHNlKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBkYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBkYXRlID0gbW9tZW50KGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZGF0ZWAgb3B0aW9uIGlzIGludmFsaWQgdHlwZS4gKGRhdGU6ICcgKyBkYXRlICsgJykuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy55ZWFyID0gcGFyc2VJbnQoZGF0ZS5mb3JtYXQoJ1lZWVknKSwgMTApO1xuICAgIHRoaXMubW9udGggPSBwYXJzZUludChkYXRlLmZvcm1hdCgnTU0nKSwgMTApO1xuICAgIHRoaXMucHJldk1vbnRoID0gcGFyc2VJbnQoZGF0ZS5jbG9uZSgpLmFkZCgtMSwgJ21vbnRocycpLmZvcm1hdCgnTU0nKSwgMTApO1xuICAgIHRoaXMubmV4dE1vbnRoID0gcGFyc2VJbnQoZGF0ZS5jbG9uZSgpLmFkZCgxLCAnbW9udGhzJykuZm9ybWF0KCdNTScpLCAxMCk7XG4gICAgdGhpcy5kYXkgPSBwYXJzZUludChkYXRlLmZvcm1hdCgnREQnKSwgMTApO1xuICAgIHRoaXMuZmlyc3REYXkgPSAxO1xuICAgIHRoaXMubGFzdERheSA9IHBhcnNlSW50KGRhdGUuY2xvbmUoKS5lbmRPZignbW9udGgnKS5mb3JtYXQoJ0REJyksIDEwKTtcbiAgICB0aGlzLndlZWtEYXkgPSBkYXRlLndlZWtkYXkoKTtcbiAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICB9O1xuXG4gIERhdGVNYW5hZ2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRlLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICB9O1xuXG4gIERhdGVNYW5hZ2VyLkNvbnZlcnQgPSBmdW5jdGlvbiAoeWVhciwgbW9udGgsIGRheSkge1xuICAgIHZhciBkYXRlID0gaGVscGVyLmZvcm1hdCgnezB9LXsxfS17Mn0nLCB5ZWFyLCBtb250aCwgZGF5KTtcblxuICAgIGlmICghbV9kYXRlQ2FjaGVbZGF0ZV0pIHtcbiAgICAgIG1fZGF0ZUNhY2hlW2RhdGVdID0gbW9tZW50KGRhdGUsICdZWVlZLU1NLUREJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1fZGF0ZUNhY2hlW2RhdGVdO1xuICB9O1xuXG4gIHJldHVybiBEYXRlTWFuYWdlcjtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG47XG5cblxuZGVmaW5lKCdjb21wb25lbnQvY2xhc3NOYW1lcycsWycuLi9jb21wb25lbnQvaGVscGVyJ10sIGZ1bmN0aW9uIChoZWxwZXIpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IGhlbHBlci5nZXRTdWJDbGFzcygndG9wJyksXG4gICAgaGVhZGVyOiBoZWxwZXIuZ2V0U3ViQ2xhc3MoJ2hlYWRlcicpLFxuICAgIGJvZHk6IGhlbHBlci5nZXRTdWJDbGFzcygnYm9keScpLFxuICAgIGJ1dHRvbjogaGVscGVyLmdldFN1YkNsYXNzKCdidXR0b24nKVxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzc05hbWVzLmpzLm1hcFxuO1xuXG5cbmRlZmluZSgnY29uZmlndXJlcy9pMThuJyxbXSwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGRlZmF1bHRMYW5ndWFnZTogJ2VuJyxcbiAgICBzdXBwb3J0czogWydhcicsICdlbicsICdrbycsICdmcicsICdjaCcsICdkZScsICdubCcsICdqcCcsICdwdCcsICdkYScsICdwbCcsICdlcycsICdjcycsICd1aycsICdydScsICdrYScsICdjYSddLFxuICAgIHdlZWtzOiB7XG4gICAgICBhcjogWyfYo9it2K8nLCAn2KXYq9mG2YrZhicsICfYq9mE2KfYq9in2KEnLCAn2KPYsdio2LnYp9ihJywgJ9iu2YXZitizJywgJ9is2YXYudipJywgJ9iz2KjYqiddLFxuICAgICAgZW46IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gICAgICBrbzogWyfsnbwnLCAn7JuUJywgJ+2ZlCcsICfsiJgnLCAn66qpJywgJ+q4iCcsICfthqAnXSxcbiAgICAgIGZhOiBbJ9i02YbYqNmHJywgJ9ii2K/bjNmG2YcnLCAn2b7ZhtisJywgJ9qG2YfYp9ixJywgJ9iz2YcnLCAn2K/ZiCcsICfbjNqpJ10sXG4gICAgICBmcjogWydEaW0nLCAnTHVuJywgJ01hcicsICdNZXInLCAnSmV1JywgJ1ZlbicsICdTYW0nXSxcbiAgICAgIGNoOiBbJ+aXpScsICfkuIAnLCAn5LqMJywgJ+S4iScsICflm5snLCAn5LqUJywgJ+WFrSddLFxuICAgICAgZGU6IFsnU08nLCAnTU8nLCAnREknLCAnTUknLCAnRE8nLCAnRlInLCAnU0EnXSxcbiAgICAgIG5sOiBbJ1pvJywgJ01hJywgJ0RpJywgJ1dvJywgJ0RvJywgJ1ZyJywgJ1phJ10sXG4gICAgICBqcDogWyfml6UnLCAn5pyIJywgJ+eBqycsICfmsLQnLCAn5pyoJywgJ+mHkScsICflnJ8nXSxcbiAgICAgIHB0OiBbJ0RvbScsICdTZWcnLCAnVGVyJywgJ1F1YScsICdRdWknLCAnU2V4JywgJ1NhYiddLFxuICAgICAgZGE6IFsnU8O4bicsICdNYW4nLCAnVGlyJywgJ09ucycsICdUb3InLCAnRnJlJywgJ0zDuHInXSxcbiAgICAgIHBsOiBbJ05pZScsICdQb24nLCAnV3RvJywgJ8Wacm8nLCAnQ3p3JywgJ1BpxIUnLCAnU29iJ10sXG4gICAgICBlczogWydEb20nLCAnTHVuJywgJ01hcicsICdNacOpJywgJ0p1ZScsICdWaWUnLCAnU8OhYiddLFxuICAgICAgaXQ6IFsnRG9tJywgJ0x1bicsICdNYXInLCAnTWVyJywgJ0dpbycsICdWZW4nLCAnU2FiJ10sXG4gICAgICBjczogWydOZScsICdQbycsICfDmnQnLCAnU3QnLCAnxIx0JywgJ1DDoScsICdTbyddLFxuICAgICAgdWs6IFsn0J3QtCcsICfQn9C9JywgJ9CS0YInLCAn0KHRgCcsICfQp9GCJywgJ9Cf0YInLCAn0KHQsSddLFxuICAgICAgcnU6IFsn0JLRgScsICfQn9C9JywgJ9CS0YInLCAn0KHRgCcsICfQp9GCJywgJ9Cf0YInLCAn0KHQsSddLFxuICAgICAga2E6IFsn4YOZ4YOVJywgJ+GDneGDoCcsICfhg6Hhg5snLCAn4YOd4YOXJywgJ+GDruGDlycsICfhg57hg6AnLCAn4YOo4YORJ10sXG4gICAgICBjYTogWydEZycsICdEbCcsICdEbScsICdEYycsICdEaicsICdEdicsICdEcyddXG4gICAgfSxcbiAgICBtb250aHNMb25nOiB7XG4gICAgICBhcjogWyfZitmG2KfZitixJywgJ9mB2KjYsdin2YrYsScsICfZhdin2LHYsycsICfYpdio2LHZitmEJywgJ9mF2KfZitmIJywgJ9mK2YjZhtmK2YgnLCAn2YrZiNmE2YrZiCcsICfYo9i62LPYt9izJywgJ9iz2KjYqtmF2KjYsScsICfYo9mD2KrZiNio2LEnLCAn2YbZiNmB2YXYqNixJywgJ9iv2YrYs9mF2KjYsSddLFxuICAgICAgZW46IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10sXG4gICAgICBrbzogWycx7JuUJywgJzLsm5QnLCAnM+yblCcsICc07JuUJywgJzXsm5QnLCAnNuyblCcsICc37JuUJywgJzjsm5QnLCAnOeyblCcsICcxMOyblCcsICcxMeyblCcsICcxMuyblCddLFxuICAgICAgZmE6IFsn2KLYsNixJywgJ9ii2KjYp9mGJywgJ9mF2YfYsScsICfYtNmH2LHbjNmI2LEnLCAn2YXYsdiv2KfYrycsICfYqtuM2LEnLCAn2K7Ysdiv2KfYrycsICfYp9ix2K/bjNio2YfYtNiqJywgJ9mB2LHZiNix2K/bjNmGJywgJ9in2LPZgdmG2K8nLCAn2KjZh9mF2YYnLCAn2K/bjCddLFxuICAgICAgZnI6IFsnSmFudmllcicsICdGw6l2cmllcicsICdNYXJzJywgJ0F2cmlsJywgJ01haScsICdKdWluJywgJ0p1aWxsZXQnLCAnQW/Du3QnLCAnU2VwdGVtYnJlJywgJ09jdG9icmUnLCAnTm92ZW1icmUnLCAnRMOpY2VtYnJlJ10sXG4gICAgICBjaDogWyfkuIDmnIgnLCAn5LqM5pyIJywgJ+S4ieaciCcsICflm5vmnIgnLCAn5LqU5pyIJywgJ+WFreaciCcsICfkuIPmnIgnLCAn5YWr5pyIJywgJ+S5neaciCcsICfljYHmnIgnLCAn5Y2B5LiA5pyIJywgJ+WNgeS6jOaciCddLFxuICAgICAgZGU6IFsnSmFudWFyJywgJ0ZlYnJ1YXInLCAnTcOkcnonLCAnQXByaWwnLCAnTWFpJywgJ0p1bmknLCAnSnVsaScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGV6ZW1iZXInXSxcbiAgICAgIG5sOiBbJ0phbnVhcmknLCAnRmVicnVhcmknLCAnTWFhcnQnLCAnQXByaWwnLCAnTWVpJywgJ0p1bmknLCAnSnVsaScsICdBdWd1c3R1cycsICdTZXB0ZW1iZXInLCAnT2t0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxuICAgICAganA6IFsn5LiA5pyIJywgJ+S6jOaciCcsICfkuInmnIgnLCAn5Zub5pyIJywgJ+S6lOaciCcsICflha3mnIgnLCAn5LiD5pyIJywgJ+WFq+aciCcsICfkuZ3mnIgnLCAn5Y2B5pyIJywgJ+WNgeS4gOaciCcsICfljYHkuozmnIgnXSxcbiAgICAgIHB0OiBbJ0phbmVpcm8nLCAnRmV2ZXJlaXJvJywgJ01hcsOnbycsICdBYnJpbCcsICdNYWlvJywgJ0p1bmhvJywgJ0p1bGhvJywgJ0Fnb3N0bycsICdTZXRlbWJybycsICdPdXR1YnJvJywgJ05vdmVtYnJvJywgJ0RlemVtYnJvJ10sXG4gICAgICBkYTogWydKYW51YXInLCAnRmVicnVhcicsICdNYXJ0cycsICdBcHJpbCcsICdNYWonLCAnSnVuaScsICdKdWxpJywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2t0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxuICAgICAgcGw6IFsnU3R5Y3plxYQnLCAnTHV0eScsICdNYXJ6ZWMnLCAnS3dpZWNpZcWEJywgJ01haicsICdDemVyd2llYycsICdMaXBpZWMnLCAnU2llcnBpZcWEJywgJ1dyemVzaWXFhCcsICdQYcW6ZHppZXJuaWsnLCAnTGlzdG9wYWQnLCAnR3J1ZHppZcWEJ10sXG4gICAgICBlczogWydFbmVybycsICdGZWJyZXJvJywgJ01hcnpvJywgJ0FicmlsJywgJ01heW8nLCAnSnVuaW8nLCAnSnVsaW8nLCAnQWdvc3RvJywgJ1NlcHRpZW1icmUnLCAnT2N0dWJyZScsICdOb3ZpZW1icmUnLCAnRGljaWVtYnJlJ10sXG4gICAgICBpdDogWydHZW5uYWlvJywgJ0ZlYmJyYWlvJywgJ01hcnpvJywgJ0FwcmlsZScsICdNYWdnaW8nLCAnR2l1Z25vJywgJ0x1Z2xpbycsICdBZ29zdG8nLCAnU2V0dGVtYnJlJywgJ090dG9icmUnLCAnTm92ZW1icmUnLCAnRGljZW1icmUnXSxcbiAgICAgIGNzOiBbJ0xlZGVuJywgJ8Oabm9yJywgJ0LFmWV6ZW4nLCAnRHViZW4nLCAnS3bEm3RlbicsICfEjGVydmVuJywgJ0NlcnZlbmVjJywgJ1NycGVuJywgJ1rDocWZw60nLCAnxZjDrWplbicsICdMaXN0b3BhZCcsICdQcm9zaW5lYyddLFxuICAgICAgdWs6IFsn0KHRltGH0LXQvdGMJywgJ9Cb0Y7RgtC40LknLCAn0JHQtdGA0LXQt9C10L3RjCcsICfQmtCy0ZbRgtC10L3RjCcsICfQotGA0LDQstC10L3RjCcsICfQp9C10YDQstC10L3RjCcsICfQm9C40L/QtdC90YwnLCAn0KHQtdGA0L/QtdC90YwnLCAn0JLQtdGA0LXRgdC10L3RjCcsICfQltC+0LLRgtC10L3RjCcsICfQm9C40YHRgtC+0L/QsNC0JywgJ9CT0YDRg9C00LXQvdGMJ10sXG4gICAgICBydTogWyfQr9C90LLQsNGA0YwnLCAn0KTQtdCy0YDQsNC70YwnLCAn0JzQsNGA0YInLCAn0JDQv9GA0LXQu9GMJywgJ9Cc0LDQuScsICfQmNGO0L3RjCcsICfQmNGO0LvRjCcsICfQkNCy0LPRg9GB0YInLCAn0KHQtdC90YLRj9Cx0YDRjCcsICfQntC60YLRj9Cx0YDRjCcsICfQndC+0Y/QsdGA0YwnLCAn0JTQtdC60LDQsdGA0YwnXSxcbiAgICAgIGthOiBbJ+GDmOGDkOGDnOGDleGDkOGDoOGDmCcsICfhg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg5gnLCAn4YOb4YOQ4YOg4YOi4YOYJywgJ+GDkOGDnuGDoOGDmOGDmuGDmCcsICfhg5vhg5Dhg5jhg6Hhg5gnLCAn4YOY4YOV4YOc4YOY4YOh4YOYJywgJ+GDmOGDleGDmuGDmOGDoeGDmCcsICfhg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg50nLCAn4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOYJywgJ+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDmCcsICfhg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg5gnLCAn4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOYJ10sXG4gICAgICBjYTogWydHZW5lcicsICdGZWJyZXInLCAnTWFyw6cnLCAnQWJyaWwnLCAnTWFpZycsICdKdW55JywgJ0p1bGlvbCcsICdBZ29zdCcsICdTZXRlbWJyZScsICdPY3R1YnJlJywgJ05vdmVtYnJlJywgJ0Rlc2VtYnJlJ11cbiAgICB9LFxuICAgIG1vbnRoczoge1xuICAgICAgYXI6IFsn2YrZhtin2YrYsScsICfZgdio2LHYp9mK2LEnLCAn2YXYp9ix2LMnLCAn2KXYqNix2YrZhCcsICfZhdin2YrZiCcsICfZitmI2YbZitmIJywgJ9mK2YjZhNmK2YgnLCAn2KPYutiz2LfYsycsICfYs9io2KrZhdio2LEnLCAn2KPZg9iq2YjYqNixJywgJ9mG2YjZgdmF2KjYsScsICfYr9mK2LPZhdio2LEnXSxcbiAgICAgIGVuOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gICAgICBrbzogWycx7JuUJywgJzLsm5QnLCAnM+yblCcsICc07JuUJywgJzXsm5QnLCAnNuyblCcsICc37JuUJywgJzjsm5QnLCAnOeyblCcsICcxMOyblCcsICcxMeyblCcsICcxMuyblCddLFxuICAgICAgZmE6IFsn2KLYsNixJywgJ9ii2KjYp9mGJywgJ9mF2YfYsScsICfYtNmH2LHbjNmI2LEnLCAn2YXYsdiv2KfYrycsICfYqtuM2LEnLCAn2K7Ysdiv2KfYrycsICfYp9ix2K/bjNio2YfYtNiqJywgJ9mB2LHZiNix2K/bjNmGJywgJ9in2LPZgdmG2K8nLCAn2KjZh9mF2YYnLCAn2K/bjCddLFxuICAgICAgZnI6IFsnSmFuJywgJ0bDqXYnLCAnTWFyJywgJ0F2cicsICdNYWknLCAnSnVpbicsICdKdWlsJywgJ0Fvw7snLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRMOpYyddLFxuICAgICAgY2g6IFsn5LiA5pyIJywgJ+S6jOaciCcsICfkuInmnIgnLCAn5Zub5pyIJywgJ+S6lOaciCcsICflha3mnIgnLCAn5LiD5pyIJywgJ+WFq+aciCcsICfkuZ3mnIgnLCAn5Y2B5pyIJywgJ+WNgeS4gOaciCcsICfljYHkuozmnIgnXSxcbiAgICAgIGRlOiBbJ0phbicsICdGZWInLCAnTcOkcicsICdBcHInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPa3QnLCAnTm92JywgJ0RleiddLFxuICAgICAgbmw6IFsnSmFuJywgJ0ZlYicsICdNcnQnLCAnQXByJywgJ01laScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2t0JywgJ05vdicsICdEZWMnXSxcbiAgICAgIGpwOiBbJ+S4gOaciCcsICfkuozmnIgnLCAn5LiJ5pyIJywgJ+Wbm+aciCcsICfkupTmnIgnLCAn5YWt5pyIJywgJ+S4g+aciCcsICflhavmnIgnLCAn5Lmd5pyIJywgJ+WNgeaciCcsICfljYHkuIDmnIgnLCAn5Y2B5LqM5pyIJ10sXG4gICAgICBwdDogWydKYW4nLCAnRmV2JywgJ01hcicsICdBYnInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQWdvJywgJ1NldCcsICdPdXQnLCAnTm92JywgJ0RleiddLFxuICAgICAgZGE6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01haicsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2t0JywgJ05vdicsICdEZWMnXSxcbiAgICAgIHBsOiBbJ1N0eScsICdMdXQnLCAnTWFyJywgJ0t3aScsICdNYWonLCAnQ3plJywgJ0xpcCcsICdTaWUnLCAnV3J6JywgJ1BhxbonLCAnTGlzJywgJ0dydSddLFxuICAgICAgZXM6IFsnRW5lJywgJ0ZlYicsICdNYXInLCAnQWJyJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0FnbycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgICAgIGl0OiBbJ0dlbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYWcnLCAnR2l1JywgJ0x1ZycsICdBZ28nLCAnU2V0JywgJ090dCcsICdOb3YnLCAnRGljJ10sXG4gICAgICBjczogWydMZWQnLCAnw5pubycsICdCxZllJywgJ0R1YicsICdLdsSbJywgJ8SMdm4nLCAnxIx2YycsICdTcnAnLCAnWsOhxZknLCAnxZjDrWonLCAnTGlzJywgJ1BybyddLFxuICAgICAgdWs6IFsn0KHRltGHJywgJ9Cb0Y7RgicsICfQkdC10YAnLCAn0JrQstGW0YInLCAn0KLRgNCw0LInLCAn0KfQtdGA0LInLCAn0JvQuNC/JywgJ9Ch0LXRgNC/JywgJ9CS0LXRgCcsICfQltC+0LLRgicsICfQm9C40YHRgicsICfQk9GA0YPQtCddLFxuICAgICAgcnU6IFsn0K/QvdCyJywgJ9Ck0LXQstGAJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCzJywgJ9Ch0LXQvdGCJywgJ9Ce0LrRgicsICfQndC+0Y/QsScsICfQlNC10LonXSxcbiAgICAgIGthOiBbJ+GDmOGDkOGDnCcsICfhg5fhg5Thg5EnLCAn4YOb4YOQ4YOgJywgJ+GDkOGDnuGDoCcsICfhg5vhg5Dhg5gnLCAn4YOY4YOV4YOcJywgJ+GDmOGDleGDmicsICfhg5Dhg5Lhg5UnLCAn4YOh4YOU4YOlJywgJ+GDneGDpeGDoicsICfhg5zhg53hg5QnLCAn4YOT4YOU4YOZJ10sXG4gICAgICBjYTogWydHZW4nLCAnRmViJywgJ01hcicsICdBYnInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQWdvJywgJ1NldCcsICdPY3QnLCAnTm92JywgJ0RlcyddXG4gICAgfSxcbiAgICBjb250cm9sczoge1xuICAgICAgYXI6IHtcbiAgICAgICAgb2s6ICfYrdiz2YbYp9mLJyxcbiAgICAgICAgY2FuY2VsOiAn2KXZhNi62KfYoSdcbiAgICAgIH0sXG4gICAgICBlbjoge1xuICAgICAgICBvazogJ09LJyxcbiAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJ1xuICAgICAgfSxcbiAgICAgIGtvOiB7XG4gICAgICAgIG9rOiAn7ZmV7J24JyxcbiAgICAgICAgY2FuY2VsOiAn7Leo7IaMJ1xuICAgICAgfSxcbiAgICAgIGZhOiB7XG4gICAgICAgIG9rOiAn2obaqSDaqdmG24zYrycsXG4gICAgICAgIGNhbmNlbDogJ9mE2LrZiCdcbiAgICAgIH0sXG4gICAgICBmcjoge1xuICAgICAgICBvazogJ1bDqXJpZmllcicsXG4gICAgICAgIGNhbmNlbDogJ0FubnVsZXInXG4gICAgICB9LFxuICAgICAgY2g6IHtcbiAgICAgICAgb2s6ICfnoa7orqQnLFxuICAgICAgICBjYW5jZWw6ICflj5bmtognXG4gICAgICB9LFxuICAgICAgZGU6IHtcbiAgICAgICAgb2s6ICdPa2F5JyxcbiAgICAgICAgY2FuY2VsOiAnQWJicmVjaGVuJ1xuICAgICAgfSxcbiAgICAgIG5sOiB7XG4gICAgICAgIG9rOiAnT2vDqScsXG4gICAgICAgIGNhbmNlbDogJ0FubnVsZXJlbidcbiAgICAgIH0sXG4gICAgICBqcDoge1xuICAgICAgICBvazogJ+eiuuiqjScsXG4gICAgICAgIGNhbmNlbDogJ+OCreODo+ODs+OCu+ODqydcbiAgICAgIH0sXG4gICAgICBwdDoge1xuICAgICAgICBvazogJ1ZlcmlmaXF1ZScsXG4gICAgICAgIGNhbmNlbDogJ0NhbmNlbGFyJ1xuICAgICAgfSxcbiAgICAgIGRhOiB7XG4gICAgICAgIG9rOiAnQmVrcsOmZnRlbHNlJyxcbiAgICAgICAgY2FuY2VsOiAnYWZseXN0J1xuICAgICAgfSxcbiAgICAgIHBsOiB7XG4gICAgICAgIG9rOiAnU3ByYXdkxbonLFxuICAgICAgICBjYW5jZWw6ICdBbnVsdWonXG4gICAgICB9LFxuICAgICAgZXM6IHtcbiAgICAgICAgb2s6ICdDaGVxdWUnLFxuICAgICAgICBjYW5jZWw6ICdDYW5jZWxhcidcbiAgICAgIH0sXG4gICAgICBpdDoge1xuICAgICAgICBvazogJ2NvbmZlcm1hJyxcbiAgICAgICAgY2FuY2VsOiAnYW5udWxsYXRvJ1xuICAgICAgfSxcbiAgICAgIGNzOiB7XG4gICAgICAgIG9rOiAnWmtvbnRyb2x1anRlJyxcbiAgICAgICAgY2FuY2VsOiAnWnJ1xaFpdCdcbiAgICAgIH0sXG4gICAgICB1azoge1xuICAgICAgICBvazogJ9CS0LjQsdGA0LDRgtC4JyxcbiAgICAgICAgY2FuY2VsOiAn0KHQutCw0YHRg9Cy0LDRgtC4J1xuICAgICAgfSxcbiAgICAgIHJ1OiB7XG4gICAgICAgIG9rOiAn0JLRi9Cx0YDQsNGC0YwnLFxuICAgICAgICBjYW5jZWw6ICfQntGC0LzQtdC90LAnXG4gICAgICB9LFxuICAgICAga2E6IHtcbiAgICAgICAgb2s6ICfhg5Dhg6Dhg6nhg5Thg5Xhg5AnLFxuICAgICAgICBjYW5jZWw6ICfhg5Lhg5Dhg6Phg6Xhg5vhg5Thg5Hhg5AnXG4gICAgICB9LFxuICAgICAgY2E6IHtcbiAgICAgICAgb2s6ICdDb25maXJtYXInLFxuICAgICAgICBjYW5jZWw6ICdDYW5jZWzCt2xhcidcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWkxOG4uanMubWFwXG47XG5cblxuZGVmaW5lKCdjb21wb25lbnQvZ2xvYmFsJyxbJy4uL2NvbmZpZ3VyZXMvaTE4biddLCBmdW5jdGlvbiAobGFuZ3VhZ2VzKSB7XG4gIHJldHVybiB7XG4gICAgbGFuZ3VhZ2U6IGxhbmd1YWdlcy5kZWZhdWx0TGFuZ3VhZ2UsXG4gICAgbGFuZ3VhZ2VzOiBsYW5ndWFnZXMsXG4gICAgd2VlazogMCxcbiAgICBmb3JtYXQ6ICdZWVlZLU1NLUREJ1xuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWwuanMubWFwXG47XG5cblxuZGVmaW5lKCdjb21wb25lbnQvb3B0aW9ucycsWydtb21lbnQnLCAnLi9nbG9iYWwnXSwgZnVuY3Rpb24gKG1vbWVudCwgZ2xvYmFsKSB7XG4gIHJldHVybiB7XG4gICAgbGFuZzogbnVsbCxcbiAgICBsYW5ndWFnZXM6IGdsb2JhbC5sYW5ndWFnZXMsXG4gICAgdGhlbWU6ICdsaWdodCcsXG4gICAgZGF0ZTogbW9tZW50KCksXG4gICAgZm9ybWF0OiBnbG9iYWwuZm9ybWF0LFxuICAgIGVuYWJsZWREYXRlczogW10sXG4gICAgZGlzYWJsZWREYXRlczogW10sXG4gICAgZGlzYWJsZWRXZWVrZGF5czogW10sXG4gICAgZGlzYWJsZWRSYW5nZXM6IFtdLFxuICAgIHNjaGVkdWxlczogW10sXG4gICAgc2NoZWR1bGVPcHRpb25zOiB7XG4gICAgICBjb2xvcnM6IHt9XG4gICAgfSxcbiAgICB3ZWVrOiBnbG9iYWwud2VlayxcbiAgICB3ZWVrczogZ2xvYmFsLmxhbmd1YWdlcy53ZWVrcy5lbixcbiAgICBtb250aHNMb25nOiBnbG9iYWwubGFuZ3VhZ2VzLm1vbnRoc0xvbmcuZW4sXG4gICAgbW9udGhzOiBnbG9iYWwubGFuZ3VhZ2VzLm1vbnRocy5lbixcbiAgICBjb250cm9sczogZ2xvYmFsLmxhbmd1YWdlcy5jb250cm9scy5lbixcbiAgICBwaWNrV2Vla3M6IGZhbHNlLFxuICAgIGluaXRpYWxpemU6IHRydWUsXG4gICAgbXVsdGlwbGU6IGZhbHNlLFxuICAgIHRvZ2dsZTogZmFsc2UsXG4gICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgYnV0dG9uczogZmFsc2UsXG4gICAgbW9kYWw6IGZhbHNlLFxuICAgIHNlbGVjdE92ZXI6IGZhbHNlLFxuICAgIG1pbkRhdGU6IG51bGwsXG4gICAgbWF4RGF0ZTogbnVsbCxcblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqIEVWRU5UU1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIGluaXQ6IG51bGwsXG4gICAgc2VsZWN0OiBudWxsLFxuICAgIGFwcGx5OiBudWxsLFxuICAgIGNsaWNrOiBudWxsLFxuICAgIHBhZ2U6IG51bGwsXG4gICAgcHJldjogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbnMuanMubWFwXG47XG5cblxuZGVmaW5lKCdqcXVlcnknLFsnLi9zaGltL3V0aWxzJ10sIGZ1bmN0aW9uICh1dGlscykge1xuICB2YXIgbGliO1xuXG4gIHRyeSB7XG4gICAgbGliID0galF1ZXJ5IHx8ICQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICA7XG4gIH1cblxuICByZXR1cm4gdXRpbHMucmVnaXN0ZXIoJ2pxdWVyeScsICducG0gaW5zdGFsbCBqcXVlcnkgLS1zYXZlJywgbGliKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9anF1ZXJ5LmpzLm1hcFxuO1xuXG5cbmRlZmluZSgnbWV0aG9kcy9jb25maWd1cmUnLFsnLi4vY29tcG9uZW50L2dsb2JhbCcsICcuLi9jb21wb25lbnQvbW9kZWxzJywgJy4uL2NvbXBvbmVudC9vcHRpb25zJywgJy4uL2NvbmZpZ3VyZXMvaTE4bicsICdqcXVlcnknXSwgZnVuY3Rpb24gKGdsb2JhbCwgbW9kZWxzLCBvcHRpb25zLCBsYW5ndWFnZSwgJCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgIHNldHRpbmdzO1xuICAgIGNvbnRleHQuc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucywgc2V0dGluZ3MpO1xuXG4gICAgaWYgKCFjb250ZXh0LnNldHRpbmdzLmxhbmcpIHtcbiAgICAgIGNvbnRleHQuc2V0dGluZ3MubGFuZyA9IGdsb2JhbC5sYW5ndWFnZTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5sYW5nICE9PSBsYW5ndWFnZS5kZWZhdWx0TGFuZ3VhZ2UgJiYgJC5pbkFycmF5KGNvbnRleHQuc2V0dGluZ3MubGFuZywgZ2xvYmFsLmxhbmd1YWdlcy5zdXBwb3J0cykgIT09IC0xKSB7XG4gICAgICAvLyB3ZWVrc1xuICAgICAgY29udGV4dC5zZXR0aW5ncy53ZWVrcyA9IGdsb2JhbC5sYW5ndWFnZXMud2Vla3NbY29udGV4dC5zZXR0aW5ncy5sYW5nXSB8fCBnbG9iYWwubGFuZ3VhZ2VzLndlZWtzW2xhbmd1YWdlLmRlZmF1bHRMYW5ndWFnZV07IC8vIG1vbnRoc0xvbmdcblxuICAgICAgY29udGV4dC5zZXR0aW5ncy5tb250aHNMb25nID0gZ2xvYmFsLmxhbmd1YWdlcy5tb250aHNMb25nW2NvbnRleHQuc2V0dGluZ3MubGFuZ10gfHwgZ2xvYmFsLmxhbmd1YWdlcy5tb250aHNMb25nW2xhbmd1YWdlLmRlZmF1bHRMYW5ndWFnZV07IC8vIG1vbnRoc1xuXG4gICAgICBjb250ZXh0LnNldHRpbmdzLm1vbnRocyA9IGdsb2JhbC5sYW5ndWFnZXMubW9udGhzW2NvbnRleHQuc2V0dGluZ3MubGFuZ10gfHwgZ2xvYmFsLmxhbmd1YWdlcy5tb250aHNbbGFuZ3VhZ2UuZGVmYXVsdExhbmd1YWdlXTsgLy8gY29udHJvbHNcblxuICAgICAgY29udGV4dC5zZXR0aW5ncy5jb250cm9scyA9IGdsb2JhbC5sYW5ndWFnZXMuY29udHJvbHNbY29udGV4dC5zZXR0aW5ncy5sYW5nXSB8fCBnbG9iYWwubGFuZ3VhZ2VzLmNvbnRyb2xzW2xhbmd1YWdlLmRlZmF1bHRMYW5ndWFnZV07XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuc2V0dGluZ3MudGhlbWUgIT09ICdsaWdodCcgJiYgJC5pbkFycmF5KGNvbnRleHQuc2V0dGluZ3MudGhlbWUsIG1vZGVscy5wcmVmZXJlbmNlLnN1cHBvcnRzLnRoZW1lcykgPT09IC0xKSB7XG4gICAgICBjb250ZXh0LnNldHRpbmdzLnRoZW1lID0gJ2xpZ2h0JztcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5waWNrV2Vla3MgPT09IHRydWUpIHtcbiAgICAgIGlmIChjb250ZXh0LnNldHRpbmdzLm11bHRpcGxlID09PSBmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgbXVzdCBnaXZlIHRydWUgYXQgc2V0dGluZ3MubXVsdGlwbGUgb3B0aW9ucyBvbiBQSUdOT1NFLUNhbGVuZGFyIGZvciB1c2luZyBpbiBwaWNrV2Vla3Mgb3B0aW9uLicpO1xuICAgICAgfSBlbHNlIGlmIChjb250ZXh0LnNldHRpbmdzLnRvZ2dsZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgbXVzdCBnaXZlIGZhbHNlIGF0IHNldHRpbmdzLnRvZ2dsZSBvcHRpb25zIG9uIFBJR05PU0UtQ2FsZW5kYXIgZm9yIHVzaW5nIGluIHBpY2tXZWVrcyBvcHRpb24uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29udGV4dC5zZXR0aW5ncy53ZWVrICU9IGNvbnRleHQuc2V0dGluZ3Mud2Vla3MubGVuZ3RoO1xuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWd1cmUuanMubWFwXG47XG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZGVmaW5lKCdtZXRob2RzL2luaXQnLFsnLi4vbWFuYWdlci9pbmRleCcsICcuLi9jb21wb25lbnQvY2xhc3NOYW1lcycsICcuLi9jb21wb25lbnQvaGVscGVyJywgJy4uL2NvbXBvbmVudC9tb2RlbHMnLCAnLi4vY29tcG9uZW50L2dsb2JhbCcsICcuL2NvbmZpZ3VyZScsICdqcXVlcnknLCAnbW9tZW50J10sIGZ1bmN0aW9uIChEYXRlTWFuYWdlciwgY2xhc3NOYW1lcywgaGVscGVyLCBtb2RlbHMsIGdsb2JhbCwgbWV0aG9kQ29uZmlndXJlLCAkLCBtb21lbnQpIHtcbiAgdmFyICR3aW5kb3cgPSAkKHdpbmRvdyk7XG4gIHZhciAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgIGNvbnRleHQuc2V0dGluZ3MgPSB7fTtcbiAgICBtZXRob2RDb25maWd1cmUuY2FsbChjb250ZXh0LCBvcHRpb25zKTtcbiAgICBjb250ZXh0Lmdsb2JhbCA9IHtcbiAgICAgIGNhbGVuZGFySHRtbDogaGVscGVyLmZvcm1hdCgnPGRpdiBjbGFzcz1cInswfSB7MH0tezR9XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ7MX1cIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiezF9LW5hdiB7MX0tcHJldlwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24tYXJyb3ctbGVmdCB7MX0taWNvblwiPjwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInsxfS1kYXRlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiezF9LW1vbnRoXCI+PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInsxfS15ZWFyXCI+PC9zcGFuPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJ7MX0tbmF2IHsxfS1uZXh0XCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi1hcnJvdy1yaWdodCB7MX0taWNvblwiPjwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiezJ9XCI+PC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ7M31cIj48L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSksIGNsYXNzTmFtZXMudG9wLCBjbGFzc05hbWVzLmhlYWRlciwgY2xhc3NOYW1lcy5ib2R5LCBjb250ZXh0LnNldHRpbmdzLnRoZW1lKSxcbiAgICAgIGNhbGVuZGFyQnV0dG9uc0h0bWw6IGhlbHBlci5mb3JtYXQoJzxkaXYgY2xhc3M9XCJ7MH0tZ3JvdXBcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiezB9IHswfS1jYW5jZWxcIj57MX08L2E+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzcz1cInswfSB7MH0tYXBwbHlcIj57Mn08L2E+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicsIGNsYXNzTmFtZXMuYnV0dG9uLCBjb250ZXh0LnNldHRpbmdzLmNvbnRyb2xzLmNhbmNlbCwgY29udGV4dC5zZXR0aW5ncy5jb250cm9scy5vayksXG4gICAgICBjYWxlbmRhclNjaGVkdWxlQ29udGFpbmVySHRtbDogaGVscGVyLmZvcm1hdCgnPGRpdiBjbGFzcz1cInswfS1zY2hlZHVsZS1jb250YWluZXJcIj48L2Rpdj4nLCBjbGFzc05hbWVzLmJ1dHRvbiksXG4gICAgICBjYWxlbmRhclNjaGVkdWxlUGluSHRtbDogaGVscGVyLmZvcm1hdCgnPHNwYW4gY2xhc3M9XCJ7MH0tc2NoZWR1bGUtcGluIHswfS1zY2hlZHVsZS1waW4tXFxcXHswXFxcXH1cIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IFxcXFx7MVxcXFx9O1wiPjwvc3Bhbj4nLCBjbGFzc05hbWVzLmJ1dHRvbilcbiAgICB9O1xuICAgIHZhciByYW5nZUNsYXNzID0gaGVscGVyLmdldFN1YkNsYXNzKCd1bml0UmFuZ2UnKTtcbiAgICB2YXIgcmFuZ2VGaXJzdENsYXNzID0gaGVscGVyLmdldFN1YkNsYXNzKCd1bml0UmFuZ2VGaXJzdCcpO1xuICAgIHZhciByYW5nZUxhc3RDbGFzcyA9IGhlbHBlci5nZXRTdWJDbGFzcygndW5pdFJhbmdlTGFzdCcpO1xuICAgIHZhciBhY3RpdmVDbGFzcyA9IGhlbHBlci5nZXRTdWJDbGFzcygndW5pdEFjdGl2ZScpO1xuICAgIHZhciBhY3RpdmVQb3NpdGlvbkNsYXNzZXMgPSBbaGVscGVyLmdldFN1YkNsYXNzKCd1bml0Rmlyc3RBY3RpdmUnKSwgaGVscGVyLmdldFN1YkNsYXNzKCd1bml0U2Vjb25kQWN0aXZlJyldO1xuICAgIHZhciB0b2dnbGVBY3RpdmVDbGFzcyA9IGhlbHBlci5nZXRTdWJDbGFzcygndW5pdFRvZ2dsZUFjdGl2ZScpO1xuICAgIHZhciB0b2dnbGVJbmFjdGl2ZUNsYXNzID0gaGVscGVyLmdldFN1YkNsYXNzKCd1bml0VG9nZ2xlSW5hY3RpdmUnKTtcbiAgICB2YXIgJGNhbGVuZGFyQnV0dG9uID0gbnVsbDtcbiAgICByZXR1cm4gY29udGV4dC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgbG9jYWwgPSB7XG4gICAgICAgIGluaXRpYWxpemU6IG51bGwsXG4gICAgICAgIGVsZW1lbnQ6ICR0aGlzLFxuICAgICAgICBjYWxlbmRhcjogJChjb250ZXh0Lmdsb2JhbC5jYWxlbmRhckh0bWwpLFxuICAgICAgICBpbnB1dDogJHRoaXMuaXMoJ2lucHV0JyksXG4gICAgICAgIHJlbmRlcmVyOiBudWxsLFxuICAgICAgICBjdXJyZW50OiBbbnVsbCwgbnVsbF0sXG4gICAgICAgIGRhdGU6IHtcbiAgICAgICAgICBhbGw6IFtdLFxuICAgICAgICAgIGVuYWJsZWQ6IFtdLFxuICAgICAgICAgIGRpc2FibGVkOiBbXVxuICAgICAgICB9LFxuICAgICAgICBzdG9yYWdlOiB7XG4gICAgICAgICAgYWN0aXZlRGF0ZXM6IFtdLFxuICAgICAgICAgIHNjaGVkdWxlczogW11cbiAgICAgICAgfSxcbiAgICAgICAgZGF0ZU1hbmFnZXI6IG5ldyBEYXRlTWFuYWdlcihjb250ZXh0LnNldHRpbmdzLmRhdGUpLFxuICAgICAgICBjYWxlbmRhcldyYXBwZXJIdG1sOiBoZWxwZXIuZm9ybWF0KCc8ZGl2IGNsYXNzPVwiezB9XCI+PC9kaXY+JywgaGVscGVyLmdldFN1YkNsYXNzKCd3cmFwcGVyJykpLFxuICAgICAgICBjYWxlbmRhcldyYXBwZXJPdmVybGF5SHRtbDogaGVscGVyLmZvcm1hdCgnPGRpdiBjbGFzcz1cInswfVwiPjwvZGl2PicsIGhlbHBlci5nZXRTdWJDbGFzcygnd3JhcHBlck92ZXJsYXknKSksXG4gICAgICAgIGNvbnRleHQ6IGNvbnRleHRcbiAgICAgIH07XG4gICAgICB2YXIgJHBhcmVudCA9ICR0aGlzO1xuXG4gICAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5pbml0aWFsaXplID09PSB0cnVlKSB7XG4gICAgICAgIGxvY2FsLmluaXRpYWxpemUgPSBsb2NhbC5jdXJyZW50WzBdID0gbG9jYWwuZGF0ZU1hbmFnZXIuZGF0ZS5jbG9uZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvY2FsID0gbG9jYWw7XG5cbiAgICAgIGlmIChjb250ZXh0LnNldHRpbmdzLnJldmVyc2UgPT09IHRydWUpIHtcbiAgICAgICAgbG9jYWwuY2FsZW5kYXIuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCdyZXZlcnNlJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9jYWwuY2FsZW5kYXIuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCdkZWZhdWx0JykpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gY29udGV4dC5zZXR0aW5ncy53ZWVrOyBpIDwgY29udGV4dC5zZXR0aW5ncy53ZWVrcy5sZW5ndGggKyBjb250ZXh0LnNldHRpbmdzLndlZWs7IGkrKykge1xuICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICBpID0gZ2xvYmFsLmxhbmd1YWdlcy53ZWVrcy5lbi5sZW5ndGggLSBpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdlZWsgPSBjb250ZXh0LnNldHRpbmdzLndlZWtzW2kgJSBjb250ZXh0LnNldHRpbmdzLndlZWtzLmxlbmd0aF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiB3ZWVrICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgd2VlayA9IHdlZWsudG9VcHBlckNhc2UoKTtcbiAgICAgICAgdmFyICR1bml0ID0gJChoZWxwZXIuZm9ybWF0KCc8ZGl2IGNsYXNzPVwiezB9IHswfS17Mn1cIj57MX08L2Rpdj4nLCBoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3dlZWsnKSwgd2VlaywgZ2xvYmFsLmxhbmd1YWdlcy53ZWVrcy5lbltpICUgZ2xvYmFsLmxhbmd1YWdlcy53ZWVrcy5lbi5sZW5ndGhdLnRvTG93ZXJDYXNlKCkpKTtcbiAgICAgICAgJHVuaXQuYXBwZW5kVG8obG9jYWwuY2FsZW5kYXIuZmluZCgnLicgKyBjbGFzc05hbWVzLmhlYWRlcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5idXR0b25zID09PSB0cnVlKSB7XG4gICAgICAgICRjYWxlbmRhckJ1dHRvbiA9ICQoY29udGV4dC5nbG9iYWwuY2FsZW5kYXJCdXR0b25zSHRtbCk7XG4gICAgICAgICRjYWxlbmRhckJ1dHRvbi5hcHBlbmRUbyhsb2NhbC5jYWxlbmRhcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2NhbC5pbnB1dCA9PT0gdHJ1ZSB8fCBjb250ZXh0LnNldHRpbmdzLm1vZGFsID09PSB0cnVlKSB7XG4gICAgICAgIHZhciB3cmFwcGVyQWN0aXZlQ2xhc3MgPSBoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3dyYXBwZXJBY3RpdmUnKTtcbiAgICAgICAgdmFyIG92ZXJsYXlBY3RpdmVDbGFzcyA9IGhlbHBlci5nZXRTdWJDbGFzcygnd3JhcHBlck92ZXJsYXlBY3RpdmUnKTtcbiAgICAgICAgdmFyICRvdmVybGF5O1xuICAgICAgICAkcGFyZW50ID0gJChsb2NhbC5jYWxlbmRhcldyYXBwZXJIdG1sKTtcbiAgICAgICAgJHBhcmVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgJHRoaXMuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICRvdmVybGF5ID0gJCgnLicgKyBoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3dyYXBwZXJPdmVybGF5JykpO1xuXG4gICAgICAgICAgaWYgKCRvdmVybGF5Lmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICRvdmVybGF5ID0gJChsb2NhbC5jYWxlbmRhcldyYXBwZXJPdmVybGF5SHRtbCk7XG4gICAgICAgICAgICAkb3ZlcmxheS5hcHBlbmRUbygnYm9keScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRvdmVybGF5LnVuYmluZCgnY2xpY2suJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSkpLmJpbmQoJ2NsaWNrLicgKyBoZWxwZXIuZ2V0Q2xhc3MobW9kZWxzLm5hbWUpLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgJHBhcmVudC50cmlnZ2VyKCdjYW5jZWwuJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCRwYXJlbnQucGFyZW50KCkuaXMoJ2JvZHknKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICRwYXJlbnQuYXBwZW5kVG8oJ2JvZHknKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkcGFyZW50LnNob3coKTtcbiAgICAgICAgICAkb3ZlcmxheS5zaG93KCk7XG4gICAgICAgICAgJHdpbmRvdy51bmJpbmQoJ3Jlc2l6ZS4nICsgaGVscGVyLmdldENsYXNzKG1vZGVscy5uYW1lKSkuYmluZCgncmVzaXplLicgKyBoZWxwZXIuZ2V0Q2xhc3MobW9kZWxzLm5hbWUpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkcGFyZW50LmNzcyh7XG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IC0kcGFyZW50Lm91dGVyV2lkdGgoKSAvIDIsXG4gICAgICAgICAgICAgIG1hcmdpblRvcDogLSRwYXJlbnQub3V0ZXJIZWlnaHQoKSAvIDJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLnRyaWdnZXJIYW5kbGVyKCdyZXNpemUuJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSkpO1xuICAgICAgICAgICR0aGlzW21vZGVscy5uYW1lXSgnc2V0JywgJHRoaXMudmFsKCkpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJG92ZXJsYXkuYWRkQ2xhc3Mob3ZlcmxheUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgICRwYXJlbnQuYWRkQ2xhc3Mod3JhcHBlckFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9LCAyNSk7XG4gICAgICAgIH0pLmJpbmQoJ2ZvY3VzJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgICAkdGhpcy5ibHVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkcGFyZW50LnVuYmluZCgnY2FuY2VsLicgKyBoZWxwZXIuZ2V0Q2xhc3MobW9kZWxzLm5hbWUpICsgJyAnICsgJ2FwcGx5LicgKyBoZWxwZXIuZ2V0Q2xhc3MobW9kZWxzLm5hbWUpKS5iaW5kKCdjYW5jZWwuJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSkgKyAnICcgKyAnYXBwbHkuJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkb3ZlcmxheS5yZW1vdmVDbGFzcyhvdmVybGF5QWN0aXZlQ2xhc3MpLmhpZGUoKTtcbiAgICAgICAgICAkcGFyZW50LnJlbW92ZUNsYXNzKHdyYXBwZXJBY3RpdmVDbGFzcykuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdlbmVyYXRlRGF0ZVJhbmdlID0gZnVuY3Rpb24gZ2VuZXJhdGVEYXRlUmFuZ2UoKSB7XG4gICAgICAgIGlmICghbG9jYWwuY3VycmVudFswXSB8fCAhbG9jYWwuY3VycmVudFsxXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaXJzdFNlbGVjdERhdGUgPSBsb2NhbC5jdXJyZW50WzBdLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICB2YXIgbGFzdFNlbGVjdERhdGUgPSBsb2NhbC5jdXJyZW50WzFdLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICB2YXIgZmlyc3REYXRlID0gbW9tZW50KE1hdGgubWF4KGxvY2FsLmN1cnJlbnRbMF0udmFsdWVPZigpLCBsb2NhbC5kYXRlTWFuYWdlci5kYXRlLmNsb25lKCkuc3RhcnRPZignbW9udGgnKS52YWx1ZU9mKCkpKTtcbiAgICAgICAgdmFyIGxhc3REYXRlID0gbW9tZW50KE1hdGgubWluKGxvY2FsLmN1cnJlbnRbMV0udmFsdWVPZigpLCBsb2NhbC5kYXRlTWFuYWdlci5kYXRlLmNsb25lKCkuZW5kT2YoJ21vbnRoJykudmFsdWVPZigpKSk7XG4gICAgICAgIHZhciBmaXJzdERhdGVJc1VuZGVyZWQgPSBmaXJzdERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJykgIT09IGZpcnN0U2VsZWN0RGF0ZTtcbiAgICAgICAgdmFyIGxhc3REYXRlSXNPdmVyZWQgPSBsYXN0RGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKSAhPT0gbGFzdFNlbGVjdERhdGU7XG5cbiAgICAgICAgaWYgKGZpcnN0RGF0ZUlzVW5kZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBmaXJzdERhdGUuYWRkKDEsICdkYXlzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdERhdGVJc092ZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBsYXN0RGF0ZS5hZGQoLTEsICdkYXlzJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3REYXRlRml4ZWQgPSBmaXJzdERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgIHZhciBsYXN0RGF0ZUZpeGVkID0gbGFzdERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG5cbiAgICAgICAgZm9yICg7IGZpcnN0RGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKSA8PSBsYXN0RGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKTsgZmlyc3REYXRlLmFkZCgxLCAnZGF5cycpKSB7XG4gICAgICAgICAgdmFyIGRhdGUgPSBmaXJzdERhdGUuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgdmFyIGlzUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgIHZhciAkdGFyZ2V0ID0gbG9jYWwuY2FsZW5kYXIuZmluZChoZWxwZXIuZm9ybWF0KCcuezB9W2RhdGEtZGF0ZT1cInsxfVwiXScsIGhlbHBlci5nZXRTdWJDbGFzcygndW5pdCcpLCBkYXRlKSkuYWRkQ2xhc3MocmFuZ2VDbGFzcyk7XG5cbiAgICAgICAgICBpZiAoZGF0ZSA9PT0gZmlyc3REYXRlRml4ZWQpIHtcbiAgICAgICAgICAgICR0YXJnZXQuYWRkQ2xhc3MocmFuZ2VGaXJzdENsYXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGF0ZSA9PT0gbGFzdERhdGVGaXhlZCkge1xuICAgICAgICAgICAgJHRhcmdldC5hZGRDbGFzcyhyYW5nZUxhc3RDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgZXhpc3RzQmV0d2VlblJhbmdlID0gZnVuY3Rpb24gZXhpc3RzQmV0d2VlblJhbmdlKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgdGFyZ2V0RGF0ZSkge1xuICAgICAgICBpZiAodGFyZ2V0RGF0ZSkge1xuICAgICAgICAgIGlmIChzdGFydERhdGUuZGlmZih0YXJnZXREYXRlKSA8IDAgJiYgZW5kRGF0ZS5kaWZmKHRhcmdldERhdGUpID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgdmFsaWREYXRlID0gZnVuY3Rpb24gdmFsaWREYXRlKGRhdGUpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MuZGlzYWJsZWREYXRlcy5pbmRleE9mKGRhdGUpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRlLmRpZmYoY29udGV4dC5zZXR0aW5ncy5tYXhEYXRlKSA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGUuZGlmZihjb250ZXh0LnNldHRpbmdzLm1pbkRhdGUpIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpZHggaW4gY29udGV4dC5zZXR0aW5ncy5kaXNhYmxlZFJhbmdlcykge1xuICAgICAgICAgIHZhciByYW5nZURhdGUgPSBjb250ZXh0LnNldHRpbmdzLmRpc2FibGVkUmFuZ2VzW2lkeF07XG4gICAgICAgICAgdmFyIHN0YXJ0UmFuZ2VEYXRlID0gbW9tZW50KHJhbmdlRGF0ZVswXSk7XG4gICAgICAgICAgdmFyIGVuZFJhbmdlRGF0ZSA9IG1vbWVudChyYW5nZURhdGVbMV0pO1xuXG4gICAgICAgICAgaWYgKGV4aXN0c0JldHdlZW5SYW5nZShzdGFydFJhbmdlRGF0ZSwgZW5kUmFuZ2VEYXRlLCBkYXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3ZWVrZGF5ID0gZGF0ZS53ZWVrZGF5KCk7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MuZGlzYWJsZWRXZWVrZGF5cy5pbmRleE9mKHdlZWtkYXkpICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcblxuICAgICAgdmFyIHZhbGlkRGF0ZUFyZWEgPSBmdW5jdGlvbiB2YWxpZERhdGVBcmVhKHN0YXJ0RGF0ZSwgZW5kRGF0ZSkge1xuICAgICAgICB2YXIgZGF0ZTtcblxuICAgICAgICBmb3IgKHZhciBpZHggaW4gY29udGV4dC5zZXR0aW5ncy5kaXNhYmxlZERhdGVzKSB7XG4gICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZXh0LnNldHRpbmdzLmRpc2FibGVkRGF0ZXNbaWR4XSk7XG5cbiAgICAgICAgICBpZiAoZXhpc3RzQmV0d2VlblJhbmdlKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgZGF0ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXhpc3RzQmV0d2VlblJhbmdlKHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgY29udGV4dC5zZXR0aW5ncy5tYXhEYXRlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleGlzdHNCZXR3ZWVuUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlLCBjb250ZXh0LnNldHRpbmdzLm1pbkRhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2lkeCBpbiBjb250ZXh0LnNldHRpbmdzLmRpc2FibGVkUmFuZ2VzKSB7XG4gICAgICAgICAgdmFyIHJhbmdlRGF0ZSA9IGNvbnRleHQuc2V0dGluZ3MuZGlzYWJsZWRSYW5nZXNbX2lkeF07XG4gICAgICAgICAgdmFyIHN0YXJ0UmFuZ2VEYXRlID0gbW9tZW50KHJhbmdlRGF0ZVswXSk7XG4gICAgICAgICAgdmFyIGVuZFJhbmdlRGF0ZSA9IG1vbWVudChyYW5nZURhdGVbMV0pO1xuXG4gICAgICAgICAgaWYgKGV4aXN0c0JldHdlZW5SYW5nZShzdGFydERhdGUsIGVuZERhdGUsIHN0YXJ0UmFuZ2VEYXRlKSB8fCBleGlzdHNCZXR3ZWVuUmFuZ2Uoc3RhcnREYXRlLCBlbmREYXRlLCBlbmRSYW5nZURhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0V2Vla2RheSA9IHN0YXJ0RGF0ZS53ZWVrZGF5KCk7XG4gICAgICAgIHZhciBlbmRXZWVrZGF5ID0gZW5kRGF0ZS53ZWVrZGF5KCk7XG4gICAgICAgIHZhciB0bXA7XG5cbiAgICAgICAgaWYgKHN0YXJ0V2Vla2RheSA+IGVuZFdlZWtkYXkpIHtcbiAgICAgICAgICB0bXAgPSBzdGFydFdlZWtkYXk7XG4gICAgICAgICAgc3RhcnRXZWVrZGF5ID0gZW5kV2Vla2RheTtcbiAgICAgICAgICBlbmRXZWVrZGF5ID0gdG1wO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2lkeDIgPSAwLCBpbmRleCA9IDA7IF9pZHgyIDwgY29udGV4dC5zZXR0aW5ncy5kaXNhYmxlZFdlZWtkYXlzLmxlbmd0aCAmJiBpbmRleCA8IDc7IF9pZHgyKyspIHtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIHZhciBfd2VlayA9IGNvbnRleHQuc2V0dGluZ3MuZGlzYWJsZWRXZWVrZGF5c1tfaWR4Ml07XG5cbiAgICAgICAgICBpZiAoX3dlZWsgPj0gc3RhcnRXZWVrZGF5ICYmIF93ZWVrIDw9IGVuZFdlZWtkYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIGxvY2FsLnJlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2NhbC5jYWxlbmRhci5hcHBlbmRUbygkcGFyZW50LmVtcHR5KCkpO1xuICAgICAgICBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIGNsYXNzTmFtZXMudG9wICsgJy15ZWFyJykudGV4dChsb2NhbC5kYXRlTWFuYWdlci55ZWFyKTtcbiAgICAgICAgbG9jYWwuY2FsZW5kYXIuZmluZCgnLicgKyBjbGFzc05hbWVzLnRvcCArICctbW9udGgnKS50ZXh0KGNvbnRleHQuc2V0dGluZ3MubW9udGhzTG9uZ1tsb2NhbC5kYXRlTWFuYWdlci5tb250aCAtIDFdKTtcbiAgICAgICAgbG9jYWwuY2FsZW5kYXIuZmluZChoZWxwZXIuZm9ybWF0KCcuezB9LXByZXYgLnswfS12YWx1ZScsIGNsYXNzTmFtZXMudG9wKSkudGV4dChjb250ZXh0LnNldHRpbmdzLm1vbnRoc1tsb2NhbC5kYXRlTWFuYWdlci5wcmV2TW9udGggLSAxXS50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgbG9jYWwuY2FsZW5kYXIuZmluZChoZWxwZXIuZm9ybWF0KCcuezB9LW5leHQgLnswfS12YWx1ZScsIGNsYXNzTmFtZXMudG9wKSkudGV4dChjb250ZXh0LnNldHRpbmdzLm1vbnRoc1tsb2NhbC5kYXRlTWFuYWdlci5uZXh0TW9udGggLSAxXS50b1VwcGVyQ2FzZSgpKTtcblxuICAgICAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5idXR0b25zID09PSB0cnVlICYmICRjYWxlbmRhckJ1dHRvbikge1xuICAgICAgICAgIHZhciAkc3VwZXIgPSAkdGhpcztcbiAgICAgICAgICAkY2FsZW5kYXJCdXR0b24uZmluZCgnLicgKyBjbGFzc05hbWVzLmJ1dHRvbikuYmluZCgnY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcyhjbGFzc05hbWVzLmJ1dHRvbiArICctYXBwbHknKSkge1xuICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKCdhcHBseS4nICsgbW9kZWxzLm5hbWUsIGxvY2FsKTtcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gJyc7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MudG9nZ2xlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBsb2NhbC5zdG9yYWdlLmFjdGl2ZURhdGVzLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5zZXR0aW5ncy5tdWx0aXBsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRlVmFsdWVzID0gW107XG5cbiAgICAgICAgICAgICAgICBpZiAobG9jYWwuY3VycmVudFswXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgZGF0ZVZhbHVlcy5wdXNoKGxvY2FsLmN1cnJlbnRbMF0uZm9ybWF0KGNvbnRleHQuc2V0dGluZ3MuZm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsLmN1cnJlbnRbMV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGVWYWx1ZXMucHVzaChsb2NhbC5jdXJyZW50WzFdLmZvcm1hdChjb250ZXh0LnNldHRpbmdzLmZvcm1hdCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGF0ZVZhbHVlcy5qb2luKCcgfiAnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxvY2FsLmN1cnJlbnRbMF0gPT09IG51bGwgPyAnJyA6IG1vbWVudChsb2NhbC5jdXJyZW50WzBdKS5mb3JtYXQoY29udGV4dC5zZXR0aW5ncy5mb3JtYXQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGxvY2FsLmlucHV0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJHN1cGVyLnZhbCh2YWx1ZSkudHJpZ2dlckhhbmRsZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnNldHRpbmdzLmFwcGx5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5zZXR0aW5ncy5hcHBseS5jYWxsKGxvY2FsLmNhbGVuZGFyLCBsb2NhbC5jdXJyZW50LCBsb2NhbCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAkcGFyZW50LnRyaWdnZXJIYW5kbGVyKCdhcHBseS4nICsgaGVscGVyLmdldENsYXNzKG1vZGVscy5uYW1lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkcGFyZW50LnRyaWdnZXJIYW5kbGVyKCdjYW5jZWwuJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyICRjYWxlbmRhckJvZHkgPSBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIGNsYXNzTmFtZXMuYm9keSkuZW1wdHkoKTtcbiAgICAgICAgdmFyIGZpcnN0RGF0ZSA9IERhdGVNYW5hZ2VyLkNvbnZlcnQobG9jYWwuZGF0ZU1hbmFnZXIueWVhciwgbG9jYWwuZGF0ZU1hbmFnZXIubW9udGgsIGxvY2FsLmRhdGVNYW5hZ2VyLmZpcnN0RGF5KTtcbiAgICAgICAgdmFyIGxhc3REYXRlID0gRGF0ZU1hbmFnZXIuQ29udmVydChsb2NhbC5kYXRlTWFuYWdlci55ZWFyLCBsb2NhbC5kYXRlTWFuYWdlci5tb250aCwgbG9jYWwuZGF0ZU1hbmFnZXIubGFzdERheSk7XG4gICAgICAgIHZhciBmaXJzdFdlZWtkYXkgPSBmaXJzdERhdGUud2Vla2RheSgpIC0gY29udGV4dC5zZXR0aW5ncy53ZWVrO1xuICAgICAgICB2YXIgbGFzdFdlZWtkYXkgPSBsYXN0RGF0ZS53ZWVrZGF5KCkgLSBjb250ZXh0LnNldHRpbmdzLndlZWs7XG5cbiAgICAgICAgaWYgKGZpcnN0V2Vla2RheSA8IDApIHtcbiAgICAgICAgICBmaXJzdFdlZWtkYXkgKz0gY29udGV4dC5zZXR0aW5ncy53ZWVrcy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJHVuaXRMaXN0ID0gW10sXG4gICAgICAgICAgICBjdXJyZW50Rm9ybWF0ID0gW2xvY2FsLmN1cnJlbnRbMF0gPT09IG51bGwgPyBudWxsIDogbG9jYWwuY3VycmVudFswXS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgbG9jYWwuY3VycmVudFsxXSA9PT0gbnVsbCA/IG51bGwgOiBsb2NhbC5jdXJyZW50WzFdLmZvcm1hdCgnWVlZWS1NTS1ERCcpXSxcbiAgICAgICAgICAgIG1pbkRhdGUgPSBjb250ZXh0LnNldHRpbmdzLm1pbkRhdGUgPT09IG51bGwgPyBudWxsIDogbW9tZW50KGNvbnRleHQuc2V0dGluZ3MubWluRGF0ZSksXG4gICAgICAgICAgICBtYXhEYXRlID0gY29udGV4dC5zZXR0aW5ncy5tYXhEYXRlID09PSBudWxsID8gbnVsbCA6IG1vbWVudChjb250ZXh0LnNldHRpbmdzLm1heERhdGUpO1xuXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaXJzdFdlZWtkYXk7IF9pKyspIHtcbiAgICAgICAgICB2YXIgJHVuaXQgPSAkKGhlbHBlci5mb3JtYXQoJzxkaXYgY2xhc3M9XCJ7MH0gezB9LXsxfVwiPjwvZGl2PicsIGhlbHBlci5nZXRTdWJDbGFzcygndW5pdCcpLCBnbG9iYWwubGFuZ3VhZ2VzLndlZWtzLmVuW19pXS50b0xvd2VyQ2FzZSgpKSk7XG4gICAgICAgICAgJHVuaXRMaXN0LnB1c2goJHVuaXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kyKSB7XG4gICAgICAgICAgdmFyIGlEYXRlID0gRGF0ZU1hbmFnZXIuQ29udmVydChsb2NhbC5kYXRlTWFuYWdlci55ZWFyLCBsb2NhbC5kYXRlTWFuYWdlci5tb250aCwgX2kyKTtcbiAgICAgICAgICB2YXIgaURhdGVGb3JtYXQgPSBpRGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgICB2YXIgJHVuaXQgPSAkKGhlbHBlci5mb3JtYXQoJzxkaXYgY2xhc3M9XCJ7MH0gezB9LWRhdGUgezB9LXszfVwiIGRhdGEtZGF0ZT1cInsxfVwiPjxhIGhyZWY9XCIjXCI+ezJ9PC9hPjwvZGl2PicsIGhlbHBlci5nZXRTdWJDbGFzcygndW5pdCcpLCBpRGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKSwgX2kyLCBnbG9iYWwubGFuZ3VhZ2VzLndlZWtzLmVuW2lEYXRlLndlZWtkYXkoKV0udG9Mb3dlckNhc2UoKSkpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MuZW5hYmxlZERhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICgkLmluQXJyYXkoaURhdGVGb3JtYXQsIGNvbnRleHQuc2V0dGluZ3MuZW5hYmxlZERhdGVzKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgJHVuaXQuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCd1bml0RGlzYWJsZWQnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0LnNldHRpbmdzLmRpc2FibGVkV2Vla2RheXMubGVuZ3RoID4gMCAmJiAkLmluQXJyYXkoaURhdGUud2Vla2RheSgpLCBjb250ZXh0LnNldHRpbmdzLmRpc2FibGVkV2Vla2RheXMpICE9PSAtMSkge1xuICAgICAgICAgICAgJHVuaXQuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCd1bml0RGlzYWJsZWQnKSkuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCd1bml0RGlzYWJsZWRXZWVrZGF5cycpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1pbkRhdGUgIT09IG51bGwgJiYgbWluRGF0ZS5kaWZmKGlEYXRlKSA+IDAgfHwgbWF4RGF0ZSAhPT0gbnVsbCAmJiBtYXhEYXRlLmRpZmYoaURhdGUpIDwgMCkge1xuICAgICAgICAgICAgJHVuaXQuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCd1bml0RGlzYWJsZWQnKSkuYWRkQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCd1bml0RGlzYWJsZWRSYW5nZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCQuaW5BcnJheShpRGF0ZUZvcm1hdCwgY29udGV4dC5zZXR0aW5ncy5kaXNhYmxlZERhdGVzKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICR1bml0LmFkZENsYXNzKGhlbHBlci5nZXRTdWJDbGFzcygndW5pdERpc2FibGVkJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5zZXR0aW5ncy5kaXNhYmxlZFJhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZGlzYWJsZWRSYW5nZXNMZW5ndGggPSBjb250ZXh0LnNldHRpbmdzLmRpc2FibGVkUmFuZ2VzLmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkaXNhYmxlZFJhbmdlc0xlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgIHZhciBkaXNhYmxlZFJhbmdlID0gY29udGV4dC5zZXR0aW5ncy5kaXNhYmxlZFJhbmdlc1tqXTtcbiAgICAgICAgICAgICAgdmFyIGRpc2FibGVkUmFuZ2VMZW5ndGggPSBkaXNhYmxlZFJhbmdlLmxlbmd0aDtcblxuICAgICAgICAgICAgICBpZiAoaURhdGUuZGlmZihtb21lbnQoZGlzYWJsZWRSYW5nZVswXSkpID49IDAgJiYgaURhdGUuZGlmZihtb21lbnQoZGlzYWJsZWRSYW5nZVsxXSkpIDw9IDApIHtcbiAgICAgICAgICAgICAgICAkdW5pdC5hZGRDbGFzcyhoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3VuaXREaXNhYmxlZCcpKS5hZGRDbGFzcyhoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3VuaXREaXNhYmxlZFJhbmdlJykpLmFkZENsYXNzKGhlbHBlci5nZXRTdWJDbGFzcygndW5pdERpc2FibGVkTXVsdGlwbGVSYW5nZScpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb250ZXh0LnNldHRpbmdzLnNjaGVkdWxlcy5sZW5ndGggPiAwICYmIF90eXBlb2YoY29udGV4dC5zZXR0aW5ncy5zY2hlZHVsZU9wdGlvbnMpID09PSAnb2JqZWN0JyAmJiBfdHlwZW9mKGNvbnRleHQuc2V0dGluZ3Muc2NoZWR1bGVPcHRpb25zLmNvbG9ycykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFNjaGVkdWxlcyA9IGNvbnRleHQuc2V0dGluZ3Muc2NoZWR1bGVzLmZpbHRlcihmdW5jdGlvbiAoc2NoZWR1bGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlLmRhdGUgPT09IGlEYXRlRm9ybWF0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgbmFtZU9mU2NoZWR1bGVzID0gJC51bmlxdWUoY3VycmVudFNjaGVkdWxlcy5tYXAoZnVuY3Rpb24gKHNjaGVkdWxlLCBpbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gc2NoZWR1bGUubmFtZTtcbiAgICAgICAgICAgIH0pLnNvcnQoKSk7XG5cbiAgICAgICAgICAgIGlmIChuYW1lT2ZTY2hlZHVsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAvLyR1bml0LmRhdGEoJ3NjaGVkdWxlcycsIGN1cnJlbnRTY2hlZHVsZXMpO1xuICAgICAgICAgICAgICB2YXIgJHNjaGVkdWxlUGluQ29udGFpbmVyID0gJChjb250ZXh0Lmdsb2JhbC5jYWxlbmRhclNjaGVkdWxlQ29udGFpbmVySHRtbCk7XG4gICAgICAgICAgICAgICRzY2hlZHVsZVBpbkNvbnRhaW5lci5hcHBlbmRUbygkdW5pdCk7XG4gICAgICAgICAgICAgIG5hbWVPZlNjaGVkdWxlcy5tYXAoZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3Muc2NoZWR1bGVPcHRpb25zLmNvbG9yc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gY29udGV4dC5zZXR0aW5ncy5zY2hlZHVsZU9wdGlvbnMuY29sb3JzW25hbWVdO1xuICAgICAgICAgICAgICAgICAgdmFyICRzY2hlZHVsZVBpbiA9ICQoaGVscGVyLmZvcm1hdChjb250ZXh0Lmdsb2JhbC5jYWxlbmRhclNjaGVkdWxlUGluSHRtbCwgbmFtZSwgY29sb3IpKTtcbiAgICAgICAgICAgICAgICAgICRzY2hlZHVsZVBpbi5hcHBlbmRUbygkc2NoZWR1bGVQaW5Db250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MudG9nZ2xlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoJC5pbkFycmF5KGlEYXRlRm9ybWF0LCBsb2NhbC5zdG9yYWdlLmFjdGl2ZURhdGVzKSAhPT0gLTEgJiYgbG9jYWwuc3RvcmFnZS5hY3RpdmVEYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICR1bml0LmFkZENsYXNzKHRvZ2dsZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR1bml0LmFkZENsYXNzKHRvZ2dsZUluYWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoJHVuaXQuaGFzQ2xhc3MoaGVscGVyLmdldFN1YkNsYXNzKCd1bml0RGlzYWJsZWQnKSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5tdWx0aXBsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBpZiAoY3VycmVudEZvcm1hdFswXSAmJiBpRGF0ZUZvcm1hdCA9PT0gY3VycmVudEZvcm1hdFswXSkge1xuICAgICAgICAgICAgICAgICR1bml0LmFkZENsYXNzKGFjdGl2ZUNsYXNzKS5hZGRDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbMF0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGb3JtYXRbMV0gJiYgaURhdGVGb3JtYXQgPT09IGN1cnJlbnRGb3JtYXRbMV0pIHtcbiAgICAgICAgICAgICAgICAkdW5pdC5hZGRDbGFzcyhhY3RpdmVDbGFzcykuYWRkQ2xhc3MoYWN0aXZlUG9zaXRpb25DbGFzc2VzWzFdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGb3JtYXRbMF0gJiYgaURhdGVGb3JtYXQgPT09IGN1cnJlbnRGb3JtYXRbMF0gJiYgJC5pbkFycmF5KGN1cnJlbnRGb3JtYXRbMF0sIGNvbnRleHQuc2V0dGluZ3MuZGlzYWJsZWREYXRlcykgPT09IC0xICYmIChjb250ZXh0LnNldHRpbmdzLmVuYWJsZWREYXRlcy5sZW5ndGggPCAxIHx8ICQuaW5BcnJheShjdXJyZW50Rm9ybWF0WzBdLCBjb250ZXh0LnNldHRpbmdzLmVuYWJsZWREYXRlcykgIT09IC0xKSkge1xuICAgICAgICAgICAgICAgICR1bml0LmFkZENsYXNzKGFjdGl2ZUNsYXNzKS5hZGRDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbMF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHVuaXRMaXN0LnB1c2goJHVuaXQpO1xuICAgICAgICAgIHZhciAkc3VwZXIgPSAkdGhpcztcbiAgICAgICAgICAkdW5pdC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBkYXRlID0gJHRoaXMuZGF0YSgnZGF0ZScpO1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgIHZhciBwcmV2ZW50U2VsZWN0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICgkdGhpcy5oYXNDbGFzcyhoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3VuaXREaXNhYmxlZCcpKSkge1xuICAgICAgICAgICAgICBwcmV2ZW50U2VsZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChsb2NhbC5pbnB1dCA9PT0gdHJ1ZSAmJiBjb250ZXh0LnNldHRpbmdzLm11bHRpcGxlID09PSBmYWxzZSAmJiBjb250ZXh0LnNldHRpbmdzLmJ1dHRvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgJHN1cGVyLnZhbChtb21lbnQoZGF0ZSkuZm9ybWF0KGNvbnRleHQuc2V0dGluZ3MuZm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgJHBhcmVudC50cmlnZ2VySGFuZGxlcignYXBwbHkuJyArIGhlbHBlci5nZXRDbGFzcyhtb2RlbHMubmFtZSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbC5pbml0aWFsaXplICE9PSBudWxsICYmIGxvY2FsLmluaXRpYWxpemUuZm9ybWF0KCdZWVlZLU1NLUREJykgPT09IGRhdGUgJiYgY29udGV4dC5zZXR0aW5ncy50b2dnbGUgPT09IGZhbHNlKSB7fSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnNldHRpbmdzLnRvZ2dsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBsb2NhbC5zdG9yYWdlLmFjdGl2ZURhdGVzLmZpbHRlcihmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID09PSBkYXRlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWwuY3VycmVudFtwb3NpdGlvbl0gPSBtb21lbnQoZGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5zdG9yYWdlLmFjdGl2ZURhdGVzLnB1c2goZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgJHRoaXMuYWRkQ2xhc3ModG9nZ2xlQWN0aXZlQ2xhc3MpLnJlbW92ZUNsYXNzKHRvZ2dsZUluYWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBsb2NhbC5zdG9yYWdlLmFjdGl2ZURhdGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXREYXRlID0gbG9jYWwuc3RvcmFnZS5hY3RpdmVEYXRlc1tpZHhdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZSA9PT0gdGFyZ2V0RGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGlkeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgbG9jYWwuc3RvcmFnZS5hY3RpdmVEYXRlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnJlbW92ZUNsYXNzKHRvZ2dsZUFjdGl2ZUNsYXNzKS5hZGRDbGFzcyh0b2dnbGVJbmFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkdGhpcy5oYXNDbGFzcyhhY3RpdmVDbGFzcykgPT09IHRydWUgJiYgY29udGV4dC5zZXR0aW5ncy5waWNrV2Vla3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnNldHRpbmdzLm11bHRpcGxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmhhc0NsYXNzKGFjdGl2ZVBvc2l0aW9uQ2xhc3Nlc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGl2ZVBvc2l0aW9uQ2xhc3Nlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzKS5yZW1vdmVDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbcG9zaXRpb25dKTtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWwuY3VycmVudFtwb3NpdGlvbl0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MucGlja1dlZWtzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmhhc0NsYXNzKGFjdGl2ZUNsYXNzKSA9PT0gdHJ1ZSB8fCAkdGhpcy5oYXNDbGFzcyhyYW5nZUNsYXNzKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IDI7IF9qKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwuY2FsZW5kYXIuZmluZCgnLicgKyBhY3RpdmVDbGFzcyArICcuJyArIGFjdGl2ZVBvc2l0aW9uQ2xhc3Nlc1tfal0pLnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzKS5yZW1vdmVDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbX2pdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwuY3VycmVudFswXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jdXJyZW50WzFdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwuY3VycmVudFswXSA9IG1vbWVudChkYXRlKS5zdGFydE9mKCd3ZWVrJykuYWRkKGNvbnRleHQuc2V0dGluZ3Mud2VlaywgJ2RheXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsLmN1cnJlbnRbMV0gPSBtb21lbnQoZGF0ZSkuZW5kT2YoJ3dlZWsnKS5hZGQoY29udGV4dC5zZXR0aW5ncy53ZWVrLCAnZGF5cycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfajIgPSAwOyBfajIgPCAyOyBfajIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIGFjdGl2ZUNsYXNzICsgJy4nICsgYWN0aXZlUG9zaXRpb25DbGFzc2VzW19qMl0pLnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzKS5yZW1vdmVDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbX2oyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsLmNhbGVuZGFyLmZpbmQoaGVscGVyLmZvcm1hdCgnLnswfVtkYXRhLWRhdGU9XCJ7MX1cIl0nLCBoZWxwZXIuZ2V0U3ViQ2xhc3MoJ3VuaXQnKSwgbG9jYWwuY3VycmVudFtfajJdLmZvcm1hdCgnWVlZWS1NTS1ERCcpKSkuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpLmFkZENsYXNzKGFjdGl2ZVBvc2l0aW9uQ2xhc3Nlc1tfajJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MubXVsdGlwbGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbC5jdXJyZW50WzBdID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWwuY3VycmVudFsxXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsLmN1cnJlbnRbMV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIGFjdGl2ZUNsYXNzICsgJy4nICsgYWN0aXZlUG9zaXRpb25DbGFzc2VzWzFdKS5yZW1vdmVDbGFzcyhhY3RpdmVDbGFzcykucmVtb3ZlQ2xhc3MoYWN0aXZlUG9zaXRpb25DbGFzc2VzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIGFjdGl2ZUNsYXNzICsgJy4nICsgYWN0aXZlUG9zaXRpb25DbGFzc2VzW3Bvc2l0aW9uXSkucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpLnJlbW92ZUNsYXNzKGFjdGl2ZVBvc2l0aW9uQ2xhc3Nlc1twb3NpdGlvbl0pO1xuICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmFkZENsYXNzKGFjdGl2ZUNsYXNzKS5hZGRDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbcG9zaXRpb25dKTtcbiAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jdXJyZW50W3Bvc2l0aW9uXSA9IG1vbWVudChkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbC5jdXJyZW50WzBdICYmIGxvY2FsLmN1cnJlbnRbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWwuY3VycmVudFswXS5kaWZmKGxvY2FsLmN1cnJlbnRbMV0pID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IGxvY2FsLmN1cnJlbnRbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jdXJyZW50WzBdID0gbG9jYWwuY3VycmVudFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsLmN1cnJlbnRbMV0gPSB0bXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwuY2FsZW5kYXIuZmluZCgnLicgKyBhY3RpdmVDbGFzcykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2lkeDMgaW4gYWN0aXZlUG9zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGFjdGl2ZVBvc2l0aW9uQ2xhc3Nlc1tfaWR4M107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMudG9nZ2xlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkRGF0ZUFyZWEobG9jYWwuY3VycmVudFswXSwgbG9jYWwuY3VycmVudFsxXSkgPT09IGZhbHNlICYmIGNvbnRleHQuc2V0dGluZ3Muc2VsZWN0T3ZlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsLmN1cnJlbnRbMF0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwuY3VycmVudFsxXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIGFjdGl2ZUNsYXNzKS5yZW1vdmVDbGFzcyhhY3RpdmVDbGFzcykucmVtb3ZlQ2xhc3MoYWN0aXZlUG9zaXRpb25DbGFzc2VzWzBdKS5yZW1vdmVDbGFzcyhhY3RpdmVQb3NpdGlvbkNsYXNzZXNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbC5pbnB1dCA9PT0gdHJ1ZSAmJiBjb250ZXh0LnNldHRpbmdzLmJ1dHRvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWwuY3VycmVudFswXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWVzLnB1c2gobG9jYWwuY3VycmVudFswXS5mb3JtYXQoY29udGV4dC5zZXR0aW5ncy5mb3JtYXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsLmN1cnJlbnRbMV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVZhbHVlcy5wdXNoKGxvY2FsLmN1cnJlbnRbMV0uZm9ybWF0KGNvbnRleHQuc2V0dGluZ3MuZm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnZhbChkYXRlVmFsdWVzLmpvaW4oJywgJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHBhcmVudC50cmlnZ2VyKCdhcHBseS4nICsgaGVscGVyLmdldENsYXNzKG1vZGVscy5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnNldHRpbmdzLm11bHRpcGxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsLmNhbGVuZGFyLmZpbmQoJy4nICsgcmFuZ2VDbGFzcykucmVtb3ZlQ2xhc3MocmFuZ2VDbGFzcykucmVtb3ZlQ2xhc3MocmFuZ2VGaXJzdENsYXNzKS5yZW1vdmVDbGFzcyhyYW5nZUxhc3RDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlRGF0ZVJhbmdlLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3Muc2NoZWR1bGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWwuc3RvcmFnZS5zY2hlZHVsZXMgPSBjb250ZXh0LnNldHRpbmdzLnNjaGVkdWxlcy5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmRhdGUgPT09IGRhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2xhc3NpZnlEYXRlID0gZnVuY3Rpb24gY2xhc3NpZnlEYXRlKGRhdGUpIHtcbiAgICAgICAgICAgICAgbG9jYWwuZGF0ZS5hbGwucHVzaChkYXRlKTtcblxuICAgICAgICAgICAgICBpZiAodmFsaWREYXRlKG1vbWVudChkYXRlKSkpIHtcbiAgICAgICAgICAgICAgICBsb2NhbC5kYXRlLmVuYWJsZWQucHVzaChkYXRlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhbC5kYXRlLmRpc2FibGVkLnB1c2goZGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChsb2NhbC5jdXJyZW50WzBdKSB7XG4gICAgICAgICAgICAgIGlmIChsb2NhbC5jdXJyZW50WzFdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZSA9IGxvY2FsLmN1cnJlbnRbMF07XG5cbiAgICAgICAgICAgICAgICB2YXIgX2RhdGUgPSBzdGFydERhdGUuY2xvbmUoKTtcblxuICAgICAgICAgICAgICAgIGZvciAoOyBfZGF0ZS5mb3JtYXQoJ1lZWVktTU0tREQnKSA8PSBsb2NhbC5jdXJyZW50WzFdLmZvcm1hdCgnWVlZWS1NTS1ERCcpOyBfZGF0ZS5hZGQoJzEnLCAnZGF5cycpKSB7XG4gICAgICAgICAgICAgICAgICBjbGFzc2lmeURhdGUoX2RhdGUuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfZGF0ZTIgPSBsb2NhbC5jdXJyZW50WzBdO1xuICAgICAgICAgICAgICAgIGNsYXNzaWZ5RGF0ZShfZGF0ZTIuY2xvbmUoKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByZXZlbnRTZWxlY3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGxvY2FsLmluaXRpYWxpemUgPSBudWxsO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5zZXR0aW5ncy5zZWxlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNldHRpbmdzLnNlbGVjdC5jYWxsKCR0aGlzLCBsb2NhbC5jdXJyZW50LCBsb2NhbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnNldHRpbmdzLmNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnRleHQuc2V0dGluZ3MuY2xpY2suY2FsbCgkdGhpcywgZXZlbnQsIGxvY2FsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSBsb2NhbC5kYXRlTWFuYWdlci5maXJzdERheTsgX2kyIDw9IGxvY2FsLmRhdGVNYW5hZ2VyLmxhc3REYXk7IF9pMisrKSB7XG4gICAgICAgICAgX2xvb3AoX2kyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9pMyA9IGxhc3RXZWVrZGF5ICsgMTsgJHVuaXRMaXN0Lmxlbmd0aCA8IGNvbnRleHQuc2V0dGluZ3Mud2Vla3MubGVuZ3RoICogNTsgX2kzKyspIHtcbiAgICAgICAgICBpZiAoX2kzIDwgMCkge1xuICAgICAgICAgICAgX2kzID0gZ2xvYmFsLmxhbmd1YWdlcy53ZWVrcy5lbi5sZW5ndGggLSBfaTM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF8kdW5pdCA9ICQoaGVscGVyLmZvcm1hdCgnPGRpdiBjbGFzcz1cInswfSB7MH0tezF9XCI+PC9kaXY+JywgaGVscGVyLmdldFN1YkNsYXNzKCd1bml0JyksIGdsb2JhbC5sYW5ndWFnZXMud2Vla3MuZW5bX2kzICUgZ2xvYmFsLmxhbmd1YWdlcy53ZWVrcy5lbi5sZW5ndGhdLnRvTG93ZXJDYXNlKCkpKTtcblxuICAgICAgICAgICR1bml0TGlzdC5wdXNoKF8kdW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJHJvdyA9IG51bGw7XG5cbiAgICAgICAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgJHVuaXRMaXN0Lmxlbmd0aDsgX2k0KyspIHtcbiAgICAgICAgICB2YXIgZWxlbWVudCA9ICR1bml0TGlzdFtfaTRdO1xuXG4gICAgICAgICAgaWYgKF9pNCAlIGNvbnRleHQuc2V0dGluZ3Mud2Vla3MubGVuZ3RoID09IDAgfHwgX2k0ICsgMSA+PSAkdW5pdExpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoJHJvdyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAkcm93LmFwcGVuZFRvKCRjYWxlbmRhckJvZHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX2k0ICsgMSA8ICR1bml0TGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvdyA9ICQoaGVscGVyLmZvcm1hdCgnPGRpdiBjbGFzcz1cInswfVwiPjwvZGl2PicsIGhlbHBlci5nZXRTdWJDbGFzcygncm93JykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkcm93LmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2FsLmNhbGVuZGFyLmZpbmQoJy4nICsgY2xhc3NOYW1lcy50b3AgKyAnLW5hdicpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgIHZhciB0eXBlID0gJ3Vua293bic7XG5cbiAgICAgICAgICBpZiAoJHRoaXMuaGFzQ2xhc3MoY2xhc3NOYW1lcy50b3AgKyAnLXByZXYnKSkge1xuICAgICAgICAgICAgdHlwZSA9ICdwcmV2JztcbiAgICAgICAgICAgIGxvY2FsLmRhdGVNYW5hZ2VyID0gbmV3IERhdGVNYW5hZ2VyKGxvY2FsLmRhdGVNYW5hZ2VyLmRhdGUuY2xvbmUoKS5hZGQoLTEsICdtb250aHMnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkdGhpcy5oYXNDbGFzcyhjbGFzc05hbWVzLnRvcCArICctbmV4dCcpKSB7XG4gICAgICAgICAgICB0eXBlID0gJ25leHQnO1xuICAgICAgICAgICAgbG9jYWwuZGF0ZU1hbmFnZXIgPSBuZXcgRGF0ZU1hbmFnZXIobG9jYWwuZGF0ZU1hbmFnZXIuZGF0ZS5jbG9uZSgpLmFkZCgxLCAnbW9udGhzJykpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29udGV4dC5zZXR0aW5ncy5wYWdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNldHRpbmdzLnBhZ2UuY2FsbCgkdGhpcywge1xuICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICB5ZWFyOiBsb2NhbC5kYXRlTWFuYWdlci55ZWFyLFxuICAgICAgICAgICAgICBtb250aDogbG9jYWwuZGF0ZU1hbmFnZXIubW9udGgsXG4gICAgICAgICAgICAgIGRheTogbG9jYWwuZGF0ZU1hbmFnZXIuZGF5XG4gICAgICAgICAgICB9LCBsb2NhbCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0LnNldHRpbmdzW3R5cGVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNldHRpbmdzW3R5cGVdLmNhbGwoJHRoaXMsIHtcbiAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgeWVhcjogbG9jYWwuZGF0ZU1hbmFnZXIueWVhcixcbiAgICAgICAgICAgICAgbW9udGg6IGxvY2FsLmRhdGVNYW5hZ2VyLm1vbnRoLFxuICAgICAgICAgICAgICBkYXk6IGxvY2FsLmRhdGVNYW5hZ2VyLmRheVxuICAgICAgICAgICAgfSwgbG9jYWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxvY2FsLnJlbmRlcmVyLmNhbGwoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuc2V0dGluZ3MubXVsdGlwbGUgPT09IHRydWUpIHtcbiAgICAgICAgICBsb2NhbC5jYWxlbmRhci5maW5kKCcuJyArIHJhbmdlQ2xhc3MpLnJlbW92ZUNsYXNzKHJhbmdlQ2xhc3MpLnJlbW92ZUNsYXNzKHJhbmdlRmlyc3RDbGFzcykucmVtb3ZlQ2xhc3MocmFuZ2VMYXN0Q2xhc3MpO1xuICAgICAgICAgIGdlbmVyYXRlRGF0ZVJhbmdlLmNhbGwoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbG9jYWwucmVuZGVyZXIuY2FsbCgpO1xuICAgICAgJHRoaXNbMF1bbW9kZWxzLm5hbWVdID0gbG9jYWw7XG5cbiAgICAgIGlmICh0eXBlb2YgY29udGV4dC5zZXR0aW5ncy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRleHQuc2V0dGluZ3MuaW5pdC5jYWxsKCR0aGlzLCBsb2NhbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQuanMubWFwXG47XG5cblxuZGVmaW5lKCdtZXRob2RzL3NldHRpbmcnLFsnLi4vY29tcG9uZW50L2dsb2JhbCcsICcuLi9jb25maWd1cmVzL2kxOG4nLCAnanF1ZXJ5J10sIGZ1bmN0aW9uIChnbG9iYWwsIGxhbmd1YWdlLCAkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcbiAgICAgIGxhbmd1YWdlOiBnbG9iYWwubGFuZ3VhZ2UsXG4gICAgICBsYW5ndWFnZXM6IHt9LFxuICAgICAgd2VlazogbnVsbCxcbiAgICAgIGZvcm1hdDogbnVsbFxuICAgIH0sIG9wdGlvbnMpO1xuICAgIHZhciBtb250aHNDb3VudCA9IDEyO1xuICAgIHZhciB3ZWVrc0NvdW50ID0gNztcbiAgICBnbG9iYWwubGFuZ3VhZ2UgPSBzZXR0aW5ncy5sYW5ndWFnZTtcblxuICAgIGlmIChPYmplY3Qua2V5cyhzZXR0aW5ncy5sYW5ndWFnZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9sYW5ndWFnZSkge1xuICAgICAgICB2YXIgbGFuZ3VhZ2VTZXR0aW5nID0gc2V0dGluZ3MubGFuZ3VhZ2VzW19sYW5ndWFnZV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfbGFuZ3VhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignZ2xvYmFsIGNvbmZpZ3VyYXRpb24gaXMgZmFpbGVkLlxcbk1lc3NhZ2U6IGxhbmd1YWdlIGtleSBpcyBub3QgYSBzdHJpbmcgdHlwZS4nLCBfbGFuZ3VhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsYW5ndWFnZVNldHRpbmcud2Vla3MpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IGB3ZWVrc2Agb3B0aW9uIG9mIGAnICsgX2xhbmd1YWdlICsgJ2AgbGFuZ3VhZ2UgaXMgbWlzc2luZy4nKTtcbiAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsYW5ndWFnZVNldHRpbmcubW9udGhzTG9uZykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogYG1vbnRoc0xvbmdgIG9wdGlvbiBvZiBgJyArIF9sYW5ndWFnZSArICdgIGxhbmd1YWdlIGlzIG1pc3NpbmcuJyk7XG4gICAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbGFuZ3VhZ2VTZXR0aW5nLm1vbnRocykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogYG1vbnRoc2Agb3B0aW9uIG9mIGAnICsgX2xhbmd1YWdlICsgJ2AgbGFuZ3VhZ2UgaXMgbWlzc2luZy4nKTtcbiAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsYW5ndWFnZVNldHRpbmcuY29udHJvbHMpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IGBjb250cm9sc2Agb3B0aW9uIG9mIGAnICsgX2xhbmd1YWdlICsgJ2AgbGFuZ3VhZ2UgaXMgbWlzc2luZy4nKTtcbiAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhbmd1YWdlU2V0dGluZy53ZWVrcykge1xuICAgICAgICAgIGlmIChsYW5ndWFnZVNldHRpbmcud2Vla3MubGVuZ3RoIDwgd2Vla3NDb3VudCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignYHdlZWtzYCBtdXN0IGhhdmUgbGVhc3QgJyArIHdlZWtzQ291bnQgKyAnIGl0ZW1zLicpO1xuICAgICAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhbmd1YWdlU2V0dGluZy53ZWVrcy5sZW5ndGggIT09IHdlZWtzQ291bnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignYHdlZWtzYCBvcHRpb24gb3ZlciAnICsgd2Vla3NDb3VudCArICcgaXRlbXMuIFdlIHJlY29tbWVuZCB0byBnaXZlICcgKyB3ZWVrc0NvdW50ICsgJyBpdGVtcy4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFuZ3VhZ2VTZXR0aW5nLm1vbnRoc0xvbmcpIHtcbiAgICAgICAgICBpZiAobGFuZ3VhZ2VTZXR0aW5nLm1vbnRoc0xvbmcubGVuZ3RoIDwgbW9udGhzQ291bnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Btb250aHNMb25nYCBtdXN0IGhhdmUgbGVhc3QgJyArIG1vbnRoc0NvdW50ICsgJyBpdGVtcy4nKTtcbiAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYW5ndWFnZVNldHRpbmcubW9udGhzTG9uZy5sZW5ndGggIT09IG1vbnRoc0NvdW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ2Btb250aHNMb25nYCBvcHRpb24gb3ZlciAnICsgbW9udGhzQ291bnQgKyAnIGl0ZW1zLiBXZSByZWNvbW1lbmQgdG8gZ2l2ZSAnICsgbW9udGhzQ291bnQgKyAnIGl0ZW1zLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYW5ndWFnZVNldHRpbmcubW9udGhzKSB7XG4gICAgICAgICAgaWYgKGxhbmd1YWdlU2V0dGluZy5tb250aHMubGVuZ3RoIDwgbW9udGhzQ291bnQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Btb250aHNgIG11c3QgaGF2ZSBsZWFzdCAnICsgbW9udGhzQ291bnQgKyAnIGl0ZW1zLicpO1xuICAgICAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhbmd1YWdlU2V0dGluZy5tb250aHMubGVuZ3RoICE9PSBtb250aHNDb3VudCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdgbW9udGhzYCBvcHRpb24gb3ZlciAnICsgbW9udGhzQ291bnQgKyAnIGl0ZW1zLiBXZSByZWNvbW1lbmQgdG8gZ2l2ZSAnICsgbW9udGhzQ291bnQgKyAnIGl0ZW1zLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYW5ndWFnZVNldHRpbmcuY29udHJvbHMpIHtcbiAgICAgICAgICBpZiAoIWxhbmd1YWdlU2V0dGluZy5jb250cm9scy5vaykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignYGNvbnRyb2xzLm9rYCB2YWx1ZSBpcyBtaXNzaW5nIGluIHlvdXIgbGFuZ3VhZ2Ugc2V0dGluZycpO1xuICAgICAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWxhbmd1YWdlU2V0dGluZy5jb250cm9scy5jYW5jZWwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Bjb250cm9scy5jYW5jZWxgIHZhbHVlIGlzIG1pc3NpbmcgaW4geW91ciBsYW5ndWFnZSBzZXR0aW5nJyk7XG4gICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnbG9iYWwubGFuZ3VhZ2VzLnN1cHBvcnRzLmluZGV4T2YoX2xhbmd1YWdlKSA9PT0gLTEpIHtcbiAgICAgICAgICBnbG9iYWwubGFuZ3VhZ2VzLnN1cHBvcnRzLnB1c2goX2xhbmd1YWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFsnd2Vla3MnLCAnbW9udGhzTG9uZycsICdtb250aHMnLCAnY29udHJvbHMnXS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIGlmIChnbG9iYWwubGFuZ3VhZ2VzW2tleV1bX2xhbmd1YWdlXSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdgJyArIF9sYW5ndWFnZSArICdgIGxhbmd1YWdlIGlzIGFscmVhZHkgZ2l2ZW4gaG93ZXZlciBpdCB3aWxsIGJlIG92ZXJ3cml0ZW4uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZ2xvYmFsLmxhbmd1YWdlc1trZXldW19sYW5ndWFnZV0gPSBsYW5ndWFnZVNldHRpbmdba2V5XSB8fCBnbG9iYWwubGFuZ3VhZ2VzW2tleV1bX2xhbmd1YWdlLmRlZmF1bHRMYW5ndWFnZV07XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIgX2xhbmd1YWdlIGluIHNldHRpbmdzLmxhbmd1YWdlcykge1xuICAgICAgICB2YXIgX3JldCA9IF9sb29wKF9sYW5ndWFnZSk7XG5cbiAgICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzLndlZWspIHtcbiAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3Mud2VlayA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZ2xvYmFsLndlZWsgPSBzZXR0aW5ncy53ZWVrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignZ2xvYmFsIGNvbmZpZ3VyYXRpb24gaXMgZmFpbGVkLlxcbk1lc3NhZ2U6IFlvdSBtdXN0IGdpdmUgYHdlZWtgIG9wdGlvbiBhcyBudW1iZXIgdHlwZS4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MuZm9ybWF0KSB7XG4gICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmZvcm1hdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZ2xvYmFsLmZvcm1hdCA9IHNldHRpbmdzLmZvcm1hdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2dsb2JhbCBjb25maWd1cmF0aW9uIGlzIGZhaWxlZC5cXG5NZXNzYWdlOiBZb3UgbXVzdCBnaXZlIGBmb3JtYXRgIG9wdGlvbiBhcyBzdHJpbmcgdHlwZS4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldHRpbmcuanMubWFwXG47XG5cblxuZGVmaW5lKCdtZXRob2RzL3NlbGVjdCcsWycuLi9jb21wb25lbnQvaGVscGVyJywgJ2pxdWVyeSddLCBmdW5jdGlvbiAoaGVscGVyLCAkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGF5KSB7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBsb2NhbCA9IHRoaXMubG9jYWw7XG4gICAgICB2YXIgZGF0ZU1hbmFnZXIgPSBsb2NhbC5kYXRlTWFuYWdlcjtcbiAgICAgIHZhciBkYXRlID0gaGVscGVyLmZvcm1hdCgnezB9LXsxfS17Mn0nLCBkYXRlTWFuYWdlci55ZWFyLCBkYXRlTWFuYWdlci5tb250aCwgZGF5KTtcbiAgICAgICQodGhpcykuZmluZChoZWxwZXIuZm9ybWF0KCcuezB9W2RhdGEtZGF0ZT1cInsxfVwiXScsIGhlbHBlci5nZXRTdWJDbGFzcygndW5pdCcpLCBkYXRlKSkudHJpZ2dlckhhbmRsZXIoJ2NsaWNrJyk7XG4gICAgfSk7XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdC5qcy5tYXBcbjtcblxuXG5kZWZpbmUoJ21ldGhvZHMvc2V0JyxbJ2pxdWVyeScsICdtb21lbnQnLCAnLi4vbWFuYWdlci9pbmRleCcsICcuLi9jb21wb25lbnQvbW9kZWxzJ10sIGZ1bmN0aW9uICgkLCBtb21lbnQsIERhdGVNYW5hZ2VyLCBtb2RlbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgaWYgKGRhdGUpIHtcbiAgICAgIHZhciBkYXRlU3BsaXQgPSBkYXRlLnNwbGl0KCd+JykubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSAkLnRyaW0oZWxlbWVudCk7XG4gICAgICAgIHJldHVybiAhZm9ybWF0ID8gbnVsbCA6IGZvcm1hdDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGxvY2FsID0gJHRoaXNbMF1bbW9kZWxzLm5hbWVdO1xuICAgICAgICB2YXIgY29udGV4dCA9IGxvY2FsLmNvbnRleHQ7XG4gICAgICAgIHZhciBkYXRlQXJyYXkgPSBbIWRhdGVTcGxpdFswXSA/IG51bGwgOiBtb21lbnQoZGF0ZVNwbGl0WzBdLCBjb250ZXh0LnNldHRpbmdzLmZvcm1hdCksICFkYXRlU3BsaXRbMV0gPyBudWxsIDogbW9tZW50KGRhdGVTcGxpdFsxXSwgY29udGV4dC5zZXR0aW5ncy5mb3JtYXQpXTtcbiAgICAgICAgbG9jYWwuZGF0ZU1hbmFnZXIgPSBuZXcgRGF0ZU1hbmFnZXIoZGF0ZUFycmF5WzBdKTtcblxuICAgICAgICBpZiAoY29udGV4dC5zZXR0aW5ncy5waWNrV2Vla3MgPT09IHRydWUpIHtcbiAgICAgICAgICBpZiAoZGF0ZUFycmF5WzBdKSB7XG4gICAgICAgICAgICB2YXIgX2RhdGUgPSBkYXRlQXJyYXlbMF07XG4gICAgICAgICAgICBkYXRlQXJyYXlbMF0gPSBfZGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ3dlZWsnKTtcbiAgICAgICAgICAgIGRhdGVBcnJheVsxXSA9IF9kYXRlLmNsb25lKCkuZW5kT2YoJ3dlZWsnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5zZXR0aW5ncy50b2dnbGUgPT09IHRydWUpIHtcbiAgICAgICAgICBsb2NhbC5zdG9yYWdlLmFjdGl2ZURhdGVzID0gZGF0ZVNwbGl0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvY2FsLmN1cnJlbnQgPSBkYXRlQXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbC5yZW5kZXJlci5jYWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldC5qcy5tYXBcbjtcblxuXG5kZWZpbmUoJ21ldGhvZHMvaW5kZXgnLFsnLi9pbml0JywgJy4vY29uZmlndXJlJywgJy4vc2V0dGluZycsICcuL3NlbGVjdCcsICcuL3NldCddLCBmdW5jdGlvbiAobWV0aG9kSW5pdCwgbWV0aG9kQ29uZmlndXJlLCBtZXRob2RTZXR0aW5nLCBtZXRob2RTZWxlY3QsIG1ldGhvZFNldCkge1xuICByZXR1cm4ge1xuICAgIGluaXQ6IG1ldGhvZEluaXQsXG4gICAgY29uZmlndXJlOiBtZXRob2RDb25maWd1cmUsXG4gICAgc2V0dGluZzogbWV0aG9kU2V0dGluZyxcbiAgICBzZWxlY3Q6IG1ldGhvZFNlbGVjdCxcbiAgICBzZXQ6IG1ldGhvZFNldFxuICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbjtcblxuXG5kZWZpbmUoJ2NvbXBvbmVudC9wb2x5ZmlsbHMnLFtdLCBmdW5jdGlvbiAoKSB7XG4gIGlmICghQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzID0gW107XG4gICAgICB2YXIgdGhpc3AgPSBhcmd1bWVudHNbMV07XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGkgaW4gdCkge1xuICAgICAgICAgIHZhciB2YWwgPSB0W2ldO1xuXG4gICAgICAgICAgaWYgKGZ1bmMuY2FsbCh0aGlzcCwgdmFsLCBpLCB0KSkge1xuICAgICAgICAgICAgcmVzLnB1c2godmFsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvbHlmaWxscy5qcy5tYXBcbjtcblxuXG5kZWZpbmUoJ2NvcmUnLFsnLi9tZXRob2RzL2luZGV4JywgJy4vY29tcG9uZW50L21vZGVscycsICcuL2NvbXBvbmVudC9wb2x5ZmlsbHMnXSwgZnVuY3Rpb24gKG1ldGhvZHMsIG1vZGVscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgd2luZG93W21vZGVscy5uYW1lXSA9IHtcbiAgICB2ZXJzaW9uOiBtb2RlbHMudmVyc2lvblxuICB9O1xuICB2YXIgQ29tcG9uZW50ID0gbWV0aG9kcztcbiAgcmV0dXJuIENvbXBvbmVudDtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29yZS5qcy5tYXBcbjtcblxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5kZWZpbmUoJ21haW4nLFsnY29yZScsICdjb21wb25lbnQvbW9kZWxzJ10sIGZ1bmN0aW9uIChjb21wb25lbnQsIG1vZGVscykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHBpZ25vc2VDYWxlbmRhciA9IGZ1bmN0aW9uIHBpZ25vc2VDYWxlbmRhcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnRbb3B0aW9uc10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50W29wdGlvbnNdLmFwcGx5KGVsZW1lbnQsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xuICAgIH0gZWxzZSBpZiAoX3R5cGVvZihvcHRpb25zKSA9PT0gJ29iamVjdCcgfHwgIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjb21wb25lbnQuaW5pdC5hcHBseShlbGVtZW50LCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignQXJndW1lbnQgZXJyb3IgYXJlIG9jY3VyZWQuJyk7XG4gICAgfVxuICB9O1xuXG4gIHBpZ25vc2VDYWxlbmRhci5jb21wb25lbnQgPSB7fTtcblxuICBmb3IgKHZhciBpZHggaW4gbW9kZWxzKSB7XG4gICAgcGlnbm9zZUNhbGVuZGFyLmNvbXBvbmVudFtpZHhdID0gbW9kZWxzW2lkeF07XG4gIH1cblxuICByZXR1cm4gcGlnbm9zZUNhbGVuZGFyO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWluLmpzLm1hcFxuO1xuXG5cbnZhciBtYWluID0gcmVxdWlyZSgnbWFpbicpO1xuXG52YXIgbW9kZWxzID0gcmVxdWlyZSgnY29tcG9uZW50L21vZGVscycpO1xuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgcm9vdCA9IHdpbmRvdyA/IHdpbmRvdyA6IHZvaWQgMCB8fCB7fTtcbnJvb3QubW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbiQuZm5bbW9kZWxzLm5hbWVdID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG1haW4uYXBwbHkobWFpbiwgW3RoaXMsIG9wdGlvbnNdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xufTtcblxuZm9yICh2YXIga2V5IGluIG1vZGVscykge1xuICAkLmZuW21vZGVscy5uYW1lXVtrZXldID0gbW9kZWxzW2tleV07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qcXVlcnkuanMubWFwXG47XG5kZWZpbmUoXCJwbHVnaW5zL2pxdWVyeS5qc1wiLCBmdW5jdGlvbigpe30pO1xuXG5cblxuXG4gICAgcmV0dXJuIDtcblxufSkpO1xuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYnRuLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jYWxlbmRhci5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jaGVja2JveC1saXN0LnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jb21tZW50LWJsb2NrLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kcm9wZG93bi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5mby1ibG9jay5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5wdXQtdGV4dC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGlrZS5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGluay5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGlzdC1ibG9jay5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcGFnaW5hdGlvbi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmFkaW9ncm91cC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmFuZ2Utc2xpZGVyLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yYXRlLWJ0bi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdG9nZ2xlLWJsb2NrLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b3BpYy1sYWJlbC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3VpLWtpdC1mb3JtLWVsZW1lbnRzLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnRzLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiaW1wb3J0ICdwZy1jYWxlbmRhcic7XHJcblxyXG4kKGZ1bmN0aW9uKCkge1xyXG4gIGNvbnN0IG1haW5PcHRpb25zID0ge1xyXG4gICAgd2VlazogMSxcclxuICAgIGxhbmc6ICdjdXN0b20nLFxyXG4gICAgbXVsdGlwbGU6IHRydWUsXHJcbiAgICBidXR0b25zOiB0cnVlLFxyXG4gICAgZm9ybWF0OiAnREQuTU0uWVlZWScsXHJcbiAgICB3ZWVrczogWyfQktGBJywgJ9Cf0L0nLCAn0JLRgicsICfQodGAJywgJ9Cn0YInLCAn0J/RgicsICfQodCxJ10sXHJcbiAgICBtb250aHNMb25nOiBbJ9Cv0L3QstCw0YDRjCcsICfQpNC10LLRgNCw0LvRjCcsICfQnNCw0YDRgicsICfQkNC/0YDQtdC70YwnLCAn0JzQsNC5JywgJ9CY0Y7QvdGMJywgJ9CY0Y7Qu9GMJywgJ9CQ0LLQs9GD0YHRgicsICfQodC10L3RgtGP0LHRgNGMJywgJ9Ce0LrRgtGP0LHRgNGMJywgJ9Cd0L7Rj9Cx0YDRjCcsICfQlNC10LrQsNCx0YDRjCddLFxyXG4gICAgbW9udGhzOiBbJ9Cv0L3QsicsICfQpNC10LLRgCcsICfQnNCw0YDRgicsICfQkNC/0YAnLCAn0JzQsNC5JywgJ9CY0Y7QvdGMJywgJ9CY0Y7Qu9GMJywgJ9CQ0LLQsycsICfQodC10L3RgicsICfQntC60YInLCAn0J3QvtGP0LEnLCAn0JTQtdC6J10sXHJcbiAgICBjb250cm9sczoge1xyXG4gICAgICBjYW5jZWw6IFwi0J7Rh9C40YHRgtC40YLRjFwiLFxyXG4gICAgICBvazogXCLQn9GA0LjQvNC10L3QuNGC0YxcIlxyXG4gICAgfSxcclxuICB9XHJcblxyXG4gICQoJy5kcm9wZG93bi1kYXRlcyAuY2FsZW5kYXInKS5waWdub3NlQ2FsZW5kYXIoXHJcbiAgICAkLmV4dGVuZChcclxuICAgICAgbWFpbk9wdGlvbnMsXHJcbiAgICAgIHsgXHJcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKGRhdGUsIGNvbnRleHQpIHsgXHJcbiAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd246Zmlyc3QnKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24oZGF0ZSwgY29udGV4dCkge1xyXG4gICAgICAgICAgXHJcblxyXG4gICAgICAgICAgaWYgKGRhdGVbMF0gIT0gbnVsbCl7XHJcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWRhdGVzJykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bicpWzBdLmlubmVyVGV4dCA9IGRhdGVbMF0uZm9ybWF0KCdERC5NTS5ZWVlZJyk7XHJcbiAgICAgICAgICAgIGFjdGl2ZVVuaXRzKCQodGhpcykpO1xyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWRhdGVzJykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bicpWzBdLmlubmVyVGV4dCA9ICfQlNCULtCc0Jwu0JPQk9CT0JMnO1xyXG4gICAgICAgICAgICBhY3RpdmVVbml0cygkKHRoaXMpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChkYXRlWzFdICE9IG51bGwpe1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKVsxXS5pbm5lclRleHQgPSBkYXRlWzFdLmZvcm1hdCgnREQuTU0uWVlZWScpO1xyXG4gICAgICAgICAgICBhY3RpdmVVbml0cygkKHRoaXMpKTtcclxuICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKVsxXS5pbm5lclRleHQgPSAn0JTQlC7QnNCcLtCT0JPQk9CTJztcclxuICAgICAgICAgICAgYWN0aXZlVW5pdHMoJCh0aGlzKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgJCgnLmRyb3Bkb3duLWJsb2NrIC5jYWxlbmRhcicpLnBpZ25vc2VDYWxlbmRhcihcclxuICAgICQuZXh0ZW5kKFxyXG4gICAgICBtYWluT3B0aW9ucyxcclxuICAgICAge1xyXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbihkYXRlLCBjb250ZXh0KSB7IFxyXG4gICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKS5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duJykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGRhdGUsIGNvbnRleHQpIHtcclxuICAgICAgICAgIGlmICgoZGF0ZVswXSAhPSBudWxsKSAmJiAoZGF0ZVsxXSAhPSBudWxsKSl7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vbnRoMSA9IGNvbnRleHQuY29udGV4dC5zZXR0aW5ncy5tb250aHNbZGF0ZVswXS5mb3JtYXQoJ00nKS0xXTtcclxuICAgICAgICAgICAgY29uc3QgbW9udGgyID0gY29udGV4dC5jb250ZXh0LnNldHRpbmdzLm1vbnRoc1tkYXRlWzFdLmZvcm1hdCgnTScpLTFdO1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKS5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duJykuaHRtbChgJHtkYXRlWzBdLmZvcm1hdCgnRCcpfSAke21vbnRoMX0gLSAke2RhdGVbMV0uZm9ybWF0KCdEJyl9ICR7bW9udGgyfWApO1xyXG4gICAgICAgICAgICBhY3RpdmVVbml0cygkKHRoaXMpKTtcclxuICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9jaycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKS5odG1sKCfQktGL0LHQtdGA0LjRgtC1INC00LjQsNC/0LDQt9C+0L0g0LTQsNGCLi4uJyk7XHJcbiAgICAgICAgICAgIGFjdGl2ZVVuaXRzKCQodGhpcykpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKVxyXG4gICk7XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICQoJy51aS1raXQtY2FyZHNfX2NhbGVuZGFyLWJsb2NrIC5jYWxlbmRhcicpLnBpZ25vc2VDYWxlbmRhcihtYWluT3B0aW9ucyk7XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIGZ1bmN0aW9uIGFjdGl2ZVVuaXRzICh0aGlzQ2xpY2spe1xyXG4gICAgbGV0IGNhbGVuZGFyID0gdGhpc0NsaWNrLmNsb3Nlc3QoJy5waWdub3NlLWNhbGVuZGFyLWJvZHknKTtcclxuICAgIGxldCBhY3RpdmVfZmlyc3QgPSBjYWxlbmRhci5maW5kKCcucGlnbm9zZS1jYWxlbmRhci11bml0LWZpcnN0LWFjdGl2ZScpO1xyXG4gICAgbGV0IGFjdGl2ZV9zZWNvbmQgPSBjYWxlbmRhci5maW5kKCcucGlnbm9zZS1jYWxlbmRhci11bml0LXNlY29uZC1hY3RpdmUnKTtcclxuXHJcbiAgICBpZiAoKGFjdGl2ZV9maXJzdC5sZW5ndGggIT0gMCkgJiYgKGFjdGl2ZV9zZWNvbmQubGVuZ3RoICE9IDApKXtcclxuICAgICAgYWN0aXZlX2ZpcnN0LmFkZENsYXNzKCdhY3RpdmUtZmlyc3QnKTtcclxuICAgICAgYWN0aXZlX3NlY29uZC5hZGRDbGFzcygnYWN0aXZlLXNlY29uZCcpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNhbGVuZGFyLmZpbmQoJy5hY3RpdmUtZmlyc3QnKS5yZW1vdmVDbGFzcygnYWN0aXZlLWZpcnN0Jyk7XHJcbiAgICAgIGNhbGVuZGFyLmZpbmQoJy5hY3RpdmUtc2Vjb25kJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS1zZWNvbmQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKS5vbignY2xpY2snLCBoYW5kbGVEYXRlRHJvcGRvd25DbGljayk7XHJcbiAgXHJcbiAgZnVuY3Rpb24gaGFuZGxlRGF0ZURyb3Bkb3duQ2xpY2soKXtcclxuICAgIGNvbnN0IGJsb2NrX2NhbGVuZGFyO1xyXG5cclxuICAgIGlmICgkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmxlbmd0aCAhPSAwKXtcclxuICAgICAgYmxvY2tfY2FsZW5kYXIgPSAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmZpbmQoJy5jYWxlbmRhci1ibG9jaycpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIGlmICgkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9jaycpLmxlbmd0aCAhPSAwKXtcclxuICAgICAgICBibG9ja19jYWxlbmRhciA9ICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrJykuZmluZCgnLmNhbGVuZGFyLWJsb2NrJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmxvY2tfY2FsZW5kYXIuaGFzQ2xhc3MoJ2NhbGVuZGFyLWJsb2NrX2hpZGUnKSl7XHJcbiAgICAgIGJsb2NrX2NhbGVuZGFyLnJlbW92ZUNsYXNzKCdjYWxlbmRhci1ibG9ja19oaWRlJykuYWRkQ2xhc3MoJ2NhbGVuZGFyLWJsb2NrX29wZW4nKTtcclxuICAgICAgJCh0aGlzKS5hZGRDbGFzcygnZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duX2l0ZW1zLXNob3cnKTtcclxuICAgIH1lbHNle1xyXG4gICAgICBibG9ja19jYWxlbmRhci5hZGRDbGFzcygnY2FsZW5kYXItYmxvY2tfaGlkZScpLnJlbW92ZUNsYXNzKCdjYWxlbmRhci1ibG9ja19vcGVuJyk7XHJcbiAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19kcm9wZG93bl9pdGVtcy1zaG93Jyk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcblxyXG4gICQoJy5waWdub3NlLWNhbGVuZGFyLWJ1dHRvbi1jYW5jZWwnKS5vbignY2xpY2snLCBoYW5kbGVDYWxlbmRhckNsZWFuQ2xpY2spO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVDYWxlbmRhckNsZWFuQ2xpY2soZSl7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZiAoJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tZGF0ZXMnKS5sZW5ndGggIT0gMCl7XHJcbiAgICAgICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWRhdGVzJykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bicpWzBdLmlubmVyVGV4dCA9ICfQlNCULtCc0Jwu0JPQk9CT0JMnO1xyXG4gICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKVsxXS5pbm5lclRleHQgPSAn0JTQlC7QnNCcLtCT0JPQk9CTJztcclxuICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tZGF0ZXMnKS5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duOmZpcnN0JykudHJpZ2dlcignY2xpY2snKTtcclxuICAgIH1lbHNle1xyXG4gICAgICBpZiAoJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKS5sZW5ndGggIT0gMCl7XHJcbiAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKS5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duJykuaHRtbCgn0JLRi9Cx0LXRgNC40YLQtSDQtNC40LDQv9Cw0LfQvtC9INC00LDRgi4uLicpO1xyXG4gICAgICAgICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrJykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bicpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljaycsIGNsb3NlQ2FsZW5kYXIpO1xyXG5cclxuICBmdW5jdGlvbiBjbG9zZUNhbGVuZGFyKGUpe1xyXG4gICAgY29uc3QgdGhpc0NsaWNrID0gJChlLnRhcmdldCk7XHJcbiAgICBjb25zdCBlbERyb3Bkb3duID0gdGhpc0NsaWNrLmhhc0NsYXNzKCdkcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKSA9PSB0cnVlO1xyXG4gICAgY29uc3Qgb3BlbiA9ICQoJy5jYWxlbmRhci1ibG9jaycpLmhhc0NsYXNzKCdjYWxlbmRhci1ibG9ja19vcGVuJyk7XHJcbiAgICBcclxuICAgIGlmICghZWxEcm9wZG93biAmJiBvcGVuKXtcclxuICAgICAgY29uc3QgaXRDYWxlbmRhciA9ICgodGhpc0NsaWNrLmNsb3Nlc3QoJy5jYWxlbmRhci1ibG9ja19vcGVuJykubGVuZ3RoICE9IDApIHx8ICh0aGlzQ2xpY2suaGFzQ2xhc3MoJ2NhbGVuZGFyLWJsb2NrX29wZW4nKSkpO1xyXG5cclxuICAgICAgaWYgKCFpdENhbGVuZGFyKXsgICAgICBcclxuICAgICAgICBpZiAoJCgnLmNhbGVuZGFyLWJsb2NrX29wZW4nKS5jbG9zZXN0KCcuZHJvcGRvd24tZGF0ZXMnKS5sZW5ndGggIT0gMCl7XHJcbiAgICAgICAgICAkKCcuY2FsZW5kYXItYmxvY2tfb3BlbicpLmNsb3Nlc3QoJy5kcm9wZG93bi1kYXRlcycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd246Zmlyc3QnKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJCgnLmNhbGVuZGFyLWJsb2NrX29wZW4nKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKS5sZW5ndGggIT0gMCl7XHJcbiAgICAgICAgICAkKCcuY2FsZW5kYXItYmxvY2tfb3BlbicpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9jaycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSAgICBcclxuICB9XHJcblxyXG59KTsiLCIkKGZ1bmN0aW9uICgpIHtcclxuICAkKCcuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2NrJykub24oJ2NsaWNrJywgaGFuZGxlQ2hlY2tib3hsaXN0Q2xpY2spO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVDaGVja2JveGxpc3RDbGljaygpIHtcclxuICAgIHZhciBibG9ja19saXN0ID0gJCh0aGlzKS5jbG9zZXN0KCcuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlJykuZmluZCgnLmNoZWNrYm94LWxpc3QnKSxcclxuICAgICAgZXhwZW5kID0gJCh0aGlzKS5jbG9zZXN0KCcuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlJykuZmluZCgnLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kJyk7XHJcblxyXG4gICAgaWYgKGJsb2NrX2xpc3QuaGFzQ2xhc3MoJ2NoZWNrYm94LWxpc3RfaGlkZScpKSB7XHJcbiAgICAgIGJsb2NrX2xpc3QucmVtb3ZlQ2xhc3MoJ2NoZWNrYm94LWxpc3RfaGlkZScpO1xyXG4gICAgICBleHBlbmQuYWRkQ2xhc3MoJ2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW4nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJsb2NrX2xpc3QuYWRkQ2xhc3MoJ2NoZWNrYm94LWxpc3RfaGlkZScpO1xyXG4gICAgICBleHBlbmQucmVtb3ZlQ2xhc3MoJ2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW4nKTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG4iLCJpbXBvcnQgKiBhcyAkIGZyb20gJ2pxdWVyeSc7XHJcbmRlY2xhcmUgbGV0IGpRdWVyeTogYW55O1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgJCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bicpLm9uKCdjbGljaycsIGhhbmRsZURyb3B3b3duQ2xpY2spO1xyXG5cclxuICAkKCcuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMnKS5vbignY2xpY2snLCBoYW5kbGVEcm9wZG93bk1pbnVzQ2xpY2spO1xyXG4gICQoJy5kcm9wZG93bi1ibG9ja19faW5jLXF0eS1wbHVzJykub24oJ2NsaWNrJywgaGFuZGxlRHJvcGRvd25QbHVzQ2xpY2spO1xyXG5cclxuICAkKCcuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmtfb2snKS5vbignY2xpY2snLCBoYW5kbGVEcm9wZG93bk9rQ2xpY2spO1xyXG4gICQoJy5kcm9wZG93bi1ibG9ja19fYnRucyAubGlua19jbGVhbicpLm9uKCdjbGljaycsIGhhbmRsZURyb3Bkb3duQ2xlYW5DbGljayk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURyb3B3b3duQ2xpY2soKSB7XHJcbiAgICB2YXIgYmxvY2tfbGlzdCA9ICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrJykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcycpO1xyXG5cclxuICAgIGlmIChibG9ja19saXN0Lmhhc0NsYXNzKCdkcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXNfaGlkZScpKSB7XHJcbiAgICAgIGJsb2NrX2xpc3QucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtc19oaWRlJyk7XHJcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19kcm9wZG93bl9pdGVtcy1zaG93Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBibG9ja19saXN0LmFkZENsYXNzKCdkcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXNfaGlkZScpO1xyXG4gICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdkcm9wZG93bi1ibG9ja19fZHJvcGRvd25faXRlbXMtc2hvdycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlRHJvcGRvd25NaW51c0NsaWNrKCkge1xyXG4gICAgbGV0IHF0eUVsZW06IGFueSxcclxuICAgICAgcXR5OiBudW1iZXIgPSAwLFxyXG4gICAgICBuZXdRdHk6IG51bWJlciA9IDAsXHJcbiAgICAgIG1pbjogbnVtYmVyID0gMDtcclxuXHJcbiAgICBxdHlFbGVtID0gJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eScpLmZpbmQoJ3NwYW4nKTtcclxuICAgIHF0eSA9IHBhcnNlSW50KHF0eUVsZW0uaHRtbCgpKTtcclxuXHJcbiAgICBpZiAocXR5ID4gbWluKSB7XHJcbiAgICAgIG5ld1F0eSA9IHF0eSAtIDE7XHJcbiAgICAgIHF0eUVsZW0uaHRtbChuZXdRdHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChxdHkgPT0gbWluICsgMSB8fCBxdHkgPT0gbWluKSB7XHJcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgICAgbGV0IHBsdXMgPSAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5JykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LXBsdXMnKTtcclxuICAgICAgaWYgKHBsdXMuaGFzQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKSkge1xyXG4gICAgICAgIHBsdXMucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dEluRHJvcGRvd24oJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVEcm9wZG93blBsdXNDbGljaygpIHtcclxuICAgIGxldCBxdHlFbGVtOiBhbnksXHJcbiAgICAgIHF0eTogbnVtYmVyID0gMCxcclxuICAgICAgbmV3UXR5OiBudW1iZXIgPSAwLFxyXG4gICAgICBtYXg6IG51bWJlciA9IDEwO1xyXG5cclxuICAgIHF0eUVsZW0gPSAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5JykuZmluZCgnc3BhbicpO1xyXG4gICAgcXR5ID0gcGFyc2VJbnQocXR5RWxlbS5odG1sKCkpO1xyXG5cclxuICAgIGlmIChxdHkgPCBtYXgpIHtcclxuICAgICAgbmV3UXR5ID0gcXR5ICsgMTtcclxuICAgICAgcXR5RWxlbS5odG1sKG5ld1F0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHF0eSA9PSBtYXggLSAxIHx8IHF0eSA9PSBtYXgpIHtcclxuICAgICAgJCh0aGlzKS5hZGRDbGFzcygnZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZScpO1xyXG4gICAgICBsZXQgbWludXMgPSAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5JykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzJyk7XHJcbiAgICAgIGlmIChtaW51cy5oYXNDbGFzcygnZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZScpKSB7XHJcbiAgICAgICAgbWludXMucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dEluRHJvcGRvd24oJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKSk7XHJcblxyXG4gICAgJCh0aGlzKVxyXG4gICAgICAuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcycpXHJcbiAgICAgIC5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmtfY2xlYW4nKVxyXG4gICAgICAuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XHJcbiAgICAkKHRoaXMpXHJcbiAgICAgIC5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zJylcclxuICAgICAgLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fYnRucycpXHJcbiAgICAgIC5yZW1vdmVDbGFzcygnZHJvcGRvd24tYmxvY2tfX2J0bnNfZmxleC1lbmQnKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURyb3Bkb3duT2tDbGljaygpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9jaycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKS5jbGljaygpO1xyXG5cclxuICAgIG91dHB1dEluRHJvcGRvd24oJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVEcm9wZG93bkNsZWFuQ2xpY2soKSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgbGV0IGl0ZW1zID0gJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zJyk7XHJcbiAgICBpdGVtcy5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eScpLmZpbmQoJ3NwYW4nKS5odG1sKCcwJyk7XHJcbiAgICBpdGVtcy5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMnKS5hZGRDbGFzcygnZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZScpO1xyXG4gICAgaXRlbXMuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LXBsdXMnKS5yZW1vdmVDbGFzcygnZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZScpO1xyXG5cclxuICAgIG91dHB1dEluRHJvcGRvd24oJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKSk7XHJcblxyXG4gICAgJCh0aGlzKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2tfX2J0bnMnKS5hZGRDbGFzcygnZHJvcGRvd24tYmxvY2tfX2J0bnNfZmxleC1lbmQnKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG91dHB1dEluRHJvcGRvd24oZHJvcGRvd246IGFueSkge1xyXG4gICAgbGV0IHN0cjogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgaWYgKGRyb3Bkb3duLmF0dHIoJ25hbWUnKSA9PSAnZ3Vlc3RzJykge1xyXG4gICAgICBzdHIgPSBjb3VudFF0eUd1ZXN0cyhkcm9wZG93bik7XHJcbiAgICB9XHJcbiAgICBpZiAoZHJvcGRvd24uYXR0cignbmFtZScpID09ICdyb29tJykge1xyXG4gICAgICBzdHIgPSBjb3VudFF0eUNvbWZvcnRSb29tKGRyb3Bkb3duKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RyLmxlbmd0aCA+IDE5KSB7XHJcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgMjApICsgJy4uLic7XHJcbiAgICB9XHJcbiAgICBkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duJykuaHRtbChzdHIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY291bnRRdHlHdWVzdHMoZHJvcGRvd246IGFueSk6IHN0cmluZyB7XHJcbiAgICBsZXQgbGluZXMgPSBkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUnKSxcclxuICAgICAgc3RyOiBzdHJpbmcgPSAnJyxcclxuICAgICAgc3VtR3Vlc3RzOiBudW1iZXIgPSAwLFxyXG4gICAgICBzdW1CYWJ5OiBudW1iZXIgPSAwLFxyXG4gICAgICBxdHk6IEhUTUxFbGVtZW50LFxyXG4gICAgICBpdGVtOiBIVE1MRWxlbWVudCxcclxuICAgICAgdGV4dEd1ZXN0OiBzdHJpbmcsXHJcbiAgICAgIHRleHRCYWJ5OiBzdHJpbmc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBxdHkgPSBsaW5lc1tpXS5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSBzcGFuJyk7XHJcbiAgICAgIGl0ZW0gPSBsaW5lc1tpXS5xdWVyeVNlbGVjdG9yKCdoMycpO1xyXG5cclxuICAgICAgaWYgKHBhcnNlSW50KHF0eS5pbm5lckhUTUwpID4gMCAmJiBpdGVtLmlubmVySFRNTCAhPSAn0LzQu9Cw0LTQtdC90YbRiycpIHtcclxuICAgICAgICBzdW1HdWVzdHMgPSBzdW1HdWVzdHMgKyBwYXJzZUludChxdHkuaW5uZXJIVE1MKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocGFyc2VJbnQocXR5LmlubmVySFRNTCkgPiAwICYmIGl0ZW0uaW5uZXJIVE1MID09ICfQvNC70LDQtNC10L3RhtGLJykge1xyXG4gICAgICAgIHN1bUJhYnkgPSBzdW1CYWJ5ICsgcGFyc2VJbnQocXR5LmlubmVySFRNTCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0ZXh0R3Vlc3QgPSBkZWNsZW5zaW9uV29yZHMoJ9Cz0L7RgdGC0Y8nLCBzdW1HdWVzdHMpO1xyXG4gICAgdGV4dEJhYnkgPSBkZWNsZW5zaW9uV29yZHMoJ9C80LvQsNC00LXQvdGG0LAnLCBzdW1CYWJ5KTtcclxuXHJcbiAgICBpZiAoc3VtR3Vlc3RzID09IDApIHtcclxuICAgICAgc3RyID0gJ9Ch0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuSc7XHJcbiAgICB9XHJcbiAgICBpZiAoc3VtR3Vlc3RzICE9IDAgJiYgc3VtQmFieSAhPSAwKSB7XHJcbiAgICAgIHN0ciA9IGAke3N1bUd1ZXN0c30gJHt0ZXh0R3Vlc3R9LCAke3N1bUJhYnl9ICR7dGV4dEJhYnl9YDtcclxuICAgIH1cclxuICAgIGlmIChzdW1HdWVzdHMgIT0gMCAmJiBzdW1CYWJ5ID09IDApIHtcclxuICAgICAgc3RyID0gYCR7c3VtR3Vlc3RzfSAke3RleHRHdWVzdH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb3VudFF0eUNvbWZvcnRSb29tKGRyb3Bkb3duOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgbGV0IGxpbmVzID0gZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lJyksXHJcbiAgICAgIHN0cjogc3RyaW5nID0gJycsXHJcbiAgICAgIHF0eTogSFRNTEVsZW1lbnQsXHJcbiAgICAgIGl0ZW06IEhUTUxFbGVtZW50LFxyXG4gICAgICB0ZXh0SXRlbTogc3RyaW5nO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgcXR5ID0gbGluZXNbaV0ucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgc3BhbicpO1xyXG4gICAgICBpdGVtID0gbGluZXNbaV0ucXVlcnlTZWxlY3RvcignaDMnKTtcclxuICAgICAgdGV4dEl0ZW0gPSBkZWNsZW5zaW9uV29yZHMoaXRlbS5pbm5lckhUTUwsIHBhcnNlSW50KHF0eS5pbm5lckhUTUwpKTtcclxuXHJcbiAgICAgIGlmIChwYXJzZUludChxdHkuaW5uZXJIVE1MKSA+IDApIHtcclxuICAgICAgICBzdHIgPSBzdHIgKyBxdHkuaW5uZXJIVE1MICsgJyAnICsgdGV4dEl0ZW0gKyAnLCAnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RyID0gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gMik7XHJcbiAgICBpZiAoc3RyID09ICcnKSB7XHJcbiAgICAgIHN0ciA9ICfQktGL0LHQtdGA0LjRgtC1INGD0LTQvtCx0YHRgtCy0LAnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWNsZW5zaW9uV29yZHMoaXRlbTogYW55LCBxdHk6IGFueSkge1xyXG4gICAgbGV0IHdvcmRzOiBhbnkgPSB7XHJcbiAgICAgICAgYmVkcm9vbTogWyfRgdC/0LDQu9GM0L3RjycsICfRgdC/0LDQu9GM0L3QuCcsICfRgdC/0LDQu9C10L0nXSxcclxuICAgICAgICBiZWQ6IFsn0LrRgNC+0LLQsNGC0YwnLCAn0LrRgNC+0LLQsNGC0LgnLCAn0LrRgNC+0LLQsNGC0LXQuSddLFxyXG4gICAgICAgIGJhdGhyb29tOiBbJ9Cy0LDQvdC90LDRjyDQutC+0LzQvdCw0YLQsCcsICfQstCw0L3QvdGL0LUg0LrQvtC80L3QsNGC0YsnLCAn0LLQsNC90L3Ri9GFINC60L7QvNC90LDRgiddLFxyXG4gICAgICAgIGd1ZXN0OiBbJ9Cz0L7RgdGC0YwnLCAn0LPQvtGB0YLRjycsICfQs9C+0YHRgtC10LknXSxcclxuICAgICAgICBiYWJ5OiBbJ9C80LvQsNC00LXQvdC10YYnLCAn0LzQu9Cw0LTQtdC90YbQsCcsICfQvNC70LDQtNC10L3RhtC10LInXSxcclxuICAgICAgfSxcclxuICAgICAgd29yZDogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIHdvcmRzKSB7XHJcbiAgICAgIGlmIChpdGVtLnRvTG93ZXJDYXNlKCkgPT0gd29yZHNba2V5XVsxXS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgaWYgKHF0eSA8PSAyMCAmJiBxdHkgPj0gNSkge1xyXG4gICAgICAgICAgd29yZCA9IHdvcmRzW2tleV1bMl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgcXR5ICUgMTAgPT0gMCB8fFxyXG4gICAgICAgICAgICBxdHkgJSAxMCA9PSA1IHx8XHJcbiAgICAgICAgICAgIHF0eSAlIDEwID09IDYgfHxcclxuICAgICAgICAgICAgcXR5ICUgMTAgPT0gNyB8fFxyXG4gICAgICAgICAgICBxdHkgJSAxMCA9PSA4IHx8XHJcbiAgICAgICAgICAgIHF0eSAlIDEwID09IDlcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB3b3JkID0gd29yZHNba2V5XVsyXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChxdHkgJSAxMCA9PSAxKSB7XHJcbiAgICAgICAgICAgIHdvcmQgPSB3b3Jkc1trZXldWzBdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHF0eSAlIDEwID09IDIgfHwgcXR5ICUgMTAgPT0gMyB8fCBxdHkgJSAxMCA9PSA0KSB7XHJcbiAgICAgICAgICAgIHdvcmQgPSB3b3Jkc1trZXldWzFdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHdvcmQ7XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0ICdjbGVhdmUuanMnO1xyXG5cclxubmV3IENsZWF2ZSgnLmlucHV0LXRleHRfX2lucHV0X2RhdGUnLCB7XHJcbiAgZGF0ZTogdHJ1ZSxcclxuICBkZWxpbWl0ZXI6ICcuJyxcclxuICBkYXRlUGF0dGVybjogWydkJywgJ20nLCAnWSddLFxyXG59KTtcclxuIiwiJChmdW5jdGlvbiAoKSB7XHJcbiAgJCgnLmxpa2UnKS5vbignY2xpY2snLCBoYW5kbGVMaWtlQ2xpY2spO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVMaWtlQ2xpY2soKSB7XHJcbiAgICB2YXIgc3VtID0gcGFyc2VJbnQoJCh0aGlzKS5maW5kKCcubGlrZV9fc3VtJykuaHRtbCgpKTtcclxuXHJcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnbGlrZV9saWtlZCcpKSB7XHJcbiAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ2xpa2VfbGlrZWQnKTtcclxuICAgICAgJCh0aGlzKS5maW5kKCcubGlrZV9faWNvJykucmVtb3ZlQ2xhc3MoJ2xpa2VfX2ljb19saWtlZCcpO1xyXG4gICAgICAkKHRoaXMpLmZpbmQoJy5saWtlX19zdW0nKS5yZW1vdmVDbGFzcygnbGlrZV9fc3VtX2xpa2VkJyk7XHJcbiAgICAgICQodGhpcylcclxuICAgICAgICAuZmluZCgnLmxpa2VfX3N1bScpXHJcbiAgICAgICAgLmh0bWwoc3VtIC0gMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKHRoaXMpLmFkZENsYXNzKCdsaWtlX2xpa2VkJyk7XHJcbiAgICAgICQodGhpcykuZmluZCgnLmxpa2VfX2ljbycpLmFkZENsYXNzKCdsaWtlX19pY29fbGlrZWQnKTtcclxuICAgICAgJCh0aGlzKS5maW5kKCcubGlrZV9fc3VtJykuYWRkQ2xhc3MoJ2xpa2VfX3N1bV9saWtlZCcpO1xyXG4gICAgICAkKHRoaXMpXHJcbiAgICAgICAgLmZpbmQoJy5saWtlX19zdW0nKVxyXG4gICAgICAgIC5odG1sKHN1bSArIDEpO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbiIsIiQoZnVuY3Rpb24gKCkge1xyXG4gICQoJy5yYXRlLWJ0bl9fc3RhcicpLm9uKCdjbGljaycsIGhhbmRsZVJhdGVidG5DbGljayk7XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZVJhdGVidG5DbGljaygpIHtcclxuICAgICQodGhpcykuY2xvc2VzdCgnLnJhdGUtYnRuJykuZmluZCgnLnJhdGUtYnRuX19zdGFyJykucmVtb3ZlQ2xhc3MoJ3JhdGUtYnRuX19zdGFyX2FjdGl2ZScpO1xyXG5cclxuICAgIHZhciBudW0gPSBwYXJzZUludCgkKHRoaXMpLmF0dHIoJ2lkJykpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IG51bTsgaSsrKSB7XHJcbiAgICAgICQodGhpcylcclxuICAgICAgICAuY2xvc2VzdCgnLnJhdGUtYnRuJylcclxuICAgICAgICAuZmluZCgnIycgKyBpKVxyXG4gICAgICAgIC5hZGRDbGFzcygncmF0ZS1idG5fX3N0YXJfYWN0aXZlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIiwiJChmdW5jdGlvbiAoKSB7XHJcbiAgJCgnLnRvZ2dsZS1ibG9jaycpLm9uKCdjbGljaycsIGhhbmRsZVRvZ2dsZUNsaWNrKTtcclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlVG9nZ2xlQ2xpY2soKSB7XHJcbiAgICBsZXQgdG9nZ2xlID0gJCh0aGlzKS5maW5kKCcudG9nZ2xlLWJsb2NrX190b2dnbGUnKSxcclxuICAgICAgZmxhZyA9IDA7XHJcblxyXG4gICAgaWYgKHRvZ2dsZS5oYXNDbGFzcygndG9nZ2xlLWJsb2NrX190b2dnbGVfb2ZmJykgJiYgZmxhZyA9PSAwKSB7XHJcbiAgICAgIHRvZ2dsZS5yZW1vdmVDbGFzcygndG9nZ2xlLWJsb2NrX190b2dnbGVfb2ZmJyk7XHJcbiAgICAgIHRvZ2dsZS5hZGRDbGFzcygndG9nZ2xlLWJsb2NrX190b2dnbGVfb24nKTtcclxuICAgICAgZmxhZysrO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvZ2dsZS5oYXNDbGFzcygndG9nZ2xlLWJsb2NrX190b2dnbGVfb24nKSAmJiBmbGFnID09IDApIHtcclxuICAgICAgdG9nZ2xlLnJlbW92ZUNsYXNzKCd0b2dnbGUtYmxvY2tfX3RvZ2dsZV9vbicpO1xyXG4gICAgICB0b2dnbGUuYWRkQ2xhc3MoJ3RvZ2dsZS1ibG9ja19fdG9nZ2xlX29mZicpO1xyXG4gICAgICBmbGFnKys7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyJztcclxuXHJcbmludGVyZmFjZSBDb29yZHMge1xyXG4gIHRvcDogbnVtYmVyO1xyXG4gIGxlZnQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIge1xyXG4gIG1vZGVsOiBhbnk7XHJcbiAgdmlldzogYW55O1xyXG4gIHRoaXNTbGlkZXI6IGFueTtcclxuICBpZEVsZW1lbnQ6IHN0cmluZztcclxuICBtaW46IG51bWJlcjtcclxuICBtYXg6IG51bWJlcjtcclxuICBtaW5TdGFydDogbnVtYmVyO1xyXG4gIG1heFN0YXJ0OiBudW1iZXI7XHJcbiAgc3RlcDogbnVtYmVyO1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBvcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gIHNjYWxlOiBzdHJpbmc7XHJcbiAgc2NhbGVTdGVwOiBudW1iZXI7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuICBzZXR0aW5nczogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb246IE9wdGlvbnMsIG1vZGVsOiBhbnksIHZpZXc6IGFueSkge1xyXG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMudGhpc1NsaWRlciA9IG9wdGlvbi5lbGVtZW50O1xyXG4gICAgdGhpcy5pZEVsZW1lbnQgPSBvcHRpb24uaWRFbGVtZW50O1xyXG4gICAgdGhpcy5taW4gPSBvcHRpb24ubWluO1xyXG4gICAgdGhpcy5tYXggPSBvcHRpb24ubWF4O1xyXG4gICAgdGhpcy5taW5TdGFydCA9IG9wdGlvbi5taW5TdGFydDtcclxuICAgIHRoaXMubWF4U3RhcnQgPSBvcHRpb24ubWF4U3RhcnQ7XHJcbiAgICB0aGlzLnN0ZXAgPSBvcHRpb24uc3RlcDtcclxuICAgIHRoaXMudHlwZSA9IG9wdGlvbi50eXBlO1xyXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IG9wdGlvbi5vcmllbnRhdGlvbjtcclxuICAgIHRoaXMuc2NhbGUgPSBvcHRpb24uc2NhbGU7XHJcbiAgICB0aGlzLnNjYWxlU3RlcCA9IG9wdGlvbi5zY2FsZVN0ZXA7XHJcbiAgICB0aGlzLnZhbHVlID0gb3B0aW9uLnZhbHVlO1xyXG4gICAgdGhpcy5zZXR0aW5ncyA9IG9wdGlvbi5zZXR0aW5ncztcclxuICB9XHJcblxyXG4gIGRlZmluZU9yaWVudGF0aW9uKGRhdGFTbGlkZXJPcmllbnRhdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChkYXRhU2xpZGVyT3JpZW50YXRpb24gPT0gJ2hvcml6b250YWwnKSB7XHJcbiAgICAgIHJldHVybiAneCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJ3knO1xyXG4gIH1cclxuXHJcbiAgbW92ZUF0KHJhbmdlOiBhbnksIGU6IGFueSwgc2lkZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ21vdmluZy1zbGlkZXInKTtcclxuXHJcbiAgICBsZXQgc3RhcnRQb3M6IG51bWJlciA9IHBhcnNlSW50KHJhbmdlLnN0eWxlLmxlZnQpLFxyXG4gICAgICB3aWR0aFJhbmdlOiBudW1iZXIgPSB0aGlzLm1vZGVsLmdldFdpZHRoUmFuZ2UoKTtcclxuICAgIHN3aXRjaCAoXHJcbiAgICAgIHNpZGUgLy/Rh9GC0L7QsdGLINGB0LLQtdGA0YXRgyDQsdGL0Lsg0L/QvtC70LfRg9C90L7Quiwg0LrQvtGC0L7RgNGL0Lkg0L/QtdGA0LXQvNC10YnQsNC70Lgg0L/QvtGB0LvQtdC00L3QuNC8ICjQtdGB0LvQuCDQtNGA0YPQsyDQvdCwINC00YDRg9Cz0LAg0L3QsNC10LTRg9GCKVxyXG4gICAgKSB7XHJcbiAgICAgIGNhc2UgJ2xlZnQnOiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUuemluZGV4ID0gMTU7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZVJpZ2h0LnN0eWxlLnppbmRleCA9IDEwO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3JpZ2h0Jzoge1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2VSaWdodC5zdHlsZS56aW5kZXggPSAxNTtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS56aW5kZXggPSAxMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCB0aGlzQ2xpY2s6IGFueSA9IHRoaXMudGhpc1NsaWRlcixcclxuICAgICAgY29udHIgPSB0aGlzO1xyXG5cclxuICAgIHRoaXNDbGljay5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgICAgbGV0IHBvczogbnVtYmVyLCB0ZW1wUG9zOiBudW1iZXIsIG1hc1NjYWxlOiBudW1iZXJbXTtcclxuICAgICAgICBzd2l0Y2ggKGNvbnRyLmRlZmluZU9yaWVudGF0aW9uKGNvbnRyLm9yaWVudGF0aW9uKSkge1xyXG4gICAgICAgICAgY2FzZSAneCc6IHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyLnN0ZXAgPT0gMSkge1xyXG4gICAgICAgICAgICAgIHBvcyA9IGUucGFnZVggLSBwYXJzZUludChjb250ci5tb2RlbC5zbGlkZXIub2Zmc2V0TGVmdCk7XHJcbiAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2Uoc2lkZSwgc3RhcnRQb3MsIHBvcywgd2lkdGhSYW5nZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgbWFzU2NhbGUgPSBjb250ci5tYXNTdGVwc0Zvck1vdmluZygpO1xyXG4gICAgICAgICAgICAgIHRlbXBQb3MgPSBlLnBhZ2VYIC0gcGFyc2VJbnQoY29udHIubW9kZWwuc2xpZGVyLm9mZnNldExlZnQpO1xyXG4gICAgICAgICAgICAgIGlmIChtYXNTY2FsZS5pbmRleE9mKHRlbXBQb3MpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0ZW1wUG9zO1xyXG4gICAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2Uoc2lkZSwgc3RhcnRQb3MsIHBvcywgd2lkdGhSYW5nZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHN0YXJ0UG9zO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhc2UgJ3knOiB7XHJcbiAgICAgICAgICAgIGxldCBjb29yZHM6IENvb3JkcyA9IGNvbnRyLmdldENvb3Jkcyhjb250ci5tb2RlbC5zbGlkZXIpO1xyXG4gICAgICAgICAgICBpZiAoY29udHIuc3RlcCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgcG9zID0gZS5wYWdlWSAtIGNvb3Jkcy50b3A7XHJcbiAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2Uoc2lkZSwgc3RhcnRQb3MsIHBvcywgd2lkdGhSYW5nZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgbWFzU2NhbGUgPSBjb250ci5tYXNTdGVwc0Zvck1vdmluZygpO1xyXG4gICAgICAgICAgICAgIHRlbXBQb3MgPSBlLnBhZ2VZIC0gY29vcmRzLnRvcDtcclxuICAgICAgICAgICAgICBpZiAobWFzU2NhbGUuaW5kZXhPZih0ZW1wUG9zKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcG9zID0gdGVtcFBvcztcclxuICAgICAgICAgICAgICAgIGNvbnRyLm1vdmluZ1JhbmdlKHNpZGUsIHN0YXJ0UG9zLCBwb3MsIHdpZHRoUmFuZ2UpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSBzdGFydFBvcztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuICAgICAgdGhpc0NsaWNrLm9ubW91c2Vtb3ZlID0gbnVsbDtcclxuICAgICAgdGhpc0NsaWNrLm9ubW91c2V1cCA9IG51bGw7XHJcbiAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gbnVsbDtcclxuICAgICAgZG9jdW1lbnQub25tb3VzZXVwID0gbnVsbDtcclxuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdtb3Zpbmctc2xpZGVyJyk7XHJcbiAgICB9O1xyXG4gIH1cclxuICBnZXRDb29yZHMoZWxlbTogSFRNTEVsZW1lbnQpOiBDb29yZHMge1xyXG4gICAgLy8gaHR0cHM6Ly9sZWFybi5qYXZhc2NyaXB0LnJ1L2Nvb3JkaW5hdGVzLWRvY3VtZW50XHJcbiAgICBsZXQgYm94OiBDb29yZHMgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG9wOiBib3gudG9wICsgcGFnZVlPZmZzZXQsXHJcbiAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgcGFnZVhPZmZzZXQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgbW92aW5nUmFuZ2Uoc2lkZTogc3RyaW5nLCBzdGFydFBvczogbnVtYmVyLCBwb3M6IG51bWJlciwgd2lkdGhSYW5nZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBsZXQgcHJpY2U6IG51bWJlcixcclxuICAgICAgc3RlcDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBpZiAocG9zIDwgMCkge1xyXG4gICAgICBwb3MgPSAwO1xyXG4gICAgfVxyXG4gICAgaWYgKHBvcyA+IHRoaXMubW9kZWwuZ2V0V2lkdGgoKSkge1xyXG4gICAgICBwb3MgPSB0aGlzLm1vZGVsLmdldFdpZHRoKCk7XHJcbiAgICB9XHJcbiAgICBpZiAocG9zID49IDAgJiYgcG9zIDw9IHRoaXMubW9kZWwuZ2V0V2lkdGgoKSkge1xyXG4gICAgICBpZiAoc2lkZSA9PSAnbGVmdCcpIHtcclxuICAgICAgICBpZiAodGhpcy5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCkgPj0gcG9zICYmIHRoaXMudHlwZSAhPSAnZnJvbTB0bycpIHtcclxuICAgICAgICAgIHByaWNlID0gY2FsY1ZhbHVlKHBvcywgdGhpcyk7XHJcbiAgICAgICAgICBzdGVwID0gc3RhcnRQb3MgLSBwb3M7IC8v0LTQu9C40L3QsCDQv9C10YDQtdC80LXRidC10L3QuNGPINC70LXQstC+0LPQviDRg9C60LDQt9Cw0YLQtdC70Y9cclxuICAgICAgICAgIHRoaXMubW9kZWwucmFuZ2VMZWZ0LnN0eWxlLmxlZnQgPSBwb3MgKyAncHgnOyAvL9C/0L7Qt9C40YbQuNGPINGD0LrQsNC30LDRgtC10LvQtdC5XHJcbiAgICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIHBvcyArICdweCwgMHB4KSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHByaWNlID0gdGhpcy5tYXhTdGFydDtcclxuICAgICAgICAgIHN0ZXAgPSBzdGFydFBvcyAtIHRoaXMubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpO1xyXG4gICAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUubGVmdCA9IHRoaXMubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpICsgJ3B4JztcclxuICAgICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCkgKyAncHgsIDBweCknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kcmF3VmFsdWVNaW4ocHJpY2UpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzID09ICdvbicpIHtcclxuICAgICAgICAgIHRoaXMuY2hhbmdlQ29uZmlnSW5wdXRNaW4ocHJpY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLndyaXRlRGF0YVNsaWRlck1pbihwcmljZSk7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS53aWR0aCA9IHdpZHRoUmFuZ2UgKyBzdGVwICsgJ3B4JztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNpZGUgPT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpIDw9IHBvcykge1xyXG4gICAgICAgICAgcHJpY2UgPSBjYWxjVmFsdWUocG9zLCB0aGlzKTtcclxuICAgICAgICAgIHN0ZXAgPSBwb3MgLSBzdGFydFBvcztcclxuICAgICAgICAgIHRoaXMubW9kZWwucmFuZ2VSaWdodC5zdHlsZS5sZWZ0ID0gcG9zICsgJ3B4JztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcHJpY2UgPSB0aGlzLm1pblN0YXJ0O1xyXG4gICAgICAgICAgc3RlcCA9IHRoaXMubW9kZWwuZ2V0UG9zUmFuZ2VMZWZ0KCkgLSBzdGFydFBvcztcclxuICAgICAgICAgIHRoaXMubW9kZWwucmFuZ2VSaWdodC5zdHlsZS5sZWZ0ID0gdGhpcy5tb2RlbC5nZXRQb3NSYW5nZUxlZnQoKSArICdweCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRyYXdWYWx1ZU1heChwcmljZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MgPT0gJ29uJykge1xyXG4gICAgICAgICAgdGhpcy5jaGFuZ2VDb25maWdJbnB1dE1heChwcmljZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud3JpdGVEYXRhU2xpZGVyTWF4KHByaWNlKTtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLndpZHRoID0gd2lkdGhSYW5nZSArIHN0ZXAgKyAncHgnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjYWxjVmFsdWUocG9zOiBudW1iZXIsIGNvbnJ0VGhpczogYW55KTogbnVtYmVyIHtcclxuICAgICAgbGV0IHBlcmNlbnQ6IG51bWJlciA9IHBvcyAvIGNvbnJ0VGhpcy5tb2RlbC5nZXRXaWR0aCgpLFxyXG4gICAgICAgIHByaWNlOiBudW1iZXIgPSAoKGNvbnJ0VGhpcy5tYXggLSBjb25ydFRoaXMubWluKSAqIHBlcmNlbnQgKyBjb25ydFRoaXMubWluKS50b0ZpeGVkKCk7XHJcbiAgICAgIHJldHVybiBwcmljZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRyYXdWYWx1ZU1pbih2YWw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5tb2RlbC5lbGVtVmFsdWVNaW4uaW5uZXJIVE1MID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdydS1SVScpLmZvcm1hdCh2YWwpO1xyXG4gIH1cclxuICBkcmF3VmFsdWVNYXgodmFsOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMubW9kZWwuZWxlbVZhbHVlTWF4LmlubmVySFRNTCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgncnUtUlUnKS5mb3JtYXQodmFsKTtcclxuICB9XHJcblxyXG4gIHdyaXRlRGF0YVNsaWRlck1pbih2YWw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5taW5TdGFydCA9IHZhbDtcclxuICAgIHRoaXMudmlldy5taW5TdGFydCA9IHZhbDtcclxuICB9XHJcbiAgd3JpdGVEYXRhU2xpZGVyTWF4KHZhbDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLm1heFN0YXJ0ID0gdmFsO1xyXG4gICAgdGhpcy52aWV3Lm1heFN0YXJ0ID0gdmFsO1xyXG4gIH1cclxuXHJcbiAgY2hhbmdlQ29uZmlnSW5wdXRNaW4odmFsOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh2YWwgPCB0aGlzLm1pbikge1xyXG4gICAgICB2YWwgPSB0aGlzLm1pbjtcclxuICAgIH1cclxuICAgIHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgLnNsaWRlci1jb25maWcgLnNsaWRlci1jb25maWdfX2Jsb2NrIC5pbnB1dC10ZXh0ICNpbnB1dFRleHRtaW5TdGFydGAgKyB0aGlzLmlkRWxlbWVudC5zdWJzdHIoLTEpXHJcbiAgICApLnZhbHVlID0gdmFsO1xyXG4gIH1cclxuICBjaGFuZ2VDb25maWdJbnB1dE1heCh2YWw6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHZhbCA+IHRoaXMubWF4KSB7XHJcbiAgICAgIHZhbCA9IHRoaXMubWF4O1xyXG4gICAgfVxyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAuc2xpZGVyLWNvbmZpZyAuc2xpZGVyLWNvbmZpZ19fYmxvY2sgLmlucHV0LXRleHQgI2lucHV0VGV4dG1heFN0YXJ0YCArIHRoaXMuaWRFbGVtZW50LnN1YnN0cigtMSlcclxuICAgICkudmFsdWUgPSB2YWw7XHJcbiAgfVxyXG5cclxuICBtb3ZlUmFuZ2VPbmNsaWNrU2xpZGVyKCk6IHZvaWQge1xyXG4gICAgbGV0IHRoaXNDbGlja1NsaWRlcjogYW55ID0gdGhpcy5tb2RlbC5zbGlkZXIsXHJcbiAgICAgIHRoaXNDbGlja1JhbmdlOiBhbnkgPSB0aGlzLm1vZGVsLnJhbmdlLFxyXG4gICAgICBjb250cjogYW55ID0gdGhpcztcclxuXHJcbiAgICB0aGlzQ2xpY2tTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICBsZXQgcG9zOiBudW1iZXIsIHN0YXJ0UG9zOiBudW1iZXI7XHJcblxyXG4gICAgICBpZiAoZS50YXJnZXQgIT0gdGhpc0NsaWNrU2xpZGVyKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9IHRoaXNDbGlja1JhbmdlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKGNvbnRyLmRlZmluZU9yaWVudGF0aW9uKGNvbnRyLm9yaWVudGF0aW9uKSkge1xyXG4gICAgICAgIGNhc2UgJ3gnOiB7XHJcbiAgICAgICAgICBwb3MgPSBlLnBhZ2VYIC0gcGFyc2VJbnQoY29udHIubW9kZWwuc2xpZGVyLm9mZnNldExlZnQpO1xyXG4gICAgICAgICAgaWYgKGNvbnRyLnN0ZXAgIT0gMSkge1xyXG4gICAgICAgICAgICBwb3MgPSBjb250ci5kZWZpbmVQb3NTdGVwQ2xvc2VzdENsaWNrKHBvcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAneSc6IHtcclxuICAgICAgICAgIHBvcyA9IGUucGFnZVkgLSBjb250ci5nZXRDb29yZHMoY29udHIubW9kZWwuc2xpZGVyKS50b3A7XHJcbiAgICAgICAgICBpZiAoY29udHIuc3RlcCAhPSAxKSB7XHJcbiAgICAgICAgICAgIHBvcyA9IGNvbnRyLmRlZmluZVBvc1N0ZXBDbG9zZXN0Q2xpY2socG9zKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc3dpdGNoIChjb250ci50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnaW50ZXJ2YWwnOiB7XHJcbiAgICAgICAgICBsZXQgcG9zTDogbnVtYmVyID0gY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VMZWZ0KCksXHJcbiAgICAgICAgICAgIHBvc1I6IG51bWJlciA9IGNvbnRyLm1vZGVsLmdldFBvc1JhbmdlUmlnaHQoKTtcclxuXHJcbiAgICAgICAgICBpZiAoTWF0aC5hYnMocG9zTCAtIHBvcykgPCBNYXRoLmFicyhwb3NSIC0gcG9zKSkge1xyXG4gICAgICAgICAgICBzdGFydFBvcyA9IGNvbnRyLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpO1xyXG4gICAgICAgICAgICBjb250ci5tb3ZpbmdSYW5nZSgnbGVmdCcsIGNvbnRyLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpLCBwb3MsIGNvbnRyLm1vZGVsLmdldFdpZHRoUmFuZ2UoKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMocG9zTCAtIHBvcykgPT0gTWF0aC5hYnMocG9zUiAtIHBvcykgJiYgcG9zIDwgcG9zTCkge1xyXG4gICAgICAgICAgICAgIHN0YXJ0UG9zID0gY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VMZWZ0KCk7XHJcbiAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2UoJ2xlZnQnLCBjb250ci5tb2RlbC5nZXRQb3NSYW5nZUxlZnQoKSwgcG9zLCBjb250ci5tb2RlbC5nZXRXaWR0aFJhbmdlKCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHN0YXJ0UG9zID0gY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpO1xyXG4gICAgICAgICAgICAgIGNvbnRyLm1vdmluZ1JhbmdlKCdyaWdodCcsIGNvbnRyLm1vZGVsLmdldFBvc1JhbmdlUmlnaHQoKSwgcG9zLCBjb250ci5tb2RlbC5nZXRXaWR0aFJhbmdlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnZnJvbTB0byc6IHtcclxuICAgICAgICAgIHN0YXJ0UG9zID0gY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpO1xyXG4gICAgICAgICAgY29udHIubW92aW5nUmFuZ2UoJ3JpZ2h0JywgY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpLCBwb3MsIGNvbnRyLm1vZGVsLmdldFdpZHRoUmFuZ2UoKSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAnb25lJzoge1xyXG4gICAgICAgICAgc3RhcnRQb3MgPSBjb250ci5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCk7XHJcbiAgICAgICAgICBjb250ci5tb3ZpbmdSYW5nZSgncmlnaHQnLCBjb250ci5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCksIHBvcywgY29udHIubW9kZWwuZ2V0V2lkdGhSYW5nZSgpKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGRlZmluZVBvc1N0ZXBDbG9zZXN0Q2xpY2socG9zOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IGZpbmFsUG9zOiBudW1iZXIgPSAwLFxyXG4gICAgICBtYXNTY2FsZTogbnVtYmVyW10sXHJcbiAgICAgIGxlbjogbnVtYmVyID0gdGhpcy5tb2RlbC5nZXRXaWR0aCgpLFxyXG4gICAgICBsZW5MOiBudW1iZXIsXHJcbiAgICAgIGxlblI6IG51bWJlcjtcclxuXHJcbiAgICBtYXNTY2FsZSA9IHRoaXMubWFzU3RlcHNGb3JNb3ZpbmcoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc1NjYWxlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxlbkwgPSBNYXRoLmFicyhtYXNTY2FsZVtpXSAtIHBvcyk7XHJcbiAgICAgIGxlblIgPSBNYXRoLmFicyhtYXNTY2FsZVtpICsgMV0gLSBwb3MpO1xyXG5cclxuICAgICAgaWYgKGxlbkwgPCBsZW4pIHtcclxuICAgICAgICBmaW5hbFBvcyA9IG1hc1NjYWxlW2ldO1xyXG4gICAgICAgIGxlbiA9IGxlbkw7XHJcbiAgICAgIH0gZWxzZSBpZiAobGVuUiA8IGxlbikge1xyXG4gICAgICAgIGZpbmFsUG9zID0gbWFzU2NhbGVbaSArIDFdO1xyXG4gICAgICAgIGxlbiA9IGxlblI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmluYWxQb3M7XHJcbiAgfVxyXG4gIG1hc1N0ZXBzRm9yTW92aW5nKCk6IG51bWJlcltdIHtcclxuICAgIGxldCBxdHlEaXZpc2lvbjogbnVtYmVyID0gKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5zdGVwLFxyXG4gICAgICB3aWR0aE9uZURpdmlzaW9uOiBudW1iZXIgPSB0aGlzLm1vZGVsLmdldFdpZHRoKCkgLyAodGhpcy5tYXggLSB0aGlzLm1pbiksIC8v0L7QtNC90L4g0LTQtdC70LXQvdC40LVcclxuICAgICAgd2lkdGhTdGVwOiBudW1iZXIgPSB3aWR0aE9uZURpdmlzaW9uICogdGhpcy5zdGVwLCAvL9C00LvQuNC90LAg0YjQsNCz0LBcclxuICAgICAgbWFzU2NhbGU6IG51bWJlcltdID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcXR5RGl2aXNpb247IGkrKykge1xyXG4gICAgICBtYXNTY2FsZVtpXSA9IHdpZHRoU3RlcCAqIGk7IC8vcGFyc2VJbnQodyppKTsgLy/QsdC10LcgcGFyc2VJbnQsINGH0YLQvtCx0Ysg0YLQvtGH0L3QvtGB0YLRjCDRgdGC0L7QuNC80L7RgdGC0Lgg0LHRi9C70LAg0LLRi9GI0LVcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWFzU2NhbGU7XHJcbiAgfVxyXG5cclxuICBhcHBseUNvbmZpZygpOiB2b2lkIHtcclxuICAgIGxldCB0aGlzQ2xpY2s6IGFueSA9IHRoaXMubW9kZWwuY2hlY2tib3hTZXR0aW5ncyxcclxuICAgICAgY29udHI6IGFueSA9IHRoaXM7XHJcblxyXG4gICAgdGhpc0NsaWNrLm9uY2xpY2sgPSBmdW5jdGlvbiAoZTogYW55KSB7XHJcbiAgICAgIGlmICh0aGlzQ2xpY2suY2hlY2tlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgY29udHIubW9kZWwuc2V0dGluZ3NCbG9jay5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb250ci5tb2RlbC5zZXR0aW5nc0Jsb2NrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBpbnB1dFM6IGFueSA9IGNvbnRyLnRoaXNTbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnaW5wdXQtdGV4dF9faW5wdXQnKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpbnB1dFNbaV0ub25ibHVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgbGV0IGlkSW5wdXQgPSB0aGlzLmlkLFxyXG4gICAgICAgICAgICBpZDogbnVtYmVyID0gY29udHIuaWRFbGVtZW50LnN1YnN0cigtMSksXHJcbiAgICAgICAgICAgIG1pbjogbnVtYmVyLFxyXG4gICAgICAgICAgICBtYXg6IG51bWJlcixcclxuICAgICAgICAgICAgbWluU3RhcnQ6IG51bWJlcixcclxuICAgICAgICAgICAgbWF4U3RhcnQ6IG51bWJlcixcclxuICAgICAgICAgICAgc3RlcDogbnVtYmVyLFxyXG4gICAgICAgICAgICBzY2FsZVN0ZXA6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICBpZiAoaWRJbnB1dC5pbmRleE9mKCdtaW4nLCAwKSAhPSAtMSAmJiBpZElucHV0LmluZGV4T2YoJ21pblN0YXJ0JywgMCkgPT0gLTEpIHtcclxuICAgICAgICAgICAgbWluID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGNvbnRyLm1pbiA9IG1pbjtcclxuICAgICAgICAgICAgY29udHIudmlldy5taW4gPSBtaW47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRJbnB1dC5pbmRleE9mKCdtYXgnLCAwKSAhPSAtMSAmJiBpZElucHV0LmluZGV4T2YoJ21heFN0YXJ0JywgMCkgPT0gLTEpIHtcclxuICAgICAgICAgICAgbWF4ID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGNvbnRyLm1heCA9IG1heDtcclxuICAgICAgICAgICAgY29udHIudmlldy5tYXggPSBtYXg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRJbnB1dC5pbmRleE9mKCdtaW5TdGFydCcsIDApICE9IC0xKSB7XHJcbiAgICAgICAgICAgIG1pblN0YXJ0ID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChtaW5TdGFydCA8PSBjb250ci5tYXhTdGFydCkge1xyXG4gICAgICAgICAgICAgIGNvbnRyLm1pblN0YXJ0ID0gbWluU3RhcnQ7XHJcbiAgICAgICAgICAgICAgY29udHIudmlldy5taW5TdGFydCA9IG1pblN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRJbnB1dC5pbmRleE9mKCdtYXhTdGFydCcsIDApICE9IC0xKSB7XHJcbiAgICAgICAgICAgIG1heFN0YXJ0ID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChtYXhTdGFydCA+PSBjb250ci5taW5TdGFydCkge1xyXG4gICAgICAgICAgICAgIGNvbnRyLm1heFN0YXJ0ID0gbWF4U3RhcnQ7XHJcbiAgICAgICAgICAgICAgY29udHIudmlldy5tYXhTdGFydCA9IG1heFN0YXJ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRJbnB1dC5pbmRleE9mKCdzY2FsZVN0ZXAnLCAwKSAhPSAtMSkge1xyXG4gICAgICAgICAgICBzY2FsZVN0ZXAgPSBOdW1iZXIucGFyc2VJbnQodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNsZWFyKGNvbnRyLnRoaXNTbGlkZXIsIGlkKTtcclxuICAgICAgICAgICAgY29udHIuc2NhbGVTdGVwID0gc2NhbGVTdGVwO1xyXG4gICAgICAgICAgICBjb250ci52aWV3LnNjYWxlU3RlcCA9IHNjYWxlU3RlcDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpZElucHV0LmluZGV4T2YoJ3N0ZXAnLCAwKSAhPSAtMSkge1xyXG4gICAgICAgICAgICBzdGVwID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGNvbnRyLnN0ZXAgPSBzdGVwO1xyXG4gICAgICAgICAgICBjb250ci52aWV3LnN0ZXAgPSBzdGVwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnRyLmNoZWNrTWluTWF4U3RhcnQoKTtcclxuICAgICAgICAgIGNvbnRyLnZpZXcuZHJhd1R5cGUoKTtcclxuICAgICAgICAgIGNvbnRyLnZpZXcuZHJhd1NjYWxlKCk7XHJcbiAgICAgICAgICBjb250ci52aWV3LmRyYXdSYW5nZSgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3VmFsdWUoKTtcclxuICAgICAgICAgIGlmIChjb250ci5zZXR0aW5ncyA9PSAnb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnRyLndyaXRlRGF0YUluQ29uZmlnKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJhZGlvUzogYW55ID0gY29udHIudGhpc1NsaWRlci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyYWRpb2dyb3VwX19pbnB1dCcpO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhZGlvUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHJhZGlvU1tpXS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgbGV0IGlkOiBudW1iZXIgPSBjb250ci5pZEVsZW1lbnQuc3Vic3RyKC0xKSxcclxuICAgICAgICAgICAgaWRTdHI6IHN0cmluZyA9IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgdHlwZTogc3RyaW5nLFxyXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogc3RyaW5nLFxyXG4gICAgICAgICAgICB2YWx1ZTogc3RyaW5nLFxyXG4gICAgICAgICAgICBzY2FsZTogc3RyaW5nLFxyXG4gICAgICAgICAgICB0eXBlSWQ6IHN0cmluZyxcclxuICAgICAgICAgICAgb3JpZW50YXRpb25JRDogc3RyaW5nLFxyXG4gICAgICAgICAgICB2YWx1ZUlEOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIHNjYWxlSUQ6IHN0cmluZztcclxuXHJcbiAgICAgICAgICBpZiAoaWRTdHIuaW5kZXhPZignVHlwZScsIDApICE9IC0xKSB7XHJcbiAgICAgICAgICAgIHR5cGVJZCA9IHRoaXMuaWQuc3Vic3RyKC0xKTtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlSWQpIHtcclxuICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaW50ZXJ2YWwnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnMic6IHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnZnJvbTB0byc7XHJcbiAgICAgICAgICAgICAgICBjb250ci5taW5TdGFydCA9IGNvbnRyLm1pbjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjYXNlICczJzoge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdvbmUnO1xyXG4gICAgICAgICAgICAgICAgY29udHIubWluU3RhcnQgPSBjb250ci5taW47XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaW50ZXJ2YWwnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsZWFyKGNvbnRyLnRoaXNTbGlkZXIsIGlkKTtcclxuICAgICAgICAgICAgY29udHIudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIGNvbnRyLnZpZXcudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRTdHIuaW5kZXhPZignT3JpZW50YXRpb24nLCAwKSAhPSAtMSkge1xyXG4gICAgICAgICAgICBvcmllbnRhdGlvbklEID0gdGhpcy5pZC5zdWJzdHIoLTEpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9yaWVudGF0aW9uSUQpIHtcclxuICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSAnMic6XHJcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xlYXIoY29udHIudGhpc1NsaWRlciwgaWQpO1xyXG4gICAgICAgICAgICBjb250ci5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xyXG4gICAgICAgICAgICBjb250ci52aWV3Lm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRTdHIuaW5kZXhPZignVmFsdWUnLCAwKSAhPSAtMSkge1xyXG4gICAgICAgICAgICB2YWx1ZUlEID0gdGhpcy5pZC5zdWJzdHIoLTEpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlSUQpIHtcclxuICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gJ29uJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAnb2ZmJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICdvbic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xlYXIoY29udHIudGhpc1NsaWRlciwgaWQpO1xyXG4gICAgICAgICAgICBjb250ci52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBjb250ci52aWV3LnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRTdHIuaW5kZXhPZignU2NhbGUnLCAwKSAhPSAtMSkge1xyXG4gICAgICAgICAgICBzY2FsZUlEID0gdGhpcy5pZC5zdWJzdHIoLTEpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHNjYWxlSUQpIHtcclxuICAgICAgICAgICAgICBjYXNlICcxJzpcclxuICAgICAgICAgICAgICAgIHNjYWxlID0gJ29uJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgJzInOlxyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSAnb2ZmJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBzY2FsZSA9ICdvbic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xlYXIoY29udHIudGhpc1NsaWRlciwgaWQpO1xyXG4gICAgICAgICAgICBjb250ci5zY2FsZSA9IHNjYWxlO1xyXG4gICAgICAgICAgICBjb250ci52aWV3LnNjYWxlID0gc2NhbGU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29udHIuY2hlY2tNaW5NYXhTdGFydCgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3VHlwZSgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3U2NhbGUoKTtcclxuICAgICAgICAgIGNvbnRyLnZpZXcuZHJhd09yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgICBjb250ci52aWV3LmRyYXdWYWx1ZSgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3UmFuZ2UoKTtcclxuICAgICAgICAgIGlmIChjb250ci5zZXR0aW5ncyA9PSAnb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnRyLndyaXRlRGF0YUluQ29uZmlnKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhcih0aGlzU2xpZGVyOiBhbnksIGlkOiBudW1iZXIpIHtcclxuICAgICAgbGV0IGJsb2Nrc1NjYWxlOiBhbnkgPSB0aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAgICAgJy5yYW5nZS1zbGlkZXIjaWRTbGlkZXInICsgaWQgKyAnIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19zY2FsZSdcclxuICAgICAgKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja3NTY2FsZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGJsb2Nrc1NjYWxlW2ldLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJy5yYW5nZS1zbGlkZXIjaWRTbGlkZXInICsgaWQgKyAnIC5yYW5nZS1zbGlkZXJfX2xlZnQnKS5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgdGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyI2lkU2xpZGVyJyArIGlkICsgJyAucmFuZ2Utc2xpZGVyX19yYW5nZScpLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hlY2tNaW5NYXhTdGFydCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm1pblN0YXJ0IDwgdGhpcy5taW4pIHtcclxuICAgICAgdGhpcy5taW5TdGFydCA9IHRoaXMubWluO1xyXG4gICAgICB0aGlzLnZpZXcubWluU3RhcnQgPSB0aGlzLm1pbjtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLm1heFN0YXJ0ID4gdGhpcy5tYXgpIHtcclxuICAgICAgdGhpcy5tYXhTdGFydCA9IHRoaXMubWF4O1xyXG4gICAgICB0aGlzLnZpZXcubWF4U3RhcnQgPSB0aGlzLm1heDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLm1pblN0YXJ0ID4gdGhpcy5tYXgpIHtcclxuICAgICAgdGhpcy5taW5TdGFydCA9IHRoaXMubWF4O1xyXG4gICAgICB0aGlzLnZpZXcubWluU3RhcnQgPSB0aGlzLm1heDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdyaXRlRGF0YUluQ29uZmlnKCk6IHZvaWQge1xyXG4gICAgdGhpcy5tb2RlbC5lbGVtVmFsdWVNaW4uaW5uZXJIVE1MID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdydS1SVScpLmZvcm1hdCh0aGlzLm1pblN0YXJ0KTtcclxuICAgIHRoaXMubW9kZWwuZWxlbVZhbHVlTWF4LmlubmVySFRNTCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgncnUtUlUnKS5mb3JtYXQodGhpcy5tYXhTdGFydCk7XHJcblxyXG4gICAgbGV0IHR5cGVJRDogc3RyaW5nLFxyXG4gICAgICBvcmllbnRhdGlvbklEOiBzdHJpbmcsXHJcbiAgICAgIHZhbHVlSUQ6IHN0cmluZyxcclxuICAgICAgc2NhbGVJRDogc3RyaW5nLFxyXG4gICAgICBpZDogc3RyaW5nID0gdGhpcy5pZEVsZW1lbnQuc3Vic3RyKC0xKTtcclxuXHJcbiAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xyXG4gICAgICBjYXNlICdpbnRlcnZhbCc6XHJcbiAgICAgICAgdHlwZUlEID0gJzEnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmcm9tMHRvJzoge1xyXG4gICAgICAgIHR5cGVJRCA9ICcyJztcclxuICAgICAgICB0aGlzLndyaXRlRGF0YVNsaWRlck1pbih0aGlzLm1pbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnb25lJzoge1xyXG4gICAgICAgIHR5cGVJRCA9ICczJztcclxuICAgICAgICB0aGlzLndyaXRlRGF0YVNsaWRlck1pbih0aGlzLm1pbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0eXBlSUQgPSAnMSc7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHRoaXMub3JpZW50YXRpb24pIHtcclxuICAgICAgY2FzZSAnaG9yaXpvbnRhbCc6XHJcbiAgICAgICAgb3JpZW50YXRpb25JRCA9ICcxJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmVydGljYWwnOlxyXG4gICAgICAgIG9yaWVudGF0aW9uSUQgPSAnMic7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgb3JpZW50YXRpb25JRCA9ICcxJztcclxuICAgIH1cclxuICAgIHN3aXRjaCAodGhpcy52YWx1ZSkge1xyXG4gICAgICBjYXNlICdvbic6XHJcbiAgICAgICAgdmFsdWVJRCA9ICcxJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnb2ZmJzpcclxuICAgICAgICB2YWx1ZUlEID0gJzInO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHZhbHVlSUQgPSAnMSc7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHRoaXMuc2NhbGUpIHtcclxuICAgICAgY2FzZSAnb24nOlxyXG4gICAgICAgIHNjYWxlSUQgPSAnMSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ29mZic6XHJcbiAgICAgICAgc2NhbGVJRCA9ICcyJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBzY2FsZUlEID0gJzEnO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjb25maWdJdGVtTWluOiBzdHJpbmcgPSBgLnNsaWRlci1jb25maWcgLnNsaWRlci1jb25maWdfX2Jsb2NrIC5pbnB1dC10ZXh0ICNpbnB1dFRleHRtaW5gLFxyXG4gICAgICBjb25maWdJdGVtTWF4OiBzdHJpbmcgPSBgLnNsaWRlci1jb25maWcgLnNsaWRlci1jb25maWdfX2Jsb2NrIC5pbnB1dC10ZXh0ICNpbnB1dFRleHRtYXhgLFxyXG4gICAgICBjb25maWdJdGVtTWluU3RhcnQ6IHN0cmluZyA9IGAuc2xpZGVyLWNvbmZpZyAuc2xpZGVyLWNvbmZpZ19fYmxvY2sgLmlucHV0LXRleHQgI2lucHV0VGV4dG1pblN0YXJ0YCxcclxuICAgICAgY29uZmlnSXRlbU1heFN0YXJ0OiBzdHJpbmcgPSBgLnNsaWRlci1jb25maWcgLnNsaWRlci1jb25maWdfX2Jsb2NrIC5pbnB1dC10ZXh0ICNpbnB1dFRleHRtYXhTdGFydGAsXHJcbiAgICAgIGNvbmZpZ0l0ZW1TdGVwOiBzdHJpbmcgPSBgLnNsaWRlci1jb25maWcgLnNsaWRlci1jb25maWdfX2Jsb2NrIC5pbnB1dC10ZXh0ICNpbnB1dFRleHRzdGVwYCxcclxuICAgICAgY29uZmlnSXRlbVNjYWxlU3RlcDogc3RyaW5nID0gYC5zbGlkZXItY29uZmlnIC5zbGlkZXItY29uZmlnX19ibG9jayAuaW5wdXQtdGV4dCAjaW5wdXRUZXh0c2NhbGVTdGVwYDtcclxuXHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3Rvcihjb25maWdJdGVtTWluICsgaWQpLnZhbHVlID0gdGhpcy5taW47XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3Rvcihjb25maWdJdGVtTWF4ICsgaWQpLnZhbHVlID0gdGhpcy5tYXg7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3Rvcihjb25maWdJdGVtTWluU3RhcnQgKyBpZCkudmFsdWUgPSB0aGlzLm1pblN0YXJ0O1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoY29uZmlnSXRlbU1heFN0YXJ0ICsgaWQpLnZhbHVlID0gdGhpcy5tYXhTdGFydDtcclxuICAgIHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKGNvbmZpZ0l0ZW1TdGVwICsgaWQpLnZhbHVlID0gdGhpcy5zdGVwO1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoY29uZmlnSXRlbVNjYWxlU3RlcCArIGlkKS52YWx1ZSA9IHRoaXMuc2NhbGVTdGVwO1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAucmFkaW9ncm91cF9faW5wdXRbbmFtZT1yYkdyb29wVHlwZSR7aWR9XSNyYnJiR3Jvb3BUeXBlJHtpZH0ke2lkfSR7dHlwZUlEfWBcclxuICAgICkuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcihcclxuICAgICAgYC5yYWRpb2dyb3VwX19pbnB1dFtuYW1lPXJiR3Jvb3BPcmllbnRhdGlvbiR7aWR9XSNyYnJiR3Jvb3BPcmllbnRhdGlvbiR7aWR9JHtpZH0ke29yaWVudGF0aW9uSUR9YFxyXG4gICAgKS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgLnJhZGlvZ3JvdXBfX2lucHV0W25hbWU9cmJHcm9vcFZhbHVlJHtpZH1dI3JicmJHcm9vcFZhbHVlJHtpZH0ke2lkfSR7dmFsdWVJRH1gXHJcbiAgICApLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAucmFkaW9ncm91cF9faW5wdXRbbmFtZT1yYkdyb29wU2NhbGUke2lkfV0jcmJyYkdyb29wU2NhbGUke2lkfSR7aWR9JHtzY2FsZUlEfWBcclxuICAgICkuY2hlY2tlZCA9IHRydWU7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tICcuLi8uLi9tb2R1bGVzL3BsdWdpbi5zbGlkZXIvcGx1Z2luLnNsaWRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9kZWwge1xyXG4gIHRoaXNTbGlkZXI6IEhUTUxFbGVtZW50O1xyXG4gIGlkRWxlbWVudDogc3RyaW5nO1xyXG4gIHJhbmdlU2xpZGVyOiBIVE1MRWxlbWVudDtcclxuICBzbGlkZXI6IEhUTUxFbGVtZW50O1xyXG4gIHJhbmdlOiBIVE1MRWxlbWVudDtcclxuICByYW5nZUxlZnQ6IEhUTUxFbGVtZW50O1xyXG4gIHJhbmdlUmlnaHQ6IEhUTUxFbGVtZW50O1xyXG4gIGVsZW1WYWx1ZU1pbjogb2JqZWN0O1xyXG4gIGVsZW1WYWx1ZU1heDogb2JqZWN0O1xyXG4gIGNoZWNrYm94U2V0dGluZ3M6IG9iamVjdDtcclxuICBzZXR0aW5nc0Jsb2NrOiBvYmplY3Q7XHJcbiAgbGFiZWxCbG9jazogb2JqZWN0O1xyXG4gIGxhYmVsTWluOiBvYmplY3Q7XHJcbiAgbGFiZWxEYXNoOiBvYmplY3Q7XHJcbiAgbGFiZWxNYXg6IG9iamVjdDtcclxuICBibG9ja1NjYWxlVmFsczogb2JqZWN0O1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb246IE9wdGlvbnMpIHtcclxuICAgIHRoaXMudGhpc1NsaWRlciA9IG9wdGlvbi5lbGVtZW50O1xyXG4gICAgdGhpcy5pZEVsZW1lbnQgPSBvcHRpb24uaWRFbGVtZW50O1xyXG4gICAgdGhpcy5yYW5nZVNsaWRlciA9IHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyIycgKyB0aGlzLmlkRWxlbWVudCk7XHJcbiAgICB0aGlzLnNsaWRlciA9IHRoaXMucmFuZ2VTbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fc2xpZGVyJyk7XHJcbiAgICB0aGlzLnJhbmdlID0gdGhpcy5zbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fcmFuZ2UnKTtcclxuICAgIHRoaXMucmFuZ2VMZWZ0ID0gdGhpcy5zbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fbGVmdCcpO1xyXG4gICAgdGhpcy5yYW5nZVJpZ2h0ID0gdGhpcy5zbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fcmlnaHQnKTtcclxuICAgIHRoaXMuZWxlbVZhbHVlTWluID0gdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJy5yYW5nZS1zbGlkZXJfX2xhYmVsLW1pbicpO1xyXG4gICAgdGhpcy5lbGVtVmFsdWVNYXggPSB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fbGFiZWwtbWF4Jyk7XHJcbiAgICB0aGlzLmNoZWNrYm94U2V0dGluZ3MgPSB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcignLnNsaWRlci1jb25maWcgLmNoZWNrYm94LWxpc3RfX2lucHV0Jyk7XHJcbiAgICB0aGlzLnNldHRpbmdzQmxvY2sgPSB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcignLnNsaWRlci1jb25maWcgLnNsaWRlci1jb25maWdfX2Jsb2NrJyk7XHJcbiAgICB0aGlzLmxhYmVsQmxvY2sgPSB0aGlzLnJhbmdlU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJy5yYW5nZS1zbGlkZXJfX2xhYmVsLWJsb2NrJyk7XHJcbiAgICB0aGlzLmxhYmVsTWluID0gdGhpcy5yYW5nZVNsaWRlci5xdWVyeVNlbGVjdG9yKCdzcGFuLnJhbmdlLXNsaWRlcl9fbGFiZWwtbWluJyk7XHJcbiAgICB0aGlzLmxhYmVsRGFzaCA9IHRoaXMucmFuZ2VTbGlkZXIucXVlcnlTZWxlY3Rvcignc3Bhbi5yYW5nZS1zbGlkZXJfX2xhYmVsLWRhc2gnKTtcclxuICAgIHRoaXMubGFiZWxNYXggPSB0aGlzLnJhbmdlU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4ucmFuZ2Utc2xpZGVyX19sYWJlbC1tYXgnKTtcclxuICAgIHRoaXMuYmxvY2tTY2FsZVZhbHMgPSB0aGlzLnNsaWRlci5xdWVyeVNlbGVjdG9yQWxsKCcucmFuZ2Utc2xpZGVyX19zY2FsZS12YWwnKTtcclxuICB9XHJcblxyXG4gIGdldFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zbGlkZXIuY2xpZW50V2lkdGg7XHJcbiAgfVxyXG4gIGdldFdpZHRoUmFuZ2UoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnJhbmdlLmNsaWVudFdpZHRoO1xyXG4gIH1cclxuICBnZXRQb3NSYW5nZUxlZnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKHRoaXMucmFuZ2VMZWZ0KS5sZWZ0KTtcclxuICB9XHJcbiAgZ2V0UG9zUmFuZ2VSaWdodCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUodGhpcy5yYW5nZVJpZ2h0KS5sZWZ0KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyLm1vZGVsJztcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyLnZpZXcnO1xyXG5pbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi4vLi4vbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIuY29udHJvbGxlcic7XHJcbmRlY2xhcmUgbGV0IGpRdWVyeTogYW55O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcclxuICBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICBpZEVsZW1lbnQ6IHN0cmluZztcclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBtaW46IG51bWJlcjtcclxuICBtYXg6IG51bWJlcjtcclxuICBtaW5TdGFydDogbnVtYmVyO1xyXG4gIG1heFN0YXJ0OiBudW1iZXI7XHJcbiAgc3RlcDogbnVtYmVyO1xyXG4gIG9yaWVudGF0aW9uOiBzdHJpbmc7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuICBzY2FsZTogc3RyaW5nO1xyXG4gIHNjYWxlU3RlcDogbnVtYmVyO1xyXG4gIHNldHRpbmdzOiBzdHJpbmc7XHJcbn1cclxuXHJcbihmdW5jdGlvbiAoJCkge1xyXG4gICQuZm4uc2xpZGVyID0gZnVuY3Rpb24gKG9wdGlvbnM6IE9wdGlvbnMpIHtcclxuICAgIGNsYXNzIFNsaWRlciB7XHJcbiAgICAgIHB1YmxpYyBlbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgICAgcHVibGljIGlkRWxlbWVudDogc3RyaW5nO1xyXG4gICAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcclxuICAgICAgcHVibGljIHR5cGU6IHN0cmluZyA9ICdpbnRlcnZhbCc7XHJcbiAgICAgIHB1YmxpYyBtaW46IG51bWJlcjtcclxuICAgICAgcHVibGljIG1heDogbnVtYmVyO1xyXG4gICAgICBwdWJsaWMgbWluU3RhcnQ6IG51bWJlcjtcclxuICAgICAgcHVibGljIG1heFN0YXJ0OiBudW1iZXI7XHJcbiAgICAgIHB1YmxpYyBzdGVwOiBudW1iZXI7XHJcbiAgICAgIHB1YmxpYyBvcmllbnRhdGlvbjogc3RyaW5nID0gJ2hvcml6b250YWwnO1xyXG4gICAgICBwdWJsaWMgdmFsdWU6IHN0cmluZyA9ICdvbic7XHJcbiAgICAgIHB1YmxpYyBzY2FsZTogc3RyaW5nID0gJ29uJztcclxuICAgICAgcHVibGljIHNjYWxlU3RlcDogbnVtYmVyO1xyXG4gICAgICBwdWJsaWMgc2V0dGluZ3M6IHN0cmluZyA9ICdvbic7XHJcbiAgICAgIHB1YmxpYyBkYXRhU2xpZGVyOiBPcHRpb25zO1xyXG5cclxuICAgICAgY29uc3RydWN0b3Iob3B0aW9uOiBPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhU2xpZGVyID0ge1xyXG4gICAgICAgICAgZWxlbWVudDogb3B0aW9uLmVsZW1lbnQsXHJcbiAgICAgICAgICBpZEVsZW1lbnQ6IG9wdGlvbi5pZEVsZW1lbnQsXHJcbiAgICAgICAgICB3aWR0aDogb3B0aW9uLndpZHRoIHx8IDQwMCxcclxuICAgICAgICAgIHR5cGU6IG9wdGlvbi50eXBlIHx8ICdpbnRlcnZhbCcsXHJcbiAgICAgICAgICBtaW46IG9wdGlvbi5taW4gfHwgMCxcclxuICAgICAgICAgIG1heDogb3B0aW9uLm1heCB8fCAxMDAwLFxyXG4gICAgICAgICAgbWluU3RhcnQ6IG9wdGlvbi5taW5TdGFydCB8fCAwLFxyXG4gICAgICAgICAgbWF4U3RhcnQ6IG9wdGlvbi5tYXhTdGFydCB8fCA1MDAsXHJcbiAgICAgICAgICBzdGVwOiBvcHRpb24uc3RlcCB8fCAxLFxyXG4gICAgICAgICAgb3JpZW50YXRpb246IG9wdGlvbi5vcmllbnRhdGlvbiB8fCAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICB2YWx1ZTogb3B0aW9uLnZhbHVlIHx8ICdvbicsXHJcbiAgICAgICAgICBzY2FsZTogb3B0aW9uLnNjYWxlIHx8ICdvbicsXHJcbiAgICAgICAgICBzY2FsZVN0ZXA6IG9wdGlvbi5zY2FsZVN0ZXAgfHwgMTAsXHJcbiAgICAgICAgICBzZXR0aW5nczogb3B0aW9uLnNldHRpbmdzIHx8ICdvbicsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcnVuU2xpZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IE1vZGVsKHRoaXMuZGF0YVNsaWRlcik7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBWaWV3KHRoaXMuZGF0YVNsaWRlciwgbW9kZWwpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcih0aGlzLmRhdGFTbGlkZXIsIG1vZGVsLCB2aWV3KTtcclxuICAgICAgICBsZXQgc2V0dGluZ3MgPSB0aGlzLmRhdGFTbGlkZXIuc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIG1vZGVsLnJhbmdlU2xpZGVyLnN0eWxlLndpZHRoID0gdGhpcy5kYXRhU2xpZGVyLndpZHRoICsgJ3B4JztcclxuXHJcbiAgICAgICAgY29udHJvbGxlci5jaGVja01pbk1heFN0YXJ0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNsaWRlci5zZXR0aW5ncyA9PSAnb24nKSB7XHJcbiAgICAgICAgICBjb250cm9sbGVyLndyaXRlRGF0YUluQ29uZmlnKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZpZXcuZHJhd1JhbmdlKCk7XHJcblxyXG4gICAgICAgIGNvbnRyb2xsZXIubW92ZVJhbmdlT25jbGlja1NsaWRlcigpO1xyXG4gICAgICAgIGlmIChzZXR0aW5ncyA9PSAnb24nKSB7XHJcbiAgICAgICAgICBjb250cm9sbGVyLmFwcGx5Q29uZmlnKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtb2RlbC5yYW5nZUxlZnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgY29udHJvbGxlci5tb3ZlQXQobW9kZWwucmFuZ2VMZWZ0LCBlLCAnbGVmdCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG1vZGVsLnJhbmdlUmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGU6IGFueSkge1xyXG4gICAgICAgICAgY29udHJvbGxlci5tb3ZlQXQobW9kZWwucmFuZ2VSaWdodCwgZSwgJ3JpZ2h0Jyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZpZXcuZHJhd1R5cGUoKTtcclxuICAgICAgICB2aWV3LmRyYXdTY2FsZSgpO1xyXG4gICAgICAgIHZpZXcuZHJhd09yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgdmlldy5kcmF3VmFsdWUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNsaWRlciA9IG5ldyBTbGlkZXIob3B0aW9ucyk7XHJcbiAgICBzbGlkZXIucnVuU2xpZGVyKCk7XHJcbiAgfTtcclxufSkoalF1ZXJ5KTtcclxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3IHtcclxuICBtb2RlbDogYW55O1xyXG4gIGRhdGFTbGlkZXI6IG9iamVjdDtcclxuICB0aGlzU2xpZGVyOiBhbnk7XHJcbiAgaWRFbGVtZW50OiBzdHJpbmc7XHJcbiAgbWluOiBudW1iZXI7XHJcbiAgbWF4OiBudW1iZXI7XHJcbiAgbWluU3RhcnQ6IG51bWJlcjtcclxuICBtYXhTdGFydDogbnVtYmVyO1xyXG4gIHR5cGU6IHN0cmluZztcclxuICBvcmllbnRhdGlvbjogc3RyaW5nO1xyXG4gIHNjYWxlOiBzdHJpbmc7XHJcbiAgc2NhbGVTdGVwOiBudW1iZXI7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0aW9uOiBPcHRpb25zLCBtb2RlbDogYW55KSB7XHJcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcbiAgICB0aGlzLmRhdGFTbGlkZXIgPSBvcHRpb247XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIgPSBvcHRpb24uZWxlbWVudDtcclxuICAgIHRoaXMuaWRFbGVtZW50ID0gb3B0aW9uLmlkRWxlbWVudDtcclxuICAgIHRoaXMubWluID0gb3B0aW9uLm1pbjtcclxuICAgIHRoaXMubWF4ID0gb3B0aW9uLm1heDtcclxuICAgIHRoaXMubWluU3RhcnQgPSBvcHRpb24ubWluU3RhcnQ7XHJcbiAgICB0aGlzLm1heFN0YXJ0ID0gb3B0aW9uLm1heFN0YXJ0O1xyXG4gICAgdGhpcy50eXBlID0gb3B0aW9uLnR5cGU7XHJcbiAgICB0aGlzLm9yaWVudGF0aW9uID0gb3B0aW9uLm9yaWVudGF0aW9uO1xyXG4gICAgdGhpcy5zY2FsZSA9IG9wdGlvbi5zY2FsZTtcclxuICAgIHRoaXMuc2NhbGVTdGVwID0gb3B0aW9uLnNjYWxlU3RlcDtcclxuICAgIHRoaXMudmFsdWUgPSBvcHRpb24udmFsdWU7XHJcbiAgfVxyXG5cclxuICBkcmF3UmFuZ2UoKTogdm9pZCB7XHJcbiAgICBsZXQgcG9zTGVmdDogbnVtYmVyLCBwb3NSaWdodDogbnVtYmVyO1xyXG5cclxuICAgIHBvc1JpZ2h0ID0gKHRoaXMubW9kZWwuZ2V0V2lkdGgoKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSkgKiAodGhpcy5tYXhTdGFydCAtIHRoaXMubWluKTtcclxuICAgIHRoaXMubW9kZWwucmFuZ2VSaWdodC5zdHlsZS5sZWZ0ID0gcG9zUmlnaHQgKyAncHgnO1xyXG5cclxuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2Zyb20wdG8nIHx8ICdvbmUnOiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLTVweCknO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUud2lkdGggPSBwb3NSaWdodCArICdweCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIHBvc0xlZnQgPSAodGhpcy5tb2RlbC5nZXRXaWR0aCgpIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKSAqICh0aGlzLm1pblN0YXJ0IC0gdGhpcy5taW4pOyAvL9C10YHQu9C4INC80LjQvSDQvdC1IDBcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS5sZWZ0ID0gcG9zTGVmdCArICdweCc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWCgnICsgcG9zTGVmdCArICdweCknO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUubGVmdCA9IHBvc0xlZnQgKyAncHgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUud2lkdGggPSBwb3NSaWdodCAtIHBvc0xlZnQgKyAncHgnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3VHlwZSgpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2ludGVydmFsJzpcclxuICAgICAgICBicmVhaztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyB0aGlzLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpICsgJ3B4LCAwcHgpJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5tb2RlbC5nZXRQb3NSYW5nZUxlZnQoKSArICdweCwgMHB4KSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS53aWR0aCA9IHRoaXMubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpIC0gdGhpcy5tb2RlbC5nZXRQb3NSYW5nZUxlZnQoKTtcclxuICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgIHRoaXMubW9kZWwubGFiZWxEYXNoLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmcm9tMHRvJzoge1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2VMZWZ0LnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgLTUgKyAncHgsIDBweCknO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUud2lkdGggPSB0aGlzLm1vZGVsLmdldFBvc1JhbmdlUmlnaHQoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdvbmUnOiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyArIC01ICsgJ3B4LCAwcHgpJztcclxuICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIHRoaXMubW9kZWwubGFiZWxEYXNoLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3U2NhbGUoKTogdm9pZCB7XHJcbiAgICBzd2l0Y2ggKHRoaXMuc2NhbGUpIHtcclxuICAgICAgY2FzZSAnb24nOiB7XHJcbiAgICAgICAgbGV0IHF0eURpdmlzaW9uOiBudW1iZXIsXHJcbiAgICAgICAgICB2YWxEaXZpc2lvbjogbnVtYmVyID0gdGhpcy5taW4sXHJcbiAgICAgICAgICBwb3NEaXZpc2lvbjogbnVtYmVyLFxyXG4gICAgICAgICAgc3RlcFdpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgICBlbGVtRGl2aXNpb246IGFueSxcclxuICAgICAgICAgIGJsb2NrU2NhbGU6IGFueTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2NhbGVTdGVwID4gMCkge1xyXG4gICAgICAgICAgcXR5RGl2aXNpb24gPSB0aGlzLnNjYWxlU3RlcDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcXR5RGl2aXNpb24gPSBNYXRoLmZsb29yKHRoaXMubW9kZWwuZ2V0V2lkdGgoKSAvIDQ1KTtcclxuICAgICAgICAgIHRoaXMuc2NhbGVTdGVwID0gcXR5RGl2aXNpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGVwV2lkdGggPSB0aGlzLm1vZGVsLmdldFdpZHRoKCkgLyBxdHlEaXZpc2lvbjtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy5tb2RlbC5nZXRXaWR0aCgpOyApIHtcclxuICAgICAgICAgIHBvc0RpdmlzaW9uID0gTWF0aC5mbG9vcihpKTtcclxuICAgICAgICAgIGJsb2NrU2NhbGUgPSBgPGRpdiBjbGFzcz1cInJhbmdlLXNsaWRlcl9fc2NhbGVcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhbmdlLXNsaWRlcl9fc2NhbGUtbGluZVwiIGlkPVwic2NhbGUke3Bvc0RpdmlzaW9ufVwiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgICAgdGhpcy5tb2RlbC5zbGlkZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBibG9ja1NjYWxlKTtcclxuICAgICAgICAgIGVsZW1EaXZpc2lvbiA9IHRoaXMubW9kZWwuc2xpZGVyXHJcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyX19zY2FsZS1saW5lI3NjYWxlJyArIHBvc0RpdmlzaW9uKVxyXG4gICAgICAgICAgICAuY2xvc2VzdCgnLnJhbmdlLXNsaWRlcl9fc2NhbGUnKTtcclxuICAgICAgICAgIGVsZW1EaXZpc2lvbi5zdHlsZS5sZWZ0ID0gcG9zRGl2aXNpb24gKyAncHgnO1xyXG4gICAgICAgICAgdGhpcy5tb2RlbC5yYW5nZVNsaWRlci5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMzVweCc7XHJcbiAgICAgICAgICBpID0gaSArIHN0ZXBXaWR0aDtcclxuICAgICAgICAgIGVsZW1EaXZpc2lvbi5pbnNlcnRBZGphY2VudEhUTUwoXHJcbiAgICAgICAgICAgICdiZWZvcmVlbmQnLFxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInJhbmdlLXNsaWRlcl9fc2NhbGUtdmFsXCI+JyArIE1hdGguZmxvb3IodmFsRGl2aXNpb24pICsgJzwvZGl2PidcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICB2YWxEaXZpc2lvbiA9IHZhbERpdmlzaW9uICsgKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gcXR5RGl2aXNpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ29mZic6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3T3JpZW50YXRpb24oKTogdm9pZCB7XHJcbiAgICBsZXQgYmxvY2tWYWxzOiBhbnksXHJcbiAgICAgIGhlaWdodEJsb2NrU2xpZGVyOiBzdHJpbmcgPSAnODBweCc7XHJcbiAgICBzd2l0Y2ggKHRoaXMub3JpZW50YXRpb24pIHtcclxuICAgICAgY2FzZSAnaG9yaXpvbnRhbCc6IHtcclxuICAgICAgICB0aGlzLm1vZGVsLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDVweCwgMCkgcm90YXRlKDBkZWcpJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlU2xpZGVyLnN0eWxlLmhlaWdodCA9IGhlaWdodEJsb2NrU2xpZGVyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzoge1xyXG4gICAgICAgIHRoaXMubW9kZWwuc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoNXB4LCAwKSByb3RhdGUoOTBkZWcpIHRyYW5zbGF0ZVgoNTAlKSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZVNsaWRlci5zdHlsZS5oZWlnaHQgPSB0aGlzLm1vZGVsLmdldFdpZHRoKCkgKyA3NSArICdweCc7XHJcblxyXG4gICAgICAgIGJsb2NrVmFscyA9IHRoaXMubW9kZWwuYmxvY2tTY2FsZVZhbHM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja1ZhbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGJsb2NrVmFsc1tpXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDVweCwgMCkgcm90YXRlKC05MGRlZyknO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5zbGlkZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSg1cHgsIDApIHJvdGF0ZSgwZGVnKSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZVNsaWRlci5zdHlsZS5oZWlnaHQgPSBoZWlnaHRCbG9ja1NsaWRlcjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZHJhd1ZhbHVlKCk6IHZvaWQge1xyXG4gICAgc3dpdGNoICh0aGlzLnZhbHVlKSB7XHJcbiAgICAgIGNhc2UgJ29uJzoge1xyXG4gICAgICAgIHRoaXMubW9kZWwubGFiZWxCbG9jay5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWF4LmlubmVySFRNTCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgncnUtUlUnKS5mb3JtYXQodGhpcy5tYXhTdGFydCk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XHJcbiAgICAgICAgICBjYXNlICdpbnRlcnZhbCc6IHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbE1pbi5pbm5lckhUTUwgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ3J1LVJVJykuZm9ybWF0KHRoaXMubWluU3RhcnQpO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsRGFzaC5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlICdmcm9tMHRvJzoge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLmlubmVySFRNTCA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgncnUtUlUnKS5mb3JtYXQodGhpcy5taW4pO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsRGFzaC5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlICdvbmUnOiB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwubGFiZWxNaW4uaW5uZXJIVE1MID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdydS1SVScpLmZvcm1hdCh0aGlzLm1pblN0YXJ0KTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbE1pbi5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbERhc2guc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAvL2ludGVydmFsXHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwubGFiZWxNaW4uaW5uZXJIVE1MID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdydS1SVScpLmZvcm1hdCh0aGlzLm1pblN0YXJ0KTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbE1pbi5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbERhc2guc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdvZmYnOiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5sYWJlbEJsb2NrLnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAnLi4vLi4vbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIudHMnO1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgJCgnLnVpLWtpdC1mb3JtLWVsZW1lbnRzJykuc2xpZGVyKHtcclxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51aS1raXQtZm9ybS1lbGVtZW50c19fc2xpZGVyLWJsaycpLFxyXG4gICAgaWRFbGVtZW50OiAnaWRTbGlkZXIyJyxcclxuICAgIHdpZHRoOiAyNjYsXHJcbiAgICB0eXBlOiAnaW50ZXJ2YWwnLFxyXG4gICAgbWluOiAwLFxyXG4gICAgbWF4OiAxNTk0OCxcclxuICAgIG1pblN0YXJ0OiA1MDAwLFxyXG4gICAgbWF4U3RhcnQ6IDEwMDAwLFxyXG4gICAgc3RlcDogMSxcclxuICAgIG9yaWVudGF0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICB2YWx1ZTogJ29uJyxcclxuICAgIHNjYWxlOiAnb2ZmJyxcclxuICAgIHNjYWxlU3RlcDogMTAsXHJcbiAgICBzZXR0aW5nczogJ29mZicsXHJcbiAgfSk7XHJcbn0pO1xyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImltcG9ydCAnLi4vLi4vZm9udC9mb250cy5jc3MnO1xyXG5pbXBvcnQgJy4uLy4uL2luZGV4LnNjc3MnO1xyXG5cclxuLypibG9ja3MqL1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9idG4vYnRuLnNjc3MnO1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9jaGVja2JveC1saXN0L2NoZWNrYm94LWxpc3Quc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuanMnO1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9jb21tZW50LWJsb2NrL2NvbW1lbnQtYmxvY2suc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3MnO1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi50cyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2luZm8tYmxvY2svaW5mby1ibG9jay5zY3NzJztcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LnNjc3MnO1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9pbnB1dC10ZXh0L2lucHV0LXRleHQuanMnO1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9saWtlL2xpa2Uuc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2xpa2UvbGlrZS5qcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2xpbmsvbGluay5zY3NzJztcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvbGlzdC1ibG9jay9saXN0LWJsb2NrLnNjc3MnO1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL3JhZGlvZ3JvdXAvcmFkaW9ncm91cC5zY3NzJztcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzJztcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvcmF0ZS1idG4vcmF0ZS1idG4uc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL3JhdGUtYnRuL3JhdGUtYnRuLmpzJztcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvdG9nZ2xlLWJsb2NrL3RvZ2dsZS1ibG9jay5zY3NzJztcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvdG9nZ2xlLWJsb2NrL3RvZ2dsZS1ibG9jay5qcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL3RvcGljLWxhYmVsL3RvcGljLWxhYmVsLnNjc3MnO1xyXG5cclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvY2FsZW5kYXIvY2FsZW5kYXIuc2Nzcyc7XHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2NhbGVuZGFyL2NhbGVuZGFyLmpzJztcclxuXHJcbi8qcGFnZXMqL1xyXG5pbXBvcnQgJy4uLy4uL3BhZ2VzL3VpLWtpdC1mb3JtLWVsZW1lbnRzL3VpLWtpdC1mb3JtLWVsZW1lbnRzLnNjc3MnO1xyXG5pbXBvcnQgJy4uLy4uL3BhZ2VzL3VpLWtpdC1mb3JtLWVsZW1lbnRzL3JhbmdlLXNsaWRlci5qcyc7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=