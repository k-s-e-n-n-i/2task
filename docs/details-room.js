/*! For license information please see details-room.js.LICENSE.txt */
(()=>{var e={7757:function(e,t,n){e.exports=function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[t[r]]=r);var a=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var o in a)if(a.hasOwnProperty(o)){if(!("channels"in a[o]))throw new Error("missing channels property: "+o);if(!("labels"in a[o]))throw new Error("missing channel labels property: "+o);if(a[o].labels.length!==a[o].channels)throw new Error("channel and label counts mismatch: "+o);var i=a[o].channels,s=a[o].labels;delete a[o].channels,delete a[o].labels,Object.defineProperty(a[o],"channels",{value:i}),Object.defineProperty(a[o],"labels",{value:s})}a.rgb.hsl=function(e){var t,n,r=e[0]/255,a=e[1]/255,o=e[2]/255,i=Math.min(r,a,o),s=Math.max(r,a,o),d=s-i;return s===i?t=0:r===s?t=(a-o)/d:a===s?t=2+(o-r)/d:o===s&&(t=4+(r-a)/d),(t=Math.min(60*t,360))<0&&(t+=360),n=(i+s)/2,[t,100*(s===i?0:n<=.5?d/(s+i):d/(2-s-i)),100*n]},a.rgb.hsv=function(e){var t,n,r,a,o,i=e[0]/255,s=e[1]/255,d=e[2]/255,l=Math.max(i,s,d),u=l-Math.min(i,s,d),c=function(e){return(l-e)/6/u+.5};return 0===u?a=o=0:(o=u/l,t=c(i),n=c(s),r=c(d),i===l?a=r-n:s===l?a=1/3+t-r:d===l&&(a=2/3+n-t),a<0?a+=1:a>1&&(a-=1)),[360*a,100*o,100*l]},a.rgb.hwb=function(e){var t=e[0],n=e[1],r=e[2];return[a.rgb.hsl(e)[0],1/255*Math.min(t,Math.min(n,r))*100,100*(r=1-1/255*Math.max(t,Math.max(n,r)))]},a.rgb.cmyk=function(e){var t,n=e[0]/255,r=e[1]/255,a=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-r,1-a)))/(1-t)||0),100*((1-r-t)/(1-t)||0),100*((1-a-t)/(1-t)||0),100*t]},a.rgb.keyword=function(e){var r=n[e];if(r)return r;var a,o,i,s=1/0;for(var d in t)if(t.hasOwnProperty(d)){var l=(o=e,i=t[d],Math.pow(o[0]-i[0],2)+Math.pow(o[1]-i[1],2)+Math.pow(o[2]-i[2],2));l<s&&(s=l,a=d)}return a},a.keyword.rgb=function(e){return t[e]},a.rgb.xyz=function(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]},a.rgb.lab=function(e){var t=a.rgb.xyz(e),n=t[0],r=t[1],o=t[2];return r/=100,o/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},a.hsl.rgb=function(e){var t,n,r,a,o,i=e[0]/360,s=e[1]/100,d=e[2]/100;if(0===s)return[o=255*d,o,o];t=2*d-(n=d<.5?d*(1+s):d+s-d*s),a=[0,0,0];for(var l=0;l<3;l++)(r=i+1/3*-(l-1))<0&&r++,r>1&&r--,o=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,a[l]=255*o;return a},a.hsl.hsv=function(e){var t=e[0],n=e[1]/100,r=e[2]/100,a=n,o=Math.max(r,.01);return n*=(r*=2)<=1?r:2-r,a*=o<=1?o:2-o,[t,100*(0===r?2*a/(o+a):2*n/(r+n)),(r+n)/2*100]},a.hsv.rgb=function(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,a=Math.floor(t)%6,o=t-Math.floor(t),i=255*r*(1-n),s=255*r*(1-n*o),d=255*r*(1-n*(1-o));switch(r*=255,a){case 0:return[r,d,i];case 1:return[s,r,i];case 2:return[i,r,d];case 3:return[i,s,r];case 4:return[d,i,r];case 5:return[r,i,s]}},a.hsv.hsl=function(e){var t,n,r,a=e[0],o=e[1]/100,i=e[2]/100,s=Math.max(i,.01);return r=(2-o)*i,n=o*s,[a,100*(n=(n/=(t=(2-o)*s)<=1?t:2-t)||0),100*(r/=2)]},a.hwb.rgb=function(e){var t,n,r,a,o,i,s,d=e[0]/360,l=e[1]/100,u=e[2]/100,c=l+u;switch(c>1&&(l/=c,u/=c),r=6*d-(t=Math.floor(6*d)),0!=(1&t)&&(r=1-r),a=l+r*((n=1-u)-l),t){default:case 6:case 0:o=n,i=a,s=l;break;case 1:o=a,i=n,s=l;break;case 2:o=l,i=n,s=a;break;case 3:o=l,i=a,s=n;break;case 4:o=a,i=l,s=n;break;case 5:o=n,i=l,s=a}return[255*o,255*i,255*s]},a.cmyk.rgb=function(e){var t=e[0]/100,n=e[1]/100,r=e[2]/100,a=e[3]/100;return[255*(1-Math.min(1,t*(1-a)+a)),255*(1-Math.min(1,n*(1-a)+a)),255*(1-Math.min(1,r*(1-a)+a))]},a.xyz.rgb=function(e){var t,n,r,a=e[0]/100,o=e[1]/100,i=e[2]/100;return n=-.9689*a+1.8758*o+.0415*i,r=.0557*a+-.204*o+1.057*i,t=(t=3.2406*a+-1.5372*o+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]},a.xyz.lab=function(e){var t=e[0],n=e[1],r=e[2];return n/=100,r/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},a.lab.xyz=function(e){var t,n,r,a=e[0];t=e[1]/500+(n=(a+16)/116),r=n-e[2]/200;var o=Math.pow(n,3),i=Math.pow(t,3),s=Math.pow(r,3);return n=o>.008856?o:(n-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,r=s>.008856?s:(r-16/116)/7.787,[t*=95.047,n*=100,r*=108.883]},a.lab.lch=function(e){var t,n=e[0],r=e[1],a=e[2];return(t=360*Math.atan2(a,r)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(r*r+a*a),t]},a.lch.lab=function(e){var t,n=e[0],r=e[1];return t=e[2]/360*2*Math.PI,[n,r*Math.cos(t),r*Math.sin(t)]},a.rgb.ansi16=function(e){var t=e[0],n=e[1],r=e[2],o=1 in arguments?arguments[1]:a.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var i=30+(Math.round(r/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===o&&(i+=60),i},a.hsv.ansi16=function(e){return a.rgb.ansi16(a.hsv.rgb(e),e[2])},a.rgb.ansi256=function(e){var t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},a.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},a.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var n;return e-=16,[Math.floor(e/36)/5*255,Math.floor((n=e%36)/6)/5*255,n%6/5*255]},a.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},a.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var n=t[0];3===t[0].length&&(n=n.split("").map((function(e){return e+e})).join(""));var r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},a.rgb.hcg=function(e){var t,n=e[0]/255,r=e[1]/255,a=e[2]/255,o=Math.max(Math.max(n,r),a),i=Math.min(Math.min(n,r),a),s=o-i;return t=s<=0?0:o===n?(r-a)/s%6:o===r?2+(a-n)/s:4+(n-r)/s+4,t/=6,[360*(t%=1),100*s,100*(s<1?i/(1-s):0)]},a.hsl.hcg=function(e){var t,n=e[1]/100,r=e[2]/100,a=0;return(t=r<.5?2*n*r:2*n*(1-r))<1&&(a=(r-.5*t)/(1-t)),[e[0],100*t,100*a]},a.hsv.hcg=function(e){var t=e[1]/100,n=e[2]/100,r=t*n,a=0;return r<1&&(a=(n-r)/(1-r)),[e[0],100*r,100*a]},a.hcg.rgb=function(e){var t=e[0]/360,n=e[1]/100,r=e[2]/100;if(0===n)return[255*r,255*r,255*r];var a,o=[0,0,0],i=t%1*6,s=i%1,d=1-s;switch(Math.floor(i)){case 0:o[0]=1,o[1]=s,o[2]=0;break;case 1:o[0]=d,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=s;break;case 3:o[0]=0,o[1]=d,o[2]=1;break;case 4:o[0]=s,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=d}return a=(1-n)*r,[255*(n*o[0]+a),255*(n*o[1]+a),255*(n*o[2]+a)]},a.hcg.hsv=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t),r=0;return n>0&&(r=t/n),[e[0],100*r,100*n]},a.hcg.hsl=function(e){var t=e[1]/100,n=e[2]/100*(1-t)+.5*t,r=0;return n>0&&n<.5?r=t/(2*n):n>=.5&&n<1&&(r=t/(2*(1-n))),[e[0],100*r,100*n]},a.hcg.hwb=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},a.hwb.hcg=function(e){var t=e[1]/100,n=1-e[2]/100,r=n-t,a=0;return r<1&&(a=(n-r)/(1-r)),[e[0],100*r,100*a]},a.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},a.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},a.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},a.gray.hsl=a.gray.hsv=function(e){return[0,0,e[0]]},a.gray.hwb=function(e){return[0,100,e[0]]},a.gray.cmyk=function(e){return[0,0,0,e[0]]},a.gray.lab=function(e){return[e[0],0,0]},a.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},a.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}}));function r(e){var t=function(){for(var e={},t=Object.keys(n),r=t.length,a=0;a<r;a++)e[t[a]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var a=r.pop(),o=Object.keys(n[a]),i=o.length,s=0;s<i;s++){var d=o[s],l=t[d];-1===l.distance&&(l.distance=t[a].distance+1,l.parent=a,r.unshift(d))}return t}function a(e,t){return function(n){return t(e(n))}}function o(e,t){for(var r=[t[e].parent,e],o=n[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),o=a(n[t[i].parent][i],o),i=t[i].parent;return o.conversion=r,o}n.rgb,n.hsl,n.hsv,n.hwb,n.cmyk,n.xyz,n.lab,n.lch,n.hex,n.keyword,n.ansi16,n.ansi256,n.hcg,n.apple,n.gray;var i={};Object.keys(n).forEach((function(e){i[e]={},Object.defineProperty(i[e],"channels",{value:n[e].channels}),Object.defineProperty(i[e],"labels",{value:n[e].labels});var t=function(e){for(var t=r(e),n={},a=Object.keys(t),i=a.length,s=0;s<i;s++){var d=a[s];null!==t[d].parent&&(n[d]=o(d,t))}return n}(e);Object.keys(t).forEach((function(n){var r=t[n];i[e][n]=function(e){var t=function(t){if(null==t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var n=e(t);if("object"==typeof n)for(var r=n.length,a=0;a<r;a++)n[a]=Math.round(n[a]);return n};return"conversion"in e&&(t.conversion=e.conversion),t}(r),i[e][n].raw=function(e){var t=function(t){return null==t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(r)}))}));var s=i,d={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},l={getRgba:u,getHsla:c,getRgb:function(e){var t=u(e);return t&&t.slice(0,3)},getHsl:function(e){var t=c(e);return t&&t.slice(0,3)},getHwb:m,getAlpha:function(e){var t=u(e);return t||(t=c(e))||(t=m(e))?t[3]:void 0},hexString:function(e,t){return t=void 0!==t&&3===e.length?t:e[3],"#"+g(e[0])+g(e[1])+g(e[2])+(t>=0&&t<1?g(Math.round(255*t)):"")},rgbString:function(e,t){return t<1||e[3]&&e[3]<1?_(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"},rgbaString:_,percentString:function(e,t){return t<1||e[3]&&e[3]<1?h(e,t):"rgb("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%)"},percentaString:h,hslString:function(e,t){return t<1||e[3]&&e[3]<1?f(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"},hslaString:f,hwbString:function(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"},keyword:function(e){return y[e.slice(0,3)]}};function u(e){if(e){var t=[0,0,0],n=1,r=e.match(/^#([a-fA-F0-9]{3,4})$/i),a="";if(r){a=(r=r[1])[3];for(var o=0;o<t.length;o++)t[o]=parseInt(r[o]+r[o],16);a&&(n=Math.round(parseInt(a+a,16)/255*100)/100)}else if(r=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){for(a=r[2],r=r[1],o=0;o<t.length;o++)t[o]=parseInt(r.slice(2*o,2*o+2),16);a&&(n=Math.round(parseInt(a,16)/255*100)/100)}else if(r=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(o=0;o<t.length;o++)t[o]=parseInt(r[o+1]);n=parseFloat(r[4])}else if(r=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(o=0;o<t.length;o++)t[o]=Math.round(2.55*parseFloat(r[o+1]));n=parseFloat(r[4])}else if(r=e.match(/(\w+)/)){if("transparent"==r[1])return[0,0,0,0];if(!(t=d[r[1]]))return}for(o=0;o<t.length;o++)t[o]=p(t[o],0,255);return n=n||0==n?p(n,0,1):1,t[3]=n,t}}function c(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[p(parseInt(t[1]),0,360),p(parseFloat(t[2]),0,100),p(parseFloat(t[3]),0,100),p(isNaN(n)?1:n,0,1)]}}}function m(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[p(parseInt(t[1]),0,360),p(parseFloat(t[2]),0,100),p(parseFloat(t[3]),0,100),p(isNaN(n)?1:n,0,1)]}}}function _(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function h(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function f(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function p(e,t,n){return Math.min(Math.max(t,e),n)}function g(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var y={};for(var b in d)y[d[b]]=b;var M=function(e){return e instanceof M?e:this instanceof M?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(t=l.getRgba(e))?this.setValues("rgb",t):(t=l.getHsla(e))?this.setValues("hsl",t):(t=l.getHwb(e))&&this.setValues("hwb",t):"object"==typeof e&&(void 0!==(t=e).r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t)))):new M(e);var t};M.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return l.hexString(this.values.rgb)},rgbString:function(){return l.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return l.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return l.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return l.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return l.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return l.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return l.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],n=0;n<e.length;n++){var r=e[n]/255;t[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,n=(t[0]+e)%360;return t[0]=n<0?360+n:n,this.setValues("hsl",t),this},mix:function(e,t){var n=this,r=e,a=void 0===t?.5:t,o=2*a-1,i=n.alpha()-r.alpha(),s=((o*i==-1?o:(o+i)/(1+o*i))+1)/2,d=1-s;return this.rgb(s*n.red()+d*r.red(),s*n.green()+d*r.green(),s*n.blue()+d*r.blue()).alpha(n.alpha()*a+r.alpha()*(1-a))},toJSON:function(){return this.rgb()},clone:function(){var e,t,n=new M,r=this.values,a=n.values;for(var o in r)r.hasOwnProperty(o)&&(e=r[o],"[object Array]"===(t={}.toString.call(e))?a[o]=e.slice(0):"[object Number]"===t?a[o]=e:console.error("unexpected color value:",e));return n}},M.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},M.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},M.prototype.getValues=function(e){for(var t=this.values,n={},r=0;r<e.length;r++)n[e.charAt(r)]=t[e][r];return 1!==t.alpha&&(n.a=t.alpha),n},M.prototype.setValues=function(e,t){var n,r,a=this.values,o=this.spaces,i=this.maxes,d=1;if(this.valid=!0,"alpha"===e)d=t;else if(t.length)a[e]=t.slice(0,e.length),d=t[e.length];else if(void 0!==t[e.charAt(0)]){for(n=0;n<e.length;n++)a[e][n]=t[e.charAt(n)];d=t.a}else if(void 0!==t[o[e][0]]){var l=o[e];for(n=0;n<e.length;n++)a[e][n]=t[l[n]];d=t.alpha}if(a.alpha=Math.max(0,Math.min(1,void 0===d?a.alpha:d)),"alpha"===e)return!1;for(n=0;n<e.length;n++)r=Math.max(0,Math.min(i[e][n],a[e][n])),a[e][n]=Math.round(r);for(var u in o)u!==e&&(a[u]=s[e][u](a[e]));return!0},M.prototype.setSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n),this)},M.prototype.setChannel=function(e,t,n){var r=this.values[e];return void 0===n?r[t]:(n===r[t]||(r[t]=n,this.setValues(e,r)),this)},"undefined"!=typeof window&&(window.Color=M);var v=M;function k(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}var A,x={noop:function(){},uid:(A=0,function(){return A++}),isNullOrUndef:function(e){return null==e},isArray:function(e){if(Array.isArray&&Array.isArray(e))return!0;var t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},isFinite:function(e){return("number"==typeof e||e instanceof Number)&&isFinite(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,n){return x.valueOrDefault(x.isArray(e)?e[t]:e,n)},callback:function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},each:function(e,t,n,r){var a,o,i;if(x.isArray(e))if(o=e.length,r)for(a=o-1;a>=0;a--)t.call(n,e[a],a);else for(a=0;a<o;a++)t.call(n,e[a],a);else if(x.isObject(e))for(o=(i=Object.keys(e)).length,a=0;a<o;a++)t.call(n,e[i[a]],i[a])},arrayEquals:function(e,t){var n,r,a,o;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(a=e[n],o=t[n],a instanceof Array&&o instanceof Array){if(!x.arrayEquals(a,o))return!1}else if(a!==o)return!1;return!0},clone:function(e){if(x.isArray(e))return e.map(x.clone);if(x.isObject(e)){for(var t=Object.create(e),n=Object.keys(e),r=n.length,a=0;a<r;++a)t[n[a]]=x.clone(e[n[a]]);return t}return e},_merger:function(e,t,n,r){if(k(e)){var a=t[e],o=n[e];x.isObject(a)&&x.isObject(o)?x.merge(a,o,r):t[e]=x.clone(o)}},_mergerIf:function(e,t,n){if(k(e)){var r=t[e],a=n[e];x.isObject(r)&&x.isObject(a)?x.mergeIf(r,a):t.hasOwnProperty(e)||(t[e]=x.clone(a))}},merge:function(e,t,n){var r,a,o,i,s,d=x.isArray(t)?t:[t],l=d.length;if(!x.isObject(e))return e;for(r=(n=n||{}).merger||x._merger,a=0;a<l;++a)if(t=d[a],x.isObject(t))for(s=0,i=(o=Object.keys(t)).length;s<i;++s)r(o[s],e,t,n);return e},mergeIf:function(e,t){return x.merge(e,t,{merger:x._mergerIf})},extend:Object.assign||function(e){return x.merge(e,[].slice.call(arguments,1),{merger:function(e,t,n){t[e]=n[e]}})},inherits:function(e){var t=this,n=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=t.prototype,n.prototype=new r,n.extend=x.inherits,e&&x.extend(n.prototype,e),n.__super__=t.prototype,n},_deprecated:function(e,t,n,r){void 0!==t&&console.warn(e+': "'+n+'" is deprecated. Please use "'+r+'" instead')}},w=x;x.callCallback=x.callback,x.indexOf=function(e,t,n){return Array.prototype.indexOf.call(e,t,n)},x.getValueOrDefault=x.valueOrDefault,x.getValueAtIndexOrDefault=x.valueAtIndexOrDefault;var L={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n))},easeOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:2==(e/=.5)?1:(n||(n=.45),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),e<1?r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-L.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*L.easeInBounce(2*e):.5*L.easeOutBounce(2*e-1)+.5}},Y={effects:L};w.easingEffects=L;var C=Math.PI,D=C/180,T=2*C,S=C/2,B=C/4,j=2*C/3,H={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,n,r,a,o){if(o){var i=Math.min(o,a/2,r/2),s=t+i,d=n+i,l=t+r-i,u=n+a-i;e.moveTo(t,d),s<l&&d<u?(e.arc(s,d,i,-C,-S),e.arc(l,d,i,-S,0),e.arc(l,u,i,0,S),e.arc(s,u,i,S,C)):s<l?(e.moveTo(s,n),e.arc(l,d,i,-S,S),e.arc(s,d,i,S,C+S)):d<u?(e.arc(s,d,i,-C,0),e.arc(s,u,i,0,C)):e.arc(s,d,i,-C,C),e.closePath(),e.moveTo(t,n)}else e.rect(t,n,r,a)},drawPoint:function(e,t,n,r,a,o){var i,s,d,l,u,c=(o||0)*D;if(t&&"object"==typeof t&&("[object HTMLImageElement]"===(i=t.toString())||"[object HTMLCanvasElement]"===i))return e.save(),e.translate(r,a),e.rotate(c),e.drawImage(t,-t.width/2,-t.height/2,t.width,t.height),void e.restore();if(!(isNaN(n)||n<=0)){switch(e.beginPath(),t){default:e.arc(r,a,n,0,T),e.closePath();break;case"triangle":e.moveTo(r+Math.sin(c)*n,a-Math.cos(c)*n),c+=j,e.lineTo(r+Math.sin(c)*n,a-Math.cos(c)*n),c+=j,e.lineTo(r+Math.sin(c)*n,a-Math.cos(c)*n),e.closePath();break;case"rectRounded":l=n-(u=.516*n),s=Math.cos(c+B)*l,d=Math.sin(c+B)*l,e.arc(r-s,a-d,u,c-C,c-S),e.arc(r+d,a-s,u,c-S,c),e.arc(r+s,a+d,u,c,c+S),e.arc(r-d,a+s,u,c+S,c+C),e.closePath();break;case"rect":if(!o){l=Math.SQRT1_2*n,e.rect(r-l,a-l,2*l,2*l);break}c+=B;case"rectRot":s=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(r-s,a-d),e.lineTo(r+d,a-s),e.lineTo(r+s,a+d),e.lineTo(r-d,a+s),e.closePath();break;case"crossRot":c+=B;case"cross":s=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(r-s,a-d),e.lineTo(r+s,a+d),e.moveTo(r+d,a-s),e.lineTo(r-d,a+s);break;case"star":s=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(r-s,a-d),e.lineTo(r+s,a+d),e.moveTo(r+d,a-s),e.lineTo(r-d,a+s),c+=B,s=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(r-s,a-d),e.lineTo(r+s,a+d),e.moveTo(r+d,a-s),e.lineTo(r-d,a+s);break;case"line":s=Math.cos(c)*n,d=Math.sin(c)*n,e.moveTo(r-s,a-d),e.lineTo(r+s,a+d);break;case"dash":e.moveTo(r,a),e.lineTo(r+Math.cos(c)*n,a+Math.sin(c)*n)}e.fill(),e.stroke()}},_isPointInArea:function(e,t){var n=1e-6;return e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,n,r){var a=n.steppedLine;if(a){if("middle"===a){var o=(t.x+n.x)/2;e.lineTo(o,r?n.y:t.y),e.lineTo(o,r?t.y:n.y)}else"after"===a&&!r||"after"!==a&&r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}else n.tension?e.bezierCurveTo(r?t.controlPointPreviousX:t.controlPointNextX,r?t.controlPointPreviousY:t.controlPointNextY,r?n.controlPointNextX:n.controlPointPreviousX,r?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):e.lineTo(n.x,n.y)}},P=H;w.clear=H.clear,w.drawRoundedRectangle=function(e){e.beginPath(),H.roundedRect.apply(H,arguments)};var O={_set:function(e,t){return w.merge(this[e]||(this[e]={}),t)}};O._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var F=O,E=w.valueOrDefault;var W={toLineHeight:function(e,t){var n=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,n,r,a;return w.isObject(e)?(t=+e.top||0,n=+e.right||0,r=+e.bottom||0,a=+e.left||0):t=n=r=a=+e||0,{top:t,right:n,bottom:r,left:a,height:t+r,width:a+n}},_parseFont:function(e){var t=F.global,n=E(e.fontSize,t.defaultFontSize),r={family:E(e.fontFamily,t.defaultFontFamily),lineHeight:w.options.toLineHeight(E(e.lineHeight,t.defaultLineHeight),n),size:n,style:E(e.fontStyle,t.defaultFontStyle),weight:null,string:""};return r.string=function(e){return!e||w.isNullOrUndef(e.size)||w.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(r),r},resolve:function(e,t,n,r){var a,o,i,s=!0;for(a=0,o=e.length;a<o;++a)if(void 0!==(i=e[a])&&(void 0!==t&&"function"==typeof i&&(i=i(t),s=!1),void 0!==n&&w.isArray(i)&&(i=i[n],s=!1),void 0!==i))return r&&!s&&(r.cacheable=!1),i}},z={_factorize:function(e){var t,n=[],r=Math.sqrt(e);for(t=1;t<r;t++)e%t==0&&(n.push(t),n.push(e/t));return r===(0|r)&&n.push(r),n.sort((function(e,t){return e-t})).pop(),n},log10:Math.log10||function(e){var t=Math.log(e)*Math.LOG10E,n=Math.round(t);return e===Math.pow(10,n)?n:t}},I=z;w.log10=z.log10;var N=w,R=Y,q=P,V=W,U=I,J={getRtlAdapter:function(e,t,n){return e?function(e,t){return{x:function(n){return e+e+t-n},setWidth:function(e){t=e},textAlign:function(e){return"center"===e?e:"right"===e?"left":"right"},xPlus:function(e,t){return e-t},leftForLtr:function(e,t){return e-t}}}(t,n):{x:function(e){return e},setWidth:function(e){},textAlign:function(e){return e},xPlus:function(e,t){return e+t},leftForLtr:function(e,t){return e}}},overrideTextDirection:function(e,t){var n,r;"ltr"!==t&&"rtl"!==t||(r=[(n=e.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=r)},restoreTextDirection:function(e){var t=e.prevTextDirection;void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}};N.easing=R,N.canvas=q,N.options=V,N.math=U,N.rtl=J;var G=function(e){N.extend(this,e),this.initialize.apply(this,arguments)};N.extend(G.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=N.extend({},e._model)),e._start={},e},transition:function(e){var t=this,n=t._model,r=t._start,a=t._view;return n&&1!==e?(a||(a=t._view={}),r||(r=t._start={}),function(e,t,n,r){var a,o,i,s,d,l,u,c,m,_=Object.keys(n);for(a=0,o=_.length;a<o;++a)if(l=n[i=_[a]],t.hasOwnProperty(i)||(t[i]=l),(s=t[i])!==l&&"_"!==i[0]){if(e.hasOwnProperty(i)||(e[i]=s),(u=typeof l)==typeof(d=e[i]))if("string"===u){if((c=v(d)).valid&&(m=v(l)).valid){t[i]=m.mix(c,r).rgbString();continue}}else if(N.isFinite(d)&&N.isFinite(l)){t[i]=d+(l-d)*r;continue}t[i]=l}}(r,a,n,e),t):(t._view=N.extend({},n),t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return N.isNumber(this._model.x)&&N.isNumber(this._model.y)}}),G.extend=N.inherits;var Z=G,$=Z.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),Q=$;Object.defineProperty($.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty($.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}}),F._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:N.noop,onComplete:N.noop}});var X={animations:[],request:null,addAnimation:function(e,t,n,r){var a,o,i=this.animations;for(t.chart=e,t.startTime=Date.now(),t.duration=n,r||(e.animating=!0),a=0,o=i.length;a<o;++a)if(i[a].chart===e)return void(i[a]=t);i.push(t),1===i.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=N.findIndex(this.animations,(function(t){return t.chart===e}));-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=N.requestAnimFrame.call(window,(function(){e.request=null,e.startDigest()})))},startDigest:function(){var e=this;e.advance(),e.animations.length>0&&e.requestAnimationFrame()},advance:function(){for(var e,t,n,r,a=this.animations,o=0;o<a.length;)t=(e=a[o]).chart,n=e.numSteps,r=Math.floor((Date.now()-e.startTime)/e.duration*n)+1,e.currentStep=Math.min(r,n),N.callback(e.render,[t,e],t),N.callback(e.onAnimationProgress,[e],t),e.currentStep>=n?(N.callback(e.onAnimationComplete,[e],t),t.animating=!1,a.splice(o,1)):++o}},K=N.options.resolve,ee=["push","pop","shift","splice","unshift"];function te(e,t){var n=e._chartjs;if(n){var r=n.listeners,a=r.indexOf(t);-1!==a&&r.splice(a,1),r.length>0||(ee.forEach((function(t){delete e[t]})),delete e._chartjs)}}var ne=function(e,t){this.initialize(e,t)};N.extend(ne.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(e,t){var n=this;n.chart=e,n.index=t,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),n=e.chart,r=n.scales,a=e.getDataset(),o=n.options.scales;null!==t.xAxisID&&t.xAxisID in r&&!a.xAxisID||(t.xAxisID=a.xAxisID||o.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in r&&!a.yAxisID||(t.yAxisID=a.yAxisID||o.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&te(this._data,this)},createMetaDataset:function(){var e=this,t=e.datasetElementType;return t&&new t({_chart:e.chart,_datasetIndex:e.index})},createMetaData:function(e){var t=this,n=t.dataElementType;return n&&new n({_chart:t.chart,_datasetIndex:t.index,_index:e})},addElements:function(){var e,t,n=this,r=n.getMeta(),a=n.getDataset().data||[],o=r.data;for(e=0,t=a.length;e<t;++e)o[e]=o[e]||n.createMetaData(e);r.dataset=r.dataset||n.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,t,n=this,r=n.getDataset(),a=r.data||(r.data=[]);n._data!==a&&(n._data&&te(n._data,n),a&&Object.isExtensible(a)&&(t=n,(e=a)._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),ee.forEach((function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),r=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),a=r.apply(this,t);return N.each(e._chartjs.listeners,(function(e){"function"==typeof e[n]&&e[n].apply(e,t)})),a}})})))),n._data=a),n.resyncElements()},_configure:function(){var e=this;e._config=N.merge(Object.create(null),[e.chart.options.datasets[e._type],e.getDataset()],{merger:function(e,t,n){"_meta"!==e&&"data"!==e&&N._merger(e,t,n)}})},_update:function(e){var t=this;t._configure(),t._cachedDataOpts=null,t.update(e)},update:N.noop,transition:function(e){for(var t=this.getMeta(),n=t.data||[],r=n.length,a=0;a<r;++a)n[a].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],n=t.length,r=0;for(e.dataset&&e.dataset.draw();r<n;++r)t[r].draw()},getStyle:function(e){var t,n=this,r=n.getMeta(),a=r.dataset;return n._configure(),a&&void 0===e?t=n._resolveDatasetElementOptions(a||{}):(e=e||0,t=n._resolveDataElementOptions(r.data[e]||{},e)),!1!==t.fill&&null!==t.fill||(t.backgroundColor=t.borderColor),t},_resolveDatasetElementOptions:function(e,t){var n,r,a,o,i=this,s=i.chart,d=i._config,l=e.custom||{},u=s.options.elements[i.datasetElementType.prototype._type]||{},c=i._datasetElementOptions,m={},_={chart:s,dataset:i.getDataset(),datasetIndex:i.index,hover:t};for(n=0,r=c.length;n<r;++n)a=c[n],o=t?"hover"+a.charAt(0).toUpperCase()+a.slice(1):a,m[a]=K([l[o],d[o],u[o]],_);return m},_resolveDataElementOptions:function(e,t){var n=this,r=e&&e.custom,a=n._cachedDataOpts;if(a&&!r)return a;var o,i,s,d,l=n.chart,u=n._config,c=l.options.elements[n.dataElementType.prototype._type]||{},m=n._dataElementOptions,_={},h={chart:l,dataIndex:t,dataset:n.getDataset(),datasetIndex:n.index},f={cacheable:!r};if(r=r||{},N.isArray(m))for(i=0,s=m.length;i<s;++i)_[d=m[i]]=K([r[d],u[d],c[d]],h,t,f);else for(i=0,s=(o=Object.keys(m)).length;i<s;++i)_[d=o[i]]=K([r[d],u[m[d]],u[d],c[d]],h,t,f);return f.cacheable&&(n._cachedDataOpts=Object.freeze(_)),_},removeHoverStyle:function(e){N.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},a=e._model,o=N.getHoverColor;e.$previousStyle={backgroundColor:a.backgroundColor,borderColor:a.borderColor,borderWidth:a.borderWidth},a.backgroundColor=K([r.hoverBackgroundColor,t.hoverBackgroundColor,o(a.backgroundColor)],void 0,n),a.borderColor=K([r.hoverBorderColor,t.hoverBorderColor,o(a.borderColor)],void 0,n),a.borderWidth=K([r.hoverBorderWidth,t.hoverBorderWidth,a.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var e=this.getMeta().dataset;e&&this.removeHoverStyle(e)},_setDatasetHoverStyle:function(){var e,t,n,r,a,o,i=this.getMeta().dataset,s={};if(i){for(o=i._model,a=this._resolveDatasetElementOptions(i,!0),e=0,t=(r=Object.keys(a)).length;e<t;++e)s[n=r[e]]=o[n],o[n]=a[n];i.$previousStyle=s}},resyncElements:function(){var e=this,t=e.getMeta(),n=e.getDataset().data,r=t.data.length,a=n.length;a<r?t.data.splice(a,r-a):a>r&&e.insertElements(r,a-r)},insertElements:function(e,t){for(var n=0;n<t;++n)this.addElementAndReset(e+n)},onDataPush:function(){var e=arguments.length;this.insertElements(this.getDataset().data.length-e,e)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),ne.extend=N.inherits;var re=ne,ae=2*Math.PI;function oe(e,t){var n=t.startAngle,r=t.endAngle,a=t.pixelMargin,o=a/t.outerRadius,i=t.x,s=t.y;e.beginPath(),e.arc(i,s,t.outerRadius,n-o,r+o),t.innerRadius>a?(o=a/t.innerRadius,e.arc(i,s,t.innerRadius-a,r+o,n-o,!0)):e.arc(i,s,a,r+Math.PI/2,n-Math.PI/2),e.closePath(),e.clip()}function ie(e,t,n){var r="inner"===t.borderAlign;r?(e.lineWidth=2*t.borderWidth,e.lineJoin="round"):(e.lineWidth=t.borderWidth,e.lineJoin="bevel"),n.fullCircles&&function(e,t,n,r){var a,o=n.endAngle;for(r&&(n.endAngle=n.startAngle+ae,oe(e,n),n.endAngle=o,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=ae,n.fullCircles--)),e.beginPath(),e.arc(n.x,n.y,n.innerRadius,n.startAngle+ae,n.startAngle,!0),a=0;a<n.fullCircles;++a)e.stroke();for(e.beginPath(),e.arc(n.x,n.y,t.outerRadius,n.startAngle,n.startAngle+ae),a=0;a<n.fullCircles;++a)e.stroke()}(e,t,n,r),r&&oe(e,n),e.beginPath(),e.arc(n.x,n.y,t.outerRadius,n.startAngle,n.endAngle),e.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),e.closePath(),e.stroke()}F._set("global",{elements:{arc:{backgroundColor:F.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var se=Z.extend({_type:"arc",inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var n=this._view;if(n){for(var r=N.getAngleFromPoint(n,{x:e,y:t}),a=r.angle,o=r.distance,i=n.startAngle,s=n.endAngle;s<i;)s+=ae;for(;a>s;)a-=ae;for(;a<i;)a+=ae;var d=a>=i&&a<=s,l=o>=n.innerRadius&&o<=n.outerRadius;return d&&l}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,n=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,n=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},draw:function(){var e,t=this._chart.ctx,n=this._view,r="inner"===n.borderAlign?.33:0,a={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-r,0),pixelMargin:r,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/ae)};if(t.save(),t.fillStyle=n.backgroundColor,t.strokeStyle=n.borderColor,a.fullCircles){for(a.endAngle=a.startAngle+ae,t.beginPath(),t.arc(a.x,a.y,a.outerRadius,a.startAngle,a.endAngle),t.arc(a.x,a.y,a.innerRadius,a.endAngle,a.startAngle,!0),t.closePath(),e=0;e<a.fullCircles;++e)t.fill();a.endAngle=a.startAngle+n.circumference%ae}t.beginPath(),t.arc(a.x,a.y,a.outerRadius,a.startAngle,a.endAngle),t.arc(a.x,a.y,a.innerRadius,a.endAngle,a.startAngle,!0),t.closePath(),t.fill(),n.borderWidth&&ie(t,n,a),t.restore()}}),de=N.valueOrDefault,le=F.global.defaultColor;F._set("global",{elements:{line:{tension:.4,backgroundColor:le,borderWidth:3,borderColor:le,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ue=Z.extend({_type:"line",draw:function(){var e,t,n,r=this,a=r._view,o=r._chart.ctx,i=a.spanGaps,s=r._children.slice(),d=F.global,l=d.elements.line,u=-1,c=r._loop;if(s.length){if(r._loop){for(e=0;e<s.length;++e)if(t=N.previousItem(s,e),!s[e]._view.skip&&t._view.skip){s=s.slice(e).concat(s.slice(0,e)),c=i;break}c&&s.push(s[0])}for(o.save(),o.lineCap=a.borderCapStyle||l.borderCapStyle,o.setLineDash&&o.setLineDash(a.borderDash||l.borderDash),o.lineDashOffset=de(a.borderDashOffset,l.borderDashOffset),o.lineJoin=a.borderJoinStyle||l.borderJoinStyle,o.lineWidth=de(a.borderWidth,l.borderWidth),o.strokeStyle=a.borderColor||d.defaultColor,o.beginPath(),(n=s[0]._view).skip||(o.moveTo(n.x,n.y),u=0),e=1;e<s.length;++e)n=s[e]._view,t=-1===u?N.previousItem(s,e):s[u],n.skip||(u!==e-1&&!i||-1===u?o.moveTo(n.x,n.y):N.canvas.lineTo(o,t._view,n),u=e);c&&o.closePath(),o.stroke(),o.restore()}}}),ce=N.valueOrDefault,me=F.global.defaultColor;function _e(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}F._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:me,borderColor:me,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var he=Z.extend({_type:"point",inRange:function(e,t){var n=this._view;return!!n&&Math.pow(e-n.x,2)+Math.pow(t-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:_e,inXRange:_e,inYRange:function(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius},getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,n=this._chart.ctx,r=t.pointStyle,a=t.rotation,o=t.radius,i=t.x,s=t.y,d=F.global,l=d.defaultColor;t.skip||(void 0===e||N.canvas._isPointInArea(t,e))&&(n.strokeStyle=t.borderColor||l,n.lineWidth=ce(t.borderWidth,d.elements.point.borderWidth),n.fillStyle=t.backgroundColor||l,N.canvas.drawPoint(n,r,o,i,s,a))}}),fe=F.global.defaultColor;function pe(e){return e&&void 0!==e.width}function ge(e){var t,n,r,a,o;return pe(e)?(o=e.width/2,t=e.x-o,n=e.x+o,r=Math.min(e.y,e.base),a=Math.max(e.y,e.base)):(o=e.height/2,t=Math.min(e.x,e.base),n=Math.max(e.x,e.base),r=e.y-o,a=e.y+o),{left:t,top:r,right:n,bottom:a}}function ye(e,t,n){return e===t?n:e===n?t:e}function be(e,t,n){var r,a,o,i,s=e.borderWidth,d=function(e){var t=e.borderSkipped,n={};return t?(e.horizontal?e.base>e.x&&(t=ye(t,"left","right")):e.base<e.y&&(t=ye(t,"bottom","top")),n[t]=!0,n):n}(e);return N.isObject(s)?(r=+s.top||0,a=+s.right||0,o=+s.bottom||0,i=+s.left||0):r=a=o=i=+s||0,{t:d.top||r<0?0:r>n?n:r,r:d.right||a<0?0:a>t?t:a,b:d.bottom||o<0?0:o>n?n:o,l:d.left||i<0?0:i>t?t:i}}function Me(e,t,n){var r=null===t,a=null===n,o=!(!e||r&&a)&&ge(e);return o&&(r||t>=o.left&&t<=o.right)&&(a||n>=o.top&&n<=o.bottom)}F._set("global",{elements:{rectangle:{backgroundColor:fe,borderColor:fe,borderSkipped:"bottom",borderWidth:0}}});var ve=Z.extend({_type:"rectangle",draw:function(){var e=this._chart.ctx,t=this._view,n=function(e){var t=ge(e),n=t.right-t.left,r=t.bottom-t.top,a=be(e,n/2,r/2);return{outer:{x:t.left,y:t.top,w:n,h:r},inner:{x:t.left+a.l,y:t.top+a.t,w:n-a.l-a.r,h:r-a.t-a.b}}}(t),r=n.outer,a=n.inner;e.fillStyle=t.backgroundColor,e.fillRect(r.x,r.y,r.w,r.h),r.w===a.w&&r.h===a.h||(e.save(),e.beginPath(),e.rect(r.x,r.y,r.w,r.h),e.clip(),e.fillStyle=t.borderColor,e.rect(a.x,a.y,a.w,a.h),e.fill("evenodd"),e.restore())},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){return Me(this._view,e,t)},inLabelRange:function(e,t){var n=this._view;return pe(n)?Me(n,e,null):Me(n,null,t)},inXRange:function(e){return Me(this._view,e,null)},inYRange:function(e){return Me(this._view,null,e)},getCenterPoint:function(){var e,t,n=this._view;return pe(n)?(e=n.x,t=(n.y+n.base)/2):(e=(n.x+n.base)/2,t=n.y),{x:e,y:t}},getArea:function(){var e=this._view;return pe(e)?e.width*Math.abs(e.y-e.base):e.height*Math.abs(e.x-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),ke={},Ae=se,xe=ue,we=he,Le=ve;ke.Arc=Ae,ke.Line=xe,ke.Point=we,ke.Rectangle=Le;var Ye=N._deprecated,Ce=N.valueOrDefault;function De(e,t,n){var r,a,o=n.barThickness,i=t.stackCount,s=t.pixels[e],d=N.isNullOrUndef(o)?function(e,t){var n,r,a,o,i=e._length;for(a=1,o=t.length;a<o;++a)i=Math.min(i,Math.abs(t[a]-t[a-1]));for(a=0,o=e.getTicks().length;a<o;++a)r=e.getPixelForTick(a),i=a>0?Math.min(i,Math.abs(r-n)):i,n=r;return i}(t.scale,t.pixels):-1;return N.isNullOrUndef(o)?(r=d*n.categoryPercentage,a=n.barPercentage):(r=o*i,a=1),{chunk:r/i,ratio:a,start:s-r/2}}F._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),F._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Te=re.extend({dataElementType:ke.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var e,t,n=this;re.prototype.initialize.apply(n,arguments),(e=n.getMeta()).stack=n.getDataset().stack,e.bar=!0,t=n._getIndexScale().options,Ye("bar chart",t.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),Ye("bar chart",t.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),Ye("bar chart",t.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),Ye("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),Ye("bar chart",t.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(e){var t,n,r=this,a=r.getMeta().data;for(r._ruler=r.getRuler(),t=0,n=a.length;t<n;++t)r.updateElement(a[t],t,e)},updateElement:function(e,t,n){var r=this,a=r.getMeta(),o=r.getDataset(),i=r._resolveDataElementOptions(e,t);e._xScale=r.getScaleForId(a.xAxisID),e._yScale=r.getScaleForId(a.yAxisID),e._datasetIndex=r.index,e._index=t,e._model={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderSkipped:i.borderSkipped,borderWidth:i.borderWidth,datasetLabel:o.label,label:r.chart.data.labels[t]},N.isArray(o.data[t])&&(e._model.borderSkipped=null),r._updateElementGeometry(e,t,n,i),e.pivot()},_updateElementGeometry:function(e,t,n,r){var a=this,o=e._model,i=a._getValueScale(),s=i.getBasePixel(),d=i.isHorizontal(),l=a._ruler||a.getRuler(),u=a.calculateBarValuePixels(a.index,t,r),c=a.calculateBarIndexPixels(a.index,t,l,r);o.horizontal=d,o.base=n?s:u.base,o.x=d?n?s:u.head:c.center,o.y=d?c.center:n?s:u.head,o.height=d?c.size:void 0,o.width=d?void 0:c.size},_getStacks:function(e){var t,n,r=this._getIndexScale(),a=r._getMatchingVisibleMetas(this._type),o=r.options.stacked,i=a.length,s=[];for(t=0;t<i&&(n=a[t],(!1===o||-1===s.indexOf(n.stack)||void 0===o&&void 0===n.stack)&&s.push(n.stack),n.index!==e);++t);return s},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var n=this._getStacks(e),r=void 0!==t?n.indexOf(t):-1;return-1===r?n.length-1:r},getRuler:function(){var e,t,n=this,r=n._getIndexScale(),a=[];for(e=0,t=n.getMeta().data.length;e<t;++e)a.push(r.getPixelForValue(null,e,n.index));return{pixels:a,start:r._startPixel,end:r._endPixel,stackCount:n.getStackCount(),scale:r}},calculateBarValuePixels:function(e,t,n){var r,a,o,i,s,d,l,u=this,c=u.chart,m=u._getValueScale(),_=m.isHorizontal(),h=c.data.datasets,f=m._getMatchingVisibleMetas(u._type),p=m._parseValue(h[e].data[t]),g=n.minBarLength,y=m.options.stacked,b=u.getMeta().stack,M=void 0===p.start?0:p.max>=0&&p.min>=0?p.min:p.max,v=void 0===p.start?p.end:p.max>=0&&p.min>=0?p.max-p.min:p.min-p.max,k=f.length;if(y||void 0===y&&void 0!==b)for(r=0;r<k&&(a=f[r]).index!==e;++r)a.stack===b&&(o=void 0===(l=m._parseValue(h[a.index].data[t])).start?l.end:l.min>=0&&l.max>=0?l.max:l.min,(p.min<0&&o<0||p.max>=0&&o>0)&&(M+=o));return i=m.getPixelForValue(M),d=(s=m.getPixelForValue(M+v))-i,void 0!==g&&Math.abs(d)<g&&(d=g,s=v>=0&&!_||v<0&&_?i-g:i+g),{size:d,base:i,head:s,center:s+d/2}},calculateBarIndexPixels:function(e,t,n,r){var a="flex"===r.barThickness?function(e,t,n){var r,a=t.pixels,o=a[e],i=e>0?a[e-1]:null,s=e<a.length-1?a[e+1]:null,d=n.categoryPercentage;return null===i&&(i=o-(null===s?t.end-t.start:s-o)),null===s&&(s=o+o-i),r=o-(o-Math.min(i,s))/2*d,{chunk:Math.abs(s-i)/2*d/t.stackCount,ratio:n.barPercentage,start:r}}(t,n,r):De(t,n,r),o=this.getStackIndex(e,this.getMeta().stack),i=a.start+a.chunk*o+a.chunk/2,s=Math.min(Ce(r.maxBarThickness,1/0),a.chunk*a.ratio);return{base:i-s/2,head:i+s/2,center:i,size:s}},draw:function(){var e=this,t=e.chart,n=e._getValueScale(),r=e.getMeta().data,a=e.getDataset(),o=r.length,i=0;for(N.canvas.clipArea(t.ctx,t.chartArea);i<o;++i){var s=n._parseValue(a.data[i]);isNaN(s.min)||isNaN(s.max)||r[i].draw()}N.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var e=this,t=N.extend({},re.prototype._resolveDataElementOptions.apply(e,arguments)),n=e._getIndexScale().options,r=e._getValueScale().options;return t.barPercentage=Ce(n.barPercentage,t.barPercentage),t.barThickness=Ce(n.barThickness,t.barThickness),t.categoryPercentage=Ce(n.categoryPercentage,t.categoryPercentage),t.maxBarThickness=Ce(n.maxBarThickness,t.maxBarThickness),t.minBarLength=Ce(r.minBarLength,t.minBarLength),t}}),Se=N.valueOrDefault,Be=N.options.resolve;F._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.datasets[e.datasetIndex].label||"",r=t.datasets[e.datasetIndex].data[e.index];return n+": ("+e.xLabel+", "+e.yLabel+", "+r.r+")"}}}});var je=re.extend({dataElementType:ke.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(e){var t=this,n=t.getMeta().data;N.each(n,(function(n,r){t.updateElement(n,r,e)}))},updateElement:function(e,t,n){var r=this,a=r.getMeta(),o=e.custom||{},i=r.getScaleForId(a.xAxisID),s=r.getScaleForId(a.yAxisID),d=r._resolveDataElementOptions(e,t),l=r.getDataset().data[t],u=r.index,c=n?i.getPixelForDecimal(.5):i.getPixelForValue("object"==typeof l?l:NaN,t,u),m=n?s.getBasePixel():s.getPixelForValue(l,t,u);e._xScale=i,e._yScale=s,e._options=d,e._datasetIndex=u,e._index=t,e._model={backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,hitRadius:d.hitRadius,pointStyle:d.pointStyle,rotation:d.rotation,radius:n?0:d.radius,skip:o.skip||isNaN(c)||isNaN(m),x:c,y:m},e.pivot()},setHoverStyle:function(e){var t=e._model,n=e._options,r=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=Se(n.hoverBackgroundColor,r(n.backgroundColor)),t.borderColor=Se(n.hoverBorderColor,r(n.borderColor)),t.borderWidth=Se(n.hoverBorderWidth,n.borderWidth),t.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(e,t){var n=this,r=n.chart,a=n.getDataset(),o=e.custom||{},i=a.data[t]||{},s=re.prototype._resolveDataElementOptions.apply(n,arguments),d={chart:r,dataIndex:t,dataset:a,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=N.extend({},s)),s.radius=Be([o.radius,i.r,n._config.radius,r.options.elements.point.radius],d,t),s}}),He=N.valueOrDefault,Pe=Math.PI,Oe=2*Pe,Fe=Pe/2;F._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t,n,r,a=document.createElement("ul"),o=e.data,i=o.datasets,s=o.labels;if(a.setAttribute("class",e.id+"-legend"),i.length)for(t=0,n=i[0].data.length;t<n;++t)(r=a.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=i[0].backgroundColor[t],s[t]&&r.appendChild(document.createTextNode(s[t]));return a.outerHTML},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(n,r){var a=e.getDatasetMeta(0),o=a.controller.getStyle(r);return{text:n,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,lineWidth:o.borderWidth,hidden:isNaN(t.datasets[0].data[r])||a.data[r].hidden,index:r}})):[]}},onClick:function(e,t){var n,r,a,o=t.index,i=this.chart;for(n=0,r=(i.data.datasets||[]).length;n<r;++n)(a=i.getDatasetMeta(n)).data[o]&&(a.data[o].hidden=!a.data[o].hidden);i.update()}},cutoutPercentage:50,rotation:-Fe,circumference:Oe,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.labels[e.index],r=": "+t.datasets[e.datasetIndex].data[e.index];return N.isArray(n)?(n=n.slice())[0]+=r:n+=r,n}}}});var Ee=re.extend({dataElementType:ke.Arc,linkScales:N.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&++t;return t},update:function(e){var t,n,r,a,o=this,i=o.chart,s=i.chartArea,d=i.options,l=1,u=1,c=0,m=0,_=o.getMeta(),h=_.data,f=d.cutoutPercentage/100||0,p=d.circumference,g=o._getRingWeight(o.index);if(p<Oe){var y=d.rotation%Oe,b=(y+=y>=Pe?-Oe:y<-Pe?Oe:0)+p,M=Math.cos(y),v=Math.sin(y),k=Math.cos(b),A=Math.sin(b),x=y<=0&&b>=0||b>=Oe,w=y<=Fe&&b>=Fe||b>=Oe+Fe,L=y<=-Fe&&b>=-Fe||b>=Pe+Fe,Y=y===-Pe||b>=Pe?-1:Math.min(M,M*f,k,k*f),C=L?-1:Math.min(v,v*f,A,A*f),D=x?1:Math.max(M,M*f,k,k*f),T=w?1:Math.max(v,v*f,A,A*f);l=(D-Y)/2,u=(T-C)/2,c=-(D+Y)/2,m=-(T+C)/2}for(r=0,a=h.length;r<a;++r)h[r]._options=o._resolveDataElementOptions(h[r],r);for(i.borderWidth=o.getMaxBorderWidth(),t=(s.right-s.left-i.borderWidth)/l,n=(s.bottom-s.top-i.borderWidth)/u,i.outerRadius=Math.max(Math.min(t,n)/2,0),i.innerRadius=Math.max(i.outerRadius*f,0),i.radiusLength=(i.outerRadius-i.innerRadius)/(o._getVisibleDatasetWeightTotal()||1),i.offsetX=c*i.outerRadius,i.offsetY=m*i.outerRadius,_.total=o.calculateTotal(),o.outerRadius=i.outerRadius-i.radiusLength*o._getRingWeightOffset(o.index),o.innerRadius=Math.max(o.outerRadius-i.radiusLength*g,0),r=0,a=h.length;r<a;++r)o.updateElement(h[r],r,e)},updateElement:function(e,t,n){var r=this,a=r.chart,o=a.chartArea,i=a.options,s=i.animation,d=(o.left+o.right)/2,l=(o.top+o.bottom)/2,u=i.rotation,c=i.rotation,m=r.getDataset(),_=n&&s.animateRotate||e.hidden?0:r.calculateCircumference(m.data[t])*(i.circumference/Oe),h=n&&s.animateScale?0:r.innerRadius,f=n&&s.animateScale?0:r.outerRadius,p=e._options||{};N.extend(e,{_datasetIndex:r.index,_index:t,_model:{backgroundColor:p.backgroundColor,borderColor:p.borderColor,borderWidth:p.borderWidth,borderAlign:p.borderAlign,x:d+a.offsetX,y:l+a.offsetY,startAngle:u,endAngle:c,circumference:_,outerRadius:f,innerRadius:h,label:N.valueAtIndexOrDefault(m.label,t,a.data.labels[t])}});var g=e._model;n&&s.animateRotate||(g.startAngle=0===t?i.rotation:r.getMeta().data[t-1]._model.endAngle,g.endAngle=g.startAngle+g.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),n=this.getMeta(),r=0;return N.each(n.data,(function(n,a){e=t.data[a],isNaN(e)||n.hidden||(r+=Math.abs(e))})),r},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?Oe*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){var t,n,r,a,o,i,s,d,l=0,u=this.chart;if(!e)for(t=0,n=u.data.datasets.length;t<n;++t)if(u.isDatasetVisible(t)){e=(r=u.getDatasetMeta(t)).data,t!==this.index&&(o=r.controller);break}if(!e)return 0;for(t=0,n=e.length;t<n;++t)a=e[t],o?(o._configure(),i=o._resolveDataElementOptions(a,t)):i=a._options,"inner"!==i.borderAlign&&(s=i.borderWidth,l=(d=i.hoverBorderWidth)>(l=s>l?s:l)?d:l);return l},setHoverStyle:function(e){var t=e._model,n=e._options,r=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=He(n.hoverBackgroundColor,r(n.backgroundColor)),t.borderColor=He(n.hoverBorderColor,r(n.borderColor)),t.borderWidth=He(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t},_getRingWeight:function(e){return Math.max(He(this.chart.data.datasets[e].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});F._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),F._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var We=Te.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),ze=N.valueOrDefault,Ie=N.options.resolve,Ne=N.canvas._isPointInArea;function Re(e,t){var n=e&&e.options.ticks||{},r=n.reverse,a=void 0===n.min?t:0,o=void 0===n.max?t:0;return{start:r?o:a,end:r?a:o}}function qe(e,t,n){var r=n/2,a=Re(e,r),o=Re(t,r);return{top:o.end,right:a.end,bottom:o.start,left:a.start}}function Ve(e){var t,n,r,a;return N.isObject(e)?(t=e.top,n=e.right,r=e.bottom,a=e.left):t=n=r=a=e,{top:t,right:n,bottom:r,left:a}}F._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Ue=re.extend({datasetElementType:ke.Line,dataElementType:ke.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(e){var t,n,r=this,a=r.getMeta(),o=a.dataset,i=a.data||[],s=r.chart.options,d=r._config,l=r._showLine=ze(d.showLine,s.showLines);for(r._xScale=r.getScaleForId(a.xAxisID),r._yScale=r.getScaleForId(a.yAxisID),l&&(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),o._scale=r._yScale,o._datasetIndex=r.index,o._children=i,o._model=r._resolveDatasetElementOptions(o),o.pivot()),t=0,n=i.length;t<n;++t)r.updateElement(i[t],t,e);for(l&&0!==o._model.tension&&r.updateBezierControlPoints(),t=0,n=i.length;t<n;++t)i[t].pivot()},updateElement:function(e,t,n){var r,a,o=this,i=o.getMeta(),s=e.custom||{},d=o.getDataset(),l=o.index,u=d.data[t],c=o._xScale,m=o._yScale,_=i.dataset._model,h=o._resolveDataElementOptions(e,t);r=c.getPixelForValue("object"==typeof u?u:NaN,t,l),a=n?m.getBasePixel():o.calculatePointY(u,t,l),e._xScale=c,e._yScale=m,e._options=h,e._datasetIndex=l,e._index=t,e._model={x:r,y:a,skip:s.skip||isNaN(r)||isNaN(a),radius:h.radius,pointStyle:h.pointStyle,rotation:h.rotation,backgroundColor:h.backgroundColor,borderColor:h.borderColor,borderWidth:h.borderWidth,tension:ze(s.tension,_?_.tension:0),steppedLine:!!_&&_.steppedLine,hitRadius:h.hitRadius}},_resolveDatasetElementOptions:function(e){var t=this,n=t._config,r=e.custom||{},a=t.chart.options,o=a.elements.line,i=re.prototype._resolveDatasetElementOptions.apply(t,arguments);return i.spanGaps=ze(n.spanGaps,a.spanGaps),i.tension=ze(n.lineTension,o.tension),i.steppedLine=Ie([r.steppedLine,n.steppedLine,o.stepped]),i.clip=Ve(ze(n.clip,qe(t._xScale,t._yScale,i.borderWidth))),i},calculatePointY:function(e,t,n){var r,a,o,i,s,d,l,u=this.chart,c=this._yScale,m=0,_=0;if(c.options.stacked){for(s=+c.getRightValue(e),l=(d=u._getSortedVisibleDatasetMetas()).length,r=0;r<l&&(o=d[r]).index!==n;++r)a=u.data.datasets[o.index],"line"===o.type&&o.yAxisID===c.id&&((i=+c.getRightValue(a.data[t]))<0?_+=i||0:m+=i||0);return s<0?c.getPixelForValue(_+s):c.getPixelForValue(m+s)}return c.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,n,r,a=this.chart,o=this.getMeta(),i=o.dataset._model,s=a.chartArea,d=o.data||[];function l(e,t,n){return Math.max(Math.min(e,n),t)}if(i.spanGaps&&(d=d.filter((function(e){return!e._model.skip}))),"monotone"===i.cubicInterpolationMode)N.splineCurveMonotone(d);else for(e=0,t=d.length;e<t;++e)n=d[e]._model,r=N.splineCurve(N.previousItem(d,e)._model,n,N.nextItem(d,e)._model,i.tension),n.controlPointPreviousX=r.previous.x,n.controlPointPreviousY=r.previous.y,n.controlPointNextX=r.next.x,n.controlPointNextY=r.next.y;if(a.options.elements.line.capBezierPoints)for(e=0,t=d.length;e<t;++e)n=d[e]._model,Ne(n,s)&&(e>0&&Ne(d[e-1]._model,s)&&(n.controlPointPreviousX=l(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=l(n.controlPointPreviousY,s.top,s.bottom)),e<d.length-1&&Ne(d[e+1]._model,s)&&(n.controlPointNextX=l(n.controlPointNextX,s.left,s.right),n.controlPointNextY=l(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var e,t=this,n=t.chart,r=t.getMeta(),a=r.data||[],o=n.chartArea,i=n.canvas,s=0,d=a.length;for(t._showLine&&(e=r.dataset._model.clip,N.canvas.clipArea(n.ctx,{left:!1===e.left?0:o.left-e.left,right:!1===e.right?i.width:o.right+e.right,top:!1===e.top?0:o.top-e.top,bottom:!1===e.bottom?i.height:o.bottom+e.bottom}),r.dataset.draw(),N.canvas.unclipArea(n.ctx));s<d;++s)a[s].draw(o)},setHoverStyle:function(e){var t=e._model,n=e._options,r=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=ze(n.hoverBackgroundColor,r(n.backgroundColor)),t.borderColor=ze(n.hoverBorderColor,r(n.borderColor)),t.borderWidth=ze(n.hoverBorderWidth,n.borderWidth),t.radius=ze(n.hoverRadius,n.radius)}}),Je=N.options.resolve;F._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t,n,r,a=document.createElement("ul"),o=e.data,i=o.datasets,s=o.labels;if(a.setAttribute("class",e.id+"-legend"),i.length)for(t=0,n=i[0].data.length;t<n;++t)(r=a.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=i[0].backgroundColor[t],s[t]&&r.appendChild(document.createTextNode(s[t]));return a.outerHTML},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map((function(n,r){var a=e.getDatasetMeta(0),o=a.controller.getStyle(r);return{text:n,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,lineWidth:o.borderWidth,hidden:isNaN(t.datasets[0].data[r])||a.data[r].hidden,index:r}})):[]}},onClick:function(e,t){var n,r,a,o=t.index,i=this.chart;for(n=0,r=(i.data.datasets||[]).length;n<r;++n)(a=i.getDatasetMeta(n)).data[o].hidden=!a.data[o].hidden;i.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var Ge=re.extend({dataElementType:ke.Arc,linkScales:N.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(e){var t,n,r,a=this,o=a.getDataset(),i=a.getMeta(),s=a.chart.options.startAngle||0,d=a._starts=[],l=a._angles=[],u=i.data;for(a._updateRadius(),i.count=a.countVisibleElements(),t=0,n=o.data.length;t<n;t++)d[t]=s,r=a._computeAngle(t),l[t]=r,s+=r;for(t=0,n=u.length;t<n;++t)u[t]._options=a._resolveDataElementOptions(u[t],t),a.updateElement(u[t],t,e)},_updateRadius:function(){var e=this,t=e.chart,n=t.chartArea,r=t.options,a=Math.min(n.right-n.left,n.bottom-n.top);t.outerRadius=Math.max(a/2,0),t.innerRadius=Math.max(r.cutoutPercentage?t.outerRadius/100*r.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,n){var r=this,a=r.chart,o=r.getDataset(),i=a.options,s=i.animation,d=a.scale,l=a.data.labels,u=d.xCenter,c=d.yCenter,m=i.startAngle,_=e.hidden?0:d.getDistanceFromCenterForValue(o.data[t]),h=r._starts[t],f=h+(e.hidden?0:r._angles[t]),p=s.animateScale?0:d.getDistanceFromCenterForValue(o.data[t]),g=e._options||{};N.extend(e,{_datasetIndex:r.index,_index:t,_scale:d,_model:{backgroundColor:g.backgroundColor,borderColor:g.borderColor,borderWidth:g.borderWidth,borderAlign:g.borderAlign,x:u,y:c,innerRadius:0,outerRadius:n?p:_,startAngle:n&&s.animateRotate?m:h,endAngle:n&&s.animateRotate?m:f,label:N.valueAtIndexOrDefault(l,t,l[t])}}),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),n=0;return N.each(t.data,(function(t,r){isNaN(e.data[r])||t.hidden||n++})),n},setHoverStyle:function(e){var t=e._model,n=e._options,r=N.getHoverColor,a=N.valueOrDefault;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth},t.backgroundColor=a(n.hoverBackgroundColor,r(n.backgroundColor)),t.borderColor=a(n.hoverBorderColor,r(n.borderColor)),t.borderWidth=a(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(e){var t=this,n=this.getMeta().count,r=t.getDataset(),a=t.getMeta();if(isNaN(r.data[e])||a.data[e].hidden)return 0;var o={chart:t.chart,dataIndex:e,dataset:r,datasetIndex:t.index};return Je([t.chart.options.elements.arc.angle,2*Math.PI/n],o,e)}});F._set("pie",N.clone(F.doughnut)),F._set("pie",{cutoutPercentage:0});var Ze=Ee,$e=N.valueOrDefault;F._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var Qe=re.extend({datasetElementType:ke.Line,dataElementType:ke.Point,linkScales:N.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(e){var t,n,r=this,a=r.getMeta(),o=a.dataset,i=a.data||[],s=r.chart.scale,d=r._config;for(void 0!==d.tension&&void 0===d.lineTension&&(d.lineTension=d.tension),o._scale=s,o._datasetIndex=r.index,o._children=i,o._loop=!0,o._model=r._resolveDatasetElementOptions(o),o.pivot(),t=0,n=i.length;t<n;++t)r.updateElement(i[t],t,e);for(r.updateBezierControlPoints(),t=0,n=i.length;t<n;++t)i[t].pivot()},updateElement:function(e,t,n){var r=this,a=e.custom||{},o=r.getDataset(),i=r.chart.scale,s=i.getPointPositionForValue(t,o.data[t]),d=r._resolveDataElementOptions(e,t),l=r.getMeta().dataset._model,u=n?i.xCenter:s.x,c=n?i.yCenter:s.y;e._scale=i,e._options=d,e._datasetIndex=r.index,e._index=t,e._model={x:u,y:c,skip:a.skip||isNaN(u)||isNaN(c),radius:d.radius,pointStyle:d.pointStyle,rotation:d.rotation,backgroundColor:d.backgroundColor,borderColor:d.borderColor,borderWidth:d.borderWidth,tension:$e(a.tension,l?l.tension:0),hitRadius:d.hitRadius}},_resolveDatasetElementOptions:function(){var e=this,t=e._config,n=e.chart.options,r=re.prototype._resolveDatasetElementOptions.apply(e,arguments);return r.spanGaps=$e(t.spanGaps,n.spanGaps),r.tension=$e(t.lineTension,n.elements.line.tension),r},updateBezierControlPoints:function(){var e,t,n,r,a=this.getMeta(),o=this.chart.chartArea,i=a.data||[];function s(e,t,n){return Math.max(Math.min(e,n),t)}for(a.dataset._model.spanGaps&&(i=i.filter((function(e){return!e._model.skip}))),e=0,t=i.length;e<t;++e)n=i[e]._model,r=N.splineCurve(N.previousItem(i,e,!0)._model,n,N.nextItem(i,e,!0)._model,n.tension),n.controlPointPreviousX=s(r.previous.x,o.left,o.right),n.controlPointPreviousY=s(r.previous.y,o.top,o.bottom),n.controlPointNextX=s(r.next.x,o.left,o.right),n.controlPointNextY=s(r.next.y,o.top,o.bottom)},setHoverStyle:function(e){var t=e._model,n=e._options,r=N.getHoverColor;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=$e(n.hoverBackgroundColor,r(n.backgroundColor)),t.borderColor=$e(n.hoverBorderColor,r(n.borderColor)),t.borderWidth=$e(n.hoverBorderWidth,n.borderWidth),t.radius=$e(n.hoverRadius,n.radius)}});F._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}}),F._set("global",{datasets:{scatter:{showLine:!1}}});var Xe={bar:Te,bubble:je,doughnut:Ee,horizontalBar:We,line:Ue,polarArea:Ge,pie:Ze,radar:Qe,scatter:Ue};function Ke(e,t){return e.native?{x:e.x,y:e.y}:N.getRelativePosition(e,t)}function et(e,t){var n,r,a,o,i,s,d=e._getSortedVisibleDatasetMetas();for(r=0,o=d.length;r<o;++r)for(a=0,i=(n=d[r].data).length;a<i;++a)(s=n[a])._view.skip||t(s)}function tt(e,t){var n=[];return et(e,(function(e){e.inRange(t.x,t.y)&&n.push(e)})),n}function nt(e,t,n,r){var a=Number.POSITIVE_INFINITY,o=[];return et(e,(function(e){if(!n||e.inRange(t.x,t.y)){var i=e.getCenterPoint(),s=r(t,i);s<a?(o=[e],a=s):s===a&&o.push(e)}})),o}function rt(e){var t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){var a=t?Math.abs(e.x-r.x):0,o=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(a,2)+Math.pow(o,2))}}function at(e,t,n){var r=Ke(t,e);n.axis=n.axis||"x";var a=rt(n.axis),o=n.intersect?tt(e,r):nt(e,r,!1,a),i=[];return o.length?(e._getSortedVisibleDatasetMetas().forEach((function(e){var t=e.data[o[0]._index];t&&!t._view.skip&&i.push(t)})),i):[]}var ot={modes:{single:function(e,t){var n=Ke(t,e),r=[];return et(e,(function(e){if(e.inRange(n.x,n.y))return r.push(e),r})),r.slice(0,1)},label:at,index:at,dataset:function(e,t,n){var r=Ke(t,e);n.axis=n.axis||"xy";var a=rt(n.axis),o=n.intersect?tt(e,r):nt(e,r,!1,a);return o.length>0&&(o=e.getDatasetMeta(o[0]._datasetIndex).data),o},"x-axis":function(e,t){return at(e,t,{intersect:!1})},point:function(e,t){return tt(e,Ke(t,e))},nearest:function(e,t,n){var r=Ke(t,e);n.axis=n.axis||"xy";var a=rt(n.axis);return nt(e,r,n.intersect,a)},x:function(e,t,n){var r=Ke(t,e),a=[],o=!1;return et(e,(function(e){e.inXRange(r.x)&&a.push(e),e.inRange(r.x,r.y)&&(o=!0)})),n.intersect&&!o&&(a=[]),a},y:function(e,t,n){var r=Ke(t,e),a=[],o=!1;return et(e,(function(e){e.inYRange(r.y)&&a.push(e),e.inRange(r.x,r.y)&&(o=!0)})),n.intersect&&!o&&(a=[]),a}}},it=N.extend;function st(e,t){return N.where(e,(function(e){return e.pos===t}))}function dt(e,t){return e.sort((function(e,n){var r=t?n:e,a=t?e:n;return r.weight===a.weight?r.index-a.index:r.weight-a.weight}))}function lt(e,t,n,r){return Math.max(e[n],t[n])+Math.max(e[r],t[r])}function ut(e,t,n){var r,a,o=n.box,i=e.maxPadding;if(n.size&&(e[n.pos]-=n.size),n.size=n.horizontal?o.height:o.width,e[n.pos]+=n.size,o.getPadding){var s=o.getPadding();i.top=Math.max(i.top,s.top),i.left=Math.max(i.left,s.left),i.bottom=Math.max(i.bottom,s.bottom),i.right=Math.max(i.right,s.right)}if(r=t.outerWidth-lt(i,e,"left","right"),a=t.outerHeight-lt(i,e,"top","bottom"),r!==e.w||a!==e.h){e.w=r,e.h=a;var d=n.horizontal?[r,e.w]:[a,e.h];return!(d[0]===d[1]||isNaN(d[0])&&isNaN(d[1]))}}function ct(e,t){var n,r=t.maxPadding;return n={left:0,top:0,right:0,bottom:0},(e?["left","right"]:["top","bottom"]).forEach((function(e){n[e]=Math.max(t[e],r[e])})),n}function mt(e,t,n){var r,a,o,i,s,d,l=[];for(r=0,a=e.length;r<a;++r)(i=(o=e[r]).box).update(o.width||t.w,o.height||t.h,ct(o.horizontal,t)),ut(t,n,o)&&(d=!0,l.length&&(s=!0)),i.fullWidth||l.push(o);return s&&mt(l,t,n)||d}function _t(e,t,n){var r,a,o,i,s=n.padding,d=t.x,l=t.y;for(r=0,a=e.length;r<a;++r)i=(o=e[r]).box,o.horizontal?(i.left=i.fullWidth?s.left:t.left,i.right=i.fullWidth?n.outerWidth-s.right:t.left+t.w,i.top=l,i.bottom=l+i.height,i.width=i.right-i.left,l=i.bottom):(i.left=d,i.right=d+i.width,i.top=t.top,i.bottom=t.top+t.h,i.height=i.bottom-i.top,d=i.right);t.x=d,t.y=l}F._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var ht,ft={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw:function(){t.draw.apply(t,arguments)}}]},e.boxes.push(t)},removeBox:function(e,t){var n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure:function(e,t,n){for(var r,a=["fullWidth","position","weight"],o=a.length,i=0;i<o;++i)r=a[i],n.hasOwnProperty(r)&&(t[r]=n[r])},update:function(e,t,n){if(e){var r=e.options.layout||{},a=N.options.toPadding(r.padding),o=t-a.width,i=n-a.height,s=function(e){var t=function(e){var t,n,r,a=[];for(t=0,n=(e||[]).length;t<n;++t)r=e[t],a.push({index:t,box:r,pos:r.position,horizontal:r.isHorizontal(),weight:r.weight});return a}(e),n=dt(st(t,"left"),!0),r=dt(st(t,"right")),a=dt(st(t,"top"),!0),o=dt(st(t,"bottom"));return{leftAndTop:n.concat(a),rightAndBottom:r.concat(o),chartArea:st(t,"chartArea"),vertical:n.concat(r),horizontal:a.concat(o)}}(e.boxes),d=s.vertical,l=s.horizontal,u=Object.freeze({outerWidth:t,outerHeight:n,padding:a,availableWidth:o,vBoxMaxWidth:o/2/d.length,hBoxMaxHeight:i/2}),c=it({maxPadding:it({},a),w:o,h:i,x:a.left,y:a.top},a);(function(e,t){var n,r,a;for(n=0,r=e.length;n<r;++n)(a=e[n]).width=a.horizontal?a.box.fullWidth&&t.availableWidth:t.vBoxMaxWidth,a.height=a.horizontal&&t.hBoxMaxHeight})(d.concat(l),u),mt(d,c,u),mt(l,c,u)&&mt(d,c,u),function(e){var t=e.maxPadding;function n(n){var r=Math.max(t[n]-e[n],0);return e[n]+=r,r}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(c),_t(s.leftAndTop,c,u),c.x+=c.w,c.y+=c.h,_t(s.rightAndBottom,c,u),e.chartArea={left:c.left,top:c.top,right:c.left+c.w,bottom:c.top+c.h},N.each(s.chartArea,(function(t){var n=t.box;it(n,e.chartArea),n.update(c.w,c.h)}))}}},pt=(ht=Object.freeze({__proto__:null,default:"/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n"}))&&ht.default||ht,gt="chartjs-size-monitor",yt="chartjs-render-monitor",bt=["animationstart","webkitAnimationStart"],Mt={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function vt(e,t){var n=N.getStyle(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?Number(r[1]):void 0}var kt=!!function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}()&&{passive:!0};function At(e,t,n){e.addEventListener(t,n,kt)}function xt(e,t,n){e.removeEventListener(t,n,kt)}function wt(e,t,n,r,a){return{type:e,chart:t,native:a||null,x:void 0!==n?n:null,y:void 0!==r?r:null}}function Lt(e){var t=document.createElement("div");return t.className=e||"",t}function Yt(e,t,n){var r,a,o,i,s=e.$chartjs||(e.$chartjs={}),d=s.resizer=function(e){var t=1e6,n=Lt(gt),r=Lt(gt+"-expand"),a=Lt(gt+"-shrink");r.appendChild(Lt()),a.appendChild(Lt()),n.appendChild(r),n.appendChild(a),n._reset=function(){r.scrollLeft=t,r.scrollTop=t,a.scrollLeft=t,a.scrollTop=t};var o=function(){n._reset(),e()};return At(r,"scroll",o.bind(r,"expand")),At(a,"scroll",o.bind(a,"shrink")),n}((r=function(){if(s.resizer){var r=n.options.maintainAspectRatio&&e.parentNode,a=r?r.clientWidth:0;t(wt("resize",n)),r&&r.clientWidth<a&&n.canvas&&t(wt("resize",n))}},o=!1,i=[],function(){i=Array.prototype.slice.call(arguments),a=a||this,o||(o=!0,N.requestAnimFrame.call(window,(function(){o=!1,r.apply(a,i)})))}));!function(e,t){var n=e.$chartjs||(e.$chartjs={}),r=n.renderProxy=function(e){"chartjs-render-animation"===e.animationName&&t()};N.each(bt,(function(t){At(e,t,r)})),n.reflow=!!e.offsetParent,e.classList.add(yt)}(e,(function(){if(s.resizer){var t=e.parentNode;t&&t!==d.parentNode&&t.insertBefore(d,t.firstChild),d._reset()}}))}function Ct(e){var t=e.$chartjs||{},n=t.resizer;delete t.resizer,function(e){var t=e.$chartjs||{},n=t.renderProxy;n&&(N.each(bt,(function(t){xt(e,t,n)})),delete t.renderProxy),e.classList.remove(yt)}(e),n&&n.parentNode&&n.parentNode.removeChild(n)}var Dt={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(e){if(!this.disableCSSInjection){var t=e.getRootNode?e.getRootNode():document;!function(e,t){var n=e.$chartjs||(e.$chartjs={});if(!n.containsStyles){n.containsStyles=!0,t="/* Chart.js */\n"+t;var r=document.createElement("style");r.setAttribute("type","text/css"),r.appendChild(document.createTextNode(t)),e.appendChild(r)}}(t.host?t:document.head,pt)}},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(this._ensureLoaded(e),function(e,t){var n=e.style,r=e.getAttribute("height"),a=e.getAttribute("width");if(e.$chartjs={initial:{height:r,width:a,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===a||""===a){var o=vt(e,"width");void 0!==o&&(e.width=o)}if(null===r||""===r)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var i=vt(e,"height");void 0!==o&&(e.height=i)}}(e,t),n):null},releaseContext:function(e){var t=e.canvas;if(t.$chartjs){var n=t.$chartjs.initial;["height","width"].forEach((function(e){var r=n[e];N.isNullOrUndef(r)?t.removeAttribute(e):t.setAttribute(e,r)})),N.each(n.style||{},(function(e,n){t.style[n]=e})),t.width=t.width,delete t.$chartjs}},addEventListener:function(e,t,n){var r=e.canvas;if("resize"!==t){var a=n.$chartjs||(n.$chartjs={});At(r,t,(a.proxies||(a.proxies={}))[e.id+"_"+t]=function(t){n(function(e,t){var n=Mt[e.type]||e.type,r=N.getRelativePosition(e,t);return wt(n,t,r.x,r.y,e)}(t,e))})}else Yt(r,n,e)},removeEventListener:function(e,t,n){var r=e.canvas;if("resize"!==t){var a=((n.$chartjs||{}).proxies||{})[e.id+"_"+t];a&&xt(r,t,a)}else Ct(r)}};N.addEvent=At,N.removeEvent=xt;var Tt=Dt._enabled?Dt:{acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},St=N.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Tt);F._set("global",{plugins:{}});var Bt={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach((function(e){-1===t.indexOf(e)&&t.push(e)})),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach((function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)})),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,n){var r,a,o,i,s,d=this.descriptors(e),l=d.length;for(r=0;r<l;++r)if("function"==typeof(s=(o=(a=d[r]).plugin)[t])&&((i=[e].concat(n||[])).push(a.options),!1===s.apply(o,i)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var n=[],r=[],a=e&&e.config||{},o=a.options&&a.options.plugins||{};return this._plugins.concat(a.plugins||[]).forEach((function(e){if(-1===n.indexOf(e)){var t=e.id,a=o[t];!1!==a&&(!0===a&&(a=N.clone(F.global.plugins[t])),n.push(e),r.push({plugin:e,options:a||{}}))}})),t.descriptors=r,t.id=this._cacheId,r},_invalidate:function(e){delete e.$plugins}},jt={constructors:{},defaults:{},registerScaleType:function(e,t,n){this.constructors[e]=t,this.defaults[e]=N.clone(n)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?N.merge(Object.create(null),[F.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){var n=this;n.defaults.hasOwnProperty(e)&&(n.defaults[e]=N.extend(n.defaults[e],t))},addScalesToLayout:function(e){N.each(e.scales,(function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,ft.addBox(e,t)}))}},Ht=N.valueOrDefault,Pt=N.rtl.getRtlAdapter;F._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:N.noop,title:function(e,t){var n="",r=t.labels,a=r?r.length:0;if(e.length>0){var o=e[0];o.label?n=o.label:o.xLabel?n=o.xLabel:a>0&&o.index<a&&(n=r[o.index])}return n},afterTitle:N.noop,beforeBody:N.noop,beforeLabel:N.noop,label:function(e,t){var n=t.datasets[e.datasetIndex].label||"";return n&&(n+=": "),N.isNullOrUndef(e.value)?n+=e.yLabel:n+=e.value,n},labelColor:function(e,t){var n=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:N.noop,afterBody:N.noop,beforeFooter:N.noop,footer:N.noop,afterFooter:N.noop}}});var Ot={average:function(e){if(!e.length)return!1;var t,n,r=0,a=0,o=0;for(t=0,n=e.length;t<n;++t){var i=e[t];if(i&&i.hasValue()){var s=i.tooltipPosition();r+=s.x,a+=s.y,++o}}return{x:r/o,y:a/o}},nearest:function(e,t){var n,r,a,o=t.x,i=t.y,s=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){var d=e[n];if(d&&d.hasValue()){var l=d.getCenterPoint(),u=N.distanceBetweenPoints(t,l);u<s&&(s=u,a=d)}}if(a){var c=a.tooltipPosition();o=c.x,i=c.y}return{x:o,y:i}}};function Ft(e,t){return t&&(N.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Et(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Wt(e){var t=F.global;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,rtl:e.rtl,textDirection:e.textDirection,bodyFontColor:e.bodyFontColor,_bodyFontFamily:Ht(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:Ht(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:Ht(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:Ht(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:Ht(e.titleFontStyle,t.defaultFontStyle),titleFontSize:Ht(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:Ht(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:Ht(e.footerFontStyle,t.defaultFontStyle),footerFontSize:Ht(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function zt(e,t){return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-e.xPadding:e.x+e.xPadding}function It(e){return Ft([],Et(e))}var Nt=Z.extend({initialize:function(){this._model=Wt(this._options),this._lastActive=[]},getTitle:function(){var e=this,t=e._options.callbacks,n=t.beforeTitle.apply(e,arguments),r=t.title.apply(e,arguments),a=t.afterTitle.apply(e,arguments),o=[];return o=Ft(o,Et(n)),o=Ft(o,Et(r)),Ft(o,Et(a))},getBeforeBody:function(){return It(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var n=this,r=n._options.callbacks,a=[];return N.each(e,(function(e){var o={before:[],lines:[],after:[]};Ft(o.before,Et(r.beforeLabel.call(n,e,t))),Ft(o.lines,r.label.call(n,e,t)),Ft(o.after,Et(r.afterLabel.call(n,e,t))),a.push(o)})),a},getAfterBody:function(){return It(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this,t=e._options.callbacks,n=t.beforeFooter.apply(e,arguments),r=t.footer.apply(e,arguments),a=t.afterFooter.apply(e,arguments),o=[];return o=Ft(o,Et(n)),o=Ft(o,Et(r)),Ft(o,Et(a))},update:function(e){var t,n,r,a,o,i,s,d,l,u,c=this,m=c._options,_=c._model,h=c._model=Wt(m),f=c._active,p=c._data,g={xAlign:_.xAlign,yAlign:_.yAlign},y={x:_.x,y:_.y},b={width:_.width,height:_.height},M={x:_.caretX,y:_.caretY};if(f.length){h.opacity=1;var v=[],k=[];M=Ot[m.position].call(c,f,c._eventPosition);var A=[];for(t=0,n=f.length;t<n;++t)A.push((r=f[t],a=void 0,o=void 0,i=void 0,s=void 0,d=void 0,l=void 0,u=void 0,a=r._xScale,o=r._yScale||r._scale,i=r._index,s=r._datasetIndex,d=r._chart.getDatasetMeta(s).controller,l=d._getIndexScale(),u=d._getValueScale(),{xLabel:a?a.getLabelForIndex(i,s):"",yLabel:o?o.getLabelForIndex(i,s):"",label:l?""+l.getLabelForIndex(i,s):"",value:u?""+u.getLabelForIndex(i,s):"",index:i,datasetIndex:s,x:r._model.x,y:r._model.y}));m.filter&&(A=A.filter((function(e){return m.filter(e,p)}))),m.itemSort&&(A=A.sort((function(e,t){return m.itemSort(e,t,p)}))),N.each(A,(function(e){v.push(m.callbacks.labelColor.call(c,e,c._chart)),k.push(m.callbacks.labelTextColor.call(c,e,c._chart))})),h.title=c.getTitle(A,p),h.beforeBody=c.getBeforeBody(A,p),h.body=c.getBody(A,p),h.afterBody=c.getAfterBody(A,p),h.footer=c.getFooter(A,p),h.x=M.x,h.y=M.y,h.caretPadding=m.caretPadding,h.labelColors=v,h.labelTextColors=k,h.dataPoints=A,y=function(e,t,n,r){var a=e.x,o=e.y,i=e.caretSize,s=e.caretPadding,d=e.cornerRadius,l=n.xAlign,u=n.yAlign,c=i+s,m=d+s;return"right"===l?a-=t.width:"center"===l&&((a-=t.width/2)+t.width>r.width&&(a=r.width-t.width),a<0&&(a=0)),"top"===u?o+=c:o-="bottom"===u?t.height+c:t.height/2,"center"===u?"left"===l?a+=c:"right"===l&&(a-=c):"left"===l?a-=m:"right"===l&&(a+=m),{x:a,y:o}}(h,b=function(e,t){var n=e._chart.ctx,r=2*t.yPadding,a=0,o=t.body,i=o.reduce((function(e,t){return e+t.before.length+t.lines.length+t.after.length}),0);i+=t.beforeBody.length+t.afterBody.length;var s=t.title.length,d=t.footer.length,l=t.titleFontSize,u=t.bodyFontSize,c=t.footerFontSize;r+=s*l,r+=s?(s-1)*t.titleSpacing:0,r+=s?t.titleMarginBottom:0,r+=i*u,r+=i?(i-1)*t.bodySpacing:0,r+=d?t.footerMarginTop:0,r+=d*c,r+=d?(d-1)*t.footerSpacing:0;var m=0,_=function(e){a=Math.max(a,n.measureText(e).width+m)};return n.font=N.fontString(l,t._titleFontStyle,t._titleFontFamily),N.each(t.title,_),n.font=N.fontString(u,t._bodyFontStyle,t._bodyFontFamily),N.each(t.beforeBody.concat(t.afterBody),_),m=t.displayColors?u+2:0,N.each(o,(function(e){N.each(e.before,_),N.each(e.lines,_),N.each(e.after,_)})),m=0,n.font=N.fontString(c,t._footerFontStyle,t._footerFontFamily),N.each(t.footer,_),{width:a+=2*t.xPadding,height:r}}(this,h),g=function(e,t){var n,r,a,o,i,s=e._model,d=e._chart,l=e._chart.chartArea,u="center",c="center";s.y<t.height?c="top":s.y>d.height-t.height&&(c="bottom");var m=(l.left+l.right)/2,_=(l.top+l.bottom)/2;"center"===c?(n=function(e){return e<=m},r=function(e){return e>m}):(n=function(e){return e<=t.width/2},r=function(e){return e>=d.width-t.width/2}),a=function(e){return e+t.width+s.caretSize+s.caretPadding>d.width},o=function(e){return e-t.width-s.caretSize-s.caretPadding<0},i=function(e){return e<=_?"top":"bottom"},n(s.x)?(u="left",a(s.x)&&(u="center",c=i(s.y))):r(s.x)&&(u="right",o(s.x)&&(u="center",c=i(s.y)));var h=e._options;return{xAlign:h.xAlign?h.xAlign:u,yAlign:h.yAlign?h.yAlign:c}}(this,b),c._chart)}else h.opacity=0;return h.xAlign=g.xAlign,h.yAlign=g.yAlign,h.x=y.x,h.y=y.y,h.width=b.width,h.height=b.height,h.caretX=M.x,h.caretY=M.y,c._model=h,e&&m.custom&&m.custom.call(c,h),c},drawCaret:function(e,t){var n=this._chart.ctx,r=this._view,a=this.getCaretPosition(e,t,r);n.lineTo(a.x1,a.y1),n.lineTo(a.x2,a.y2),n.lineTo(a.x3,a.y3)},getCaretPosition:function(e,t,n){var r,a,o,i,s,d,l=n.caretSize,u=n.cornerRadius,c=n.xAlign,m=n.yAlign,_=e.x,h=e.y,f=t.width,p=t.height;if("center"===m)s=h+p/2,"left"===c?(a=(r=_)-l,o=r,i=s+l,d=s-l):(a=(r=_+f)+l,o=r,i=s-l,d=s+l);else if("left"===c?(r=(a=_+u+l)-l,o=a+l):"right"===c?(r=(a=_+f-u-l)-l,o=a+l):(r=(a=n.caretX)-l,o=a+l),"top"===m)s=(i=h)-l,d=i;else{s=(i=h+p)+l,d=i;var g=o;o=r,r=g}return{x1:r,x2:a,x3:o,y1:i,y2:s,y3:d}},drawTitle:function(e,t,n){var r,a,o,i=t.title,s=i.length;if(s){var d=Pt(t.rtl,t.x,t.width);for(e.x=zt(t,t._titleAlign),n.textAlign=d.textAlign(t._titleAlign),n.textBaseline="middle",r=t.titleFontSize,a=t.titleSpacing,n.fillStyle=t.titleFontColor,n.font=N.fontString(r,t._titleFontStyle,t._titleFontFamily),o=0;o<s;++o)n.fillText(i[o],d.x(e.x),e.y+r/2),e.y+=r+a,o+1===s&&(e.y+=t.titleMarginBottom-a)}},drawBody:function(e,t,n){var r,a,o,i,s,d,l,u,c=t.bodyFontSize,m=t.bodySpacing,_=t._bodyAlign,h=t.body,f=t.displayColors,p=0,g=f?zt(t,"left"):0,y=Pt(t.rtl,t.x,t.width),b=function(t){n.fillText(t,y.x(e.x+p),e.y+c/2),e.y+=c+m},M=y.textAlign(_);for(n.textAlign=_,n.textBaseline="middle",n.font=N.fontString(c,t._bodyFontStyle,t._bodyFontFamily),e.x=zt(t,M),n.fillStyle=t.bodyFontColor,N.each(t.beforeBody,b),p=f&&"right"!==M?"center"===_?c/2+1:c+2:0,s=0,l=h.length;s<l;++s){for(r=h[s],a=t.labelTextColors[s],o=t.labelColors[s],n.fillStyle=a,N.each(r.before,b),d=0,u=(i=r.lines).length;d<u;++d){if(f){var v=y.x(g);n.fillStyle=t.legendColorBackground,n.fillRect(y.leftForLtr(v,c),e.y,c,c),n.lineWidth=1,n.strokeStyle=o.borderColor,n.strokeRect(y.leftForLtr(v,c),e.y,c,c),n.fillStyle=o.backgroundColor,n.fillRect(y.leftForLtr(y.xPlus(v,1),c-2),e.y+1,c-2,c-2),n.fillStyle=a}b(i[d])}N.each(r.after,b)}p=0,N.each(t.afterBody,b),e.y-=m},drawFooter:function(e,t,n){var r,a,o=t.footer,i=o.length;if(i){var s=Pt(t.rtl,t.x,t.width);for(e.x=zt(t,t._footerAlign),e.y+=t.footerMarginTop,n.textAlign=s.textAlign(t._footerAlign),n.textBaseline="middle",r=t.footerFontSize,n.fillStyle=t.footerFontColor,n.font=N.fontString(r,t._footerFontStyle,t._footerFontFamily),a=0;a<i;++a)n.fillText(o[a],s.x(e.x),e.y+r/2),e.y+=r+t.footerSpacing}},drawBackground:function(e,t,n,r){n.fillStyle=t.backgroundColor,n.strokeStyle=t.borderColor,n.lineWidth=t.borderWidth;var a=t.xAlign,o=t.yAlign,i=e.x,s=e.y,d=r.width,l=r.height,u=t.cornerRadius;n.beginPath(),n.moveTo(i+u,s),"top"===o&&this.drawCaret(e,r),n.lineTo(i+d-u,s),n.quadraticCurveTo(i+d,s,i+d,s+u),"center"===o&&"right"===a&&this.drawCaret(e,r),n.lineTo(i+d,s+l-u),n.quadraticCurveTo(i+d,s+l,i+d-u,s+l),"bottom"===o&&this.drawCaret(e,r),n.lineTo(i+u,s+l),n.quadraticCurveTo(i,s+l,i,s+l-u),"center"===o&&"left"===a&&this.drawCaret(e,r),n.lineTo(i,s+u),n.quadraticCurveTo(i,s,i+u,s),n.closePath(),n.fill(),t.borderWidth>0&&n.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var n={width:t.width,height:t.height},r={x:t.x,y:t.y},a=Math.abs(t.opacity<.001)?0:t.opacity,o=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&o&&(e.save(),e.globalAlpha=a,this.drawBackground(r,t,e,n),r.y+=t.yPadding,N.rtl.overrideTextDirection(e,t.textDirection),this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),N.rtl.restoreTextDirection(e,t.textDirection),e.restore())}},handleEvent:function(e){var t,n=this,r=n._options;return n._lastActive=n._lastActive||[],"mouseout"===e.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(e,r.mode,r),r.reverse&&n._active.reverse()),(t=!N.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(r.enabled||r.custom)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0),n.pivot())),t}}),Rt=Ot,qt=Nt;qt.positioners=Rt;var Vt=N.valueOrDefault;function Ut(){return N.merge(Object.create(null),[].slice.call(arguments),{merger:function(e,t,n,r){if("xAxes"===e||"yAxes"===e){var a,o,i,s=n[e].length;for(t[e]||(t[e]=[]),a=0;a<s;++a)i=n[e][a],o=Vt(i.type,"xAxes"===e?"category":"linear"),a>=t[e].length&&t[e].push({}),!t[e][a].type||i.type&&i.type!==t[e][a].type?N.merge(t[e][a],[jt.getScaleDefaults(o),i]):N.merge(t[e][a],i)}else N._merger(e,t,n,r)}})}function Jt(){return N.merge(Object.create(null),[].slice.call(arguments),{merger:function(e,t,n,r){var a=t[e]||Object.create(null),o=n[e];"scales"===e?t[e]=Ut(a,o):"scale"===e?t[e]=N.merge(a,[jt.getScaleDefaults(o.type),o]):N._merger(e,t,n,r)}})}function Gt(e){var t=e.options;N.each(e.scales,(function(t){ft.removeBox(e,t)})),t=Jt(F.global,F[e.config.type],t),e.options=e.config.options=t,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=t.tooltips,e.tooltip.initialize()}function Zt(e,t,n){var r,a=function(e){return e.id===r};do{r=t+n++}while(N.findIndex(e,a)>=0);return r}function $t(e){return"top"===e||"bottom"===e}function Qt(e,t){return function(n,r){return n[e]===r[e]?n[t]-r[t]:n[e]-r[e]}}F._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});var Xt=function(e,t){return this.construct(e,t),this};N.extend(Xt.prototype,{construct:function(e,t){var n=this;t=function(e){var t=(e=e||Object.create(null)).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=Jt(F.global,F[e.type],e.options||{}),e}(t);var r=St.acquireContext(e,t),a=r&&r.canvas,o=a&&a.height,i=a&&a.width;n.id=N.uid(),n.ctx=r,n.canvas=a,n.config=t,n.width=i,n.height=o,n.aspectRatio=o?i/o:null,n.options=t.options,n._bufferedRender=!1,n._layers=[],n.chart=n,n.controller=n,Xt.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(e){n.config.data=e}}),r&&a?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return Bt.notify(e,"beforeInit"),N.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.initToolTip(),Bt.notify(e,"afterInit"),e},clear:function(){return N.canvas.clear(this),this},stop:function(){return X.cancelAnimation(this),this},resize:function(e){var t=this,n=t.options,r=t.canvas,a=n.maintainAspectRatio&&t.aspectRatio||null,o=Math.max(0,Math.floor(N.getMaximumWidth(r))),i=Math.max(0,Math.floor(a?o/a:N.getMaximumHeight(r)));if((t.width!==o||t.height!==i)&&(r.width=t.width=o,r.height=t.height=i,r.style.width=o+"px",r.style.height=i+"px",N.retinaScale(t,n.devicePixelRatio),!e)){var s={width:o,height:i};Bt.notify(t,"resize",[s]),n.onResize&&n.onResize(t,s),t.stop(),t.update({duration:n.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},n=e.scale;N.each(t.xAxes,(function(e,n){e.id||(e.id=Zt(t.xAxes,"x-axis-",n))})),N.each(t.yAxes,(function(e,n){e.id||(e.id=Zt(t.yAxes,"y-axis-",n))})),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var e=this,t=e.options,n=e.scales||{},r=[],a=Object.keys(n).reduce((function(e,t){return e[t]=!1,e}),{});t.scales&&(r=r.concat((t.scales.xAxes||[]).map((function(e){return{options:e,dtype:"category",dposition:"bottom"}})),(t.scales.yAxes||[]).map((function(e){return{options:e,dtype:"linear",dposition:"left"}})))),t.scale&&r.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),N.each(r,(function(t){var r=t.options,o=r.id,i=Vt(r.type,t.dtype);$t(r.position)!==$t(t.dposition)&&(r.position=t.dposition),a[o]=!0;var s=null;if(o in n&&n[o].type===i)(s=n[o]).options=r,s.ctx=e.ctx,s.chart=e;else{var d=jt.getScaleConstructor(i);if(!d)return;s=new d({id:o,type:i,options:r,ctx:e.ctx,chart:e}),n[s.id]=s}s.mergeTicksOptions(),t.isDefault&&(e.scale=s)})),N.each(a,(function(e,t){e||delete n[t]})),e.scales=n,jt.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e,t,n=this,r=[],a=n.data.datasets;for(e=0,t=a.length;e<t;e++){var o=a[e],i=n.getDatasetMeta(e),s=o.type||n.config.type;if(i.type&&i.type!==s&&(n.destroyDatasetMeta(e),i=n.getDatasetMeta(e)),i.type=s,i.order=o.order||0,i.index=e,i.controller)i.controller.updateIndex(e),i.controller.linkScales();else{var d=Xe[i.type];if(void 0===d)throw new Error('"'+i.type+'" is not a chart type.');i.controller=new d(n,e),r.push(i.controller)}}return r},resetElements:function(){var e=this;N.each(e.data.datasets,(function(t,n){e.getDatasetMeta(n).controller.reset()}),e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var t,n,r=this;if(e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]}),Gt(r),Bt._invalidate(r),!1!==Bt.notify(r,"beforeUpdate")){r.tooltip._data=r.data;var a=r.buildOrUpdateControllers();for(t=0,n=r.data.datasets.length;t<n;t++)r.getDatasetMeta(t).controller.buildOrUpdateElements();r.updateLayout(),r.options.animation&&r.options.animation.duration&&N.each(a,(function(e){e.reset()})),r.updateDatasets(),r.tooltip.initialize(),r.lastActive=[],Bt.notify(r,"afterUpdate"),r._layers.sort(Qt("z","_idx")),r._bufferedRender?r._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:r.render(e)}},updateLayout:function(){var e=this;!1!==Bt.notify(e,"beforeLayout")&&(ft.update(this,this.width,this.height),e._layers=[],N.each(e.boxes,(function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())}),e),e._layers.forEach((function(e,t){e._idx=t})),Bt.notify(e,"afterScaleUpdate"),Bt.notify(e,"afterLayout"))},updateDatasets:function(){var e=this;if(!1!==Bt.notify(e,"beforeDatasetsUpdate")){for(var t=0,n=e.data.datasets.length;t<n;++t)e.updateDataset(t);Bt.notify(e,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this,n=t.getDatasetMeta(e),r={meta:n,index:e};!1!==Bt.notify(t,"beforeDatasetUpdate",[r])&&(n.controller._update(),Bt.notify(t,"afterDatasetUpdate",[r]))},render:function(e){var t=this;e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]});var n=t.options.animation,r=Vt(e.duration,n&&n.duration),a=e.lazy;if(!1!==Bt.notify(t,"beforeRender")){var o=function(e){Bt.notify(t,"afterRender"),N.callback(n&&n.onComplete,[e],t)};if(n&&r){var i=new Q({numSteps:r/16.66,easing:e.easing||n.easing,render:function(e,t){var n=N.easing.effects[t.easing],r=t.currentStep,a=r/t.numSteps;e.draw(n(a),a,r)},onAnimationProgress:n.onProgress,onAnimationComplete:o});X.addAnimation(t,i,r,a)}else t.draw(),o(new Q({numSteps:0,chart:t}));return t}},draw:function(e){var t,n,r=this;if(r.clear(),N.isNullOrUndef(e)&&(e=1),r.transition(e),!(r.width<=0||r.height<=0)&&!1!==Bt.notify(r,"beforeDraw",[e])){for(n=r._layers,t=0;t<n.length&&n[t].z<=0;++t)n[t].draw(r.chartArea);for(r.drawDatasets(e);t<n.length;++t)n[t].draw(r.chartArea);r._drawTooltip(e),Bt.notify(r,"afterDraw",[e])}},transition:function(e){for(var t=this,n=0,r=(t.data.datasets||[]).length;n<r;++n)t.isDatasetVisible(n)&&t.getDatasetMeta(n).controller.transition(e);t.tooltip.transition(e)},_getSortedDatasetMetas:function(e){var t,n,r=this,a=[];for(t=0,n=(r.data.datasets||[]).length;t<n;++t)e&&!r.isDatasetVisible(t)||a.push(r.getDatasetMeta(t));return a.sort(Qt("order","index")),a},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(e){var t,n,r=this;if(!1!==Bt.notify(r,"beforeDatasetsDraw",[e])){for(n=(t=r._getSortedVisibleDatasetMetas()).length-1;n>=0;--n)r.drawDataset(t[n],e);Bt.notify(r,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var n={meta:e,index:e.index,easingValue:t};!1!==Bt.notify(this,"beforeDatasetDraw",[n])&&(e.controller.draw(t),Bt.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(e){var t=this,n=t.tooltip,r={tooltip:n,easingValue:e};!1!==Bt.notify(t,"beforeTooltipDraw",[r])&&(n.draw(),Bt.notify(t,"afterTooltipDraw",[r]))},getElementAtEvent:function(e){return ot.modes.single(this,e)},getElementsAtEvent:function(e){return ot.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return ot.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,n){var r=ot.modes[t];return"function"==typeof r?r(this,e,n):[]},getDatasetAtEvent:function(e){return ot.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this,n=t.data.datasets[e];n._meta||(n._meta={});var r=n._meta[t.id];return r||(r=n._meta[t.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:n.order||0,index:e}),r},getVisibleDatasetCount:function(){for(var e=0,t=0,n=this.data.datasets.length;t<n;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,n=this.data.datasets[e],r=n._meta&&n._meta[t];r&&(r.controller.destroy(),delete n._meta[t])},destroy:function(){var e,t,n=this,r=n.canvas;for(n.stop(),e=0,t=n.data.datasets.length;e<t;++e)n.destroyDatasetMeta(e);r&&(n.unbindEvents(),N.canvas.clear(n),St.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Bt.notify(n,"destroy"),delete Xt.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new qt({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},n=function(){e.eventHandler.apply(e,arguments)};N.each(e.options.events,(function(r){St.addEventListener(e,r,n),t[r]=n})),e.options.responsive&&(n=function(){e.resize()},St.addEventListener(e,"resize",n),t.resize=n)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,N.each(t,(function(t,n){St.removeEventListener(e,n,t)})))},updateHoverStyle:function(e,t,n){var r,a,o,i=n?"set":"remove";for(a=0,o=e.length;a<o;++a)(r=e[a])&&this.getDatasetMeta(r._datasetIndex).controller[i+"HoverStyle"](r);"dataset"===t&&this.getDatasetMeta(e[0]._datasetIndex).controller["_"+i+"DatasetHoverStyle"]()},eventHandler:function(e){var t=this,n=t.tooltip;if(!1!==Bt.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var r=t.handleEvent(e);n&&(r=n._start?n.handleEvent(e):r|n.handleEvent(e)),Bt.notify(t,"afterEvent",[e]);var a=t._bufferedRequest;return a?t.render(a):r&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,n=this,r=n.options||{},a=r.hover;return n.lastActive=n.lastActive||[],"mouseout"===e.type?n.active=[]:n.active=n.getElementsAtEventForMode(e,a.mode,a),N.callback(r.onHover||r.hover.onHover,[e.native,n.active],n),"mouseup"!==e.type&&"click"!==e.type||r.onClick&&r.onClick.call(n,e.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,a.mode,!1),n.active.length&&a.mode&&n.updateHoverStyle(n.active,a.mode,!0),t=!N.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,t}}),Xt.instances={};var Kt=Xt;Xt.Controller=Xt,Xt.types={},N.configMerge=Jt,N.scaleMerge=Ut;function en(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function tn(e){this.options=e||{}}N.extend(tn.prototype,{formats:en,parse:en,format:en,add:en,diff:en,startOf:en,endOf:en,_create:function(e){return e}}),tn.override=function(e){N.extend(tn.prototype,e)};var nn={_date:tn},rn={formatters:{values:function(e){return N.isArray(e)?e:""+e},linear:function(e,t,n){var r=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(r)>1&&e!==Math.floor(e)&&(r=e-Math.floor(e));var a=N.log10(Math.abs(r)),o="";if(0!==e)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var i=N.log10(Math.abs(e)),s=Math.floor(i)-Math.floor(a);s=Math.max(Math.min(s,20),0),o=e.toExponential(s)}else{var d=-1*Math.floor(a);d=Math.max(Math.min(d,20),0),o=e.toFixed(d)}else o="0";return o},logarithmic:function(e,t,n){var r=e/Math.pow(10,Math.floor(N.log10(e)));return 0===e?"0":1===r||2===r||5===r||0===t||t===n.length-1?e.toExponential():""}}},an=N.isArray,on=N.isNullOrUndef,sn=N.valueOrDefault,dn=N.valueAtIndexOrDefault;function ln(e,t,n){var r,a=e.getTicks().length,o=Math.min(t,a-1),i=e.getPixelForTick(o),s=e._startPixel,d=e._endPixel,l=1e-6;if(!(n&&(r=1===a?Math.max(i-s,d-i):0===t?(e.getPixelForTick(1)-i)/2:(i-e.getPixelForTick(o-1))/2,(i+=o<t?r:-r)<s-l||i>d+l)))return i}function un(e,t,n,r){var a,o,i,s,d,l,u,c,m,_,h,f,p,g=n.length,y=[],b=[],M=[],v=0,k=0;for(a=0;a<g;++a){if(s=n[a].label,d=n[a].major?t.major:t.minor,e.font=l=d.string,u=r[l]=r[l]||{data:{},gc:[]},c=d.lineHeight,m=_=0,on(s)||an(s)){if(an(s))for(o=0,i=s.length;o<i;++o)h=s[o],on(h)||an(h)||(m=N.measureText(e,u.data,u.gc,m,h),_+=c)}else m=N.measureText(e,u.data,u.gc,m,s),_=c;y.push(m),b.push(_),M.push(c/2),v=Math.max(m,v),k=Math.max(_,k)}function A(e){return{width:y[e]||0,height:b[e]||0,offset:M[e]||0}}return function(e,t){N.each(e,(function(e){var n,r=e.gc,a=r.length/2;if(a>t){for(n=0;n<a;++n)delete e.data[r[n]];r.splice(0,a)}}))}(r,g),f=y.indexOf(v),p=b.indexOf(k),{first:A(0),last:A(g-1),widest:A(f),highest:A(p)}}function cn(e){return e.drawTicks?e.tickMarkLength:0}function mn(e){var t,n;return e.display?(t=N.options._parseFont(e),n=N.options.toPadding(e.padding),t.lineHeight+n.height):0}function _n(e,t){return N.extend(N.options._parseFont({fontFamily:sn(t.fontFamily,e.fontFamily),fontSize:sn(t.fontSize,e.fontSize),fontStyle:sn(t.fontStyle,e.fontStyle),lineHeight:sn(t.lineHeight,e.lineHeight)}),{color:N.options.resolve([t.fontColor,e.fontColor,F.global.defaultFontColor])})}function hn(e){var t=_n(e,e.minor);return{minor:t,major:e.major.enabled?_n(e,e.major):t}}function fn(e){var t,n,r,a=[];for(n=0,r=e.length;n<r;++n)void 0!==(t=e[n])._index&&a.push(t);return a}function pn(e,t,n,r){var a,o,i,s,d=sn(n,0),l=Math.min(sn(r,e.length),e.length),u=0;for(t=Math.ceil(t),r&&(t=(a=r-n)/Math.floor(a/t)),s=d;s<0;)u++,s=Math.round(d+u*t);for(o=Math.max(d,0);o<l;o++)i=e[o],o===s?(i._index=o,u++,s=Math.round(d+u*t)):delete i.label}F._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:rn.formatters.values,minor:{},major:{}}});var gn=Z.extend({zeroLineIndex:0,getPadding:function(){var e=this;return{left:e.paddingLeft||0,top:e.paddingTop||0,right:e.paddingRight||0,bottom:e.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){N.callback(this.options.beforeUpdate,[this])},update:function(e,t,n){var r,a,o,i,s,d=this,l=d.options.ticks,u=l.sampleSize;if(d.beforeUpdate(),d.maxWidth=e,d.maxHeight=t,d.margins=N.extend({left:0,right:0,top:0,bottom:0},n),d._ticks=null,d.ticks=null,d._labelSizes=null,d._maxLabelLines=0,d.longestLabelWidth=0,d.longestTextCache=d.longestTextCache||{},d._gridLineItems=null,d._labelItems=null,d.beforeSetDimensions(),d.setDimensions(),d.afterSetDimensions(),d.beforeDataLimits(),d.determineDataLimits(),d.afterDataLimits(),d.beforeBuildTicks(),i=d.buildTicks()||[],(!(i=d.afterBuildTicks(i)||i)||!i.length)&&d.ticks)for(i=[],r=0,a=d.ticks.length;r<a;++r)i.push({value:d.ticks[r],major:!1});return d._ticks=i,s=u<i.length,o=d._convertTicksToLabels(s?function(e,t){for(var n=[],r=e.length/t,a=0,o=e.length;a<o;a+=r)n.push(e[Math.floor(a)]);return n}(i,u):i),d._configure(),d.beforeCalculateTickRotation(),d.calculateTickRotation(),d.afterCalculateTickRotation(),d.beforeFit(),d.fit(),d.afterFit(),d._ticksToDraw=l.display&&(l.autoSkip||"auto"===l.source)?d._autoSkip(i):i,s&&(o=d._convertTicksToLabels(d._ticksToDraw)),d.ticks=o,d.afterUpdate(),d.minSize},_configure:function(){var e,t,n=this,r=n.options.ticks.reverse;n.isHorizontal()?(e=n.left,t=n.right):(e=n.top,t=n.bottom,r=!r),n._startPixel=e,n._endPixel=t,n._reversePixels=r,n._length=t-e},afterUpdate:function(){N.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){N.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){N.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){N.callback(this.options.beforeDataLimits,[this])},determineDataLimits:N.noop,afterDataLimits:function(){N.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){N.callback(this.options.beforeBuildTicks,[this])},buildTicks:N.noop,afterBuildTicks:function(e){var t=this;return an(e)&&e.length?N.callback(t.options.afterBuildTicks,[t,e]):(t.ticks=N.callback(t.options.afterBuildTicks,[t,t.ticks])||t.ticks,e)},beforeTickToLabelConversion:function(){N.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this,t=e.options.ticks;e.ticks=e.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){N.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){N.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e,t,n,r,a,o,i,s=this,d=s.options,l=d.ticks,u=s.getTicks().length,c=l.minRotation||0,m=l.maxRotation,_=c;!s._isVisible()||!l.display||c>=m||u<=1||!s.isHorizontal()?s.labelRotation=c:(t=(e=s._getLabelSizes()).widest.width,n=e.highest.height-e.highest.offset,r=Math.min(s.maxWidth,s.chart.width-t),t+6>(a=d.offset?s.maxWidth/u:r/(u-1))&&(a=r/(u-(d.offset?.5:1)),o=s.maxHeight-cn(d.gridLines)-l.padding-mn(d.scaleLabel),i=Math.sqrt(t*t+n*n),_=N.toDegrees(Math.min(Math.asin(Math.min((e.highest.height+6)/a,1)),Math.asin(Math.min(o/i,1))-Math.asin(n/i))),_=Math.max(c,Math.min(m,_))),s.labelRotation=_)},afterCalculateTickRotation:function(){N.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){N.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},n=e.chart,r=e.options,a=r.ticks,o=r.scaleLabel,i=r.gridLines,s=e._isVisible(),d="bottom"===r.position,l=e.isHorizontal();if(l?t.width=e.maxWidth:s&&(t.width=cn(i)+mn(o)),l?s&&(t.height=cn(i)+mn(o)):t.height=e.maxHeight,a.display&&s){var u=hn(a),c=e._getLabelSizes(),m=c.first,_=c.last,h=c.widest,f=c.highest,p=.4*u.minor.lineHeight,g=a.padding;if(l){var y=0!==e.labelRotation,b=N.toRadians(e.labelRotation),M=Math.cos(b),v=Math.sin(b),k=v*h.width+M*(f.height-(y?f.offset:0))+(y?0:p);t.height=Math.min(e.maxHeight,t.height+k+g);var A,x,w=e.getPixelForTick(0)-e.left,L=e.right-e.getPixelForTick(e.getTicks().length-1);y?(A=d?M*m.width+v*m.offset:v*(m.height-m.offset),x=d?v*(_.height-_.offset):M*_.width+v*_.offset):(A=m.width/2,x=_.width/2),e.paddingLeft=Math.max((A-w)*e.width/(e.width-w),0)+3,e.paddingRight=Math.max((x-L)*e.width/(e.width-L),0)+3}else{var Y=a.mirror?0:h.width+g+p;t.width=Math.min(e.maxWidth,t.width+Y),e.paddingTop=m.height/2,e.paddingBottom=_.height/2}}e.handleMargins(),l?(e.width=e._length=n.width-e.margins.left-e.margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=n.height-e.margins.top-e.margins.bottom)},handleMargins:function(){var e=this;e.margins&&(e.margins.left=Math.max(e.paddingLeft,e.margins.left),e.margins.top=Math.max(e.paddingTop,e.margins.top),e.margins.right=Math.max(e.paddingRight,e.margins.right),e.margins.bottom=Math.max(e.paddingBottom,e.margins.bottom))},afterFit:function(){N.callback(this.options.afterFit,[this])},isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(on(e))return NaN;if(("number"==typeof e||e instanceof Number)&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},_convertTicksToLabels:function(e){var t,n,r,a=this;for(a.ticks=e.map((function(e){return e.value})),a.beforeTickToLabelConversion(),t=a.convertTicksToLabels(e)||a.ticks,a.afterTickToLabelConversion(),n=0,r=e.length;n<r;++n)e[n].label=t[n];return t},_getLabelSizes:function(){var e=this,t=e._labelSizes;return t||(e._labelSizes=t=un(e.ctx,hn(e.options.ticks),e.getTicks(),e.longestTextCache),e.longestLabelWidth=t.widest.width),t},_parseValue:function(e){var t,n,r,a;return an(e)?(t=+this.getRightValue(e[0]),n=+this.getRightValue(e[1]),r=Math.min(t,n),a=Math.max(t,n)):(t=void 0,n=e=+this.getRightValue(e),r=e,a=e),{min:r,max:a,start:t,end:n}},_getScaleLabel:function(e){var t=this._parseValue(e);return void 0!==t.start?"["+t.start+", "+t.end+"]":+this.getRightValue(e)},getLabelForIndex:N.noop,getPixelForValue:N.noop,getValueForPixel:N.noop,getPixelForTick:function(e){var t=this,n=t.options.offset,r=t._ticks.length,a=1/Math.max(r-(n?0:1),1);return e<0||e>r-1?null:t.getPixelForDecimal(e*a+(n?a/2:0))},getPixelForDecimal:function(e){var t=this;return t._reversePixels&&(e=1-e),t._startPixel+e*t._length},getDecimalForPixel:function(e){var t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this,t=e.min,n=e.max;return e.beginAtZero?0:t<0&&n<0?n:t>0&&n>0?t:0},_autoSkip:function(e){var t,n,r,a,o=this,i=o.options.ticks,s=o._length,d=i.maxTicksLimit||s/o._tickSize()+1,l=i.major.enabled?function(e){var t,n,r=[];for(t=0,n=e.length;t<n;t++)e[t].major&&r.push(t);return r}(e):[],u=l.length,c=l[0],m=l[u-1];if(u>d)return function(e,t,n){var r,a,o=0,i=t[0];for(n=Math.ceil(n),r=0;r<e.length;r++)a=e[r],r===i?(a._index=r,i=t[++o*n]):delete a.label}(e,l,u/d),fn(e);if(r=function(e,t,n,r){var a,o,i,s,d=function(e){var t,n,r=e.length;if(r<2)return!1;for(n=e[0],t=1;t<r;++t)if(e[t]-e[t-1]!==n)return!1;return n}(e),l=(t.length-1)/r;if(!d)return Math.max(l,1);for(i=0,s=(a=N.math._factorize(d)).length-1;i<s;i++)if((o=a[i])>l)return o;return Math.max(l,1)}(l,e,0,d),u>0){for(t=0,n=u-1;t<n;t++)pn(e,r,l[t],l[t+1]);return a=u>1?(m-c)/(u-1):null,pn(e,r,N.isNullOrUndef(a)?0:c-a,c),pn(e,r,m,N.isNullOrUndef(a)?e.length:m+a),fn(e)}return pn(e,r),fn(e)},_tickSize:function(){var e=this,t=e.options.ticks,n=N.toRadians(e.labelRotation),r=Math.abs(Math.cos(n)),a=Math.abs(Math.sin(n)),o=e._getLabelSizes(),i=t.autoSkipPadding||0,s=o?o.widest.width+i:0,d=o?o.highest.height+i:0;return e.isHorizontal()?d*r>s*a?s/r:d/a:d*a<s*r?d/r:s/a},_isVisible:function(){var e,t,n,r=this,a=r.chart,o=r.options.display;if("auto"!==o)return!!o;for(e=0,t=a.data.datasets.length;e<t;++e)if(a.isDatasetVisible(e)&&((n=a.getDatasetMeta(e)).xAxisID===r.id||n.yAxisID===r.id))return!0;return!1},_computeGridLineItems:function(e){var t,n,r,a,o,i,s,d,l,u,c,m,_,h,f,p,g,y=this,b=y.chart,M=y.options,v=M.gridLines,k=M.position,A=v.offsetGridLines,x=y.isHorizontal(),w=y._ticksToDraw,L=w.length+(A?1:0),Y=cn(v),C=[],D=v.drawBorder?dn(v.lineWidth,0,0):0,T=D/2,S=N._alignPixel,B=function(e){return S(b,e,D)};for("top"===k?(t=B(y.bottom),s=y.bottom-Y,l=t-T,c=B(e.top)+T,_=e.bottom):"bottom"===k?(t=B(y.top),c=e.top,_=B(e.bottom)-T,s=t+T,l=y.top+Y):"left"===k?(t=B(y.right),i=y.right-Y,d=t-T,u=B(e.left)+T,m=e.right):(t=B(y.left),u=e.left,m=B(e.right)-T,i=t+T,d=y.left+Y),n=0;n<L;++n)r=w[n]||{},on(r.label)&&n<w.length||(n===y.zeroLineIndex&&M.offset===A?(h=v.zeroLineWidth,f=v.zeroLineColor,p=v.zeroLineBorderDash||[],g=v.zeroLineBorderDashOffset||0):(h=dn(v.lineWidth,n,1),f=dn(v.color,n,"rgba(0,0,0,0.1)"),p=v.borderDash||[],g=v.borderDashOffset||0),void 0!==(a=ln(y,r._index||n,A))&&(o=S(b,a,h),x?i=d=u=m=o:s=l=c=_=o,C.push({tx1:i,ty1:s,tx2:d,ty2:l,x1:u,y1:c,x2:m,y2:_,width:h,color:f,borderDash:p,borderDashOffset:g})));return C.ticksLength=L,C.borderValue=t,C},_computeLabelItems:function(){var e,t,n,r,a,o,i,s,d,l,u,c,m=this,_=m.options,h=_.ticks,f=_.position,p=h.mirror,g=m.isHorizontal(),y=m._ticksToDraw,b=hn(h),M=h.padding,v=cn(_.gridLines),k=-N.toRadians(m.labelRotation),A=[];for("top"===f?(o=m.bottom-v-M,i=k?"left":"center"):"bottom"===f?(o=m.top+v+M,i=k?"right":"center"):"left"===f?(a=m.right-(p?0:v)-M,i=p?"left":"right"):(a=m.left+(p?0:v)+M,i=p?"right":"left"),e=0,t=y.length;e<t;++e)r=(n=y[e]).label,on(r)||(s=m.getPixelForTick(n._index||e)+h.labelOffset,l=(d=n.major?b.major:b.minor).lineHeight,u=an(r)?r.length:1,g?(a=s,c="top"===f?((k?1:.5)-u)*l:(k?0:.5)*l):(o=s,c=(1-u)*l/2),A.push({x:a,y:o,rotation:k,label:r,font:d,textOffset:c,textAlign:i}));return A},_drawGrid:function(e){var t=this,n=t.options.gridLines;if(n.display){var r,a,o,i,s,d=t.ctx,l=t.chart,u=N._alignPixel,c=n.drawBorder?dn(n.lineWidth,0,0):0,m=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));for(o=0,i=m.length;o<i;++o)r=(s=m[o]).width,a=s.color,r&&a&&(d.save(),d.lineWidth=r,d.strokeStyle=a,d.setLineDash&&(d.setLineDash(s.borderDash),d.lineDashOffset=s.borderDashOffset),d.beginPath(),n.drawTicks&&(d.moveTo(s.tx1,s.ty1),d.lineTo(s.tx2,s.ty2)),n.drawOnChartArea&&(d.moveTo(s.x1,s.y1),d.lineTo(s.x2,s.y2)),d.stroke(),d.restore());if(c){var _,h,f,p,g=c,y=dn(n.lineWidth,m.ticksLength-1,1),b=m.borderValue;t.isHorizontal()?(_=u(l,t.left,g)-g/2,h=u(l,t.right,y)+y/2,f=p=b):(f=u(l,t.top,g)-g/2,p=u(l,t.bottom,y)+y/2,_=h=b),d.lineWidth=c,d.strokeStyle=dn(n.color,0),d.beginPath(),d.moveTo(_,f),d.lineTo(h,p),d.stroke()}}},_drawLabels:function(){var e=this;if(e.options.ticks.display){var t,n,r,a,o,i,s,d,l=e.ctx,u=e._labelItems||(e._labelItems=e._computeLabelItems());for(t=0,r=u.length;t<r;++t){if(i=(o=u[t]).font,l.save(),l.translate(o.x,o.y),l.rotate(o.rotation),l.font=i.string,l.fillStyle=i.color,l.textBaseline="middle",l.textAlign=o.textAlign,s=o.label,d=o.textOffset,an(s))for(n=0,a=s.length;n<a;++n)l.fillText(""+s[n],0,d),d+=i.lineHeight;else l.fillText(s,0,d);l.restore()}}},_drawTitle:function(){var e=this,t=e.ctx,n=e.options,r=n.scaleLabel;if(r.display){var a,o,i=sn(r.fontColor,F.global.defaultFontColor),s=N.options._parseFont(r),d=N.options.toPadding(r.padding),l=s.lineHeight/2,u=n.position,c=0;if(e.isHorizontal())a=e.left+e.width/2,o="bottom"===u?e.bottom-l-d.bottom:e.top+l+d.top;else{var m="left"===u;a=m?e.left+l+d.top:e.right-l-d.top,o=e.top+e.height/2,c=m?-.5*Math.PI:.5*Math.PI}t.save(),t.translate(a,o),t.rotate(c),t.textAlign="center",t.textBaseline="middle",t.fillStyle=i,t.font=s.string,t.fillText(r.labelString,0,0),t.restore()}},draw:function(e){var t=this;t._isVisible()&&(t._drawGrid(e),t._drawTitle(),t._drawLabels())},_layers:function(){var e=this,t=e.options,n=t.ticks&&t.ticks.z||0,r=t.gridLines&&t.gridLines.z||0;return e._isVisible()&&n!==r&&e.draw===e._draw?[{z:r,draw:function(){e._drawGrid.apply(e,arguments),e._drawTitle.apply(e,arguments)}},{z:n,draw:function(){e._drawLabels.apply(e,arguments)}}]:[{z:n,draw:function(){e.draw.apply(e,arguments)}}]},_getMatchingVisibleMetas:function(e){var t=this,n=t.isHorizontal();return t.chart._getSortedVisibleDatasetMetas().filter((function(r){return(!e||r.type===e)&&(n?r.xAxisID===t.id:r.yAxisID===t.id)}))}});gn.prototype._draw=gn.prototype.draw;var yn=gn,bn=N.isNullOrUndef,Mn=yn.extend({determineDataLimits:function(){var e,t=this,n=t._getLabels(),r=t.options.ticks,a=r.min,o=r.max,i=0,s=n.length-1;void 0!==a&&(e=n.indexOf(a))>=0&&(i=e),void 0!==o&&(e=n.indexOf(o))>=0&&(s=e),t.minIndex=i,t.maxIndex=s,t.min=n[i],t.max=n[s]},buildTicks:function(){var e=this,t=e._getLabels(),n=e.minIndex,r=e.maxIndex;e.ticks=0===n&&r===t.length-1?t:t.slice(n,r+1)},getLabelForIndex:function(e,t){var n=this,r=n.chart;return r.getDatasetMeta(t).controller._getValueScaleId()===n.id?n.getRightValue(r.data.datasets[t].data[e]):n._getLabels()[e]},_configure:function(){var e=this,t=e.options.offset,n=e.ticks;yn.prototype._configure.call(e),e.isHorizontal()||(e._reversePixels=!e._reversePixels),n&&(e._startValue=e.minIndex-(t?.5:0),e._valueRange=Math.max(n.length-(t?0:1),1))},getPixelForValue:function(e,t,n){var r,a,o,i=this;return bn(t)||bn(n)||(e=i.chart.data.datasets[n].data[t]),bn(e)||(r=i.isHorizontal()?e.x:e.y),(void 0!==r||void 0!==e&&isNaN(t))&&(a=i._getLabels(),e=N.valueOrDefault(r,e),t=-1!==(o=a.indexOf(e))?o:t,isNaN(t)&&(t=e)),i.getPixelForDecimal((t-i._startValue)/i._valueRange)},getPixelForTick:function(e){var t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e],e+this.minIndex)},getValueForPixel:function(e){var t=this,n=Math.round(t._startValue+t.getDecimalForPixel(e)*t._valueRange);return Math.min(Math.max(n,0),t.ticks.length-1)},getBasePixel:function(){return this.bottom}}),vn={position:"bottom"};Mn._defaults=vn;var kn=N.noop,An=N.isNullOrUndef;var xn=yn.extend({getRightValue:function(e){return"string"==typeof e?+e:yn.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var n=N.sign(e.min),r=N.sign(e.max);n<0&&r<0?e.max=0:n>0&&r>0&&(e.min=0)}var a=void 0!==t.min||void 0!==t.suggestedMin,o=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),a!==o&&e.min>=e.max&&(a?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:function(){var e,t=this,n=t.options.ticks,r=n.stepSize,a=n.maxTicksLimit;return r?e=Math.ceil(t.max/r)-Math.floor(t.min/r)+1:(e=t._computeTickLimit(),a=a||11),a&&(e=Math.min(a,e)),e},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:kn,buildTicks:function(){var e=this,t=e.options.ticks,n=e.getTickLimit(),r={maxTicks:n=Math.max(2,n),min:t.min,max:t.max,precision:t.precision,stepSize:N.valueOrDefault(t.fixedStepSize,t.stepSize)},a=e.ticks=function(e,t){var n,r,a,o,i=[],s=e.stepSize,d=s||1,l=e.maxTicks-1,u=e.min,c=e.max,m=e.precision,_=t.min,h=t.max,f=N.niceNum((h-_)/l/d)*d;if(f<1e-14&&An(u)&&An(c))return[_,h];(o=Math.ceil(h/f)-Math.floor(_/f))>l&&(f=N.niceNum(o*f/l/d)*d),s||An(m)?n=Math.pow(10,N._decimalPlaces(f)):(n=Math.pow(10,m),f=Math.ceil(f*n)/n),r=Math.floor(_/f)*f,a=Math.ceil(h/f)*f,s&&(!An(u)&&N.almostWhole(u/f,f/1e3)&&(r=u),!An(c)&&N.almostWhole(c/f,f/1e3)&&(a=c)),o=(a-r)/f,o=N.almostEquals(o,Math.round(o),f/1e3)?Math.round(o):Math.ceil(o),r=Math.round(r*n)/n,a=Math.round(a*n)/n,i.push(An(u)?r:u);for(var p=1;p<o;++p)i.push(Math.round((r+p*f)*n)/n);return i.push(An(c)?a:c),i}(r,e);e.handleDirectionalChanges(),e.max=N.max(a),e.min=N.min(a),t.reverse?(a.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),yn.prototype.convertTicksToLabels.call(e)},_configure:function(){var e,t=this,n=t.getTicks(),r=t.min,a=t.max;yn.prototype._configure.call(t),t.options.offset&&n.length&&(r-=e=(a-r)/Math.max(n.length-1,1)/2,a+=e),t._startValue=r,t._endValue=a,t._valueRange=a-r}}),wn={position:"left",ticks:{callback:rn.formatters.linear}};function Ln(e,t,n,r){var a,o,i=e.options,s=function(e,t,n){var r=[n.type,void 0===t&&void 0===n.stack?n.index:"",n.stack].join(".");return void 0===e[r]&&(e[r]={pos:[],neg:[]}),e[r]}(t,i.stacked,n),d=s.pos,l=s.neg,u=r.length;for(a=0;a<u;++a)o=e._parseValue(r[a]),isNaN(o.min)||isNaN(o.max)||n.data[a].hidden||(d[a]=d[a]||0,l[a]=l[a]||0,i.relativePoints?d[a]=100:o.min<0||o.max<0?l[a]+=o.min:d[a]+=o.max)}function Yn(e,t,n){var r,a,o=n.length;for(r=0;r<o;++r)a=e._parseValue(n[r]),isNaN(a.min)||isNaN(a.max)||t.data[r].hidden||(e.min=Math.min(e.min,a.min),e.max=Math.max(e.max,a.max))}var Cn=xn.extend({determineDataLimits:function(){var e,t,n,r,a=this,o=a.options,i=a.chart.data.datasets,s=a._getMatchingVisibleMetas(),d=o.stacked,l={},u=s.length;if(a.min=Number.POSITIVE_INFINITY,a.max=Number.NEGATIVE_INFINITY,void 0===d)for(e=0;!d&&e<u;++e)d=void 0!==(t=s[e]).stack;for(e=0;e<u;++e)n=i[(t=s[e]).index].data,d?Ln(a,l,t,n):Yn(a,t,n);N.each(l,(function(e){r=e.pos.concat(e.neg),a.min=Math.min(a.min,N.min(r)),a.max=Math.max(a.max,N.max(r))})),a.min=N.isFinite(a.min)&&!isNaN(a.min)?a.min:0,a.max=N.isFinite(a.max)&&!isNaN(a.max)?a.max:1,a.handleTickRangeOptions()},_computeTickLimit:function(){var e,t=this;return t.isHorizontal()?Math.ceil(t.width/40):(e=N.options._parseFont(t.options.ticks),Math.ceil(t.height/e.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return this._getScaleLabel(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this;return t.getPixelForDecimal((+t.getRightValue(e)-t._startValue)/t._valueRange)},getValueForPixel:function(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange},getPixelForTick:function(e){var t=this.ticksAsNumbers;return e<0||e>t.length-1?null:this.getPixelForValue(t[e])}}),Dn=wn;Cn._defaults=Dn;var Tn=N.valueOrDefault,Sn=N.math.log10;var Bn={position:"left",ticks:{callback:rn.formatters.logarithmic}};function jn(e,t){return N.isFinite(e)&&e>=0?e:t}var Hn=yn.extend({determineDataLimits:function(){var e,t,n,r,a,o,i=this,s=i.options,d=i.chart,l=d.data.datasets,u=i.isHorizontal();function c(e){return u?e.xAxisID===i.id:e.yAxisID===i.id}i.min=Number.POSITIVE_INFINITY,i.max=Number.NEGATIVE_INFINITY,i.minNotZero=Number.POSITIVE_INFINITY;var m=s.stacked;if(void 0===m)for(e=0;e<l.length;e++)if(t=d.getDatasetMeta(e),d.isDatasetVisible(e)&&c(t)&&void 0!==t.stack){m=!0;break}if(s.stacked||m){var _={};for(e=0;e<l.length;e++){var h=[(t=d.getDatasetMeta(e)).type,void 0===s.stacked&&void 0===t.stack?e:"",t.stack].join(".");if(d.isDatasetVisible(e)&&c(t))for(void 0===_[h]&&(_[h]=[]),a=0,o=(r=l[e].data).length;a<o;a++){var f=_[h];n=i._parseValue(r[a]),isNaN(n.min)||isNaN(n.max)||t.data[a].hidden||n.min<0||n.max<0||(f[a]=f[a]||0,f[a]+=n.max)}}N.each(_,(function(e){if(e.length>0){var t=N.min(e),n=N.max(e);i.min=Math.min(i.min,t),i.max=Math.max(i.max,n)}}))}else for(e=0;e<l.length;e++)if(t=d.getDatasetMeta(e),d.isDatasetVisible(e)&&c(t))for(a=0,o=(r=l[e].data).length;a<o;a++)n=i._parseValue(r[a]),isNaN(n.min)||isNaN(n.max)||t.data[a].hidden||n.min<0||n.max<0||(i.min=Math.min(n.min,i.min),i.max=Math.max(n.max,i.max),0!==n.min&&(i.minNotZero=Math.min(n.min,i.minNotZero)));i.min=N.isFinite(i.min)?i.min:null,i.max=N.isFinite(i.max)?i.max:null,i.minNotZero=N.isFinite(i.minNotZero)?i.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;e.min=jn(t.min,e.min),e.max=jn(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(Sn(e.min))-1),e.max=Math.pow(10,Math.floor(Sn(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(Sn(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(Sn(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(Sn(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,n=!e.isHorizontal(),r={min:jn(t.min),max:jn(t.max)},a=e.ticks=function(e,t){var n,r,a=[],o=Tn(e.min,Math.pow(10,Math.floor(Sn(t.min)))),i=Math.floor(Sn(t.max)),s=Math.ceil(t.max/Math.pow(10,i));0===o?(n=Math.floor(Sn(t.minNotZero)),r=Math.floor(t.minNotZero/Math.pow(10,n)),a.push(o),o=r*Math.pow(10,n)):(n=Math.floor(Sn(o)),r=Math.floor(o/Math.pow(10,n)));var d=n<0?Math.pow(10,Math.abs(n)):1;do{a.push(o),10==++r&&(r=1,d=++n>=0?1:d),o=Math.round(r*Math.pow(10,n)*d)/d}while(n<i||n===i&&r<s);var l=Tn(e.max,o);return a.push(l),a}(r,e);e.max=N.max(a),e.min=N.min(a),t.reverse?(n=!n,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n&&a.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),yn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return this._getScaleLabel(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){var t=this.tickValues;return e<0||e>t.length-1?null:this.getPixelForValue(t[e])},_getFirstTickValue:function(e){var t=Math.floor(Sn(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},_configure:function(){var e=this,t=e.min,n=0;yn.prototype._configure.call(e),0===t&&(t=e._getFirstTickValue(e.minNotZero),n=Tn(e.options.ticks.fontSize,F.global.defaultFontSize)/e._length),e._startValue=Sn(t),e._valueOffset=n,e._valueRange=(Sn(e.max)-Sn(t))/(1-n)},getPixelForValue:function(e){var t=this,n=0;return(e=+t.getRightValue(e))>t.min&&e>0&&(n=(Sn(e)-t._startValue)/t._valueRange+t._valueOffset),t.getPixelForDecimal(n)},getValueForPixel:function(e){var t=this,n=t.getDecimalForPixel(e);return 0===n&&0===t.min?0:Math.pow(10,t._startValue+(n-t._valueOffset)*t._valueRange)}}),Pn=Bn;Hn._defaults=Pn;var On=N.valueOrDefault,Fn=N.valueAtIndexOrDefault,En=N.options.resolve,Wn={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:rn.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function zn(e){var t=e.ticks;return t.display&&e.display?On(t.fontSize,F.global.defaultFontSize)+2*t.backdropPaddingY:0}function In(e,t,n,r,a){return e===r||e===a?{start:t-n/2,end:t+n/2}:e<r||e>a?{start:t-n,end:t}:{start:t,end:t+n}}function Nn(e){return 0===e||180===e?"center":e<180?"left":"right"}function Rn(e,t,n,r){var a,o,i=n.y+r/2;if(N.isArray(t))for(a=0,o=t.length;a<o;++a)e.fillText(t[a],n.x,i),i+=r;else e.fillText(t,n.x,i)}function qn(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function Vn(e){return N.isNumber(e)?e:0}var Un=xn.extend({setDimensions:function(){var e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=zn(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2},determineDataLimits:function(){var e=this,t=e.chart,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;N.each(t.data.datasets,(function(a,o){if(t.isDatasetVisible(o)){var i=t.getDatasetMeta(o);N.each(a.data,(function(t,a){var o=+e.getRightValue(t);isNaN(o)||i.data[a].hidden||(n=Math.min(o,n),r=Math.max(o,r))}))}})),e.min=n===Number.POSITIVE_INFINITY?0:n,e.max=r===Number.NEGATIVE_INFINITY?0:r,e.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/zn(this.options))},convertTicksToLabels:function(){var e=this;xn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map((function(){var t=N.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""}))},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e=this,t=e.options;t.display&&t.pointLabels.display?function(e){var t,n,r,a=N.options._parseFont(e.options.pointLabels),o={l:0,r:e.width,t:0,b:e.height-e.paddingTop},i={};e.ctx.font=a.string,e._pointLabelSizes=[];var s,d,l,u=e.chart.data.labels.length;for(t=0;t<u;t++){r=e.getPointPosition(t,e.drawingArea+5),s=e.ctx,d=a.lineHeight,l=e.pointLabels[t],n=N.isArray(l)?{w:N.longestText(s,s.font,l),h:l.length*d}:{w:s.measureText(l).width,h:d},e._pointLabelSizes[t]=n;var c=e.getIndexAngle(t),m=N.toDegrees(c)%360,_=In(m,r.x,n.w,0,180),h=In(m,r.y,n.h,90,270);_.start<o.l&&(o.l=_.start,i.l=c),_.end>o.r&&(o.r=_.end,i.r=c),h.start<o.t&&(o.t=h.start,i.t=c),h.end>o.b&&(o.b=h.end,i.b=c)}e.setReductions(e.drawingArea,o,i)}(e):e.setCenterPoint(0,0,0,0)},setReductions:function(e,t,n){var r=this,a=t.l/Math.sin(n.l),o=Math.max(t.r-r.width,0)/Math.sin(n.r),i=-t.t/Math.cos(n.t),s=-Math.max(t.b-(r.height-r.paddingTop),0)/Math.cos(n.b);a=Vn(a),o=Vn(o),i=Vn(i),s=Vn(s),r.drawingArea=Math.min(Math.floor(e-(a+o)/2),Math.floor(e-(i+s)/2)),r.setCenterPoint(a,o,i,s)},setCenterPoint:function(e,t,n,r){var a=this,o=a.width-t-a.drawingArea,i=e+a.drawingArea,s=n+a.drawingArea,d=a.height-a.paddingTop-r-a.drawingArea;a.xCenter=Math.floor((i+o)/2+a.left),a.yCenter=Math.floor((s+d)/2+a.top+a.paddingTop)},getIndexAngle:function(e){var t=this.chart,n=(e*(360/t.data.labels.length)+((t.options||{}).startAngle||0))%360;return(n<0?n+360:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(N.isNullOrUndef(e))return NaN;var n=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*n:(e-t.min)*n},getPointPosition:function(e,t){var n=this,r=n.getIndexAngle(e)-Math.PI/2;return{x:Math.cos(r)*t+n.xCenter,y:Math.sin(r)*t+n.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(e){var t=this,n=t.min,r=t.max;return t.getPointPositionForValue(e||0,t.beginAtZero?0:n<0&&r<0?r:n>0&&r>0?n:0)},_drawGrid:function(){var e,t,n,r=this,a=r.ctx,o=r.options,i=o.gridLines,s=o.angleLines,d=On(s.lineWidth,i.lineWidth),l=On(s.color,i.color);if(o.pointLabels.display&&function(e){var t=e.ctx,n=e.options,r=n.pointLabels,a=zn(n),o=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),i=N.options._parseFont(r);t.save(),t.font=i.string,t.textBaseline="middle";for(var s=e.chart.data.labels.length-1;s>=0;s--){var d=0===s?a/2:0,l=e.getPointPosition(s,o+d+5),u=Fn(r.fontColor,s,F.global.defaultFontColor);t.fillStyle=u;var c=e.getIndexAngle(s),m=N.toDegrees(c);t.textAlign=Nn(m),qn(m,e._pointLabelSizes[s],l),Rn(t,e.pointLabels[s],l,i.lineHeight)}t.restore()}(r),i.display&&N.each(r.ticks,(function(e,n){0!==n&&(t=r.getDistanceFromCenterForValue(r.ticksAsNumbers[n]),function(e,t,n,r){var a,o=e.ctx,i=t.circular,s=e.chart.data.labels.length,d=Fn(t.color,r-1),l=Fn(t.lineWidth,r-1);if((i||s)&&d&&l){if(o.save(),o.strokeStyle=d,o.lineWidth=l,o.setLineDash&&(o.setLineDash(t.borderDash||[]),o.lineDashOffset=t.borderDashOffset||0),o.beginPath(),i)o.arc(e.xCenter,e.yCenter,n,0,2*Math.PI);else{a=e.getPointPosition(0,n),o.moveTo(a.x,a.y);for(var u=1;u<s;u++)a=e.getPointPosition(u,n),o.lineTo(a.x,a.y)}o.closePath(),o.stroke(),o.restore()}}(r,i,t,n))})),s.display&&d&&l){for(a.save(),a.lineWidth=d,a.strokeStyle=l,a.setLineDash&&(a.setLineDash(En([s.borderDash,i.borderDash,[]])),a.lineDashOffset=En([s.borderDashOffset,i.borderDashOffset,0])),e=r.chart.data.labels.length-1;e>=0;e--)t=r.getDistanceFromCenterForValue(o.ticks.reverse?r.min:r.max),n=r.getPointPosition(e,t),a.beginPath(),a.moveTo(r.xCenter,r.yCenter),a.lineTo(n.x,n.y),a.stroke();a.restore()}},_drawLabels:function(){var e=this,t=e.ctx,n=e.options.ticks;if(n.display){var r,a,o=e.getIndexAngle(0),i=N.options._parseFont(n),s=On(n.fontColor,F.global.defaultFontColor);t.save(),t.font=i.string,t.translate(e.xCenter,e.yCenter),t.rotate(o),t.textAlign="center",t.textBaseline="middle",N.each(e.ticks,(function(o,d){(0!==d||n.reverse)&&(r=e.getDistanceFromCenterForValue(e.ticksAsNumbers[d]),n.showLabelBackdrop&&(a=t.measureText(o).width,t.fillStyle=n.backdropColor,t.fillRect(-a/2-n.backdropPaddingX,-r-i.size/2-n.backdropPaddingY,a+2*n.backdropPaddingX,i.size+2*n.backdropPaddingY)),t.fillStyle=s,t.fillText(o,0,-r))})),t.restore()}},_drawTitle:N.noop}),Jn=Wn;Un._defaults=Jn;var Gn=N._deprecated,Zn=N.options.resolve,$n=N.valueOrDefault,Qn=Number.MIN_SAFE_INTEGER||-9007199254740991,Xn=Number.MAX_SAFE_INTEGER||9007199254740991,Kn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},er=Object.keys(Kn);function tr(e,t){return e-t}function nr(e){return N.valueOrDefault(e.time.min,e.ticks.min)}function rr(e){return N.valueOrDefault(e.time.max,e.ticks.max)}function ar(e,t,n,r){var a=function(e,t,n){for(var r,a,o,i=0,s=e.length-1;i>=0&&i<=s;){if(a=e[(r=i+s>>1)-1]||null,o=e[r],!a)return{lo:null,hi:o};if(o[t]<n)i=r+1;else{if(!(a[t]>n))return{lo:a,hi:o};s=r-1}}return{lo:o,hi:null}}(e,t,n),o=a.lo?a.hi?a.lo:e[e.length-2]:e[0],i=a.lo?a.hi?a.hi:e[e.length-1]:e[1],s=i[t]-o[t],d=s?(n-o[t])/s:0,l=(i[r]-o[r])*d;return o[r]+l}function or(e,t){var n=e._adapter,r=e.options.time,a=r.parser,o=a||r.format,i=t;return"function"==typeof a&&(i=a(i)),N.isFinite(i)||(i="string"==typeof o?n.parse(i,o):n.parse(i)),null!==i?+i:(a||"function"!=typeof o||(i=o(t),N.isFinite(i)||(i=n.parse(i))),i)}function ir(e,t){if(N.isNullOrUndef(t))return null;var n=e.options.time,r=or(e,e.getRightValue(t));return null===r||n.round&&(r=+e._adapter.startOf(r,n.round)),r}function sr(e,t,n,r){var a,o,i,s=er.length;for(a=er.indexOf(e);a<s-1;++a)if(i=(o=Kn[er[a]]).steps?o.steps:Xn,o.common&&Math.ceil((n-t)/(i*o.size))<=r)return er[a];return er[s-1]}function dr(e,t,n){var r,a,o=[],i={},s=t.length;for(r=0;r<s;++r)i[a=t[r]]=r,o.push({value:a,major:!1});return 0!==s&&n?function(e,t,n,r){var a,o,i=e._adapter,s=+i.startOf(t[0].value,r),d=t[t.length-1].value;for(a=s;a<=d;a=+i.add(a,1,r))(o=n[a])>=0&&(t[o].major=!0);return t}(e,o,i,n):o}var lr=yn.extend({initialize:function(){this.mergeTicksOptions(),yn.prototype.initialize.call(this)},update:function(){var e=this,t=e.options,n=t.time||(t.time={}),r=e._adapter=new nn._date(t.adapters.date);return Gn("time scale",n.format,"time.format","time.parser"),Gn("time scale",n.min,"time.min","ticks.min"),Gn("time scale",n.max,"time.max","ticks.max"),N.mergeIf(n.displayFormats,r.formats()),yn.prototype.update.apply(e,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),yn.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,n,r,a,o,i,s=this,d=s.chart,l=s._adapter,u=s.options,c=u.time.unit||"day",m=Xn,_=Qn,h=[],f=[],p=[],g=s._getLabels();for(e=0,n=g.length;e<n;++e)p.push(ir(s,g[e]));for(e=0,n=(d.data.datasets||[]).length;e<n;++e)if(d.isDatasetVisible(e))if(a=d.data.datasets[e].data,N.isObject(a[0]))for(f[e]=[],t=0,r=a.length;t<r;++t)o=ir(s,a[t]),h.push(o),f[e][t]=o;else f[e]=p.slice(0),i||(h=h.concat(p),i=!0);else f[e]=[];p.length&&(m=Math.min(m,p[0]),_=Math.max(_,p[p.length-1])),h.length&&(h=n>1?function(e){var t,n,r,a={},o=[];for(t=0,n=e.length;t<n;++t)a[r=e[t]]||(a[r]=!0,o.push(r));return o}(h).sort(tr):h.sort(tr),m=Math.min(m,h[0]),_=Math.max(_,h[h.length-1])),m=ir(s,nr(u))||m,_=ir(s,rr(u))||_,m=m===Xn?+l.startOf(Date.now(),c):m,_=_===Qn?+l.endOf(Date.now(),c)+1:_,s.min=Math.min(m,_),s.max=Math.max(m+1,_),s._table=[],s._timestamps={data:h,datasets:f,labels:p}},buildTicks:function(){var e,t,n,r=this,a=r.min,o=r.max,i=r.options,s=i.ticks,d=i.time,l=r._timestamps,u=[],c=r.getLabelCapacity(a),m=s.source,_=i.distribution;for(l="data"===m||"auto"===m&&"series"===_?l.data:"labels"===m?l.labels:function(e,t,n,r){var a,o=e._adapter,i=e.options,s=i.time,d=s.unit||sr(s.minUnit,t,n,r),l=Zn([s.stepSize,s.unitStepSize,1]),u="week"===d&&s.isoWeekday,c=t,m=[];if(u&&(c=+o.startOf(c,"isoWeek",u)),c=+o.startOf(c,u?"day":d),o.diff(n,t,d)>1e5*l)throw t+" and "+n+" are too far apart with stepSize of "+l+" "+d;for(a=c;a<n;a=+o.add(a,l,d))m.push(a);return a!==n&&"ticks"!==i.bounds||m.push(a),m}(r,a,o,c),"ticks"===i.bounds&&l.length&&(a=l[0],o=l[l.length-1]),a=ir(r,nr(i))||a,o=ir(r,rr(i))||o,e=0,t=l.length;e<t;++e)(n=l[e])>=a&&n<=o&&u.push(n);return r.min=a,r.max=o,r._unit=d.unit||(s.autoSkip?sr(d.minUnit,r.min,r.max,c):function(e,t,n,r,a){var o,i;for(o=er.length-1;o>=er.indexOf(n);o--)if(i=er[o],Kn[i].common&&e._adapter.diff(a,r,i)>=t-1)return i;return er[n?er.indexOf(n):0]}(r,u.length,d.minUnit,r.min,r.max)),r._majorUnit=s.major.enabled&&"year"!==r._unit?function(e){for(var t=er.indexOf(e)+1,n=er.length;t<n;++t)if(Kn[er[t]].common)return er[t]}(r._unit):void 0,r._table=function(e,t,n,r){if("linear"===r||!e.length)return[{time:t,pos:0},{time:n,pos:1}];var a,o,i,s,d,l=[],u=[t];for(a=0,o=e.length;a<o;++a)(s=e[a])>t&&s<n&&u.push(s);for(u.push(n),a=0,o=u.length;a<o;++a)d=u[a+1],i=u[a-1],s=u[a],void 0!==i&&void 0!==d&&Math.round((d+i)/2)===s||l.push({time:s,pos:a/(o-1)});return l}(r._timestamps.data,a,o,_),r._offsets=function(e,t,n,r,a){var o,i,s=0,d=0;return a.offset&&t.length&&(o=ar(e,"time",t[0],"pos"),s=1===t.length?1-o:(ar(e,"time",t[1],"pos")-o)/2,i=ar(e,"time",t[t.length-1],"pos"),d=1===t.length?i:(i-ar(e,"time",t[t.length-2],"pos"))/2),{start:s,end:d,factor:1/(s+1+d)}}(r._table,u,0,0,i),s.reverse&&u.reverse(),dr(r,u,r._majorUnit)},getLabelForIndex:function(e,t){var n=this,r=n._adapter,a=n.chart.data,o=n.options.time,i=a.labels&&e<a.labels.length?a.labels[e]:"",s=a.datasets[t].data[e];return N.isObject(s)&&(i=n.getRightValue(s)),o.tooltipFormat?r.format(or(n,i),o.tooltipFormat):"string"==typeof i?i:r.format(or(n,i),o.displayFormats.datetime)},tickFormatFunction:function(e,t,n,r){var a=this,o=a._adapter,i=a.options,s=i.time.displayFormats,d=s[a._unit],l=a._majorUnit,u=s[l],c=n[t],m=i.ticks,_=l&&u&&c&&c.major,h=o.format(e,r||(_?u:d)),f=_?m.major:m.minor,p=Zn([f.callback,f.userCallback,m.callback,m.userCallback]);return p?p(h,t,n):h},convertTicksToLabels:function(e){var t,n,r=[];for(t=0,n=e.length;t<n;++t)r.push(this.tickFormatFunction(e[t].value,t,e));return r},getPixelForOffset:function(e){var t=this,n=t._offsets,r=ar(t._table,"time",e,"pos");return t.getPixelForDecimal((n.start+r)*n.factor)},getPixelForValue:function(e,t,n){var r=this,a=null;if(void 0!==t&&void 0!==n&&(a=r._timestamps.datasets[n][t]),null===a&&(a=ir(r,e)),null!==a)return r.getPixelForOffset(a)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end,a=ar(t._table,"pos",r,"time");return t._adapter._create(a)},_getLabelSize:function(e){var t=this,n=t.options.ticks,r=t.ctx.measureText(e).width,a=N.toRadians(t.isHorizontal()?n.maxRotation:n.minRotation),o=Math.cos(a),i=Math.sin(a),s=$n(n.fontSize,F.global.defaultFontSize);return{w:r*o+s*i,h:r*i+s*o}},getLabelWidth:function(e){return this._getLabelSize(e).w},getLabelCapacity:function(e){var t=this,n=t.options.time,r=n.displayFormats,a=r[n.unit]||r.millisecond,o=t.tickFormatFunction(e,0,dr(t,[e],t._majorUnit),a),i=t._getLabelSize(o),s=Math.floor(t.isHorizontal()?t.width/i.w:t.height/i.h);return t.options.offset&&s--,s>0?s:1}}),ur={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};lr._defaults=ur;var cr={category:Mn,linear:Cn,logarithmic:Hn,radialLinear:Un,time:lr},mr={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};nn._date.override("function"==typeof e?{_id:"moment",formats:function(){return mr},parse:function(t,n){return"string"==typeof t&&"string"==typeof n?t=e(t,n):t instanceof e||(t=e(t)),t.isValid()?t.valueOf():null},format:function(t,n){return e(t).format(n)},add:function(t,n,r){return e(t).add(n,r).valueOf()},diff:function(t,n,r){return e(t).diff(e(n),r)},startOf:function(t,n,r){return t=e(t),"isoWeek"===n?t.isoWeekday(r).valueOf():t.startOf(n).valueOf()},endOf:function(t,n){return e(t).endOf(n).valueOf()},_create:function(t){return e(t)}}:{}),F._set("global",{plugins:{filler:{propagate:!0}}});var _r={dataset:function(e){var t=e.fill,n=e.chart,r=n.getDatasetMeta(t),a=r&&n.isDatasetVisible(t)&&r.dataset._children||[],o=a.length||0;return o?function(e,t){return t<o&&a[t]._view||null}:null},boundary:function(e){var t=e.boundary,n=t?t.x:null,r=t?t.y:null;return N.isArray(t)?function(e,n){return t[n]}:function(e){return{x:null===n?e.x:n,y:null===r?e.y:r}}}};function hr(e,t,n){var r,a=e._model||{},o=a.fill;if(void 0===o&&(o=!!a.backgroundColor),!1===o||null===o)return!1;if(!0===o)return"origin";if(r=parseFloat(o,10),isFinite(r)&&Math.floor(r)===r)return"-"!==o[0]&&"+"!==o[0]||(r=t+r),!(r===t||r<0||r>=n)&&r;switch(o){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return o;default:return!1}}function fr(e){return(e.el._scale||{}).getPointPositionForValue?function(e){var t,n,r,a,o,i=e.el._scale,s=i.options,d=i.chart.data.labels.length,l=e.fill,u=[];if(!d)return null;for(t=s.ticks.reverse?i.max:i.min,n=s.ticks.reverse?i.min:i.max,r=i.getPointPositionForValue(0,t),a=0;a<d;++a)o="start"===l||"end"===l?i.getPointPositionForValue(a,"start"===l?t:n):i.getBasePosition(a),s.gridLines.circular&&(o.cx=r.x,o.cy=r.y,o.angle=i.getIndexAngle(a)-Math.PI/2),u.push(o);return u}(e):function(e){var t,n=e.el._model||{},r=e.el._scale||{},a=e.fill,o=null;if(isFinite(a))return null;if("start"===a?o=void 0===n.scaleBottom?r.bottom:n.scaleBottom:"end"===a?o=void 0===n.scaleTop?r.top:n.scaleTop:void 0!==n.scaleZero?o=n.scaleZero:r.getBasePixel&&(o=r.getBasePixel()),null!=o){if(void 0!==o.x&&void 0!==o.y)return o;if(N.isFinite(o))return{x:(t=r.isHorizontal())?o:null,y:t?null:o}}return null}(e)}function pr(e,t,n){var r,a=e[t].fill,o=[t];if(!n)return a;for(;!1!==a&&-1===o.indexOf(a);){if(!isFinite(a))return a;if(!(r=e[a]))return!1;if(r.visible)return a;o.push(a),a=r.fill}return!1}function gr(e){var t=e.fill,n="dataset";return!1===t?null:(isFinite(t)||(n="boundary"),_r[n](e))}function yr(e){return e&&!e.skip}function br(e,t,n,r,a){var o,i,s,d;if(r&&a){for(e.moveTo(t[0].x,t[0].y),o=1;o<r;++o)N.canvas.lineTo(e,t[o-1],t[o]);if(void 0===n[0].angle)for(e.lineTo(n[a-1].x,n[a-1].y),o=a-1;o>0;--o)N.canvas.lineTo(e,n[o],n[o-1],!0);else for(i=n[0].cx,s=n[0].cy,d=Math.sqrt(Math.pow(n[0].x-i,2)+Math.pow(n[0].y-s,2)),o=a-1;o>0;--o)e.arc(i,s,d,n[o].angle,n[o-1].angle,!0)}}function Mr(e,t,n,r,a,o){var i,s,d,l,u,c,m,_,h=t.length,f=r.spanGaps,p=[],g=[],y=0,b=0;for(e.beginPath(),i=0,s=h;i<s;++i)u=n(l=t[d=i%h]._view,d,r),c=yr(l),m=yr(u),o&&void 0===_&&c&&(s=h+(_=i+1)),c&&m?(y=p.push(l),b=g.push(u)):y&&b&&(f?(c&&p.push(l),m&&g.push(u)):(br(e,p,g,y,b),y=b=0,p=[],g=[]));br(e,p,g,y,b),e.closePath(),e.fillStyle=a,e.fill()}var vr={id:"filler",afterDatasetsUpdate:function(e,t){var n,r,a,o,i=(e.data.datasets||[]).length,s=t.propagate,d=[];for(r=0;r<i;++r)o=null,(a=(n=e.getDatasetMeta(r)).dataset)&&a._model&&a instanceof ke.Line&&(o={visible:e.isDatasetVisible(r),fill:hr(a,r,i),chart:e,el:a}),n.$filler=o,d.push(o);for(r=0;r<i;++r)(o=d[r])&&(o.fill=pr(d,r,s),o.boundary=fr(o),o.mapper=gr(o))},beforeDatasetsDraw:function(e){var t,n,r,a,o,i,s,d=e._getSortedVisibleDatasetMetas(),l=e.ctx;for(n=d.length-1;n>=0;--n)(t=d[n].$filler)&&t.visible&&(a=(r=t.el)._view,o=r._children||[],i=t.mapper,s=a.backgroundColor||F.global.defaultColor,i&&s&&o.length&&(N.canvas.clipArea(l,e.chartArea),Mr(l,o,i,a,s,r._loop),N.canvas.unclipArea(l)))}},kr=N.rtl.getRtlAdapter,Ar=N.noop,xr=N.valueOrDefault;function wr(e,t){return e.usePointStyle&&e.boxWidth>t?t:e.boxWidth}F._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var n=t.datasetIndex,r=this.chart,a=r.getDatasetMeta(n);a.hidden=null===a.hidden?!r.data.datasets[n].hidden:null,r.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data.datasets,n=e.options.legend||{},r=n.labels&&n.labels.usePointStyle;return e._getSortedDatasetMetas().map((function(n){var a=n.controller.getStyle(r?0:void 0);return{text:t[n.index].label,fillStyle:a.backgroundColor,hidden:!e.isDatasetVisible(n.index),lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:a.borderWidth,strokeStyle:a.borderColor,pointStyle:a.pointStyle,rotation:a.rotation,datasetIndex:n.index}}),this)}}},legendCallback:function(e){var t,n,r,a=document.createElement("ul"),o=e.data.datasets;for(a.setAttribute("class",e.id+"-legend"),t=0,n=o.length;t<n;t++)(r=a.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[t].backgroundColor,o[t].label&&r.appendChild(document.createTextNode(o[t].label));return a.outerHTML}});var Lr=Z.extend({initialize:function(e){var t=this;N.extend(t,e),t.legendHitBoxes=[],t._hoveredItem=null,t.doughnutMode=!1},beforeUpdate:Ar,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:Ar,beforeSetDimensions:Ar,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:Ar,beforeBuildLabels:Ar,buildLabels:function(){var e=this,t=e.options.labels||{},n=N.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter((function(n){return t.filter(n,e.chart.data)}))),e.options.reverse&&n.reverse(),e.legendItems=n},afterBuildLabels:Ar,beforeFit:Ar,fit:function(){var e=this,t=e.options,n=t.labels,r=t.display,a=e.ctx,o=N.options._parseFont(n),i=o.size,s=e.legendHitBoxes=[],d=e.minSize,l=e.isHorizontal();if(l?(d.width=e.maxWidth,d.height=r?10:0):(d.width=r?10:0,d.height=e.maxHeight),r){if(a.font=o.string,l){var u=e.lineWidths=[0],c=0;a.textAlign="left",a.textBaseline="middle",N.each(e.legendItems,(function(e,t){var r=wr(n,i)+i/2+a.measureText(e.text).width;(0===t||u[u.length-1]+r+2*n.padding>d.width)&&(c+=i+n.padding,u[u.length-(t>0?0:1)]=0),s[t]={left:0,top:0,width:r,height:i},u[u.length-1]+=r+n.padding})),d.height+=c}else{var m=n.padding,_=e.columnWidths=[],h=e.columnHeights=[],f=n.padding,p=0,g=0;N.each(e.legendItems,(function(e,t){var r=wr(n,i)+i/2+a.measureText(e.text).width;t>0&&g+i+2*m>d.height&&(f+=p+n.padding,_.push(p),h.push(g),p=0,g=0),p=Math.max(p,r),g+=i+m,s[t]={left:0,top:0,width:r,height:i}})),f+=p,_.push(p),h.push(g),d.width+=f}e.width=d.width,e.height=d.height}else e.width=d.width=e.height=d.height=0},afterFit:Ar,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,n=t.labels,r=F.global,a=r.defaultColor,o=r.elements.line,i=e.height,s=e.columnHeights,d=e.width,l=e.lineWidths;if(t.display){var u,c=kr(t.rtl,e.left,e.minSize.width),m=e.ctx,_=xr(n.fontColor,r.defaultFontColor),h=N.options._parseFont(n),f=h.size;m.textAlign=c.textAlign("left"),m.textBaseline="middle",m.lineWidth=.5,m.strokeStyle=_,m.fillStyle=_,m.font=h.string;var p=wr(n,f),g=e.legendHitBoxes,y=function(e,r){switch(t.align){case"start":return n.padding;case"end":return e-r;default:return(e-r+n.padding)/2}},b=e.isHorizontal();u=b?{x:e.left+y(d,l[0]),y:e.top+n.padding,line:0}:{x:e.left+n.padding,y:e.top+y(i,s[0]),line:0},N.rtl.overrideTextDirection(e.ctx,t.textDirection);var M=f+n.padding;N.each(e.legendItems,(function(t,r){var _=m.measureText(t.text).width,h=p+f/2+_,v=u.x,k=u.y;c.setWidth(e.minSize.width),b?r>0&&v+h+n.padding>e.left+e.minSize.width&&(k=u.y+=M,u.line++,v=u.x=e.left+y(d,l[u.line])):r>0&&k+M>e.top+e.minSize.height&&(v=u.x=v+e.columnWidths[u.line]+n.padding,u.line++,k=u.y=e.top+y(i,s[u.line]));var A=c.x(v);(function(e,t,r){if(!(isNaN(p)||p<=0)){m.save();var i=xr(r.lineWidth,o.borderWidth);if(m.fillStyle=xr(r.fillStyle,a),m.lineCap=xr(r.lineCap,o.borderCapStyle),m.lineDashOffset=xr(r.lineDashOffset,o.borderDashOffset),m.lineJoin=xr(r.lineJoin,o.borderJoinStyle),m.lineWidth=i,m.strokeStyle=xr(r.strokeStyle,a),m.setLineDash&&m.setLineDash(xr(r.lineDash,o.borderDash)),n&&n.usePointStyle){var s=p*Math.SQRT2/2,d=c.xPlus(e,p/2),l=t+f/2;N.canvas.drawPoint(m,r.pointStyle,s,d,l,r.rotation)}else m.fillRect(c.leftForLtr(e,p),t,p,f),0!==i&&m.strokeRect(c.leftForLtr(e,p),t,p,f);m.restore()}})(A,k,t),g[r].left=c.leftForLtr(A,g[r].width),g[r].top=k,function(e,t,n,r){var a=f/2,o=c.xPlus(e,p+a),i=t+a;m.fillText(n.text,o,i),n.hidden&&(m.beginPath(),m.lineWidth=2,m.moveTo(o,i),m.lineTo(c.xPlus(o,r),i),m.stroke())}(A,k,t,_),b?u.x+=h+n.padding:u.y+=M})),N.rtl.restoreTextDirection(e.ctx,t.textDirection)}},_getLegendItemAt:function(e,t){var n,r,a,o=this;if(e>=o.left&&e<=o.right&&t>=o.top&&t<=o.bottom)for(a=o.legendHitBoxes,n=0;n<a.length;++n)if(e>=(r=a[n]).left&&e<=r.left+r.width&&t>=r.top&&t<=r.top+r.height)return o.legendItems[n];return null},handleEvent:function(e){var t,n=this,r=n.options,a="mouseup"===e.type?"click":e.type;if("mousemove"===a){if(!r.onHover&&!r.onLeave)return}else{if("click"!==a)return;if(!r.onClick)return}t=n._getLegendItemAt(e.x,e.y),"click"===a?t&&r.onClick&&r.onClick.call(n,e.native,t):(r.onLeave&&t!==n._hoveredItem&&(n._hoveredItem&&r.onLeave.call(n,e.native,n._hoveredItem),n._hoveredItem=t),r.onHover&&t&&r.onHover.call(n,e.native,t))}});function Yr(e,t){var n=new Lr({ctx:e.ctx,options:t,chart:e});ft.configure(e,n,t),ft.addBox(e,n),e.legend=n}var Cr={id:"legend",_element:Lr,beforeInit:function(e){var t=e.options.legend;t&&Yr(e,t)},beforeUpdate:function(e){var t=e.options.legend,n=e.legend;t?(N.mergeIf(t,F.global.legend),n?(ft.configure(e,n,t),n.options=t):Yr(e,t)):n&&(ft.removeBox(e,n),delete e.legend)},afterEvent:function(e,t){var n=e.legend;n&&n.handleEvent(t)}},Dr=N.noop;F._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var Tr=Z.extend({initialize:function(e){N.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:Dr,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:Dr,beforeSetDimensions:Dr,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:Dr,beforeBuildLabels:Dr,buildLabels:Dr,afterBuildLabels:Dr,beforeFit:Dr,fit:function(){var e,t=this,n=t.options,r=t.minSize={},a=t.isHorizontal();n.display?(e=(N.isArray(n.text)?n.text.length:1)*N.options._parseFont(n).lineHeight+2*n.padding,t.width=r.width=a?t.maxWidth:e,t.height=r.height=a?e:t.maxHeight):t.width=r.width=t.height=r.height=0},afterFit:Dr,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,n=e.options;if(n.display){var r,a,o,i=N.options._parseFont(n),s=i.lineHeight,d=s/2+n.padding,l=0,u=e.top,c=e.left,m=e.bottom,_=e.right;t.fillStyle=N.valueOrDefault(n.fontColor,F.global.defaultFontColor),t.font=i.string,e.isHorizontal()?(a=c+(_-c)/2,o=u+d,r=_-c):(a="left"===n.position?c+d:_-d,o=u+(m-u)/2,r=m-u,l=Math.PI*("left"===n.position?-.5:.5)),t.save(),t.translate(a,o),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var h=n.text;if(N.isArray(h))for(var f=0,p=0;p<h.length;++p)t.fillText(h[p],0,f,r),f+=s;else t.fillText(h,0,0,r);t.restore()}}});function Sr(e,t){var n=new Tr({ctx:e.ctx,options:t,chart:e});ft.configure(e,n,t),ft.addBox(e,n),e.titleBlock=n}var Br={},jr=vr,Hr=Cr,Pr={id:"title",_element:Tr,beforeInit:function(e){var t=e.options.title;t&&Sr(e,t)},beforeUpdate:function(e){var t=e.options.title,n=e.titleBlock;t?(N.mergeIf(t,F.global.title),n?(ft.configure(e,n,t),n.options=t):Sr(e,t)):n&&(ft.removeBox(e,n),delete e.titleBlock)}};for(var Or in Br.filler=jr,Br.legend=Hr,Br.title=Pr,Kt.helpers=N,function(){function e(e,t,n){var r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}function t(e){return null!=e&&"none"!==e}function n(n,r,a){var o=document.defaultView,i=N._getParentNode(n),s=o.getComputedStyle(n)[r],d=o.getComputedStyle(i)[r],l=t(s),u=t(d),c=Number.POSITIVE_INFINITY;return l||u?Math.min(l?e(s,n,a):c,u?e(d,i,a):c):"none"}N.where=function(e,t){if(N.isArray(e)&&Array.prototype.filter)return e.filter(t);var n=[];return N.each(e,(function(e){t(e)&&n.push(e)})),n},N.findIndex=Array.prototype.findIndex?function(e,t,n){return e.findIndex(t,n)}:function(e,t,n){n=void 0===n?e:n;for(var r=0,a=e.length;r<a;++r)if(t.call(n,e[r],r,e))return r;return-1},N.findNextWhere=function(e,t,n){N.isNullOrUndef(n)&&(n=-1);for(var r=n+1;r<e.length;r++){var a=e[r];if(t(a))return a}},N.findPreviousWhere=function(e,t,n){N.isNullOrUndef(n)&&(n=e.length);for(var r=n-1;r>=0;r--){var a=e[r];if(t(a))return a}},N.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},N.almostEquals=function(e,t,n){return Math.abs(e-t)<n},N.almostWhole=function(e,t){var n=Math.round(e);return n-t<=e&&n+t>=e},N.max=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.max(e,t)}),Number.NEGATIVE_INFINITY)},N.min=function(e){return e.reduce((function(e,t){return isNaN(t)?e:Math.min(e,t)}),Number.POSITIVE_INFINITY)},N.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0==(e=+e)||isNaN(e)?e:e>0?1:-1},N.toRadians=function(e){return e*(Math.PI/180)},N.toDegrees=function(e){return e*(180/Math.PI)},N._decimalPlaces=function(e){if(N.isFinite(e)){for(var t=1,n=0;Math.round(e*t)/t!==e;)t*=10,n++;return n}},N.getAngleFromPoint=function(e,t){var n=t.x-e.x,r=t.y-e.y,a=Math.sqrt(n*n+r*r),o=Math.atan2(r,n);return o<-.5*Math.PI&&(o+=2*Math.PI),{angle:o,distance:a}},N.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},N.aliasPixel=function(e){return e%2==0?0:.5},N._alignPixel=function(e,t,n){var r=e.currentDevicePixelRatio,a=n/2;return Math.round((t-a)*r)/r+a},N.splineCurve=function(e,t,n,r){var a=e.skip?t:e,o=t,i=n.skip?t:n,s=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),d=Math.sqrt(Math.pow(i.x-o.x,2)+Math.pow(i.y-o.y,2)),l=s/(s+d),u=d/(s+d),c=r*(l=isNaN(l)?0:l),m=r*(u=isNaN(u)?0:u);return{previous:{x:o.x-c*(i.x-a.x),y:o.y-c*(i.y-a.y)},next:{x:o.x+m*(i.x-a.x),y:o.y+m*(i.y-a.y)}}},N.EPSILON=Number.EPSILON||1e-14,N.splineCurveMonotone=function(e){var t,n,r,a,o,i,s,d,l,u=(e||[]).map((function(e){return{model:e._model,deltaK:0,mK:0}})),c=u.length;for(t=0;t<c;++t)if(!(r=u[t]).model.skip){if(n=t>0?u[t-1]:null,(a=t<c-1?u[t+1]:null)&&!a.model.skip){var m=a.model.x-r.model.x;r.deltaK=0!==m?(a.model.y-r.model.y)/m:0}!n||n.model.skip?r.mK=r.deltaK:!a||a.model.skip?r.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(r.deltaK)?r.mK=0:r.mK=(n.deltaK+r.deltaK)/2}for(t=0;t<c-1;++t)r=u[t],a=u[t+1],r.model.skip||a.model.skip||(N.almostEquals(r.deltaK,0,this.EPSILON)?r.mK=a.mK=0:(o=r.mK/r.deltaK,i=a.mK/r.deltaK,(d=Math.pow(o,2)+Math.pow(i,2))<=9||(s=3/Math.sqrt(d),r.mK=o*s*r.deltaK,a.mK=i*s*r.deltaK)));for(t=0;t<c;++t)(r=u[t]).model.skip||(n=t>0?u[t-1]:null,a=t<c-1?u[t+1]:null,n&&!n.model.skip&&(l=(r.model.x-n.model.x)/3,r.model.controlPointPreviousX=r.model.x-l,r.model.controlPointPreviousY=r.model.y-l*r.mK),a&&!a.model.skip&&(l=(a.model.x-r.model.x)/3,r.model.controlPointNextX=r.model.x+l,r.model.controlPointNextY=r.model.y+l*r.mK))},N.nextItem=function(e,t,n){return n?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},N.previousItem=function(e,t,n){return n?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},N.niceNum=function(e,t){var n=Math.floor(N.log10(e)),r=e/Math.pow(10,n);return(t?r<1.5?1:r<3?2:r<7?5:10:r<=1?1:r<=2?2:r<=5?5:10)*Math.pow(10,n)},N.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},N.getRelativePosition=function(e,t){var n,r,a=e.originalEvent||e,o=e.target||e.srcElement,i=o.getBoundingClientRect(),s=a.touches;s&&s.length>0?(n=s[0].clientX,r=s[0].clientY):(n=a.clientX,r=a.clientY);var d=parseFloat(N.getStyle(o,"padding-left")),l=parseFloat(N.getStyle(o,"padding-top")),u=parseFloat(N.getStyle(o,"padding-right")),c=parseFloat(N.getStyle(o,"padding-bottom")),m=i.right-i.left-d-u,_=i.bottom-i.top-l-c;return{x:n=Math.round((n-i.left-d)/m*o.width/t.currentDevicePixelRatio),y:r=Math.round((r-i.top-l)/_*o.height/t.currentDevicePixelRatio)}},N.getConstraintWidth=function(e){return n(e,"max-width","clientWidth")},N.getConstraintHeight=function(e){return n(e,"max-height","clientHeight")},N._calculatePadding=function(e,t,n){return(t=N.getStyle(e,t)).indexOf("%")>-1?n*parseInt(t,10)/100:parseInt(t,10)},N._getParentNode=function(e){var t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t},N.getMaximumWidth=function(e){var t=N._getParentNode(e);if(!t)return e.clientWidth;var n=t.clientWidth,r=n-N._calculatePadding(t,"padding-left",n)-N._calculatePadding(t,"padding-right",n),a=N.getConstraintWidth(e);return isNaN(a)?r:Math.min(r,a)},N.getMaximumHeight=function(e){var t=N._getParentNode(e);if(!t)return e.clientHeight;var n=t.clientHeight,r=n-N._calculatePadding(t,"padding-top",n)-N._calculatePadding(t,"padding-bottom",n),a=N.getConstraintHeight(e);return isNaN(a)?r:Math.min(r,a)},N.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},N.retinaScale=function(e,t){var n=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var r=e.canvas,a=e.height,o=e.width;r.height=a*n,r.width=o*n,e.ctx.scale(n,n),r.style.height||r.style.width||(r.style.height=a+"px",r.style.width=o+"px")}},N.fontString=function(e,t,n){return t+" "+e+"px "+n},N.longestText=function(e,t,n,r){var a=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(a=r.data={},o=r.garbageCollect=[],r.font=t),e.font=t;var i,s,d,l,u,c=0,m=n.length;for(i=0;i<m;i++)if(null!=(l=n[i])&&!0!==N.isArray(l))c=N.measureText(e,a,o,c,l);else if(N.isArray(l))for(s=0,d=l.length;s<d;s++)null==(u=l[s])||N.isArray(u)||(c=N.measureText(e,a,o,c,u));var _=o.length/2;if(_>n.length){for(i=0;i<_;i++)delete a[o[i]];o.splice(0,_)}return c},N.measureText=function(e,t,n,r,a){var o=t[a];return o||(o=t[a]=e.measureText(a).width,n.push(a)),o>r&&(r=o),r},N.numberOfLabelLines=function(e){var t=1;return N.each(e,(function(e){N.isArray(e)&&e.length>t&&(t=e.length)})),t},N.color=v?function(e){return e instanceof CanvasGradient&&(e=F.global.defaultColor),v(e)}:function(e){return console.error("Color.js not found!"),e},N.getHoverColor=function(e){return e instanceof CanvasPattern||e instanceof CanvasGradient?e:N.color(e).saturate(.5).darken(.1).rgbString()}}(),Kt._adapters=nn,Kt.Animation=Q,Kt.animationService=X,Kt.controllers=Xe,Kt.DatasetController=re,Kt.defaults=F,Kt.Element=Z,Kt.elements=ke,Kt.Interaction=ot,Kt.layouts=ft,Kt.platform=St,Kt.plugins=Bt,Kt.Scale=yn,Kt.scaleService=jt,Kt.Ticks=rn,Kt.Tooltip=qt,Kt.helpers.each(cr,(function(e,t){Kt.scaleService.registerScaleType(t,e,e._defaults)})),Br)Br.hasOwnProperty(Or)&&Kt.plugins.register(Br[Or]);Kt.platform.initialize();var Fr=Kt;return"undefined"!=typeof window&&(window.Chart=Kt),Kt.Chart=Kt,Kt.Legend=Br.legend._element,Kt.Title=Br.title._element,Kt.pluginService=Kt.plugins,Kt.PluginBase=Kt.Element.extend({}),Kt.canvasHelpers=Kt.helpers.canvas,Kt.layoutService=Kt.layouts,Kt.LinearScaleBase=xn,Kt.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],(function(e){Kt[e]=function(t,n){return new Kt(t,Kt.helpers.merge(n||{},{type:e.charAt(0).toLowerCase()+e.slice(1)}))}})),Fr}(function(){try{return n(381)}catch(e){}}())},2777:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(1403),u=n(5113),c=i()(a()),m=d()(l.Z),_=d()(u.Z);c.push([e.id,".btn{border-radius:22px;height:26px;padding:4px 0;cursor:pointer;margin:15px 20px 15px 0;position:relative;text-align:center}.btn.btn_border{background-color:#fff;border:1px #BC9CFF solid;height:22px;border-width:2px}.btn.btn_border .btn__link{color:#BC9CFF}.btn.btn_gradient{background:linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);color:#ffffff}.btn.btn_gradient.btn_gradient_pay{width:320px}.btn:hover,.btn:focus,.btn.btn_hover{opacity:0.5}.btn .btn__link{color:#ffffff;font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;text-align:center;text-transform:uppercase;text-decoration:none;-webkit-user-select:none}.btn .btn__arrow{position:absolute;bottom:12px;right:15px;content:'';width:20px;height:20px;cursor:pointer;position:absolute;top:13px;right:11px;background-repeat:no-repeat;background-image:url("+m+")}.btn .btn__arrow.btn__arrow_white{background-image:url("+_+")}\n","",{version:3,sources:["webpack://./src/blocks/btn/btn.scss"],names:[],mappings:"AAAA,KACE,kBAAmB,CACnB,WAAY,CACZ,aAAc,CACd,cAAe,CACf,uBAAwB,CACxB,iBAAkB,CAClB,iBAAkB,CAPpB,gBAUI,qBAAsB,CACtB,wBAAyB,CAEzB,WAAY,CACZ,gBAAiB,CAdrB,2BAiBM,aAAc,CAjBpB,kBAsBI,4DAA6D,CAC7D,aAAc,CAvBlB,mCA0BM,WAAY,CA1BlB,qCAiCI,WAAY,CAjChB,gBAqCI,aAAc,CACd,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,iBAAkB,CAClB,wBAAyB,CACzB,oBAAqB,CACrB,wBAAyB,CA7C7B,iBAiDI,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,2BAA4B,CAC5B,wDAA8C,CA5DlD,kCA+DM,wDAAoD",sourcesContent:[".btn{\r\n  border-radius: 22px;\r\n  height: 26px;\r\n  padding: 4px 0;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  &.btn_border{\r\n    background-color: #fff;\r\n    border: 1px #BC9CFF solid;\t\r\n\r\n    height: 22px;\r\n    border-width: 2px;\r\n\r\n    .btn__link{\r\n      color: #BC9CFF;\r\n    }\r\n  }\r\n\r\n  &.btn_gradient{\r\n    background: linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);\r\n    color: #ffffff;\t\r\n\r\n    &.btn_gradient_pay{\r\n      width: 320px;\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &.btn_hover{\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .btn__link{\r\n    color: #ffffff;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    -webkit-user-select: none;\r\n  }\r\n\r\n  .btn__arrow{\r\n    position: absolute;\r\n    bottom: 12px;\r\n    right: 15px;\r\n    content: '';\r\n    width: 20px;\r\n    height: 20px;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 13px;\r\n    right: 11px;\r\n    background-repeat: no-repeat;\r\n    background-image: url('@Blocks/btn/arrow.svg');\r\n    \r\n    &.btn__arrow_white{\t\r\n      background-image: url('@Blocks/btn/arrow-white.svg');\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const h=c},6403:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(9048),u=i()(a()),c=d()(l.Z);u.push([e.id,".calendar-block{position:absolute;z-index:100;margin-top:5px;border-radius:4px}.calendar-block.calendar-block_hide{display:none}.calendar-block .calendar{width:322px;z-index:5;border:1px solid rgba(31,32,65,0.25);border-width:1px 1px 0 1px;box-sizing:border-box;box-shadow:0px -20px 20px rgba(31,32,65,0.05);border-radius:4px;background:#fff;left:-1px;margin-left:-1px;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.calendar-block .calendar .pignose-calendar{width:100%;height:auto;border:none;box-shadow:none;background:#fff;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;border-radius:4px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top{border:none;box-shadow:none;background:#fff;padding:0px 0 54px 0;height:20px;display:flex;justify-content:space-between}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav{width:24px;height:24px;margin:20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon{width:24px;height:24px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-left,.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-right{display:block;background:url("+c+") no-repeat center;width:24px;height:24px;font-size:1}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-left{transform:rotate(180deg)}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date{padding:20px 0 30px 0;display:flex;justify-content:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date .pignose-calendar-top-month{font-size:20px;line-height:21px;padding-right:5px;margin:0 2px;text-transform:none;color:#1F2041;font-weight:700}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date .pignose-calendar-top-year{font-size:20px;line-height:21px;font-weight:700;color:#1F2041}.calendar-block .calendar .pignose-calendar .pignose-calendar-header{display:flex;justify-content:space-between;margin:0 20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-header .pignose-calendar-week{font-size:10px;width:38px;height:40px;color:#BC9CFF;text-transform:none;display:flex;justify-content:center;align-items:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-body{padding-top:0;margin:0 20px 20px 20px;overflow:hidden}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row a{text-decoration:none}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit{height:40px;width:40px;float:left}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-date a{font-size:12px;color:rgba(31,32,65,0.5);height:40px;width:40px;display:flex;justify-content:center;align-items:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active a{background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);color:#fff}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-first-active{border-radius:50% 0 0 50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-first-active a{border-radius:50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-second-active{border-radius:0 50% 50% 0}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-second-active a{border-radius:50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-range a{background:linear-gradient(180deg, #EEE6FF 0%, #E6EAFE 100%);color:rgba(31,32,65,0.5);border-radius:0}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group{display:flex;justify-content:space-between;box-shadow:0px 10px 20px 0px rgba(31,32,65,0.05);border:1px solid rgba(31,32,65,0.25);border-width:0 0 1px 0}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group .pignose-calendar-button{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;line-height:15px;height:15px;color:#BC9CFF;text-transform:uppercase;cursor:pointer;-webkit-user-select:none;text-decoration:none}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group .pignose-calendar-button.pignose-calendar-button-cancel{color:rgba(31,32,65,0.5);margin:0 0 18px 20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-button-group .pignose-calendar-button.pignose-calendar-button-apply{color:#BC9CFF;margin:0 20px 18px 0}\n","",{version:3,sources:["webpack://./src/blocks/calendar/calendar.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,iBAAkB,CAJpB,oCAOI,YAAa,CAPjB,0BAWI,WAAY,CACZ,SAAU,CACV,oCAAwC,CACxC,0BAA2B,CAC3B,qBAAsB,CACtB,6CAAiD,CACjD,iBAAkB,CAClB,eAAgB,CAChB,SAAU,CAEV,gBAAiB,CACjB,4CAAgD,CAtBpD,4CAyBM,UAAW,CACX,WAAY,CACZ,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CACrB,iBAAkB,CAlCxB,kEAqCQ,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,oBAAqB,CACrB,WAAY,CACZ,YAAa,CACb,6BAA8B,CA3CtC,4FA8CU,UAAW,CACX,WAAY,CACZ,WAAY,CAhDtB,uHAmDY,UAAW,CACX,WAAY,CApDxB,+QAwDc,aAAc,CACd,mEAAsE,CACtE,UAAW,CACX,WAAY,CACZ,WAAY,CA5D1B,uIAgEc,wBAAyB,CAhEvC,6FAsEU,qBAAsB,CACtB,YAAa,CACb,sBAAuB,CAxEjC,yHA2EY,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,mBAAoB,CACpB,aAAc,CACd,eAAgB,CAjF5B,wHAqFY,cAAe,CACf,gBAAiB,CACjB,eAAgB,CAChB,aAAc,CAxF1B,qEA8FQ,YAAa,CACb,6BAA8B,CAC9B,aAAc,CAhGtB,4FAmGU,cAAe,CACf,UAAW,CACX,WAAY,CACZ,aAAc,CACd,mBAAoB,CACpB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CA1G7B,mEA+GQ,aAAc,CACd,uBAAwB,CACxB,eAAgB,CAjHxB,2FAsHY,oBAAqB,CAtHjC,gHA0HY,WAAY,CACZ,UAAW,CACX,UAAW,CA5HvB,6IAiIgB,cAAe,CACf,wBAA4B,CAC5B,WAAY,CACZ,UAAW,CACX,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CAvInC,+IA8IgB,4DAA6D,CAC7D,UAAW,CA/I3B,gLAmJgB,yBAA0B,CAnJ1C,kLAsJkB,iBAAkB,CAtJpC,iLA2JgB,yBAA0B,CA3J1C,mLA8JkB,iBAAkB,CA9JpC,8IAsKgB,4DAA6D,CAC7D,wBAA4B,CAC5B,eAAgB,CAxKhC,2EAgLQ,YAAa,CACb,6BAA8B,CAC9B,gDAAoD,CACpD,oCAAwC,CACxC,sBAAuB,CApL/B,oGAuLU,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,WAAY,CACZ,aAAc,CACd,wBAAyB,CACzB,cAAe,CACf,wBAAyB,CACzB,oBAAqB,CAjM/B,mIAoMY,wBAA4B,CAC5B,oBAAqB,CArMjC,kIAyMY,aAAc,CACd,oBAAqB",sourcesContent:[".calendar-block{\r\n  position: absolute;\r\n  z-index: 100;\r\n  margin-top: 5px;\r\n  border-radius: 4px;\r\n    \r\n  &.calendar-block_hide{\r\n    display: none;\r\n  }\r\n\r\n  .calendar{\r\n    width: 322px;\r\n    z-index: 5;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    border-width: 1px 1px 0 1px;\r\n    box-sizing: border-box;\r\n    box-shadow: 0px -20px 20px rgba(31, 32, 65, 0.05);\r\n    border-radius: 4px;\r\n    background: #fff;\r\n    left: -1px;\r\n\r\n    margin-left: -1px;\r\n    box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n    .pignose-calendar{\r\n      width: 100%;\r\n      height: auto;\r\n      border: none;\r\n      box-shadow: none;\r\n      background: #fff;\r\n      user-select: none;\r\n      -moz-user-select: none;\r\n      -webkit-user-select: none;\r\n      -ms-user-select: none;\r\n      border-radius: 4px;\r\n\r\n      .pignose-calendar-top{\r\n        border: none;\r\n        box-shadow: none;\r\n        background: #fff;\r\n        padding: 0px 0 54px 0;\r\n        height: 20px;\r\n        display: flex;\r\n        justify-content:space-between ;\r\n\r\n        .pignose-calendar-top-nav{\r\n          width: 24px;\r\n          height: 24px;\r\n          margin: 20px;\r\n\r\n          .pignose-calendar-top-icon{\r\n            width: 24px;\r\n            height: 24px;\r\n\r\n            &.icon-arrow-left,\r\n            &.icon-arrow-right{\r\n              display: block;\r\n              background: url('@Blocks/calendar/arrow_forward.svg') no-repeat center;\r\n              width: 24px;\r\n              height: 24px;\r\n              font-size: 1;\r\n            }\r\n\r\n            &.icon-arrow-left{\r\n              transform: rotate(180deg);\r\n            }\r\n          }\r\n        }\r\n\r\n        .pignose-calendar-top-date{\r\n          padding: 20px 0 30px 0;\r\n          display: flex;\r\n          justify-content: center;\r\n\r\n          .pignose-calendar-top-month{\r\n            font-size: 20px;\r\n            line-height: 21px;\r\n            padding-right: 5px;\r\n            margin: 0 2px;\r\n            text-transform: none;\r\n            color: #1F2041;\r\n            font-weight: 700;\r\n          }\r\n\r\n          .pignose-calendar-top-year{\r\n            font-size: 20px;\r\n            line-height: 21px;\r\n            font-weight: 700;\r\n            color: #1F2041;\r\n          }\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-header{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 0 20px;\r\n\r\n        .pignose-calendar-week{\r\n          font-size: 10px;\r\n          width: 38px;\r\n          height: 40px;\r\n          color: #BC9CFF;\r\n          text-transform: none;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-body{\r\n        padding-top: 0;\r\n        margin: 0 20px 20px 20px;\r\n        overflow: hidden;\r\n\r\n        .pignose-calendar-row {\r\n\r\n          a{\r\n            text-decoration: none;\r\n          }\r\n\r\n          .pignose-calendar-unit{\r\n            height: 40px;\r\n            width: 40px;\r\n            float: left;            \r\n            \r\n            &.pignose-calendar-unit-date{\r\n\r\n              a {\r\n                font-size: 12px;\r\n                color: rgba(31, 32, 65, 0.5);\r\n                height: 40px;\r\n                width: 40px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n              }\r\n            }\r\n\r\n            &.pignose-calendar-unit-active {\r\n              \r\n              a{\r\n                background: linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);\r\n                color: #fff;\r\n              }\r\n\r\n              &.pignose-calendar-unit-first-active{\r\n                border-radius: 50% 0 0 50%;\r\n\r\n                a{\r\n                  border-radius: 50%;\r\n                }\r\n              }\r\n              \r\n              &.pignose-calendar-unit-second-active{\r\n                border-radius: 0 50% 50% 0;\r\n\r\n                a{\r\n                  border-radius: 50%;\r\n                }\r\n              }\r\n            }\r\n\r\n            &.pignose-calendar-unit-range{\r\n\r\n              a{\r\n                background: linear-gradient(180deg, #EEE6FF 0%, #E6EAFE 100%); \r\n                color: rgba(31, 32, 65, 0.5);\r\n                border-radius: 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-button-group{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        box-shadow: 0px 10px 20px 0px rgba(31, 32, 65, 0.05);\r\n        border: 1px solid rgba(31, 32, 65, 0.25);\r\n        border-width: 0 0 1px 0;\r\n\r\n        .pignose-calendar-button{\r\n          font-family: Montserrat, Arial, sans-serif;\r\n          font-style: normal;\r\n          font-weight: bold;\r\n          font-size: 12px;\r\n          line-height: 15px;\r\n          height: 15px;\r\n          color: #BC9CFF;\t\r\n          text-transform: uppercase;\r\n          cursor: pointer;\r\n          -webkit-user-select: none;\r\n          text-decoration: none;\r\n\r\n          &.pignose-calendar-button-cancel{\r\n            color: rgba(31, 32, 65, 0.5);\r\n            margin: 0 0 18px 20px;\r\n          }\r\n\r\n          &.pignose-calendar-button-apply{\r\n            color: #BC9CFF;\r\n            margin: 0 20px 18px 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const m=u},1169:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".comment-block{width:100%;margin:13px 0 33px 0}.comment-block .comment-block__title{display:flex;justify-content:space-between;margin:0;height:22px}.comment-block .comment-block__title h2{line-height:21px}.comment-block .comment-block__title p{margin:0 44px 0 0}.comment-block .comment-block__comment{margin:20px 0 23px}.comment-block .comment-block__comment:last-child{margin-bottom:0}.comment-block .comment-block__comment .comment-block__person{display:flex;flex-direction:row;align-items:flex-start}.comment-block .comment-block__comment .comment-block__person .comment-block__photo{width:48px;height:48px;margin-bottom:10px;width:44px;height:44px;border-radius:50%;border:2px solid #FFFFFF;filter:drop-shadow(0px 10px 20px rgba(31,32,65,0.1))}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time{display:flex;flex-direction:column;margin-left:10px}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time .comment-block__name{font-weight:bold;margin:0}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time .comment-block__time{margin-bottom:12px;margin:0}.comment-block .comment-block__comment .comment-block__person .comment-block__name-time p{font-size:14px}.comment-block .comment-block__comment .comment-block__comment-text{display:flex}.comment-block .comment-block__comment .comment-block__comment-text .like{margin:2px 0 0 3px}.comment-block .comment-block__comment .comment-block__comment-text .comment-block__text{margin:0;margin-left:15px}.comment-block .comment-block__comment .comment-block__comment-text p{width:86.5%;font-size:14px}\n","",{version:3,sources:["webpack://./src/blocks/comment-block/comment-block.scss"],names:[],mappings:"AAAA,eACE,UAAW,CACX,oBAAqB,CAFvB,qCAKI,YAAa,CACb,6BAA8B,CAC9B,QAAS,CACT,WAAY,CARhB,wCAWM,gBAAiB,CAXvB,uCAeM,iBAAkB,CAfxB,uCAoBI,kBAAmB,CApBvB,kDAuBM,eAAgB,CAvBtB,8DA2BM,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CA7B7B,oFAgCQ,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,wBAAyB,CACzB,oDAAwD,CAvChE,wFA2CQ,YAAa,CACb,qBAAsB,CACtB,gBAAiB,CA7CzB,6GAgDU,gBAAiB,CACjB,QAAS,CAjDnB,6GAqDU,kBAAmB,CACnB,QAAS,CAtDnB,0FA0DU,cAAe,CA1DzB,oEAgEM,YAAa,CAhEnB,0EAmEQ,kBAAmB,CAnE3B,yFAuEQ,QAAS,CACT,gBAAiB,CAxEzB,sEA4EQ,WAAY,CACZ,cAAe",sourcesContent:[".comment-block{\r\n  width: 100%;\r\n  margin: 13px 0 33px 0;\r\n\r\n  .comment-block__title{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 0;\r\n    height: 22px;\r\n    \r\n    h2{\r\n      line-height: 21px;\r\n    }\r\n\r\n    p{\r\n      margin: 0 44px 0 0;\r\n    }\r\n  }\r\n\r\n  .comment-block__comment{\r\n    margin: 20px 0 23px;\r\n\r\n    &:last-child{\r\n      margin-bottom: 0;\r\n    }\r\n\r\n    .comment-block__person{\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: flex-start;\r\n\r\n      .comment-block__photo{\r\n        width: 48px;\r\n        height: 48px;\r\n        margin-bottom: 10px;\r\n        width: 44px;\r\n        height: 44px;\r\n        border-radius: 50%;\r\n        border: 2px solid #FFFFFF;\r\n        filter: drop-shadow(0px 10px 20px rgba(31, 32, 65, 0.1));\r\n      }\r\n\r\n      .comment-block__name-time{\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-left: 10px;\r\n\r\n        .comment-block__name{\r\n          font-weight: bold;\r\n          margin: 0;\r\n        }\r\n  \r\n        .comment-block__time{\r\n          margin-bottom: 12px;\r\n          margin: 0;\r\n        }\r\n \r\n        p{\r\n          font-size: 14px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .comment-block__comment-text{\r\n      display: flex;\r\n\r\n      .like{\r\n        margin: 2px 0 0 3px;\r\n      }\r\n\r\n      .comment-block__text{\r\n        margin: 0;\r\n        margin-left: 15px;\r\n      }\r\n\r\n      p{\r\n        width: 86.5%;\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=i},3353:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(783),u=i()(a()),c=d()(l.Z);u.push([e.id,".dropdown-block{position:relative;width:100%}.dropdown-block .dropdown-block__dropdown{position:relative;color:rgba(31,32,65,0.75);border-radius:4px;width:100%;cursor:pointer;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;height:44px;padding:8px 14px;margin-top:5px;font-family:Montserrat, Arial, sans-serif;font-weight:normal;font-style:normal}.dropdown-block .dropdown-block__dropdown:hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_date{width:150px;-webkit-appearance:none;font-size:14px}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_items-show{border:1px solid rgba(31,32,65,0.5);border-radius:4px 4px 0 0}.dropdown-block .dropdown-block__dropdown::before{content:'';width:15px;height:11px;position:absolute;bottom:13px;right:12px;cursor:pointer;-webkit-user-select:none;background-image:url("+c+");background-repeat:no-repeat}.dropdown-block .dropdown-block__dropdown-items{display:flex;flex-wrap:wrap;background:#fff;border-radius:0 0 4px 4px;border:1px solid rgba(31,32,65,0.5);margin-top:-1px;z-index:1;position:absolute}.dropdown-block .dropdown-block__dropdown-items.dropdown-block__dropdown-items_hide{display:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{display:flex;justify-content:space-between;color:rgba(31,32,65,0.5);margin-top:-1px;width:100%;height:40px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3{padding:13px 15px;margin:0}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns span{color:#1f2041}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty{display:flex;justify-content:space-between;align-items:center;width:92px;margin-right:7px;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus{border:1px solid rgba(31,32,65,0.25);border-radius:50%;width:30px;height:30px;font-size:20px;display:flex;justify-content:center;box-sizing:border-box;padding-top:2px;cursor:pointer}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable{cursor:default;border-color:rgba(31,32,65,0.15);color:rgba(31,32,65,0.15)}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty span{font-weight:bold}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_clean,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_clean{margin:auto 15px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_ok,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_ok{margin:auto 7px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{height:48px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns.dropdown-block__btns_flex-end{justify-content:flex-end}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_clean{margin:21px 0 0 14px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_ok{margin:21px 7px 0 0}.dropdown-dates{width:100%}.dropdown-dates .dropdown-dates__dates{display:flex;justify-content:space-between}.dropdown-dates .dropdown-dates__dates .dropdown-block{width:auto}.dropdown-dates .dropdown-dates__dates .dropdown-block .dropdown-block__dropdown_items-show{border-radius:4px}\n","",{version:3,sources:["webpack://./src/blocks/dropdown/dropdown.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,UAAW,CAFb,0CAKI,iBAAkB,CAClB,yBAA6B,CAC7B,iBAAkB,CAClB,UAAW,CACX,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,yCAA0C,CAC1C,kBAAmB,CACnB,iBAAkB,CAjBtB,gDAoBM,yBAA6B,CAC7B,mCAAuC,CArB7C,wEAyBM,WAAY,CACZ,uBAAwB,CACxB,cAAe,CA3BrB,8EA+BM,mCAAuC,CACvC,yBAA0B,CAhChC,kDAoCM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,cAAe,CACf,wBAAyB,CACzB,wDAAyD,CACzD,2BAA4B,CA7ClC,gDAkDI,YAAa,CACb,cAAe,CACf,eAAgB,CAChB,yBAA0B,CAC1B,mCAAuC,CACvC,eAAgB,CAChB,SAAU,CACV,iBAAkB,CAzDtB,oFA4DM,YAAa,CA5DnB,kJAiEM,YAAa,CACb,6BAA8B,CAC9B,wBAA4B,CAC5B,eAAgB,CAChB,UAAW,CACX,WAAY,CAtElB,wJAyEQ,iBAAkB,CAClB,QAAS,CA1EjB,oTA+EQ,aAA0B,CA/ElC,wMAmFQ,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,UAAW,CACX,gBAAiB,CACjB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CA3F7B,0gBA+FU,oCAAwC,CACxC,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,cAAe,CACf,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CACtB,eAAgB,CAChB,cAAe,CAxGzB,0oBA2GY,cAAe,CACf,gCAAoC,CACpC,yBAA6B,CA7GzC,kNAkHU,gBAAiB,CAlH3B,oLAyHU,gBAAiB,CAzH3B,8KA6HU,eAAgB,CA7H1B,sEAmIM,WAAY,CAnIlB,oGAsIQ,wBAAyB,CAtIjC,kFA0IQ,oBAAqB,CA1I7B,+EA8IQ,mBAAoB,CACrB,gBAML,UAAW,CADb,uCAII,YAAa,CACb,6BAA8B,CALlC,uDAQM,UAAW,CARjB,4FAWQ,iBAAkB",sourcesContent:[".dropdown-block{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  .dropdown-block__dropdown{\r\n    position: relative;\r\n    color: rgba(31, 32, 65, 0.75);\r\n    border-radius: 4px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;\r\n\r\n    &:hover{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n\r\n    &.dropdown-block__dropdown_date{\r\n      width: 150px;\r\n      -webkit-appearance: none;\r\n      font-size: 14px;\r\n    }\r\n\r\n    &.dropdown-block__dropdown_items-show{\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      border-radius: 4px 4px 0 0;\r\n    }\r\n\r\n    &::before{\r\n      content: '';\r\n      width: 15px;\r\n      height: 11px;\r\n      position: absolute;\r\n      bottom: 13px;\r\n      right: 12px;\r\n      cursor: pointer;\r\n      -webkit-user-select: none;\r\n      background-image: url('@Blocks/dropdown/expand-more.svg');\r\n      background-repeat: no-repeat;\r\n    }\r\n  }\r\n\r\n  .dropdown-block__dropdown-items{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    background: #fff;\r\n    border-radius: 0 0 4px 4px;\r\n    border: 1px solid rgba(31, 32, 65, 0.5);\r\n    margin-top: -1px;\r\n    z-index: 1;\r\n    position: absolute;\r\n\r\n    &.dropdown-block__dropdown-items_hide{\r\n      display: none;\r\n    }\r\n\r\n    .dropdown-block__items-line,\r\n    .dropdown-block__btns{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      margin-top: -1px;\r\n      width: 100%;\r\n      height: 40px;\r\n\r\n      h3{\r\n        padding: 13px 15px;\r\n        margin: 0;\r\n      }\r\n\r\n      h3,\r\n      span{\r\n        color: rgba(31, 32, 65, 1);\r\n      }\r\n\r\n      .dropdown-block__block-qty{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 92px;\r\n        margin-right: 7px;\r\n        user-select: none;\r\n        -moz-user-select: none;\r\n        -webkit-user-select: none;\r\n        -ms-user-select: none;\r\n\r\n        .dropdown-block__inc-qty-minus,\r\n        .dropdown-block__inc-qty-plus{\r\n          border: 1px solid rgba(31, 32, 65, 0.25);\r\n          border-radius: 50%;\r\n          width: 30px;\r\n          height: 30px;\r\n          font-size: 20px;\r\n          display: flex;\r\n          justify-content: center;\r\n          box-sizing: border-box;\r\n          padding-top: 2px;\r\n          cursor: pointer;\r\n\r\n          &.dropdown-block__inc-qty_disable{\r\n            cursor: default;\r\n            border-color: rgba(31, 32, 65, 0.15);\r\n            color: rgba(31, 32, 65, 0.15);\r\n          }\r\n        }\r\n        \r\n        span{\r\n          font-weight: bold;\r\n        }\r\n      }\r\n\r\n      .link{\r\n\r\n        &.link_clean{\r\n          margin: auto 15px;\r\n        }\r\n\r\n        &.link_ok{\r\n          margin: auto 7px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .dropdown-block__btns{\r\n      height: 48px;\r\n\r\n      &.dropdown-block__btns_flex-end{\r\n        justify-content: flex-end;\r\n      }\r\n\r\n      .link_clean{\r\n        margin: 21px 0 0 14px;\r\n      }\r\n      \r\n      .link_ok{\r\n        margin: 21px 7px 0 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-dates{\r\n  width: 100%;\r\n\r\n  .dropdown-dates__dates{\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .dropdown-block{\r\n      width: auto;\r\n\r\n      .dropdown-block__dropdown_items-show{\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const m=u},2884:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".footer .footer__block-menu{border-top:1px solid rgba(31,32,65,0.1);border-bottom:1px solid rgba(31,32,65,0.1);display:flex;justify-content:center;width:100%;position:relative;background:#fff}.footer .footer__block-menu .footer__content-container{flex-grow:1;max-width:80.5%;min-width:400px;margin:0 auto;background:#fff}.footer .footer__block-menu .footer__content-container .footer__bottom-menu{display:flex;justify-content:space-between;flex-wrap:wrap;margin:0;padding:91px 0 89px 0;font-size:14px;color:rgba(31,32,65,0.5)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__logo{margin:10px 0 3px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block{display:block;max-width:min-content}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list{padding:0}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li{position:relative;font-size:14px;line-height:17px;padding:7px 0;line-height:24px;cursor:pointer;display:block;color:rgba(31,32,65,0.5)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li:hover>a,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li:hover>a{text-decoration:underline}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li.menu_li__active,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li.menu_li__active{font-weight:bold;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li:first-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li:first-child{font-weight:bold;color:#1F2041;font-size:12px;text-transform:uppercase;cursor:inherit;white-space:nowrap;padding:10px 0 7px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .input-text_subscription,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .input-text_subscription{margin-top:10px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .input-text_subscription .input-text__input,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .input-text_subscription .input-text__input{padding:10px 14px;font-size:14px;width:260px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:last-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:first-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:last-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:first-child{min-width:200px;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:last-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:first-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:last-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:first-child .footer__menu-li{cursor:inherit;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(3),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(3){min-width:155px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(2),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(4),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(2),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(4){min-width:155px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block{max-width:255px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block p{padding:0}.footer .footer__copyright-block{background:#fff;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.footer .footer__copyright-block .footer__copyright-content{display:flex;justify-content:space-between;align-items:center;font-size:14px;color:rgba(31,32,65,0.5);min-width:400px;max-width:80.5%;margin:0 auto}.footer .footer__copyright-block .footer__copyright-content p{margin:23px 0}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block{display:flex}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network{height:24px;width:24px;padding-left:20px;cursor:pointer}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_twitter{margin-top:-1px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_facebook{width:22px;height:22px;margin-top:1px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_instagram{width:22px;height:22px;margin-top:1px}@media (max-width: 1170px){.footer .footer__bottom-menu{text-align:center;justify-content:space-around}.footer .footer__bottom-menu .footer__menu-column{margin:10px 20px}.footer .footer__bottom-menu .footer__menu-column .footer__menu-list{width:270px}.footer .footer__bottom-menu .footer__logo{margin:10px 20px;max-width:none}.footer .footer__copyright-content{margin:23px 20px}}@media (max-width: 790px){.footer .footer__bottom-menu{display:flex;flex-direction:column;align-items:center}}@media (max-width: 620px){.footer .footer__bottom-menu{padding:90px 0 0 0}.footer .footer__bottom-menu .footer__menu-column{display:none}.footer .footer__bottom-menu .footer__logo{margin:0}.footer .footer__bottom-menu .footer__logo p{display:none}}\n","",{version:3,sources:["webpack://./src/blocks/footer/footer.scss"],names:[],mappings:"AAAA,4BAGI,uCAA2C,CAC3C,0CAA8C,CAC9C,YAAa,CACb,sBAAuB,CACvB,UAAW,CACX,iBAAkB,CAClB,eAAgB,CATpB,uDAYM,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACd,eAAgB,CAhBtB,4EAmBQ,YAAa,CACb,6BAA8B,CAC9B,cAAe,CACf,QAAS,CACT,qBAAsB,CACtB,cAAe,CACf,wBAA4B,CAzBpC,0HA8BY,iBAAkB,CA9B9B,6MAoCU,aAAc,CACd,qBAAsB,CArChC,mPAwCY,SAAU,CAxCtB,qRA2Cc,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,aAAc,CACd,gBAAiB,CACjB,cAAe,CACf,aAAc,CACd,wBAA4B,CAlD1C,qSAsDkB,yBAA0B,CAtD5C,qTA2DgB,gBAAiB,CACjB,yBAA6B,CA5D7C,6SAgEgB,gBAAiB,CACjB,aAAc,CACd,cAAe,CACf,wBAAyB,CACzB,cAAe,CACf,kBAAmB,CACnB,kBAAmB,CAtEnC,qSA2Ec,eAAgB,CA3E9B,2UA8EgB,iBAAkB,CAClB,cAAe,CACf,WAAY,CAhF5B,wcAsFY,eAAgB,CAChB,yBAA6B,CAvFzC,4gBA0Fc,cAAe,CACf,yBAA6B,CA3F3C,uOAgGY,eAAgB,CAhG5B,8cAoGY,eAAgB,CApG5B,4GAyGU,eAAgB,CAzG1B,8GA4GY,SAAU,CA5GtB,iCAoHI,eAAgB,CAChB,4CAAgD,CArHpD,4DAwHM,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,cAAe,CACf,wBAA4B,CAC5B,eAAgB,CAChB,eAAgB,CAChB,aAAc,CA/HpB,8DAkIQ,aAAc,CAlItB,+EAsIQ,YAAa,CAtIrB,oGAyIU,WAAY,CACZ,UAAW,CACX,iBAAkB,CAClB,cAAe,CA5IzB,gIA+IY,eAAgB,CA/I5B,iIAmJY,UAAW,CACX,WAAY,CACZ,cAAe,CArJ3B,kIAyJY,UAAW,CACX,WAAY,CACZ,cAAe,CAChB,2BAQT,6BAGI,iBAAkB,CAClB,4BAA6B,CAJjC,kDAOM,gBAAiB,CAPvB,qEAUQ,WAAY,CAVpB,2CAeM,gBAAiB,CACjB,cAAe,CAhBrB,mCAqBI,gBAAiB,CAClB,CAIL,0BACE,6BAGI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACpB,CAIL,0BACE,6BAGI,kBAAmB,CAHvB,kDAMM,YAAa,CANnB,2CAUM,QAAS,CAVf,6CAaQ,YAAa,CACd",sourcesContent:[".footer{\r\n\r\n  .footer__block-menu{\r\n    border-top: 1px solid rgba(31, 32, 65, 0.1);\r\n    border-bottom: 1px solid rgba(31, 32, 65, 0.1);\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    position: relative;\r\n    background: #fff;\r\n\r\n    .footer__content-container{\r\n      flex-grow: 1;\r\n      max-width: 80.5%;\r\n      min-width: 400px;\r\n      margin: 0 auto;\r\n      background: #fff;\r\n\r\n      .footer__bottom-menu{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        flex-wrap: wrap;\r\n        margin: 0;\r\n        padding: 91px 0 89px 0;\r\n        font-size: 14px;\r\n        color: rgba(31, 32, 65, 0.5);\r\n      \r\n        .footer__bottom-menu-logo-block{\r\n\r\n          .footer__logo{\r\n            margin: 10px 0 3px;\r\n          }\r\n        }\r\n\r\n        .footer__menu-column,\r\n        .footer__bottom-menu-logo-block{\r\n          display: block;\r\n          max-width: min-content;\r\n      \r\n          .footer__menu-list{\r\n            padding: 0;\r\n      \r\n            .footer__menu-li{\r\n              position: relative;\r\n              font-size: 14px;\r\n              line-height: 17px;\r\n              padding: 7px 0;\r\n              line-height: 24px;\r\n              cursor: pointer;              \r\n              display: block;\r\n              color: rgba(31, 32, 65, 0.5);\r\n              \r\n              &:hover{\r\n                > a{\r\n                  text-decoration: underline;\r\n                }\r\n              }\r\n              \r\n              &.menu_li__active{\r\n                font-weight: bold;\r\n                color: rgba(31, 32, 65, 0.75);\r\n              }\r\n      \r\n              &:first-child{\r\n                font-weight: bold;\r\n                color: #1F2041;\r\n                font-size: 12px;\r\n                text-transform: uppercase;\r\n                cursor: inherit;\r\n                white-space: nowrap;\r\n                padding: 10px 0 7px;\r\n              }\r\n            }\r\n      \r\n            .input-text_subscription{\r\n              margin-top: 10px;\r\n      \r\n              .input-text__input{\r\n                padding: 10px 14px;\r\n                font-size: 14px;\r\n                width: 260px;\r\n              }\r\n            }\r\n          }\r\n      \r\n          &:last-child,&:first-child{\r\n            min-width: 200px;\r\n            color: rgba(31, 32, 65, 0.75);\r\n      \r\n            .footer__menu-li{\r\n              cursor: inherit;\r\n              color: rgba(31, 32, 65, 0.75);\r\n            }\r\n          }\r\n      \r\n          &:nth-child(3){\r\n            min-width: 155px;\r\n          }\r\n      \r\n          &:nth-child(2),&:nth-child(4){\r\n            min-width: 155px;\r\n          }\r\n        }\r\n      \r\n        .footer__bottom-menu-logo-block{\r\n          max-width: 255px;\r\n      \r\n          p{\r\n            padding: 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .footer__copyright-block{\r\n    background: #fff;\r\n    box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n    .footer__copyright-content{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      font-size: 14px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      min-width: 400px;\r\n      max-width: 80.5%;\r\n      margin: 0 auto;\r\n\r\n      p{\r\n        margin: 23px 0;\r\n      }\r\n    \r\n      .footer__soc-block{\r\n        display: flex;\r\n      \r\n        .footer__soc-network{\r\n          height: 24px;\r\n          width: 24px;\r\n          padding-left: 20px;\r\n          cursor: pointer;\r\n    \r\n          &.footer__soc-network_twitter{\r\n            margin-top: -1px;\r\n          }\r\n    \r\n          &.footer__soc-network_facebook{\r\n            width: 22px;\r\n            height: 22px;\r\n            margin-top: 1px;\r\n          }\r\n    \r\n          &.footer__soc-network_instagram{\r\n            width: 22px;\r\n            height: 22px;\r\n            margin-top: 1px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      text-align: center;\r\n      justify-content: space-around;\r\n\r\n      .footer__menu-column{\r\n        margin: 10px 20px;\r\n\r\n        .footer__menu-list{\r\n          width: 270px;\r\n        }\r\n      }\r\n\r\n      .footer__logo{\r\n        margin: 10px 20px;\r\n        max-width: none;\r\n      }\r\n    }\r\n\r\n    .footer__copyright-content{\r\n      margin: 23px 20px;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 790px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 620px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      padding: 90px 0 0 0;\r\n      \r\n      .footer__menu-column{\r\n        display: none;\r\n      }\r\n\r\n      .footer__logo{\r\n        margin: 0;\r\n\r\n        p{\r\n          display: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=i},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".form-reservation{background:#FFFFFF;border:1px solid rgba(0,0,0,0.12);box-sizing:border-box;box-shadow:0px 0px 25px rgba(0,0,0,0.2);border-radius:4px;width:380px;height:auto;padding:43px 29px 30px 29px;display:flex;flex-wrap:wrap;justify-content:space-between}.form-reservation h3{margin:19px 0 0 0}.form-reservation p{margin:0}.form-reservation .form-reservation__block{display:flex;justify-content:space-between;width:100%;position:relative;align-items:baseline}.form-reservation .form-reservation__block p:nth-child(1){font-weight:700;color:#1f2041}.form-reservation .form-reservation__block p:nth-child(1) span:nth-child(2){font-size:24px}.form-reservation .form-reservation__block p:nth-child(2){font-weight:400;font-size:12.5px;color:rgba(31,32,65,0.5)}.form-reservation .form-reservation__block p:nth-child(2) span:nth-child(1){font-size:15px}.form-reservation .form-reservation__block p span:nth-child(1),.form-reservation .form-reservation__block p span:nth-child(2){font-weight:bold}.form-reservation .form-reservation__block p a{margin:0 0 0 5px}.form-reservation .form-reservation__block .form-reservation__dashed{border:1px dashed rgba(31,32,65,0.25);height:0;width:100%;box-sizing:border-box;margin:0 5px}.form-reservation .form-reservation__block h2{white-space:nowrap;font-size:19.8px;font-weight:700}.form-reservation .form-reservation__block-prices{margin:20px 0 44px;width:100%}.form-reservation .form-reservation__block-prices .form-reservation__line-price{width:100%;display:flex;justify-content:space-between;position:relative;margin:10px 0}.form-reservation .form-reservation__block-prices .form-reservation__line-price:first-child{margin:0}.form-reservation .form-reservation__block-prices .form-reservation__line-price:last-child{margin:0}.form-reservation .form-reservation__block-prices .form-reservation__line-price .form-reservation__text-price{display:flex}.form-reservation .form-reservation__block-prices .form-reservation__line-price .form-reservation__text-price .form-reservation__icon-info-price{width:20px;height:20px;margin:0 9px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:50%;display:flex;justify-content:center;align-items:center;color:rgba(31,32,65,0.25);cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.form-reservation .dropdown-dates .calendar-block .calendar-block__btns{width:301px;transform:translateX(-1.2px)}.form-reservation .btn{width:100%;height:36px;line-height:37px;margin:20px 0 0 0;font-weight:700}.form-reservation .btn .btn__link{padding-right:5px;line-height:35px}\n","",{version:3,sources:["webpack://./src/blocks/form-reservation/form-reservation.scss"],names:[],mappings:"AAAA,kBACE,kBAAmB,CACnB,iCAAqC,CACrC,qBAAsB,CACtB,uCAA2C,CAC3C,iBAAkB,CAElB,WAAY,CACZ,WAAY,CACZ,2BAA4B,CAE5B,YAAa,CACb,cAAe,CACf,6BAA8B,CAbhC,qBAgBI,iBAAkB,CAhBtB,oBAoBI,QAAS,CApBb,2CAwBI,YAAa,CACb,6BAA8B,CAC9B,UAAW,CACX,iBAAkB,CAClB,oBAAqB,CA5BzB,0DAiCQ,eAAgB,CAChB,aAA0B,CAlClC,4EAuCY,cAAe,CAvC3B,0DA6CQ,eAAgB,CAChB,gBAAiB,CACjB,wBAA4B,CA/CpC,4EAoDY,cAAe,CApD3B,8HA6DU,gBAAiB,CA7D3B,+CAkEQ,gBAAiB,CAlEzB,qEAuEM,qCAAyC,CACzC,QAAS,CACT,UAAW,CACX,qBAAsB,CACtB,YAAa,CA3EnB,8CA+EM,kBAAmB,CACnB,gBAAiB,CACjB,eAAgB,CAjFtB,kDAsFI,kBAAmB,CACnB,UAAW,CAvFf,gFA0FM,UAAW,CACX,YAAa,CACb,6BAA8B,CAC9B,iBAAkB,CAClB,aAAc,CA9FpB,4FAiGQ,QAAS,CAjGjB,2FAqGQ,QAAS,CArGjB,8GAyGQ,YAAa,CAzGrB,iJA4GU,UAAW,CACX,WAAY,CACZ,YAAa,CACb,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAClB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,yBAA6B,CAC7B,cAAe,CACf,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CA1H/B,wEAqIQ,WAAY,CACZ,4BAA6B,CAtIrC,uBA4II,UAAW,CACX,WAAY,CACZ,gBAAiB,CACjB,iBAAkB,CAClB,eAAgB,CAhJpB,kCAmJM,iBAAkB,CAClB,gBAAiB",sourcesContent:[".form-reservation{\r\n  background: #FFFFFF;\r\n  border: 1px solid rgba(0, 0, 0, 0.12);\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 25px rgba(0, 0, 0, 0.2);\r\n  border-radius: 4px;\r\n\r\n  width: 380px;\r\n  height: auto;\r\n  padding: 43px 29px 30px 29px;\r\n  \r\n  display: flex;\t\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n\r\n  h3{\r\n    margin: 19px 0 0 0;\r\n  }\r\n\r\n  p{\r\n    margin: 0;\r\n  }\r\n\r\n  .form-reservation__block{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    position: relative;\r\n    align-items: baseline;\r\n\r\n    p{\r\n\r\n      &:nth-child(1){\r\n        font-weight: 700;\r\n        color: rgba(31, 32, 65, 1) ;\r\n\r\n        span{\r\n\r\n          &:nth-child(2){\r\n            font-size: 24px;\r\n          }\r\n        }\r\n      }\r\n\r\n      &:nth-child(2){\r\n        font-weight: 400;\r\n        font-size: 12.5px;\r\n        color: rgba(31, 32, 65, 0.5) ;\r\n\r\n        span{\r\n\r\n          &:nth-child(1){\r\n            font-size: 15px;\r\n          }\r\n        }\r\n      }\r\n\r\n      span{\r\n\r\n        &:nth-child(1),\r\n        &:nth-child(2){\r\n          font-weight: bold;\r\n        }\r\n      }\r\n\r\n      a{\r\n        margin: 0 0 0 5px;\r\n      }\r\n    }\r\n\r\n    .form-reservation__dashed{\r\n      border: 1px dashed rgba(31, 32, 65, 0.25) ;\r\n      height: 0;\r\n      width: 100%;\r\n      box-sizing: border-box;\r\n      margin: 0 5px;\r\n    }\r\n\r\n    h2{\r\n      white-space: nowrap;\r\n      font-size: 19.8px;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n\r\n  .form-reservation__block-prices{\r\n    margin: 20px 0 44px;\r\n    width: 100%;\r\n  \r\n    .form-reservation__line-price{\r\n      width: 100%;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      position: relative;\r\n      margin: 10px 0;\r\n\r\n      &:first-child{\r\n        margin: 0;\r\n      }\r\n\r\n      &:last-child{\r\n        margin: 0;\r\n      }\r\n    \r\n      .form-reservation__text-price{\r\n        display: flex;\r\n\r\n        .form-reservation__icon-info-price{\r\n          width: 20px;\r\n          height: 20px;\r\n          margin: 0 9px;\r\n          border: 1px solid rgba(31, 32, 65, 0.25) ;\r\n          box-sizing: border-box;\r\n          border-radius: 50%;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          color: rgba(31, 32, 65, 0.25) ;\r\n          cursor: pointer;\r\n          user-select: none;\r\n          -moz-user-select: none;\r\n          -webkit-user-select: none;\r\n          -ms-user-select: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .dropdown-dates{\r\n\r\n    .calendar-block{\r\n\r\n      .calendar-block__btns{\r\n        width: 301px;\r\n        transform: translateX(-1.2px);\r\n      }\r\n    }\r\n  }\r\n\r\n  .btn{\r\n    width: 100%;\r\n    height: 36px;\r\n    line-height: 37px;\r\n    margin: 20px 0 0 0;\r\n    font-weight: 700;\r\n\r\n    .btn__link{\r\n      padding-right: 5px;\r\n      line-height: 35px;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=i},952:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(2311),u=i()(a()),c=d()(l.Z);u.push([e.id,".header{width:100%;box-shadow:0px 10px 20px rgba(31,32,65,0.05);position:relative;background:#fff}.header .header__content-container{flex-grow:1;max-width:100%;min-width:320px;margin:0 9.7%}.header .header__content-container .header__links{display:flex;justify-content:space-between;min-height:70px;color:rgba(31,32,65,0.5)}.header .header__content-container .header__links .header__logo{height:70px;width:106px}.header .header__content-container .header__links .header__block-menu{display:flex;flex-wrap:wrap;align-items:center;margin:0;padding:0}.header .header__content-container .header__links .header__block-menu .header__menu{display:flex;flex-wrap:wrap;align-items:center;margin:0;padding:0}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li{display:block;color:rgba(31,32,65,0.5);cursor:pointer;padding:10px 0;margin:5px 0 5px 20px;position:relative}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li:hover>.header__submenu{display:block}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li.header__menu-li_active{font-weight:bold;color:rgba(31,32,65,0.75)}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li.header__menu-li_expand:after{content:'';display:inline-block;width:22px;height:14px;background-image:url("+c+");background-repeat:no-repeat;background-position:50% 90%;cursor:pointer}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__menu-a{color:rgba(31,32,65,0.5);cursor:pointer;text-decoration:none}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__menu-a:hover{text-decoration:underline}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu{position:absolute;min-width:100px;background:#fff;border:1px solid rgba(31,32,65,0.05);box-shadow:0px 10px 20px rgba(31,32,65,0.05);padding:10px 20px;right:0;border-width:0 1px 1px 1px;z-index:1;display:none}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li{display:block}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li .header__submenu-a{color:rgba(31,32,65,0.5);cursor:pointer;text-decoration:none;white-space:nowrap}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li .header__submenu-a:hover{text-decoration:underline}.header .header__content-container .header__links .header__block-menu .header__block-login{display:flex;align-items:center}.header .header__content-container .header__links .header__block-menu .header__block-login .btn{font-weight:bold}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_border{font-size:12px;line-height:22px;width:83px}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_gradient{line-height:26px;font-size:12.3px;width:196px}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_header{margin:15px 0 15px 20px}.header .header__content-container .header__links .header__block-menu .header__block-login .header__block-login-hr{width:1px;height:30px;background:rgba(31,32,65,0.1);margin:0 20px}@media (max-width: 1170px){.header .header__content-container{margin:0}.header__links{margin:0 20px}}@media (max-width: 960px){.header__links{display:flex;flex-direction:column;align-items:center}.header__links .header__block-menu{flex-direction:column;justify-content:center}.header__links .header__block-menu .header__menu-li:nth-child(1){margin-left:0}.header__links .header__block-menu .btn_border.btn_header{margin-left:0}.header__links .header__block-menu .header__block-login-hr{display:none}}@media (max-width: 620px){.header__links .btn_border.btn_header{margin-left:0}}@media (max-width: 530px){.header__menu{flex-direction:column}.header__menu .header__menu-li{margin:5px 0 !important}.header__block-login{flex-wrap:wrap;justify-content:center}.header__block-login .btn{margin:15px 10px !important}}\n","",{version:3,sources:["webpack://./src/blocks/header/header.scss"],names:[],mappings:"AAAA,QACE,UAAW,CACX,4CAAgD,CAChD,iBAAkB,CAClB,eAAgB,CAJlB,mCAOI,WAAY,CACZ,cAAe,CACf,eAAgB,CAChB,aAAc,CAVlB,kDAaM,YAAa,CACb,6BAA8B,CAC9B,eAAgB,CAChB,wBAA4B,CAhBlC,gEAmBQ,WAAY,CACZ,WAAY,CApBpB,sEAwBQ,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,QAAS,CACT,SAAU,CA5BlB,oFA+BU,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,QAAS,CACT,SAAU,CAnCpB,qGAsCY,aAAc,CACd,wBAA4B,CAC5B,cAAe,CACf,cAAe,CACf,qBAAsB,CACtB,iBAAkB,CA3C9B,4HA+CgB,aAAc,CA/C9B,4HAoDc,gBAAiB,CACjB,yBAA6B,CArD3C,kIA2DgB,UAAW,CACX,oBAAqB,CACrB,UAAW,CACX,WAAY,CACZ,wDAAuD,CACvD,2BAA4B,CAC5B,2BAA4B,CAC5B,cAAe,CAlE/B,qHAuEc,wBAA4B,CAC5B,cAAe,CACf,oBAAqB,CAzEnC,2HA4EgB,yBAA0B,CA5E1C,sHAiFc,iBAAkB,CAClB,eAAgB,CAChB,eAAgB,CAChB,oCAAwC,CACxC,4CAAgD,CAChD,iBAAkB,CAClB,OAAQ,CACR,0BAA2B,CAC3B,SAAU,CACV,YAAa,CA1F3B,0IA6FgB,aAAc,CA7F9B,6JAgGkB,wBAA4B,CAC5B,cAAe,CACf,oBAAqB,CACrB,kBAAmB,CAnGrC,mKAsGoB,yBAA0B,CAtG9C,2FA+GU,YAAa,CACb,kBAAmB,CAhH7B,gGAmHY,gBAAiB,CAnH7B,2GAsHc,cAAe,CACf,gBAAiB,CACjB,UAAW,CAxHzB,6GA4Hc,gBAAiB,CACjB,gBAAiB,CACjB,WAAY,CA9H1B,2GAkIc,uBAAwB,CAlItC,mHAuIY,SAAU,CACV,WAAY,CACZ,6BAAiC,CACjC,aAAc,CACf,2BAQT,mCAGI,QAAS,CACV,eAID,aAAc,CACf,CAGH,0BACE,eACE,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAHrB,mCAMI,qBAAsB,CACtB,sBAAuB,CAP3B,iEAYQ,aAAc,CAZtB,0DAmBS,aAAc,CAnBvB,2DAwBM,YAAa,CACd,CAKP,0BACE,sCAKO,aAAc,CAChB,CAKP,0BACE,cACE,qBAAsB,CADxB,+BAII,uBAAuB,CACxB,qBAID,cAAe,CACf,sBAAuB,CAFzB,0BAKI,2BAA2B,CAC5B",sourcesContent:[".header{\r\n  width: 100%;\r\n  box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n  position: relative;\r\n  background: #fff;\r\n\r\n  .header__content-container{\r\n    flex-grow: 1;\r\n    max-width: 100%;\r\n    min-width: 320px;\r\n    margin: 0 9.7%;\r\n\r\n    .header__links{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      min-height: 70px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n    \r\n      .header__logo{\r\n        height: 70px;\r\n        width: 106px;\r\n      }\r\n      \r\n      .header__block-menu{\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-items: center;\r\n        margin: 0;\r\n        padding: 0;\r\n    \r\n        .header__menu{\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n          align-items: center;\r\n          margin: 0;\r\n          padding: 0;\r\n    \r\n          .header__menu-li{\r\n            display: block;\r\n            color: rgba(31, 32, 65, 0.5);\r\n            cursor: pointer;\r\n            padding: 10px 0;\r\n            margin: 5px 0 5px 20px;\r\n            position: relative;\r\n\r\n            &:hover{\r\n              > .header__submenu{\r\n                display: block;\r\n              }\r\n            }\r\n\r\n            &.header__menu-li_active{\r\n              font-weight: bold;\r\n              color: rgba(31, 32, 65, 0.75);\r\n            }\r\n    \r\n            &.header__menu-li_expand{\r\n    \r\n              &:after{\r\n                content: '';\r\n                display: inline-block;\r\n                width: 22px;\r\n                height: 14px;\r\n                background-image: url('@Blocks/header/expand-more.svg');\r\n                background-repeat: no-repeat;\r\n                background-position: 50% 90%;\r\n                cursor: pointer;\r\n              }\r\n            }\r\n            \r\n            .header__menu-a{\r\n              color: rgba(31, 32, 65, 0.5);\r\n              cursor: pointer;\r\n              text-decoration: none;\r\n\r\n              &:hover{\r\n                text-decoration: underline;\r\n              }\r\n            }\r\n\r\n            .header__submenu{\r\n              position: absolute;\r\n              min-width: 100px;\r\n              background: #fff;\r\n              border: 1px solid rgba(31, 32, 65, 0.05);\r\n              box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n              padding: 10px 20px;\r\n              right: 0;\r\n              border-width: 0 1px 1px 1px;\r\n              z-index: 1;\r\n              display: none;\r\n\r\n              .header__submenu-li{\r\n                display: block;\r\n\r\n                .header__submenu-a{\r\n                  color: rgba(31, 32, 65, 0.5);\r\n                  cursor: pointer;\r\n                  text-decoration: none;\r\n                  white-space: nowrap;\r\n\r\n                  &:hover{\r\n                    text-decoration: underline;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n    \r\n        .header__block-login{\r\n          display: flex;\r\n          align-items: center;\r\n\r\n          .btn{\r\n            font-weight: bold;\r\n        \r\n            &.btn_border {\r\n              font-size: 12px;\r\n              line-height: 22px;\r\n              width: 83px;\r\n            }\r\n        \r\n            &.btn_gradient{\r\n              line-height: 26px;\r\n              font-size: 12.3px;\r\n              width: 196px;\r\n            }\r\n\r\n            &.btn_header{\r\n              margin: 15px 0 15px 20px;\r\n            }\r\n          }\r\n    \r\n          .header__block-login-hr{\r\n            width: 1px;\r\n            height: 30px;\r\n            background: rgba(31, 32, 65, 0.1);\r\n            margin: 0 20px;\r\n          }\r\n        }\t\t\r\n      }   \r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .header{\r\n\r\n    .header__content-container{\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .header__links{ \r\n    margin: 0 20px; \r\n  }\r\n}\r\n\r\n@media (max-width: 960px){\r\n  .header__links{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    .header__block-menu{\r\n      flex-direction: column;\r\n      justify-content: center;\r\n\r\n      .header__menu-li{\r\n\r\n        &:nth-child(1){\r\n          margin-left: 0;\r\n        }\r\n      }\r\n\r\n      .btn_border{\r\n\r\n        &.btn_header{\r\n           margin-left: 0;\r\n        }\r\n      }\r\n\r\n      .header__block-login-hr{\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 620px){\r\n  .header__links{\r\n\r\n    .btn_border{\r\n      \r\n      &.btn_header{\r\n         margin-left: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 530px){\r\n  .header__menu{\r\n    flex-direction: column;\r\n    \r\n    .header__menu-li{\r\n      margin: 5px 0!important;\r\n    }\r\n  }\r\n\r\n  .header__block-login{\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    .btn{ \r\n      margin: 15px 10px!important;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const m=u},6498:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".info-block{min-width:280px;margin-right:10.5%}.info-block .info-block__item{display:flex;flex-wrap:wrap;margin:21px 0 22px}.info-block .info-block__item .info-block__icon.info-block__icon_emoticon{width:40px;height:40px;margin:2px 14px 2px 4px}.info-block .info-block__item .info-block__icon.info-block__icon_city{width:38px;height:38px;margin:2px 15px 2px 5px}.info-block .info-block__item .info-block__icon.info-block__icon_whatshot{width:44px;height:44px;margin:2px 12px 2px 2px}.info-block .info-block__item .info-block__text{display:flex;flex-direction:column;justify-content:space-between}.info-block .info-block__item .info-block__text p{margin:0;font-size:14px;line-height:20px}.info-block .info-block__hr{width:100%;margin:0;border:0.5px solid rgba(31,32,65,0.1)}\n","",{version:3,sources:["webpack://./src/blocks/info-block/info-block.scss"],names:[],mappings:"AAAA,YACE,eAAgB,CAChB,kBAAmB,CAFrB,8BAKI,YAAa,CACb,cAAe,CACf,kBAAmB,CAPvB,0EAYQ,UAAW,CACX,WAAY,CACZ,uBAAwB,CAdhC,sEAkBQ,UAAW,CACX,WAAY,CACZ,uBAAwB,CApBhC,0EAwBQ,UAAW,CACX,WAAY,CACZ,uBAAwB,CA1BhC,gDA+BM,YAAa,CACb,qBAAsB,CACtB,6BAA8B,CAjCpC,kDAoCQ,QAAS,CACT,cAAe,CACf,gBAAiB,CAtCzB,4BA4CI,UAAW,CACX,QAAS,CACT,qCAAyC",sourcesContent:[".info-block{\r\n  min-width: 280px;\r\n  margin-right: 10.5%;\r\n\r\n  .info-block__item{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin: 21px 0 22px;\r\n\r\n    .info-block__icon{\r\n      \r\n      &.info-block__icon_emoticon{\r\n        width: 40px;\r\n        height: 40px;\r\n        margin: 2px 14px 2px 4px;\r\n      }\r\n\r\n      &.info-block__icon_city{\r\n        width: 38px;\r\n        height: 38px;\r\n        margin: 2px 15px 2px 5px;\r\n      }\r\n      \r\n      &.info-block__icon_whatshot{\r\n        width: 44px;\r\n        height: 44px;\r\n        margin: 2px 12px 2px 2px;\r\n      }\r\n    }\r\n\r\n    .info-block__text{\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: space-between;\r\n\r\n      p{\r\n        margin: 0;\r\n        font-size: 14px;\r\n        line-height: 20px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .info-block__hr{\r\n    width: 100%;\r\n    margin: 0;\r\n    border: 0.5px solid rgba(31, 32, 65, 0.1);\r\n  }\r\n}"],sourceRoot:""}]);const s=i},6263:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(1932),u=i()(a()),c=d()(l.Z);u.push([e.id,".input-text{position:relative;width:100%}.input-text.input-text_subscription{margin-top:10px}.input-text.input-text_subscription:after{content:'';width:20px;height:20px;cursor:pointer;position:absolute;bottom:11px;right:11px;background-repeat:no-repeat;background-image:url("+c+")}.input-text .input-text__input{width:100%;color:rgba(31,32,65,0.25);outline:none;font-size:14px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:4px;height:44px;padding:8px 14px;margin-top:5px;font-family:Montserrat, Arial, sans-serif;font-weight:normal;font-style:normal}.input-text .input-text__input:hover,.input-text .input-text__input.input-text__input_hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5);font-weight:bold}.input-text .input-text__input:focus{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.input-text ::-webkit-input-placeholder{color:rgba(31,32,65,0.25)}.input-text :-ms-input-placeholder{color:rgba(31,32,65,0.25)}.input-text ::-moz-placeholder{color:rgba(31,32,65,0.25)}.input-text :-moz-placeholder{color:rgba(31,32,65,0.25)}\n","",{version:3,sources:["webpack://./src/blocks/input-text/input-text.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CAClB,UAAW,CAFb,oCAKI,eAAgB,CALpB,0CAQM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,2BAA4B,CAC5B,wDAAqD,CAhB3D,+BAqBI,UAAW,CACX,yBAA6B,CAC7B,YAAa,CACb,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,yCAA0C,CAC1C,kBAAmB,CACnB,iBAAkB,CAjCtB,4FAqCM,yBAA6B,CAC7B,mCAAuC,CACvC,gBAAiB,CAvCvB,qCA0CM,yBAA6B,CAC7B,mCAAuC,CA3C7C,wCAgDI,yBAA6B,CAhDjC,mCAmDI,yBAA6B,CAnDjC,+BAsDI,yBAA6B,CAtDjC,8BAyDI,yBAA6B",sourcesContent:[".input-text{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  &.input-text_subscription{\r\n    margin-top: 10px;\r\n  \r\n    &:after{\r\n      content: '';\r\n      width: 20px;\r\n      height: 20px;\r\n      cursor: pointer;\r\n      position: absolute;\r\n      bottom: 11px;\r\n      right: 11px;\r\n      background-repeat: no-repeat;\r\n      background-image: url('@Blocks/input-text/arrow.svg');\r\n    }\r\n  }\r\n\r\n  .input-text__input{\r\n    width: 100%;\r\n    color: rgba(31, 32, 65, 0.25);\r\n    outline: none;\r\n    font-size: 14px;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;    \r\n\r\n    &:hover,\r\n    &.input-text__input_hover{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      font-weight: bold;\r\n    }\r\n    &:focus{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n  }\r\n\r\n  ::-webkit-input-placeholder { /* Chrome */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-ms-input-placeholder { /* IE 10+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  ::-moz-placeholder { /* Firefox 19+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-moz-placeholder { /* Firefox 4 - 18 */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n}"],sourceRoot:""}]);const m=u},8622:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(1694),u=n(7055),c=i()(a()),m=d()(l.Z),_=d()(u.Z);c.push([e.id,".like{display:flex;justify-content:space-between;width:38px;height:18px;border-radius:10px;border:1px solid rgba(31,32,65,0.25);margin:15px 10px 0 0;cursor:pointer}.like.like_liked{border-color:#BC9CFF}.like .like__ico{width:10px;height:10px;margin:4px 0 5px 4px;cursor:pointer;background-image:url("+m+");background-repeat:no-repeat;background-position:50%;background-size:contain}.like .like__ico.like__ico_liked{background-image:url("+_+")}.like .like__sum{margin:4px 10px 3px 0;font-size:10px;display:flex;align-items:center;color:rgba(31,32,65,0.25);cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.like .like__sum.like__sum_liked{color:#BC9CFF}\n","",{version:3,sources:["webpack://./src/blocks/like/like.scss"],names:[],mappings:"AAAA,MACE,YAAa,CACb,6BAA8B,CAC9B,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,oCAAwC,CACxC,oBAAqB,CACrB,cAAe,CARjB,iBAWI,oBAAqB,CAXzB,iBAeI,UAAW,CACX,WAAY,CACZ,oBAAqB,CACrB,cAAe,CACf,wDAA4C,CAC5C,2BAA4B,CAC5B,uBAAwB,CACxB,uBAAwB,CAtB5B,iCAyBM,wDAAqC,CAzB3C,iBA8BI,qBAAsB,CACtB,cAAe,CACf,YAAa,CACb,kBAAmB,CACnB,yBAA6B,CAC7B,cAAe,CACf,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CAvCzB,iCA0CM,aAAc",sourcesContent:[".like{\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 38px;\r\n  height: 18px;\r\n  border-radius: 10px;\r\n  border: 1px solid rgba(31, 32, 65, 0.25);\r\n  margin: 15px 10px 0 0;\r\n  cursor: pointer;\r\n\r\n  &.like_liked{\r\n    border-color: #BC9CFF;\r\n  }\r\n\r\n  .like__ico{\r\n    width: 10px;\r\n    height: 10px;\r\n    margin: 4px 0 5px 4px;\r\n    cursor: pointer;\r\n    background-image: url('favorite_border.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: 50%;\r\n    background-size: contain;\r\n\r\n    &.like__ico_liked{\r\n      background-image: url('favorite.svg');\r\n    }\r\n  }\r\n\r\n  .like__sum{\r\n    margin: 4px 10px 3px 0;\r\n    font-size: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    color: rgba(31, 32, 65, 0.25);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n\r\n    &.like__sum_liked{\r\n      color: #BC9CFF;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const h=c},8236:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".link{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;line-height:15px;height:15px;color:#BC9CFF;text-transform:uppercase;cursor:pointer;margin:15px 20px 15px 0;-webkit-user-select:none;text-decoration:none}.link.link_clean{color:rgba(31,32,65,0.5)}.link.link_lux{margin:0 0 0 3px}.link:hover{text-decoration:underline}\n","",{version:3,sources:["webpack://./src/blocks/link/link.scss"],names:[],mappings:"AAAA,MACE,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,WAAY,CACZ,aAAc,CACd,wBAAyB,CACzB,cAAe,CACf,uBAAwB,CACxB,wBAAyB,CACzB,oBAAqB,CAZvB,iBAeI,wBAA4B,CAfhC,eAmBI,gBAAiB,CAnBrB,YAuBI,yBAA0B",sourcesContent:[".link{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  height: 15px;\r\n  color: #BC9CFF;\t\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  -webkit-user-select: none;\r\n  text-decoration: none;\r\n\r\n  &.link_clean{\r\n    color: rgba(31, 32, 65, 0.5);\r\n  }\r\n  \r\n  &.link_lux{\r\n    margin: 0 0 0 3px;\r\n  }\r\n\r\n  &:hover{\r\n    text-decoration: underline;\r\n  }\r\n}"],sourceRoot:""}]);const s=i},9402:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".list-block{width:361px}.list-block .list-block__list{margin:0;padding:0}.list-block .list-block__item{position:relative;margin:10px 0;display:flex}.list-block .list-block__item:before{content:'';width:10px;height:10px;border-radius:50%;margin:7px 10px 7px 0;background:rgba(31,32,65,0.25)}.list-block .list-block__item p{width:240px;margin:0}\n","",{version:3,sources:["webpack://./src/blocks/list-block/list-block.scss"],names:[],mappings:"AAAA,YACE,WAAY,CADd,8BAII,QAAS,CACT,SAAU,CALd,8BASI,iBAAkB,CAClB,aAAc,CACd,YAAa,CAXjB,qCAcM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,qBAAsB,CACtB,8BAAkC,CAnBxC,gCAuBM,WAAY,CACZ,QAAS",sourcesContent:[".list-block{\r\n  width: 361px;\r\n\r\n  .list-block__list{\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  .list-block__item{\r\n    position: relative;\r\n    margin: 10px 0;\r\n    display: flex;\r\n\r\n    &:before{\r\n      content: '';\r\n      width: 10px;\r\n      height: 10px;\r\n      border-radius: 50%;\r\n      margin: 7px 10px 7px 0;\r\n      background: rgba(31, 32, 65, 0.25);\r\n    }\r\n\r\n    p{\r\n      width: 240px;\r\n      margin: 0;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=i},215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".topic-label{display:flex;justify-content:space-between}.topic-label h3,.topic-label p{margin:0}.topic-label p{font-size:12px;line-height:11px;text-transform:uppercase;color:#1F2041}\n","",{version:3,sources:["webpack://./src/blocks/topic-label/topic-label.scss"],names:[],mappings:"AAAA,aACE,YAAa,CACb,6BAA8B,CAFhC,+BAKI,QAAS,CALb,eASI,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CACzB,aAAc",sourcesContent:[".topic-label{\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  h3,p{\r\n    margin: 0;\r\n  }\r\n\r\n  p{\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n    text-transform: uppercase;\r\n    color: #1F2041;\r\n  }\r\n}"],sourceRoot:""}]);const s=i},4800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".start-page{padding:80px 8.4%}.start-page .start-page__links{display:flex;flex-direction:column}body{margin:0;padding:0;font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:normal;font-size:13.7px;line-height:24px;color:rgba(31,32,65,0.75);min-width:320px}h1{font-family:Montserrat, Arial, sans-serif;font-size:24px;line-height:30px}h2{font-family:Montserrat, Arial, sans-serif;font-size:19px;line-height:24px}h3{font-family:Montserrat, Arial, sans-serif;font-size:12px;line-height:15px;text-transform:uppercase}h1,h2,h3{margin:0}body,p{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:normal;font-size:14px;line-height:24px}a{cursor:pointer}a :hover{text-decoration:underline}img{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}\n","",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CADpB,+BAII,YAAa,CACb,qBAAsB,CACvB,KAID,QAAS,CACT,SAAU,CACV,yCAA0C,CAC1C,iBAAkB,CAClB,kBAAmB,CACnB,gBAAiB,CACjB,gBAAiB,CACjB,yBAA6B,CAC7B,eAAgB,CACjB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CAClB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CAClB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CAC1B,SAGC,QAAS,CACV,OAGC,yCAA0C,CAC1C,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CAClB,EAGC,cAAe,CADjB,SAGI,yBAA0B,CAC3B,IAID,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB",sourcesContent:[".start-page{\r\n  padding: 80px 8.4%;\r\n\r\n  .start-page__links{\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\nbody{\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 13.7px;\r\n  line-height: 24px;\r\n  color: rgba(31, 32, 65, 0.75);\r\n  min-width: 320px;\r\n}\r\n\r\nh1{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n}\r\n\r\nh2{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 19px;\r\n  line-height: 24px;\r\n}\r\n\r\nh3{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-transform: uppercase;\r\n}\r\n\r\nh1,h2,h3{\r\n  margin: 0;\r\n}\r\n\r\nbody,p{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n}\r\n\r\na{\r\n  cursor: pointer;\r\n  :hover{\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\nimg{\r\n  user-select: none;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n}\r\n"],sourceRoot:""}]);const s=i},5222:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(1248),u=n(2297),c=n(9636),m=i()(a()),_=d()(l.Z),h=d()(u.Z),f=d()(c.Z);m.push([e.id,".details-room__block-images,.details-room__image-one,.details-room__blk-image-one,.details-room__blk-image-two{margin:0;padding:0}.details-room{position:relative;width:100%}.details-room .details-room__block-images{display:flex;flex-wrap:wrap;justify-content:space-between}.details-room .details-room__block-images .details-room__blk-image-one{width:68.2%}.details-room .details-room__block-images .details-room__blk-image-one .details-room__image-one{background-image:url("+_+");width:100%;height:33.7vw;background-size:cover;background-position:50%;cursor:pointer}.details-room .details-room__block-images .details-room__blk-image-two{width:31.8%;display:flex;flex-direction:column;justify-content:space-between}.details-room .details-room__block-images .details-room__blk-image-two .details-room__image-two{margin:0;padding:0;height:50%;background-size:cover;cursor:pointer}.details-room .details-room__block-images .details-room__blk-image-two .details-room__image-two.details-room__image-two_top{background-image:url("+h+")}.details-room .details-room__block-images .details-room__blk-image-two .details-room__image-two.details-room__image-two_bottom{background-image:url("+f+")}.details-room .details-room__content-block{display:flex;justify-content:space-between;margin:70px 9.7% 60px;max-width:100%;min-width:320px}.details-room .details-room__content-block .details-room__room-info{width:65%;display:flex;flex-wrap:wrap}.details-room .details-room__content-block .details-room__room-info h2{font-weight:bold;font-size:19.9px;line-height:22px;margin-bottom:24px}.details-room .details-room__content-block .details-room__room-info .details-room__room-impression{position:relative;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.details-room .details-room__content-block .details-room__room-info .details-room__room-impression h2{margin-bottom:7px}.details-room .details-room__content-block .details-room__room-info .details-room__room-impression .details-room__impression{color:#BC9CFF;font-weight:bold;position:absolute;width:82px;height:82px}.details-room .details-room__content-block .details-room__room-info .details-room__room-impression .details-room__impression .details-room__impression-qty-review{font-size:25px;font-weight:bold;position:absolute;left:48%;top:33%}.details-room .details-room__content-block .details-room__room-info .details-room__room-impression .details-room__impression .details-room__impression-text{font-weight:bold;position:absolute;left:40%;top:72%}.details-room .details-room__content-block .details-room__room-info .comment-block{margin:13px 0 33px 0}.details-room .details-room__content-block .details-room__room-info .comment-block .comment-block__person .comment-block__photo{width:44px;height:44px;border-radius:50%;border:2px solid #FFFFFF;filter:drop-shadow(0px 10px 20px rgba(31,32,65,0.1))}.details-room .details-room__content-block .details-room__room-info .list-block{width:361px}.details-room .details-room__content-block .details-room__room-info .list-block h2{margin:0 0 20px 20px;font-size:19.4px}.details-room .details-room__content-block .details-room__room-info .details-room__info-cancel{width:340px}.details-room .details-room__content-block .details-room__room-info .details-room__info-cancel h2{margin:0 0 20px 0}@media (max-width: 1350px){.details-room .details-room__content-block .details-room__room-info .list-block{width:265px}}@media (max-width: 1220px){.details-room .details-room__content-block .details-room__room-info .list-block h2{margin-left:0}}@media (max-width: 1170px){.details-room .details-room__content-block .details-room__room-info{margin:0 20px}.details-room .details-room__content-block .form-reservation{margin-right:20px}}@media (max-width: 1100px){.details-room .comment-block__title{display:flex;flex-direction:column;margin-bottom:65px}.details-room .list-block{margin-bottom:20px}}@media (max-width: 890px){.details-room .details-room__content-block{flex-wrap:wrap;justify-content:center;align-items:center;margin:20px auto}.details-room .details-room__content-block .details-room__room-info .info-block,.details-room .details-room__content-block .details-room__room-info .details-room__room-impression,.details-room .details-room__content-block .details-room__room-info .comment-block,.details-room .details-room__content-block .details-room__room-info .list-block,.details-room .details-room__content-block .details-room__room-info .details-room__info-cancel{margin:20px auto}.details-room .details-room__content-block .details-room__room-info .details-room__room-impression{margin-bottom:20px}.details-room .details-room__content-block .details-room__room-info .comment-block{margin-bottom:20px}.details-room .details-room__content-block .details-room__room-info .comment-block .comment-block__title{flex-wrap:wrap;height:auto;margin-bottom:20px}.details-room .details-room__content-block .details-room__room-info .comment-block .comment-block__title h2{margin-bottom:10px}.details-room .details-room__content-block .form-reservation{margin:20px auto 0}}@media (max-width: 640px){.details-room .details-room__block-images .details-room__blk-image-one{width:100%}.details-room .details-room__block-images .details-room__blk-image-one .details-room__image-one{height:48vw;margin:1px auto}.details-room .details-room__block-images .details-room__blk-image-two{width:100%}.details-room .details-room__block-images .details-room__blk-image-two .details-room__image-two{height:48vw;margin:1px auto;width:100%}}@media (max-width: 400px){.form-reservation{width:100%;padding:20px}.form-reservation .dropdownDates{flex-wrap:wrap}.form-reservation p{min-width:57px;text-align:right}}\n","",{version:3,sources:["webpack://./src/pages/details-room/details-room.scss"],names:[],mappings:"AAAA,+GAIE,QAAS,CACT,SAAU,CACX,cAGC,iBAAkB,CAClB,UAAW,CAFb,0CAKI,YAAa,CACb,cAAe,CACf,6BAA8B,CAPlC,uEAUM,WAAY,CAVlB,gGAaQ,wDAAkC,CAClC,UAAW,CACX,aAAc,CACd,qBAAsB,CACtB,uBAAwB,CACxB,cAAe,CAlBvB,uEAuBM,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,6BAA8B,CA1BpC,gGA6BQ,QAAS,CACT,SAAU,CACV,UAAW,CACX,qBAAsB,CACtB,cAAe,CAjCvB,4HAoCU,wDAAmC,CApC7C,+HAwCU,wDAAmC,CAxC7C,2CA+CI,YAAa,CACb,6BAA8B,CAC9B,qBAAsB,CACtB,cAAe,CACf,eAAgB,CAnDpB,oEAsDM,SAAU,CACV,YAAa,CACb,cAAe,CAxDrB,uEA2DQ,gBAAiB,CACjB,gBAAiB,CACjB,gBAAiB,CACjB,kBAAmB,CA9D3B,mGAkEQ,iBAAkB,CAClB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CAtE7B,sGAyEU,iBAAkB,CAzE5B,6HA6EU,aAAc,CACd,gBAAiB,CACjB,iBAAkB,CAClB,UAAW,CACX,WAAY,CAjFtB,kKAoFY,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,QAAS,CACT,OAAQ,CAxFpB,4JA4FY,gBAAiB,CACjB,iBAAkB,CAClB,QAAS,CACT,OAAQ,CA/FpB,mFAoGQ,oBAAqB,CApG7B,gIAyGY,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,wBAAyB,CACzB,oDAAwD,CA7GpE,gFAmHQ,WAAY,CAnHpB,mFAsHU,oBAAoB,CACpB,gBAAiB,CAvH3B,+FA4HQ,WAAY,CA5HpB,kGA+HU,iBAAkB,CACnB,2BAOP,gFAOQ,WAAY,CACb,CAMT,2BACE,mFASU,aAAc,CACf,CAOX,2BACE,oEAKM,aAAc,CALpB,6DASM,iBAAkB,CACnB,CAKP,2BACE,oCAGI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CALvB,0BASI,kBAAmB,CACpB,CAIL,0BACE,2CAGI,cAAe,CACf,sBAAuB,CACvB,kBAAmB,CACnB,gBAAiB,CANrB,qbAeQ,gBAAiB,CAfzB,mGAmBQ,kBAAmB,CAnB3B,mFAuBQ,kBAAmB,CAvB3B,yGA0BU,cAAe,CACf,WAAY,CACZ,kBAAmB,CA5B7B,4GA+BY,kBAAmB,CA/B/B,6DAsCM,kBAAmB,CACpB,CAKP,0BACE,uEAKM,UAAW,CALjB,gGAQQ,WAAY,CACZ,eAAgB,CATxB,uEAcM,UAAW,CAdjB,gGAiBQ,WAAY,CACZ,eAAgB,CAChB,UAAW,CACZ,CAMT,0BACE,kBACE,UAAW,CACX,YAAa,CAFf,iCAKI,cAAe,CALnB,oBASI,cAAe,CACf,gBAAiB,CAClB",sourcesContent:[".details-room__block-images,\r\n.details-room__image-one,\r\n.details-room__blk-image-one,\r\n.details-room__blk-image-two{\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.details-room{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  .details-room__block-images{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n\r\n    .details-room__blk-image-one{\r\n      width: 68.2%;\r\n\r\n      .details-room__image-one{\r\n        background-image: url('image.png');\r\n        width: 100%;\r\n        height: 33.7vw;\r\n        background-size: cover;\r\n        background-position: 50%;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n    \r\n    .details-room__blk-image-two{\r\n      width: 31.8%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: space-between;\r\n\r\n      .details-room__image-two{\r\n        margin: 0;\r\n        padding: 0;\r\n        height: 50%;\r\n        background-size: cover;\t\r\n        cursor: pointer;\r\n\r\n        &.details-room__image-two_top{\r\n          background-image: url('image2.png');\r\n        }\r\n\r\n        &.details-room__image-two_bottom{\r\n          background-image: url('image3.png');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .details-room__content-block{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 70px 9.7% 60px;\r\n    max-width: 100%;\r\n    min-width: 320px;\r\n\r\n    .details-room__room-info{\r\n      width: 65%;\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n\r\n      h2{\r\n        font-weight: bold;\r\n        font-size: 19.9px;\r\n        line-height: 22px;\r\n        margin-bottom: 24px;\r\n      }\r\n\r\n      .details-room__room-impression{\r\n        position: relative;\r\n        user-select: none;\r\n        -moz-user-select: none;\r\n        -webkit-user-select: none;\r\n        -ms-user-select: none;\r\n\r\n        h2{\r\n          margin-bottom: 7px;\r\n        }\r\n\r\n        .details-room__impression{\r\n          color: #BC9CFF;\r\n          font-weight: bold;\r\n          position: absolute;\r\n          width: 82px;\r\n          height: 82px;\r\n          \r\n          .details-room__impression-qty-review{\r\n            font-size: 25px;\r\n            font-weight: bold;\r\n            position: absolute;\r\n            left: 48%;\r\n            top: 33%;\r\n          }\r\n\r\n          .details-room__impression-text{\r\n            font-weight: bold;\r\n            position: absolute;\r\n            left: 40%;\r\n            top: 72%;\r\n          }\r\n        }\r\n      }\r\n      .comment-block{\r\n        margin: 13px 0 33px 0;\r\n\r\n        .comment-block__person{\r\n\r\n          .comment-block__photo{\r\n            width: 44px;\r\n            height: 44px;\r\n            border-radius: 50%;\r\n            border: 2px solid #FFFFFF;\r\n            filter: drop-shadow(0px 10px 20px rgba(31, 32, 65, 0.1));\r\n          }\r\n        }\r\n      }\r\n\r\n      .list-block{\r\n        width: 361px;\r\n\r\n        h2{\r\n          margin:0 0 20px 20px;\r\n          font-size: 19.4px;\r\n        }\r\n      }\r\n\r\n      .details-room__info-cancel{\r\n        width: 340px;\r\n\r\n        h2{\r\n          margin: 0 0 20px 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1350px){\r\n  .details-room{\r\n\r\n    .details-room__content-block{\r\n\r\n      .details-room__room-info{\r\n\r\n        .list-block{\r\n          width: 265px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1220px){\r\n  .details-room{\r\n\r\n    .details-room__content-block{\r\n\r\n      .details-room__room-info{\r\n\r\n        .list-block{\r\n          \r\n          h2{\r\n            margin-left: 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .details-room{\r\n\r\n    .details-room__content-block{\r\n\r\n      .details-room__room-info{\r\n        margin: 0 20px;      \r\n      }\r\n      \r\n      .form-reservation{\r\n        margin-right: 20px;\r\n      }\t\t\t\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1100px){\r\n  .details-room{\r\n\r\n    .comment-block__title{\r\n      display: flex;\r\n      flex-direction: column;      \r\n      margin-bottom: 65px;\r\n    }\r\n\r\n    .list-block{\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 890px){\r\n  .details-room{\r\n\r\n    .details-room__content-block{\r\n      flex-wrap: wrap;\r\n      justify-content: center;\r\n      align-items: center;\r\n      margin: 20px auto;\r\n\r\n      .details-room__room-info{\r\n\r\n        .info-block,\r\n        .details-room__room-impression,\r\n        .comment-block,\r\n        .list-block,\r\n        .details-room__info-cancel{\r\n          margin: 20px auto;\r\n        }\r\n\r\n        .details-room__room-impression{\r\n          margin-bottom: 20px;\r\n        }\r\n\r\n        .comment-block{\r\n          margin-bottom: 20px;\r\n          \r\n          .comment-block__title{\r\n            flex-wrap: wrap;\r\n            height: auto;\r\n            margin-bottom: 20px;\r\n\r\n            h2{\r\n              margin-bottom: 10px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .form-reservation{\r\n        margin: 20px auto 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 640px){\r\n  .details-room{\r\n\r\n    .details-room__block-images{\r\n\r\n      .details-room__blk-image-one{\r\n        width: 100%;\r\n\r\n        .details-room__image-one{\r\n          height: 48vw;\r\n          margin: 1px auto;\r\n        }\r\n      }\r\n\r\n      .details-room__blk-image-two{\r\n        width: 100%;\r\n\r\n        .details-room__image-two{\r\n          height: 48vw;\r\n          margin: 1px auto;\r\n          width: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 400px){\r\n  .form-reservation{\r\n    width: 100%;\r\n    padding: 20px;\r\n\r\n    .dropdownDates{\r\n      flex-wrap: wrap;\r\n    }\r\n    \r\n    p{\r\n      min-width: 57px;\r\n      text-align: right;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const p=m},6647:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o),s=n(1667),d=n.n(s),l=n(3988),u=n(7771),c=n(7869),m=i()(a()),_=d()(l),h=d()(u),f=d()(c);m.push([e.id,"/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n  url("+_+") format('woff2'), \r\n  url("+h+") format('woff'), \r\n  url("+f+") format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-size: 13.7px;\r\n}","",{version:3,sources:["webpack://./src/font/fonts.css"],names:[],mappings:"AAAA,aAAa;;AAEb;EACE,yBAAyB;EACzB;;;4DAG0E;EAC1E,gBAAgB;EAChB,kBAAkB;EAClB,iBAAiB;AACnB",sourcesContent:["/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n  url('@/font/montserrat-regular/montserrat-regular.woff2') format('woff2'), \r\n  url('@/font/montserrat-regular/montserrat-regular.woff') format('woff'), \r\n  url('@/font/montserrat-regular/montserrat-regular.ttf') format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-size: 13.7px;\r\n}"],sourceRoot:""}]);const p=m},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&a[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,a,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw a}}return o}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(d," */"),u=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(u).concat([l]).join("\n")}return[o].join("\n")}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},5113:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d00fde534b9a762845437465e1545a24.svg"},1403:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},9048:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},783:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"afc284d3c92092876cda0422f86ad37f.svg"},2311:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"afc284d3c92092876cda0422f86ad37f.svg"},1932:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},7055:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"acdbe098fa549bbb607f0a7dd8d75cad.svg"},1694:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"521d319ee4d28d3f4355d188bb7c3fef.svg"},1248:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"47878f203720b365db2a7b388d09ea7b.png"},2297:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"54ff903cf57f1f6b1bf33a4a9cfbef24.png"},9636:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"59b9bee537cce9b3c233107a2170c300.png"},6688:(e,t,n)=>{var r,a,o;window.jQuery,window.Zepto,a=[n(9755)],void 0===(o="function"==typeof(r=function(e){"use strict";var t=function(t,n,r){var a={invalid:[],getCaret:function(){try{var e,n=0,r=t.get(0),o=document.selection,i=r.selectionStart;return o&&-1===navigator.appVersion.indexOf("MSIE 10")?((e=o.createRange()).moveStart("character",-a.val().length),n=e.text.length):(i||"0"===i)&&(n=i),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,r=t.get(0);r.setSelectionRange?r.setSelectionRange(e,e):((n=r.createTextRange()).collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",(function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",a.getCaret()),a.maskDigitPosMapOld=a.maskDigitPosMap})).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",a.behaviour).on("paste.mask drop.mask",(function(){setTimeout((function(){t.keydown().keyup()}),100)})).on("change.mask",(function(){t.data("changed",!0)})).on("blur.mask",(function(){s===a.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)})).on("blur.mask",(function(){s=a.val()})).on("focus.mask",(function(t){!0===r.selectOnFocus&&e(t.target).select()})).on("focusout.mask",(function(){r.clearIfNotMatch&&!o.test(a.val())&&a.val("")}))},getRegexMask:function(){for(var e,t,r,a,o,s,d=[],l=0;l<n.length;l++)(e=i.translation[n.charAt(l)])?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),r=e.optional,(a=e.recursive)?(d.push(n.charAt(l)),o={digit:n.charAt(l),pattern:t}):d.push(r||a?t+"?":t)):d.push(n.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return s=d.join(""),o&&(s=s.replace(new RegExp("("+o.digit+"(.*"+o.digit+")?)"),"($1)?").replace(new RegExp(o.digit,"g"),o.pattern)),new RegExp(s)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,r=t.is("input")?"val":"text";return arguments.length>0?(t[r]()!==e&&t[r](e),n=t):n=t[r](),n},calculateCaretPosition:function(e){var n=a.getMasked(),r=a.getCaret();if(e!==n){var o=t.data("mask-previus-caret-pos")||0,i=n.length,s=e.length,d=0,l=0,u=0,c=0,m=0;for(m=r;m<i&&a.maskDigitPosMap[m];m++)l++;for(m=r-1;m>=0&&a.maskDigitPosMap[m];m--)d++;for(m=r-1;m>=0;m--)a.maskDigitPosMap[m]&&u++;for(m=o-1;m>=0;m--)a.maskDigitPosMapOld[m]&&c++;if(r>s)r=10*i;else if(o>=r&&o!==s){if(!a.maskDigitPosMapOld[r]){var _=r;r-=c-u,r-=d,a.maskDigitPosMap[r]&&(r=_)}}else r>o&&(r+=u-c,r+=l)}return r},behaviour:function(n){n=n||window.event,a.invalid=[];var r=t.data("mask-keycode");if(-1===e.inArray(r,i.byPassKeys)){var o=a.getMasked(),s=a.getCaret(),d=t.data("mask-previus-value")||"";return setTimeout((function(){a.setCaret(a.calculateCaretPosition(d))}),e.jMaskGlobals.keyStrokeCompensation),a.val(o),a.setCaret(s),a.callbacks(n)}},getMasked:function(e,t){var o,s,d,l=[],u=void 0===t?a.val():t+"",c=0,m=n.length,_=0,h=u.length,f=1,p="push",g=-1,y=0,b=[];for(r.reverse?(p="unshift",f=-1,o=0,c=m-1,_=h-1,s=function(){return c>-1&&_>-1}):(o=m-1,s=function(){return c<m&&_<h});s();){var M=n.charAt(c),v=u.charAt(_),k=i.translation[M];k?(v.match(k.pattern)?(l[p](v),k.recursive&&(-1===g?g=c:c===o&&c!==g&&(c=g-f),o===g&&(c-=f)),c+=f):v===d?(y--,d=void 0):k.optional?(c+=f,_-=f):k.fallback?(l[p](k.fallback),c+=f,_-=f):a.invalid.push({p:_,v,e:k.pattern}),_+=f):(e||l[p](M),v===M?(b.push(_),_+=f):(d=M,b.push(_+y),y++),c+=f)}var A=n.charAt(o);m!==h+1||i.translation[A]||l.push(A);var x=l.join("");return a.mapMaskdigitPositions(x,b,h),x},mapMaskdigitPositions:function(e,t,n){var o=r.reverse?e.length-n:0;a.maskDigitPosMap={};for(var i=0;i<t.length;i++)a.maskDigitPosMap[t[i]+o]=1},callbacks:function(e){var o=a.val(),i=o!==s,d=[o,e,t,r],l=function(e,t,n){"function"==typeof r[e]&&t&&r[e].apply(this,n)};l("onChange",!0===i,d),l("onKeyPress",!0===i,d),l("onComplete",o.length===n.length,d),l("onInvalid",a.invalid.length>0,[o,e,t,a.invalid,r])}};t=e(t);var o,i=this,s=a.val();n="function"==typeof n?n(a.val(),void 0,t,r):n,i.mask=n,i.options=r,i.remove=function(){var e=a.getCaret();return i.options.placeholder&&t.removeAttr("placeholder"),t.data("mask-maxlength")&&t.removeAttr("maxlength"),a.destroyEvents(),a.val(i.getCleanVal()),a.setCaret(e),t},i.getCleanVal=function(){return a.getMasked(!0)},i.getMaskedVal=function(e){return a.getMasked(!1,e)},i.init=function(s){if(s=s||!1,r=r||{},i.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,i.byPassKeys=e.jMaskGlobals.byPassKeys,i.translation=e.extend({},e.jMaskGlobals.translation,r.translation),i=e.extend(!0,{},i,r),o=a.getRegexMask(),s)a.events(),a.val(a.getMasked());else{r.placeholder&&t.attr("placeholder",r.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var d=0,l=!0;d<n.length;d++){var u=i.translation[n.charAt(d)];if(u&&u.recursive){l=!1;break}}l&&t.attr("maxlength",n.length).data("mask-maxlength",!0),a.destroyEvents(),a.events();var c=a.getCaret();a.val(a.getMasked()),a.setCaret(c)}},i.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),a={},o="data-mask-",i=n.attr("data-mask");if(n.attr(o+"reverse")&&(a.reverse=!0),n.attr(o+"clearifnotmatch")&&(a.clearIfNotMatch=!0),"true"===n.attr(o+"selectonfocus")&&(a.selectOnFocus=!0),r(n,i,a))return n.data("mask",new t(this,i,a))},r=function(t,n,r){r=r||{};var a=e(t).data("mask"),o=JSON.stringify,i=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(i)),"object"!=typeof a||o(a.options)!==o(r)||a.mask!==n}catch(e){}};e.fn.mask=function(n,a){a=a||{};var o=this.selector,i=e.jMaskGlobals,s=i.watchInterval,d=a.watchInputs||i.watchInputs,l=function(){if(r(this,n,a))return e(this).data("mask",new t(this,n,a))};return e(this).each(l),o&&""!==o&&d&&(clearInterval(e.maskWatchers[o]),e.maskWatchers[o]=setInterval((function(){e(document).find(o).each(l)}),s)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each((function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")}))},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){((t=t||e.jMaskGlobals.maskElements)instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var a,o,i,s={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,keyStrokeCompensation:10,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&(a="input",i=document.createElement("div"),(o=(a="on"+a)in i)||(i.setAttribute(a,"return;"),o="function"==typeof i[a]),i=null,o),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},(s=e.jMaskGlobals=e.extend(!0,{},s,e.jMaskGlobals)).dataMask&&e.applyDataMask(),setInterval((function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()}),s.watchInterval)})?r.apply(t,a):r)||(e.exports=o)},9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,a){"use strict";var o=[],i=Object.getPrototypeOf,s=o.slice,d=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},l=o.push,u=o.indexOf,c={},m=c.toString,_=c.hasOwnProperty,h=_.toString,f=h.call(Object),p={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=r.document,M={type:!0,src:!0,nonce:!0,noModule:!0};function v(e,t,n){var r,a,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in M)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,a);n.head.appendChild(o).parentNode.removeChild(o)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[m.call(e)]||"object":typeof e}var A="3.6.0",x=function(e,t){return new x.fn.init(e,t)};function w(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:A,constructor:x,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},x.extend=x.fn.extend=function(){var e,t,n,r,a,o,i=arguments[0]||{},s=1,d=arguments.length,l=!1;for("boolean"==typeof i&&(l=i,i=arguments[s]||{},s++),"object"==typeof i||g(i)||(i={}),s===d&&(i=this,s--);s<d;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&i!==r&&(l&&r&&(x.isPlainObject(r)||(a=Array.isArray(r)))?(n=i[t],o=a&&!Array.isArray(n)?[]:a||x.isPlainObject(n)?n:{},a=!1,i[t]=x.extend(l,o,r)):void 0!==r&&(i[t]=r));return i},x.extend({expando:"jQuery"+(A+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==m.call(e)||(t=i(e))&&("function"!=typeof(n=_.call(t,"constructor")&&t.constructor)||h.call(n)!==f))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){v(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(w(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?x.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,o=e.length,i=!n;a<o;a++)!t(e[a],a)!==i&&r.push(e[a]);return r},map:function(e,t,n){var r,a,o=0,i=[];if(w(e))for(r=e.length;o<r;o++)null!=(a=t(e[o],o,n))&&i.push(a);else for(o in e)null!=(a=t(e[o],o,n))&&i.push(a);return d(i)},guid:1,support:p}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=o[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var L=function(e){var t,n,r,a,o,i,s,d,l,u,c,m,_,h,f,p,g,y,b,M="sizzle"+1*new Date,v=e.document,k=0,A=0,x=de(),w=de(),L=de(),Y=de(),C=function(e,t){return e===t&&(c=!0),0},D={}.hasOwnProperty,T=[],S=T.pop,B=T.push,j=T.push,H=T.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",E="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",W="\\[[\\x20\\t\\r\\n\\f]*("+E+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+E+"))|)"+F+"*\\]",z=":("+E+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",I=new RegExp(F+"+","g"),N=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),R=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),q=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),V=new RegExp(F+"|>"),U=new RegExp(z),J=new RegExp("^"+E+"$"),G={ID:new RegExp("^#("+E+")"),CLASS:new RegExp("^\\.("+E+")"),TAG:new RegExp("^("+E+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){m()},ie=Me((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(T=H.call(v.childNodes),v.childNodes),T[v.childNodes.length].nodeType}catch(e){j={apply:T.length?function(e,t){B.apply(e,H.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,a){var o,s,l,u,c,h,g,y=t&&t.ownerDocument,v=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==v&&9!==v&&11!==v)return r;if(!a&&(m(t),t=t||_,f)){if(11!==v&&(c=K.exec(e)))if(o=c[1]){if(9===v){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(y&&(l=y.getElementById(o))&&b(t,l)&&l.id===o)return r.push(l),r}else{if(c[2])return j.apply(r,t.getElementsByTagName(e)),r;if((o=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!Y[e+" "]&&(!p||!p.test(e))&&(1!==v||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===v&&(V.test(e)||q.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(re,ae):t.setAttribute("id",u=M)),s=(h=i(e)).length;s--;)h[s]=(u?"#"+u:":scope")+" "+be(h[s]);g=h.join(",")}try{return j.apply(r,y.querySelectorAll(g)),r}catch(t){Y(e,!0)}finally{u===M&&t.removeAttribute("id")}}}return d(e.replace(N,"$1"),t,r,a)}function de(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function le(e){return e[M]=!0,e}function ue(e){var t=_.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function me(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function _e(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return le((function(t){return t=+t,le((function(n,r){for(var a,o=e([],n.length,t),i=o.length;i--;)n[a=o[i]]&&(n[a]=!(r[a]=n[a]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},m=se.setDocument=function(e){var t,a,i=e?e.ownerDocument||e:v;return i!=_&&9===i.nodeType&&i.documentElement?(h=(_=i).documentElement,f=!o(_),v!=_&&(a=_.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",oe,!1):a.attachEvent&&a.attachEvent("onunload",oe)),n.scope=ue((function(e){return h.appendChild(e).appendChild(_.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(_.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=X.test(_.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=M,!_.getElementsByName||!_.getElementsByName(M).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n,r,a,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(a=t.getElementsByName(e),r=0;o=a[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[a++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&f)return t.getElementsByClassName(e)},g=[],p=[],(n.qsa=X.test(_.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+O+")"),e.querySelectorAll("[id~="+M+"-]").length||p.push("~="),(t=_.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll("\\\f"),p.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=_.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(n.matchesSelector=X.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",z)})),p=p.length&&new RegExp(p.join("|")),g=g.length&&new RegExp(g.join("|")),t=X.test(h.compareDocumentPosition),b=t||X.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return c=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==_||e.ownerDocument==v&&b(v,e)?-1:t==_||t.ownerDocument==v&&b(v,t)?1:u?P(u,e)-P(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,r=0,a=e.parentNode,o=t.parentNode,i=[e],s=[t];if(!a||!o)return e==_?-1:t==_?1:a?-1:o?1:u?P(u,e)-P(u,t):0;if(a===o)return me(e,t);for(n=e;n=n.parentNode;)i.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;i[r]===s[r];)r++;return r?me(i[r],s[r]):i[r]==v?-1:s[r]==v?1:0},_):_},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(m(e),n.matchesSelector&&f&&!Y[t+" "]&&(!g||!g.test(t))&&(!p||!p.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){Y(t,!0)}return se(t,_,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=_&&m(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=_&&m(e);var a=r.attrHandle[t.toLowerCase()],o=a&&D.call(r.attrHandle,t.toLowerCase())?a(e,t,!f):void 0;return void 0!==o?o:n.attributes||!f?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ae)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],a=0,o=0;if(c=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(C),c){for(;t=e[o++];)t===e[o]&&(a=r.push(o));for(;a--;)e.splice(r[a],1)}return u=null,e},a=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=i(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+F+"|$)"))&&x(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var a=se.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(I," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var o="nth"!==e.slice(0,3),i="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,d){var l,u,c,m,_,h,f=o!==i?"nextSibling":"previousSibling",p=t.parentNode,g=s&&t.nodeName.toLowerCase(),y=!d&&!s,b=!1;if(p){if(o){for(;f;){for(m=t;m=m[f];)if(s?m.nodeName.toLowerCase()===g:1===m.nodeType)return!1;h=f="only"===e&&!h&&"nextSibling"}return!0}if(h=[i?p.firstChild:p.lastChild],i&&y){for(b=(_=(l=(u=(c=(m=p)[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===k&&l[1])&&l[2],m=_&&p.childNodes[_];m=++_&&m&&m[f]||(b=_=0)||h.pop();)if(1===m.nodeType&&++b&&m===t){u[e]=[k,_,b];break}}else if(y&&(b=_=(l=(u=(c=(m=t)[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]||[])[0]===k&&l[1]),!1===b)for(;(m=++_&&m&&m[f]||(b=_=0)||h.pop())&&((s?m.nodeName.toLowerCase()!==g:1!==m.nodeType)||!++b||(y&&((u=(c=m[M]||(m[M]={}))[m.uniqueID]||(c[m.uniqueID]={}))[e]=[k,b]),m!==t)););return(b-=a)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[M]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var r,o=a(e,t),i=o.length;i--;)e[r=P(e,o[i])]=!(n[r]=o[i])})):function(e){return a(e,0,n)}):a}},pseudos:{not:le((function(e){var t=[],n=[],r=s(e.replace(N,"$1"));return r[M]?le((function(e,t,n,a){for(var o,i=r(e,null,a,[]),s=e.length;s--;)(o=i[s])&&(e[s]=!(t[s]=o))})):function(e,a,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return se(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||a(t)).indexOf(e)>-1}})),lang:le((function(e){return J.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=f?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===_.activeElement&&(!_.hasFocus||_.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,t){return[t-1]})),eq:pe((function(e,t,n){return[n<0?n+t:n]})),even:pe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:pe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:pe((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:pe((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=_e(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function Me(e,t,n){var r=t.dir,a=t.next,o=a||r,i=n&&"parentNode"===o,s=A++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,a);return!1}:function(t,n,d){var l,u,c,m=[k,s];if(d){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,d))return!0}else for(;t=t[r];)if(1===t.nodeType||i)if(u=(c=t[M]||(t[M]={}))[t.uniqueID]||(c[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=u[o])&&l[0]===k&&l[1]===s)return m[2]=l[2];if(u[o]=m,m[2]=e(t,n,d))return!0}return!1}}function ve(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function ke(e,t,n,r,a){for(var o,i=[],s=0,d=e.length,l=null!=t;s<d;s++)(o=e[s])&&(n&&!n(o,r,a)||(i.push(o),l&&t.push(s)));return i}function Ae(e,t,n,r,a,o){return r&&!r[M]&&(r=Ae(r)),a&&!a[M]&&(a=Ae(a,o)),le((function(o,i,s,d){var l,u,c,m=[],_=[],h=i.length,f=o||function(e,t,n){for(var r=0,a=t.length;r<a;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),p=!e||!o&&t?f:ke(f,m,e,s,d),g=n?a||(o?e:h||r)?[]:i:p;if(n&&n(p,g,s,d),r)for(l=ke(g,_),r(l,[],s,d),u=l.length;u--;)(c=l[u])&&(g[_[u]]=!(p[_[u]]=c));if(o){if(a||e){if(a){for(l=[],u=g.length;u--;)(c=g[u])&&l.push(p[u]=c);a(null,g=[],l,d)}for(u=g.length;u--;)(c=g[u])&&(l=a?P(o,c):m[u])>-1&&(o[l]=!(i[l]=c))}}else g=ke(g===i?g.splice(h,g.length):g),a?a(null,i,g,d):j.apply(i,g)}))}function xe(e){for(var t,n,a,o=e.length,i=r.relative[e[0].type],s=i||r.relative[" "],d=i?1:0,u=Me((function(e){return e===t}),s,!0),c=Me((function(e){return P(t,e)>-1}),s,!0),m=[function(e,n,r){var a=!i&&(r||n!==l)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,a}];d<o;d++)if(n=r.relative[e[d].type])m=[Me(ve(m),n)];else{if((n=r.filter[e[d].type].apply(null,e[d].matches))[M]){for(a=++d;a<o&&!r.relative[e[a].type];a++);return Ae(d>1&&ve(m),d>1&&be(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(N,"$1"),n,d<a&&xe(e.slice(d,a)),a<o&&xe(e=e.slice(a)),a<o&&be(e))}m.push(n)}return ve(m)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,i=se.tokenize=function(e,t){var n,a,o,i,s,d,l,u=w[e+" "];if(u)return t?0:u.slice(0);for(s=e,d=[],l=r.preFilter;s;){for(i in n&&!(a=R.exec(s))||(a&&(s=s.slice(a[0].length)||s),d.push(o=[])),n=!1,(a=q.exec(s))&&(n=a.shift(),o.push({value:n,type:a[0].replace(N," ")}),s=s.slice(n.length)),r.filter)!(a=G[i].exec(s))||l[i]&&!(a=l[i](a))||(n=a.shift(),o.push({value:n,type:i,matches:a}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):w(e,d).slice(0)},s=se.compile=function(e,t){var n,a=[],o=[],s=L[e+" "];if(!s){for(t||(t=i(e)),n=t.length;n--;)(s=xe(t[n]))[M]?a.push(s):o.push(s);(s=L(e,function(e,t){var n=t.length>0,a=e.length>0,o=function(o,i,s,d,u){var c,h,p,g=0,y="0",b=o&&[],M=[],v=l,A=o||a&&r.find.TAG("*",u),x=k+=null==v?1:Math.random()||.1,w=A.length;for(u&&(l=i==_||i||u);y!==w&&null!=(c=A[y]);y++){if(a&&c){for(h=0,i||c.ownerDocument==_||(m(c),s=!f);p=e[h++];)if(p(c,i||_,s)){d.push(c);break}u&&(k=x)}n&&((c=!p&&c)&&g--,o&&b.push(c))}if(g+=y,n&&y!==g){for(h=0;p=t[h++];)p(b,M,i,s);if(o){if(g>0)for(;y--;)b[y]||M[y]||(M[y]=S.call(d));M=ke(M)}j.apply(d,M),u&&!o&&M.length>0&&g+t.length>1&&se.uniqueSort(d)}return u&&(k=x,l=v),b};return n?le(o):o}(o,a))).selector=e}return s},d=se.select=function(e,t,n,a){var o,d,l,u,c,m="function"==typeof e&&e,_=!a&&i(e=m.selector||e);if(n=n||[],1===_.length){if((d=_[0]=_[0].slice(0)).length>2&&"ID"===(l=d[0]).type&&9===t.nodeType&&f&&r.relative[d[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;m&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(o=G.needsContext.test(e)?0:d.length;o--&&(l=d[o],!r.relative[u=l.type]);)if((c=r.find[u])&&(a=c(l.matches[0].replace(te,ne),ee.test(d[0].type)&&ge(t.parentNode)||t))){if(d.splice(o,1),!(e=a.length&&be(d)))return j.apply(n,a),n;break}}return(m||s(e,_))(a,t,!f,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=M.split("").sort(C).join("")===M,n.detectDuplicates=!!c,m(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(_.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||ce(O,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);x.find=L,x.expr=L.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=L.uniqueSort,x.text=L.getText,x.isXMLDoc=L.isXML,x.contains=L.contains,x.escapeSelector=L.escape;var Y=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&x(e).is(n))break;r.push(e)}return r},C=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=x.expr.match.needsContext;function T(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var S=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function B(e,t,n){return g(t)?x.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return u.call(t,e)>-1!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<r;t++)if(x.contains(a[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)x.find(e,a[t],n);return r>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(B(this,e||[],!1))},not:function(e){return this.pushStack(B(this,e||[],!0))},is:function(e){return!!B(this,"string"==typeof e&&D.test(e)?x(e):e||[],!1).length}});var j,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||j,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:H.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),S.test(r[1])&&x.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=b.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,j=x(b);var P=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function F(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,a=this.length,o=[],i="string"!=typeof e&&x(e);if(!D.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(i?i.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?x.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(x(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Y(e,"parentNode")},parentsUntil:function(e,t,n){return Y(e,"parentNode",n)},next:function(e){return F(e,"nextSibling")},prev:function(e){return F(e,"previousSibling")},nextAll:function(e){return Y(e,"nextSibling")},prevAll:function(e){return Y(e,"previousSibling")},nextUntil:function(e,t,n){return Y(e,"nextSibling",n)},prevUntil:function(e,t,n){return Y(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(T(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,r){var a=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=x.filter(r,a)),this.length>1&&(O[e]||x.uniqueSort(a),P.test(e)&&a.reverse()),this.pushStack(a)}}));var E=/[^\x20\t\r\n\f]+/g;function W(e){return e}function z(e){throw e}function I(e,t,n,r){var a;try{e&&g(a=e.promise)?a.call(e).done(t).fail(n):e&&g(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(E)||[],(function(e,n){t[n]=!0})),t}(e):x.extend({},e);var t,n,r,a,o=[],i=[],s=-1,d=function(){for(a=a||e.once,r=t=!0;i.length;s=-1)for(n=i.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,a&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,i.push(n)),function t(n){x.each(n,(function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==k(r)&&t(r)}))}(arguments),n&&!t&&d()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;(n=x.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?x.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return a=i=[],o=n="",this},disabled:function(){return!o},lock:function(){return a=i=[],n||t||(o=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],i.push(n),t||d()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],n="pending",a={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(n){x.each(t,(function(t,r){var a=g(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=a&&a.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,a){var o=0;function i(e,t,n,a){return function(){var s=this,d=arguments,l=function(){var r,l;if(!(e<o)){if((r=n.apply(s,d))===t.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,g(l)?a?l.call(r,i(o,t,W,a),i(o,t,z,a)):(o++,l.call(r,i(o,t,W,a),i(o,t,z,a),i(o,t,W,t.notifyWith))):(n!==W&&(s=void 0,d=[r]),(a||t.resolveWith)(s,d))}},u=a?l:function(){try{l()}catch(r){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(r,u.stackTrace),e+1>=o&&(n!==z&&(s=void 0,d=[r]),t.rejectWith(s,d))}};e?u():(x.Deferred.getStackHook&&(u.stackTrace=x.Deferred.getStackHook()),r.setTimeout(u))}}return x.Deferred((function(r){t[0][3].add(i(0,r,g(a)?a:W,r.notifyWith)),t[1][3].add(i(0,r,g(e)?e:W)),t[2][3].add(i(0,r,g(n)?n:z))})).promise()},promise:function(e){return null!=e?x.extend(e,a):a}},o={};return x.each(t,(function(e,r){var i=r[2],s=r[5];a[r[1]]=i.add,s&&i.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),i.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=i.fireWith})),a.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),a=s.call(arguments),o=x.Deferred(),i=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,a)}};if(t<=1&&(I(e,o.done(i(n)).resolve,o.reject,!t),"pending"===o.state()||g(a[n]&&a[n].then)))return o.then();for(;n--;)I(a[n],i(n),o.reject);return o.promise()}});var N=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&N.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){r.setTimeout((function(){throw e}))};var R=x.Deferred();function q(){b.removeEventListener("DOMContentLoaded",q),r.removeEventListener("load",q),x.ready()}x.fn.ready=function(e){return R.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||R.resolveWith(b,[x]))}}),x.ready.then=R.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(x.ready):(b.addEventListener("DOMContentLoaded",q),r.addEventListener("load",q));var V=function(e,t,n,r,a,o,i){var s=0,d=e.length,l=null==n;if("object"===k(n))for(s in a=!0,n)V(e,t,s,n[s],!0,o,i);else if(void 0!==r&&(a=!0,g(r)||(i=!0),l&&(i?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;s<d;s++)t(e[s],n,i?r:r.call(e[s],s,t(e[s],n)));return a?e:l?t.call(e):d?t(e[0],n):o},U=/^-ms-/,J=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function Z(e){return e.replace(U,"ms-").replace(J,G)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=x.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[Z(t)]=n;else for(r in t)a[Z(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Z(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Z):(t=Z(t))in r?[t]:t.match(E)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||x.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var X=new Q,K=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return K.hasData(e)||X.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,a,o=this[0],i=o&&o.attributes;if(void 0===e){if(this.length&&(a=K.get(o),1===o.nodeType&&!X.get(o,"hasDataAttrs"))){for(n=i.length;n--;)i[n]&&0===(r=i[n].name).indexOf("data-")&&(r=Z(r.slice(5)),ne(o,r,a[r]));X.set(o,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each((function(){K.set(this,e)})):V(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=X.get(e,t),n&&(!r||Array.isArray(n)?r=X.access(e,t,x.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,a=n.shift(),o=x._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete o.stop,a.call(e,(function(){x.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:x.Callbacks("once memory").add((function(){X.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=x.Deferred(),o=this,i=this.length,s=function(){--r||a.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";i--;)(n=X.get(o[i],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ie=b.documentElement,se=function(e){return x.contains(e.ownerDocument,e)},de={composed:!0};ie.getRootNode&&(se=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(de)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===x.css(e,"display")};function ue(e,t,n,r){var a,o,i=20,s=r?function(){return r.cur()}:function(){return x.css(e,t,"")},d=s(),l=n&&n[3]||(x.cssNumber[t]?"":"px"),u=e.nodeType&&(x.cssNumber[t]||"px"!==l&&+d)&&ae.exec(x.css(e,t));if(u&&u[3]!==l){for(d/=2,l=l||u[3],u=+d||1;i--;)x.style(e,t,u+l),(1-o)*(1-(o=s()/d||.5))<=0&&(i=0),u/=o;u*=2,x.style(e,t,u+l),n=n||[]}return n&&(u=+u||+d||0,a=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=u,r.end=a)),a}var ce={};function me(e){var t,n=e.ownerDocument,r=e.nodeName,a=ce[r];return a||(t=n.body.appendChild(n.createElement(r)),a=x.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),ce[r]=a,a)}function _e(e,t){for(var n,r,a=[],o=0,i=e.length;o<i;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(a[o]=X.get(r,"display")||null,a[o]||(r.style.display="")),""===r.style.display&&le(r)&&(a[o]=me(r))):"none"!==n&&(a[o]="none",X.set(r,"display",n)));for(o=0;o<i;o++)null!=a[o]&&(e[o].style.display=a[o]);return e}x.fn.extend({show:function(){return _e(this,!0)},hide:function(){return _e(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?x(this).show():x(this).hide()}))}});var he,fe,pe=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(fe=b.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),he.appendChild(fe),p.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",p.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",p.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&T(e,t)?x.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,p.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var ke=/<|&#?\w+;/;function Ae(e,t,n,r,a){for(var o,i,s,d,l,u,c=t.createDocumentFragment(),m=[],_=0,h=e.length;_<h;_++)if((o=e[_])||0===o)if("object"===k(o))x.merge(m,o.nodeType?[o]:o);else if(ke.test(o)){for(i=i||c.appendChild(t.createElement("div")),s=(ge.exec(o)||["",""])[1].toLowerCase(),d=be[s]||be._default,i.innerHTML=d[1]+x.htmlPrefilter(o)+d[2],u=d[0];u--;)i=i.lastChild;x.merge(m,i.childNodes),(i=c.firstChild).textContent=""}else m.push(t.createTextNode(o));for(c.textContent="",_=0;o=m[_++];)if(r&&x.inArray(o,r)>-1)a&&a.push(o);else if(l=se(o),i=Me(c.appendChild(o),"script"),l&&ve(i),n)for(u=0;o=i[u++];)ye.test(o.type||"")&&n.push(o);return c}var xe=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function Le(){return!1}function Ye(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Ce(e,t,n,r,a,o){var i,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ce(e,s,n,r,t[s],o);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=Le;else if(!a)return e;return 1===o&&(i=a,(a=function(e){return x().off(e),i.apply(this,arguments)}).guid=i.guid||(i.guid=x.guid++)),e.each((function(){x.event.add(this,t,a,r,n)}))}function De(e,t,n){n?(X.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var r,a,o=X.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),X.set(this,t,o),r=n(this,t),this[t](),o!==(a=X.get(this,t))||r?X.set(this,t,!1):a={},o!==a)return e.stopImmediatePropagation(),e.preventDefault(),a&&a.value}else o.length&&(X.set(this,t,{value:x.event.trigger(x.extend(o[0],x.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&x.event.add(e,t,we)}x.event={global:{},add:function(e,t,n,r,a){var o,i,s,d,l,u,c,m,_,h,f,p=X.get(e);if($(e))for(n.handler&&(n=(o=n).handler,a=o.selector),a&&x.find.matchesSelector(ie,a),n.guid||(n.guid=x.guid++),(d=p.events)||(d=p.events=Object.create(null)),(i=p.handle)||(i=p.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(E)||[""]).length;l--;)_=f=(s=xe.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),_&&(c=x.event.special[_]||{},_=(a?c.delegateType:c.bindType)||_,c=x.event.special[_]||{},u=x.extend({type:_,origType:f,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&x.expr.match.needsContext.test(a),namespace:h.join(".")},o),(m=d[_])||((m=d[_]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,r,h,i)||e.addEventListener&&e.addEventListener(_,i)),c.add&&(c.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),a?m.splice(m.delegateCount++,0,u):m.push(u),x.event.global[_]=!0)},remove:function(e,t,n,r,a){var o,i,s,d,l,u,c,m,_,h,f,p=X.hasData(e)&&X.get(e);if(p&&(d=p.events)){for(l=(t=(t||"").match(E)||[""]).length;l--;)if(_=f=(s=xe.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),_){for(c=x.event.special[_]||{},m=d[_=(r?c.delegateType:c.bindType)||_]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=o=m.length;o--;)u=m[o],!a&&f!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(m.splice(o,1),u.selector&&m.delegateCount--,c.remove&&c.remove.call(e,u));i&&!m.length&&(c.teardown&&!1!==c.teardown.call(e,h,p.handle)||x.removeEvent(e,_,p.handle),delete d[_])}else for(_ in d)x.event.remove(e,_+t[l],n,r,!0);x.isEmptyObject(d)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,o,i,s=new Array(arguments.length),d=x.event.fix(e),l=(X.get(this,"events")||Object.create(null))[d.type]||[],u=x.event.special[d.type]||{};for(s[0]=d,t=1;t<arguments.length;t++)s[t]=arguments[t];if(d.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,d)){for(i=x.event.handlers.call(this,d,l),t=0;(a=i[t++])&&!d.isPropagationStopped();)for(d.currentTarget=a.elem,n=0;(o=a.handlers[n++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==o.namespace&&!d.rnamespace.test(o.namespace)||(d.handleObj=o,d.data=o.data,void 0!==(r=((x.event.special[o.origType]||{}).handle||o.handler).apply(a.elem,s))&&!1===(d.result=r)&&(d.preventDefault(),d.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,d),d.result}},handlers:function(e,t){var n,r,a,o,i,s=[],d=t.delegateCount,l=e.target;if(d&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],i={},n=0;n<d;n++)void 0===i[a=(r=t[n]).selector+" "]&&(i[a]=r.needsContext?x(a,this).index(l)>-1:x.find(a,this,null,[l]).length),i[a]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,d<t.length&&s.push({elem:l,handlers:t.slice(d)}),s},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&T(t,"input")&&De(t,"click",we),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&T(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&T(t,"input")&&X.get(t,"click")||T(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:Le,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Le,isPropagationStopped:Le,isImmediatePropagationStopped:Le,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return De(this,e,Ye),!1},trigger:function(){return De(this,e),!0},_default:function(){return!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,a=e.relatedTarget,o=e.handleObj;return a&&(a===r||x.contains(r,a))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,r){return Ce(this,e,t,n,r)},one:function(e,t,n,r){return Ce(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Le),this.each((function(){x.event.remove(this,e,n,t)}))}});var Te=/<script|<style|<link/i,Se=/checked\s*(?:[^=]|=\s*.checked.)/i,Be=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return T(e,"table")&&T(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var n,r,a,o,i,s;if(1===t.nodeType){if(X.hasData(e)&&(s=X.get(e).events))for(a in X.remove(t,"handle events"),s)for(n=0,r=s[a].length;n<r;n++)x.event.add(t,a,s[a][n]);K.hasData(e)&&(o=K.access(e),i=x.extend({},o),K.set(t,i))}}function Fe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ee(e,t,n,r){t=d(t);var a,o,i,s,l,u,c=0,m=e.length,_=m-1,h=t[0],f=g(h);if(f||m>1&&"string"==typeof h&&!p.checkClone&&Se.test(h))return e.each((function(a){var o=e.eq(a);f&&(t[0]=h.call(this,a,o.html())),Ee(o,t,n,r)}));if(m&&(o=(a=Ae(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=o),o||r)){for(s=(i=x.map(Me(a,"script"),He)).length;c<m;c++)l=a,c!==_&&(l=x.clone(l,!0,!0),s&&x.merge(i,Me(l,"script"))),n.call(e[c],l,c);if(s)for(u=i[i.length-1].ownerDocument,x.map(i,Pe),c=0;c<s;c++)l=i[c],ye.test(l.type||"")&&!X.access(l,"globalEval")&&x.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?x._evalUrl&&!l.noModule&&x._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):v(l.textContent.replace(Be,""),l,u))}return e}function We(e,t,n){for(var r,a=t?x.filter(t,e):e,o=0;null!=(r=a[o]);o++)n||1!==r.nodeType||x.cleanData(Me(r)),r.parentNode&&(n&&se(r)&&ve(Me(r,"script")),r.parentNode.removeChild(r));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,a,o,i,s=e.cloneNode(!0),d=se(e);if(!(p.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(i=Me(s),r=0,a=(o=Me(e)).length;r<a;r++)Fe(o[r],i[r]);if(t)if(n)for(o=o||Me(e),i=i||Me(s),r=0,a=o.length;r<a;r++)Oe(o[r],i[r]);else Oe(e,s);return(i=Me(s,"script")).length>0&&ve(i,!d&&Me(e,"script")),s},cleanData:function(e){for(var t,n,r,a=x.event.special,o=0;void 0!==(n=e[o]);o++)if($(n)){if(t=n[X.expando]){if(t.events)for(r in t.events)a[r]?x.event.remove(n,r):x.removeEvent(n,r,t.handle);n[X.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),x.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return V(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ee(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Ee(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ee(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ee(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(Me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return V(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Te.test(e)&&!be[(ge.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(Me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ee(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(Me(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,r=[],a=x(e),o=a.length-1,i=0;i<=o;i++)n=i===o?this:this.clone(!0),x(a[i])[t](n),l.apply(r,n.get());return this.pushStack(r)}}));var ze=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Ne=function(e,t,n){var r,a,o={};for(a in t)o[a]=e.style[a],e.style[a]=t[a];for(a in r=n.call(e),t)e.style[a]=o[a];return r},Re=new RegExp(oe.join("|"),"i");function qe(e,t,n){var r,a,o,i,s=e.style;return(n=n||Ie(e))&&(""!==(i=n.getPropertyValue(t)||n[t])||se(e)||(i=x.style(e,t)),!p.pixelBoxStyles()&&ze.test(i)&&Re.test(t)&&(r=s.width,a=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=i,i=n.width,s.width=r,s.minWidth=a,s.maxWidth=o)),void 0!==i?i+"":i}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(l).appendChild(u);var e=r.getComputedStyle(u);n="1%"!==e.top,d=12===t(e.marginLeft),u.style.right="60%",i=36===t(e.right),a=36===t(e.width),u.style.position="absolute",o=12===t(u.offsetWidth/3),ie.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var n,a,o,i,s,d,l=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",p.clearCloneStyle="content-box"===u.style.backgroundClip,x.extend(p,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),i},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),d},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,a;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ie.appendChild(e).appendChild(t).appendChild(n),a=r.getComputedStyle(t),s=parseInt(a.height,10)+parseInt(a.borderTopWidth,10)+parseInt(a.borderBottomWidth,10)===t.offsetHeight,ie.removeChild(e)),s}}))}();var Ue=["Webkit","Moz","ms"],Je=b.createElement("div").style,Ge={};function Ze(e){return x.cssProps[e]||Ge[e]||(e in Je?e:Ge[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Je)return e}(e)||e)}var $e=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Xe={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,a,o){var i="width"===t?1:0,s=0,d=0;if(n===(r?"border":"content"))return 0;for(;i<4;i+=2)"margin"===n&&(d+=x.css(e,n+oe[i],!0,a)),r?("content"===n&&(d-=x.css(e,"padding"+oe[i],!0,a)),"margin"!==n&&(d-=x.css(e,"border"+oe[i]+"Width",!0,a))):(d+=x.css(e,"padding"+oe[i],!0,a),"padding"!==n?d+=x.css(e,"border"+oe[i]+"Width",!0,a):s+=x.css(e,"border"+oe[i]+"Width",!0,a));return!r&&o>=0&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-d-s-.5))||0),d}function nt(e,t,n){var r=Ie(e),a=(!p.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,r),o=a,i=qe(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(i)){if(!n)return i;i="auto"}return(!p.boxSizingReliable()&&a||!p.reliableTrDimensions()&&T(e,"tr")||"auto"===i||!parseFloat(i)&&"inline"===x.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===x.css(e,"boxSizing",!1,r),(o=s in e)&&(i=e[s])),(i=parseFloat(i)||0)+tt(e,t,n||(a?"border":"content"),o,r,i)+"px"}function rt(e,t,n,r,a){return new rt.prototype.init(e,t,n,r,a)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,o,i,s=Z(t),d=Qe.test(t),l=e.style;if(d||(t=Ze(s)),i=x.cssHooks[t]||x.cssHooks[s],void 0===n)return i&&"get"in i&&void 0!==(a=i.get(e,!1,r))?a:l[t];"string"==(o=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=ue(e,t,a),o="number"),null!=n&&n==n&&("number"!==o||d||(n+=a&&a[3]||(x.cssNumber[s]?"":"px")),p.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),i&&"set"in i&&void 0===(n=i.set(e,n,r))||(d?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var a,o,i,s=Z(t);return Qe.test(t)||(t=Ze(s)),(i=x.cssHooks[t]||x.cssHooks[s])&&"get"in i&&(a=i.get(e,!0,n)),void 0===a&&(a=qe(e,t,r)),"normal"===a&&t in Ke&&(a=Ke[t]),""===n||n?(o=parseFloat(a),!0===n||isFinite(o)?o||0:a):a}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,r){if(n)return!$e.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):Ne(e,Xe,(function(){return nt(e,t,r)}))},set:function(e,n,r){var a,o=Ie(e),i=!p.scrollboxSize()&&"absolute"===o.position,s=(i||r)&&"border-box"===x.css(e,"boxSizing",!1,o),d=r?tt(e,t,r,s,o):0;return s&&i&&(d-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),d&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),et(0,n,d)}}})),x.cssHooks.marginLeft=Ve(p.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ne(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var r=0,a={},o="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+oe[r]+t]=o[r]||o[r-2]||o[0];return a}},"margin"!==e&&(x.cssHooks[e+t].set=et)})),x.fn.extend({css:function(e,t){return V(this,(function(e,t,n){var r,a,o={},i=0;if(Array.isArray(t)){for(r=Ie(e),a=t.length;i<a;i++)o[t[i]]=x.css(e,t[i],!1,r);return o}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,a,o){this.elem=e,this.prop=n,this.easing=a||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Ze(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=rt.prototype.init,x.fx.step={};var at,ot,it=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function dt(){ot&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(dt):r.setTimeout(dt,x.fx.interval),x.fx.tick())}function lt(){return r.setTimeout((function(){at=void 0})),at=Date.now()}function ut(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=oe[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function ct(e,t,n){for(var r,a=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),o=0,i=a.length;o<i;o++)if(r=a[o].call(n,t,e))return r}function mt(e,t,n){var r,a,o=0,i=mt.prefilters.length,s=x.Deferred().always((function(){delete d.elem})),d=function(){if(a)return!1;for(var t=at||lt(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),o=0,i=l.tweens.length;o<i;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&i?n:(i||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),u=l.props;for(function(e,t){var n,r,a,o,i;for(n in e)if(a=t[r=Z(n)],o=e[n],Array.isArray(o)&&(a=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(i=x.cssHooks[r])&&"expand"in i)for(n in o=i.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=a);else t[r]=a}(u,l.opts.specialEasing);o<i;o++)if(r=mt.prefilters[o].call(l,e,u,l.opts))return g(r.stop)&&(x._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return x.map(u,ct,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),x.fx.timer(x.extend(d,{elem:e,anim:l,queue:l.opts.queue})),l}x.Animation=x.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(E);for(var n,r=0,a=e.length;r<a;r++)n=e[r],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,o,i,s,d,l,u,c="width"in t||"height"in t,m=this,_={},h=e.style,f=e.nodeType&&le(e),p=X.get(e,"fxshow");for(r in n.queue||(null==(i=x._queueHooks(e,"fx")).unqueued&&(i.unqueued=0,s=i.empty.fire,i.empty.fire=function(){i.unqueued||s()}),i.unqueued++,m.always((function(){m.always((function(){i.unqueued--,x.queue(e,"fx").length||i.empty.fire()}))}))),t)if(a=t[r],it.test(a)){if(delete t[r],o=o||"toggle"===a,a===(f?"hide":"show")){if("show"!==a||!p||void 0===p[r])continue;f=!0}_[r]=p&&p[r]||x.style(e,r)}if((d=!x.isEmptyObject(t))||!x.isEmptyObject(_))for(r in c&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=p&&p.display)&&(l=X.get(e,"display")),"none"===(u=x.css(e,"display"))&&(l?u=l:(_e([e],!0),l=e.style.display||l,u=x.css(e,"display"),_e([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===x.css(e,"float")&&(d||(m.done((function(){h.display=l})),null==l&&(u=h.display,l="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",m.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),d=!1,_)d||(p?"hidden"in p&&(f=p.hidden):p=X.access(e,"fxshow",{display:l}),o&&(p.hidden=!f),f&&_e([e],!0),m.done((function(){for(r in f||_e([e]),X.remove(e,"fxshow"),_)x.style(e,r,_[r])}))),d=ct(f?p[r]:0,r,m),r in p||(p[r]=d.start,f&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return x.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in x.fx.speeds?r.duration=x.fx.speeds[r.duration]:r.duration=x.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=x.isEmptyObject(e),o=x.speed(t,n,r),i=function(){var t=mt(this,x.extend({},e),o);(a||X.get(this,"finish"))&&t.stop(!0)};return i.finish=i,a||!1===o.queue?this.each(i):this.queue(o.queue,i)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,a=null!=e&&e+"queueHooks",o=x.timers,i=X.get(this);if(a)i[a]&&i[a].stop&&r(i[a]);else for(a in i)i[a]&&i[a].stop&&st.test(a)&&r(i[a]);for(a=o.length;a--;)o[a].elem!==this||null!=e&&o[a].queue!==e||(o[a].anim.stop(n),t=!1,o.splice(a,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=X.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],o=x.timers,i=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<i;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,a)}})),x.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),at=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){ot||(ot=!0,dt())},x.fx.stop=function(){ot=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var a=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(a)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",p.checkOn=""!==e.value,p.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",p.radioValue="t"===e.value}();var _t,ht=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return V(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var r,a,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?x.prop(e,t,n):(1===o&&x.isXMLDoc(e)||(a=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?_t:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=x.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!p.radioValue&&"radio"===t&&T(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(E);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),_t={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||x.find.attr;ht[t]=function(e,t,r){var a,o,i=t.toLowerCase();return r||(o=ht[i],ht[i]=a,a=null!=n(e,t,r)?i:null,ht[i]=o),a}}));var ft=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function gt(e){return(e.match(E)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(E)||[]}x.fn.extend({prop:function(e,t){return V(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var r,a,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&x.isXMLDoc(e)||(t=x.propFix[t]||t,a=x.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):ft.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),p.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,r,a,o,i,s,d=0;if(g(e))return this.each((function(t){x(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[d++];)if(a=yt(n),r=1===n.nodeType&&" "+gt(a)+" "){for(i=0;o=t[i++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");a!==(s=gt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,a,o,i,s,d=0;if(g(e))return this.each((function(t){x(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[d++];)if(a=yt(n),r=1===n.nodeType&&" "+gt(a)+" "){for(i=0;o=t[i++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");a!==(s=gt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){x(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,a,o,i;if(r)for(a=0,o=x(this),i=bt(e);t=i[a++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+gt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Mt=/\r/g;x.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=g(e),this.each((function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,x(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=x.map(a,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))}))):a?(t=x.valHooks[a.type]||x.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(Mt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:gt(x.text(e))}},select:{get:function(e){var t,n,r,a=e.options,o=e.selectedIndex,i="select-one"===e.type,s=i?null:[],d=i?o+1:a.length;for(r=o<0?d:i?o:0;r<d;r++)if(((n=a[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(t=x(n).val(),i)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,o=x.makeArray(t),i=a.length;i--;)((r=a[i]).selected=x.inArray(x.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},p.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),p.focusin="onfocusin"in r;var vt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,n,a){var o,i,s,d,l,u,c,m,h=[n||b],f=_.call(e,"type")?e.type:e,p=_.call(e,"namespace")?e.namespace.split("."):[];if(i=m=s=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!vt.test(f+x.event.triggered)&&(f.indexOf(".")>-1&&(p=f.split("."),f=p.shift(),p.sort()),l=f.indexOf(":")<0&&"on"+f,(e=e[x.expando]?e:new x.Event(f,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:x.makeArray(t,[e]),c=x.event.special[f]||{},a||!c.trigger||!1!==c.trigger.apply(n,t))){if(!a&&!c.noBubble&&!y(n)){for(d=c.delegateType||f,vt.test(d+f)||(i=i.parentNode);i;i=i.parentNode)h.push(i),s=i;s===(n.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||r)}for(o=0;(i=h[o++])&&!e.isPropagationStopped();)m=i,e.type=o>1?d:c.bindType||f,(u=(X.get(i,"events")||Object.create(null))[e.type]&&X.get(i,"handle"))&&u.apply(i,t),(u=l&&i[l])&&u.apply&&$(i)&&(e.result=u.apply(i,t),!1===e.result&&e.preventDefault());return e.type=f,a||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(h.pop(),t)||!$(n)||l&&g(n[f])&&!y(n)&&((s=n[l])&&(n[l]=null),x.event.triggered=f,e.isPropagationStopped()&&m.addEventListener(f,kt),n[f](),e.isPropagationStopped()&&m.removeEventListener(f,kt),x.event.triggered=void 0,s&&(n[l]=s)),e.result}},simulate:function(e,t,n){var r=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(r,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),p.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,a=X.access(r,t);a||r.addEventListener(e,n,!0),X.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,a=X.access(r,t)-1;a?X.access(r,t,a):(r.removeEventListener(e,n,!0),X.remove(r,t))}}}));var At=r.location,xt={guid:Date.now()},wt=/\?/;x.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||x.error("Invalid XML: "+(n?x.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Lt=/\[\]$/,Yt=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Tt(e,t,n,r){var a;if(Array.isArray(t))x.each(t,(function(t,a){n||Lt.test(e)?r(e,a):Tt(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)}));else if(n||"object"!==k(t))r(e,t);else for(a in t)Tt(e+"["+a+"]",t[a],n,r)}x.param=function(e,t){var n,r=[],a=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){a(this.name,this.value)}));else for(n in e)Tt(n,e[n],t,a);return r.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Dt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!pe.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(Yt,"\r\n")}})):{name:t.name,value:n.replace(Yt,"\r\n")}})).get()}});var St=/%20/g,Bt=/#.*$/,jt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Ot=/^\/\//,Ft={},Et={},Wt="*/".concat("*"),zt=b.createElement("a");function It(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,o=t.toLowerCase().match(E)||[];if(g(n))for(;r=o[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Nt(e,t,n,r){var a={},o=e===Et;function i(s){var d;return a[s]=!0,x.each(e[s]||[],(function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||a[l]?o?!(d=l):void 0:(t.dataTypes.unshift(l),i(l),!1)})),d}return i(t.dataTypes[0])||!a["*"]&&i("*")}function Rt(e,t){var n,r,a=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}zt.href=At.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Rt(Rt(e,x.ajaxSettings),t):Rt(x.ajaxSettings,e)},ajaxPrefilter:It(Ft),ajaxTransport:It(Et),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,a,o,i,s,d,l,u,c,m,_=x.ajaxSetup({},t),h=_.context||_,f=_.context&&(h.nodeType||h.jquery)?x(h):x.event,p=x.Deferred(),g=x.Callbacks("once memory"),y=_.statusCode||{},M={},v={},k="canceled",A={readyState:0,getResponseHeader:function(e){var t;if(l){if(!i)for(i={};t=Ht.exec(o);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=v[e.toLowerCase()]=v[e.toLowerCase()]||e,M[e]=t),this},overrideMimeType:function(e){return null==l&&(_.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)A.always(e[A.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||k;return n&&n.abort(t),w(0,t),this}};if(p.promise(A),_.url=((e||_.url||At.href)+"").replace(Ot,At.protocol+"//"),_.type=t.method||t.type||_.method||_.type,_.dataTypes=(_.dataType||"*").toLowerCase().match(E)||[""],null==_.crossDomain){d=b.createElement("a");try{d.href=_.url,d.href=d.href,_.crossDomain=zt.protocol+"//"+zt.host!=d.protocol+"//"+d.host}catch(e){_.crossDomain=!0}}if(_.data&&_.processData&&"string"!=typeof _.data&&(_.data=x.param(_.data,_.traditional)),Nt(Ft,_,t,A),l)return A;for(c in(u=x.event&&_.global)&&0==x.active++&&x.event.trigger("ajaxStart"),_.type=_.type.toUpperCase(),_.hasContent=!Pt.test(_.type),a=_.url.replace(Bt,""),_.hasContent?_.data&&_.processData&&0===(_.contentType||"").indexOf("application/x-www-form-urlencoded")&&(_.data=_.data.replace(St,"+")):(m=_.url.slice(a.length),_.data&&(_.processData||"string"==typeof _.data)&&(a+=(wt.test(a)?"&":"?")+_.data,delete _.data),!1===_.cache&&(a=a.replace(jt,"$1"),m=(wt.test(a)?"&":"?")+"_="+xt.guid+++m),_.url=a+m),_.ifModified&&(x.lastModified[a]&&A.setRequestHeader("If-Modified-Since",x.lastModified[a]),x.etag[a]&&A.setRequestHeader("If-None-Match",x.etag[a])),(_.data&&_.hasContent&&!1!==_.contentType||t.contentType)&&A.setRequestHeader("Content-Type",_.contentType),A.setRequestHeader("Accept",_.dataTypes[0]&&_.accepts[_.dataTypes[0]]?_.accepts[_.dataTypes[0]]+("*"!==_.dataTypes[0]?", "+Wt+"; q=0.01":""):_.accepts["*"]),_.headers)A.setRequestHeader(c,_.headers[c]);if(_.beforeSend&&(!1===_.beforeSend.call(h,A,_)||l))return A.abort();if(k="abort",g.add(_.complete),A.done(_.success),A.fail(_.error),n=Nt(Et,_,t,A)){if(A.readyState=1,u&&f.trigger("ajaxSend",[A,_]),l)return A;_.async&&_.timeout>0&&(s=r.setTimeout((function(){A.abort("timeout")}),_.timeout));try{l=!1,n.send(M,w)}catch(e){if(l)throw e;w(-1,e)}}else w(-1,"No Transport");function w(e,t,i,d){var c,m,b,M,v,k=t;l||(l=!0,s&&r.clearTimeout(s),n=void 0,o=d||"",A.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(M=function(e,t,n){for(var r,a,o,i,s=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){d.unshift(a);break}if(d[0]in n)o=d[0];else{for(a in n){if(!d[0]||e.converters[a+" "+d[0]]){o=a;break}i||(i=a)}o=o||i}if(o)return o!==d[0]&&d.unshift(o),n[o]}(_,A,i)),!c&&x.inArray("script",_.dataTypes)>-1&&x.inArray("json",_.dataTypes)<0&&(_.converters["text script"]=function(){}),M=function(e,t,n,r){var a,o,i,s,d,l={},u=e.dataTypes.slice();if(u[1])for(i in e.converters)l[i.toLowerCase()]=e.converters[i];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!d&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=o,o=u.shift())if("*"===o)o=d;else if("*"!==d&&d!==o){if(!(i=l[d+" "+o]||l["* "+o]))for(a in l)if((s=a.split(" "))[1]===o&&(i=l[d+" "+s[0]]||l["* "+s[0]])){!0===i?i=l[a]:!0!==l[a]&&(o=s[0],u.unshift(s[1]));break}if(!0!==i)if(i&&e.throws)t=i(t);else try{t=i(t)}catch(e){return{state:"parsererror",error:i?e:"No conversion from "+d+" to "+o}}}return{state:"success",data:t}}(_,M,A,c),c?(_.ifModified&&((v=A.getResponseHeader("Last-Modified"))&&(x.lastModified[a]=v),(v=A.getResponseHeader("etag"))&&(x.etag[a]=v)),204===e||"HEAD"===_.type?k="nocontent":304===e?k="notmodified":(k=M.state,m=M.data,c=!(b=M.error))):(b=k,!e&&k||(k="error",e<0&&(e=0))),A.status=e,A.statusText=(t||k)+"",c?p.resolveWith(h,[m,k,A]):p.rejectWith(h,[A,k,b]),A.statusCode(y),y=void 0,u&&f.trigger(c?"ajaxSuccess":"ajaxError",[A,_,c?m:b]),g.fireWith(h,[A,k]),u&&(f.trigger("ajaxComplete",[A,_]),--x.active||x.event.trigger("ajaxStop")))}return A},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,r,a){return g(n)&&(a=a||r,r=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:a,data:n,success:r},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Vt=x.ajaxSettings.xhr();p.cors=!!Vt&&"withCredentials"in Vt,p.ajax=Vt=!!Vt,x.ajaxTransport((function(e){var t,n;if(p.cors||Vt&&!e.crossDomain)return{send:function(a,o){var i,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];for(i in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)s.setRequestHeader(i,a[i]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(qt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Ut,Jt=[],Gt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Jt.pop()||x.expando+"_"+xt.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,t,n){var a,o,i,s=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Gt,"$1"+a):!1!==e.jsonp&&(e.url+=(wt.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return i||x.error(a+" was not called"),i[0]},e.dataTypes[0]="json",o=r[a],r[a]=function(){i=arguments},n.always((function(){void 0===o?x(r).removeProp(a):r[a]=o,e[a]&&(e.jsonpCallback=t.jsonpCallback,Jt.push(a)),i&&g(o)&&o(i[0]),i=o=void 0})),"script"})),p.createHTMLDocument=((Ut=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(p.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(a=S.exec(e))?[t.createElement(a[1])]:(a=Ae([e],t,o),o&&o.length&&x(o).remove(),x.merge([],a.childNodes)));var r,a,o},x.fn.load=function(e,t,n){var r,a,o,i=this,s=e.indexOf(" ");return s>-1&&(r=gt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),i.length>0&&x.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done((function(e){o=arguments,i.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)})).always(n&&function(e,t){i.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var r,a,o,i,s,d,l=x.css(e,"position"),u=x(e),c={};"static"===l&&(e.style.position="relative"),s=u.offset(),o=x.css(e,"top"),d=x.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+d).indexOf("auto")>-1?(i=(r=u.position()).top,a=r.left):(i=parseFloat(o)||0,a=parseFloat(d)||0),g(t)&&(t=t.call(e,n,x.extend({},s))),null!=t.top&&(c.top=t.top-s.top+i),null!=t.left&&(c.left=t.left-s.left+a),"using"in t?t.using.call(e,c):u.css(c)}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===x.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),a.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-x.css(r,"marginTop",!0),left:t.left-a.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||ie}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(r){return V(this,(function(e,r,a){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===a)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:a,n?a:o.pageYOffset):e[r]=a}),e,r,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=Ve(p.pixelPosition,(function(e,n){if(n)return n=qe(e,t),ze.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){x.fn[r]=function(a,o){var i=arguments.length&&(n||"boolean"!=typeof a),s=n||(!0===a||!0===o?"margin":"border");return V(this,(function(t,n,a){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===a?x.css(t,n,s):x.style(t,n,a,s)}),t,i?a:void 0,i)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=s.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||x.guid++,a},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=T,x.isFunction=g,x.isWindow=y,x.camelCase=Z,x.type=k,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},void 0===(n=function(){return x}.apply(t,[]))||(e.exports=n);var $t=r.jQuery,Qt=r.$;return x.noConflict=function(e){return r.$===x&&(r.$=Qt),e&&r.jQuery===x&&(r.jQuery=$t),x},void 0===a&&(r.jQuery=r.$=x),x}))},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,o,i){var s=t(r),d=n[e][t(r)];return 2===s&&(d=d[a?0:1]),d.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,o,i){var s=n(t),d=r[e][n(t)];return 2===s&&(d=d[a?0:1]),d.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},o=function(e){return function(t,n,o,i){var s=r(t),d=a[e][r(t)];return 2===s&&(d=d[n?0:1]),d.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:o("s"),ss:o("s"),m:o("m"),mm:o("m"),h:o("h"),hh:o("h"),d:o("d"),dd:o("d"),M:o("M"),MM:o("M"),y:o("y"),yy:o("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},1560:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var r=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,o=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:o,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:o,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function o(e){return e>1&&e<5&&1!=~~(e/10)}function i(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(o(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(o(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(o(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(o(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(o(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(o(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,o){var i="";switch(a){case"s":return o?"muutaman sekunnin":"muutama sekunti";case"ss":i=o?"sekunnin":"sekuntia";break;case"m":return o?"minuutin":"minuutti";case"mm":i=o?"minuutin":"minuuttia";break;case"h":return o?"tunnin":"tunti";case"hh":i=o?"tunnin":"tuntia";break;case"d":return o?"päivän":"päivä";case"dd":i=o?"päivän":"päivää";break;case"M":return o?"kuukauden":"kuukausi";case"MM":i=o?"kuukauden":"kuukautta";break;case"y":return o?"vuoden":"vuosi";case"yy":i=o?"vuoden":"vuotta"}return function(e,r){return e<10?r?n[e]:t[e]:e}(e,o)+" "+i}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},94:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},135:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var o=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?o+(n||a?"sekúndur":"sekúndum"):o+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?o+(n||a?"mínútur":"mínútum"):n?o+"mínúta":o+"mínútu";case"hh":return t(e)?o+(n||a?"klukkustundir":"klukkustundum"):o+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?o+"dagar":o+(a?"daga":"dögum"):n?o+"dagur":o+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?o+"mánuðir":o+(a?"mánuði":"mánuðum"):n?o+"mánuður":o+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?o+(n||a?"ár":"árum"):o+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function o(e,t,o,i){var s=e+" ";return 1===e?s+n(0,t,o[0],i):t?s+(r(e)?a(o)[1]:a(o)[0]):i?s+a(o)[1]:s+(r(e)?a(o)[1]:a(o)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:o,m:n,mm:o,h:n,hh:o,d:n,dd:o,M:n,MM:o,y:n,yy:o},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function o(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:o,m:o,mm:o,h:o,hh:o,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:o,M:"miesiąc",MM:o,y:"rok",yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var o=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?o+(r(e)?"sekundy":"sekúnd"):o+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?o+(r(e)?"minúty":"minút"):o+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?o+(r(e)?"hodiny":"hodín"):o+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?o+(r(e)?"dni":"dní"):o+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?o+(r(e)?"mesiace":"mesiacov"):o+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?o+(r(e)?"roky":"rokov"):o+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return a+(1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return a+(1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami");case"d":return t||r?"en dan":"enim dnem";case"dd":return a+(1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi");case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+(1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci");case"y":return t||r?"eno leto":"enim letom";case"yy":return a+(1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var o=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,o="";return n>0&&(o+=t[n]+"vatlh"),r>0&&(o+=(""!==o?" ":"")+t[r]+"maH"),a>0&&(o+=(""!==o?" ":"")+t[a]),""===o?"pagh":o}(e);switch(r){case"ss":return o+" lup";case"mm":return o+" tup";case"hh":return o+" rep";case"dd":return o+" jaj";case"MM":return o+" jar";case"yy":return o+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},6700:(e,t,n)=>{var r={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function a(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=6700},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(s(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function m(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function _(e,t){for(var n in t)s(t,n)&&(e[n]=t[n]);return s(t,"toString")&&(e.toString=t.toString),s(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return wt(e,t,n,r,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function g(e){var t=h(NaN);return null!=e?_(f(t),e):f(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var y=a.momentProperties=[],b=!1;function M(e,t){var n,r,a;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=f(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)l(a=t[r=y[n]])||(e[r]=a);return e}function v(e){M(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===b&&(b=!0,a.updateOffset(this),b=!1)}function k(e){return e instanceof v||null!=e&&null!=e._isAMomentObject}function A(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function x(e,t){var n=!0;return _((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,o,i,d=[];for(o=0;o<arguments.length;o++){if(r="","object"==typeof arguments[o]){for(i in r+="\n["+o+"] ",arguments[0])s(arguments[0],i)&&(r+=i+": "+arguments[0][i]+", ");r=r.slice(0,-2)}else r=arguments[o];d.push(r)}A(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var w,L={};function Y(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),L[e]||(A(t),L[e]=!0)}function C(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function D(e,t){var n,r=_({},e);for(n in t)s(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},_(r[n],e[n]),_(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)s(e,n)&&!s(t,n)&&i(e[n])&&(r[n]=_({},r[n]));return r}function T(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)s(e,t)&&n.push(t);return n};function S(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var B=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,j=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,H={},P={};function O(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(P[e]=a),t&&(P[t[0]]=function(){return S(a.apply(this,arguments),t[1],t[2])}),n&&(P[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function F(e,t){return e.isValid()?(t=E(t,e.localeData()),H[t]=H[t]||function(e){var t,n,r,a=e.match(B);for(t=0,n=a.length;t<n;t++)P[a[t]]?a[t]=P[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,o="";for(r=0;r<n;r++)o+=C(a[r])?a[r].call(t,e):a[r];return o}}(t),H[t](e)):e.localeData().invalidDate()}function E(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(j.lastIndex=0;n>=0&&j.test(e);)e=e.replace(j,r),j.lastIndex=0,n-=1;return e}var W={};function z(e,t){var n=e.toLowerCase();W[n]=W[n+"s"]=W[t]=e}function I(e){return"string"==typeof e?W[e]||W[e.toLowerCase()]:void 0}function N(e){var t,n,r={};for(n in e)s(e,n)&&(t=I(n))&&(r[t]=e[n]);return r}var R={};function q(e,t){R[e]=t}function V(e){return e%4==0&&e%100!=0||e%400==0}function U(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function J(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=U(t)),n}function G(e,t){return function(n){return null!=n?($(this,e,n),a.updateOffset(this,t),this):Z(this,e)}}function Z(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function $(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&V(e.year())&&1===e.month()&&29===e.date()?(n=J(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),ke(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Q,X=/\d/,K=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,re=/\d\d?/,ae=/\d\d\d\d?/,oe=/\d\d\d\d\d\d?/,ie=/\d{1,3}/,se=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,me=/Z|[+-]\d\d(?::?\d\d)?/gi,_e=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function he(e,t,n){Q[e]=C(t)?t:function(e,r){return e&&n?n:t}}function fe(e,t){return s(Q,e)?Q[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Q={};var ge={};function ye(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=J(e)}),n=0;n<e.length;n++)ge[e[n]]=r}function be(e,t){ye(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function Me(e,t,n){null!=t&&s(ge,e)&&ge[e](t,n._a,n,e)}var ve;function ke(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?V(e)?29:28:31-r%7%2}ve=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},O("M",["MM",2],"Mo",(function(){return this.month()+1})),O("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),O("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),z("month","M"),q("month",8),he("M",re),he("MM",re,K),he("MMM",(function(e,t){return t.monthsShortRegex(e)})),he("MMMM",(function(e,t){return t.monthsRegex(e)})),ye(["M","MM"],(function(e,t){t[1]=J(e)-1})),ye(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:f(n).invalidMonth=e}));var Ae="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),xe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),we=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Le=_e,Ye=_e;function Ce(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=ve.call(this._shortMonthsParse,i))?a:null:-1!==(a=ve.call(this._longMonthsParse,i))?a:null:"MMM"===t?-1!==(a=ve.call(this._shortMonthsParse,i))||-1!==(a=ve.call(this._longMonthsParse,i))?a:null:-1!==(a=ve.call(this._longMonthsParse,i))||-1!==(a=ve.call(this._shortMonthsParse,i))?a:null}function De(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=J(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),ke(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Te(e){return null!=e?(De(this,e),a.updateOffset(this,!0),this):Z(this,"Month")}function Se(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],o=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),o.sort(e),t=0;t<12;t++)r[t]=pe(r[t]),a[t]=pe(a[t]);for(t=0;t<24;t++)o[t]=pe(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Be(e){return V(e)?366:365}O("Y",0,0,(function(){var e=this.year();return e<=9999?S(e,4):"+"+e})),O(0,["YY",2],0,(function(){return this.year()%100})),O(0,["YYYY",4],0,"year"),O(0,["YYYYY",5],0,"year"),O(0,["YYYYYY",6,!0],0,"year"),z("year","y"),q("year",1),he("Y",ue),he("YY",re,K),he("YYYY",se,te),he("YYYYY",de,ne),he("YYYYYY",de,ne),ye(["YYYYY","YYYYYY"],0),ye("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):J(e)})),ye("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),ye("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return J(e)+(J(e)>68?1900:2e3)};var je=G("FullYear",!0);function He(e,t,n,r,a,o,i){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,o,i),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,o,i),s}function Pe(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Oe(e,t,n){var r=7+t-n;return-(7+Pe(e,0,r).getUTCDay()-t)%7+r-1}function Fe(e,t,n,r,a){var o,i,s=1+7*(t-1)+(7+n-r)%7+Oe(e,r,a);return s<=0?i=Be(o=e-1)+s:s>Be(e)?(o=e+1,i=s-Be(e)):(o=e,i=s),{year:o,dayOfYear:i}}function Ee(e,t,n){var r,a,o=Oe(e.year(),t,n),i=Math.floor((e.dayOfYear()-o-1)/7)+1;return i<1?r=i+We(a=e.year()-1,t,n):i>We(e.year(),t,n)?(r=i-We(e.year(),t,n),a=e.year()+1):(a=e.year(),r=i),{week:r,year:a}}function We(e,t,n){var r=Oe(e,t,n),a=Oe(e+1,t,n);return(Be(e)-r+a)/7}O("w",["ww",2],"wo","week"),O("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),q("week",5),q("isoWeek",5),he("w",re),he("ww",re,K),he("W",re),he("WW",re,K),be(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=J(e)}));function ze(e,t){return e.slice(t,7).concat(e.slice(0,t))}O("d",0,"do","day"),O("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),O("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),O("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),O("e",0,0,"weekday"),O("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),q("day",11),q("weekday",11),q("isoWeekday",11),he("d",re),he("e",re),he("E",re),he("dd",(function(e,t){return t.weekdaysMinRegex(e)})),he("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),he("dddd",(function(e,t){return t.weekdaysRegex(e)})),be(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:f(n).invalidWeekday=e})),be(["d","e","E"],(function(e,t,n,r){t[r]=J(e)}));var Ie="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ne="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Re="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),qe=_e,Ve=_e,Ue=_e;function Je(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=ve.call(this._weekdaysParse,i))?a:null:"ddd"===t?-1!==(a=ve.call(this._shortWeekdaysParse,i))?a:null:-1!==(a=ve.call(this._minWeekdaysParse,i))?a:null:"dddd"===t?-1!==(a=ve.call(this._weekdaysParse,i))||-1!==(a=ve.call(this._shortWeekdaysParse,i))||-1!==(a=ve.call(this._minWeekdaysParse,i))?a:null:"ddd"===t?-1!==(a=ve.call(this._shortWeekdaysParse,i))||-1!==(a=ve.call(this._weekdaysParse,i))||-1!==(a=ve.call(this._minWeekdaysParse,i))?a:null:-1!==(a=ve.call(this._minWeekdaysParse,i))||-1!==(a=ve.call(this._weekdaysParse,i))||-1!==(a=ve.call(this._shortWeekdaysParse,i))?a:null}function Ge(){function e(e,t){return t.length-e.length}var t,n,r,a,o,i=[],s=[],d=[],l=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=pe(this.weekdaysMin(n,"")),a=pe(this.weekdaysShort(n,"")),o=pe(this.weekdays(n,"")),i.push(r),s.push(a),d.push(o),l.push(r),l.push(a),l.push(o);i.sort(e),s.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Ze(){return this.hours()%12||12}function $e(e,t){O(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}O("H",["HH",2],0,"hour"),O("h",["hh",2],0,Ze),O("k",["kk",2],0,(function(){return this.hours()||24})),O("hmm",0,0,(function(){return""+Ze.apply(this)+S(this.minutes(),2)})),O("hmmss",0,0,(function(){return""+Ze.apply(this)+S(this.minutes(),2)+S(this.seconds(),2)})),O("Hmm",0,0,(function(){return""+this.hours()+S(this.minutes(),2)})),O("Hmmss",0,0,(function(){return""+this.hours()+S(this.minutes(),2)+S(this.seconds(),2)})),$e("a",!0),$e("A",!1),z("hour","h"),q("hour",13),he("a",Qe),he("A",Qe),he("H",re),he("h",re),he("k",re),he("HH",re,K),he("hh",re,K),he("kk",re,K),he("hmm",ae),he("hmmss",oe),he("Hmm",ae),he("Hmmss",oe),ye(["H","HH"],3),ye(["k","kk"],(function(e,t,n){var r=J(e);t[3]=24===r?0:r})),ye(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ye(["h","hh"],(function(e,t,n){t[3]=J(e),f(n).bigHour=!0})),ye("hmm",(function(e,t,n){var r=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r)),f(n).bigHour=!0})),ye("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r,2)),t[5]=J(e.substr(a)),f(n).bigHour=!0})),ye("Hmm",(function(e,t,n){var r=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r))})),ye("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=J(e.substr(0,r)),t[4]=J(e.substr(r,2)),t[5]=J(e.substr(a))}));var Xe=G("Hours",!0);var Ke,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ae,monthsShort:xe,week:{dow:0,doy:6},weekdays:Ie,weekdaysMin:Re,weekdaysShort:Ne,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function ot(t){var r=null;if(void 0===tt[t]&&e&&e.exports)try{r=Ke._abbr,n(6700)("./"+t),it(r)}catch(e){tt[t]=null}return tt[t]}function it(e,t){var n;return e&&((n=l(t)?dt(e):st(e,t))?Ke=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ke._abbr}function st(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])Y("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=ot(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new T(D(r,t)),nt[e]&&nt[e].forEach((function(e){st(e.name,e.config)})),it(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ke;if(!o(e)){if(t=ot(e))return t;e=[e]}return function(e){for(var t,n,r,a,o=0;o<e.length;){for(t=(a=at(e[o]).split("-")).length,n=(n=at(e[o+1]))?n.split("-"):null;t>0;){if(r=ot(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}o++}return Ke}(e)}function lt(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>ke(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,f(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),f(e)._overflowWeeks&&-1===t&&(t=7),f(e)._overflowWeekday&&-1===t&&(t=8),f(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,mt=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],ht=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ft=/^\/?Date\((-?\d+)/i,pt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,r,a,o,i,s=e._i,d=ut.exec(s)||ct.exec(s);if(d){for(f(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(d[1])){a=_t[t][0],r=!1!==_t[t][2];break}if(null==a)return void(e._isValid=!1);if(d[3]){for(t=0,n=ht.length;t<n;t++)if(ht[t][1].exec(d[3])){o=(d[2]||" ")+ht[t][0];break}if(null==o)return void(e._isValid=!1)}if(!r&&null!=o)return void(e._isValid=!1);if(d[4]){if(!mt.exec(d[4]))return void(e._isValid=!1);i="Z"}e._f=a+(o||"")+(i||""),At(e)}else e._isValid=!1}function bt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function Mt(e){var t,n,r,a,o,i,s,d,l=pt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],o=l[5],i=l[6],s=l[7],d=[bt(n),xe.indexOf(r),parseInt(a,10),parseInt(o,10),parseInt(i,10)],s&&d.push(parseInt(s,10)),t=d,!function(e,t,n){return!e||Ne.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(f(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return gt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Pe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function vt(e,t,n){return null!=e?e:null!=t?t:n}function kt(e){var t,n,r,o,i,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,o,i,s,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(o=1,i=4,n=vt(t.GG,e._a[0],Ee(Lt(),1,4).year),r=vt(t.W,1),((a=vt(t.E,1))<1||a>7)&&(d=!0)):(o=e._locale._week.dow,i=e._locale._week.doy,l=Ee(Lt(),o,i),n=vt(t.gg,e._a[0],l.year),r=vt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(d=!0):null!=t.e?(a=t.e+o,(t.e<0||t.e>6)&&(d=!0)):a=o),r<1||r>We(n,o,i)?f(e)._overflowWeeks=!0:null!=d?f(e)._overflowWeekday=!0:(s=Fe(n,r,a,o,i),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(i=vt(e._a[0],r[0]),(e._dayOfYear>Be(i)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Pe(i,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Pe:He).apply(null,s),o=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==o&&(f(e).weekdayMismatch=!0)}}function At(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],f(e).empty=!0;var t,n,r,o,i,s,d=""+e._i,l=d.length,u=0;for(r=E(e._f,e._locale).match(B)||[],t=0;t<r.length;t++)o=r[t],(n=(d.match(fe(o,e))||[])[0])&&((i=d.substr(0,d.indexOf(n))).length>0&&f(e).unusedInput.push(i),d=d.slice(d.indexOf(n)+n.length),u+=n.length),P[o]?(n?f(e).empty=!1:f(e).unusedTokens.push(o),Me(o,n,e)):e._strict&&!n&&f(e).unusedTokens.push(o);f(e).charsLeftOver=l-u,d.length>0&&f(e).unusedInput.push(d),e._a[3]<=12&&!0===f(e).bigHour&&e._a[3]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(s=f(e).era)&&(e._a[0]=e._locale.erasConvertYear(s,e._a[0])),kt(e),lt(e)}else Mt(e);else yt(e)}function xt(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),k(t)?new v(lt(t)):(c(t)?e._d=t:o(n)?function(e){var t,n,r,a,o,i,s=!1;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)o=0,i=!1,t=M({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],At(t),p(t)&&(i=!0),o+=f(t).charsLeftOver,o+=10*f(t).unusedTokens.length,f(t).score=o,s?o<r&&(r=o,n=t):(null==r||o<r||i)&&(r=o,n=t,i&&(s=!0));_(e,n||t)}(e):n?At(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=ft.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,Mt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):o(t)?(e._a=m(t.slice(0),(function(e){return parseInt(e,10)})),kt(e)):i(t)?function(e){if(!e._d){var t=N(e._i),n=void 0===t.day?t.date:t.day;e._a=m([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),kt(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function wt(e,t,n,r,a){var s,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&d(e)||o(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(s=new v(lt(xt(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Lt(e,t,n,r){return wt(e,t,n,r,!1)}a.createFromInputFallback=x("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Yt=x("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Lt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),Ct=x("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Lt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function Dt(e,t){var n,r;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return Lt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Tt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function St(e){var t=N(e),n=t.year||0,r=t.quarter||0,a=t.month||0,o=t.week||t.isoWeek||0,i=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1;for(t in e)if(s(e,t)&&(-1===ve.call(Tt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Tt.length;++n)if(e[Tt[n]]){if(r)return!1;parseFloat(e[Tt[n]])!==J(e[Tt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*d*60*60,this._days=+i+7*o,this._months=+a+3*r+12*n,this._data={},this._locale=dt(),this._bubble()}function Bt(e){return e instanceof St}function jt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ht(e,t){O(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+S(~~(e/60),2)+t+S(~~e%60,2)}))}Ht("Z",":"),Ht("ZZ",""),he("Z",me),he("ZZ",me),ye(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ot(me,e)}));var Pt=/([\+\-]|\d\d)/gi;function Ot(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(Pt)||["-",0,0])[1]+J(n[2]))?0:"+"===n[0]?r:-r}function Ft(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(k(e)||c(e)?e.valueOf():Lt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Lt(e).local()}function Et(e){return-Math.round(e._d.getTimezoneOffset())}function Wt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var zt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,It=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Nt(e,t){var n,r,a,o,i,d,l=e,c=null;return Bt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=zt.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:J(c[2])*n,h:J(c[3])*n,m:J(c[4])*n,s:J(c[5])*n,ms:J(jt(1e3*c[6]))*n}):(c=It.exec(e))?(n="-"===c[1]?-1:1,l={y:Rt(c[2],n),M:Rt(c[3],n),w:Rt(c[4],n),d:Rt(c[5],n),h:Rt(c[6],n),m:Rt(c[7],n),s:Rt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(o=Lt(l.from),i=Lt(l.to),a=o.isValid()&&i.isValid()?(i=Ft(i,o),o.isBefore(i)?d=qt(o,i):((d=qt(i,o)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new St(l),Bt(e)&&s(e,"_locale")&&(r._locale=e._locale),Bt(e)&&s(e,"_isValid")&&(r._isValid=e._isValid),r}function Rt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function qt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Vt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(Y(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Ut(this,Nt(n,r),e),this}}function Ut(e,t,n,r){var o=t._milliseconds,i=jt(t._days),s=jt(t._months);e.isValid()&&(r=null==r||r,s&&De(e,Z(e,"Month")+s*n),i&&$(e,"Date",Z(e,"Date")+i*n),o&&e._d.setTime(e._d.valueOf()+o*n),r&&a.updateOffset(e,i||s))}Nt.fn=St.prototype,Nt.invalid=function(){return Nt(NaN)};var Jt=Vt(1,"add"),Gt=Vt(-1,"subtract");function Zt(e){return"string"==typeof e||e instanceof String}function $t(e){return k(e)||c(e)||Zt(e)||u(e)||function(e){var t=o(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Zt(e)})).length),t&&n}(e)||function(e){var t,n,r=i(e)&&!d(e),a=!1,o=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<o.length;t+=1)n=o[t],a=a||s(e,n);return r&&a}(e)||null==e}function Qt(e){var t,n=i(e)&&!d(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||s(e,a[t]);return n&&r}function Xt(e,t){if(e.date()<t.date())return-Xt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Kt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=x("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,rn=6e4,an=36e5,on=126227808e5;function sn(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-on:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-on:Date.UTC(e,t,n)}function un(e,t){return t.erasAbbrRegex(e)}function cn(){var e,t,n=[],r=[],a=[],o=[],i=this.eras();for(e=0,t=i.length;e<t;++e)r.push(pe(i[e].name)),n.push(pe(i[e].abbr)),a.push(pe(i[e].narrow)),o.push(pe(i[e].name)),o.push(pe(i[e].abbr)),o.push(pe(i[e].narrow));this._erasRegex=new RegExp("^("+o.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+r.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+a.join("|")+")","i")}function mn(e,t){O(0,[e,e.length],0,t)}function _n(e,t,n,r,a){var o;return null==e?Ee(this,r,a).year:(t>(o=We(e,r,a))&&(t=o),hn.call(this,e,t,n,r,a))}function hn(e,t,n,r,a){var o=Fe(e,t,n,r,a),i=Pe(o.year,0,o.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}O("N",0,0,"eraAbbr"),O("NN",0,0,"eraAbbr"),O("NNN",0,0,"eraAbbr"),O("NNNN",0,0,"eraName"),O("NNNNN",0,0,"eraNarrow"),O("y",["y",1],"yo","eraYear"),O("y",["yy",2],0,"eraYear"),O("y",["yyy",3],0,"eraYear"),O("y",["yyyy",4],0,"eraYear"),he("N",un),he("NN",un),he("NNN",un),he("NNNN",(function(e,t){return t.erasNameRegex(e)})),he("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ye(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?f(n).era=a:f(n).invalidEra=e})),he("y",le),he("yy",le),he("yyy",le),he("yyyy",le),he("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ye(["y","yy","yyy","yyyy"],0),ye(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),O(0,["gg",2],0,(function(){return this.weekYear()%100})),O(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),mn("gggg","weekYear"),mn("ggggg","weekYear"),mn("GGGG","isoWeekYear"),mn("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),q("weekYear",1),q("isoWeekYear",1),he("G",ue),he("g",ue),he("GG",re,K),he("gg",re,K),he("GGGG",se,te),he("gggg",se,te),he("GGGGG",de,ne),he("ggggg",de,ne),be(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=J(e)})),be(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),O("Q",0,"Qo","quarter"),z("quarter","Q"),q("quarter",7),he("Q",X),ye("Q",(function(e,t){t[1]=3*(J(e)-1)})),O("D",["DD",2],"Do","date"),z("date","D"),q("date",9),he("D",re),he("DD",re,K),he("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ye(["D","DD"],2),ye("Do",(function(e,t){t[2]=J(e.match(re)[0])}));var fn=G("Date",!0);O("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),q("dayOfYear",4),he("DDD",ie),he("DDDD",ee),ye(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=J(e)})),O("m",["mm",2],0,"minute"),z("minute","m"),q("minute",14),he("m",re),he("mm",re,K),ye(["m","mm"],4);var pn=G("Minutes",!1);O("s",["ss",2],0,"second"),z("second","s"),q("second",15),he("s",re),he("ss",re,K),ye(["s","ss"],5);var gn,yn,bn=G("Seconds",!1);for(O("S",0,0,(function(){return~~(this.millisecond()/100)})),O(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),O(0,["SSS",3],0,"millisecond"),O(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),O(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),O(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),O(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),O(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),O(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),z("millisecond","ms"),q("millisecond",16),he("S",ie,X),he("SS",ie,K),he("SSS",ie,ee),gn="SSSS";gn.length<=9;gn+="S")he(gn,le);function Mn(e,t){t[6]=J(1e3*("0."+e))}for(gn="S";gn.length<=9;gn+="S")ye(gn,Mn);yn=G("Milliseconds",!1),O("z",0,0,"zoneAbbr"),O("zz",0,0,"zoneName");var vn=v.prototype;function kn(e){return e}vn.add=Jt,vn.calendar=function(e,t){1===arguments.length&&(arguments[0]?$t(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Lt(),r=Ft(n,this).startOf("day"),o=a.calendarFormat(this,r)||"sameElse",i=t&&(C(t[o])?t[o].call(this,n):t[o]);return this.format(i||this.localeData().calendar(o,this,Lt(n)))},vn.clone=function(){return new v(this)},vn.diff=function(e,t,n){var r,a,o;if(!this.isValid())return NaN;if(!(r=Ft(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=I(t)){case"year":o=Xt(this,r)/12;break;case"month":o=Xt(this,r);break;case"quarter":o=Xt(this,r)/3;break;case"second":o=(this-r)/1e3;break;case"minute":o=(this-r)/6e4;break;case"hour":o=(this-r)/36e5;break;case"day":o=(this-r-a)/864e5;break;case"week":o=(this-r-a)/6048e5;break;default:o=this-r}return n?o:U(o)},vn.endOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=an-sn(t+(this._isUTC?0:this.utcOffset()*rn),an)-1;break;case"minute":t=this._d.valueOf(),t+=rn-sn(t,rn)-1;break;case"second":t=this._d.valueOf(),t+=nn-sn(t,nn)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},vn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=F(this,e);return this.localeData().postformat(t)},vn.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Lt(e).isValid())?Nt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},vn.fromNow=function(e){return this.from(Lt(),e)},vn.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Lt(e).isValid())?Nt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},vn.toNow=function(e){return this.to(Lt(),e)},vn.get=function(e){return C(this[e=I(e)])?this[e]():this},vn.invalidAt=function(){return f(this).overflow},vn.isAfter=function(e,t){var n=k(e)?e:Lt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},vn.isBefore=function(e,t){var n=k(e)?e:Lt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},vn.isBetween=function(e,t,n,r){var a=k(e)?e:Lt(e),o=k(t)?t:Lt(t);return!!(this.isValid()&&a.isValid()&&o.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(o,n):!this.isAfter(o,n))},vn.isSame=function(e,t){var n,r=k(e)?e:Lt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=I(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},vn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},vn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},vn.isValid=function(){return p(this)},vn.lang=en,vn.locale=Kt,vn.localeData=tn,vn.max=Ct,vn.min=Yt,vn.parsingFlags=function(){return _({},f(this))},vn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)s(e,t)&&n.push({unit:t,priority:R[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=N(e));for(n=0;n<r.length;n++)this[r[n].unit](e[r[n].unit])}else if(C(this[e=I(e)]))return this[e](t);return this},vn.startOf=function(e){var t,n;if(void 0===(e=I(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=sn(t+(this._isUTC?0:this.utcOffset()*rn),an);break;case"minute":t=this._d.valueOf(),t-=sn(t,rn);break;case"second":t=this._d.valueOf(),t-=sn(t,nn)}return this._d.setTime(t),a.updateOffset(this,!0),this},vn.subtract=Gt,vn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},vn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},vn.toDate=function(){return new Date(this.valueOf())},vn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?F(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):C(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",F(n,"Z")):F(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},vn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(vn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),vn.toJSON=function(){return this.isValid()?this.toISOString():null},vn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},vn.unix=function(){return Math.floor(this.valueOf()/1e3)},vn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},vn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},vn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},vn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},vn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},vn.eraYear=function(){var e,t,n,r,o=this.localeData().eras();for(e=0,t=o.length;e<t;++e)if(n=o[e].since<=o[e].until?1:-1,r=this.clone().startOf("day").valueOf(),o[e].since<=r&&r<=o[e].until||o[e].until<=r&&r<=o[e].since)return(this.year()-a(o[e].since).year())*n+o[e].offset;return this.year()},vn.year=je,vn.isLeapYear=function(){return V(this.year())},vn.weekYear=function(e){return _n.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},vn.isoWeekYear=function(e){return _n.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},vn.quarter=vn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},vn.month=Te,vn.daysInMonth=function(){return ke(this.year(),this.month())},vn.week=vn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},vn.isoWeek=vn.isoWeeks=function(e){var t=Ee(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},vn.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},vn.weeksInWeekYear=function(){var e=this.localeData()._week;return We(this.weekYear(),e.dow,e.doy)},vn.isoWeeksInYear=function(){return We(this.year(),1,4)},vn.isoWeeksInISOWeekYear=function(){return We(this.isoWeekYear(),1,4)},vn.date=fn,vn.day=vn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},vn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},vn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},vn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},vn.hour=vn.hours=Xe,vn.minute=vn.minutes=pn,vn.second=vn.seconds=bn,vn.millisecond=vn.milliseconds=yn,vn.utcOffset=function(e,t,n){var r,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ot(me,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Et(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),o!==e&&(!t||this._changeInProgress?Ut(this,Nt(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:Et(this)},vn.utc=function(e){return this.utcOffset(0,e)},vn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Et(this),"m")),this},vn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ot(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},vn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Lt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},vn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},vn.isLocal=function(){return!!this.isValid()&&!this._isUTC},vn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},vn.isUtc=Wt,vn.isUTC=Wt,vn.zoneAbbr=function(){return this._isUTC?"UTC":""},vn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},vn.dates=x("dates accessor is deprecated. Use date instead.",fn),vn.months=x("months accessor is deprecated. Use month instead",Te),vn.years=x("years accessor is deprecated. Use year instead",je),vn.zone=x("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),vn.isDSTShifted=x("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return M(t,this),(t=xt(t))._a?(e=t._isUTC?h(t._a):Lt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),i=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&J(e[r])!==J(t[r]))&&i++;return i+o}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var An=T.prototype;function xn(e,t,n,r){var a=dt(),o=h().set(r,t);return a[n](o,e)}function wn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return xn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=xn(e,r,n,"month");return a}function Ln(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,o=dt(),i=e?o._week.dow:0,s=[];if(null!=n)return xn(t,(n+i)%7,r,"day");for(a=0;a<7;a++)s[a]=xn(t,(a+i)%7,r,"day");return s}An.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return C(r)?r.call(t,n):r},An.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(B).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},An.invalidDate=function(){return this._invalidDate},An.ordinal=function(e){return this._ordinal.replace("%d",e)},An.preparse=kn,An.postformat=kn,An.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return C(a)?a(e,t,n,r):a.replace(/%d/i,e)},An.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return C(n)?n(t):n.replace(/%s/i,t)},An.set=function(e){var t,n;for(n in e)s(e,n)&&(C(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},An.eras=function(e,t){var n,r,o,i=this._eras||dt("en")._eras;for(n=0,r=i.length;n<r;++n){switch(typeof i[n].since){case"string":o=a(i[n].since).startOf("day"),i[n].since=o.valueOf()}switch(typeof i[n].until){case"undefined":i[n].until=1/0;break;case"string":o=a(i[n].until).startOf("day").valueOf(),i[n].until=o.valueOf()}}return i},An.erasParse=function(e,t,n){var r,a,o,i,s,d=this.eras();for(e=e.toUpperCase(),r=0,a=d.length;r<a;++r)if(o=d[r].name.toUpperCase(),i=d[r].abbr.toUpperCase(),s=d[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(i===e)return d[r];break;case"NNNN":if(o===e)return d[r];break;case"NNNNN":if(s===e)return d[r]}else if([o,i,s].indexOf(e)>=0)return d[r]},An.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},An.erasAbbrRegex=function(e){return s(this,"_erasAbbrRegex")||cn.call(this),e?this._erasAbbrRegex:this._erasRegex},An.erasNameRegex=function(e){return s(this,"_erasNameRegex")||cn.call(this),e?this._erasNameRegex:this._erasRegex},An.erasNarrowRegex=function(e){return s(this,"_erasNarrowRegex")||cn.call(this),e?this._erasNarrowRegex:this._erasRegex},An.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||we).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},An.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[we.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},An.monthsParse=function(e,t,n){var r,a,o;if(this._monthsParseExact)return Ce.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},An.monthsRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||Se.call(this),e?this._monthsStrictRegex:this._monthsRegex):(s(this,"_monthsRegex")||(this._monthsRegex=Ye),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},An.monthsShortRegex=function(e){return this._monthsParseExact?(s(this,"_monthsRegex")||Se.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(s(this,"_monthsShortRegex")||(this._monthsShortRegex=Le),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},An.week=function(e){return Ee(e,this._week.dow,this._week.doy).week},An.firstDayOfYear=function(){return this._week.doy},An.firstDayOfWeek=function(){return this._week.dow},An.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?ze(n,this._week.dow):e?n[e.day()]:n},An.weekdaysMin=function(e){return!0===e?ze(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},An.weekdaysShort=function(e){return!0===e?ze(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},An.weekdaysParse=function(e,t,n){var r,a,o;if(this._weekdaysParseExact)return Je.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},An.weekdaysRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||Ge.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(s(this,"_weekdaysRegex")||(this._weekdaysRegex=qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},An.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||Ge.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(s(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ve),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},An.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(s(this,"_weekdaysRegex")||Ge.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(s(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ue),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},An.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},An.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},it("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===J(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=x("moment.lang is deprecated. Use moment.locale instead.",it),a.langData=x("moment.langData is deprecated. Use moment.localeData instead.",dt);var Yn=Math.abs;function Cn(e,t,n,r){var a=Nt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Dn(e){return e<0?Math.floor(e):Math.ceil(e)}function Tn(e){return 4800*e/146097}function Sn(e){return 146097*e/4800}function Bn(e){return function(){return this.as(e)}}var jn=Bn("ms"),Hn=Bn("s"),Pn=Bn("m"),On=Bn("h"),Fn=Bn("d"),En=Bn("w"),Wn=Bn("M"),zn=Bn("Q"),In=Bn("y");function Nn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Rn=Nn("milliseconds"),qn=Nn("seconds"),Vn=Nn("minutes"),Un=Nn("hours"),Jn=Nn("days"),Gn=Nn("months"),Zn=Nn("years");var $n=Math.round,Qn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Xn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Kn=Math.abs;function er(e){return(e>0)-(e<0)||+e}function tr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,o,i,s,d=Kn(this._milliseconds)/1e3,l=Kn(this._days),u=Kn(this._months),c=this.asSeconds();return c?(e=U(d/60),t=U(e/60),d%=60,e%=60,n=U(u/12),u%=12,r=d?d.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",o=er(this._months)!==er(c)?"-":"",i=er(this._days)!==er(c)?"-":"",s=er(this._milliseconds)!==er(c)?"-":"",a+"P"+(n?o+n+"Y":"")+(u?o+u+"M":"")+(l?i+l+"D":"")+(t||e||d?"T":"")+(t?s+t+"H":"")+(e?s+e+"M":"")+(d?s+r+"S":"")):"P0D"}var nr=St.prototype;return nr.isValid=function(){return this._isValid},nr.abs=function(){var e=this._data;return this._milliseconds=Yn(this._milliseconds),this._days=Yn(this._days),this._months=Yn(this._months),e.milliseconds=Yn(e.milliseconds),e.seconds=Yn(e.seconds),e.minutes=Yn(e.minutes),e.hours=Yn(e.hours),e.months=Yn(e.months),e.years=Yn(e.years),this},nr.add=function(e,t){return Cn(this,e,t,1)},nr.subtract=function(e,t){return Cn(this,e,t,-1)},nr.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=I(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Tn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Sn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},nr.asMilliseconds=jn,nr.asSeconds=Hn,nr.asMinutes=Pn,nr.asHours=On,nr.asDays=Fn,nr.asWeeks=En,nr.asMonths=Wn,nr.asQuarters=zn,nr.asYears=In,nr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*J(this._months/12):NaN},nr._bubble=function(){var e,t,n,r,a,o=this._milliseconds,i=this._days,s=this._months,d=this._data;return o>=0&&i>=0&&s>=0||o<=0&&i<=0&&s<=0||(o+=864e5*Dn(Sn(s)+i),i=0,s=0),d.milliseconds=o%1e3,e=U(o/1e3),d.seconds=e%60,t=U(e/60),d.minutes=t%60,n=U(t/60),d.hours=n%24,i+=U(n/24),s+=a=U(Tn(i)),i-=Dn(Sn(a)),r=U(s/12),s%=12,d.days=i,d.months=s,d.years=r,this},nr.clone=function(){return Nt(this)},nr.get=function(e){return e=I(e),this.isValid()?this[e+"s"]():NaN},nr.milliseconds=Rn,nr.seconds=qn,nr.minutes=Vn,nr.hours=Un,nr.days=Jn,nr.weeks=function(){return U(this.days()/7)},nr.months=Gn,nr.years=Zn,nr.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,o=Qn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(o=Object.assign({},Qn,t),null!=t.s&&null==t.ss&&(o.ss=t.s-1)),r=function(e,t,n,r){var a=Nt(e).abs(),o=$n(a.as("s")),i=$n(a.as("m")),s=$n(a.as("h")),d=$n(a.as("d")),l=$n(a.as("M")),u=$n(a.as("w")),c=$n(a.as("y")),m=o<=n.ss&&["s",o]||o<n.s&&["ss",o]||i<=1&&["m"]||i<n.m&&["mm",i]||s<=1&&["h"]||s<n.h&&["hh",s]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(m=m||u<=1&&["w"]||u<n.w&&["ww",u]),(m=m||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,m[3]=+e>0,m[4]=r,Xn.apply(null,m)}(this,!a,o,n=this.localeData()),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},nr.toISOString=tr,nr.toString=tr,nr.toJSON=tr,nr.locale=Kt,nr.localeData=tn,nr.toIsoString=x("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",tr),nr.lang=en,O("X",0,0,"unix"),O("x",0,0,"valueOf"),he("x",ue),he("X",/[+-]?\d+(\.\d{1,3})?/),ye("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ye("x",(function(e,t,n){n._d=new Date(J(e))})),a.version="2.29.1",t=Lt,a.fn=vn,a.min=function(){return Dt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Dt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return Lt(1e3*e)},a.months=function(e,t){return wn(e,t,"months")},a.isDate=c,a.locale=it,a.invalid=g,a.duration=Nt,a.isMoment=k,a.weekdays=function(e,t,n){return Ln(e,t,n,"weekdays")},a.parseZone=function(){return Lt.apply(null,arguments).parseZone()},a.localeData=dt,a.isDuration=Bt,a.monthsShort=function(e,t){return wn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Ln(e,t,n,"weekdaysMin")},a.defineLocale=st,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(D(tt[e]._config,t)):(null!=(r=ot(e))&&(a=r._config),t=D(a,t),null==r&&(t.abbr=e),(n=new T(t)).parentLocale=tt[e],tt[e]=n),it(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===it()&&it(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return w(tt)},a.weekdaysShort=function(e,t,n){return Ln(e,t,n,"weekdaysShort")},a.normalizeUnits=I,a.relativeTimeRounding=function(e){return void 0===e?$n:"function"==typeof e&&($n=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==Qn[e]&&(void 0===t?Qn[e]:(Qn[e]=t,"s"===e&&(Qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=vn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},2769:function(e,t,n){var r,a,o=n(9755);void 0===this&&void 0!==window&&window,r=[n(9755),n(381)],void 0===(a=function(e,t){return function(e,t){var n,r,a;function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}(function(e){var t,o,i,s,d={},l={},u={},c={},m=Object.prototype.hasOwnProperty,_=[].slice,h=/\.js$/;function f(e,t){return m.call(e,t)}function p(e,t){var n,r,a,o,i,s,d,l,c,m,_,f=t&&t.split("/"),p=u.map,g=p&&p["*"]||{};if(e){for(i=(e=e.split("/")).length-1,u.nodeIdCompat&&h.test(e[i])&&(e[i]=e[i].replace(h,"")),"."===e[0].charAt(0)&&f&&(e=f.slice(0,f.length-1).concat(e)),c=0;c<e.length;c++)if("."===(_=e[c]))e.splice(c,1),c-=1;else if(".."===_){if(0===c||1===c&&".."===e[2]||".."===e[c-1])continue;c>0&&(e.splice(c-1,2),c-=2)}e=e.join("/")}if((f||g)&&p){for(c=(n=e.split("/")).length;c>0;c-=1){if(r=n.slice(0,c).join("/"),f)for(m=f.length;m>0;m-=1)if((a=p[f.slice(0,m).join("/")])&&(a=a[r])){o=a,s=c;break}if(o)break;!d&&g&&g[r]&&(d=g[r],l=c)}!o&&d&&(o=d,s=l),o&&(n.splice(0,s,o),e=n.join("/"))}return e}function g(t,n){return function(){var r=_.call(arguments,0);return"string"!=typeof r[0]&&1===r.length&&r.push(null),o.apply(e,r.concat([t,n]))}}function y(e){return function(t){d[e]=t}}function b(n){if(f(l,n)){var r=l[n];delete l[n],c[n]=!0,t.apply(e,r)}if(!f(d,n)&&!f(c,n))throw new Error("No "+n);return d[n]}function M(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function v(e){return e?M(e):[]}function k(e){return function(){return u&&u.config&&u.config[e]||{}}}i=function(e,t){var n,r,a=M(e),o=a[0],i=t[1];return e=a[1],o&&(n=b(o=p(o,i))),o?e=n&&n.normalize?n.normalize(e,(r=i,function(e){return p(e,r)})):p(e,i):(o=(a=M(e=p(e,i)))[0],e=a[1],o&&(n=b(o))),{f:o?o+"!"+e:e,n:e,pr:o,p:n}},s={require:function(e){return g(e)},exports:function(e){var t=d[e];return void 0!==t?t:d[e]={}},module:function(e){return{id:e,uri:"",exports:d[e],config:k(e)}}},t=function(t,n,r,a){var o,u,m,_,h,p,M,k=[],A=typeof r;if(p=v(a=a||t),"undefined"===A||"function"===A){for(n=!n.length&&r.length?["require","exports","module"]:n,h=0;h<n.length;h+=1)if("require"===(u=(_=i(n[h],p)).f))k[h]=s.require(t);else if("exports"===u)k[h]=s.exports(t),M=!0;else if("module"===u)o=k[h]=s.module(t);else if(f(d,u)||f(l,u)||f(c,u))k[h]=b(u);else{if(!_.p)throw new Error(t+" missing "+u);_.p.load(_.n,g(a,!0),y(u),{}),k[h]=d[u]}m=r?r.apply(d[t],k):void 0,t&&(o&&o.exports!==e&&o.exports!==d[t]?d[t]=o.exports:m===e&&M||(d[t]=m))}else t&&(d[t]=r)},n=r=o=function(n,r,a,d,l){if("string"==typeof n)return s[n]?s[n](r):b(i(n,v(r)).f);if(!n.splice){if((u=n).deps&&o(u.deps,u.callback),!r)return;r.splice?(n=r,r=a,a=null):n=e}return r=r||function(){},"function"==typeof a&&(a=d,d=l),d?t(e,n,r,a):setTimeout((function(){t(e,n,r,a)}),4),o},o.config=function(e){return o(e)},n._defined=d,(a=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),f(d,e)||f(l,e)||(l[e]=[e,t,n])}).amd={jQuery:!0}})(),a("almond",(function(){})),a("component/models",[],(function(){return{name:"pignoseCalendar",version:"1.4.31",preference:{supports:{themes:["light","dark","blue"]}}}})),a("component/helper",["./models"],(function(e){var t={},n={},r={},a=/[A-Z]/,o=function(){};return o.format=function(e){if(e){var n=Array.prototype.slice.call(arguments,1),r=e+n.join(".");if(t[r])return t[r];for(var a=n.length,o=0;o<a;o++){var i=n[o];e=e.replace(new RegExp("((?!\\\\)?\\{"+o+"(?!\\\\)?\\})","g"),i)}return e=e.replace(new RegExp("\\\\{([0-9]+)\\\\}","g"),"{$1}"),t[r]=e,e}return""},o.getClass=function(t){var r=[e.name,t].join(".");if(n[r])return n[r];for(var o=t.split(""),i=[],s=o.length,d=0,l=0;d<s;d++){var u=o[d];!0===a.test(u)&&(i[l++]="-",u=u.toString().toLowerCase()),i[l++]=u}var c=i.join("");return n[r]=c,c},o.getSubClass=function(t){if(t&&t.length){var n=t.split("");n[0]=n[0].toUpperCase(),t=n.join("")}return r[t]||(r[t]=o.getClass(o.format("{0}{1}",e.name,t))),r[t]},o})),a("shim/utils",[],(function(){return{register:function(e,t,n){if(!n){var r="PIGNOSE Calendar needs ".concat(e," library.\nIf you want to use built-in plugin, Import dist/pignose.calendar.full.js.\nType below code in your command line to install the library.");console&&"function"==typeof console.error&&(console.warn(r),console.warn("$ ".concat(t)))}return n}}})),a("moment",["./shim/utils"],(function(e){var n;try{n=t}catch(e){}return e.register("moment","npm install moment --save",n)})),a("manager/index",["../component/helper","moment"],(function(e,t){var n={},r=function(e){if(!e)throw new Error("first parameter `date` must be gave");if(e instanceof t==0){if("string"!=typeof e&&"number"!=typeof e)throw new Error("`date` option is invalid type. (date: "+e+").");e=t(e)}this.year=parseInt(e.format("YYYY"),10),this.month=parseInt(e.format("MM"),10),this.prevMonth=parseInt(e.clone().add(-1,"months").format("MM"),10),this.nextMonth=parseInt(e.clone().add(1,"months").format("MM"),10),this.day=parseInt(e.format("DD"),10),this.firstDay=1,this.lastDay=parseInt(e.clone().endOf("month").format("DD"),10),this.weekDay=e.weekday(),this.date=e};return r.prototype.toString=function(){return this.date.format("YYYY-MM-DD")},r.Convert=function(r,a,o){var i=e.format("{0}-{1}-{2}",r,a,o);return n[i]||(n[i]=t(i,"YYYY-MM-DD")),n[i]},r})),a("component/classNames",["../component/helper"],(function(e){return{top:e.getSubClass("top"),header:e.getSubClass("header"),body:e.getSubClass("body"),button:e.getSubClass("button")}})),a("configures/i18n",[],(function(){return{defaultLanguage:"en",supports:["ar","en","ko","fr","ch","de","nl","jp","pt","da","pl","es","cs","uk","ru","ka","ca"],weeks:{ar:["أحد","إثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],en:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ko:["일","월","화","수","목","금","토"],fa:["شنبه","آدینه","پنج","چهار","سه","دو","یک"],fr:["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"],ch:["日","一","二","三","四","五","六"],de:["SO","MO","DI","MI","DO","FR","SA"],nl:["Zo","Ma","Di","Wo","Do","Vr","Za"],jp:["日","月","火","水","木","金","土"],pt:["Dom","Seg","Ter","Qua","Qui","Sex","Sab"],da:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],pl:["Nie","Pon","Wto","Śro","Czw","Pią","Sob"],es:["Dom","Lun","Mar","Mié","Jue","Vie","Sáb"],it:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],cs:["Ne","Po","Út","St","Čt","Pá","So"],uk:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],ru:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],ka:["კვ","ორ","სმ","ოთ","ხთ","პრ","შბ"],ca:["Dg","Dl","Dm","Dc","Dj","Dv","Ds"]},monthsLong:{ar:["يناير","فبراير","مارس","إبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],en:["January","February","March","April","May","Jun","July","August","September","October","November","December"],ko:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],fa:["آذر","آبان","مهر","شهریور","مرداد","تیر","خرداد","اردیبهشت","فروردین","اسفند","بهمن","دی"],fr:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],ch:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],de:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],nl:["Januari","Februari","Maart","April","Mei","Juni","Juli","Augustus","September","Oktober","November","December"],jp:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],pt:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],da:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],pl:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],es:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],it:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],cs:["Leden","Únor","Březen","Duben","Květen","Červen","Cervenec","Srpen","Září","Říjen","Listopad","Prosinec"],uk:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],ru:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],ka:["იანვარი","თებერვალი","მარტი","აპრილი","მაისი","ივნისი","ივლისი","აგვისტო","სექტემბერი","ოქტომბერი","ნოემბერი","დეკემბერი"],ca:["Gener","Febrer","Març","Abril","Maig","Juny","Juliol","Agost","Setembre","Octubre","Novembre","Desembre"]},months:{ar:["يناير","فبراير","مارس","إبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],en:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ko:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],fa:["آذر","آبان","مهر","شهریور","مرداد","تیر","خرداد","اردیبهشت","فروردین","اسفند","بهمن","دی"],fr:["Jan","Fév","Mar","Avr","Mai","Juin","Juil","Aoû","Sep","Oct","Nov","Déc"],ch:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],de:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],nl:["Jan","Feb","Mrt","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],jp:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],pt:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],da:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],pl:["Sty","Lut","Mar","Kwi","Maj","Cze","Lip","Sie","Wrz","Paź","Lis","Gru"],es:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dec"],it:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],cs:["Led","Úno","Bře","Dub","Kvě","Čvn","Čvc","Srp","Zář","Říj","Lis","Pro"],uk:["Січ","Лют","Бер","Квіт","Трав","Черв","Лип","Серп","Вер","Жовт","Лист","Груд"],ru:["Янв","Февр","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Нояб","Дек"],ka:["იან","თებ","მარ","აპრ","მაი","ივნ","ივლ","აგვ","სექ","ოქტ","ნოე","დეკ"],ca:["Gen","Feb","Mar","Abr","Mai","Jun","Jul","Ago","Set","Oct","Nov","Des"]},controls:{ar:{ok:"حسناً",cancel:"إلغاء"},en:{ok:"OK",cancel:"Cancel"},ko:{ok:"확인",cancel:"취소"},fa:{ok:"چک کنید",cancel:"لغو"},fr:{ok:"Vérifier",cancel:"Annuler"},ch:{ok:"确认",cancel:"取消"},de:{ok:"Okay",cancel:"Abbrechen"},nl:{ok:"Oké",cancel:"Annuleren"},jp:{ok:"確認",cancel:"キャンセル"},pt:{ok:"Verifique",cancel:"Cancelar"},da:{ok:"Bekræftelse",cancel:"aflyst"},pl:{ok:"Sprawdź",cancel:"Anuluj"},es:{ok:"Cheque",cancel:"Cancelar"},it:{ok:"conferma",cancel:"annullato"},cs:{ok:"Zkontrolujte",cancel:"Zrušit"},uk:{ok:"Вибрати",cancel:"Скасувати"},ru:{ok:"Выбрать",cancel:"Отмена"},ka:{ok:"არჩევა",cancel:"გაუქმება"},ca:{ok:"Confirmar",cancel:"Cancel·lar"}}}})),a("component/global",["../configures/i18n"],(function(e){return{language:e.defaultLanguage,languages:e,week:0,format:"YYYY-MM-DD"}})),a("component/options",["moment","./global"],(function(e,t){return{lang:null,languages:t.languages,theme:"light",date:e(),format:t.format,enabledDates:[],disabledDates:[],disabledWeekdays:[],disabledRanges:[],schedules:[],scheduleOptions:{colors:{}},week:t.week,weeks:t.languages.weeks.en,monthsLong:t.languages.monthsLong.en,months:t.languages.months.en,controls:t.languages.controls.en,pickWeeks:!1,initialize:!0,multiple:!1,toggle:!1,reverse:!1,buttons:!1,modal:!1,selectOver:!1,minDate:null,maxDate:null,init:null,select:null,apply:null,click:null,page:null,prev:null,next:null}})),a("jquery",["./shim/utils"],(function(e){var t;try{t=o||l}catch(e){}return e.register("jquery","npm install jquery --save",t)})),a("methods/configure",["../component/global","../component/models","../component/options","../configures/i18n","jquery"],(function(e,t,n,r,a){return function(o){var i=this;i.settings=a.extend(!0,{},n,o),i.settings.lang||(i.settings.lang=e.language),i.settings.lang!==r.defaultLanguage&&-1!==a.inArray(i.settings.lang,e.languages.supports)&&(i.settings.weeks=e.languages.weeks[i.settings.lang]||e.languages.weeks[r.defaultLanguage],i.settings.monthsLong=e.languages.monthsLong[i.settings.lang]||e.languages.monthsLong[r.defaultLanguage],i.settings.months=e.languages.months[i.settings.lang]||e.languages.months[r.defaultLanguage],i.settings.controls=e.languages.controls[i.settings.lang]||e.languages.controls[r.defaultLanguage]),"light"!==i.settings.theme&&-1===a.inArray(i.settings.theme,t.preference.supports.themes)&&(i.settings.theme="light"),!0===i.settings.pickWeeks&&(!1===i.settings.multiple?console.error("You must give true at settings.multiple options on PIGNOSE-Calendar for using in pickWeeks option."):!0===i.settings.toggle&&console.error("You must give false at settings.toggle options on PIGNOSE-Calendar for using in pickWeeks option.")),i.settings.week%=i.settings.weeks.length}})),a("methods/init",["../manager/index","../component/classNames","../component/helper","../component/models","../component/global","./configure","jquery","moment"],(function(e,t,n,r,a,o,s,d){var l=s(window);return s(document),function(u){var c=this;c.settings={},o.call(c,u),c.global={calendarHtml:n.format('<div class="{0} {0}-{4}">                                    <div class="{1}">                                      <a href="#" class="{1}-nav {1}-prev">                                          <span class="icon-arrow-left {1}-icon"></span>                                      </a>                                      <div class="{1}-date">                                          <span class="{1}-month"></span>                                          <span class="{1}-year"></span>                                      </div>                                      <a href="#" class="{1}-nav {1}-next">                                          <span class="icon-arrow-right {1}-icon"></span>                                      </a>                                    </div>                                    <div class="{2}"></div>                                    <div class="{3}"></div>                                  </div>',n.getClass(r.name),t.top,t.header,t.body,c.settings.theme),calendarButtonsHtml:n.format('<div class="{0}-group">                                            <a href="#" class="{0} {0}-cancel">{1}</a>                                            <a href="#" class="{0} {0}-apply">{2}</a>                                          </div>',t.button,c.settings.controls.cancel,c.settings.controls.ok),calendarScheduleContainerHtml:n.format('<div class="{0}-schedule-container"></div>',t.button),calendarSchedulePinHtml:n.format('<span class="{0}-schedule-pin {0}-schedule-pin-\\{0\\}" style="background-color: \\{1\\};"></span>',t.button)};var m=n.getSubClass("unitRange"),_=n.getSubClass("unitRangeFirst"),h=n.getSubClass("unitRangeLast"),f=n.getSubClass("unitActive"),p=[n.getSubClass("unitFirstActive"),n.getSubClass("unitSecondActive")],g=n.getSubClass("unitToggleActive"),y=n.getSubClass("unitToggleInactive"),b=null;return c.each((function(){var o=s(this),u={initialize:null,element:o,calendar:s(c.global.calendarHtml),input:o.is("input"),renderer:null,current:[null,null],date:{all:[],enabled:[],disabled:[]},storage:{activeDates:[],schedules:[]},dateManager:new e(c.settings.date),calendarWrapperHtml:n.format('<div class="{0}"></div>',n.getSubClass("wrapper")),calendarWrapperOverlayHtml:n.format('<div class="{0}"></div>',n.getSubClass("wrapperOverlay")),context:c},M=o;!0===c.settings.initialize&&(u.initialize=u.current[0]=u.dateManager.date.clone()),this.local=u,!0===c.settings.reverse?u.calendar.addClass(n.getSubClass("reverse")):u.calendar.addClass(n.getSubClass("default"));for(var v=c.settings.week;v<c.settings.weeks.length+c.settings.week;v++){v<0&&(v=a.languages.weeks.en.length-v);var k=c.settings.weeks[v%c.settings.weeks.length];"string"==typeof k&&(k=k.toUpperCase(),s(n.format('<div class="{0} {0}-{2}">{1}</div>',n.getSubClass("week"),k,a.languages.weeks.en[v%a.languages.weeks.en.length].toLowerCase())).appendTo(u.calendar.find("."+t.header)))}if(!0===c.settings.buttons&&(b=s(c.global.calendarButtonsHtml)).appendTo(u.calendar),!0===u.input||!0===c.settings.modal){var A,x=n.getSubClass("wrapperActive"),w=n.getSubClass("wrapperOverlayActive");(M=s(u.calendarWrapperHtml)).bind("click",(function(e){e.stopPropagation()})),o.bind("click",(function(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),(A=s("."+n.getSubClass("wrapperOverlay"))).length<1&&(A=s(u.calendarWrapperOverlayHtml)).appendTo("body"),A.unbind("click."+n.getClass(r.name)).bind("click."+n.getClass(r.name),(function(e){e.stopPropagation(),M.trigger("cancel."+n.getClass(r.name))})),!1===M.parent().is("body")&&M.appendTo("body"),M.show(),A.show(),l.unbind("resize."+n.getClass(r.name)).bind("resize."+n.getClass(r.name),(function(){M.css({marginLeft:-M.outerWidth()/2,marginTop:-M.outerHeight()/2})})).triggerHandler("resize."+n.getClass(r.name)),o[r.name]("set",o.val()),setTimeout((function(){A.addClass(w),M.addClass(x)}),25)})).bind("focus",(function(e){s(this).blur()})),M.unbind("cancel."+n.getClass(r.name)+" apply."+n.getClass(r.name)).bind("cancel."+n.getClass(r.name)+" apply."+n.getClass(r.name),(function(){A.removeClass(w).hide(),M.removeClass(x).hide()}))}var L=function(){if(!u.current[0]||!u.current[1])return!1;var e=u.current[0].format("YYYY-MM-DD"),t=u.current[1].format("YYYY-MM-DD"),r=d(Math.max(u.current[0].valueOf(),u.dateManager.date.clone().startOf("month").valueOf())),a=d(Math.min(u.current[1].valueOf(),u.dateManager.date.clone().endOf("month").valueOf())),o=r.format("YYYY-MM-DD")!==e,i=a.format("YYYY-MM-DD")!==t;!1===o&&r.add(1,"days"),!1===i&&a.add(-1,"days");for(var s=r.format("YYYY-MM-DD"),l=a.format("YYYY-MM-DD");r.format("YYYY-MM-DD")<=a.format("YYYY-MM-DD");r.add(1,"days")){var c=r.format("YYYY-MM-DD"),f=u.calendar.find(n.format('.{0}[data-date="{1}"]',n.getSubClass("unit"),c)).addClass(m);c===s&&f.addClass(_),c===l&&f.addClass(h)}},Y=function(e,t,n){return!!n&&e.diff(n)<0&&t.diff(n)>0};u.renderer=function(){if(u.calendar.appendTo(M.empty()),u.calendar.find("."+t.top+"-year").text(u.dateManager.year),u.calendar.find("."+t.top+"-month").text(c.settings.monthsLong[u.dateManager.month-1]),u.calendar.find(n.format(".{0}-prev .{0}-value",t.top)).text(c.settings.months[u.dateManager.prevMonth-1].toUpperCase()),u.calendar.find(n.format(".{0}-next .{0}-value",t.top)).text(c.settings.months[u.dateManager.nextMonth-1].toUpperCase()),!0===c.settings.buttons&&b){var l=o;b.find("."+t.button).bind("click",(function(e){e.preventDefault(),e.stopPropagation();var a=s(this);if(a.hasClass(t.button+"-apply")){a.trigger("apply."+r.name,u);var o="";if(!0===c.settings.toggle)o=u.storage.activeDates.join(", ");else if(!0===c.settings.multiple){var i=[];null!==u.current[0]&&i.push(u.current[0].format(c.settings.format)),null!==u.current[1]&&i.push(u.current[1].format(c.settings.format)),o=i.join(" ~ ")}else o=null===u.current[0]?"":d(u.current[0]).format(c.settings.format);!0===u.input&&l.val(o).triggerHandler("change"),"function"==typeof c.settings.apply&&c.settings.apply.call(u.calendar,u.current,u),M.triggerHandler("apply."+n.getClass(r.name))}else M.triggerHandler("cancel."+n.getClass(r.name))}))}var v=u.calendar.find("."+t.body).empty(),k=e.Convert(u.dateManager.year,u.dateManager.month,u.dateManager.firstDay),A=e.Convert(u.dateManager.year,u.dateManager.month,u.dateManager.lastDay),x=k.weekday()-c.settings.week,w=A.weekday()-c.settings.week;x<0&&(x+=c.settings.weeks.length);for(var C=[],D=[null===u.current[0]?null:u.current[0].format("YYYY-MM-DD"),null===u.current[1]?null:u.current[1].format("YYYY-MM-DD")],T=null===c.settings.minDate?null:d(c.settings.minDate),S=null===c.settings.maxDate?null:d(c.settings.maxDate),B=0;B<x;B++){var j=s(n.format('<div class="{0} {0}-{1}"></div>',n.getSubClass("unit"),a.languages.weeks.en[B].toLowerCase()));C.push(j)}for(var H=function(t){var l=e.Convert(u.dateManager.year,u.dateManager.month,t),b=l.format("YYYY-MM-DD"),v=s(n.format('<div class="{0} {0}-date {0}-{3}" data-date="{1}"><a href="#">{2}</a></div>',n.getSubClass("unit"),l.format("YYYY-MM-DD"),t,a.languages.weeks.en[l.weekday()].toLowerCase()));if(c.settings.enabledDates.length>0)-1===s.inArray(b,c.settings.enabledDates)&&v.addClass(n.getSubClass("unitDisabled"));else if(c.settings.disabledWeekdays.length>0&&-1!==s.inArray(l.weekday(),c.settings.disabledWeekdays))v.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledWeekdays"));else if(null!==T&&T.diff(l)>0||null!==S&&S.diff(l)<0)v.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledRange"));else if(-1!==s.inArray(b,c.settings.disabledDates))v.addClass(n.getSubClass("unitDisabled"));else if(c.settings.disabledRanges.length>0)for(var k=c.settings.disabledRanges.length,A=0;A<k;A++){var x=c.settings.disabledRanges[A];if(x.length,l.diff(d(x[0]))>=0&&l.diff(d(x[1]))<=0){v.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledRange")).addClass(n.getSubClass("unitDisabledMultipleRange"));break}}if(c.settings.schedules.length>0&&"object"===i(c.settings.scheduleOptions)&&"object"===i(c.settings.scheduleOptions.colors)){var w=c.settings.schedules.filter((function(e){return e.date===b})),B=s.unique(w.map((function(e,t){return e.name})).sort());if(B.length>0){var j=s(c.global.calendarScheduleContainerHtml);j.appendTo(v),B.map((function(e,t){if(c.settings.scheduleOptions.colors[e]){var r=c.settings.scheduleOptions.colors[e];s(n.format(c.global.calendarSchedulePinHtml,e,r)).appendTo(j)}}))}}!0===c.settings.toggle?-1!==s.inArray(b,u.storage.activeDates)&&u.storage.activeDates.length>0?v.addClass(g):v.addClass(y):!1===v.hasClass(n.getSubClass("unitDisabled"))&&(!0===c.settings.multiple?(D[0]&&b===D[0]&&v.addClass(f).addClass(p[0]),D[1]&&b===D[1]&&v.addClass(f).addClass(p[1])):D[0]&&b===D[0]&&-1===s.inArray(D[0],c.settings.disabledDates)&&(c.settings.enabledDates.length<1||-1!==s.inArray(D[0],c.settings.enabledDates))&&v.addClass(f).addClass(p[0])),C.push(v);var H=o;v.bind("click",(function(e){e.preventDefault(),e.stopPropagation();var t=s(this),a=t.data("date"),o=0,i=!1;if(t.hasClass(n.getSubClass("unitDisabled")))i=!0;else if(!0===u.input&&!1===c.settings.multiple&&!1===c.settings.buttons)H.val(d(a).format(c.settings.format)),M.triggerHandler("apply."+n.getClass(r.name));else if(null!==u.initialize&&u.initialize.format("YYYY-MM-DD")===a&&!1===c.settings.toggle);else{if(!0===c.settings.toggle){var l=u.storage.activeDates.filter((function(e,t){return e===a}));if(u.current[o]=d(a),l.length<1)u.storage.activeDates.push(a),t.addClass(g).removeClass(y);else{for(var b=0,v=0;v<u.storage.activeDates.length;v++){var k=u.storage.activeDates[v];if(a===k){b=v;break}}u.storage.activeDates.splice(b,1),t.removeClass(g).addClass(y)}}else if(!0===t.hasClass(f)&&!1===c.settings.pickWeeks)!0===c.settings.multiple&&(t.hasClass(p[0])?o=0:p[1]&&(o=1)),t.removeClass(f).removeClass(p[o]),u.current[o]=null;else{if(!0===c.settings.pickWeeks)if(!0===t.hasClass(f)||!0===t.hasClass(m)){for(var A=0;A<2;A++)u.calendar.find("."+f+"."+p[A]).removeClass(f).removeClass(p[A]);u.current[0]=null,u.current[1]=null}else{u.current[0]=d(a).startOf("week").add(c.settings.week,"days"),u.current[1]=d(a).endOf("week").add(c.settings.week,"days");for(var x=0;x<2;x++)u.calendar.find("."+f+"."+p[x]).removeClass(f).removeClass(p[x]),u.calendar.find(n.format('.{0}[data-date="{1}"]',n.getSubClass("unit"),u.current[x].format("YYYY-MM-DD"))).addClass(f).addClass(p[x])}else!0===c.settings.multiple&&(null===u.current[0]?o=0:null===u.current[1]?o=1:(o=0,u.current[1]=null,u.calendar.find("."+f+"."+p[1]).removeClass(f).removeClass(p[1]))),u.calendar.find("."+f+"."+p[o]).removeClass(f).removeClass(p[o]),t.addClass(f).addClass(p[o]),u.current[o]=d(a);if(u.current[0]&&u.current[1]){if(u.current[0].diff(u.current[1])>0){var w=u.current[0];u.current[0]=u.current[1],u.current[1]=w,w=null,u.calendar.find("."+f).each((function(){var e=s(this);for(var t in p){var n=p[t];e.toggleClass(n)}}))}if(!1===function(e,t){var n;for(var r in c.settings.disabledDates)if(n=d(c.settings.disabledDates[r]),Y(e,t,n))return!1;if(Y(e,t,c.settings.maxDate))return!1;if(Y(e,t,c.settings.minDate))return!1;for(var a in c.settings.disabledRanges){var o=c.settings.disabledRanges[a],i=d(o[0]),s=d(o[1]);if(Y(e,t,i)||Y(e,t,s))return!1}var l,u=e.weekday(),m=t.weekday();u>m&&(l=u,u=m,m=l);for(var _=0,h=0;_<c.settings.disabledWeekdays.length&&h<7;_++){h++;var f=c.settings.disabledWeekdays[_];if(f>=u&&f<=m)return!1}return!0}(u.current[0],u.current[1])&&!1===c.settings.selectOver&&(u.current[0]=null,u.current[1]=null,u.calendar.find("."+f).removeClass(f).removeClass(p[0]).removeClass(p[1])),!0===u.input&&!1===c.settings.buttons){var C=[];null!==u.current[0]&&C.push(u.current[0].format(c.settings.format)),null!==u.current[1]&&C.push(u.current[1].format(c.settings.format)),t.val(C.join(", ")),M.trigger("apply."+n.getClass(r.name))}}}!0===c.settings.multiple&&(u.calendar.find("."+m).removeClass(m).removeClass(_).removeClass(h),L.call()),c.settings.schedules.length>0&&(u.storage.schedules=c.settings.schedules.filter((function(e){return e.date===a})))}var D=function(e){u.date.all.push(e),function(e){if(-1!==c.settings.disabledDates.indexOf(e))return!1;if(e.diff(c.settings.maxDate)>=0)return!1;if(e.diff(c.settings.minDate)<=0)return!1;for(var t in c.settings.disabledRanges){var n=c.settings.disabledRanges[t],r=d(n[0]),a=d(n[1]);if(Y(r,a,e))return!1}var o=e.weekday();return-1===c.settings.disabledWeekdays.indexOf(o)}(d(e))?u.date.enabled.push(e):u.date.disabled.push(e)};if(u.current[0])if(u.current[1])for(var T=u.current[0].clone();T.format("YYYY-MM-DD")<=u.current[1].format("YYYY-MM-DD");T.add("1","days"))D(T.clone());else D(u.current[0].clone());!1===i&&(u.initialize=null,"function"==typeof c.settings.select&&c.settings.select.call(t,u.current,u)),"function"==typeof c.settings.click&&c.settings.click.call(t,e,u)}))},P=u.dateManager.firstDay;P<=u.dateManager.lastDay;P++)H(P);for(var O=w+1;C.length<5*c.settings.weeks.length;O++){O<0&&(O=a.languages.weeks.en.length-O);var F=s(n.format('<div class="{0} {0}-{1}"></div>',n.getSubClass("unit"),a.languages.weeks.en[O%a.languages.weeks.en.length].toLowerCase()));C.push(F)}for(var E=null,W=0;W<C.length;W++){var z=C[W];(W%c.settings.weeks.length==0||W+1>=C.length)&&(null!==E&&E.appendTo(v),W+1<C.length&&(E=s(n.format('<div class="{0}"></div>',n.getSubClass("row"))))),E.append(z)}u.calendar.find("."+t.top+"-nav").bind("click",(function(n){n.preventDefault(),n.stopPropagation();var r=s(this),a="unkown";r.hasClass(t.top+"-prev")?(a="prev",u.dateManager=new e(u.dateManager.date.clone().add(-1,"months"))):r.hasClass(t.top+"-next")&&(a="next",u.dateManager=new e(u.dateManager.date.clone().add(1,"months"))),"function"==typeof c.settings.page&&c.settings.page.call(r,{type:a,year:u.dateManager.year,month:u.dateManager.month,day:u.dateManager.day},u),"function"==typeof c.settings[a]&&c.settings[a].call(r,{type:a,year:u.dateManager.year,month:u.dateManager.month,day:u.dateManager.day},u),u.renderer.call()})),!0===c.settings.multiple&&(u.calendar.find("."+m).removeClass(m).removeClass(_).removeClass(h),L.call())},u.renderer.call(),o[0][r.name]=u,"function"==typeof c.settings.init&&c.settings.init.call(o,u)}))}})),a("methods/setting",["../component/global","../configures/i18n","jquery"],(function(e,t,n){return function(t){var r=n.extend({language:e.language,languages:{},week:null,format:null},t),a=12;if(e.language=r.language,Object.keys(r.languages).length>0){var o=function(t){var n=r.languages[t];if("string"!=typeof t&&console.error("global configuration is failed.\nMessage: language key is not a string type.",t),!n.weeks)return console.warn("Warning: `weeks` option of `"+t+"` language is missing."),"break";if(!n.monthsLong)return console.warn("Warning: `monthsLong` option of `"+t+"` language is missing."),"break";if(!n.months)return console.warn("Warning: `months` option of `"+t+"` language is missing."),"break";if(!n.controls)return console.warn("Warning: `controls` option of `"+t+"` language is missing."),"break";if(n.weeks){if(n.weeks.length<7)return console.error("`weeks` must have least 7 items."),"break";7!==n.weeks.length&&console.warn("`weeks` option over 7 items. We recommend to give 7 items.")}if(n.monthsLong){if(n.monthsLong.length<a)return console.error("`monthsLong` must have least 12 items."),"break";n.monthsLong.length!==a&&console.warn("`monthsLong` option over 12 items. We recommend to give 12 items.")}if(n.months){if(n.months.length<a)return console.error("`months` must have least 12 items."),"break";n.months.length!==a&&console.warn("`months` option over 12 items. We recommend to give 12 items.")}if(n.controls){if(!n.controls.ok)return console.error("`controls.ok` value is missing in your language setting"),"break";if(!n.controls.cancel)return console.error("`controls.cancel` value is missing in your language setting"),"break"}-1===e.languages.supports.indexOf(t)&&e.languages.supports.push(t),["weeks","monthsLong","months","controls"].map((function(r){e.languages[r][t]&&console.warn("`"+t+"` language is already given however it will be overwriten."),e.languages[r][t]=n[r]||e.languages[r][t.defaultLanguage]}))};for(var i in r.languages)if("break"===o(i))break}r.week&&("number"==typeof r.week?e.week=r.week:console.error("global configuration is failed.\nMessage: You must give `week` option as number type.")),r.format&&("string"==typeof r.format?e.format=r.format:console.error("global configuration is failed.\nMessage: You must give `format` option as string type."))}})),a("methods/select",["../component/helper","jquery"],(function(e,t){return function(n){this.each((function(){var r=this.local.dateManager,a=e.format("{0}-{1}-{2}",r.year,r.month,n);t(this).find(e.format('.{0}[data-date="{1}"]',e.getSubClass("unit"),a)).triggerHandler("click")}))}})),a("methods/set",["jquery","moment","../manager/index","../component/models"],(function(e,t,n,r){return function(a){if(a){var o=a.split("~").map((function(t){return e.trim(t)||null}));this.each((function(){var a=e(this)[0][r.name],i=a.context,s=[o[0]?t(o[0],i.settings.format):null,o[1]?t(o[1],i.settings.format):null];if(a.dateManager=new n(s[0]),!0===i.settings.pickWeeks&&s[0]){var d=s[0];s[0]=d.clone().startOf("week"),s[1]=d.clone().endOf("week")}!0===i.settings.toggle?a.storage.activeDates=o:a.current=s,a.renderer.call()}))}}})),a("methods/index",["./init","./configure","./setting","./select","./set"],(function(e,t,n,r,a){return{init:e,configure:t,setting:n,select:r,set:a}})),a("component/polyfills",[],(function(){Array.prototype.filter||(Array.prototype.filter=function(e){"use strict";if(null===this)throw new TypeError;var t=Object(this),n=t.length>>>0;if("function"!=typeof e)return[];for(var r=[],a=arguments[1],o=0;o<n;o++)if(o in t){var i=t[o];e.call(a,i,o,t)&&r.push(i)}return r})})),a("core",["./methods/index","./component/models","./component/polyfills"],(function(e,t){"use strict";return window[t.name]={version:t.version},e})),a("main",["core","component/models"],(function(e,t){"use strict";var n=function(t,n){return void 0!==e[n]?e[n].apply(t,Array.prototype.slice.call(arguments,2)):"object"!==i(n)&&n?void console.error("Argument error are occured."):e.init.apply(t,Array.prototype.slice.call(arguments,1))};for(var r in n.component={},t)n.component[r]=t[r];return n}));var s=r("main"),d=r("component/models"),l=r("jquery"),u=window||{};for(var c in u.moment=r("moment"),l.fn[d.name]=function(e){return s.apply(s,[this,e].concat(Array.prototype.splice.call(arguments,1)))},d)l.fn[d.name][c]=d[c];a("plugins/jquery.js",(function(){}))}(0,t)}.apply(t,r))||(e.exports=a)},7025:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(2777);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},8967:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(6403);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},9349:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(1169);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},4493:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(3353);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},3875:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(2884);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},2388:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(8216);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},2045:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(952);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},9430:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(6498);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},3577:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(6263);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},7113:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(8622);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},7323:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(8236);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},5139:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(9402);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},4277:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(215);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},9620:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(4800);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},7451:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(5222);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},3071:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(3379),a=n.n(r),o=n(6647);a()(o.Z,{insert:"head",singleton:!1});const i=o.Z.locals||{}},3379:(e,t,n)=>{"use strict";var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],a=0;a<e.length;a++){var s=e[a],d=t.base?s[0]+t.base:s[0],l=n[d]||0,u="".concat(d," ").concat(l);n[d]=l+1;var c=i(u),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==c?(o[c].references++,o[c].updater(m)):o.push({identifier:u,updater:f(m,t),references:1}),r.push(u)}return r}function d(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function c(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function m(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var _=null,h=0;function f(e,t){var n,r,a;if(t.singleton){var o=h++;n=_||(_=d(t)),r=c.bind(null,n,o,!1),a=c.bind(null,n,o,!0)}else n=d(t),r=m.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var d=s(e,t),l=0;l<n.length;l++){var u=i(n[l]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=d}}}},2675:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0}),n(2769),r((function(){var e={week:1,lang:"custom",multiple:!0,buttons:!0,format:"DD.MM.YYYY",weeks:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],monthsLong:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],months:["Янв","Февр","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Нояб","Дек"],controls:{cancel:"Очистить",ok:"Применить"}};r(".dropdown-dates .calendar").pignoseCalendar(r.extend(e,{apply:function(e,t){r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown:first").trigger("click")},select:function(e,t){null!=e[0].format()?r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[0].innerText=e[0].format("DD.MM.YYYY"):r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[0].innerText="ДД.ММ.ГГГГ",null!=e[1]?r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[1].innerText=e[1].format("DD.MM.YYYY"):r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[1].innerText="ДД.ММ.ГГГГ"}})),r(".dropdown-block .calendar").pignoseCalendar(r.extend(e,{apply:function(e,t){r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").trigger("click")},select:function(e,t){if(null!=e[0].format()&&null!=e[1]){var n=t.context.settings.months[e[0].format("M")-1],a=t.context.settings.months[e[1].format("M")-1];r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").html(e[0].format("D")+" "+n+" - "+e[1].format("D")+" "+a)}else r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").html("Выберите диапазон дат...")}})),r(".dropdown-block__dropdown").on("click",(function(){var e;0!=r(this).closest(".dropdown-dates").length?e=r(this).closest(".dropdown-dates").find(".calendar-block"):0!=r(this).closest(".dropdown-block").length&&(e=r(this).closest(".dropdown-block").find(".calendar-block")),e.hasClass("calendar-block_hide")?(e.removeClass("calendar-block_hide").addClass("calendar-block_open"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("calendar-block_hide").removeClass("calendar-block_open"),r(this).removeClass("dropdown-block__dropdown_items-show"))})),r(".pignose-calendar-button-cancel").on("click",(function(e){e.preventDefault(),0!=r(this).closest(".dropdown-dates").length?(r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[0].innerText="ДД.ММ.ГГГГ",r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown")[1].innerText="ДД.ММ.ГГГГ",r(this).closest(".dropdown-dates").find(".dropdown-block__dropdown:first").trigger("click")):0!=r(this).closest(".dropdown-block").length&&(r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").html("Выберите диапазон дат..."),r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").trigger("click"))})),r(document).on("click",(function(e){var t=r(e.target),n=1==t.hasClass("dropdown-block__dropdown"),a=r(".calendar-block").hasClass("calendar-block_open");!n&&a&&(0!=t.closest(".calendar-block_open").length||t.hasClass("calendar-block_open")||(0!=r(".calendar-block_open").closest(".dropdown-dates").length&&r(".calendar-block_open").closest(".dropdown-dates").find(".dropdown-block__dropdown:first").trigger("click"),0!=r(".calendar-block_open").closest(".dropdown-block").length&&r(".calendar-block_open").closest(".dropdown-block").find(".dropdown-block__dropdown").trigger("click")))}))}))},9779:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9755);r((function(){function e(e){var t="";"guests"==e.attr("name")&&(t=function(e){for(var t,n,r=e.find(".dropdown-block__items-line"),a="",o=0,i=0,s=0;s<r.length;s++)t=r[s].querySelector(".dropdown-block__block-qty span"),n=r[s].querySelector("h3"),parseInt(t.innerHTML)>0&&"младенцы"!=n.innerHTML&&(o+=parseInt(t.innerHTML)),parseInt(t.innerHTML)>0&&"младенцы"==n.innerHTML&&(i+=parseInt(t.innerHTML));return 0==o&&(a="Сколько гостей"),0!=o&&0!=i&&(a=o+" гостя, "+i+" младенец"),0!=o&&0==i&&(a=o+" гостя"),a}(e)),"room"==e.attr("name")&&(t=function(e){for(var t,n,r=e.find(".dropdown-block__items-line"),a="",o=0;o<r.length;o++)t=r[o].querySelector(".dropdown-block__block-qty span"),n=r[o].querySelector("h3"),parseInt(t.innerHTML)>0&&(a=a+t.innerHTML+" "+n.innerHTML+", ");return""==(a=a.substr(0,a.length-2))&&(a="Выберите удобства"),a}(e)),t.length>19&&(t=t.substr(0,20)+"..."),e.find(".dropdown-block__dropdown").html(t)}r(".dropdown-block__dropdown").on("click",(function(){var e=r(this).closest(".dropdown-block").find(".dropdown-block__dropdown-items");e.hasClass("dropdown-block__dropdown-items_hide")?(e.removeClass("dropdown-block__dropdown-items_hide"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("dropdown-block__dropdown-items_hide"),r(this).removeClass("dropdown-block__dropdown_items-show"))})),r(".dropdown-block__inc-qty-minus").on("click",(function(){var t,n,a=0;if(t=r(this).closest(".dropdown-block__block-qty").find("span"),(n=parseInt(t.html()))>0&&(a=n-1,t.html(a)),1==n||0==n)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var o=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-plus");o.hasClass("dropdown-block__inc-qty_disable")&&o.removeClass("dropdown-block__inc-qty_disable")}e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__inc-qty-plus").on("click",(function(){var t,n,a=0;if(t=r(this).closest(".dropdown-block__block-qty").find("span"),(n=parseInt(t.html()))<10&&(a=n+1,t.html(a)),9==n||10==n)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var o=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-minus");o.hasClass("dropdown-block__inc-qty_disable")&&o.removeClass("dropdown-block__inc-qty_disable")}e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__btns .link_ok").on("click",(function(){event.preventDefault(),r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").click(),e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__btns .link_clean").on("click",(function(){event.preventDefault();var t=r(this).closest(".dropdown-block__dropdown-items");t.find(".dropdown-block__block-qty").find("span").html("0"),t.find(".dropdown-block__inc-qty-minus").addClass("dropdown-block__inc-qty_disable"),e(r(this).closest(".dropdown-block"))}))}))},232:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0}),n(6688),r((function(){r("input[name='date']").mask("99.99.9999")}))},1390:(e,t,n)=>{var r=n(9755);r((function(){r(".like").on("click",(function(){var e=parseInt(r(this).find(".like__sum").html());r(this).hasClass("like_liked")?(r(this).removeClass("like_liked"),r(this).find(".like__ico").removeClass("like__ico_liked"),r(this).find(".like__sum").removeClass("like__sum_liked"),r(this).find(".like__sum").html(e-1)):(r(this).addClass("like_liked"),r(this).find(".like__ico").addClass("like__ico_liked"),r(this).find(".like__sum").addClass("like__sum_liked"),r(this).find(".like__sum").html(e+1))}))}))},5238:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7757);new r(document.getElementById("oilChart"),{type:"doughnut",data:{labels:["Великолепно","Хорошо","Удовлетворительно","Разочарован"],datasets:[{data:[130,65,65,0],backgroundColor:["#FFE39C","#BC9CFF","#6FCF97","#909090"],borderColor:"white",borderWidth:2}]},options:{rotation:.5*Math.PI,cutoutPercentage:90,circumference:2*Math.PI,legend:{position:"right",align:"end",labels:{usePointStyle:!0,boxWidth:9,padding:10,fontFamily:"Arial",fontSize:14}},animation:{animateRotate:!1,animateScale:!1},tooltips:{enabled:!1}}}),r.defaults.global.elements.defaultFontFamily="sans-serif",r.defaults.global.defaultFontSize=18},7869:(e,t,n)=>{"use strict";e.exports=n.p+"317b418ed317e258b173.ttf"},7771:(e,t,n)=>{"use strict";e.exports=n.p+"3db65dc4b858f0fed4fb.woff"},3988:(e,t,n)=>{"use strict";e.exports=n.p+"8b56391ed36ea95337c6.woff2"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";n(3071),n(9620),n(7025),n(9349),n(4493),n(9779),n(3875),n(2045),n(9430),n(3577),n(232),n(7113),n(1390),n(7323),n(5139),n(4277),n(8967),n(2675),n(2388),n(7451),n(5238)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,