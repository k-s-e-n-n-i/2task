/*! For license information please see search-room.js.LICENSE.txt */
(()=>{var e={2777:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(1403),d=n(5113),p=a()(o()),u=l()(c.Z),f=l()(d.Z);p.push([e.id,".btn{border-radius:22px;height:26px;padding:4px 0;cursor:pointer;margin:15px 20px 15px 0;position:relative;text-align:center}.btn.btn_border{background-color:#fff;border:1px #BC9CFF solid;height:22px;border-width:2px}.btn.btn_border .btn__link{color:#BC9CFF}.btn.btn_gradient{background:linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);color:#ffffff}.btn.btn_gradient.btn_gradient_pay{width:320px}.btn:hover,.btn:focus,.btn.btn_hover{opacity:0.5}.btn .btn__link{color:#ffffff;font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;text-align:center;text-transform:uppercase;text-decoration:none;-webkit-user-select:none}.btn .btn__arrow{position:absolute;bottom:12px;right:15px;content:'';width:20px;height:20px;cursor:pointer;position:absolute;top:13px;right:11px;background-repeat:no-repeat;background-image:url("+u+")}.btn .btn__arrow.btn__arrow_white{background-image:url("+f+")}\n","",{version:3,sources:["webpack://./src/blocks/btn/btn.scss"],names:[],mappings:"AAAA,KACE,kBAAmB,CACnB,WAAY,CACZ,aAAc,CACd,cAAe,CACf,uBAAwB,CACxB,iBAAkB,CAClB,iBAAkB,CAPpB,gBAUI,qBAAsB,CACtB,wBAAyB,CAEzB,WAAY,CACZ,gBAAiB,CAdrB,2BAiBM,aAAc,CAjBpB,kBAsBI,4DAA6D,CAC7D,aAAc,CAvBlB,mCA0BM,WAAY,CA1BlB,qCAiCI,WAAY,CAjChB,gBAqCI,aAAc,CACd,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,iBAAkB,CAClB,wBAAyB,CACzB,oBAAqB,CACrB,wBAAyB,CA7C7B,iBAiDI,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,2BAA4B,CAC5B,wDAA8C,CA5DlD,kCA+DM,wDAAoD",sourcesContent:[".btn{\r\n  border-radius: 22px;\r\n  height: 26px;\r\n  padding: 4px 0;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  &.btn_border{\r\n    background-color: #fff;\r\n    border: 1px #BC9CFF solid;\t\r\n\r\n    height: 22px;\r\n    border-width: 2px;\r\n\r\n    .btn__link{\r\n      color: #BC9CFF;\r\n    }\r\n  }\r\n\r\n  &.btn_gradient{\r\n    background: linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);\r\n    color: #ffffff;\t\r\n\r\n    &.btn_gradient_pay{\r\n      width: 320px;\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &.btn_hover{\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .btn__link{\r\n    color: #ffffff;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    -webkit-user-select: none;\r\n  }\r\n\r\n  .btn__arrow{\r\n    position: absolute;\r\n    bottom: 12px;\r\n    right: 15px;\r\n    content: '';\r\n    width: 20px;\r\n    height: 20px;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 13px;\r\n    right: 11px;\r\n    background-repeat: no-repeat;\r\n    background-image: url('@Blocks/btn/arrow.svg');\r\n    \r\n    &.btn__arrow_white{\t\r\n      background-image: url('@Blocks/btn/arrow-white.svg');\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const h=p},9584:(e,t,n)=>{"use strict";n.d(t,{Z:()=>I});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(8559),d=n(257),p=n(8234),u=n(1988),f=n(1139),h=n(4726),A=n(7718),m=n(975),g=n(8315),_=n(6771),b=n(1696),C=n(5217),x=a()(o()),y=l()(c.Z),B=l()(d.Z),w=l()(p.Z),v=l()(u.Z),k=l()(f.Z),S=l()(h.Z),E=l()(A.Z),T=l()(m.Z),D=l()(g.Z),q=l()(_.Z),j=l()(b.Z),M=l()(C.Z);x.push([e.id,".card-room{width:270px;height:257px;background:#FFFFFF;box-shadow:0px 10px 20px rgba(31,32,65,0.05);border-radius:4px;margin:12px 2.5px 9px 7.4px}.card-room .card-room__image{width:270px;height:150px;border-radius:4px 4px 0 0;background-size:cover;position:relative}.card-room .card-room__image.images1{background-image:url("+y+")}.card-room .card-room__image.images2{background-image:url("+B+")}.card-room .card-room__image.images3{background-image:url("+w+")}.card-room .card-room__image.images4{background-image:url("+v+")}.card-room .card-room__image.images5{background-image:url("+k+")}.card-room .card-room__image.images6{background-image:url("+S+")}.card-room .card-room__image.images7{background-image:url("+E+")}.card-room .card-room__image.images8{background-image:url("+T+")}.card-room .card-room__image.images9{background-image:url("+D+")}.card-room .card-room__image.images10{background-image:url("+q+")}.card-room .card-room__image.images11{background-image:url("+j+")}.card-room .card-room__image.images12{background-image:url("+M+")}.card-room .card-room__image .card-room__slider-pagination{position:absolute;bottom:14px;right:14px;display:flex;flex-wrap:nowrap}.card-room .card-room__image .card-room__slider-pagination .card-room__slider-pagination-item{width:7.5px;height:7.5px;margin:0 2px;border-radius:50%;border:1px solid #fff;cursor:pointer;box-sizing:border-box;box-shadow:0px 5px 5px rgba(31,32,65,0.3)}.card-room .card-room__image .card-room__slider-pagination .card-room__slider-pagination-item.card-room__slider-pagination-item_active{background:#fff}.card-room .card-room__info-room{margin:20px}.card-room .card-room__info-room .card-room__number-price{display:flex;justify-content:space-between;align-items:center;width:100%;position:relative;height:27px}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border{padding-bottom:8px;border:1px solid rgba(31,32,65,0.1);border-width:0 0 1px 0;margin:0 0 6px 0}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(1){color:#1f2041}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(1) span:nth-child(1){font-size:14px}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(1) span:nth-child(2){font-size:20px}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(2){color:rgba(31,32,65,0.5)}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(2) span:nth-child(1),.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(2) span:nth-child(2){font-weight:bold;font-size:14.5px}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(2) span:nth-child(2){margin-right:2px}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p:nth-child(2) span:nth-child(3){font-size:11px}.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p span:nth-child(1),.card-room .card-room__info-room .card-room__number-price.card-room__number-price_bottom-border p span:nth-child(2){font-weight:bold}.card-room .card-room__info-room .card-room__number-price p{color:rgba(31,32,65,0.5);margin:0}.card-room .card-room__info-room .card-room__number-price p span{line-height:25px}.card-room .card-room__info-room .card-room__number-price p span:nth-child(1){font-weight:bold;font-size:15px}.card-room .card-room__info-room .card-room__number-price .rate-btn{margin:0}\n","",{version:3,sources:["webpack://./src/blocks/card-room/card-room.scss"],names:[],mappings:"AAAA,WACE,WAAY,CACZ,YAAa,CACb,kBAAmB,CACnB,4CAAgD,CAChD,iBAAkB,CAClB,2BAA4B,CAN9B,6BASI,WAAY,CACZ,YAAa,CACb,yBAA0B,CAC1B,qBAAsB,CACtB,iBAAkB,CAbtB,qCAgBM,wDAAuC,CAhB7C,qCAmBM,wDAAuC,CAnB7C,qCAsBM,wDAAuC,CAtB7C,qCAyBM,wDAAuC,CAzB7C,qCA4BM,wDAAuC,CA5B7C,qCA+BM,wDAAuC,CA/B7C,qCAkCM,wDAAuC,CAlC7C,qCAqCM,wDAAuC,CArC7C,qCAwCM,wDAAuC,CAxC7C,sCA2CM,wDAAwC,CA3C9C,sCA8CM,yDAAwC,CA9C9C,sCAiDM,yDAAwC,CAjD9C,2DAqDM,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,YAAa,CACb,gBAAiB,CAzDvB,8FA4DQ,WAAY,CACZ,YAAa,CACb,YAAa,CACb,iBAAkB,CAClB,qBAAsB,CACtB,cAAe,CACf,qBAAsB,CACtB,yCAA6C,CAnErD,uIAsEU,eAAgB,CAtE1B,iCA8EI,WAAY,CA9EhB,0DAiFM,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,UAAW,CACX,iBAAkB,CAClB,WAAY,CAtFlB,gGAyFQ,kBAAmB,CACnB,mCAAuC,CACvC,sBAAuB,CACvB,gBAAiB,CA5FzB,+GAiGY,aAA0B,CAjGtC,iIAsGgB,cAAe,CAtG/B,iIA0GgB,cAAe,CA1G/B,+GAgHY,wBAA4B,CAhHxC,kQAsHgB,gBAAiB,CACjB,gBAAiB,CAvHjC,iIA2HgB,gBAAiB,CA3HjC,iIA+HgB,cAAe,CA/H/B,wOAwIc,gBAAiB,CAxI/B,4DA+IQ,wBAA4B,CAC5B,QAAS,CAhJjB,iEAmJU,gBAAiB,CAnJ3B,8EAqJY,gBAAiB,CACjB,cAAe,CAtJ3B,oEA4JQ,QAAS",sourcesContent:[".card-room{\r\n  width: 270px;\r\n  height: 257px;\r\n  background: #FFFFFF;\r\n  box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n  border-radius: 4px;\r\n  margin: 12px 2.5px 9px 7.4px;\r\n\r\n  .card-room__image{\r\n    width: 270px;\r\n    height: 150px;\r\n    border-radius: 4px 4px 0 0;\t\r\n    background-size: cover;\t\r\n    position: relative;\r\n\r\n    &.images1{\r\n      background-image: url('img/image1.png');\r\n    }\r\n    &.images2{\r\n      background-image: url('img/image2.png');\r\n    }\r\n    &.images3{\r\n      background-image: url('img/image3.png');\r\n    }\r\n    &.images4{\r\n      background-image: url('img/image4.png');\r\n    }\r\n    &.images5{\r\n      background-image: url('img/image5.png');\r\n    }\r\n    &.images6{\r\n      background-image: url('img/image6.png');\r\n    }\r\n    &.images7{\r\n      background-image: url('img/image7.png');\r\n    }\r\n    &.images8{\r\n      background-image: url('img/image8.png');\r\n    }\r\n    &.images9{\r\n      background-image: url('img/image9.png');\r\n    }\r\n    &.images10{\r\n      background-image: url('img/image10.png');\r\n    }\r\n    &.images11{\r\n      background-image: url('img/image11.png');\r\n    }\r\n    &.images12{\r\n      background-image: url('img/image12.png');\r\n    }\r\n\r\n    .card-room__slider-pagination{\r\n      position: absolute;\r\n      bottom: 14px;\r\n      right: 14px;\r\n      display: flex;\r\n      flex-wrap: nowrap;\r\n      \r\n      .card-room__slider-pagination-item{\r\n        width: 7.5px;\r\n        height: 7.5px;\r\n        margin: 0 2px;\r\n        border-radius: 50%;\r\n        border: 1px solid #fff;\r\n        cursor: pointer;\r\n        box-sizing: border-box;\r\n        box-shadow: 0px 5px 5px rgba(31, 32, 65, 0.3);\r\n\r\n        &.card-room__slider-pagination-item_active{\r\n          background: #fff;\r\n        }\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  .card-room__info-room{\r\n    margin: 20px;\r\n\r\n    .card-room__number-price{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      width: 100%;\r\n      position: relative;\r\n      height: 27px;\r\n      \r\n      &.card-room__number-price_bottom-border{\r\n        padding-bottom: 8px;\r\n        border: 1px solid rgba(31, 32, 65, 0.1);\r\n        border-width: 0 0 1px 0;\r\n        margin: 0 0 6px 0;\r\n\r\n        p{\r\n\r\n          &:nth-child(1){\r\n            color: rgba(31, 32, 65, 1);\r\n\r\n            span{\r\n\r\n              &:nth-child(1){\r\n                font-size: 14px;\r\n              }\r\n\r\n              &:nth-child(2){\r\n                font-size: 20px;\r\n              }\r\n            }\r\n          }\r\n\r\n          &:nth-child(2){\r\n            color: rgba(31, 32, 65, 0.5);\r\n\r\n            span{\r\n\r\n              &:nth-child(1),\r\n              &:nth-child(2){\r\n                font-weight: bold;\r\n                font-size: 14.5px;\r\n              }\r\n\r\n              &:nth-child(2){\r\n                margin-right: 2px;\r\n              }\r\n\r\n              &:nth-child(3){\r\n                font-size: 11px;\r\n              }\r\n            }\r\n          }\r\n\r\n          span{\r\n\r\n            &:nth-child(1),\r\n            &:nth-child(2){\r\n              font-weight: bold;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      p{\r\n        color: rgba(31, 32, 65, 0.5);\r\n        margin: 0;\r\n\r\n        span{\r\n          line-height: 25px;\r\n          &:nth-child(1){\r\n            font-weight: bold;\r\n            font-size: 15px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .rate-btn{\r\n        margin: 0;\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const I=x},5890:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".checkbox-list-expandable{margin:50px 0 17px 0}.checkbox-list-expandable .checkbox-list-expandable__topicBlock{position:relative}.checkbox-list-expandable .checkbox-list-expandable__topicBlock .checkbox-list-expandable__expand{width:10px;height:10px;position:absolute;bottom:2px;right:15px;cursor:pointer}.checkbox-list-expandable .checkbox-list-expandable__topicBlock .checkbox-list-expandable__expand.checkbox-list-expandable__expand_open{transform:rotate(180deg)}.checkbox-list-expandable .checkbox-list-expandable__topicBlock h3{margin:0;cursor:pointer}\n","",{version:3,sources:["webpack://./src/blocks/checkbox-list-expandable/checkbox-list-expandable.scss"],names:[],mappings:"AAAA,0BACE,oBAAqB,CADvB,gEAII,iBAAkB,CAJtB,kGAOM,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,UAAW,CACX,UAAW,CACX,cAAe,CAZrB,wIAeQ,wBAAyB,CAfjC,mEAoBM,QAAS,CACT,cAAe",sourcesContent:[".checkbox-list-expandable{\r\n  margin: 50px 0 17px 0;\r\n\r\n  .checkbox-list-expandable__topicBlock{\r\n    position: relative;\r\n\r\n    .checkbox-list-expandable__expand{\r\n      width: 10px;\r\n      height: 10px;\r\n      position: absolute;\r\n      bottom: 2px;\r\n      right: 15px;\r\n      cursor: pointer;\r\n\r\n      &.checkbox-list-expandable__expand_open{\r\n        transform: rotate(180deg);\r\n      }\r\n    }\r\n\r\n    h3{\r\n      margin: 0;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=a},698:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".checkbox-list{margin-top:17px;width:230px}.checkbox-list.checkbox-list_hide{display:none}.checkbox-list .checkbox-list__item .checkbox-list__input{display:none}.checkbox-list .checkbox-list__item .checkbox-list__input:checked+.checkbox-list__label:after{content:'';position:absolute;width:4px;height:6px;border-style:solid;border-width:0 2px 2px 0;border-color:#BC9CFF;transform:rotate(45deg);left:7px;top:5px}.checkbox-list .checkbox-list__item .checkbox-list__input:checked+.checkbox-list__label:before{border-color:#BC9CFF}.checkbox-list .checkbox-list__item .checkbox-list__label{display:inline-block;cursor:pointer;position:relative;padding:0 0 10px 30px;font-size:14px;line-height:20px;color:rgba(31,32,65,0.5);width:auto}.checkbox-list .checkbox-list__item .checkbox-list__label:before{content:'';display:inline-block;position:absolute;left:0;background-color:#fff;width:20px;height:20px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:4px}.checkbox-list .checkbox-list__item .checkbox-list__label.checkbox-list__label_bold{color:rgba(31,32,65,0.75);font-weight:bold;font-size:14.5px;line-height:18px}.checkbox-list .checkbox-list__item p{padding-left:30px;color:rgba(31,32,65,0.5);font-size:12px;line-height:14px;margin:-4px 0 10px 0}.checkbox-list .checkbox-list__item p.checkbox-list__p_width200{width:200px}.checkbox-list .checkbox-list__item p.checkbox-list__p_width225{width:225px}\n","",{version:3,sources:["webpack://./src/blocks/checkbox-list/checkbox-list.scss"],names:[],mappings:"AAAA,eACE,eAAgB,CAChB,WAAY,CAFd,kCAKI,YAAa,CALjB,0DAWM,YAAa,CAXnB,8FAgBU,UAAW,CACX,iBAAkB,CAClB,SAAU,CACV,UAAW,CACX,kBAAmB,CACnB,wBAAyB,CACzB,oBAAqB,CACrB,uBAAwB,CACxB,QAAS,CACT,OAAQ,CAzBlB,+FA6BU,oBAAqB,CA7B/B,0DAmCM,oBAAqB,CACrB,cAAe,CACf,iBAAkB,CAClB,qBAAsB,CACtB,cAAe,CACf,gBAAiB,CACjB,wBAA4B,CAC5B,UAAW,CA1CjB,iEA6CQ,UAAW,CACX,oBAAqB,CACrB,iBAAkB,CAClB,MAAO,CACP,qBAAsB,CACtB,UAAW,CACX,WAAY,CACZ,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAtD1B,oFA0DQ,yBAA6B,CAC7B,gBAAiB,CACjB,gBAAiB,CACjB,gBAAiB,CA7DzB,sCAkEM,iBAAkB,CAClB,wBAA4B,CAC5B,cAAe,CACf,gBAAiB,CACjB,oBAAqB,CAtE3B,gEAyEQ,WAAY,CAzEpB,gEA6EQ,WAAY",sourcesContent:[".checkbox-list{\r\n  margin-top: 17px;\r\n  width: 230px;\r\n\r\n  &.checkbox-list_hide{\r\n    display: none;\r\n  }\r\n\r\n  .checkbox-list__item{\r\n\r\n    .checkbox-list__input{\r\n      display: none;\r\n\r\n      &:checked + .checkbox-list__label{\r\n\r\n        &:after{\r\n          content: '';\r\n          position: absolute;\r\n          width: 4px;\r\n          height: 6px;\r\n          border-style: solid;\r\n          border-width: 0 2px 2px 0;\r\n          border-color: #BC9CFF;\r\n          transform: rotate(45deg);\r\n          left: 7px;\r\n          top: 5px;\r\n        }\r\n\r\n        &:before{\r\n          border-color: #BC9CFF;\r\n        }\r\n      }\r\n    }\r\n\r\n    .checkbox-list__label{\r\n      display: inline-block;\r\n      cursor: pointer;\r\n      position: relative;\r\n      padding: 0 0 10px 30px;\r\n      font-size: 14px;\r\n      line-height: 20px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      width: auto;\r\n\r\n      &:before{\r\n        content: '';\r\n        display: inline-block;\r\n        position: absolute;\r\n        left: 0;\r\n        background-color: #fff;\r\n        width: 20px;\r\n        height: 20px;\r\n        border: 1px solid rgba(31, 32, 65, 0.25);\r\n        box-sizing: border-box;\r\n        border-radius: 4px;\r\n      }\r\n\r\n      &.checkbox-list__label_bold{\t\t\t\r\n        color: rgba(31, 32, 65, 0.75);\r\n        font-weight: bold;\r\n        font-size: 14.5px;\r\n        line-height: 18px;\r\n      }\r\n    }\r\n\r\n    p{\r\n      padding-left: 30px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      font-size: 12px;\r\n      line-height: 14px;\r\n      margin: -4px 0 10px 0;\r\n\r\n      &.checkbox-list__p_width200{\r\n        width: 200px;\r\n      }\r\n\r\n      &.checkbox-list__p_width225{\r\n        width: 225px;\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=a},3353:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(783),d=a()(o()),p=l()(c.Z);d.push([e.id,".dropdown-block{position:relative;width:100%}.dropdown-block .dropdown-block__dropdown{position:relative;color:rgba(31,32,65,0.75);border-radius:4px;width:100%;cursor:pointer;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;height:44px;padding:8px 14px;margin-top:5px;font-family:Montserrat, Arial, sans-serif;font-weight:normal;font-style:normal}.dropdown-block .dropdown-block__dropdown:hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_date{width:150px;-webkit-appearance:none;font-size:14px}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_items-show{border:1px solid rgba(31,32,65,0.5);border-radius:4px 4px 0 0}.dropdown-block .dropdown-block__dropdown::before{content:'';width:15px;height:11px;position:absolute;bottom:13px;right:12px;cursor:pointer;-webkit-user-select:none;background-image:url("+p+");background-repeat:no-repeat}.dropdown-block .dropdown-block__dropdown-items{display:flex;flex-wrap:wrap;background:#fff;border-radius:0 0 4px 4px;border:1px solid rgba(31,32,65,0.5);margin-top:-1px;z-index:1;position:absolute}.dropdown-block .dropdown-block__dropdown-items.dropdown-block__dropdown-items_hide{display:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{display:flex;justify-content:space-between;color:rgba(31,32,65,0.5);margin-top:-1px;width:100%;height:40px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3{padding:13px 15px;margin:0}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns span{color:#1f2041}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty{display:flex;justify-content:space-between;align-items:center;width:92px;margin-right:7px;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus{border:1px solid rgba(31,32,65,0.25);border-radius:50%;width:30px;height:30px;font-size:20px;display:flex;justify-content:center;box-sizing:border-box;padding-top:2px;cursor:pointer}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable{cursor:default;border-color:rgba(31,32,65,0.15);color:rgba(31,32,65,0.15)}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty span{font-weight:bold}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_clean,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_clean{margin:auto 15px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_ok,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_ok{margin:auto 7px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{height:48px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns.dropdown-block__btns_flex-end{justify-content:flex-end}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_clean{margin:21px 0 0 14px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_ok{margin:21px 7px 0 0}.dropdown-dates{width:100%}.dropdown-dates .dropdown-dates__dates{display:flex;justify-content:space-between}.dropdown-dates .dropdown-dates__dates .dropdown-block{width:auto}.dropdown-dates .dropdown-dates__dates .dropdown-block .dropdown-block__dropdown_items-show{border-radius:4px}\n","",{version:3,sources:["webpack://./src/blocks/dropdown/dropdown.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,UAAW,CAFb,0CAKI,iBAAkB,CAClB,yBAA6B,CAC7B,iBAAkB,CAClB,UAAW,CACX,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,yCAA0C,CAC1C,kBAAmB,CACnB,iBAAkB,CAjBtB,gDAoBM,yBAA6B,CAC7B,mCAAuC,CArB7C,wEAyBM,WAAY,CACZ,uBAAwB,CACxB,cAAe,CA3BrB,8EA+BM,mCAAuC,CACvC,yBAA0B,CAhChC,kDAoCM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,cAAe,CACf,wBAAyB,CACzB,wDAAyD,CACzD,2BAA4B,CA7ClC,gDAkDI,YAAa,CACb,cAAe,CACf,eAAgB,CAChB,yBAA0B,CAC1B,mCAAuC,CACvC,eAAgB,CAChB,SAAU,CACV,iBAAkB,CAzDtB,oFA4DM,YAAa,CA5DnB,kJAiEM,YAAa,CACb,6BAA8B,CAC9B,wBAA4B,CAC5B,eAAgB,CAChB,UAAW,CACX,WAAY,CAtElB,wJAyEQ,iBAAkB,CAClB,QAAS,CA1EjB,oTA+EQ,aAA0B,CA/ElC,wMAmFQ,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,UAAW,CACX,gBAAiB,CACjB,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CA3F7B,0gBA+FU,oCAAwC,CACxC,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,cAAe,CACf,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CACtB,eAAgB,CAChB,cAAe,CAxGzB,0oBA2GY,cAAe,CACf,gCAAoC,CACpC,yBAA6B,CA7GzC,kNAkHU,gBAAiB,CAlH3B,oLAyHU,gBAAiB,CAzH3B,8KA6HU,eAAgB,CA7H1B,sEAmIM,WAAY,CAnIlB,oGAsIQ,wBAAyB,CAtIjC,kFA0IQ,oBAAqB,CA1I7B,+EA8IQ,mBAAoB,CACrB,gBAML,UAAW,CADb,uCAII,YAAa,CACb,6BAA8B,CALlC,uDAQM,UAAW,CARjB,4FAWQ,iBAAkB",sourcesContent:[".dropdown-block{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  .dropdown-block__dropdown{\r\n    position: relative;\r\n    color: rgba(31, 32, 65, 0.75);\r\n    border-radius: 4px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;\r\n\r\n    &:hover{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n\r\n    &.dropdown-block__dropdown_date{\r\n      width: 150px;\r\n      -webkit-appearance: none;\r\n      font-size: 14px;\r\n    }\r\n\r\n    &.dropdown-block__dropdown_items-show{\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      border-radius: 4px 4px 0 0;\r\n    }\r\n\r\n    &::before{\r\n      content: '';\r\n      width: 15px;\r\n      height: 11px;\r\n      position: absolute;\r\n      bottom: 13px;\r\n      right: 12px;\r\n      cursor: pointer;\r\n      -webkit-user-select: none;\r\n      background-image: url('@Blocks/dropdown/expand-more.svg');\r\n      background-repeat: no-repeat;\r\n    }\r\n  }\r\n\r\n  .dropdown-block__dropdown-items{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    background: #fff;\r\n    border-radius: 0 0 4px 4px;\r\n    border: 1px solid rgba(31, 32, 65, 0.5);\r\n    margin-top: -1px;\r\n    z-index: 1;\r\n    position: absolute;\r\n\r\n    &.dropdown-block__dropdown-items_hide{\r\n      display: none;\r\n    }\r\n\r\n    .dropdown-block__items-line,\r\n    .dropdown-block__btns{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      margin-top: -1px;\r\n      width: 100%;\r\n      height: 40px;\r\n\r\n      h3{\r\n        padding: 13px 15px;\r\n        margin: 0;\r\n      }\r\n\r\n      h3,\r\n      span{\r\n        color: rgba(31, 32, 65, 1);\r\n      }\r\n\r\n      .dropdown-block__block-qty{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 92px;\r\n        margin-right: 7px;\r\n        user-select: none;\r\n        -moz-user-select: none;\r\n        -webkit-user-select: none;\r\n        -ms-user-select: none;\r\n\r\n        .dropdown-block__inc-qty-minus,\r\n        .dropdown-block__inc-qty-plus{\r\n          border: 1px solid rgba(31, 32, 65, 0.25);\r\n          border-radius: 50%;\r\n          width: 30px;\r\n          height: 30px;\r\n          font-size: 20px;\r\n          display: flex;\r\n          justify-content: center;\r\n          box-sizing: border-box;\r\n          padding-top: 2px;\r\n          cursor: pointer;\r\n\r\n          &.dropdown-block__inc-qty_disable{\r\n            cursor: default;\r\n            border-color: rgba(31, 32, 65, 0.15);\r\n            color: rgba(31, 32, 65, 0.15);\r\n          }\r\n        }\r\n        \r\n        span{\r\n          font-weight: bold;\r\n        }\r\n      }\r\n\r\n      .link{\r\n\r\n        &.link_clean{\r\n          margin: auto 15px;\r\n        }\r\n\r\n        &.link_ok{\r\n          margin: auto 7px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .dropdown-block__btns{\r\n      height: 48px;\r\n\r\n      &.dropdown-block__btns_flex-end{\r\n        justify-content: flex-end;\r\n      }\r\n\r\n      .link_clean{\r\n        margin: 21px 0 0 14px;\r\n      }\r\n      \r\n      .link_ok{\r\n        margin: 21px 7px 0 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-dates{\r\n  width: 100%;\r\n\r\n  .dropdown-dates__dates{\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .dropdown-block{\r\n      width: auto;\r\n\r\n      .dropdown-block__dropdown_items-show{\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const u=d},2884:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".footer .footer__block-menu{border-top:1px solid rgba(31,32,65,0.1);border-bottom:1px solid rgba(31,32,65,0.1);display:flex;justify-content:center;width:100%;position:relative;background:#fff}.footer .footer__block-menu .footer__content-container{flex-grow:1;max-width:80.5%;min-width:400px;margin:0 auto;background:#fff}.footer .footer__block-menu .footer__content-container .footer__bottom-menu{display:flex;justify-content:space-between;flex-wrap:wrap;margin:0;padding:91px 0 89px 0;font-size:14px;color:rgba(31,32,65,0.5)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__logo{margin:10px 0 3px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block{display:block;max-width:min-content}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list{padding:0}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li{position:relative;font-size:14px;line-height:17px;padding:7px 0;line-height:24px;cursor:pointer;display:block;color:rgba(31,32,65,0.5)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li:hover>a,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li:hover>a{text-decoration:underline}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li.menu_li__active,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li.menu_li__active{font-weight:bold;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li:first-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li:first-child{font-weight:bold;color:#1F2041;font-size:12px;text-transform:uppercase;cursor:inherit;white-space:nowrap;padding:10px 0 7px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .input-text_subscription,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .input-text_subscription{margin-top:10px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .input-text_subscription .input-text__input,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .input-text_subscription .input-text__input{padding:10px 14px;font-size:14px;width:260px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:last-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:first-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:last-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:first-child{min-width:200px;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:last-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:first-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:last-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:first-child .footer__menu-li{cursor:inherit;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(3),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(3){min-width:155px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(2),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(4),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(2),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(4){min-width:155px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block{max-width:255px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block p{padding:0}.footer .footer__copyright-block{background:#fff;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.footer .footer__copyright-block .footer__copyright-content{display:flex;justify-content:space-between;align-items:center;font-size:14px;color:rgba(31,32,65,0.5);min-width:400px;max-width:80.5%;margin:0 auto}.footer .footer__copyright-block .footer__copyright-content p{margin:23px 0}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block{display:flex}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network{height:24px;width:24px;padding-left:20px;cursor:pointer}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_twitter{margin-top:-1px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_facebook{width:22px;height:22px;margin-top:1px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_instagram{width:22px;height:22px;margin-top:1px}@media (max-width: 1170px){.footer .footer__bottom-menu{text-align:center;justify-content:space-around}.footer .footer__bottom-menu .footer__menu-column{margin:10px 20px}.footer .footer__bottom-menu .footer__menu-column .footer__menu-list{width:270px}.footer .footer__bottom-menu .footer__logo{margin:10px 20px;max-width:none}.footer .footer__copyright-content{margin:23px 20px}}@media (max-width: 790px){.footer .footer__bottom-menu{display:flex;flex-direction:column;align-items:center}}@media (max-width: 620px){.footer .footer__bottom-menu{padding:90px 0 0 0}.footer .footer__bottom-menu .footer__menu-column{display:none}.footer .footer__bottom-menu .footer__logo{margin:0}.footer .footer__bottom-menu .footer__logo p{display:none}}\n","",{version:3,sources:["webpack://./src/blocks/footer/footer.scss"],names:[],mappings:"AAAA,4BAGI,uCAA2C,CAC3C,0CAA8C,CAC9C,YAAa,CACb,sBAAuB,CACvB,UAAW,CACX,iBAAkB,CAClB,eAAgB,CATpB,uDAYM,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACd,eAAgB,CAhBtB,4EAmBQ,YAAa,CACb,6BAA8B,CAC9B,cAAe,CACf,QAAS,CACT,qBAAsB,CACtB,cAAe,CACf,wBAA4B,CAzBpC,0HA8BY,iBAAkB,CA9B9B,6MAoCU,aAAc,CACd,qBAAsB,CArChC,mPAwCY,SAAU,CAxCtB,qRA2Cc,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,aAAc,CACd,gBAAiB,CACjB,cAAe,CACf,aAAc,CACd,wBAA4B,CAlD1C,qSAsDkB,yBAA0B,CAtD5C,qTA2DgB,gBAAiB,CACjB,yBAA6B,CA5D7C,6SAgEgB,gBAAiB,CACjB,aAAc,CACd,cAAe,CACf,wBAAyB,CACzB,cAAe,CACf,kBAAmB,CACnB,kBAAmB,CAtEnC,qSA2Ec,eAAgB,CA3E9B,2UA8EgB,iBAAkB,CAClB,cAAe,CACf,WAAY,CAhF5B,wcAsFY,eAAgB,CAChB,yBAA6B,CAvFzC,4gBA0Fc,cAAe,CACf,yBAA6B,CA3F3C,uOAgGY,eAAgB,CAhG5B,8cAoGY,eAAgB,CApG5B,4GAyGU,eAAgB,CAzG1B,8GA4GY,SAAU,CA5GtB,iCAoHI,eAAgB,CAChB,4CAAgD,CArHpD,4DAwHM,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,cAAe,CACf,wBAA4B,CAC5B,eAAgB,CAChB,eAAgB,CAChB,aAAc,CA/HpB,8DAkIQ,aAAc,CAlItB,+EAsIQ,YAAa,CAtIrB,oGAyIU,WAAY,CACZ,UAAW,CACX,iBAAkB,CAClB,cAAe,CA5IzB,gIA+IY,eAAgB,CA/I5B,iIAmJY,UAAW,CACX,WAAY,CACZ,cAAe,CArJ3B,kIAyJY,UAAW,CACX,WAAY,CACZ,cAAe,CAChB,2BAQT,6BAGI,iBAAkB,CAClB,4BAA6B,CAJjC,kDAOM,gBAAiB,CAPvB,qEAUQ,WAAY,CAVpB,2CAeM,gBAAiB,CACjB,cAAe,CAhBrB,mCAqBI,gBAAiB,CAClB,CAIL,0BACE,6BAGI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACpB,CAIL,0BACE,6BAGI,kBAAmB,CAHvB,kDAMM,YAAa,CANnB,2CAUM,QAAS,CAVf,6CAaQ,YAAa,CACd",sourcesContent:[".footer{\r\n\r\n  .footer__block-menu{\r\n    border-top: 1px solid rgba(31, 32, 65, 0.1);\r\n    border-bottom: 1px solid rgba(31, 32, 65, 0.1);\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    position: relative;\r\n    background: #fff;\r\n\r\n    .footer__content-container{\r\n      flex-grow: 1;\r\n      max-width: 80.5%;\r\n      min-width: 400px;\r\n      margin: 0 auto;\r\n      background: #fff;\r\n\r\n      .footer__bottom-menu{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        flex-wrap: wrap;\r\n        margin: 0;\r\n        padding: 91px 0 89px 0;\r\n        font-size: 14px;\r\n        color: rgba(31, 32, 65, 0.5);\r\n      \r\n        .footer__bottom-menu-logo-block{\r\n\r\n          .footer__logo{\r\n            margin: 10px 0 3px;\r\n          }\r\n        }\r\n\r\n        .footer__menu-column,\r\n        .footer__bottom-menu-logo-block{\r\n          display: block;\r\n          max-width: min-content;\r\n      \r\n          .footer__menu-list{\r\n            padding: 0;\r\n      \r\n            .footer__menu-li{\r\n              position: relative;\r\n              font-size: 14px;\r\n              line-height: 17px;\r\n              padding: 7px 0;\r\n              line-height: 24px;\r\n              cursor: pointer;              \r\n              display: block;\r\n              color: rgba(31, 32, 65, 0.5);\r\n              \r\n              &:hover{\r\n                > a{\r\n                  text-decoration: underline;\r\n                }\r\n              }\r\n              \r\n              &.menu_li__active{\r\n                font-weight: bold;\r\n                color: rgba(31, 32, 65, 0.75);\r\n              }\r\n      \r\n              &:first-child{\r\n                font-weight: bold;\r\n                color: #1F2041;\r\n                font-size: 12px;\r\n                text-transform: uppercase;\r\n                cursor: inherit;\r\n                white-space: nowrap;\r\n                padding: 10px 0 7px;\r\n              }\r\n            }\r\n      \r\n            .input-text_subscription{\r\n              margin-top: 10px;\r\n      \r\n              .input-text__input{\r\n                padding: 10px 14px;\r\n                font-size: 14px;\r\n                width: 260px;\r\n              }\r\n            }\r\n          }\r\n      \r\n          &:last-child,&:first-child{\r\n            min-width: 200px;\r\n            color: rgba(31, 32, 65, 0.75);\r\n      \r\n            .footer__menu-li{\r\n              cursor: inherit;\r\n              color: rgba(31, 32, 65, 0.75);\r\n            }\r\n          }\r\n      \r\n          &:nth-child(3){\r\n            min-width: 155px;\r\n          }\r\n      \r\n          &:nth-child(2),&:nth-child(4){\r\n            min-width: 155px;\r\n          }\r\n        }\r\n      \r\n        .footer__bottom-menu-logo-block{\r\n          max-width: 255px;\r\n      \r\n          p{\r\n            padding: 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .footer__copyright-block{\r\n    background: #fff;\r\n    box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n    .footer__copyright-content{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      font-size: 14px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      min-width: 400px;\r\n      max-width: 80.5%;\r\n      margin: 0 auto;\r\n\r\n      p{\r\n        margin: 23px 0;\r\n      }\r\n    \r\n      .footer__soc-block{\r\n        display: flex;\r\n      \r\n        .footer__soc-network{\r\n          height: 24px;\r\n          width: 24px;\r\n          padding-left: 20px;\r\n          cursor: pointer;\r\n    \r\n          &.footer__soc-network_twitter{\r\n            margin-top: -1px;\r\n          }\r\n    \r\n          &.footer__soc-network_facebook{\r\n            width: 22px;\r\n            height: 22px;\r\n            margin-top: 1px;\r\n          }\r\n    \r\n          &.footer__soc-network_instagram{\r\n            width: 22px;\r\n            height: 22px;\r\n            margin-top: 1px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      text-align: center;\r\n      justify-content: space-around;\r\n\r\n      .footer__menu-column{\r\n        margin: 10px 20px;\r\n\r\n        .footer__menu-list{\r\n          width: 270px;\r\n        }\r\n      }\r\n\r\n      .footer__logo{\r\n        margin: 10px 20px;\r\n        max-width: none;\r\n      }\r\n    }\r\n\r\n    .footer__copyright-content{\r\n      margin: 23px 20px;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 790px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 620px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      padding: 90px 0 0 0;\r\n      \r\n      .footer__menu-column{\r\n        display: none;\r\n      }\r\n\r\n      .footer__logo{\r\n        margin: 0;\r\n\r\n        p{\r\n          display: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const s=a},952:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(2311),d=a()(o()),p=l()(c.Z);d.push([e.id,".header{width:100%;box-shadow:0px 10px 20px rgba(31,32,65,0.05);position:relative;background:#fff}.header .header__content-container{flex-grow:1;max-width:100%;min-width:320px;margin:0 9.7%}.header .header__content-container .header__links{display:flex;justify-content:space-between;min-height:70px;color:rgba(31,32,65,0.5)}.header .header__content-container .header__links .header__logo{height:70px;width:106px}.header .header__content-container .header__links .header__block-menu{display:flex;flex-wrap:wrap;align-items:center;margin:0;padding:0}.header .header__content-container .header__links .header__block-menu .header__menu{display:flex;flex-wrap:wrap;align-items:center;margin:0;padding:0}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li{display:block;color:rgba(31,32,65,0.5);cursor:pointer;padding:10px 0;margin:5px 0 5px 20px;position:relative}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li:hover>.header__submenu{display:block}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li.header__menu-li_active{font-weight:bold;color:rgba(31,32,65,0.75)}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li.header__menu-li_expand:after{content:'';display:inline-block;width:22px;height:14px;background-image:url("+p+");background-repeat:no-repeat;background-position:50% 90%;cursor:pointer}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__menu-a{color:rgba(31,32,65,0.5);cursor:pointer;text-decoration:none}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__menu-a:hover{text-decoration:underline}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu{position:absolute;min-width:100px;background:#fff;border:1px solid rgba(31,32,65,0.05);box-shadow:0px 10px 20px rgba(31,32,65,0.05);padding:10px 20px;right:0;border-width:0 1px 1px 1px;z-index:1;display:none}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li{display:block}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li .header__submenu-a{color:rgba(31,32,65,0.5);cursor:pointer;text-decoration:none;white-space:nowrap}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li .header__submenu-a:hover{text-decoration:underline}.header .header__content-container .header__links .header__block-menu .header__block-login{display:flex;align-items:center}.header .header__content-container .header__links .header__block-menu .header__block-login .btn{font-weight:bold}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_border{font-size:12px;line-height:22px;width:83px}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_gradient{line-height:26px;font-size:12.3px;width:196px}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_header{margin:15px 0 15px 20px}.header .header__content-container .header__links .header__block-menu .header__block-login .header__block-login-hr{width:1px;height:30px;background:rgba(31,32,65,0.1);margin:0 20px}@media (max-width: 1170px){.header .header__content-container{margin:0}.header__links{margin:0 20px}}@media (max-width: 960px){.header__links{display:flex;flex-direction:column;align-items:center}.header__links .header__block-menu{flex-direction:column;justify-content:center}.header__links .header__block-menu .header__menu-li:nth-child(1){margin-left:0}.header__links .header__block-menu .btn_border.btn_header{margin-left:0}.header__links .header__block-menu .header__block-login-hr{display:none}}@media (max-width: 620px){.header__links .btn_border.btn_header{margin-left:0}}@media (max-width: 530px){.header__menu{flex-direction:column}.header__menu .header__menu-li{margin:5px 0 !important}.header__block-login{flex-wrap:wrap;justify-content:center}.header__block-login .btn{margin:15px 10px !important}}\n","",{version:3,sources:["webpack://./src/blocks/header/header.scss"],names:[],mappings:"AAAA,QACE,UAAW,CACX,4CAAgD,CAChD,iBAAkB,CAClB,eAAgB,CAJlB,mCAOI,WAAY,CACZ,cAAe,CACf,eAAgB,CAChB,aAAc,CAVlB,kDAaM,YAAa,CACb,6BAA8B,CAC9B,eAAgB,CAChB,wBAA4B,CAhBlC,gEAmBQ,WAAY,CACZ,WAAY,CApBpB,sEAwBQ,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,QAAS,CACT,SAAU,CA5BlB,oFA+BU,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,QAAS,CACT,SAAU,CAnCpB,qGAsCY,aAAc,CACd,wBAA4B,CAC5B,cAAe,CACf,cAAe,CACf,qBAAsB,CACtB,iBAAkB,CA3C9B,4HA+CgB,aAAc,CA/C9B,4HAoDc,gBAAiB,CACjB,yBAA6B,CArD3C,kIA2DgB,UAAW,CACX,oBAAqB,CACrB,UAAW,CACX,WAAY,CACZ,wDAAuD,CACvD,2BAA4B,CAC5B,2BAA4B,CAC5B,cAAe,CAlE/B,qHAuEc,wBAA4B,CAC5B,cAAe,CACf,oBAAqB,CAzEnC,2HA4EgB,yBAA0B,CA5E1C,sHAiFc,iBAAkB,CAClB,eAAgB,CAChB,eAAgB,CAChB,oCAAwC,CACxC,4CAAgD,CAChD,iBAAkB,CAClB,OAAQ,CACR,0BAA2B,CAC3B,SAAU,CACV,YAAa,CA1F3B,0IA6FgB,aAAc,CA7F9B,6JAgGkB,wBAA4B,CAC5B,cAAe,CACf,oBAAqB,CACrB,kBAAmB,CAnGrC,mKAsGoB,yBAA0B,CAtG9C,2FA+GU,YAAa,CACb,kBAAmB,CAhH7B,gGAmHY,gBAAiB,CAnH7B,2GAsHc,cAAe,CACf,gBAAiB,CACjB,UAAW,CAxHzB,6GA4Hc,gBAAiB,CACjB,gBAAiB,CACjB,WAAY,CA9H1B,2GAkIc,uBAAwB,CAlItC,mHAuIY,SAAU,CACV,WAAY,CACZ,6BAAiC,CACjC,aAAc,CACf,2BAQT,mCAGI,QAAS,CACV,eAID,aAAc,CACf,CAGH,0BACE,eACE,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAHrB,mCAMI,qBAAsB,CACtB,sBAAuB,CAP3B,iEAYQ,aAAc,CAZtB,0DAmBS,aAAc,CAnBvB,2DAwBM,YAAa,CACd,CAKP,0BACE,sCAKO,aAAc,CAChB,CAKP,0BACE,cACE,qBAAsB,CADxB,+BAII,uBAAuB,CACxB,qBAID,cAAe,CACf,sBAAuB,CAFzB,0BAKI,2BAA2B,CAC5B",sourcesContent:[".header{\r\n  width: 100%;\r\n  box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n  position: relative;\r\n  background: #fff;\r\n\r\n  .header__content-container{\r\n    flex-grow: 1;\r\n    max-width: 100%;\r\n    min-width: 320px;\r\n    margin: 0 9.7%;\r\n\r\n    .header__links{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      min-height: 70px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n    \r\n      .header__logo{\r\n        height: 70px;\r\n        width: 106px;\r\n      }\r\n      \r\n      .header__block-menu{\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-items: center;\r\n        margin: 0;\r\n        padding: 0;\r\n    \r\n        .header__menu{\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n          align-items: center;\r\n          margin: 0;\r\n          padding: 0;\r\n    \r\n          .header__menu-li{\r\n            display: block;\r\n            color: rgba(31, 32, 65, 0.5);\r\n            cursor: pointer;\r\n            padding: 10px 0;\r\n            margin: 5px 0 5px 20px;\r\n            position: relative;\r\n\r\n            &:hover{\r\n              > .header__submenu{\r\n                display: block;\r\n              }\r\n            }\r\n\r\n            &.header__menu-li_active{\r\n              font-weight: bold;\r\n              color: rgba(31, 32, 65, 0.75);\r\n            }\r\n    \r\n            &.header__menu-li_expand{\r\n    \r\n              &:after{\r\n                content: '';\r\n                display: inline-block;\r\n                width: 22px;\r\n                height: 14px;\r\n                background-image: url('@Blocks/header/expand-more.svg');\r\n                background-repeat: no-repeat;\r\n                background-position: 50% 90%;\r\n                cursor: pointer;\r\n              }\r\n            }\r\n            \r\n            .header__menu-a{\r\n              color: rgba(31, 32, 65, 0.5);\r\n              cursor: pointer;\r\n              text-decoration: none;\r\n\r\n              &:hover{\r\n                text-decoration: underline;\r\n              }\r\n            }\r\n\r\n            .header__submenu{\r\n              position: absolute;\r\n              min-width: 100px;\r\n              background: #fff;\r\n              border: 1px solid rgba(31, 32, 65, 0.05);\r\n              box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n              padding: 10px 20px;\r\n              right: 0;\r\n              border-width: 0 1px 1px 1px;\r\n              z-index: 1;\r\n              display: none;\r\n\r\n              .header__submenu-li{\r\n                display: block;\r\n\r\n                .header__submenu-a{\r\n                  color: rgba(31, 32, 65, 0.5);\r\n                  cursor: pointer;\r\n                  text-decoration: none;\r\n                  white-space: nowrap;\r\n\r\n                  &:hover{\r\n                    text-decoration: underline;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n    \r\n        .header__block-login{\r\n          display: flex;\r\n          align-items: center;\r\n\r\n          .btn{\r\n            font-weight: bold;\r\n        \r\n            &.btn_border {\r\n              font-size: 12px;\r\n              line-height: 22px;\r\n              width: 83px;\r\n            }\r\n        \r\n            &.btn_gradient{\r\n              line-height: 26px;\r\n              font-size: 12.3px;\r\n              width: 196px;\r\n            }\r\n\r\n            &.btn_header{\r\n              margin: 15px 0 15px 20px;\r\n            }\r\n          }\r\n    \r\n          .header__block-login-hr{\r\n            width: 1px;\r\n            height: 30px;\r\n            background: rgba(31, 32, 65, 0.1);\r\n            margin: 0 20px;\r\n          }\r\n        }\t\t\r\n      }   \r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .header{\r\n\r\n    .header__content-container{\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .header__links{ \r\n    margin: 0 20px; \r\n  }\r\n}\r\n\r\n@media (max-width: 960px){\r\n  .header__links{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    .header__block-menu{\r\n      flex-direction: column;\r\n      justify-content: center;\r\n\r\n      .header__menu-li{\r\n\r\n        &:nth-child(1){\r\n          margin-left: 0;\r\n        }\r\n      }\r\n\r\n      .btn_border{\r\n\r\n        &.btn_header{\r\n           margin-left: 0;\r\n        }\r\n      }\r\n\r\n      .header__block-login-hr{\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 620px){\r\n  .header__links{\r\n\r\n    .btn_border{\r\n      \r\n      &.btn_header{\r\n         margin-left: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 530px){\r\n  .header__menu{\r\n    flex-direction: column;\r\n    \r\n    .header__menu-li{\r\n      margin: 5px 0!important;\r\n    }\r\n  }\r\n\r\n  .header__block-login{\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    .btn{ \r\n      margin: 15px 10px!important;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const u=d},6263:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(1932),d=a()(o()),p=l()(c.Z);d.push([e.id,".input-text{position:relative;width:100%}.input-text.input-text_subscription{margin-top:10px}.input-text.input-text_subscription:after{content:'';width:20px;height:20px;cursor:pointer;position:absolute;bottom:11px;right:11px;background-repeat:no-repeat;background-image:url("+p+")}.input-text .input-text__input{width:100%;color:rgba(31,32,65,0.25);outline:none;font-size:14px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:4px;height:44px;padding:8px 14px;margin-top:5px;font-family:Montserrat, Arial, sans-serif;font-weight:normal;font-style:normal}.input-text .input-text__input:hover,.input-text .input-text__input.input-text__input_hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5);font-weight:bold}.input-text .input-text__input:focus{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.input-text ::-webkit-input-placeholder{color:rgba(31,32,65,0.25)}.input-text :-ms-input-placeholder{color:rgba(31,32,65,0.25)}.input-text ::-moz-placeholder{color:rgba(31,32,65,0.25)}.input-text :-moz-placeholder{color:rgba(31,32,65,0.25)}\n","",{version:3,sources:["webpack://./src/blocks/input-text/input-text.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CAClB,UAAW,CAFb,oCAKI,eAAgB,CALpB,0CAQM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,2BAA4B,CAC5B,wDAAqD,CAhB3D,+BAqBI,UAAW,CACX,yBAA6B,CAC7B,YAAa,CACb,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,yCAA0C,CAC1C,kBAAmB,CACnB,iBAAkB,CAjCtB,4FAqCM,yBAA6B,CAC7B,mCAAuC,CACvC,gBAAiB,CAvCvB,qCA0CM,yBAA6B,CAC7B,mCAAuC,CA3C7C,wCAgDI,yBAA6B,CAhDjC,mCAmDI,yBAA6B,CAnDjC,+BAsDI,yBAA6B,CAtDjC,8BAyDI,yBAA6B",sourcesContent:[".input-text{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  &.input-text_subscription{\r\n    margin-top: 10px;\r\n  \r\n    &:after{\r\n      content: '';\r\n      width: 20px;\r\n      height: 20px;\r\n      cursor: pointer;\r\n      position: absolute;\r\n      bottom: 11px;\r\n      right: 11px;\r\n      background-repeat: no-repeat;\r\n      background-image: url('@Blocks/input-text/arrow.svg');\r\n    }\r\n  }\r\n\r\n  .input-text__input{\r\n    width: 100%;\r\n    color: rgba(31, 32, 65, 0.25);\r\n    outline: none;\r\n    font-size: 14px;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;    \r\n\r\n    &:hover,\r\n    &.input-text__input_hover{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      font-weight: bold;\r\n    }\r\n    &:focus{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n  }\r\n\r\n  ::-webkit-input-placeholder { /* Chrome */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-ms-input-placeholder { /* IE 10+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  ::-moz-placeholder { /* Firefox 19+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-moz-placeholder { /* Firefox 4 - 18 */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n}"],sourceRoot:""}]);const u=d},8236:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".link{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;line-height:15px;height:15px;color:#BC9CFF;text-transform:uppercase;cursor:pointer;margin:15px 20px 15px 0;-webkit-user-select:none;text-decoration:none}.link.link_clean{color:rgba(31,32,65,0.5)}.link.link_lux{margin:0 0 0 3px}.link:hover{text-decoration:underline}\n","",{version:3,sources:["webpack://./src/blocks/link/link.scss"],names:[],mappings:"AAAA,MACE,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,WAAY,CACZ,aAAc,CACd,wBAAyB,CACzB,cAAe,CACf,uBAAwB,CACxB,wBAAyB,CACzB,oBAAqB,CAZvB,iBAeI,wBAA4B,CAfhC,eAmBI,gBAAiB,CAnBrB,YAuBI,yBAA0B",sourcesContent:[".link{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  height: 15px;\r\n  color: #BC9CFF;\t\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  -webkit-user-select: none;\r\n  text-decoration: none;\r\n\r\n  &.link_clean{\r\n    color: rgba(31, 32, 65, 0.5);\r\n  }\r\n  \r\n  &.link_lux{\r\n    margin: 0 0 0 3px;\r\n  }\r\n\r\n  &:hover{\r\n    text-decoration: underline;\r\n  }\r\n}"],sourceRoot:""}]);const s=a},1798:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(6580),d=a()(o()),p=l()(c.Z);d.push([e.id,".pagination{width:100%;margin:30px 0 10px 0}.pagination .pagination__num-block{width:100%;display:flex;justify-content:center;margin:10px 0}.pagination .pagination__num-block .pagination__num{width:40px;height:40px;color:rgba(31,32,65,0.5);font-size:12px;font-weight:bold;border-radius:50%;display:flex;justify-content:center;align-items:center;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.pagination .pagination__num-block .pagination__num.pagination__num_active{background:linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);color:#fff}.pagination .pagination__num-block .pagination__num.pagination__num_next{background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);color:#fff;position:relative}.pagination .pagination__num-block .pagination__num.pagination__num_next .pagination__arrow{width:20px;height:20px;cursor:pointer;position:absolute;top:12px;right:9px;background-repeat:no-repeat}.pagination .pagination__num-block .pagination__num.pagination__num_next .pagination__arrow.pagination__arrow_white{background-image:url("+p+")}.pagination .pagination__label{width:100%;display:flex;justify-content:center}\n","",{version:3,sources:["webpack://./src/blocks/pagination/pagination.scss"],names:[],mappings:"AAAA,YACE,UAAW,CACX,oBAAqB,CAFvB,mCAKI,UAAW,CACX,YAAa,CACb,sBAAuB,CACvB,aAAc,CARlB,oDAWM,UAAW,CACX,WAAY,CACZ,wBAA4B,CAC5B,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB,CAxB3B,2EA2BQ,4DAA6D,CAC7D,UAAW,CA5BnB,yEAgCQ,4DAA6D,CAC7D,UAAW,CACX,iBAAkB,CAlC1B,4FAqCU,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,2BAA4B,CA3CtC,oHA8CY,wDAA2D,CA9CvE,+BAsDI,UAAW,CACX,YAAa,CACb,sBAAuB",sourcesContent:[".pagination{\r\n  width: 100%;\r\n  margin: 30px 0 10px 0;\r\n\r\n  .pagination__num-block{\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 10px 0;\r\n\r\n    .pagination__num{\r\n      width: 40px;\r\n      height: 40px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      font-size: 12px;\r\n      font-weight: bold;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      cursor: pointer;\r\n      user-select: none;\r\n      -moz-user-select: none;\r\n      -webkit-user-select: none;\r\n      -ms-user-select: none;\r\n\r\n      &.pagination__num_active{\r\n        background: linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);\r\n        color: #fff;\r\n      }\r\n\r\n      &.pagination__num_next{\r\n        background: linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);\r\n        color: #fff;\r\n        position: relative;\r\n\r\n        .pagination__arrow{\r\n          width: 20px;\r\n          height: 20px;\r\n          cursor: pointer;\r\n          position: absolute;\r\n          top: 12px;\r\n          right: 9px;\r\n          background-repeat: no-repeat;\r\n\r\n          &.pagination__arrow_white{\t\r\n            background-image: url('@Blocks/pagination/arrow-white.svg');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination__label{\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n}"],sourceRoot:""}]);const u=d},8043:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".range-slider{width:100%}.range-slider .range-slider__topic-label{display:flex;justify-content:space-between;align-items:center}.range-slider .range-slider__slider{width:calc(100% - 11px);height:6px;margin:18px 0 10px;transform:translate(5px, 0);position:relative}.range-slider .range-slider__slider:hover{cursor:pointer}.range-slider .range-slider__slider:before{content:'';border:1px solid rgba(31,32,65,0.25);border-radius:3px;box-sizing:border-box;position:absolute;width:calc(100% + 11px);transform:translate(-5px, 0);height:6px}.range-slider .range-slider__slider .range-slider__scale{position:absolute;z-index:-1}.range-slider .range-slider__slider .range-slider__scale .range-slider__scale-line{width:1px;height:10px;background:rgba(31,32,65,0.25)}.range-slider .range-slider__slider .range-slider__scale .range-slider__scale-val{transform:translateX(-50%);font-size:10px}.range-slider .range-slider__slider .range-slider__range{height:calc(100% + 0px);width:85px;background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);border-radius:3px;box-sizing:border-box;transform:translate(78px, 0px)}.range-slider .range-slider__slider .range-slider__left,.range-slider .range-slider__slider .range-slider__right{width:12px;height:12px;background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);border:2px solid #fff;border-radius:50px;display:inline-block;position:absolute;cursor:pointer;top:7px}.range-slider .range-slider__slider .range-slider__left{left:78px;transform:translate(-50%, -12px)}.range-slider .range-slider__slider .range-slider__right{left:163px;transform:translate(-50%, -12px)}.range-slider .range-slider__postText{margin-top:5px}.moving-slider{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}\n","",{version:3,sources:["webpack://./src/blocks/range-slider/range-slider.scss"],names:[],mappings:"AAAA,cACE,UAAW,CADb,yCAII,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CANvB,oCAUI,uBAAwB,CACxB,UAAW,CACX,kBAAmB,CACnB,2BAA4B,CAC5B,iBAAkB,CAdtB,0CAiBM,cAAe,CAjBrB,2CAqBM,UAAW,CACX,oCAAwC,CACxC,iBAAkB,CAClB,qBAAsB,CACtB,iBAAkB,CAClB,uBAAwB,CACxB,4BAA6B,CAC7B,UAAW,CA5BjB,yDAgCM,iBAAkB,CAClB,UAAW,CAjCjB,mFAoCQ,SAAU,CACV,WAAY,CACZ,8BAAkC,CAtC1C,kFA0CQ,0BAA2B,CAC3B,cAAe,CA3CvB,yDAgDM,uBAAwB,CACxB,UAAW,CACX,4DAA6D,CAC7D,iBAAkB,CAClB,qBAAsB,CACtB,8BAA+B,CArDrC,iHA0DM,UAAW,CACX,WAAY,CACZ,4DAA6D,CAC7D,qBAAsB,CACtB,kBAAmB,CACnB,oBAAqB,CACrB,iBAAkB,CAClB,cAAe,CACf,OAAQ,CAlEd,wDAsEM,SAAU,CACV,gCAAiC,CAvEvC,yDA2EM,UAAW,CACX,gCAAiC,CA5EvC,sCAiFI,cAAe,CAChB,eAID,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB",sourcesContent:[".range-slider{\r\n  width: 100%;\r\n\r\n  .range-slider__topic-label{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .range-slider__slider{\r\n    width: calc(100% - 11px);\r\n    height: 6px;\r\n    margin: 18px 0 10px;\r\n    transform: translate(5px, 0);\r\n    position: relative;\r\n\r\n    &:hover{\r\n      cursor: pointer;\r\n    }\r\n\r\n    &:before{\r\n      content: '';\r\n      border: 1px solid rgba(31, 32, 65, 0.25);\r\n      border-radius: 3px;\r\n      box-sizing: border-box;\r\n      position: absolute;\r\n      width: calc(100% + 11px);\r\n      transform: translate(-5px, 0);\r\n      height: 6px;\r\n    }\r\n\r\n    .range-slider__scale{\r\n      position: absolute;\r\n      z-index: -1;\r\n      \r\n      .range-slider__scale-line{\r\n        width: 1px;\r\n        height: 10px;\r\n        background: rgba(31, 32, 65, 0.25);\r\n      }\r\n\r\n      .range-slider__scale-val{\r\n        transform: translateX(-50%);\r\n        font-size: 10px;\r\n      }\r\n    }\r\n\r\n    .range-slider__range{\r\n      height: calc(100% + 0px);\r\n      width: 85px;\r\n      background: linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);\r\n      border-radius: 3px;\r\n      box-sizing: border-box;\r\n      transform: translate(78px, 0px);\r\n    }\r\n\r\n    .range-slider__left,\r\n    .range-slider__right{\r\n      width: 12px;\r\n      height: 12px;\r\n      background: linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);\r\n      border: 2px solid #fff;\r\n      border-radius: 50px;\r\n      display: inline-block;\r\n      position: absolute;\r\n      cursor: pointer;\r\n      top: 7px;\r\n    }\r\n\r\n    .range-slider__left{\r\n      left: 78px;\r\n      transform: translate(-50%, -12px);\r\n    }\r\n    \r\n    .range-slider__right{\r\n      left: 163px;\r\n      transform: translate(-50%, -12px);\r\n    }\r\n  }\r\n\r\n  .range-slider__postText{\r\n    margin-top: 5px;\r\n  }\r\n}\r\n\r\n.moving-slider{\r\n  user-select: none;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n}"],sourceRoot:""}]);const s=a},4456:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(3646),d=n(9872),p=a()(o()),u=l()(c.Z),f=l()(d.Z);p.push([e.id,".rate-btn{display:flex;justify-content:flex-start;margin:15px 20px 0 0}.rate-btn .rate-btn__star{width:20px;height:20px;margin:0 2px;cursor:pointer;background-image:url("+u+");background-repeat:no-repeat;background-position:50%;background-size:contain}.rate-btn .rate-btn__star.rate-btn__star_active{background-image:url("+f+")}\n","",{version:3,sources:["webpack://./src/blocks/rate-btn/rate-btn.scss"],names:[],mappings:"AAAA,UACE,YAAa,CACb,0BAA2B,CAC3B,oBAAqB,CAHvB,0BAMI,UAAW,CACX,WAAY,CACZ,YAAa,CACb,cAAe,CACf,wDAAwC,CACxC,2BAA4B,CAC5B,uBAAwB,CACxB,uBAAwB,CAb5B,gDAgBM,wDAAiC",sourcesContent:[".rate-btn{\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  margin: 15px 20px 0 0;\r\n\r\n  .rate-btn__star{\r\n    width: 20px;\r\n    height: 20px;\r\n    margin: 0 2px;\r\n    cursor: pointer;\r\n    background-image: url('star_border.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: 50%;\r\n    background-size: contain;\r\n\r\n    &.rate-btn__star_active{\r\n      background-image: url('star.svg');\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const h=p},215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".topic-label{display:flex;justify-content:space-between}.topic-label h3,.topic-label p{margin:0}.topic-label p{font-size:12px;line-height:11px;text-transform:uppercase;color:#1F2041}\n","",{version:3,sources:["webpack://./src/blocks/topic-label/topic-label.scss"],names:[],mappings:"AAAA,aACE,YAAa,CACb,6BAA8B,CAFhC,+BAKI,QAAS,CALb,eASI,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CACzB,aAAc",sourcesContent:[".topic-label{\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  h3,p{\r\n    margin: 0;\r\n  }\r\n\r\n  p{\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n    text-transform: uppercase;\r\n    color: #1F2041;\r\n  }\r\n}"],sourceRoot:""}]);const s=a},4800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".start-page{padding:80px 8.4%}.start-page .start-page__links{display:flex;flex-direction:column}body{margin:0;padding:0;font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:normal;font-size:13.7px;line-height:24px;color:rgba(31,32,65,0.75);min-width:320px}h1{font-family:Montserrat, Arial, sans-serif;font-size:24px;line-height:30px}h2{font-family:Montserrat, Arial, sans-serif;font-size:19px;line-height:24px}h3{font-family:Montserrat, Arial, sans-serif;font-size:12px;line-height:15px;text-transform:uppercase}h1,h2,h3{margin:0}body,p{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:normal;font-size:14px;line-height:24px}a{cursor:pointer}a :hover{text-decoration:underline}img{user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}\n","",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CADpB,+BAII,YAAa,CACb,qBAAsB,CACvB,KAID,QAAS,CACT,SAAU,CACV,yCAA0C,CAC1C,iBAAkB,CAClB,kBAAmB,CACnB,gBAAiB,CACjB,gBAAiB,CACjB,yBAA6B,CAC7B,eAAgB,CACjB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CAClB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CAClB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CAC1B,SAGC,QAAS,CACV,OAGC,yCAA0C,CAC1C,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,gBAAiB,CAClB,EAGC,cAAe,CADjB,SAGI,yBAA0B,CAC3B,IAID,gBAAiB,CACjB,qBAAsB,CACtB,wBAAyB,CACzB,oBAAqB",sourcesContent:[".start-page{\r\n  padding: 80px 8.4%;\r\n\r\n  .start-page__links{\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\nbody{\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 13.7px;\r\n  line-height: 24px;\r\n  color: rgba(31, 32, 65, 0.75);\r\n  min-width: 320px;\r\n}\r\n\r\nh1{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n}\r\n\r\nh2{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 19px;\r\n  line-height: 24px;\r\n}\r\n\r\nh3{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-transform: uppercase;\r\n}\r\n\r\nh1,h2,h3{\r\n  margin: 0;\r\n}\r\n\r\nbody,p{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n}\r\n\r\na{\r\n  cursor: pointer;\r\n  :hover{\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\nimg{\r\n  user-select: none;\r\n  -moz-user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n}\r\n"],sourceRoot:""}]);const s=a},6655:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,".search-room{margin-top:30px;display:flex;justify-content:space-between;margin:0 9.6% 0 9.7%}.search-room .search-room__filters{width:266px;display:flex;flex-direction:column;flex-shrink:0;margin-right:4.6%}.search-room .search-room__filters h3{font-size:12.4px}.search-room .search-room__filters .dropdown-block{width:100%}.search-room .search-room__filters .dropdown-block .dropdown-block__dropdown{width:100%}.search-room .search-room__filters .search-room__filter-date,.search-room .search-room__filters .search-room__filters_additional,.search-room .search-room__filters .checkbox-list-expandable{margin-top:30px}.search-room .search-room__filters .search-room__filter-guest{margin-top:20px}.search-room .search-room__filters .search-room__filter-comfort{margin-top:20px}.search-room .search-room__filters .search-room__filter-comfort .dropdown-block__dropdown-items{padding-bottom:5px;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.search-room .search-room__filters .search-room__filter-comfort .dropdown-block__dropdown-items .dropdown-block__items-line{height:38px}.search-room .search-room__filters .search-room__filter-comfort .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty{margin:6px 6px 0 0}.search-room .search-room__filters .search-room__filter-comfort .dropdown-block__dropdown-items .dropdown-block__items-line h3{font-size:12.2px}.search-room .search-room__filters .search-room__filter-comfort .dropdown-block__dropdown-items .dropdown-block__items-line span{font-size:12.2px;margin-top:-3px}.search-room .search-room__filters .search-room__slider-price{margin-top:26px}.search-room .search-room__filters .search-room__filter-features{margin-top:27px}.search-room .search-room__filters .search-room__filter-features .checkbox-list{margin-top:16px}.search-room .search-room__filters .search-room__filter-features .checkbox-list .checkbox-list__label{line-height:20.5px}.search-room .search-room__filters .search-room__filter-availability{margin-top:18px}.search-room .search-room__filters .search-room__slider-price p{color:rgba(31,32,65,0.5);font-size:12px;margin:0}.search-room .search-room__filters .checkbox-list-expandable h3{font-size:12.2px}.search-room .search-room__filters .checkbox-list-expandable img{right:17px}.search-room .search-room__filters .checkbox-list-expandable .checkbox-list{margin-top:18px}.search-room .search-room__rooms{display:flex;flex-wrap:wrap;justify-content:space-between;padding-bottom:60px;width:100%}.search-room .search-room__rooms h1{width:100%;margin:29px 0 10px 5px;font-size:25px}.search-room .search-room__rooms .pagination{margin:22px 0 10px 0;padding-right:9px}.search-room .search-room__rooms .pagination .pagination__num-block{margin:10px 0 7px}@media (max-width: 1170px){.search-room .search-room__filters{margin-left:20px}.search-room .search-room__rooms{justify-content:space-around}.search-room .search-room__rooms h1{text-align:center;padding:0 15px}}@media (max-width: 680px){.search-room{flex-wrap:wrap;justify-content:center}.search-room .search-room__filters{margin:0}}\n","",{version:3,sources:["webpack://./src/pages/search-room/search-room.scss"],names:[],mappings:"AAAA,aACE,eAAgB,CAChB,YAAa,CACb,6BAA8B,CAE9B,oBAAqB,CALvB,mCAQI,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,aAAc,CACd,iBAAkB,CAZtB,sCAeM,gBAAiB,CAfvB,mDAmBM,UAAW,CAnBjB,6EAsBQ,UAAW,CAtBnB,8LA6BM,eAAgB,CA7BtB,8DAiCM,eAAgB,CAjCtB,gEAqCM,eAAgB,CArCtB,gGAwCQ,kBAAmB,CACnB,4CAAgD,CAzCxD,4HA4CU,WAAY,CA5CtB,uJA+CY,kBAAmB,CA/C/B,+HAmDY,gBAAiB,CAnD7B,iIAuDY,gBAAiB,CACjB,eAAgB,CAxD5B,8DA+DM,eAAgB,CA/DtB,iEAmEM,eAAgB,CAnEtB,gFAsEQ,eAAgB,CAtExB,sGAyEU,kBAAmB,CAzE7B,qEA+EM,eAAgB,CA/EtB,gEAqFQ,wBAA4B,CAC5B,cAAe,CACf,QAAS,CAvFjB,gEA8FQ,gBAAiB,CA9FzB,iEAkGQ,UAAW,CAlGnB,4EAsGQ,eAAgB,CAtGxB,iCA4GI,YAAa,CACb,cAAe,CACf,6BAA8B,CAC9B,mBAAoB,CACpB,UAAW,CAhHf,oCAmHM,UAAW,CACX,sBAAuB,CACvB,cAAe,CArHrB,6CAyHM,oBAAqB,CACrB,iBAAkB,CA1HxB,oEA6HQ,iBAAkB,CACnB,2BAML,mCAGI,gBAAiB,CAHrB,iCAOI,4BAA6B,CAPjC,oCAUM,iBAAkB,CAClB,cAAe,CAChB,CAKP,0BACE,aAEE,cAAe,CACf,sBAAuB,CAHzB,mCAMI,QAAS,CACV",sourcesContent:[".search-room{\r\n  margin-top: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  margin: 0 9.6% 0 9.7%;\r\n\r\n  .search-room__filters{\r\n    width: 266px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-shrink: 0;\r\n    margin-right: 4.6%;\r\n\r\n    h3{\r\n      font-size: 12.4px;\r\n    }\r\n\r\n    .dropdown-block{\r\n      width: 100%;\r\n\r\n      .dropdown-block__dropdown{\r\n        width: 100%;\r\n      }\r\n    }\t\r\n\r\n    .search-room__filter-date,\r\n    .search-room__filters_additional,\r\n    .checkbox-list-expandable{\r\n      margin-top: 30px;\r\n    }\r\n\r\n    .search-room__filter-guest{\r\n      margin-top: 20px;\r\n    }\r\n\r\n    .search-room__filter-comfort{\r\n      margin-top: 20px;\r\n\r\n      .dropdown-block__dropdown-items{\r\n        padding-bottom: 5px;\r\n        box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n        .dropdown-block__items-line{\r\n          height: 38px;\r\n\r\n          .dropdown-block__block-qty{\r\n            margin: 6px 6px 0 0;\r\n          }\r\n\r\n          h3{\r\n            font-size: 12.2px;\r\n          }\r\n\r\n          span{\r\n            font-size: 12.2px;\r\n            margin-top: -3px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .search-room__slider-price{\r\n      margin-top: 26px;\r\n    }\r\n\r\n    .search-room__filter-features{\r\n      margin-top: 27px;\r\n      \r\n      .checkbox-list{\r\n        margin-top: 16px;\r\n\r\n        .checkbox-list__label{\r\n          line-height: 20.5px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .search-room__filter-availability{\r\n      margin-top: 18px;\r\n    }\r\n\r\n    .search-room__slider-price{\r\n\r\n      p{\r\n        color: rgba(31, 32, 65, 0.5);\r\n        font-size: 12px;\r\n        margin: 0;\r\n      }\r\n    }\r\n    \r\n    .checkbox-list-expandable{\r\n\r\n      h3{\r\n        font-size: 12.2px;\r\n      }\r\n\r\n      img{\r\n        right: 17px;\r\n      }\r\n\r\n      .checkbox-list {\r\n        margin-top: 18px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .search-room__rooms{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    padding-bottom: 60px;\r\n    width: 100%;\r\n\r\n    h1{\r\n      width: 100%;\r\n      margin: 29px 0 10px 5px;\r\n      font-size: 25px;\r\n    }\r\n\r\n    .pagination{\r\n      margin: 22px 0 10px 0;\r\n      padding-right: 9px;\r\n\r\n      .pagination__num-block{\r\n        margin: 10px 0 7px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .search-room{\r\n\r\n    .search-room__filters{\r\n      margin-left: 20px;\r\n    }\r\n\r\n    .search-room__rooms{\r\n      justify-content: space-around;\r\n\r\n      h1{\r\n        text-align: center;\r\n        padding: 0 15px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 680px){\r\n  .search-room{\r\n\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    \r\n    .search-room__filters{\r\n      margin: 0;\r\n    }\r\n  }\t\r\n}"],sourceRoot:""}]);const s=a},6647:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),s=n(1667),l=n.n(s),c=n(3988),d=n(7771),p=n(7869),u=a()(o()),f=l()(c),h=l()(d),A=l()(p);u.push([e.id,"/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n  url("+f+") format('woff2'), \r\n  url("+h+") format('woff'), \r\n  url("+A+") format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-size: 13.7px;\r\n}","",{version:3,sources:["webpack://./src/font/fonts.css"],names:[],mappings:"AAAA,aAAa;;AAEb;EACE,yBAAyB;EACzB;;;4DAG0E;EAC1E,gBAAgB;EAChB,kBAAkB;EAClB,iBAAiB;AACnB",sourcesContent:["/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n  url('@/font/montserrat-regular/montserrat-regular.woff2') format('woff2'), \r\n  url('@/font/montserrat-regular/montserrat-regular.woff') format('woff'), \r\n  url('@/font/montserrat-regular/montserrat-regular.ttf') format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-size: 13.7px;\r\n}"],sourceRoot:""}]);const m=u},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){s=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),d=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},5113:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d00fde534b9a762845437465e1545a24.svg"},1403:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},8559:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"47878f203720b365db2a7b388d09ea7b.png"},6771:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"6d6032658c9b9a33c509eead00a54812.png"},1696:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"ac1f5501e74287fc1d0efb9050a42f49.png"},5217:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"3a7a24191547de88a902692ec5b58b1e.png"},257:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"6df32b96172e2102796064caaf0e745f.png"},8234:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d7edb13af759f4d74d3eeaac4b0f9536.png"},1988:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"1749e5e1b10441f5199bbbf15d16eef5.png"},1139:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"de71ff584c199da10e972149217aa563.png"},4726:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"a16046c2c9d02b2cccf41c2ce7ff6a83.png"},7718:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"50f6bec016b61378628cad4d5800cb3d.png"},975:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"a6c4fd18f659e1f98290498754299c15.png"},8315:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"4e1183fb81e1a01d0c62451205d67fcc.png"},783:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"afc284d3c92092876cda0422f86ad37f.svg"},2311:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"afc284d3c92092876cda0422f86ad37f.svg"},1932:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},6580:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d00fde534b9a762845437465e1545a24.svg"},9872:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"6e74da705e57d1046996312dd5208507.svg"},3646:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"ba295ad459417d5f157ea6aeb689f74a.svg"},9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,o){"use strict";var i=[],a=Object.getPrototypeOf,s=i.slice,l=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,d=i.indexOf,p={},u=p.toString,f=p.hasOwnProperty,h=f.toString,A=h.call(Object),m={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},_=function(e){return null!=e&&e===e.window},b=r.document,C={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,o,i=(n=n||b).createElement("script");if(i.text=e,t)for(r in C)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function y(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[u.call(e)]||"object":typeof e}var B="3.6.0",w=function(e,t){return new w.fn.init(e,t)};function v(e){var t=!!e&&"length"in e&&e.length,n=y(e);return!g(e)&&!_(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}w.fn=w.prototype={jquery:B,constructor:w,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(w.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(w.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},w.extend=w.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(w.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||w.isPlainObject(n)?n:{},o=!1,a[t]=w.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+(B+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==u.call(e)||(t=a(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==A))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(v(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(v(Object(e))?w.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(v(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return l(a)},guid:1,support:m}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=i[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){p["[object "+t+"]"]=t.toLowerCase()}));var k=function(e){var t,n,r,o,i,a,s,l,c,d,p,u,f,h,A,m,g,_,b,C="sizzle"+1*new Date,x=e.document,y=0,B=0,w=le(),v=le(),k=le(),S=le(),E=function(e,t){return e===t&&(p=!0),0},T={}.hasOwnProperty,D=[],q=D.pop,j=D.push,M=D.push,I=D.slice,W=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",N="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\[[\\x20\\t\\r\\n\\f]*("+N+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",F=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",R=new RegExp(L+"+","g"),O=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),Y=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),Z=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(L+"|>"),P=new RegExp(F),G=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+z+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,V=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){u()},ae=Ce((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{M.apply(D=I.call(x.childNodes),x.childNodes),D[x.childNodes.length].nodeType}catch(e){M={apply:D.length?function(e,t){j.apply(e,I.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,o){var i,s,c,d,p,h,g,_=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!o&&(u(t),t=t||f,A)){if(11!==x&&(p=K.exec(e)))if(i=p[1]){if(9===x){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(_&&(c=_.getElementById(i))&&b(t,c)&&c.id===i)return r.push(c),r}else{if(p[2])return M.apply(r,t.getElementsByTagName(e)),r;if((i=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return M.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!S[e+" "]&&(!m||!m.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(g=e,_=t,1===x&&(U.test(e)||Z.test(e))){for((_=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((d=t.getAttribute("id"))?d=d.replace(re,oe):t.setAttribute("id",d=C)),s=(h=a(e)).length;s--;)h[s]=(d?"#"+d:":scope")+" "+be(h[s]);g=h.join(",")}try{return M.apply(r,_.querySelectorAll(g)),r}catch(t){S(e,!0)}finally{d===C&&t.removeAttribute("id")}}}return l(e.replace(O,"$1"),t,r,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[C]=!0,e}function de(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function pe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function ue(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function Ae(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Q.test(t||n&&n.nodeName||"HTML")},u=se.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:x;return a!=f&&9===a.nodeType&&a.documentElement?(h=(f=a).documentElement,A=!i(f),x!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=de((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=de((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=de((function(e){return h.appendChild(e).id=C,!f.getElementsByName||!f.getElementsByName(C).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&A)return t.getElementsByClassName(e)},g=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(de((function(e){var t;h.appendChild(e).innerHTML="<a id='"+C+"'></a><select id='"+C+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+z+")"),e.querySelectorAll("[id~="+C+"-]").length||m.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+C+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(_=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&de((function(e){n.disconnectedMatch=_.call(e,"*"),_.call(e,"[s!='']:x"),g.push("!=",F)})),m=m.length&&new RegExp(m.join("|")),g=g.length&&new RegExp(g.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},E=t?function(e,t){if(e===t)return p=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==x&&b(x,e)?-1:t==f||t.ownerDocument==x&&b(x,t)?1:d?W(d,e)-W(d,t):0:4&r?-1:1)}:function(e,t){if(e===t)return p=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e==f?-1:t==f?1:o?-1:i?1:d?W(d,e)-W(d,t):0;if(o===i)return ue(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ue(a[r],s[r]):a[r]==x?-1:s[r]==x?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(u(e),n.matchesSelector&&A&&!S[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t)))try{var r=_.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){S(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&u(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&u(e);var o=r.attrHandle[t.toLowerCase()],i=o&&T.call(r.attrHandle,t.toLowerCase())?o(e,t,!A):void 0;return void 0!==i?i:n.attributes||!A?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],o=0,i=0;if(p=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(E),p){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return d=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&P.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=w[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+L+"|$)"))&&w(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=se.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,d,p,u,f,h,A=i!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),_=!l&&!s,b=!1;if(m){if(i){for(;A;){for(u=t;u=u[A];)if(s?u.nodeName.toLowerCase()===g:1===u.nodeType)return!1;h=A="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&_){for(b=(f=(c=(d=(p=(u=m)[C]||(u[C]={}))[u.uniqueID]||(p[u.uniqueID]={}))[e]||[])[0]===y&&c[1])&&c[2],u=f&&m.childNodes[f];u=++f&&u&&u[A]||(b=f=0)||h.pop();)if(1===u.nodeType&&++b&&u===t){d[e]=[y,f,b];break}}else if(_&&(b=f=(c=(d=(p=(u=t)[C]||(u[C]={}))[u.uniqueID]||(p[u.uniqueID]={}))[e]||[])[0]===y&&c[1]),!1===b)for(;(u=++f&&u&&u[A]||(b=f=0)||h.pop())&&((s?u.nodeName.toLowerCase()!==g:1!==u.nodeType)||!++b||(_&&((d=(p=u[C]||(u[C]={}))[u.uniqueID]||(p[u.uniqueID]={}))[e]=[y,b]),u!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return o[C]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=W(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(O,"$1"));return r[C]?ce((function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=A?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:Ae(!1),disabled:Ae(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return V.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function _e(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function Ce(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,s=B++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var c,d,p,u=[y,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(d=(p=t[C]||(t[C]={}))[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=d[i])&&c[0]===y&&c[1]===s)return u[2]=c[2];if(d[i]=u,u[2]=e(t,n,l))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function ye(e,t,n,r,o){for(var i,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function Be(e,t,n,r,o,i){return r&&!r[C]&&(r=Be(r)),o&&!o[C]&&(o=Be(o,i)),ce((function(i,a,s,l){var c,d,p,u=[],f=[],h=a.length,A=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!i&&t?A:ye(A,u,e,s,l),g=n?o||(i?e:h||r)?[]:a:m;if(n&&n(m,g,s,l),r)for(c=ye(g,f),r(c,[],s,l),d=c.length;d--;)(p=c[d])&&(g[f[d]]=!(m[f[d]]=p));if(i){if(o||e){if(o){for(c=[],d=g.length;d--;)(p=g[d])&&c.push(m[d]=p);o(null,g=[],c,l)}for(d=g.length;d--;)(p=g[d])&&(c=o?W(i,p):u[d])>-1&&(i[c]=!(a[c]=p))}}else g=ye(g===a?g.splice(h,g.length):g),o?o(null,a,g,l):M.apply(a,g)}))}function we(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],l=a?1:0,d=Ce((function(e){return e===t}),s,!0),p=Ce((function(e){return W(t,e)>-1}),s,!0),u=[function(e,n,r){var o=!a&&(r||n!==c)||((t=n).nodeType?d(e,n,r):p(e,n,r));return t=null,o}];l<i;l++)if(n=r.relative[e[l].type])u=[Ce(xe(u),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[C]){for(o=++l;o<i&&!r.relative[e[o].type];o++);return Be(l>1&&xe(u),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(O,"$1"),n,l<o&&we(e.slice(l,o)),o<i&&we(e=e.slice(o)),o<i&&be(e))}u.push(n)}return xe(u)}return _e.prototype=r.filters=r.pseudos,r.setFilters=new _e,a=se.tokenize=function(e,t){var n,o,i,a,s,l,c,d=v[e+" "];if(d)return t?0:d.slice(0);for(s=e,l=[],c=r.preFilter;s;){for(a in n&&!(o=Y.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(i=[])),n=!1,(o=Z.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace(O," ")}),s=s.slice(n.length)),r.filter)!(o=X[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):v(e,l).slice(0)},s=se.compile=function(e,t){var n,o=[],i=[],s=k[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=we(t[n]))[C]?o.push(s):i.push(s);(s=k(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,s,l,d){var p,h,m,g=0,_="0",b=i&&[],C=[],x=c,B=i||o&&r.find.TAG("*",d),w=y+=null==x?1:Math.random()||.1,v=B.length;for(d&&(c=a==f||a||d);_!==v&&null!=(p=B[_]);_++){if(o&&p){for(h=0,a||p.ownerDocument==f||(u(p),s=!A);m=e[h++];)if(m(p,a||f,s)){l.push(p);break}d&&(y=w)}n&&((p=!m&&p)&&g--,i&&b.push(p))}if(g+=_,n&&_!==g){for(h=0;m=t[h++];)m(b,C,a,s);if(i){if(g>0)for(;_--;)b[_]||C[_]||(C[_]=q.call(l));C=ye(C)}M.apply(l,C),d&&!i&&C.length>0&&g+t.length>1&&se.uniqueSort(l)}return d&&(y=w,c=x),b};return n?ce(i):i}(i,o))).selector=e}return s},l=se.select=function(e,t,n,o){var i,l,c,d,p,u="function"==typeof e&&e,f=!o&&a(e=u.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&A&&r.relative[l[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=X.needsContext.test(e)?0:l.length;i--&&(c=l[i],!r.relative[d=c.type]);)if((p=r.find[d])&&(o=p(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(i,1),!(e=o.length&&be(l)))return M.apply(n,o),n;break}}return(u||s(e,f))(o,t,!A,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=C.split("").sort(E).join("")===C,n.detectDuplicates=!!p,u(),n.sortDetached=de((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||pe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||pe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||pe(z,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);w.find=k,w.expr=k.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=k.uniqueSort,w.text=k.getText,w.isXMLDoc=k.isXML,w.contains=k.contains,w.escapeSelector=k.escape;var S=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&w(e).is(n))break;r.push(e)}return r},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},T=w.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?w.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?w.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?w.grep(e,(function(e){return d.call(t,e)>-1!==n})):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,(function(e){return 1===e.nodeType})))},w.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(w(e).filter((function(){for(t=0;t<r;t++)if(w.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,o[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&T.test(e)?w(e):e||[],!1).length}});var M,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||M,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:I.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),q.test(r[1])&&w.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=b.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,M=w(b);var W=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&w(e);if(!T.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?w.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?d.call(w(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},(function(e,t){w.fn[e]=function(n,r){var o=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=w.filter(r,o)),this.length>1&&(z[e]||w.uniqueSort(o),W.test(e)&&o.reverse()),this.pushStack(o)}}));var N=/[^\x20\t\r\n\f]+/g;function H(e){return e}function F(e){throw e}function R(e,t,n,r){var o;try{e&&g(o=e.promise)?o.call(e).done(t).fail(n):e&&g(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return w.each(e.match(N)||[],(function(e,n){t[n]=!0})),t}(e):w.extend({},e);var t,n,r,o,i=[],a=[],s=-1,l=function(){for(o=o||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(s=i.length-1,a.push(n)),function t(n){w.each(n,(function(n,r){g(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==y(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return w.each(arguments,(function(e,t){for(var n;(n=w.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?w.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},w.extend({Deferred:function(e){var t=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return w.Deferred((function(n){w.each(t,(function(t,r){var o=g(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var i=0;function a(e,t,n,o){return function(){var s=this,l=arguments,c=function(){var r,c;if(!(e<i)){if((r=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=r&&("object"==typeof r||"function"==typeof r)&&r.then,g(c)?o?c.call(r,a(i,t,H,o),a(i,t,F,o)):(i++,c.call(r,a(i,t,H,o),a(i,t,F,o),a(i,t,H,t.notifyWith))):(n!==H&&(s=void 0,l=[r]),(o||t.resolveWith)(s,l))}},d=o?c:function(){try{c()}catch(r){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(r,d.stackTrace),e+1>=i&&(n!==F&&(s=void 0,l=[r]),t.rejectWith(s,l))}};e?d():(w.Deferred.getStackHook&&(d.stackTrace=w.Deferred.getStackHook()),r.setTimeout(d))}}return w.Deferred((function(r){t[0][3].add(a(0,r,g(o)?o:H,r.notifyWith)),t[1][3].add(a(0,r,g(e)?e:H)),t[2][3].add(a(0,r,g(n)?n:F))})).promise()},promise:function(e){return null!=e?w.extend(e,o):o}},i={};return w.each(t,(function(e,r){var a=r[2],s=r[5];o[r[1]]=a.add,s&&a.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=a.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=s.call(arguments),i=w.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?s.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(R(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||g(o[n]&&o[n].then)))return i.then();for(;n--;)R(o[n],a(n),i.reject);return i.promise()}});var O=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&O.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},w.readyException=function(e){r.setTimeout((function(){throw e}))};var Y=w.Deferred();function Z(){b.removeEventListener("DOMContentLoaded",Z),r.removeEventListener("load",Z),w.ready()}w.fn.ready=function(e){return Y.then(e).catch((function(e){w.readyException(e)})),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||Y.resolveWith(b,[w]))}}),w.ready.then=Y.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(w.ready):(b.addEventListener("DOMContentLoaded",Z),r.addEventListener("load",Z));var U=function(e,t,n,r,o,i,a){var s=0,l=e.length,c=null==n;if("object"===y(n))for(s in o=!0,n)U(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,g(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(w(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):i},P=/^-ms-/,G=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Q(e){return e.replace(P,"ms-").replace(G,X)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function V(){this.expando=w.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Q(t)]=n;else for(r in t)o[Q(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Q(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Q):(t=Q(t))in r?[t]:t.match(N)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new V,K=new V,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=K.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Q(r.slice(5)),ne(i,r,o[r]));J.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){K.set(this,e)})):U(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=K.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,o=n.shift(),i=w._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){w.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each((function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){w.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=w.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return w.contains(e.ownerDocument,e)},le={composed:!0};ae.getRootNode&&(se=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===w.css(e,"display")};function de(e,t,n,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},l=s(),c=n&&n[3]||(w.cssNumber[t]?"":"px"),d=e.nodeType&&(w.cssNumber[t]||"px"!==c&&+l)&&oe.exec(w.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;a--;)w.style(e,t,d+c),(1-i)*(1-(i=s()/l||.5))<=0&&(a=0),d/=i;d*=2,w.style(e,t,d+c),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=d,r.end=o)),o}var pe={};function ue(e){var t,n=e.ownerDocument,r=e.nodeName,o=pe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=w.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),pe[r]=o,o)}function fe(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=J.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&ce(r)&&(o[i]=ue(r))):"none"!==n&&(o[i]="none",J.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?w(this).show():w(this).hide()}))}});var he,Ae,me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,_e=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(Ae=b.createElement("input")).setAttribute("type","radio"),Ae.setAttribute("checked","checked"),Ae.setAttribute("name","t"),he.appendChild(Ae),m.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",m.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Ce(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?w.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,m.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function Be(e,t,n,r,o){for(var i,a,s,l,c,d,p=t.createDocumentFragment(),u=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===y(i))w.merge(u,i.nodeType?[i]:i);else if(ye.test(i)){for(a=a||p.appendChild(t.createElement("div")),s=(ge.exec(i)||["",""])[1].toLowerCase(),l=be[s]||be._default,a.innerHTML=l[1]+w.htmlPrefilter(i)+l[2],d=l[0];d--;)a=a.lastChild;w.merge(u,a.childNodes),(a=p.firstChild).textContent=""}else u.push(t.createTextNode(i));for(p.textContent="",f=0;i=u[f++];)if(r&&w.inArray(i,r)>-1)o&&o.push(i);else if(c=se(i),a=Ce(p.appendChild(i),"script"),c&&xe(a),n)for(d=0;i=a[d++];)_e.test(i.type||"")&&n.push(i);return p}var we=/^([^.]*)(?:\.(.+)|)/;function ve(){return!0}function ke(){return!1}function Se(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ee(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=ke;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each((function(){w.event.add(this,t,o,r,n)}))}function Te(e,t,n){n?(J.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=J.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),J.set(this,t,i),r=n(this,t),this[t](),i!==(o=J.get(this,t))||r?J.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o&&o.value}else i.length&&(J.set(this,t,{value:w.event.trigger(w.extend(i[0],w.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&w.event.add(e,t,ve)}w.event={global:{},add:function(e,t,n,r,o){var i,a,s,l,c,d,p,u,f,h,A,m=J.get(e);if($(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&w.find.matchesSelector(ae,o),n.guid||(n.guid=w.guid++),(l=m.events)||(l=m.events=Object.create(null)),(a=m.handle)||(a=m.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(N)||[""]).length;c--;)f=A=(s=we.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f&&(p=w.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=w.event.special[f]||{},d=w.extend({type:f,origType:A,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&w.expr.match.needsContext.test(o),namespace:h.join(".")},i),(u=l[f])||((u=l[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(f,a)),p.add&&(p.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),o?u.splice(u.delegateCount++,0,d):u.push(d),w.event.global[f]=!0)},remove:function(e,t,n,r,o){var i,a,s,l,c,d,p,u,f,h,A,m=J.hasData(e)&&J.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(N)||[""]).length;c--;)if(f=A=(s=we.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f){for(p=w.event.special[f]||{},u=l[f=(r?p.delegateType:p.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=u.length;i--;)d=u[i],!o&&A!==d.origType||n&&n.guid!==d.guid||s&&!s.test(d.namespace)||r&&r!==d.selector&&("**"!==r||!d.selector)||(u.splice(i,1),d.selector&&u.delegateCount--,p.remove&&p.remove.call(e,d));a&&!u.length&&(p.teardown&&!1!==p.teardown.call(e,h,m.handle)||w.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)w.event.remove(e,f+t[c],n,r,!0);w.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,s=new Array(arguments.length),l=w.event.fix(e),c=(J.get(this,"events")||Object.create(null))[l.type]||[],d=w.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(a=w.event.handlers.call(this,l,c),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((w.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,i,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<l;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?w(o,this).index(c)>-1:w.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&D(t,"input")&&Te(t,"click",ve),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&D(t,"input")&&Te(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&D(t,"input")&&J.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ve:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ve,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ve,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ve,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(e,t){w.event.special[e]={setup:function(){return Te(this,e,Se),!1},trigger:function(){return Te(this,e),!0},_default:function(){return!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||w.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),w.fn.extend({on:function(e,t,n,r){return Ee(this,e,t,n,r)},one:function(e,t,n,r){return Ee(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each((function(){w.event.remove(this,e,n,t)}))}});var De=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function We(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ze(e,t){var n,r,o,i,a,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(o in J.remove(t,"handle events"),s)for(n=0,r=s[o].length;n<r;n++)w.event.add(t,o,s[o][n]);K.hasData(e)&&(i=K.access(e),a=w.extend({},i),K.set(t,a))}}function Le(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ne(e,t,n,r){t=l(t);var o,i,a,s,c,d,p=0,u=e.length,f=u-1,h=t[0],A=g(h);if(A||u>1&&"string"==typeof h&&!m.checkClone&&qe.test(h))return e.each((function(o){var i=e.eq(o);A&&(t[0]=h.call(this,o,i.html())),Ne(i,t,n,r)}));if(u&&(i=(o=Be(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=w.map(Ce(o,"script"),Ie)).length;p<u;p++)c=o,p!==f&&(c=w.clone(c,!0,!0),s&&w.merge(a,Ce(c,"script"))),n.call(e[p],c,p);if(s)for(d=a[a.length-1].ownerDocument,w.map(a,We),p=0;p<s;p++)c=a[p],_e.test(c.type||"")&&!J.access(c,"globalEval")&&w.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?w._evalUrl&&!c.noModule&&w._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):x(c.textContent.replace(je,""),c,d))}return e}function He(e,t,n){for(var r,o=t?w.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||w.cleanData(Ce(r)),r.parentNode&&(n&&se(r)&&xe(Ce(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,s=e.cloneNode(!0),l=se(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=Ce(s),r=0,o=(i=Ce(e)).length;r<o;r++)Le(i[r],a[r]);if(t)if(n)for(i=i||Ce(e),a=a||Ce(s),r=0,o=i.length;r<o;r++)ze(i[r],a[r]);else ze(e,s);return(a=Ce(s,"script")).length>0&&xe(a,!l&&Ce(e,"script")),s},cleanData:function(e){for(var t,n,r,o=w.event.special,i=0;void 0!==(n=e[i]);i++)if($(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)o[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return U(this,(function(e){return void 0===e?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ne(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)}))},prepend:function(){return Ne(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ne(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ne(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(Ce(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return w.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!be[(ge.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(Ce(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ne(this,arguments,(function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(Ce(this)),n&&n.replaceChild(t,this))}),e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){w.fn[e]=function(e){for(var n,r=[],o=w(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),w(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Fe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Re=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Oe=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Ye=new RegExp(ie.join("|"),"i");function Ze(e,t,n){var r,o,i,a,s=e.style;return(n=n||Re(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=w.style(e,t)),!m.pixelBoxStyles()&&Fe.test(a)&&Ye.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(d);var e=r.getComputedStyle(d);n="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",a=36===t(e.right),o=36===t(e.width),d.style.position="absolute",i=12===t(d.offsetWidth/3),ae.removeChild(c),d=null}}function t(e){return Math.round(parseFloat(e))}var n,o,i,a,s,l,c=b.createElement("div"),d=b.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===d.style.backgroundClip,w.extend(m,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,o;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),o=r.getComputedStyle(t),s=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var Pe=["Webkit","Moz","ms"],Ge=b.createElement("div").style,Xe={};function Qe(e){return w.cssProps[e]||Xe[e]||(e in Ge?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Pe.length;n--;)if((e=Pe[n]+t)in Ge)return e}(e)||e)}var $e=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,o,i){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=w.css(e,n+ie[a],!0,o)),r?("content"===n&&(l-=w.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(l-=w.css(e,"border"+ie[a]+"Width",!0,o))):(l+=w.css(e,"padding"+ie[a],!0,o),"padding"!==n?l+=w.css(e,"border"+ie[a]+"Width",!0,o):s+=w.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function nt(e,t,n){var r=Re(e),o=(!m.boxSizingReliable()||n)&&"border-box"===w.css(e,"boxSizing",!1,r),i=o,a=Ze(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Fe.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&D(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===w.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===w.css(e,"boxSizing",!1,r),(i=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+tt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function rt(e,t,n,r,o){return new rt.prototype.init(e,t,n,r,o)}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=Q(t),l=Ve.test(t),c=e.style;if(l||(t=Qe(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:c[t];"string"==(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=de(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=o&&o[3]||(w.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,s=Q(t);return Ve.test(t)||(t=Qe(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Ze(e,t,r)),"normal"===o&&t in Ke&&(o=Ke[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),w.each(["height","width"],(function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!$e.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):Oe(e,Je,(function(){return nt(e,t,r)}))},set:function(e,n,r){var o,i=Re(e),a=!m.scrollboxSize()&&"absolute"===i.position,s=(a||r)&&"border-box"===w.css(e,"boxSizing",!1,i),l=r?tt(e,t,r,s,i):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),l&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),et(0,n,l)}}})),w.cssHooks.marginLeft=Ue(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-Oe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(w.cssHooks[e+t].set=et)})),w.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=Re(e),o=t.length;a<o;a++)i[t[a]]=w.css(e,t[a],!1,r);return i}return void 0!==n?w.style(e,t,n):w.css(e,t)}),e,t,arguments.length>1)}}),w.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(w.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||!w.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},w.fx=rt.prototype.init,w.fx.step={};var ot,it,at=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function lt(){it&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(lt):r.setTimeout(lt,w.fx.interval),w.fx.tick())}function ct(){return r.setTimeout((function(){ot=void 0})),ot=Date.now()}function dt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function pt(e,t,n){for(var r,o=(ut.tweeners[t]||[]).concat(ut.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function ut(e,t,n){var r,o,i=0,a=ut.prefilters.length,s=w.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=ot||ct(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),d=c.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Q(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=w.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(d,c.opts.specialEasing);i<a;i++)if(r=ut.prefilters[i].call(c,e,d,c.opts))return g(r.stop)&&(w._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return w.map(d,pt,c),g(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),w.fx.timer(w.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}w.Animation=w.extend(ut,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return de(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(N);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ut.tweeners[n]=ut.tweeners[n]||[],ut.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,l,c,d,p="width"in t||"height"in t,u=this,f={},h=e.style,A=e.nodeType&&ce(e),m=J.get(e,"fxshow");for(r in n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,u.always((function(){u.always((function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[r],at.test(o)){if(delete t[r],i=i||"toggle"===o,o===(A?"hide":"show")){if("show"!==o||!m||void 0===m[r])continue;A=!0}f[r]=m&&m[r]||w.style(e,r)}if((l=!w.isEmptyObject(t))||!w.isEmptyObject(f))for(r in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=J.get(e,"display")),"none"===(d=w.css(e,"display"))&&(c?d=c:(fe([e],!0),c=e.style.display||c,d=w.css(e,"display"),fe([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===w.css(e,"float")&&(l||(u.done((function(){h.display=c})),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",u.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(A=m.hidden):m=J.access(e,"fxshow",{display:c}),i&&(m.hidden=!A),A&&fe([e],!0),u.done((function(){for(r in A||fe([e]),J.remove(e,"fxshow"),f)w.style(e,r,f[r])}))),l=pt(A?m[r]:0,r,u),r in m||(m[r]=l.start,A&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ut.prefilters.unshift(e):ut.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=w.isEmptyObject(e),i=w.speed(t,n,r),a=function(){var t=ut(this,w.extend({},e),i);(o||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=w.timers,a=J.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&st.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||w.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),w.each(["toggle","show","hide"],(function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,r,o)}})),w.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),ot=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){it||(it=!0,lt())},w.fx.stop=function(){it=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(e,t){return e=w.fx&&w.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return U(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){w.removeAttr(this,e)}))}}),w.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?w.prop(e,t,n):(1===i&&w.isXMLDoc(e)||(o=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(N);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=ht[a],ht[a]=o,o=null!=n(e,t,r)?a:null,ht[a]=i),o}}));var At=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function gt(e){return(e.match(N)||[]).join(" ")}function _t(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}w.fn.extend({prop:function(e,t){return U(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[w.propFix[e]||e]}))}}),w.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&w.isXMLDoc(e)||(t=w.propFix[t]||t,o=w.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):At.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(e){var t,n,r,o,i,a,s,l=0;if(g(e))return this.each((function(t){w(this).addClass(e.call(this,t,_t(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(o=_t(n),r=1===n.nodeType&&" "+gt(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=gt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,o,i,a,s,l=0;if(g(e))return this.each((function(t){w(this).removeClass(e.call(this,t,_t(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(o=_t(n),r=1===n.nodeType&&" "+gt(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(s=gt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){w(this).toggleClass(e.call(this,n,_t(this),t),t)})):this.each((function(){var t,o,i,a;if(r)for(o=0,i=w(this),a=bt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=_t(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+gt(_t(n))+" ").indexOf(t)>-1)return!0;return!1}});var Ct=/\r/g;w.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=g(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,w(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=w.map(o,(function(e){return null==e?"":e+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=w.valHooks[o.type]||w.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Ct,""):null==n?"":n:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:gt(w.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?i+1:o.length;for(r=i<0?l:a?i:0;r<l;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=w.makeArray(t),a=o.length;a--;)((r=o[a]).selected=w.inArray(w.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},m.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in r;var xt=/^(?:focusinfocus|focusoutblur)$/,yt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(e,t,n,o){var i,a,s,l,c,d,p,u,h=[n||b],A=f.call(e,"type")?e.type:e,m=f.call(e,"namespace")?e.namespace.split("."):[];if(a=u=s=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!xt.test(A+w.event.triggered)&&(A.indexOf(".")>-1&&(m=A.split("."),A=m.shift(),m.sort()),c=A.indexOf(":")<0&&"on"+A,(e=e[w.expando]?e:new w.Event(A,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:w.makeArray(t,[e]),p=w.event.special[A]||{},o||!p.trigger||!1!==p.trigger.apply(n,t))){if(!o&&!p.noBubble&&!_(n)){for(l=p.delegateType||A,xt.test(l+A)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(n.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||r)}for(i=0;(a=h[i++])&&!e.isPropagationStopped();)u=a,e.type=i>1?l:p.bindType||A,(d=(J.get(a,"events")||Object.create(null))[e.type]&&J.get(a,"handle"))&&d.apply(a,t),(d=c&&a[c])&&d.apply&&$(a)&&(e.result=d.apply(a,t),!1===e.result&&e.preventDefault());return e.type=A,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),t)||!$(n)||c&&g(n[A])&&!_(n)&&((s=n[c])&&(n[c]=null),w.event.triggered=A,e.isPropagationStopped()&&u.addEventListener(A,yt),n[A](),e.isPropagationStopped()&&u.removeEventListener(A,yt),w.event.triggered=void 0,s&&(n[c]=s)),e.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each((function(){w.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),m.focusin||w.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=J.access(r,t);o||r.addEventListener(e,n,!0),J.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=J.access(r,t)-1;o?J.access(r,t,o):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var Bt=r.location,wt={guid:Date.now()},vt=/\?/;w.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||w.error("Invalid XML: "+(n?w.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var kt=/\[\]$/,St=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,r){var o;if(Array.isArray(t))w.each(t,(function(t,o){n||kt.test(e)?r(e,o):Dt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==y(t))r(e,t);else for(o in t)Dt(e+"["+o+"]",t[o],n,r)}w.param=function(e,t){var n,r=[],o=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,(function(){o(this.name,this.value)}));else for(n in e)Dt(n,e[n],t,o);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&Tt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,(function(e){return{name:t.name,value:e.replace(St,"\r\n")}})):{name:t.name,value:n.replace(St,"\r\n")}})).get()}});var qt=/%20/g,jt=/#.*$/,Mt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,zt=/^\/\//,Lt={},Nt={},Ht="*/".concat("*"),Ft=b.createElement("a");function Rt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(N)||[];if(g(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ot(e,t,n,r){var o={},i=e===Nt;function a(s){var l;return o[s]=!0,w.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||i||o[c]?i?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Yt(e,t){var n,r,o=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}Ft.href=Bt.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Bt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Bt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Yt(Yt(e,w.ajaxSettings),t):Yt(w.ajaxSettings,e)},ajaxPrefilter:Rt(Lt),ajaxTransport:Rt(Nt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,i,a,s,l,c,d,p,u,f=w.ajaxSetup({},t),h=f.context||f,A=f.context&&(h.nodeType||h.jquery)?w(h):w.event,m=w.Deferred(),g=w.Callbacks("once memory"),_=f.statusCode||{},C={},x={},y="canceled",B={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=It.exec(i);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,C[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)B.always(e[B.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||y;return n&&n.abort(t),v(0,t),this}};if(m.promise(B),f.url=((e||f.url||Bt.href)+"").replace(zt,Bt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(N)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Ft.protocol+"//"+Ft.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=w.param(f.data,f.traditional)),Ot(Lt,f,t,B),c)return B;for(p in(d=w.event&&f.global)&&0==w.active++&&w.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Wt.test(f.type),o=f.url.replace(jt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(qt,"+")):(u=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(vt.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Mt,"$1"),u=(vt.test(o)?"&":"?")+"_="+wt.guid+++u),f.url=o+u),f.ifModified&&(w.lastModified[o]&&B.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&B.setRequestHeader("If-None-Match",w.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&B.setRequestHeader("Content-Type",f.contentType),B.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ht+"; q=0.01":""):f.accepts["*"]),f.headers)B.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(h,B,f)||c))return B.abort();if(y="abort",g.add(f.complete),B.done(f.success),B.fail(f.error),n=Ot(Nt,f,t,B)){if(B.readyState=1,d&&A.trigger("ajaxSend",[B,f]),c)return B;f.async&&f.timeout>0&&(s=r.setTimeout((function(){B.abort("timeout")}),f.timeout));try{c=!1,n.send(C,v)}catch(e){if(c)throw e;v(-1,e)}}else v(-1,"No Transport");function v(e,t,a,l){var p,u,b,C,x,y=t;c||(c=!0,s&&r.clearTimeout(s),n=void 0,i=l||"",B.readyState=e>0?4:0,p=e>=200&&e<300||304===e,a&&(C=function(e,t,n){for(var r,o,i,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),n[i]}(f,B,a)),!p&&w.inArray("script",f.dataTypes)>-1&&w.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),C=function(e,t,n,r){var o,i,a,s,l,c={},d=e.dataTypes.slice();if(d[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=d.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=d.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=c[l+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],d.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(f,C,B,p),p?(f.ifModified&&((x=B.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=x),(x=B.getResponseHeader("etag"))&&(w.etag[o]=x)),204===e||"HEAD"===f.type?y="nocontent":304===e?y="notmodified":(y=C.state,u=C.data,p=!(b=C.error))):(b=y,!e&&y||(y="error",e<0&&(e=0))),B.status=e,B.statusText=(t||y)+"",p?m.resolveWith(h,[u,y,B]):m.rejectWith(h,[B,y,b]),B.statusCode(_),_=void 0,d&&A.trigger(p?"ajaxSuccess":"ajaxError",[B,f,p?u:b]),g.fireWith(h,[B,y]),d&&(A.trigger("ajaxComplete",[B,f]),--w.active||w.event.trigger("ajaxStop")))}return B},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],(function(e,t){w[t]=function(e,n,r,o){return g(n)&&(o=o||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:o,data:n,success:r},w.isPlainObject(e)&&e))}})),w.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),w._evalUrl=function(e,t,n){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){w.globalEval(e,t,n)}})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){w(this).wrapInner(e.call(this,t))})):this.each((function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){w(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},Ut=w.ajaxSettings.xhr();m.cors=!!Ut&&"withCredentials"in Ut,m.ajax=Ut=!!Ut,w.ajaxTransport((function(e){var t,n;if(m.cors||Ut&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Zt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),w.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),w.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=w("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Pt,Gt=[],Xt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||w.expando+"_"+wt.guid++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",(function(e,t,n){var o,i,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+o):!1!==e.jsonp&&(e.url+=(vt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||w.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=r[o],r[o]=function(){a=arguments},n.always((function(){void 0===i?w(r).removeProp(o):r[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(o)),a&&g(i)&&i(a[0]),a=i=void 0})),"script"})),m.createHTMLDocument=((Pt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Pt.childNodes.length),w.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),i=!n&&[],(o=q.exec(e))?[t.createElement(o[1])]:(o=Be([e],t,i),i&&i.length&&w(i).remove(),w.merge([],o.childNodes)));var r,o,i},w.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(" ");return s>-1&&(r=gt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&w.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},w.expr.pseudos.animated=function(e){return w.grep(w.timers,(function(t){return e===t.elem})).length},w.offset={setOffset:function(e,t,n){var r,o,i,a,s,l,c=w.css(e,"position"),d=w(e),p={};"static"===c&&(e.style.position="relative"),s=d.offset(),i=w.css(e,"top"),l=w.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+l).indexOf("auto")>-1?(a=(r=d.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+o),"using"in t?t.using.call(e,p):d.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){w.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),o.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-w.css(r,"marginTop",!0),left:t.left-o.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||ae}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return U(this,(function(e,r,o){var i;if(_(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),w.each(["top","left"],(function(e,t){w.cssHooks[t]=Ue(m.pixelPosition,(function(e,n){if(n)return n=Ze(e,t),Fe.test(n)?w(e).position()[t]+"px":n}))})),w.each({Height:"height",Width:"width"},(function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){w.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===i?"margin":"border");return U(this,(function(t,n,o){var i;return _(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?w.css(t,n,s):w.style(t,n,o,s)}),t,a?o:void 0,a)}}))})),w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){w.fn[t]=function(e){return this.on(t,e)}})),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Qt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=s.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||w.guid++,o},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=D,w.isFunction=g,w.isWindow=_,w.camelCase=Q,w.type=y,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},w.trim=function(e){return null==e?"":(e+"").replace(Qt,"")},void 0===(n=function(){return w}.apply(t,[]))||(e.exports=n);var $t=r.jQuery,Vt=r.$;return w.noConflict=function(e){return r.$===w&&(r.$=Vt),e&&r.jQuery===w&&(r.jQuery=$t),w},void 0===o&&(r.jQuery=r.$=w),w}))},7025:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(2777);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},4668:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(9584);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},1266:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(5890);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},4543:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(698);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},4493:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(3353);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},3875:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(2884);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},2045:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(952);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},3577:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(6263);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},7323:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(8236);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},5691:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(1798);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},9671:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(8043);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},1184:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(4456);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},4277:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(215);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},9620:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(4800);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},7295:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(6655);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},3071:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(3379),o=n.n(r),i=n(6647);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{}},3379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],l=t.base?s[0]+t.base:s[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var p=a(d),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(i[p].references++,i[p].updater(u)):i.push({identifier:d,updater:A(u,t),references:1}),r.push(d)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function u(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,h=0;function A(e,t){var n,r,o;if(t.singleton){var i=h++;n=f||(f=l(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=l(t),r=u.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var l=s(e,t),c=0;c<n.length;c++){var d=a(n[c]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}n=l}}}},3598:(e,t,n)=>{var r=n(9755);r((function(){for(var e=r(".card-room .card-room__image").length,t=1;t<=e;t++)r(".card-room").find("#"+t+".card-room__image").addClass("images"+t)}))},2450:(e,t,n)=>{var r=n(9755);r((function(){r(".checkbox-list-expandable__topicBlock").on("click",(function(){var e=r(this).closest(".checkbox-list-expandable").find(".checkbox-list"),t=r(this).closest(".checkbox-list-expandable").find(".checkbox-list-expandable__expand");e.hasClass("checkbox-list_hide")?(e.removeClass("checkbox-list_hide"),t.addClass("checkbox-list-expandable__expand_open")):(e.addClass("checkbox-list_hide"),t.removeClass("checkbox-list-expandable__expand_open"))}))}))},9779:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9755);r((function(){function e(e){var t="";"guests"==e.attr("name")&&(t=function(e){for(var t,n,r=e.find(".dropdown-block__items-line"),o="",i=0,a=0,s=0;s<r.length;s++)t=r[s].querySelector(".dropdown-block__block-qty span"),n=r[s].querySelector("h3"),parseInt(t.innerHTML)>0&&"младенцы"!=n.innerHTML&&(i+=parseInt(t.innerHTML)),parseInt(t.innerHTML)>0&&"младенцы"==n.innerHTML&&(a+=parseInt(t.innerHTML));return 0==i&&(o="Сколько гостей"),0!=i&&0!=a&&(o=i+" гостя, "+a+" младенец"),0!=i&&0==a&&(o=i+" гостя"),o}(e)),"room"==e.attr("name")&&(t=function(e){for(var t,n,r=e.find(".dropdown-block__items-line"),o="",i=0;i<r.length;i++)t=r[i].querySelector(".dropdown-block__block-qty span"),n=r[i].querySelector("h3"),parseInt(t.innerHTML)>0&&(o=o+t.innerHTML+" "+n.innerHTML+", ");return""==(o=o.substr(0,o.length-2))&&(o="Выберите удобства"),o}(e)),t.length>19&&(t=t.substr(0,20)+"..."),e.find(".dropdown-block__dropdown").html(t)}r(".dropdown-block__dropdown").on("click",(function(){var e=r(this).closest(".dropdown-block").find(".dropdown-block__dropdown-items");e.hasClass("dropdown-block__dropdown-items_hide")?(e.removeClass("dropdown-block__dropdown-items_hide"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("dropdown-block__dropdown-items_hide"),r(this).removeClass("dropdown-block__dropdown_items-show"))})),r(".dropdown-block__inc-qty-minus").on("click",(function(){var t,n,o=0;if(t=r(this).closest(".dropdown-block__block-qty").find("span"),(n=parseInt(t.html()))>0&&(o=n-1,t.html(o)),1==n||0==n)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var i=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-plus");i.hasClass("dropdown-block__inc-qty_disable")&&i.removeClass("dropdown-block__inc-qty_disable")}e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__inc-qty-plus").on("click",(function(){var t,n,o=0;if(t=r(this).closest(".dropdown-block__block-qty").find("span"),(n=parseInt(t.html()))<10&&(o=n+1,t.html(o)),9==n||10==n)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var i=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-minus");i.hasClass("dropdown-block__inc-qty_disable")&&i.removeClass("dropdown-block__inc-qty_disable")}e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__btns .link_ok").on("click",(function(){event.preventDefault(),r(this).closest(".dropdown-block").find(".dropdown-block__dropdown").click(),e(r(this).closest(".dropdown-block"))})),r(".dropdown-block__btns .link_clean").on("click",(function(){event.preventDefault();var t=r(this).closest(".dropdown-block__dropdown-items");t.find(".dropdown-block__block-qty").find("span").html("0"),t.find(".dropdown-block__inc-qty-minus").addClass("dropdown-block__inc-qty_disable"),e(r(this).closest(".dropdown-block"))}))}))},1700:(e,t,n)=>{var r=n(9755);r((function(){r(".rate-btn__star").on("click",(function(){r(this).closest(".rate-btn").find(".rate-btn__star").removeClass("rate-btn__star_active");for(var e=parseInt(r(this).attr("id")),t=1;t<=e;t++)r(this).closest(".rate-btn").find("#"+t).addClass("rate-btn__star_active")}))}))},6085:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Controller=void 0;var n=function(){function e(e,t,n){this.model=t,this.view=n,this.thisSlider=e.element,this.idElement=e.idElement,this.min=e.min,this.max=e.max,this.minStart=e.minStart,this.maxStart=e.maxStart,this.step=e.step,this.type=e.type,this.orientation=e.orientation,this.scale=e.scale,this.scaleStep=e.scaleStep,this.value=e.value,this.settings=e.settings}return e.prototype.defineOrientation=function(e){return"horizontal"==e?"x":"y"},e.prototype.moveAt=function(e,t,n){document.body.classList.add("moving-slider");var r=parseInt(e.style.left),o=this.model.getWidthRange();switch(n){case"left":this.model.rangeLeft.style.zindex=15,this.model.rangeRight.style.zindex=10;break;case"right":this.model.rangeRight.style.zindex=15,this.model.rangeLeft.style.zindex=10}var i=this.thisSlider,a=this;i.onmousemove=function(e){document.onmousemove=function(e){var t,i,s;switch(a.defineOrientation(a.orientation)){case"x":1==a.step?(t=e.pageX-parseInt(a.model.slider.offsetLeft),a.movingRange(n,r,t,o)):(s=a.masStepsForMoving(),i=e.pageX-parseInt(a.model.slider.offsetLeft),-1!=s.indexOf(i)?(t=i,a.movingRange(n,r,t,o)):t=r);break;case"y":var l=a.getCoords(a.model.slider);1==a.step?(t=e.pageY-l.top,a.movingRange(n,r,t,o)):(s=a.masStepsForMoving(),i=e.pageY-l.top,-1!=s.indexOf(i)?(t=i,a.movingRange(n,r,t,o)):t=r)}}},document.onmouseup=function(e){i.onmousemove=null,i.onmouseup=null,document.onmousemove=null,document.onmouseup=null,document.body.classList.remove("moving-slider")}},e.prototype.getCoords=function(e){var t=e.getBoundingClientRect();return{top:t.top+pageYOffset,left:t.left+pageXOffset}},e.prototype.movingRange=function(e,t,n,r){var o,i=0;function a(e,t){var n=e/t.model.getWidth();return((t.max-t.min)*n+t.min).toFixed()}n<0&&(n=0),n>this.model.getWidth()&&(n=this.model.getWidth()),n>=0&&n<=this.model.getWidth()&&("left"==e&&this.model.getPosRangeRight()>=n&&"from0to"!=this.type&&(i=t-n,o=a(n,this),this.model.rangeLeft.style.left=n+"px",this.model.range.style.transform="translate("+n+"px, 0px)",t=n,this.drawValueMin(o),"on"==this.settings&&this.changeConfigInputMin(o),this.writeDataSliderMin(o),this.model.range.style.width=r+i+"px"),"right"==e&&this.model.getPosRangeLeft()<=n&&(i=n-t,o=a(n,this),this.model.rangeRight.style.left=n+"px",this.drawValueMax(o),"on"==this.settings&&this.changeConfigInputMax(o),this.writeDataSliderMax(o),this.model.range.style.width=r+i+"px"))},e.prototype.drawValueMin=function(e){this.model.elemValueMin.innerHTML=e},e.prototype.drawValueMax=function(e){this.model.elemValueMax.innerHTML=e},e.prototype.writeDataSliderMin=function(e){this.minStart=e,this.view.minStart=e},e.prototype.writeDataSliderMax=function(e){this.maxStart=e,this.view.maxStart=e},e.prototype.changeConfigInputMin=function(e){e<this.min&&(e=this.min),this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextminStart"+this.idElement.substr(-1)).value=e},e.prototype.changeConfigInputMax=function(e){e>this.max&&(e=this.max),this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmaxStart"+this.idElement.substr(-1)).value=e},e.prototype.moveRangeOnclickSlider=function(){var e=this.model.slider,t=this;e.onmousedown=function(n){e.onmouseup=function(e){var n;switch(t.defineOrientation(t.orientation)){case"x":n=e.pageX-parseInt(t.model.slider.offsetLeft),1!=t.step&&(n=t.definePosStepClosestClick(n));break;case"y":n=e.pageY-t.getCoords(t.model.slider).top,1!=t.step&&(n=t.definePosStepClosestClick(n))}switch(t.type){case"interval":var r=t.model.getPosRangeLeft(),o=t.model.getPosRangeRight();Math.abs(r-n)<Math.abs(o-n)?(t.model.getPosRangeLeft(),t.movingRange("left",t.model.getPosRangeLeft(),n,t.model.getWidthRange())):(t.model.getPosRangeRight(),t.movingRange("right",t.model.getPosRangeRight(),n,t.model.getWidthRange()));break;case"from0to":case"one":t.model.getPosRangeRight(),t.movingRange("right",t.model.getPosRangeRight(),n,t.model.getWidthRange())}}}},e.prototype.definePosStepClosestClick=function(e){var t,n,r,o=0,i=this.model.getWidth();t=this.masStepsForMoving();for(var a=0;a<t.length;a++)n=Math.abs(t[a]-e),r=Math.abs(t[a+1]-e),n<i?(o=t[a],i=n):r<i&&(o=t[a+1],i=r);return o},e.prototype.masStepsForMoving=function(){for(var e=(this.max-this.min)/this.step,t=this.model.getWidth()/(this.max-this.min)*this.step,n=[],r=0;r<=e;r++)n[r]=t*r;return n},e.prototype.applyConfig=function(){var e=this.model.checkboxSettings,t=this;function n(e,t){for(var n=e.querySelectorAll(".range-slider#idSlider"+t+" .range-slider__slider .range-slider__scale"),r=0;r<n.length;r++)n[r].remove();e.querySelector(".range-slider#idSlider"+t+" .range-slider__left").style.display="inline-block",e.querySelector(".range-slider#idSlider"+t+" .range-slider__range").style.display="inline-block"}e.onclick=function(r){1==e.checked?t.model.settingsBlock.style.display="block":t.model.settingsBlock.style.display="none";for(var o=t.thisSlider.getElementsByClassName("input-text__input"),i=0;i<o.length;i++)o[i].onblur=function(){var e,r,o,i,a,s,l=this.id,c=t.idElement.substr(-1);-1!=l.indexOf("min",0)&&-1==l.indexOf("minStart",0)&&(e=Number.parseInt(this.value),n(t.thisSlider,c),t.min=e,t.view.min=e),-1!=l.indexOf("max",0)&&-1==l.indexOf("maxStart",0)&&(r=Number.parseInt(this.value),n(t.thisSlider,c),t.max=r,t.view.max=r),-1!=l.indexOf("minStart",0)&&(o=Number.parseInt(this.value),n(t.thisSlider,c),o<=t.maxStart&&(t.minStart=o,t.view.minStart=o)),-1!=l.indexOf("maxStart",0)&&(i=Number.parseInt(this.value),n(t.thisSlider,c),i>=t.minStart&&(t.maxStart=i,t.view.maxStart=i)),-1!=l.indexOf("scaleStep",0)&&(s=Number.parseInt(this.value),n(t.thisSlider,c),t.scaleStep=s,t.view.scaleStep=s),-1!=l.indexOf("step",0)&&(a=Number.parseInt(this.value),n(t.thisSlider,c),t.step=a,t.view.step=a),t.checkMinMaxStart(),t.view.drawType(),t.view.drawScale(),t.view.drawRange(),t.view.drawValue(),"on"==t.settings&&t.writeDataInConfig()};var a=t.thisSlider.getElementsByClassName("radiogroup__input");for(i=0;i<a.length;i++)a[i].onclick=function(){var e,r,o,i,a=t.idElement.substr(-1),s=this.name;if(-1!=s.indexOf("Type",0)){switch(this.id.substr(-1)){case"1":e="interval";break;case"2":e="from0to",t.minStart=t.min;break;case"3":e="one";break;default:e="interval"}n(t.thisSlider,a),t.type=e,t.view.type=e}if(-1!=s.indexOf("Orientation",0)){switch(this.id.substr(-1)){case"1":r="horizontal";break;case"2":r="vertical";break;default:r="horizontal"}n(t.thisSlider,a),t.orientation=r,t.view.orientation=r}if(-1!=s.indexOf("Value",0)){switch(this.id.substr(-1)){case"1":o="on";break;case"2":o="off";break;default:o="on"}n(t.thisSlider,a),t.value=o,t.view.value=o}if(-1!=s.indexOf("Scale",0)){switch(this.id.substr(-1)){case"1":i="on";break;case"2":i="off";break;default:i="on"}n(t.thisSlider,a),t.scale=i,t.view.scale=i}t.checkMinMaxStart(),t.view.drawType(),t.view.drawScale(),t.view.drawOrientation(),t.view.drawValue(),t.view.drawRange(),"on"==t.settings&&t.writeDataInConfig()}}},e.prototype.checkMinMaxStart=function(){this.minStart<this.min&&(this.minStart=this.min,this.view.minStart=this.min),this.maxStart>this.max&&(this.maxStart=this.max,this.view.maxStart=this.max),this.minStart>this.max&&(this.minStart=this.max,this.view.minStart=this.max)},e.prototype.writeDataInConfig=function(){this.model.elemValueMin.innerHTML=this.minStart,this.model.elemValueMax.innerHTML=this.maxStart;var e,t,n,r,o=this.idElement.substr(-1);switch(this.type){case"interval":e="1";break;case"from0to":e="2",this.writeDataSliderMin(this.min);break;case"one":e="3";break;default:e="1"}switch(this.orientation){case"horizontal":t="1";break;case"vertical":t="2";break;default:t="1"}switch(this.value){case"on":n="1";break;case"off":n="2";break;default:n="1"}switch(this.scale){case"on":r="1";break;case"off":r="2";break;default:r="1"}this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmin"+o).value=this.min,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmax"+o).value=this.max,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextminStart"+o).value=this.minStart,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextmaxStart"+o).value=this.maxStart,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextstep"+o).value=this.step,this.thisSlider.querySelector(".slider-config .slider-config__block .input-text #inputTextscaleStep"+o).value=this.scaleStep,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopType"+o+"]#rbrbGroopType"+o+o+e).checked=!0,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopOrientation"+o+"]#rbrbGroopOrientation"+o+o+t).checked=!0,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopValue"+o+"]#rbrbGroopValue"+o+o+n).checked=!0,this.thisSlider.querySelector(".radiogroup__input[name=rbGroopScale"+o+"]#rbrbGroopScale"+o+o+r).checked=!0},e}();t.Controller=n},3469:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Model=void 0;var n=function(){function e(e){this.thisSlider=e.element,this.idElement=e.idElement,this.rangeSlider=this.thisSlider.querySelector(".range-slider#"+this.idElement),this.slider=this.rangeSlider.querySelector(".range-slider__slider"),this.range=this.slider.querySelector(".range-slider__range"),this.rangeLeft=this.slider.querySelector(".range-slider__left"),this.rangeRight=this.slider.querySelector(".range-slider__right"),this.elemValueMin=this.thisSlider.querySelector(".range-slider__label-min"),this.elemValueMax=this.thisSlider.querySelector(".range-slider__label-max"),this.checkboxSettings=this.thisSlider.querySelector(".slider-config .checkbox-list__input"),this.settingsBlock=this.thisSlider.querySelector(".slider-config .slider-config__block"),this.labelBlock=this.rangeSlider.querySelector(".range-slider__label-block"),this.labelMin=this.rangeSlider.querySelector("span.range-slider__label-min"),this.labelDash=this.rangeSlider.querySelector("span.range-slider__label-min"),this.labelMax=this.rangeSlider.querySelector("span.range-slider__label-max"),this.blockScaleVals=this.slider.querySelectorAll(".range-slider__scale-val")}return e.prototype.getWidth=function(){return this.slider.clientWidth},e.prototype.getWidthRange=function(){return this.range.clientWidth},e.prototype.getPosRangeLeft=function(){return parseInt(getComputedStyle(this.rangeLeft).left)},e.prototype.getPosRangeRight=function(){return parseInt(getComputedStyle(this.rangeRight).left)},e}();t.Model=n},4358:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0});var o=n(3469),i=n(4229),a=n(6085);r.fn.slider=function(e){new(function(){function e(e){this.type="interval",this.orientation="horizontal",this.value="on",this.scale="on",this.settings="on",this.dataSlider={element:e.element,idElement:e.idElement,width:e.width||400,type:e.type||"interval",min:e.min||0,max:e.max||1e3,minStart:e.minStart||0,maxStart:e.maxStart||500,step:e.step||1,orientation:e.orientation||"horizontal",value:e.value||"on",scale:e.scale||"on",scaleStep:e.scaleStep||10,settings:e.settings||"on"}}return e.prototype.runSlider=function(){var e=new o.Model(this.dataSlider),t=new i.View(this.dataSlider,e),n=new a.Controller(this.dataSlider,e,t);e.rangeSlider.style.width=this.width+"px",n.checkMinMaxStart(),"on"==this.dataSlider.settings&&n.writeDataInConfig(),t.drawRange(),n.moveRangeOnclickSlider(),"on"==this.dataSlider.settings&&n.applyConfig(),e.rangeLeft.onmousedown=function(t){n.moveAt(e.rangeLeft,t,"left")},e.rangeRight.onmousedown=function(t){n.moveAt(e.rangeRight,t,"right")},t.drawType(),t.drawScale(),t.drawOrientation(),t.drawValue()},e}())(e).runSlider()}},4229:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var n=function(){function e(e,t){this.model=t,this.dataSlider=e,this.thisSlider=e.element,this.idElement=e.idElement,this.min=e.min,this.max=e.max,this.minStart=e.minStart,this.maxStart=e.maxStart,this.type=e.type,this.orientation=e.orientation,this.scale=e.scale,this.scaleStep=e.scaleStep,this.value=e.value}return e.prototype.drawRange=function(){var e,t;switch(t=this.model.getWidth()/(this.max-this.min)*(this.maxStart-this.min),this.model.rangeRight.style.left=t+"px",this.type){case"interval":e=this.model.getWidth()/(this.max-this.min)*(this.minStart-this.min),this.model.rangeLeft.style.left=e+"px",this.model.range.style.transform="translateX("+e+"px)",this.model.range.style.left=e+"px",this.model.range.style.width=t-e+"px";break;case"from0to":this.model.rangeLeft.style.left="0px",this.model.range.style.transform="translateX(-5px)",this.model.range.style.left="0px",this.model.range.style.width=t+"px";break;case"one":default:e=this.model.getWidth()/(this.max-this.min)*(this.minStart-this.min),this.model.rangeLeft.style.left=e+"px",this.model.range.style.transform="translateX("+e+"px)",this.model.range.style.left=e+"px",this.model.range.style.width=t-e+"px"}},e.prototype.drawType=function(){switch(this.type){case"interval":break;case"from0to":this.model.rangeLeft.style.display="none",this.model.range.style.transform="translate(-5px, 0px)",this.model.range.style.width=this.model.getPosRangeRight();break;case"one":this.model.rangeLeft.style.display="none",this.model.range.style.display="none",this.model.labelMin.style.display="none",this.model.labelDash.style.display="none"}},e.prototype.drawScale=function(){switch(this.scale){case"on":var e,t=void 0,n=this.min,r=void 0,o=void 0,i=void 0;this.scaleStep>0?t=this.scaleStep:(t=Math.floor(this.model.getWidth()/45),this.scaleStep=t),e=this.model.getWidth()/t;for(var a=0;a<=this.model.getWidth();)i='<div class="range-slider__scale">\n            <div class="range-slider__scale-line" id="scale'+(r=Math.floor(a))+'"></div>\n            </div>',this.model.slider.insertAdjacentHTML("beforeend",i),(o=this.model.slider.querySelector(".range-slider__scale-line#scale"+r).closest(".range-slider__scale")).style.left=r+"px",this.model.rangeSlider.style.marginBottom="35px",a+=e,o.insertAdjacentHTML("beforeend",'<div class="range-slider__scale-val">'+Math.floor(n)+"</div>"),n+=(this.max-this.min)/t}},e.prototype.drawOrientation=function(){var e,t="80px";switch(this.orientation){case"horizontal":this.model.slider.style.transform="translate(5px, 0) rotate(0deg)",this.model.rangeSlider.style.height=t;break;case"vertical":this.model.slider.style.transform="translate(5px, 0) rotate(90deg) translateX(50%)",this.model.rangeSlider.style.height=this.model.getWidth()+75+"px",e=this.model.blockScaleVals;for(var n=0;n<e.length;n++)e[n].style.transform="translate(5px, 0) rotate(-90deg)";break;default:this.model.slider.style.transform="translate(5px, 0) rotate(0deg)",this.model.rangeSlider.style.height=t}},e.prototype.drawValue=function(){switch(this.value){case"on":switch(this.model.labelBlock.style.display="flex",this.model.labelMax.innerHTML=this.maxStart,this.type){case"interval":this.model.labelMin.innerHTML=this.minStart,this.model.labelMin.style.display="block",this.model.labelDash.style.display="block";break;case"from0to":this.model.labelMin.innerHTML=this.min,this.model.labelMin.style.display="block",this.model.labelDash.style.display="block";break;case"one":this.model.labelMin.innerHTML=this.minStart,this.model.labelMin.style.display="none",this.model.labelDash.style.display="none";break;default:this.model.labelMin.innerHTML=this.minStart,this.model.labelMin.style.display="block",this.model.labelDash.style.display="block"}break;case"off":this.model.labelBlock.style.display="none"}},e}();t.View=n},1487:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0}),n(4358),r((function(){r(".search-room").slider({element:document.querySelector(".search-room__slider-price"),idElement:"idSlider1",width:266,type:"interval",min:0,max:15948,minStart:5e3,maxStart:1e4,step:1,orientation:"horizontal",value:"on",scale:"off",scaleStep:10,settings:"off"})}))},7869:(e,t,n)=>{"use strict";e.exports=n.p+"317b418ed317e258b173.ttf"},7771:(e,t,n)=>{"use strict";e.exports=n.p+"3db65dc4b858f0fed4fb.woff"},3988:(e,t,n)=>{"use strict";e.exports=n.p+"8b56391ed36ea95337c6.woff2"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";n(3071),n(9620),n(7025),n(4543),n(1266),n(2450),n(4493),n(9779),n(3875),n(2045),n(3577),n(7323),n(5691),n(9671),n(1184),n(1700),n(4277),n(4668),n(3598),n(7295),n(1487)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9idG4vYnRuLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FyZC1yb29tL2NhcmQtcm9vbS5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuc2NzcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9jaGVja2JveC1saXN0L2NoZWNrYm94LWxpc3Quc2NzcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2Zvb3Rlci9mb290ZXIuc2NzcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9oZWFkZXIvaGVhZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvbGluay9saW5rLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL3JhdGUtYnRuL3JhdGUtYnRuLnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvdG9waWMtbGFiZWwvdG9waWMtbGFiZWwuc2NzcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9wYWdlcy9zZWFyY2gtcm9vbS9zZWFyY2gtcm9vbS5zY3NzIiwid2VicGFjazovL3dlYnAvLi9zcmMvZm9udC9mb250cy5jc3MiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL3dlYnAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2J0bi9hcnJvdy13aGl0ZS5zdmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvYnRuL2Fycm93LnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9jYXJkLXJvb20vaW1nL2ltYWdlMS5wbmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FyZC1yb29tL2ltZy9pbWFnZTEwLnBuZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9jYXJkLXJvb20vaW1nL2ltYWdlMTEucG5nIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NhcmQtcm9vbS9pbWcvaW1hZ2UxMi5wbmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FyZC1yb29tL2ltZy9pbWFnZTIucG5nIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NhcmQtcm9vbS9pbWcvaW1hZ2UzLnBuZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9jYXJkLXJvb20vaW1nL2ltYWdlNC5wbmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FyZC1yb29tL2ltZy9pbWFnZTUucG5nIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NhcmQtcm9vbS9pbWcvaW1hZ2U2LnBuZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9jYXJkLXJvb20vaW1nL2ltYWdlNy5wbmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FyZC1yb29tL2ltZy9pbWFnZTgucG5nIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NhcmQtcm9vbS9pbWcvaW1hZ2U5LnBuZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi9leHBhbmQtbW9yZS5zdmciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaGVhZGVyL2V4cGFuZC1tb3JlLnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9pbnB1dC10ZXh0L2Fycm93LnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9wYWdpbmF0aW9uL2Fycm93LXdoaXRlLnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9zdGFyLnN2ZyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9zdGFyX2JvcmRlci5zdmciLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvYnRuL2J0bi5zY3NzPzZlMzciLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2FyZC1yb29tL2NhcmQtcm9vbS5zY3NzPzFjNTQiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS5zY3NzP2UyZWQiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvY2hlY2tib3gtbGlzdC9jaGVja2JveC1saXN0LnNjc3M/OWVkMyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9kcm9wZG93bi9kcm9wZG93bi5zY3NzPzg1YWEiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvZm9vdGVyL2Zvb3Rlci5zY3NzPzc3OWIiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaGVhZGVyL2hlYWRlci5zY3NzPzUyNjMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LnNjc3M/ZWVlZCIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9saW5rL2xpbmsuc2Nzcz8yOWMzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5zY3NzP2Y1NDMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzPzA5M2IiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmF0ZS1idG4vcmF0ZS1idG4uc2Nzcz83ZTNhIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL3RvcGljLWxhYmVsL3RvcGljLWxhYmVsLnNjc3M/NjI1YyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2luZGV4LnNjc3M/NzIyMyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL3BhZ2VzL3NlYXJjaC1yb29tL3NlYXJjaC1yb29tLnNjc3M/YjVlMCIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2ZvbnQvZm9udHMuY3NzPzMwYWIiLCJ3ZWJwYWNrOi8vd2VicC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL2Jsb2Nrcy9jYXJkLXJvb20vY2FyZC1yb29tLmpzIiwid2VicGFjazovL3dlYnAvLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuanMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvZHJvcGRvd24vZHJvcGRvd24udHMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9ibG9ja3MvcmF0ZS1idG4vcmF0ZS1idG4uanMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9tb2R1bGVzL3BsdWdpbi5zbGlkZXIvcGx1Z2luLnNsaWRlci5jb250cm9sbGVyLnRzIiwid2VicGFjazovL3dlYnAvLi9zcmMvbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIubW9kZWwudHMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9tb2R1bGVzL3BsdWdpbi5zbGlkZXIvcGx1Z2luLnNsaWRlci50cyIsIndlYnBhY2s6Ly93ZWJwLy4vc3JjL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyLnZpZXcudHMiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9wYWdlcy9zZWFyY2gtcm9vbS9yYW5nZS1zbGlkZXIuanMiLCJ3ZWJwYWNrOi8vd2VicC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYnAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2VicC8uL3NyYy9wYWdlcy9zZWFyY2gtcm9vbS9zZWFyY2gtcm9vbS5qcyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJ1cmwiLCJvcHRpb25zIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiYXJyYXkiLCJhcHBseSIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsImhhcyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicHJpbWFyeSIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJjcmVhdGUiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwibWVtbyIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImZvckVhY2giLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsImFwcGx5VG9UYWciLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwia29sIiwiYmxvY2tfbGlzdCIsImV4cGVuZCIsIm91dHB1dEluRHJvcGRvd24iLCJkcm9wZG93biIsInN0ciIsInF0eSIsImxpbmVzIiwic3VtR3Vlc3RzIiwic3VtQmFieSIsImNvdW50UXR5R3Vlc3RzIiwic3Vic3RyIiwiY291bnRRdHlDb21mb3J0Um9vbSIsInF0eUVsZW0iLCJuZXdRdHkiLCJtaW4iLCJwbHVzIiwibWludXMiLCJpdGVtcyIsIm1vZGVsIiwidGhpc1NsaWRlciIsImVsZW1lbnQiLCJpZEVsZW1lbnQiLCJtaW5TdGFydCIsIm1heFN0YXJ0Iiwib3JpZW50YXRpb24iLCJzY2FsZVN0ZXAiLCJkZWZpbmVPcmllbnRhdGlvbiIsImRhdGFTbGlkZXJPcmllbnRhdGlvbiIsIm1vdmVBdCIsInJhbmdlIiwic2lkZSIsImNsYXNzTGlzdCIsInN0YXJ0UG9zIiwid2lkdGhSYW5nZSIsImdldFdpZHRoUmFuZ2UiLCJyYW5nZUxlZnQiLCJ6aW5kZXgiLCJyYW5nZVJpZ2h0IiwidGhpc0NsaWNrIiwiY29udHIiLCJvbm1vdXNlbW92ZSIsInRlbXBQb3MiLCJtYXNTY2FsZSIsInNsaWRlciIsIm9mZnNldExlZnQiLCJtb3ZpbmdSYW5nZSIsIm1hc1N0ZXBzRm9yTW92aW5nIiwiY29vcmRzIiwiZ2V0Q29vcmRzIiwib25tb3VzZXVwIiwicHJpY2UiLCJjYWxjVmFsdWUiLCJjb25ydFRoaXMiLCJnZXRXaWR0aCIsInRvRml4ZWQiLCJnZXRQb3NSYW5nZVJpZ2h0IiwidHJhbnNmb3JtIiwiZHJhd1ZhbHVlTWluIiwiY2hhbmdlQ29uZmlnSW5wdXRNaW4iLCJ3cml0ZURhdGFTbGlkZXJNaW4iLCJnZXRQb3NSYW5nZUxlZnQiLCJkcmF3VmFsdWVNYXgiLCJjaGFuZ2VDb25maWdJbnB1dE1heCIsIndyaXRlRGF0YVNsaWRlck1heCIsImVsZW1WYWx1ZU1pbiIsImVsZW1WYWx1ZU1heCIsIm1vdmVSYW5nZU9uY2xpY2tTbGlkZXIiLCJvbm1vdXNlZG93biIsImRlZmluZVBvc1N0ZXBDbG9zZXN0Q2xpY2siLCJwb3NMIiwicG9zUiIsImFicyIsImxlbkwiLCJsZW5SIiwiZmluYWxQb3MiLCJxdHlEaXZpc2lvbiIsIndpZHRoU3RlcCIsImFwcGx5Q29uZmlnIiwiY2hlY2tib3hTZXR0aW5ncyIsImNsZWFyIiwiYmxvY2tzU2NhbGUiLCJvbmNsaWNrIiwic2V0dGluZ3NCbG9jayIsImlucHV0UyIsIm9uYmx1ciIsImlkSW5wdXQiLCJOdW1iZXIiLCJjaGVja01pbk1heFN0YXJ0IiwiZHJhd1R5cGUiLCJkcmF3U2NhbGUiLCJkcmF3UmFuZ2UiLCJkcmF3VmFsdWUiLCJ3cml0ZURhdGFJbkNvbmZpZyIsInJhZGlvUyIsImlkU3RyIiwiZHJhd09yaWVudGF0aW9uIiwidHlwZUlEIiwib3JpZW50YXRpb25JRCIsInZhbHVlSUQiLCJzY2FsZUlEIiwiQ29udHJvbGxlciIsInJhbmdlU2xpZGVyIiwibGFiZWxCbG9jayIsImxhYmVsTWluIiwibGFiZWxEYXNoIiwibGFiZWxNYXgiLCJibG9ja1NjYWxlVmFscyIsImNsaWVudFdpZHRoIiwiTW9kZWwiLCJkYXRhU2xpZGVyIiwicnVuU2xpZGVyIiwiVmlldyIsImNvbnRyb2xsZXIiLCJwb3NMZWZ0IiwicG9zUmlnaHQiLCJzdGVwV2lkdGgiLCJ2YWxEaXZpc2lvbiIsInBvc0RpdmlzaW9uIiwiZWxlbURpdmlzaW9uIiwiYmxvY2tTY2FsZSIsImZsb29yIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibWFyZ2luQm90dG9tIiwiYmxvY2tWYWxzIiwiaGVpZ2h0QmxvY2tTbGlkZXIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiciIsInRvU3RyaW5nVGFnIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiXSwibWFwcGluZ3MiOiI7MklBTUlBLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQyxLQUNyRUMsRUFBcUMsSUFBZ0MsS0FFekVGLEVBQXdCRyxLQUFLLENBQUNDLEVBQU9DLEdBQUksdTFCQUF5MUJKLEVBQXFDLDREQUE4REMsRUFBcUMsT0FBUSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx1Q0FBdUMsTUFBUSxHQUFHLFNBQVcsK2ZBQStmLGVBQWlCLENBQUMsZzRDQUFnNEMsV0FBYSxNQUV4Z0csVyxnT0NJSUYsRUFBMEIsSUFBNEIsS0FDdERDLEVBQXFDLElBQWdDLEtBQ3JFQyxFQUFxQyxJQUFnQyxLQUNyRUksRUFBcUMsSUFBZ0MsS0FDckVDLEVBQXFDLElBQWdDLEtBQ3JFQyxFQUFxQyxJQUFnQyxLQUNyRUMsRUFBcUMsSUFBZ0MsS0FDckVDLEVBQXFDLElBQWdDLEtBQ3JF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LEVBQW9CTSxFQUFFLy9CLFNBQVcsSUFDdEYsSUFBSTFTLEVBQVdteUMsRUFBb0JNLEVBQUV6eUMsU0FDckMsSUFBSzh5QyxHQUFhOXlDLElBQ2JBLEVBQVNnekMsZ0JBQ1pGLEVBQVk5eUMsRUFBU2d6QyxjQUFjenhDLE1BQy9CdXhDLEdBQVcsQ0FDZixJQUFJdnVCLEVBQVV2a0IsRUFBU3NMLHFCQUFxQixVQUN6Q2laLEVBQVFqb0IsU0FBUXcyQyxFQUFZdnVCLEVBQVFBLEVBQVFqb0IsT0FBUyxHQUFHaUYsS0FLN0QsSUFBS3V4QyxFQUFXLE1BQU0sSUFBSTV5QyxNQUFNLHlEQUNoQzR5QyxFQUFZQSxFQUFVanpDLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGc3lDLEVBQW9CcGQsRUFBSStkLEcsc0JDZnhCLFFBQ0EsUUFJQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFDQSxRQUNBLFFBQ0EsUUFJQSxRQUNBLFFBSUEsUUFDQSxTIiwiZmlsZSI6InNlYXJjaC1yb29tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIGZyb20gXCIuL2Fycm93LnN2Z1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fIGZyb20gXCIuL2Fycm93LXdoaXRlLnN2Z1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuYnRue2JvcmRlci1yYWRpdXM6MjJweDtoZWlnaHQ6MjZweDtwYWRkaW5nOjRweCAwO2N1cnNvcjpwb2ludGVyO21hcmdpbjoxNXB4IDIwcHggMTVweCAwO3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtYWxpZ246Y2VudGVyfS5idG4uYnRuX2JvcmRlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCAjQkM5Q0ZGIHNvbGlkO2hlaWdodDoyMnB4O2JvcmRlci13aWR0aDoycHh9LmJ0bi5idG5fYm9yZGVyIC5idG5fX2xpbmt7Y29sb3I6I0JDOUNGRn0uYnRuLmJ0bl9ncmFkaWVudHtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICNCQzlDRkYgMCUsICM4QkE0RjkgMTAwJSk7Y29sb3I6I2ZmZmZmZn0uYnRuLmJ0bl9ncmFkaWVudC5idG5fZ3JhZGllbnRfcGF5e3dpZHRoOjMyMHB4fS5idG46aG92ZXIsLmJ0bjpmb2N1cywuYnRuLmJ0bl9ob3ZlcntvcGFjaXR5OjAuNX0uYnRuIC5idG5fX2xpbmt7Y29sb3I6I2ZmZmZmZjtmb250LWZhbWlseTpNb250c2VycmF0LCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxMnB4O3RleHQtYWxpZ246Y2VudGVyO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWRlY29yYXRpb246bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmV9LmJ0biAuYnRuX19hcnJvd3twb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MTJweDtyaWdodDoxNXB4O2NvbnRlbnQ6Jyc7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTNweDtyaWdodDoxMXB4O2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIil9LmJ0biAuYnRuX19hcnJvdy5idG5fX2Fycm93X3doaXRle2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2J0bi9idG4uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxLQUNFLGtCQUFtQixDQUNuQixXQUFZLENBQ1osYUFBYyxDQUNkLGNBQWUsQ0FDZix1QkFBd0IsQ0FDeEIsaUJBQWtCLENBQ2xCLGlCQUFrQixDQVBwQixnQkFVSSxxQkFBc0IsQ0FDdEIsd0JBQXlCLENBRXpCLFdBQVksQ0FDWixnQkFBaUIsQ0FkckIsMkJBaUJNLGFBQWMsQ0FqQnBCLGtCQXNCSSw0REFBNkQsQ0FDN0QsYUFBYyxDQXZCbEIsbUNBMEJNLFdBQVksQ0ExQmxCLHFDQWlDSSxXQUFZLENBakNoQixnQkFxQ0ksYUFBYyxDQUNkLHlDQUEwQyxDQUMxQyxpQkFBa0IsQ0FDbEIsZ0JBQWlCLENBQ2pCLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQUNyQix3QkFBeUIsQ0E3QzdCLGlCQWlESSxpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLFVBQVcsQ0FDWCxVQUFXLENBQ1gsVUFBVyxDQUNYLFdBQVksQ0FDWixjQUFlLENBQ2YsaUJBQWtCLENBQ2xCLFFBQVMsQ0FDVCxVQUFXLENBQ1gsMkJBQTRCLENBQzVCLHdEQUE4QyxDQTVEbEQsa0NBK0RNLHdEQUFvRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYnRue1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjJweDtcXHJcXG4gIGhlaWdodDogMjZweDtcXHJcXG4gIHBhZGRpbmc6IDRweCAwO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgbWFyZ2luOiAxNXB4IDIwcHggMTVweCAwO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcblxcclxcbiAgJi5idG5fYm9yZGVye1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgICBib3JkZXI6IDFweCAjQkM5Q0ZGIHNvbGlkO1xcdFxcclxcblxcclxcbiAgICBoZWlnaHQ6IDIycHg7XFxyXFxuICAgIGJvcmRlci13aWR0aDogMnB4O1xcclxcblxcclxcbiAgICAuYnRuX19saW5re1xcclxcbiAgICAgIGNvbG9yOiAjQkM5Q0ZGO1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxuXFxyXFxuICAmLmJ0bl9ncmFkaWVudHtcXHJcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgI0JDOUNGRiAwJSwgIzhCQTRGOSAxMDAlKTtcXHJcXG4gICAgY29sb3I6ICNmZmZmZmY7XFx0XFxyXFxuXFxyXFxuICAgICYuYnRuX2dyYWRpZW50X3BheXtcXHJcXG4gICAgICB3aWR0aDogMzIwcHg7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gICY6aG92ZXIsXFxyXFxuICAmOmZvY3VzLFxcclxcbiAgJi5idG5faG92ZXJ7XFxyXFxuICAgIG9wYWNpdHk6IDAuNTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5idG5fX2xpbmt7XFxyXFxuICAgIGNvbG9yOiAjZmZmZmZmO1xcclxcbiAgICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAuYnRuX19hcnJvd3tcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBib3R0b206IDEycHg7XFxyXFxuICAgIHJpZ2h0OiAxNXB4O1xcclxcbiAgICBjb250ZW50OiAnJztcXHJcXG4gICAgd2lkdGg6IDIwcHg7XFxyXFxuICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMTNweDtcXHJcXG4gICAgcmlnaHQ6IDExcHg7XFxyXFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnQEJsb2Nrcy9idG4vYXJyb3cuc3ZnJyk7XFxyXFxuICAgIFxcclxcbiAgICAmLmJ0bl9fYXJyb3dfd2hpdGV7XFx0XFxyXFxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdAQmxvY2tzL2J0bi9hcnJvdy13aGl0ZS5zdmcnKTtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIGZyb20gXCIuL2ltZy9pbWFnZTEucG5nXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gZnJvbSBcIi4vaW1nL2ltYWdlMi5wbmdcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyBmcm9tIFwiLi9pbWcvaW1hZ2UzLnBuZ1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fIGZyb20gXCIuL2ltZy9pbWFnZTQucG5nXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gZnJvbSBcIi4vaW1nL2ltYWdlNS5wbmdcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyBmcm9tIFwiLi9pbWcvaW1hZ2U2LnBuZ1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF82X19fIGZyb20gXCIuL2ltZy9pbWFnZTcucG5nXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18gZnJvbSBcIi4vaW1nL2ltYWdlOC5wbmdcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyBmcm9tIFwiLi9pbWcvaW1hZ2U5LnBuZ1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fIGZyb20gXCIuL2ltZy9pbWFnZTEwLnBuZ1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyBmcm9tIFwiLi9pbWcvaW1hZ2UxMS5wbmdcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18gZnJvbSBcIi4vaW1nL2ltYWdlMTIucG5nXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhcmQtcm9vbXt3aWR0aDoyNzBweDtoZWlnaHQ6MjU3cHg7YmFja2dyb3VuZDojRkZGRkZGO2JveC1zaGFkb3c6MHB4IDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JvcmRlci1yYWRpdXM6NHB4O21hcmdpbjoxMnB4IDIuNXB4IDlweCA3LjRweH0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdle3dpZHRoOjI3MHB4O2hlaWdodDoxNTBweDtib3JkZXItcmFkaXVzOjRweCA0cHggMCAwO2JhY2tncm91bmQtc2l6ZTpjb3Zlcjtwb3NpdGlvbjpyZWxhdGl2ZX0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdlLmltYWdlczF7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpfS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW1hZ2UuaW1hZ2VzMntiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIil9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbWFnZS5pbWFnZXMze2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKX0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdlLmltYWdlczR7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpfS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW1hZ2UuaW1hZ2VzNXtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gKyBcIil9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbWFnZS5pbWFnZXM2e2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyArIFwiKX0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdlLmltYWdlczd7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fICsgXCIpfS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW1hZ2UuaW1hZ2VzOHtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gKyBcIil9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbWFnZS5pbWFnZXM5e2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyArIFwiKX0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdlLmltYWdlczEwe2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyArIFwiKX0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdlLmltYWdlczExe2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTBfX18gKyBcIil9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbWFnZS5pbWFnZXMxMntiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fICsgXCIpfS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW1hZ2UgLmNhcmQtcm9vbV9fc2xpZGVyLXBhZ2luYXRpb257cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjE0cHg7cmlnaHQ6MTRweDtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOm5vd3JhcH0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2ltYWdlIC5jYXJkLXJvb21fX3NsaWRlci1wYWdpbmF0aW9uIC5jYXJkLXJvb21fX3NsaWRlci1wYWdpbmF0aW9uLWl0ZW17d2lkdGg6Ny41cHg7aGVpZ2h0OjcuNXB4O21hcmdpbjowIDJweDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXI6MXB4IHNvbGlkICNmZmY7Y3Vyc29yOnBvaW50ZXI7Ym94LXNpemluZzpib3JkZXItYm94O2JveC1zaGFkb3c6MHB4IDVweCA1cHggcmdiYSgzMSwzMiw2NSwwLjMpfS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW1hZ2UgLmNhcmQtcm9vbV9fc2xpZGVyLXBhZ2luYXRpb24gLmNhcmQtcm9vbV9fc2xpZGVyLXBhZ2luYXRpb24taXRlbS5jYXJkLXJvb21fX3NsaWRlci1wYWdpbmF0aW9uLWl0ZW1fYWN0aXZle2JhY2tncm91bmQ6I2ZmZn0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbXttYXJnaW46MjBweH0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbSAuY2FyZC1yb29tX19udW1iZXItcHJpY2V7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDoyN3B4fS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW5mby1yb29tIC5jYXJkLXJvb21fX251bWJlci1wcmljZS5jYXJkLXJvb21fX251bWJlci1wcmljZV9ib3R0b20tYm9yZGVye3BhZGRpbmctYm90dG9tOjhweDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4xKTtib3JkZXItd2lkdGg6MCAwIDFweCAwO21hcmdpbjowIDAgNnB4IDB9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbmZvLXJvb20gLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlX2JvdHRvbS1ib3JkZXIgcDpudGgtY2hpbGQoMSl7Y29sb3I6IzFmMjA0MX0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbSAuY2FyZC1yb29tX19udW1iZXItcHJpY2UuY2FyZC1yb29tX19udW1iZXItcHJpY2VfYm90dG9tLWJvcmRlciBwOm50aC1jaGlsZCgxKSBzcGFuOm50aC1jaGlsZCgxKXtmb250LXNpemU6MTRweH0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbSAuY2FyZC1yb29tX19udW1iZXItcHJpY2UuY2FyZC1yb29tX19udW1iZXItcHJpY2VfYm90dG9tLWJvcmRlciBwOm50aC1jaGlsZCgxKSBzcGFuOm50aC1jaGlsZCgyKXtmb250LXNpemU6MjBweH0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbSAuY2FyZC1yb29tX19udW1iZXItcHJpY2UuY2FyZC1yb29tX19udW1iZXItcHJpY2VfYm90dG9tLWJvcmRlciBwOm50aC1jaGlsZCgyKXtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbmZvLXJvb20gLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlX2JvdHRvbS1ib3JkZXIgcDpudGgtY2hpbGQoMikgc3BhbjpudGgtY2hpbGQoMSksLmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbmZvLXJvb20gLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlX2JvdHRvbS1ib3JkZXIgcDpudGgtY2hpbGQoMikgc3BhbjpudGgtY2hpbGQoMil7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTQuNXB4fS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW5mby1yb29tIC5jYXJkLXJvb21fX251bWJlci1wcmljZS5jYXJkLXJvb21fX251bWJlci1wcmljZV9ib3R0b20tYm9yZGVyIHA6bnRoLWNoaWxkKDIpIHNwYW46bnRoLWNoaWxkKDIpe21hcmdpbi1yaWdodDoycHh9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbmZvLXJvb20gLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlX2JvdHRvbS1ib3JkZXIgcDpudGgtY2hpbGQoMikgc3BhbjpudGgtY2hpbGQoMyl7Zm9udC1zaXplOjExcHh9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbmZvLXJvb20gLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlX2JvdHRvbS1ib3JkZXIgcCBzcGFuOm50aC1jaGlsZCgxKSwuY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbSAuY2FyZC1yb29tX19udW1iZXItcHJpY2UuY2FyZC1yb29tX19udW1iZXItcHJpY2VfYm90dG9tLWJvcmRlciBwIHNwYW46bnRoLWNoaWxkKDIpe2ZvbnQtd2VpZ2h0OmJvbGR9LmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbmZvLXJvb20gLmNhcmQtcm9vbV9fbnVtYmVyLXByaWNlIHB7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO21hcmdpbjowfS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW5mby1yb29tIC5jYXJkLXJvb21fX251bWJlci1wcmljZSBwIHNwYW57bGluZS1oZWlnaHQ6MjVweH0uY2FyZC1yb29tIC5jYXJkLXJvb21fX2luZm8tcm9vbSAuY2FyZC1yb29tX19udW1iZXItcHJpY2UgcCBzcGFuOm50aC1jaGlsZCgxKXtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxNXB4fS5jYXJkLXJvb20gLmNhcmQtcm9vbV9faW5mby1yb29tIC5jYXJkLXJvb21fX251bWJlci1wcmljZSAucmF0ZS1idG57bWFyZ2luOjB9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9jYXJkLXJvb20vY2FyZC1yb29tLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsV0FDRSxXQUFZLENBQ1osWUFBYSxDQUNiLGtCQUFtQixDQUNuQiw0Q0FBZ0QsQ0FDaEQsaUJBQWtCLENBQ2xCLDJCQUE0QixDQU45Qiw2QkFTSSxXQUFZLENBQ1osWUFBYSxDQUNiLHlCQUEwQixDQUMxQixxQkFBc0IsQ0FDdEIsaUJBQWtCLENBYnRCLHFDQWdCTSx3REFBdUMsQ0FoQjdDLHFDQW1CTSx3REFBdUMsQ0FuQjdDLHFDQXNCTSx3REFBdUMsQ0F0QjdDLHFDQXlCTSx3REFBdUMsQ0F6QjdDLHFDQTRCTSx3REFBdUMsQ0E1QjdDLHFDQStCTSx3REFBdUMsQ0EvQjdDLHFDQWtDTSx3REFBdUMsQ0FsQzdDLHFDQXFDTSx3REFBdUMsQ0FyQzdDLHFDQXdDTSx3REFBdUMsQ0F4QzdDLHNDQTJDTSx3REFBd0MsQ0EzQzlDLHNDQThDTSx5REFBd0MsQ0E5QzlDLHNDQWlETSx5REFBd0MsQ0FqRDlDLDJEQXFETSxpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLFVBQVcsQ0FDWCxZQUFhLENBQ2IsZ0JBQWlCLENBekR2Qiw4RkE0RFEsV0FBWSxDQUNaLFlBQWEsQ0FDYixZQUFhLENBQ2IsaUJBQWtCLENBQ2xCLHFCQUFzQixDQUN0QixjQUFlLENBQ2YscUJBQXNCLENBQ3RCLHlDQUE2QyxDQW5FckQsdUlBc0VVLGVBQWdCLENBdEUxQixpQ0E4RUksV0FBWSxDQTlFaEIsMERBaUZNLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBQ25CLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsV0FBWSxDQXRGbEIsZ0dBeUZRLGtCQUFtQixDQUNuQixtQ0FBdUMsQ0FDdkMsc0JBQXVCLENBQ3ZCLGdCQUFpQixDQTVGekIsK0dBaUdZLGFBQTBCLENBakd0QyxpSUFzR2dCLGNBQWUsQ0F0Ry9CLGlJQTBHZ0IsY0FBZSxDQTFHL0IsK0dBZ0hZLHdCQUE0QixDQWhIeEMsa1FBc0hnQixnQkFBaUIsQ0FDakIsZ0JBQWlCLENBdkhqQyxpSUEySGdCLGdCQUFpQixDQTNIakMsaUlBK0hnQixjQUFlLENBL0gvQix3T0F3SWMsZ0JBQWlCLENBeEkvQiw0REErSVEsd0JBQTRCLENBQzVCLFFBQVMsQ0FoSmpCLGlFQW1KVSxnQkFBaUIsQ0FuSjNCLDhFQXFKWSxnQkFBaUIsQ0FDakIsY0FBZSxDQXRKM0Isb0VBNEpRLFFBQVNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNhcmQtcm9vbXtcXHJcXG4gIHdpZHRoOiAyNzBweDtcXHJcXG4gIGhlaWdodDogMjU3cHg7XFxyXFxuICBiYWNrZ3JvdW5kOiAjRkZGRkZGO1xcclxcbiAgYm94LXNoYWRvdzogMHB4IDEwcHggMjBweCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgbWFyZ2luOiAxMnB4IDIuNXB4IDlweCA3LjRweDtcXHJcXG5cXHJcXG4gIC5jYXJkLXJvb21fX2ltYWdle1xcclxcbiAgICB3aWR0aDogMjcwcHg7XFxyXFxuICAgIGhlaWdodDogMTUwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwO1xcdFxcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcdFxcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFxyXFxuICAgICYuaW1hZ2VzMXtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltZy9pbWFnZTEucG5nJyk7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5pbWFnZXMye1xcclxcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1nL2ltYWdlMi5wbmcnKTtcXHJcXG4gICAgfVxcclxcbiAgICAmLmltYWdlczN7XFxyXFxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdpbWcvaW1hZ2UzLnBuZycpO1xcclxcbiAgICB9XFxyXFxuICAgICYuaW1hZ2VzNHtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltZy9pbWFnZTQucG5nJyk7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5pbWFnZXM1e1xcclxcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1nL2ltYWdlNS5wbmcnKTtcXHJcXG4gICAgfVxcclxcbiAgICAmLmltYWdlczZ7XFxyXFxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdpbWcvaW1hZ2U2LnBuZycpO1xcclxcbiAgICB9XFxyXFxuICAgICYuaW1hZ2VzN3tcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltZy9pbWFnZTcucG5nJyk7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5pbWFnZXM4e1xcclxcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1nL2ltYWdlOC5wbmcnKTtcXHJcXG4gICAgfVxcclxcbiAgICAmLmltYWdlczl7XFxyXFxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdpbWcvaW1hZ2U5LnBuZycpO1xcclxcbiAgICB9XFxyXFxuICAgICYuaW1hZ2VzMTB7XFxyXFxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdpbWcvaW1hZ2UxMC5wbmcnKTtcXHJcXG4gICAgfVxcclxcbiAgICAmLmltYWdlczExe1xcclxcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnaW1nL2ltYWdlMTEucG5nJyk7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5pbWFnZXMxMntcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltZy9pbWFnZTEyLnBuZycpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5jYXJkLXJvb21fX3NsaWRlci1wYWdpbmF0aW9ue1xcclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICBib3R0b206IDE0cHg7XFxyXFxuICAgICAgcmlnaHQ6IDE0cHg7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBmbGV4LXdyYXA6IG5vd3JhcDtcXHJcXG4gICAgICBcXHJcXG4gICAgICAuY2FyZC1yb29tX19zbGlkZXItcGFnaW5hdGlvbi1pdGVte1xcclxcbiAgICAgICAgd2lkdGg6IDcuNXB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiA3LjVweDtcXHJcXG4gICAgICAgIG1hcmdpbjogMCAycHg7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZmZmO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IDBweCA1cHggNXB4IHJnYmEoMzEsIDMyLCA2NSwgMC4zKTtcXHJcXG5cXHJcXG4gICAgICAgICYuY2FyZC1yb29tX19zbGlkZXItcGFnaW5hdGlvbi1pdGVtX2FjdGl2ZXtcXHJcXG4gICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIFxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgLmNhcmQtcm9vbV9faW5mby1yb29te1xcclxcbiAgICBtYXJnaW46IDIwcHg7XFxyXFxuXFxyXFxuICAgIC5jYXJkLXJvb21fX251bWJlci1wcmljZXtcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgICBoZWlnaHQ6IDI3cHg7XFxyXFxuICAgICAgXFxyXFxuICAgICAgJi5jYXJkLXJvb21fX251bWJlci1wcmljZV9ib3R0b20tYm9yZGVye1xcclxcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDhweDtcXHJcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC4xKTtcXHJcXG4gICAgICAgIGJvcmRlci13aWR0aDogMCAwIDFweCAwO1xcclxcbiAgICAgICAgbWFyZ2luOiAwIDAgNnB4IDA7XFxyXFxuXFxyXFxuICAgICAgICBwe1xcclxcblxcclxcbiAgICAgICAgICAmOm50aC1jaGlsZCgxKXtcXHJcXG4gICAgICAgICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAxKTtcXHJcXG5cXHJcXG4gICAgICAgICAgICBzcGFue1xcclxcblxcclxcbiAgICAgICAgICAgICAgJjpudGgtY2hpbGQoMSl7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICY6bnRoLWNoaWxkKDIpe1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICY6bnRoLWNoaWxkKDIpe1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuXFxyXFxuICAgICAgICAgICAgc3BhbntcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICY6bnRoLWNoaWxkKDEpLFxcclxcbiAgICAgICAgICAgICAgJjpudGgtY2hpbGQoMil7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0LjVweDtcXHJcXG4gICAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICY6bnRoLWNoaWxkKDIpe1xcclxcbiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDJweDtcXHJcXG4gICAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICY6bnRoLWNoaWxkKDMpe1xcclxcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDExcHg7XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgIHNwYW57XFxyXFxuXFxyXFxuICAgICAgICAgICAgJjpudGgtY2hpbGQoMSksXFxyXFxuICAgICAgICAgICAgJjpudGgtY2hpbGQoMil7XFxyXFxuICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgcHtcXHJcXG4gICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgICAgICBtYXJnaW46IDA7XFxyXFxuXFxyXFxuICAgICAgICBzcGFue1xcclxcbiAgICAgICAgICBsaW5lLWhlaWdodDogMjVweDtcXHJcXG4gICAgICAgICAgJjpudGgtY2hpbGQoMSl7XFxyXFxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxNXB4O1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5yYXRlLWJ0bntcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZXttYXJnaW46NTBweCAwIDE3cHggMH0uY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX3RvcGljQmxvY2t7cG9zaXRpb246cmVsYXRpdmV9LmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZSAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2NrIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX2V4cGFuZHt3aWR0aDoxMHB4O2hlaWdodDoxMHB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToycHg7cmlnaHQ6MTVweDtjdXJzb3I6cG9pbnRlcn0uY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX3RvcGljQmxvY2sgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW57dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfS5jaGVja2JveC1saXN0LWV4cGFuZGFibGUgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fdG9waWNCbG9jayBoM3ttYXJnaW46MDtjdXJzb3I6cG9pbnRlcn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSwwQkFDRSxvQkFBcUIsQ0FEdkIsZ0VBSUksaUJBQWtCLENBSnRCLGtHQU9NLFVBQVcsQ0FDWCxXQUFZLENBQ1osaUJBQWtCLENBQ2xCLFVBQVcsQ0FDWCxVQUFXLENBQ1gsY0FBZSxDQVpyQix3SUFlUSx3QkFBeUIsQ0FmakMsbUVBb0JNLFFBQVMsQ0FDVCxjQUFlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jaGVja2JveC1saXN0LWV4cGFuZGFibGV7XFxyXFxuICBtYXJnaW46IDUwcHggMCAxN3B4IDA7XFxyXFxuXFxyXFxuICAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2Nre1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFxyXFxuICAgIC5jaGVja2JveC1saXN0LWV4cGFuZGFibGVfX2V4cGFuZHtcXHJcXG4gICAgICB3aWR0aDogMTBweDtcXHJcXG4gICAgICBoZWlnaHQ6IDEwcHg7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIGJvdHRvbTogMnB4O1xcclxcbiAgICAgIHJpZ2h0OiAxNXB4O1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHJcXG4gICAgICAmLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW57XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBoM3tcXHJcXG4gICAgICBtYXJnaW46IDA7XFxyXFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5jaGVja2JveC1saXN0e21hcmdpbi10b3A6MTdweDt3aWR0aDoyMzBweH0uY2hlY2tib3gtbGlzdC5jaGVja2JveC1saXN0X2hpZGV7ZGlzcGxheTpub25lfS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIC5jaGVja2JveC1saXN0X19pbnB1dHtkaXNwbGF5Om5vbmV9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gLmNoZWNrYm94LWxpc3RfX2lucHV0OmNoZWNrZWQrLmNoZWNrYm94LWxpc3RfX2xhYmVsOmFmdGVye2NvbnRlbnQ6Jyc7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NHB4O2hlaWdodDo2cHg7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDowIDJweCAycHggMDtib3JkZXItY29sb3I6I0JDOUNGRjt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTtsZWZ0OjdweDt0b3A6NXB4fS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIC5jaGVja2JveC1saXN0X19pbnB1dDpjaGVja2VkKy5jaGVja2JveC1saXN0X19sYWJlbDpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNCQzlDRkZ9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gLmNoZWNrYm94LWxpc3RfX2xhYmVse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MCAwIDEwcHggMzBweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyMHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTt3aWR0aDphdXRvfS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIC5jaGVja2JveC1saXN0X19sYWJlbDpiZWZvcmV7Y29udGVudDonJztkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7YmFja2dyb3VuZC1jb2xvcjojZmZmO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMjUpO2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXItcmFkaXVzOjRweH0uY2hlY2tib3gtbGlzdCAuY2hlY2tib3gtbGlzdF9faXRlbSAuY2hlY2tib3gtbGlzdF9fbGFiZWwuY2hlY2tib3gtbGlzdF9fbGFiZWxfYm9sZHtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjE0LjVweDtsaW5lLWhlaWdodDoxOHB4fS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIHB7cGFkZGluZy1sZWZ0OjMwcHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE0cHg7bWFyZ2luOi00cHggMCAxMHB4IDB9LmNoZWNrYm94LWxpc3QgLmNoZWNrYm94LWxpc3RfX2l0ZW0gcC5jaGVja2JveC1saXN0X19wX3dpZHRoMjAwe3dpZHRoOjIwMHB4fS5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19pdGVtIHAuY2hlY2tib3gtbGlzdF9fcF93aWR0aDIyNXt3aWR0aDoyMjVweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdC5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGVBQ0UsZUFBZ0IsQ0FDaEIsV0FBWSxDQUZkLGtDQUtJLFlBQWEsQ0FMakIsMERBV00sWUFBYSxDQVhuQiw4RkFnQlUsVUFBVyxDQUNYLGlCQUFrQixDQUNsQixTQUFVLENBQ1YsVUFBVyxDQUNYLGtCQUFtQixDQUNuQix3QkFBeUIsQ0FDekIsb0JBQXFCLENBQ3JCLHVCQUF3QixDQUN4QixRQUFTLENBQ1QsT0FBUSxDQXpCbEIsK0ZBNkJVLG9CQUFxQixDQTdCL0IsMERBbUNNLG9CQUFxQixDQUNyQixjQUFlLENBQ2YsaUJBQWtCLENBQ2xCLHFCQUFzQixDQUN0QixjQUFlLENBQ2YsZ0JBQWlCLENBQ2pCLHdCQUE0QixDQUM1QixVQUFXLENBMUNqQixpRUE2Q1EsVUFBVyxDQUNYLG9CQUFxQixDQUNyQixpQkFBa0IsQ0FDbEIsTUFBTyxDQUNQLHFCQUFzQixDQUN0QixVQUFXLENBQ1gsV0FBWSxDQUNaLG9DQUF3QyxDQUN4QyxxQkFBc0IsQ0FDdEIsaUJBQWtCLENBdEQxQixvRkEwRFEseUJBQTZCLENBQzdCLGdCQUFpQixDQUNqQixnQkFBaUIsQ0FDakIsZ0JBQWlCLENBN0R6QixzQ0FrRU0saUJBQWtCLENBQ2xCLHdCQUE0QixDQUM1QixjQUFlLENBQ2YsZ0JBQWlCLENBQ2pCLG9CQUFxQixDQXRFM0IsZ0VBeUVRLFdBQVksQ0F6RXBCLGdFQTZFUSxXQUFZXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jaGVja2JveC1saXN0e1xcclxcbiAgbWFyZ2luLXRvcDogMTdweDtcXHJcXG4gIHdpZHRoOiAyMzBweDtcXHJcXG5cXHJcXG4gICYuY2hlY2tib3gtbGlzdF9oaWRle1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbiAgfVxcclxcblxcclxcbiAgLmNoZWNrYm94LWxpc3RfX2l0ZW17XFxyXFxuXFxyXFxuICAgIC5jaGVja2JveC1saXN0X19pbnB1dHtcXHJcXG4gICAgICBkaXNwbGF5OiBub25lO1xcclxcblxcclxcbiAgICAgICY6Y2hlY2tlZCArIC5jaGVja2JveC1saXN0X19sYWJlbHtcXHJcXG5cXHJcXG4gICAgICAgICY6YWZ0ZXJ7XFxyXFxuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xcclxcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICAgIHdpZHRoOiA0cHg7XFxyXFxuICAgICAgICAgIGhlaWdodDogNnB4O1xcclxcbiAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xcclxcbiAgICAgICAgICBib3JkZXItd2lkdGg6IDAgMnB4IDJweCAwO1xcclxcbiAgICAgICAgICBib3JkZXItY29sb3I6ICNCQzlDRkY7XFxyXFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcXHJcXG4gICAgICAgICAgbGVmdDogN3B4O1xcclxcbiAgICAgICAgICB0b3A6IDVweDtcXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICY6YmVmb3Jle1xcclxcbiAgICAgICAgICBib3JkZXItY29sb3I6ICNCQzlDRkY7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5jaGVja2JveC1saXN0X19sYWJlbHtcXHJcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgICBwYWRkaW5nOiAwIDAgMTBweCAzMHB4O1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICBsaW5lLWhlaWdodDogMjBweDtcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgIHdpZHRoOiBhdXRvO1xcclxcblxcclxcbiAgICAgICY6YmVmb3Jle1xcclxcbiAgICAgICAgY29udGVudDogJyc7XFxyXFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXHJcXG4gICAgICAgIHdpZHRoOiAyMHB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xcclxcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgICYuY2hlY2tib3gtbGlzdF9fbGFiZWxfYm9sZHtcXHRcXHRcXHRcXHJcXG4gICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNzUpO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE0LjVweDtcXHJcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxOHB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBwe1xcclxcbiAgICAgIHBhZGRpbmctbGVmdDogMzBweDtcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICBsaW5lLWhlaWdodDogMTRweDtcXHJcXG4gICAgICBtYXJnaW46IC00cHggMCAxMHB4IDA7XFxyXFxuXFxyXFxuICAgICAgJi5jaGVja2JveC1saXN0X19wX3dpZHRoMjAwe1xcclxcbiAgICAgICAgd2lkdGg6IDIwMHB4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAmLmNoZWNrYm94LWxpc3RfX3Bfd2lkdGgyMjV7XFxyXFxuICAgICAgICB3aWR0aDogMjI1cHg7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vZXhwYW5kLW1vcmUuc3ZnXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmRyb3Bkb3duLWJsb2Nre3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCV9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd257cG9zaXRpb246cmVsYXRpdmU7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTtib3JkZXItcmFkaXVzOjRweDt3aWR0aDoxMDAlO2N1cnNvcjpwb2ludGVyO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjQ0cHg7cGFkZGluZzo4cHggMTRweDttYXJnaW4tdG9wOjVweDtmb250LWZhbWlseTpNb250c2VycmF0LCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWx9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd246aG92ZXJ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC41KX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25fZGF0ZXt3aWR0aDoxNTBweDstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTtmb250LXNpemU6MTRweH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25faXRlbXMtc2hvd3tib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC41KTtib3JkZXItcmFkaXVzOjRweCA0cHggMCAwfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duOjpiZWZvcmV7Y29udGVudDonJzt3aWR0aDoxNXB4O2hlaWdodDoxMXB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxM3B4O3JpZ2h0OjEycHg7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXR9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXN7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2JhY2tncm91bmQ6I2ZmZjtib3JkZXItcmFkaXVzOjAgMCA0cHggNHB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjUpO21hcmdpbi10b3A6LTFweDt6LWluZGV4OjE7cG9zaXRpb246YWJzb2x1dGV9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zX2hpZGV7ZGlzcGxheTpub25lfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnN7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTttYXJnaW4tdG9wOi0xcHg7d2lkdGg6MTAwJTtoZWlnaHQ6NDBweH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgaDMsLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIGgze3BhZGRpbmc6MTNweCAxNXB4O21hcmdpbjowfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSBoMywuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgc3BhbiwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgaDMsLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIHNwYW57Y29sb3I6IzFmMjA0MX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHksLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6OTJweDttYXJnaW4tcmlnaHQ6N3B4O3VzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzLC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1cywuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzLC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRucyAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1c3tib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czo1MCU7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtmb250LXNpemU6MjBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZy10b3A6MnB4O2N1cnNvcjpwb2ludGVyfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eSAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMuZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZSwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LXBsdXMuZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZSwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUsLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5IC5kcm9wZG93bi1ibG9ja19faW5jLXF0eS1wbHVzLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGV7Y3Vyc29yOmRlZmF1bHQ7Ym9yZGVyLWNvbG9yOnJnYmEoMzEsMzIsNjUsMC4xNSk7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjE1KX0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgc3BhbiwuZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHkgc3Bhbntmb250LXdlaWdodDpib2xkfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19faXRlbXMtbGluZSAubGluay5saW5rX2NsZWFuLC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRucyAubGluay5saW5rX2NsZWFue21hcmdpbjphdXRvIDE1cHh9LmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lIC5saW5rLmxpbmtfb2ssLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19idG5zIC5saW5rLmxpbmtfb2t7bWFyZ2luOmF1dG8gN3B4fS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRuc3toZWlnaHQ6NDhweH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMuZHJvcGRvd24tYmxvY2tfX2J0bnNfZmxleC1lbmR7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfS5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zIC5kcm9wZG93bi1ibG9ja19fYnRucyAubGlua19jbGVhbnttYXJnaW46MjFweCAwIDAgMTRweH0uZHJvcGRvd24tYmxvY2sgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmtfb2t7bWFyZ2luOjIxcHggN3B4IDAgMH0uZHJvcGRvd24tZGF0ZXN7d2lkdGg6MTAwJX0uZHJvcGRvd24tZGF0ZXMgLmRyb3Bkb3duLWRhdGVzX19kYXRlc3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmRyb3Bkb3duLWRhdGVzIC5kcm9wZG93bi1kYXRlc19fZGF0ZXMgLmRyb3Bkb3duLWJsb2Nre3dpZHRoOmF1dG99LmRyb3Bkb3duLWRhdGVzIC5kcm9wZG93bi1kYXRlc19fZGF0ZXMgLmRyb3Bkb3duLWJsb2NrIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25faXRlbXMtc2hvd3tib3JkZXItcmFkaXVzOjRweH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZ0JBQ0UsaUJBQWtCLENBQ2xCLFVBQVcsQ0FGYiwwQ0FLSSxpQkFBa0IsQ0FDbEIseUJBQTZCLENBQzdCLGlCQUFrQixDQUNsQixVQUFXLENBQ1gsY0FBZSxDQUNmLG9DQUF3QyxDQUN4QyxxQkFBc0IsQ0FDdEIsV0FBWSxDQUNaLGdCQUFpQixDQUNqQixjQUFlLENBQ2YseUNBQTBDLENBQzFDLGtCQUFtQixDQUNuQixpQkFBa0IsQ0FqQnRCLGdEQW9CTSx5QkFBNkIsQ0FDN0IsbUNBQXVDLENBckI3Qyx3RUF5Qk0sV0FBWSxDQUNaLHVCQUF3QixDQUN4QixjQUFlLENBM0JyQiw4RUErQk0sbUNBQXVDLENBQ3ZDLHlCQUEwQixDQWhDaEMsa0RBb0NNLFVBQVcsQ0FDWCxVQUFXLENBQ1gsV0FBWSxDQUNaLGlCQUFrQixDQUNsQixXQUFZLENBQ1osVUFBVyxDQUNYLGNBQWUsQ0FDZix3QkFBeUIsQ0FDekIsd0RBQXlELENBQ3pELDJCQUE0QixDQTdDbEMsZ0RBa0RJLFlBQWEsQ0FDYixjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIseUJBQTBCLENBQzFCLG1DQUF1QyxDQUN2QyxlQUFnQixDQUNoQixTQUFVLENBQ1YsaUJBQWtCLENBekR0QixvRkE0RE0sWUFBYSxDQTVEbkIsa0pBaUVNLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsd0JBQTRCLENBQzVCLGVBQWdCLENBQ2hCLFVBQVcsQ0FDWCxXQUFZLENBdEVsQix3SkF5RVEsaUJBQWtCLENBQ2xCLFFBQVMsQ0ExRWpCLG9UQStFUSxhQUEwQixDQS9FbEMsd01BbUZRLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBQ25CLFVBQVcsQ0FDWCxnQkFBaUIsQ0FDakIsZ0JBQWlCLENBQ2pCLHFCQUFzQixDQUN0Qix3QkFBeUIsQ0FDekIsb0JBQXFCLENBM0Y3QiwwZ0JBK0ZVLG9DQUF3QyxDQUN4QyxpQkFBa0IsQ0FDbEIsVUFBVyxDQUNYLFdBQVksQ0FDWixjQUFlLENBQ2YsWUFBYSxDQUNiLHNCQUF1QixDQUN2QixxQkFBc0IsQ0FDdEIsZUFBZ0IsQ0FDaEIsY0FBZSxDQXhHekIsMG9CQTJHWSxjQUFlLENBQ2YsZ0NBQW9DLENBQ3BDLHlCQUE2QixDQTdHekMsa05Ba0hVLGdCQUFpQixDQWxIM0Isb0xBeUhVLGdCQUFpQixDQXpIM0IsOEtBNkhVLGVBQWdCLENBN0gxQixzRUFtSU0sV0FBWSxDQW5JbEIsb0dBc0lRLHdCQUF5QixDQXRJakMsa0ZBMElRLG9CQUFxQixDQTFJN0IsK0VBOElRLG1CQUFvQixDQUNyQixnQkFNTCxVQUFXLENBRGIsdUNBSUksWUFBYSxDQUNiLDZCQUE4QixDQUxsQyx1REFRTSxVQUFXLENBUmpCLDRGQVdRLGlCQUFrQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZHJvcGRvd24tYmxvY2t7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd257XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC43NSk7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgaGVpZ2h0OiA0NHB4O1xcclxcbiAgICBwYWRkaW5nOiA4cHggMTRweDtcXHJcXG4gICAgbWFyZ2luLXRvcDogNXB4O1xcclxcbiAgICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG5cXHJcXG4gICAgJjpob3ZlcntcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjc1KTtcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgJi5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25fZGF0ZXtcXHJcXG4gICAgICB3aWR0aDogMTUwcHg7XFxyXFxuICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bl9pdGVtcy1zaG93e1xcclxcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmOjpiZWZvcmV7XFxyXFxuICAgICAgY29udGVudDogJyc7XFxyXFxuICAgICAgd2lkdGg6IDE1cHg7XFxyXFxuICAgICAgaGVpZ2h0OiAxMXB4O1xcclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICBib3R0b206IDEzcHg7XFxyXFxuICAgICAgcmlnaHQ6IDEycHg7XFxyXFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdAQmxvY2tzL2Ryb3Bkb3duL2V4cGFuZC1tb3JlLnN2ZycpO1xcclxcbiAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXN7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMCAwIDRweCA0cHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgbWFyZ2luLXRvcDogLTFweDtcXHJcXG4gICAgei1pbmRleDogMTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcblxcclxcbiAgICAmLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtc19oaWRle1xcclxcbiAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lLFxcclxcbiAgICAuZHJvcGRvd24tYmxvY2tfX2J0bnN7XFxyXFxuICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAtMXB4O1xcclxcbiAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgIGhlaWdodDogNDBweDtcXHJcXG5cXHJcXG4gICAgICBoM3tcXHJcXG4gICAgICAgIHBhZGRpbmc6IDEzcHggMTVweDtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgaDMsXFxyXFxuICAgICAgc3BhbntcXHJcXG4gICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDEpO1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eXtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgd2lkdGg6IDkycHg7XFxyXFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDdweDtcXHJcXG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuXFxyXFxuICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMsXFxyXFxuICAgICAgICAuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1c3tcXHJcXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgICAgICB3aWR0aDogMzBweDtcXHJcXG4gICAgICAgICAgaGVpZ2h0OiAzMHB4O1xcclxcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxyXFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgICAgICBwYWRkaW5nLXRvcDogMnB4O1xcclxcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFxyXFxuICAgICAgICAgICYuZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZXtcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuMTUpO1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuMTUpO1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBcXHJcXG4gICAgICAgIHNwYW57XFxyXFxuICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAubGlua3tcXHJcXG5cXHJcXG4gICAgICAgICYubGlua19jbGVhbntcXHJcXG4gICAgICAgICAgbWFyZ2luOiBhdXRvIDE1cHg7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAmLmxpbmtfb2t7XFxyXFxuICAgICAgICAgIG1hcmdpbjogYXV0byA3cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kcm9wZG93bi1ibG9ja19fYnRuc3tcXHJcXG4gICAgICBoZWlnaHQ6IDQ4cHg7XFxyXFxuXFxyXFxuICAgICAgJi5kcm9wZG93bi1ibG9ja19fYnRuc19mbGV4LWVuZHtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5saW5rX2NsZWFue1xcclxcbiAgICAgICAgbWFyZ2luOiAyMXB4IDAgMCAxNHB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAubGlua19va3tcXHJcXG4gICAgICAgIG1hcmdpbjogMjFweCA3cHggMCAwO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4uZHJvcGRvd24tZGF0ZXN7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gIC5kcm9wZG93bi1kYXRlc19fZGF0ZXN7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHJcXG4gICAgLmRyb3Bkb3duLWJsb2Nre1xcclxcbiAgICAgIHdpZHRoOiBhdXRvO1xcclxcblxcclxcbiAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd25faXRlbXMtc2hvd3tcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51e2JvcmRlci10b3A6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4xKTtib3JkZXItYm90dG9tOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMSk7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kOiNmZmZ9LmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVye2ZsZXgtZ3JvdzoxO21heC13aWR0aDo4MC41JTttaW4td2lkdGg6NDAwcHg7bWFyZ2luOjAgYXV0bztiYWNrZ3JvdW5kOiNmZmZ9LmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtmbGV4LXdyYXA6d3JhcDttYXJnaW46MDtwYWRkaW5nOjkxcHggMCA4OXB4IDA7Zm9udC1zaXplOjE0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpfS5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19ib3R0b20tbWVudS1sb2dvLWJsb2NrIC5mb290ZXJfX2xvZ297bWFyZ2luOjEwcHggMCAzcHh9LmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX21lbnUtY29sdW1uLC5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19ib3R0b20tbWVudS1sb2dvLWJsb2Nre2Rpc3BsYXk6YmxvY2s7bWF4LXdpZHRoOm1pbi1jb250ZW50fS5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbiAuZm9vdGVyX19tZW51LWxpc3QsLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2sgLmZvb3Rlcl9fbWVudS1saXN0e3BhZGRpbmc6MH0uZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fbWVudS1jb2x1bW4gLmZvb3Rlcl9fbWVudS1saXN0IC5mb290ZXJfX21lbnUtbGksLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2sgLmZvb3Rlcl9fbWVudS1saXN0IC5mb290ZXJfX21lbnUtbGl7cG9zaXRpb246cmVsYXRpdmU7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MTdweDtwYWRkaW5nOjdweCAwO2xpbmUtaGVpZ2h0OjI0cHg7Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTpibG9jaztjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX21lbnUtY29sdW1uIC5mb290ZXJfX21lbnUtbGlzdCAuZm9vdGVyX19tZW51LWxpOmhvdmVyPmEsLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2sgLmZvb3Rlcl9fbWVudS1saXN0IC5mb290ZXJfX21lbnUtbGk6aG92ZXI+YXt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbiAuZm9vdGVyX19tZW51LWxpc3QgLmZvb3Rlcl9fbWVudS1saS5tZW51X2xpX19hY3RpdmUsLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2sgLmZvb3Rlcl9fbWVudS1saXN0IC5mb290ZXJfX21lbnUtbGkubWVudV9saV9fYWN0aXZle2ZvbnQtd2VpZ2h0OmJvbGQ7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fbWVudS1jb2x1bW4gLmZvb3Rlcl9fbWVudS1saXN0IC5mb290ZXJfX21lbnUtbGk6Zmlyc3QtY2hpbGQsLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2sgLmZvb3Rlcl9fbWVudS1saXN0IC5mb290ZXJfX21lbnUtbGk6Zmlyc3QtY2hpbGR7Zm9udC13ZWlnaHQ6Ym9sZDtjb2xvcjojMUYyMDQxO2ZvbnQtc2l6ZToxMnB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjdXJzb3I6aW5oZXJpdDt3aGl0ZS1zcGFjZTpub3dyYXA7cGFkZGluZzoxMHB4IDAgN3B4fS5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbiAuZm9vdGVyX19tZW51LWxpc3QgLmlucHV0LXRleHRfc3Vic2NyaXB0aW9uLC5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19ib3R0b20tbWVudS1sb2dvLWJsb2NrIC5mb290ZXJfX21lbnUtbGlzdCAuaW5wdXQtdGV4dF9zdWJzY3JpcHRpb257bWFyZ2luLXRvcDoxMHB4fS5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbiAuZm9vdGVyX19tZW51LWxpc3QgLmlucHV0LXRleHRfc3Vic2NyaXB0aW9uIC5pbnB1dC10ZXh0X19pbnB1dCwuZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9jayAuZm9vdGVyX19tZW51LWxpc3QgLmlucHV0LXRleHRfc3Vic2NyaXB0aW9uIC5pbnB1dC10ZXh0X19pbnB1dHtwYWRkaW5nOjEwcHggMTRweDtmb250LXNpemU6MTRweDt3aWR0aDoyNjBweH0uZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fbWVudS1jb2x1bW46bGFzdC1jaGlsZCwuZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fbWVudS1jb2x1bW46Zmlyc3QtY2hpbGQsLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2s6bGFzdC1jaGlsZCwuZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9jazpmaXJzdC1jaGlsZHttaW4td2lkdGg6MjAwcHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KX0uZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fbWVudS1jb2x1bW46bGFzdC1jaGlsZCAuZm9vdGVyX19tZW51LWxpLC5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbjpmaXJzdC1jaGlsZCAuZm9vdGVyX19tZW51LWxpLC5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19ib3R0b20tbWVudS1sb2dvLWJsb2NrOmxhc3QtY2hpbGQgLmZvb3Rlcl9fbWVudS1saSwuZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9jazpmaXJzdC1jaGlsZCAuZm9vdGVyX19tZW51LWxpe2N1cnNvcjppbmhlcml0O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSl9LmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX21lbnUtY29sdW1uOm50aC1jaGlsZCgzKSwuZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9jazpudGgtY2hpbGQoMyl7bWluLXdpZHRoOjE1NXB4fS5mb290ZXIgLmZvb3Rlcl9fYmxvY2stbWVudSAuZm9vdGVyX19jb250ZW50LWNvbnRhaW5lciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbjpudGgtY2hpbGQoMiksLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX21lbnUtY29sdW1uOm50aC1jaGlsZCg0KSwuZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9jazpudGgtY2hpbGQoMiksLmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2s6bnRoLWNoaWxkKDQpe21pbi13aWR0aDoxNTVweH0uZm9vdGVyIC5mb290ZXJfX2Jsb2NrLW1lbnUgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9ja3ttYXgtd2lkdGg6MjU1cHh9LmZvb3RlciAuZm9vdGVyX19ibG9jay1tZW51IC5mb290ZXJfX2NvbnRlbnQtY29udGFpbmVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX2JvdHRvbS1tZW51LWxvZ28tYmxvY2sgcHtwYWRkaW5nOjB9LmZvb3RlciAuZm9vdGVyX19jb3B5cmlnaHQtYmxvY2t7YmFja2dyb3VuZDojZmZmO2JveC1zaGFkb3c6MHB4IDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpfS5mb290ZXIgLmZvb3Rlcl9fY29weXJpZ2h0LWJsb2NrIC5mb290ZXJfX2NvcHlyaWdodC1jb250ZW50e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjE0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO21pbi13aWR0aDo0MDBweDttYXgtd2lkdGg6ODAuNSU7bWFyZ2luOjAgYXV0b30uZm9vdGVyIC5mb290ZXJfX2NvcHlyaWdodC1ibG9jayAuZm9vdGVyX19jb3B5cmlnaHQtY29udGVudCBwe21hcmdpbjoyM3B4IDB9LmZvb3RlciAuZm9vdGVyX19jb3B5cmlnaHQtYmxvY2sgLmZvb3Rlcl9fY29weXJpZ2h0LWNvbnRlbnQgLmZvb3Rlcl9fc29jLWJsb2Nre2Rpc3BsYXk6ZmxleH0uZm9vdGVyIC5mb290ZXJfX2NvcHlyaWdodC1ibG9jayAuZm9vdGVyX19jb3B5cmlnaHQtY29udGVudCAuZm9vdGVyX19zb2MtYmxvY2sgLmZvb3Rlcl9fc29jLW5ldHdvcmt7aGVpZ2h0OjI0cHg7d2lkdGg6MjRweDtwYWRkaW5nLWxlZnQ6MjBweDtjdXJzb3I6cG9pbnRlcn0uZm9vdGVyIC5mb290ZXJfX2NvcHlyaWdodC1ibG9jayAuZm9vdGVyX19jb3B5cmlnaHQtY29udGVudCAuZm9vdGVyX19zb2MtYmxvY2sgLmZvb3Rlcl9fc29jLW5ldHdvcmsuZm9vdGVyX19zb2MtbmV0d29ya190d2l0dGVye21hcmdpbi10b3A6LTFweH0uZm9vdGVyIC5mb290ZXJfX2NvcHlyaWdodC1ibG9jayAuZm9vdGVyX19jb3B5cmlnaHQtY29udGVudCAuZm9vdGVyX19zb2MtYmxvY2sgLmZvb3Rlcl9fc29jLW5ldHdvcmsuZm9vdGVyX19zb2MtbmV0d29ya19mYWNlYm9va3t3aWR0aDoyMnB4O2hlaWdodDoyMnB4O21hcmdpbi10b3A6MXB4fS5mb290ZXIgLmZvb3Rlcl9fY29weXJpZ2h0LWJsb2NrIC5mb290ZXJfX2NvcHlyaWdodC1jb250ZW50IC5mb290ZXJfX3NvYy1ibG9jayAuZm9vdGVyX19zb2MtbmV0d29yay5mb290ZXJfX3NvYy1uZXR3b3JrX2luc3RhZ3JhbXt3aWR0aDoyMnB4O2hlaWdodDoyMnB4O21hcmdpbi10b3A6MXB4fUBtZWRpYSAobWF4LXdpZHRoOiAxMTcwcHgpey5mb290ZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnV7dGV4dC1hbGlnbjpjZW50ZXI7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH0uZm9vdGVyIC5mb290ZXJfX2JvdHRvbS1tZW51IC5mb290ZXJfX21lbnUtY29sdW1ue21hcmdpbjoxMHB4IDIwcHh9LmZvb3RlciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbiAuZm9vdGVyX19tZW51LWxpc3R7d2lkdGg6MjcwcHh9LmZvb3RlciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19sb2dve21hcmdpbjoxMHB4IDIwcHg7bWF4LXdpZHRoOm5vbmV9LmZvb3RlciAuZm9vdGVyX19jb3B5cmlnaHQtY29udGVudHttYXJnaW46MjNweCAyMHB4fX1AbWVkaWEgKG1heC13aWR0aDogNzkwcHgpey5mb290ZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnV7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXJ9fUBtZWRpYSAobWF4LXdpZHRoOiA2MjBweCl7LmZvb3RlciAuZm9vdGVyX19ib3R0b20tbWVudXtwYWRkaW5nOjkwcHggMCAwIDB9LmZvb3RlciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19tZW51LWNvbHVtbntkaXNwbGF5Om5vbmV9LmZvb3RlciAuZm9vdGVyX19ib3R0b20tbWVudSAuZm9vdGVyX19sb2dve21hcmdpbjowfS5mb290ZXIgLmZvb3Rlcl9fYm90dG9tLW1lbnUgLmZvb3Rlcl9fbG9nbyBwe2Rpc3BsYXk6bm9uZX19XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9mb290ZXIvZm9vdGVyLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsNEJBR0ksdUNBQTJDLENBQzNDLDBDQUE4QyxDQUM5QyxZQUFhLENBQ2Isc0JBQXVCLENBQ3ZCLFVBQVcsQ0FDWCxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FUcEIsdURBWU0sV0FBWSxDQUNaLGVBQWdCLENBQ2hCLGVBQWdCLENBQ2hCLGFBQWMsQ0FDZCxlQUFnQixDQWhCdEIsNEVBbUJRLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsY0FBZSxDQUNmLFFBQVMsQ0FDVCxxQkFBc0IsQ0FDdEIsY0FBZSxDQUNmLHdCQUE0QixDQXpCcEMsMEhBOEJZLGlCQUFrQixDQTlCOUIsNk1Bb0NVLGFBQWMsQ0FDZCxxQkFBc0IsQ0FyQ2hDLG1QQXdDWSxTQUFVLENBeEN0QixxUkEyQ2MsaUJBQWtCLENBQ2xCLGNBQWUsQ0FDZixnQkFBaUIsQ0FDakIsYUFBYyxDQUNkLGdCQUFpQixDQUNqQixjQUFlLENBQ2YsYUFBYyxDQUNkLHdCQUE0QixDQWxEMUMscVNBc0RrQix5QkFBMEIsQ0F0RDVDLHFUQTJEZ0IsZ0JBQWlCLENBQ2pCLHlCQUE2QixDQTVEN0MsNlNBZ0VnQixnQkFBaUIsQ0FDakIsYUFBYyxDQUNkLGNBQWUsQ0FDZix3QkFBeUIsQ0FDekIsY0FBZSxDQUNmLGtCQUFtQixDQUNuQixrQkFBbUIsQ0F0RW5DLHFTQTJFYyxlQUFnQixDQTNFOUIsMlVBOEVnQixpQkFBa0IsQ0FDbEIsY0FBZSxDQUNmLFdBQVksQ0FoRjVCLHdjQXNGWSxlQUFnQixDQUNoQix5QkFBNkIsQ0F2RnpDLDRnQkEwRmMsY0FBZSxDQUNmLHlCQUE2QixDQTNGM0MsdU9BZ0dZLGVBQWdCLENBaEc1Qiw4Y0FvR1ksZUFBZ0IsQ0FwRzVCLDRHQXlHVSxlQUFnQixDQXpHMUIsOEdBNEdZLFNBQVUsQ0E1R3RCLGlDQW9ISSxlQUFnQixDQUNoQiw0Q0FBZ0QsQ0FySHBELDREQXdITSxZQUFhLENBQ2IsNkJBQThCLENBQzlCLGtCQUFtQixDQUNuQixjQUFlLENBQ2Ysd0JBQTRCLENBQzVCLGVBQWdCLENBQ2hCLGVBQWdCLENBQ2hCLGFBQWMsQ0EvSHBCLDhEQWtJUSxhQUFjLENBbEl0QiwrRUFzSVEsWUFBYSxDQXRJckIsb0dBeUlVLFdBQVksQ0FDWixVQUFXLENBQ1gsaUJBQWtCLENBQ2xCLGNBQWUsQ0E1SXpCLGdJQStJWSxlQUFnQixDQS9JNUIsaUlBbUpZLFVBQVcsQ0FDWCxXQUFZLENBQ1osY0FBZSxDQXJKM0Isa0lBeUpZLFVBQVcsQ0FDWCxXQUFZLENBQ1osY0FBZSxDQUNoQiwyQkFRVCw2QkFHSSxpQkFBa0IsQ0FDbEIsNEJBQTZCLENBSmpDLGtEQU9NLGdCQUFpQixDQVB2QixxRUFVUSxXQUFZLENBVnBCLDJDQWVNLGdCQUFpQixDQUNqQixjQUFlLENBaEJyQixtQ0FxQkksZ0JBQWlCLENBQ2xCLENBSUwsMEJBQ0UsNkJBR0ksWUFBYSxDQUNiLHFCQUFzQixDQUN0QixrQkFBbUIsQ0FDcEIsQ0FJTCwwQkFDRSw2QkFHSSxrQkFBbUIsQ0FIdkIsa0RBTU0sWUFBYSxDQU5uQiwyQ0FVTSxRQUFTLENBVmYsNkNBYVEsWUFBYSxDQUNkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5mb290ZXJ7XFxyXFxuXFxyXFxuICAuZm9vdGVyX19ibG9jay1tZW51e1xcclxcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjEpO1xcclxcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjEpO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG5cXHJcXG4gICAgLmZvb3Rlcl9fY29udGVudC1jb250YWluZXJ7XFxyXFxuICAgICAgZmxleC1ncm93OiAxO1xcclxcbiAgICAgIG1heC13aWR0aDogODAuNSU7XFxyXFxuICAgICAgbWluLXdpZHRoOiA0MDBweDtcXHJcXG4gICAgICBtYXJnaW46IDAgYXV0bztcXHJcXG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xcclxcblxcclxcbiAgICAgIC5mb290ZXJfX2JvdHRvbS1tZW51e1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDkxcHggMCA4OXB4IDA7XFxyXFxuICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgIFxcclxcbiAgICAgICAgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9ja3tcXHJcXG5cXHJcXG4gICAgICAgICAgLmZvb3Rlcl9fbG9nb3tcXHJcXG4gICAgICAgICAgICBtYXJnaW46IDEwcHggMCAzcHg7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgIC5mb290ZXJfX21lbnUtY29sdW1uLFxcclxcbiAgICAgICAgLmZvb3Rlcl9fYm90dG9tLW1lbnUtbG9nby1ibG9ja3tcXHJcXG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICAgIG1heC13aWR0aDogbWluLWNvbnRlbnQ7XFxyXFxuICAgICAgXFxyXFxuICAgICAgICAgIC5mb290ZXJfX21lbnUtbGlzdHtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgIFxcclxcbiAgICAgICAgICAgIC5mb290ZXJfX21lbnUtbGl7XFxyXFxuICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XFxyXFxuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTdweDtcXHJcXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDdweCAwO1xcclxcbiAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7ICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICAgICAgICAgIFxcclxcbiAgICAgICAgICAgICAgJjpob3ZlcntcXHJcXG4gICAgICAgICAgICAgICAgPiBhe1xcclxcbiAgICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICYubWVudV9saV9fYWN0aXZle1xcclxcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC43NSk7XFxyXFxuICAgICAgICAgICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgICAgICAgICAmOmZpcnN0LWNoaWxke1xcclxcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6ICMxRjIwNDE7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgICAgICAgICAgICAgY3Vyc29yOiBpbmhlcml0O1xcclxcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDAgN3B4O1xcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAgICAgICAuaW5wdXQtdGV4dF9zdWJzY3JpcHRpb257XFxyXFxuICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbiAgICAgIFxcclxcbiAgICAgICAgICAgICAgLmlucHV0LXRleHRfX2lucHV0e1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDE0cHg7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDI2MHB4O1xcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgIFxcclxcbiAgICAgICAgICAmOmxhc3QtY2hpbGQsJjpmaXJzdC1jaGlsZHtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDIwMHB4O1xcclxcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNzUpO1xcclxcbiAgICAgIFxcclxcbiAgICAgICAgICAgIC5mb290ZXJfX21lbnUtbGl7XFxyXFxuICAgICAgICAgICAgICBjdXJzb3I6IGluaGVyaXQ7XFxyXFxuICAgICAgICAgICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjc1KTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICBcXHJcXG4gICAgICAgICAgJjpudGgtY2hpbGQoMyl7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiAxNTVweDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgIFxcclxcbiAgICAgICAgICAmOm50aC1jaGlsZCgyKSwmOm50aC1jaGlsZCg0KXtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDE1NXB4O1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgICAuZm9vdGVyX19ib3R0b20tbWVudS1sb2dvLWJsb2Nre1xcclxcbiAgICAgICAgICBtYXgtd2lkdGg6IDI1NXB4O1xcclxcbiAgICAgIFxcclxcbiAgICAgICAgICBwe1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5mb290ZXJfX2NvcHlyaWdodC1ibG9ja3tcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDEwcHggMjBweCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcblxcclxcbiAgICAuZm9vdGVyX19jb3B5cmlnaHQtY29udGVudHtcXHJcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgIG1pbi13aWR0aDogNDAwcHg7XFxyXFxuICAgICAgbWF4LXdpZHRoOiA4MC41JTtcXHJcXG4gICAgICBtYXJnaW46IDAgYXV0bztcXHJcXG5cXHJcXG4gICAgICBwe1xcclxcbiAgICAgICAgbWFyZ2luOiAyM3B4IDA7XFxyXFxuICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAuZm9vdGVyX19zb2MtYmxvY2t7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgIFxcclxcbiAgICAgICAgLmZvb3Rlcl9fc29jLW5ldHdvcmt7XFxyXFxuICAgICAgICAgIGhlaWdodDogMjRweDtcXHJcXG4gICAgICAgICAgd2lkdGg6IDI0cHg7XFxyXFxuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcXHJcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBcXHJcXG4gICAgICAgICAgJi5mb290ZXJfX3NvYy1uZXR3b3JrX3R3aXR0ZXJ7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLXRvcDogLTFweDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgICAgJi5mb290ZXJfX3NvYy1uZXR3b3JrX2ZhY2Vib29re1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAyMnB4O1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMjJweDtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAxcHg7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAgICYuZm9vdGVyX19zb2MtbmV0d29ya19pbnN0YWdyYW17XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDIycHg7XFxyXFxuICAgICAgICAgICAgaGVpZ2h0OiAyMnB4O1xcclxcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDFweDtcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KXtcXHJcXG4gIC5mb290ZXJ7XFxyXFxuXFxyXFxuICAgIC5mb290ZXJfX2JvdHRvbS1tZW51e1xcclxcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG5cXHJcXG4gICAgICAuZm9vdGVyX19tZW51LWNvbHVtbntcXHJcXG4gICAgICAgIG1hcmdpbjogMTBweCAyMHB4O1xcclxcblxcclxcbiAgICAgICAgLmZvb3Rlcl9fbWVudS1saXN0e1xcclxcbiAgICAgICAgICB3aWR0aDogMjcwcHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgIC5mb290ZXJfX2xvZ297XFxyXFxuICAgICAgICBtYXJnaW46IDEwcHggMjBweDtcXHJcXG4gICAgICAgIG1heC13aWR0aDogbm9uZTtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmZvb3Rlcl9fY29weXJpZ2h0LWNvbnRlbnR7XFxyXFxuICAgICAgbWFyZ2luOiAyM3B4IDIwcHg7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtYXgtd2lkdGg6IDc5MHB4KXtcXHJcXG4gIC5mb290ZXJ7XFxyXFxuXFxyXFxuICAgIC5mb290ZXJfX2JvdHRvbS1tZW51e1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiA2MjBweCl7XFxyXFxuICAuZm9vdGVye1xcclxcblxcclxcbiAgICAuZm9vdGVyX19ib3R0b20tbWVudXtcXHJcXG4gICAgICBwYWRkaW5nOiA5MHB4IDAgMCAwO1xcclxcbiAgICAgIFxcclxcbiAgICAgIC5mb290ZXJfX21lbnUtY29sdW1ue1xcclxcbiAgICAgICAgZGlzcGxheTogbm9uZTtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLmZvb3Rlcl9fbG9nb3tcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG5cXHJcXG4gICAgICAgIHB7XFxyXFxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vZXhwYW5kLW1vcmUuc3ZnXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlcnt3aWR0aDoxMDAlO2JveC1zaGFkb3c6MHB4IDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQ6I2ZmZn0uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVye2ZsZXgtZ3JvdzoxO21heC13aWR0aDoxMDAlO21pbi13aWR0aDozMjBweDttYXJnaW46MCA5LjclfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3N7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO21pbi1oZWlnaHQ6NzBweDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmhlYWRlciAuaGVhZGVyX19jb250ZW50LWNvbnRhaW5lciAuaGVhZGVyX19saW5rcyAuaGVhZGVyX19sb2dve2hlaWdodDo3MHB4O3dpZHRoOjEwNnB4fS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudXtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbjowO3BhZGRpbmc6MH0uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVyIC5oZWFkZXJfX2xpbmtzIC5oZWFkZXJfX2Jsb2NrLW1lbnUgLmhlYWRlcl9fbWVudXtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7YWxpZ24taXRlbXM6Y2VudGVyO21hcmdpbjowO3BhZGRpbmc6MH0uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVyIC5oZWFkZXJfX2xpbmtzIC5oZWFkZXJfX2Jsb2NrLW1lbnUgLmhlYWRlcl9fbWVudSAuaGVhZGVyX19tZW51LWxpe2Rpc3BsYXk6YmxvY2s7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2N1cnNvcjpwb2ludGVyO3BhZGRpbmc6MTBweCAwO21hcmdpbjo1cHggMCA1cHggMjBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVyIC5oZWFkZXJfX2xpbmtzIC5oZWFkZXJfX2Jsb2NrLW1lbnUgLmhlYWRlcl9fbWVudSAuaGVhZGVyX19tZW51LWxpOmhvdmVyPi5oZWFkZXJfX3N1Ym1lbnV7ZGlzcGxheTpibG9ja30uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVyIC5oZWFkZXJfX2xpbmtzIC5oZWFkZXJfX2Jsb2NrLW1lbnUgLmhlYWRlcl9fbWVudSAuaGVhZGVyX19tZW51LWxpLmhlYWRlcl9fbWVudS1saV9hY3RpdmV7Zm9udC13ZWlnaHQ6Ym9sZDtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19tZW51IC5oZWFkZXJfX21lbnUtbGkuaGVhZGVyX19tZW51LWxpX2V4cGFuZDphZnRlcntjb250ZW50OicnO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjIycHg7aGVpZ2h0OjE0cHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJSA5MCU7Y3Vyc29yOnBvaW50ZXJ9LmhlYWRlciAuaGVhZGVyX19jb250ZW50LWNvbnRhaW5lciAuaGVhZGVyX19saW5rcyAuaGVhZGVyX19ibG9jay1tZW51IC5oZWFkZXJfX21lbnUgLmhlYWRlcl9fbWVudS1saSAuaGVhZGVyX19tZW51LWF7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjUpO2N1cnNvcjpwb2ludGVyO3RleHQtZGVjb3JhdGlvbjpub25lfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19tZW51IC5oZWFkZXJfX21lbnUtbGkgLmhlYWRlcl9fbWVudS1hOmhvdmVye3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9LmhlYWRlciAuaGVhZGVyX19jb250ZW50LWNvbnRhaW5lciAuaGVhZGVyX19saW5rcyAuaGVhZGVyX19ibG9jay1tZW51IC5oZWFkZXJfX21lbnUgLmhlYWRlcl9fbWVudS1saSAuaGVhZGVyX19zdWJtZW51e3Bvc2l0aW9uOmFic29sdXRlO21pbi13aWR0aDoxMDBweDtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuMDUpO2JveC1zaGFkb3c6MHB4IDEwcHggMjBweCByZ2JhKDMxLDMyLDY1LDAuMDUpO3BhZGRpbmc6MTBweCAyMHB4O3JpZ2h0OjA7Ym9yZGVyLXdpZHRoOjAgMXB4IDFweCAxcHg7ei1pbmRleDoxO2Rpc3BsYXk6bm9uZX0uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVyIC5oZWFkZXJfX2xpbmtzIC5oZWFkZXJfX2Jsb2NrLW1lbnUgLmhlYWRlcl9fbWVudSAuaGVhZGVyX19tZW51LWxpIC5oZWFkZXJfX3N1Ym1lbnUgLmhlYWRlcl9fc3VibWVudS1saXtkaXNwbGF5OmJsb2NrfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19tZW51IC5oZWFkZXJfX21lbnUtbGkgLmhlYWRlcl9fc3VibWVudSAuaGVhZGVyX19zdWJtZW51LWxpIC5oZWFkZXJfX3N1Ym1lbnUtYXtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Y3Vyc29yOnBvaW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmU7d2hpdGUtc3BhY2U6bm93cmFwfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19tZW51IC5oZWFkZXJfX21lbnUtbGkgLmhlYWRlcl9fc3VibWVudSAuaGVhZGVyX19zdWJtZW51LWxpIC5oZWFkZXJfX3N1Ym1lbnUtYTpob3Zlcnt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19ibG9jay1sb2dpbntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyfS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19ibG9jay1sb2dpbiAuYnRue2ZvbnQtd2VpZ2h0OmJvbGR9LmhlYWRlciAuaGVhZGVyX19jb250ZW50LWNvbnRhaW5lciAuaGVhZGVyX19saW5rcyAuaGVhZGVyX19ibG9jay1tZW51IC5oZWFkZXJfX2Jsb2NrLWxvZ2luIC5idG4uYnRuX2JvcmRlcntmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoyMnB4O3dpZHRoOjgzcHh9LmhlYWRlciAuaGVhZGVyX19jb250ZW50LWNvbnRhaW5lciAuaGVhZGVyX19saW5rcyAuaGVhZGVyX19ibG9jay1tZW51IC5oZWFkZXJfX2Jsb2NrLWxvZ2luIC5idG4uYnRuX2dyYWRpZW50e2xpbmUtaGVpZ2h0OjI2cHg7Zm9udC1zaXplOjEyLjNweDt3aWR0aDoxOTZweH0uaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVyIC5oZWFkZXJfX2xpbmtzIC5oZWFkZXJfX2Jsb2NrLW1lbnUgLmhlYWRlcl9fYmxvY2stbG9naW4gLmJ0bi5idG5faGVhZGVye21hcmdpbjoxNXB4IDAgMTVweCAyMHB4fS5oZWFkZXIgLmhlYWRlcl9fY29udGVudC1jb250YWluZXIgLmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19ibG9jay1sb2dpbiAuaGVhZGVyX19ibG9jay1sb2dpbi1ocnt3aWR0aDoxcHg7aGVpZ2h0OjMwcHg7YmFja2dyb3VuZDpyZ2JhKDMxLDMyLDY1LDAuMSk7bWFyZ2luOjAgMjBweH1AbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KXsuaGVhZGVyIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVye21hcmdpbjowfS5oZWFkZXJfX2xpbmtze21hcmdpbjowIDIwcHh9fUBtZWRpYSAobWF4LXdpZHRoOiA5NjBweCl7LmhlYWRlcl9fbGlua3N7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXJ9LmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudXtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcn0uaGVhZGVyX19saW5rcyAuaGVhZGVyX19ibG9jay1tZW51IC5oZWFkZXJfX21lbnUtbGk6bnRoLWNoaWxkKDEpe21hcmdpbi1sZWZ0OjB9LmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuYnRuX2JvcmRlci5idG5faGVhZGVye21hcmdpbi1sZWZ0OjB9LmhlYWRlcl9fbGlua3MgLmhlYWRlcl9fYmxvY2stbWVudSAuaGVhZGVyX19ibG9jay1sb2dpbi1ocntkaXNwbGF5Om5vbmV9fUBtZWRpYSAobWF4LXdpZHRoOiA2MjBweCl7LmhlYWRlcl9fbGlua3MgLmJ0bl9ib3JkZXIuYnRuX2hlYWRlcnttYXJnaW4tbGVmdDowfX1AbWVkaWEgKG1heC13aWR0aDogNTMwcHgpey5oZWFkZXJfX21lbnV7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oZWFkZXJfX21lbnUgLmhlYWRlcl9fbWVudS1saXttYXJnaW46NXB4IDAgIWltcG9ydGFudH0uaGVhZGVyX19ibG9jay1sb2dpbntmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5oZWFkZXJfX2Jsb2NrLWxvZ2luIC5idG57bWFyZ2luOjE1cHggMTBweCAhaW1wb3J0YW50fX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvYmxvY2tzL2hlYWRlci9oZWFkZXIuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxRQUNFLFVBQVcsQ0FDWCw0Q0FBZ0QsQ0FDaEQsaUJBQWtCLENBQ2xCLGVBQWdCLENBSmxCLG1DQU9JLFdBQVksQ0FDWixjQUFlLENBQ2YsZUFBZ0IsQ0FDaEIsYUFBYyxDQVZsQixrREFhTSxZQUFhLENBQ2IsNkJBQThCLENBQzlCLGVBQWdCLENBQ2hCLHdCQUE0QixDQWhCbEMsZ0VBbUJRLFdBQVksQ0FDWixXQUFZLENBcEJwQixzRUF3QlEsWUFBYSxDQUNiLGNBQWUsQ0FDZixrQkFBbUIsQ0FDbkIsUUFBUyxDQUNULFNBQVUsQ0E1QmxCLG9GQStCVSxZQUFhLENBQ2IsY0FBZSxDQUNmLGtCQUFtQixDQUNuQixRQUFTLENBQ1QsU0FBVSxDQW5DcEIscUdBc0NZLGFBQWMsQ0FDZCx3QkFBNEIsQ0FDNUIsY0FBZSxDQUNmLGNBQWUsQ0FDZixxQkFBc0IsQ0FDdEIsaUJBQWtCLENBM0M5Qiw0SEErQ2dCLGFBQWMsQ0EvQzlCLDRIQW9EYyxnQkFBaUIsQ0FDakIseUJBQTZCLENBckQzQyxrSUEyRGdCLFVBQVcsQ0FDWCxvQkFBcUIsQ0FDckIsVUFBVyxDQUNYLFdBQVksQ0FDWix3REFBdUQsQ0FDdkQsMkJBQTRCLENBQzVCLDJCQUE0QixDQUM1QixjQUFlLENBbEUvQixxSEF1RWMsd0JBQTRCLENBQzVCLGNBQWUsQ0FDZixvQkFBcUIsQ0F6RW5DLDJIQTRFZ0IseUJBQTBCLENBNUUxQyxzSEFpRmMsaUJBQWtCLENBQ2xCLGVBQWdCLENBQ2hCLGVBQWdCLENBQ2hCLG9DQUF3QyxDQUN4Qyw0Q0FBZ0QsQ0FDaEQsaUJBQWtCLENBQ2xCLE9BQVEsQ0FDUiwwQkFBMkIsQ0FDM0IsU0FBVSxDQUNWLFlBQWEsQ0ExRjNCLDBJQTZGZ0IsYUFBYyxDQTdGOUIsNkpBZ0drQix3QkFBNEIsQ0FDNUIsY0FBZSxDQUNmLG9CQUFxQixDQUNyQixrQkFBbUIsQ0FuR3JDLG1LQXNHb0IseUJBQTBCLENBdEc5QywyRkErR1UsWUFBYSxDQUNiLGtCQUFtQixDQWhIN0IsZ0dBbUhZLGdCQUFpQixDQW5IN0IsMkdBc0hjLGNBQWUsQ0FDZixnQkFBaUIsQ0FDakIsVUFBVyxDQXhIekIsNkdBNEhjLGdCQUFpQixDQUNqQixnQkFBaUIsQ0FDakIsV0FBWSxDQTlIMUIsMkdBa0ljLHVCQUF3QixDQWxJdEMsbUhBdUlZLFNBQVUsQ0FDVixXQUFZLENBQ1osNkJBQWlDLENBQ2pDLGFBQWMsQ0FDZiwyQkFRVCxtQ0FHSSxRQUFTLENBQ1YsZUFJRCxhQUFjLENBQ2YsQ0FHSCwwQkFDRSxlQUNFLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdEIsa0JBQW1CLENBSHJCLG1DQU1JLHFCQUFzQixDQUN0QixzQkFBdUIsQ0FQM0IsaUVBWVEsYUFBYyxDQVp0QiwwREFtQlMsYUFBYyxDQW5CdkIsMkRBd0JNLFlBQWEsQ0FDZCxDQUtQLDBCQUNFLHNDQUtPLGFBQWMsQ0FDaEIsQ0FLUCwwQkFDRSxjQUNFLHFCQUFzQixDQUR4QiwrQkFJSSx1QkFBdUIsQ0FDeEIscUJBSUQsY0FBZSxDQUNmLHNCQUF1QixDQUZ6QiwwQkFLSSwyQkFBMkIsQ0FDNUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmhlYWRlcntcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgYm94LXNoYWRvdzogMHB4IDEwcHggMjBweCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG5cXHJcXG4gIC5oZWFkZXJfX2NvbnRlbnQtY29udGFpbmVye1xcclxcbiAgICBmbGV4LWdyb3c6IDE7XFxyXFxuICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgbWluLXdpZHRoOiAzMjBweDtcXHJcXG4gICAgbWFyZ2luOiAwIDkuNyU7XFxyXFxuXFxyXFxuICAgIC5oZWFkZXJfX2xpbmtze1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICAgIG1pbi1oZWlnaHQ6IDcwcHg7XFxyXFxuICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgXFxyXFxuICAgICAgLmhlYWRlcl9fbG9nb3tcXHJcXG4gICAgICAgIGhlaWdodDogNzBweDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDZweDtcXHJcXG4gICAgICB9XFxyXFxuICAgICAgXFxyXFxuICAgICAgLmhlYWRlcl9fYmxvY2stbWVudXtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgICAgcGFkZGluZzogMDtcXHJcXG4gICAgXFxyXFxuICAgICAgICAuaGVhZGVyX19tZW51e1xcclxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgICAgcGFkZGluZzogMDtcXHJcXG4gICAgXFxyXFxuICAgICAgICAgIC5oZWFkZXJfX21lbnUtbGl7XFxyXFxuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICAgICAgcGFkZGluZzogMTBweCAwO1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogNXB4IDAgNXB4IDIwcHg7XFxyXFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAgICAgICAgICY6aG92ZXJ7XFxyXFxuICAgICAgICAgICAgICA+IC5oZWFkZXJfX3N1Ym1lbnV7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAmLmhlYWRlcl9fbWVudS1saV9hY3RpdmV7XFxyXFxuICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgICAgICAgIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNzUpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgXFxyXFxuICAgICAgICAgICAgJi5oZWFkZXJfX21lbnUtbGlfZXhwYW5ke1xcclxcbiAgICBcXHJcXG4gICAgICAgICAgICAgICY6YWZ0ZXJ7XFxyXFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xcclxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyMnB4O1xcclxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE0cHg7XFxyXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnQEJsb2Nrcy9oZWFkZXIvZXhwYW5kLW1vcmUuc3ZnJyk7XFxyXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDUwJSA5MCU7XFxyXFxuICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgLmhlYWRlcl9fbWVudS1he1xcclxcbiAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICY6aG92ZXJ7XFxyXFxuICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAuaGVhZGVyX19zdWJtZW51e1xcclxcbiAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgICAgICAgbWluLXdpZHRoOiAxMDBweDtcXHJcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcbiAgICAgICAgICAgICAgYm94LXNoYWRvdzogMHB4IDEwcHggMjBweCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcbiAgICAgICAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xcclxcbiAgICAgICAgICAgICAgcmlnaHQ6IDA7XFxyXFxuICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDAgMXB4IDFweCAxcHg7XFxyXFxuICAgICAgICAgICAgICB6LWluZGV4OiAxO1xcclxcbiAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgIC5oZWFkZXJfX3N1Ym1lbnUtbGl7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICAuaGVhZGVyX19zdWJtZW51LWF7XFxyXFxuICAgICAgICAgICAgICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgJjpob3ZlcntcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICBcXHJcXG4gICAgICAgIC5oZWFkZXJfX2Jsb2NrLWxvZ2lue1xcclxcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcclxcbiAgICAgICAgICAuYnRue1xcclxcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICAgICAgXFxyXFxuICAgICAgICAgICAgJi5idG5fYm9yZGVyIHtcXHJcXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xcclxcbiAgICAgICAgICAgICAgd2lkdGg6IDgzcHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgXFxyXFxuICAgICAgICAgICAgJi5idG5fZ3JhZGllbnR7XFxyXFxuICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMjZweDtcXHJcXG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTIuM3B4O1xcclxcbiAgICAgICAgICAgICAgd2lkdGg6IDE5NnB4O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgICAmLmJ0bl9oZWFkZXJ7XFxyXFxuICAgICAgICAgICAgICBtYXJnaW46IDE1cHggMCAxNXB4IDIwcHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICB9XFxyXFxuICAgIFxcclxcbiAgICAgICAgICAuaGVhZGVyX19ibG9jay1sb2dpbi1ocntcXHJcXG4gICAgICAgICAgICB3aWR0aDogMXB4O1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcXHJcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDMxLCAzMiwgNjUsIDAuMSk7XFxyXFxuICAgICAgICAgICAgbWFyZ2luOiAwIDIwcHg7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHRcXHRcXHJcXG4gICAgICB9ICAgXFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtYXgtd2lkdGg6IDExNzBweCl7XFxyXFxuICAuaGVhZGVye1xcclxcblxcclxcbiAgICAuaGVhZGVyX19jb250ZW50LWNvbnRhaW5lcntcXHJcXG4gICAgICBtYXJnaW46IDA7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5oZWFkZXJfX2xpbmtzeyBcXHJcXG4gICAgbWFyZ2luOiAwIDIwcHg7IFxcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgKG1heC13aWR0aDogOTYwcHgpe1xcclxcbiAgLmhlYWRlcl9fbGlua3N7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAgIC5oZWFkZXJfX2Jsb2NrLW1lbnV7XFxyXFxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHJcXG4gICAgICAuaGVhZGVyX19tZW51LWxpe1xcclxcblxcclxcbiAgICAgICAgJjpudGgtY2hpbGQoMSl7XFxyXFxuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAuYnRuX2JvcmRlcntcXHJcXG5cXHJcXG4gICAgICAgICYuYnRuX2hlYWRlcntcXHJcXG4gICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAuaGVhZGVyX19ibG9jay1sb2dpbi1ocntcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiA2MjBweCl7XFxyXFxuICAuaGVhZGVyX19saW5rc3tcXHJcXG5cXHJcXG4gICAgLmJ0bl9ib3JkZXJ7XFxyXFxuICAgICAgXFxyXFxuICAgICAgJi5idG5faGVhZGVye1xcclxcbiAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgKG1heC13aWR0aDogNTMwcHgpe1xcclxcbiAgLmhlYWRlcl9fbWVudXtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgXFxyXFxuICAgIC5oZWFkZXJfX21lbnUtbGl7XFxyXFxuICAgICAgbWFyZ2luOiA1cHggMCFpbXBvcnRhbnQ7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5oZWFkZXJfX2Jsb2NrLWxvZ2lue1xcclxcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcclxcbiAgICAuYnRueyBcXHJcXG4gICAgICBtYXJnaW46IDE1cHggMTBweCFpbXBvcnRhbnQ7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9hcnJvdy5zdmdcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaW5wdXQtdGV4dHtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS5pbnB1dC10ZXh0LmlucHV0LXRleHRfc3Vic2NyaXB0aW9ue21hcmdpbi10b3A6MTBweH0uaW5wdXQtdGV4dC5pbnB1dC10ZXh0X3N1YnNjcmlwdGlvbjphZnRlcntjb250ZW50OicnO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Y3Vyc29yOnBvaW50ZXI7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjExcHg7cmlnaHQ6MTFweDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpfS5pbnB1dC10ZXh0IC5pbnB1dC10ZXh0X19pbnB1dHt3aWR0aDoxMDAlO2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSk7b3V0bGluZTpub25lO2ZvbnQtc2l6ZToxNHB4O2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjI1KTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXJhZGl1czo0cHg7aGVpZ2h0OjQ0cHg7cGFkZGluZzo4cHggMTRweDttYXJnaW4tdG9wOjVweDtmb250LWZhbWlseTpNb250c2VycmF0LCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zdHlsZTpub3JtYWx9LmlucHV0LXRleHQgLmlucHV0LXRleHRfX2lucHV0OmhvdmVyLC5pbnB1dC10ZXh0IC5pbnB1dC10ZXh0X19pbnB1dC5pbnB1dC10ZXh0X19pbnB1dF9ob3Zlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNzUpO2JvcmRlcjoxcHggc29saWQgcmdiYSgzMSwzMiw2NSwwLjUpO2ZvbnQtd2VpZ2h0OmJvbGR9LmlucHV0LXRleHQgLmlucHV0LXRleHRfX2lucHV0OmZvY3Vze2NvbG9yOnJnYmEoMzEsMzIsNjUsMC43NSk7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDMxLDMyLDY1LDAuNSl9LmlucHV0LXRleHQgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSl9LmlucHV0LXRleHQgOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpfS5pbnB1dC10ZXh0IDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuMjUpfS5pbnB1dC10ZXh0IDotbW96LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMzEsMzIsNjUsMC4yNSl9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9pbnB1dC10ZXh0L2lucHV0LXRleHQuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxZQUNFLGlCQUFrQixDQUNsQixVQUFXLENBRmIsb0NBS0ksZUFBZ0IsQ0FMcEIsMENBUU0sVUFBVyxDQUNYLFVBQVcsQ0FDWCxXQUFZLENBQ1osY0FBZSxDQUNmLGlCQUFrQixDQUNsQixXQUFZLENBQ1osVUFBVyxDQUNYLDJCQUE0QixDQUM1Qix3REFBcUQsQ0FoQjNELCtCQXFCSSxVQUFXLENBQ1gseUJBQTZCLENBQzdCLFlBQWEsQ0FDYixjQUFlLENBQ2Ysb0NBQXdDLENBQ3hDLHFCQUFzQixDQUN0QixpQkFBa0IsQ0FDbEIsV0FBWSxDQUNaLGdCQUFpQixDQUNqQixjQUFlLENBQ2YseUNBQTBDLENBQzFDLGtCQUFtQixDQUNuQixpQkFBa0IsQ0FqQ3RCLDRGQXFDTSx5QkFBNkIsQ0FDN0IsbUNBQXVDLENBQ3ZDLGdCQUFpQixDQXZDdkIscUNBMENNLHlCQUE2QixDQUM3QixtQ0FBdUMsQ0EzQzdDLHdDQWdESSx5QkFBNkIsQ0FoRGpDLG1DQW1ESSx5QkFBNkIsQ0FuRGpDLCtCQXNESSx5QkFBNkIsQ0F0RGpDLDhCQXlESSx5QkFBNkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmlucHV0LXRleHR7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG5cXHJcXG4gICYuaW5wdXQtdGV4dF9zdWJzY3JpcHRpb257XFxyXFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxyXFxuICBcXHJcXG4gICAgJjphZnRlcntcXHJcXG4gICAgICBjb250ZW50OiAnJztcXHJcXG4gICAgICB3aWR0aDogMjBweDtcXHJcXG4gICAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICBib3R0b206IDExcHg7XFxyXFxuICAgICAgcmlnaHQ6IDExcHg7XFxyXFxuICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ0BCbG9ja3MvaW5wdXQtdGV4dC9hcnJvdy5zdmcnKTtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcblxcclxcbiAgLmlucHV0LXRleHRfX2lucHV0e1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICAgIG91dGxpbmU6IG5vbmU7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICBoZWlnaHQ6IDQ0cHg7XFxyXFxuICAgIHBhZGRpbmc6IDhweCAxNHB4O1xcclxcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBNb250c2VycmF0LCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gICAgZm9udC1zdHlsZTogbm9ybWFsOyAgICBcXHJcXG5cXHJcXG4gICAgJjpob3ZlcixcXHJcXG4gICAgJi5pbnB1dC10ZXh0X19pbnB1dF9ob3ZlcntcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjc1KTtcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIH1cXHJcXG4gICAgJjpmb2N1c3tcXHJcXG4gICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjc1KTtcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuNSk7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7IC8qIENocm9tZSAqL1xcclxcbiAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gIH1cXHJcXG4gIDotbXMtaW5wdXQtcGxhY2Vob2xkZXIgeyAvKiBJRSAxMCsgKi9cXHJcXG4gICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICB9XFxyXFxuICA6Oi1tb3otcGxhY2Vob2xkZXIgeyAvKiBGaXJlZm94IDE5KyAqL1xcclxcbiAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gIH1cXHJcXG4gIDotbW96LXBsYWNlaG9sZGVyIHsgLyogRmlyZWZveCA0IC0gMTggKi9cXHJcXG4gICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC4yNSk7XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5saW5re2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQsIEFyaWFsLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0OmJvbGQ7Zm9udC1zaXplOjEycHg7bGluZS1oZWlnaHQ6MTVweDtoZWlnaHQ6MTVweDtjb2xvcjojQkM5Q0ZGO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjdXJzb3I6cG9pbnRlcjttYXJnaW46MTVweCAyMHB4IDE1cHggMDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmxpbmsubGlua19jbGVhbntjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSl9LmxpbmsubGlua19sdXh7bWFyZ2luOjAgMCAwIDNweH0ubGluazpob3Zlcnt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvbGluay9saW5rLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsTUFDRSx5Q0FBMEMsQ0FDMUMsaUJBQWtCLENBQ2xCLGdCQUFpQixDQUNqQixjQUFlLENBQ2YsZ0JBQWlCLENBQ2pCLFdBQVksQ0FDWixhQUFjLENBQ2Qsd0JBQXlCLENBQ3pCLGNBQWUsQ0FDZix1QkFBd0IsQ0FDeEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQVp2QixpQkFlSSx3QkFBNEIsQ0FmaEMsZUFtQkksZ0JBQWlCLENBbkJyQixZQXVCSSx5QkFBMEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxpbmt7XFxyXFxuICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGZvbnQtc2l6ZTogMTJweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAxNXB4O1xcclxcbiAgaGVpZ2h0OiAxNXB4O1xcclxcbiAgY29sb3I6ICNCQzlDRkY7XFx0XFxyXFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgbWFyZ2luOiAxNXB4IDIwcHggMTVweCAwO1xcclxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXHJcXG5cXHJcXG4gICYubGlua19jbGVhbntcXHJcXG4gICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgJi5saW5rX2x1eHtcXHJcXG4gICAgbWFyZ2luOiAwIDAgMCAzcHg7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAmOmhvdmVye1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXHJcXG4gIH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9hcnJvdy13aGl0ZS5zdmdcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucGFnaW5hdGlvbnt3aWR0aDoxMDAlO21hcmdpbjozMHB4IDAgMTBweCAwfS5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19udW0tYmxvY2t7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MTBweCAwfS5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19udW0tYmxvY2sgLnBhZ2luYXRpb25fX251bXt3aWR0aDo0MHB4O2hlaWdodDo0MHB4O2NvbG9yOnJnYmEoMzEsMzIsNjUsMC41KTtmb250LXNpemU6MTJweDtmb250LXdlaWdodDpib2xkO2JvcmRlci1yYWRpdXM6NTAlO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6cG9pbnRlcjt1c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmV9LnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX251bS1ibG9jayAucGFnaW5hdGlvbl9fbnVtLnBhZ2luYXRpb25fX251bV9hY3RpdmV7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjQkM5Q0ZGIDAlLCAjOEJBNEY5IDEwMCUpO2NvbG9yOiNmZmZ9LnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX251bS1ibG9jayAucGFnaW5hdGlvbl9fbnVtLnBhZ2luYXRpb25fX251bV9uZXh0e2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZGQ0Y5NyAwJSwgIzY2RDJFQSAxMDAlKTtjb2xvcjojZmZmO3Bvc2l0aW9uOnJlbGF0aXZlfS5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19udW0tYmxvY2sgLnBhZ2luYXRpb25fX251bS5wYWdpbmF0aW9uX19udW1fbmV4dCAucGFnaW5hdGlvbl9fYXJyb3d7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTJweDtyaWdodDo5cHg7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0fS5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19udW0tYmxvY2sgLnBhZ2luYXRpb25fX251bS5wYWdpbmF0aW9uX19udW1fbmV4dCAucGFnaW5hdGlvbl9fYXJyb3cucGFnaW5hdGlvbl9fYXJyb3dfd2hpdGV7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpfS5wYWdpbmF0aW9uIC5wYWdpbmF0aW9uX19sYWJlbHt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsWUFDRSxVQUFXLENBQ1gsb0JBQXFCLENBRnZCLG1DQUtJLFVBQVcsQ0FDWCxZQUFhLENBQ2Isc0JBQXVCLENBQ3ZCLGFBQWMsQ0FSbEIsb0RBV00sVUFBVyxDQUNYLFdBQVksQ0FDWix3QkFBNEIsQ0FDNUIsY0FBZSxDQUNmLGdCQUFpQixDQUNqQixpQkFBa0IsQ0FDbEIsWUFBYSxDQUNiLHNCQUF1QixDQUN2QixrQkFBbUIsQ0FDbkIsY0FBZSxDQUNmLGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQixDQXhCM0IsMkVBMkJRLDREQUE2RCxDQUM3RCxVQUFXLENBNUJuQix5RUFnQ1EsNERBQTZELENBQzdELFVBQVcsQ0FDWCxpQkFBa0IsQ0FsQzFCLDRGQXFDVSxVQUFXLENBQ1gsV0FBWSxDQUNaLGNBQWUsQ0FDZixpQkFBa0IsQ0FDbEIsUUFBUyxDQUNULFNBQVUsQ0FDViwyQkFBNEIsQ0EzQ3RDLG9IQThDWSx3REFBMkQsQ0E5Q3ZFLCtCQXNESSxVQUFXLENBQ1gsWUFBYSxDQUNiLHNCQUF1QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucGFnaW5hdGlvbntcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgbWFyZ2luOiAzMHB4IDAgMTBweCAwO1xcclxcblxcclxcbiAgLnBhZ2luYXRpb25fX251bS1ibG9ja3tcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBtYXJnaW46IDEwcHggMDtcXHJcXG5cXHJcXG4gICAgLnBhZ2luYXRpb25fX251bXtcXHJcXG4gICAgICB3aWR0aDogNDBweDtcXHJcXG4gICAgICBoZWlnaHQ6IDQwcHg7XFxyXFxuICAgICAgY29sb3I6IHJnYmEoMzEsIDMyLCA2NSwgMC41KTtcXHJcXG4gICAgICBmb250LXNpemU6IDEycHg7XFxyXFxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG5cXHJcXG4gICAgICAmLnBhZ2luYXRpb25fX251bV9hY3RpdmV7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjQkM5Q0ZGIDAlLCAjOEJBNEY5IDEwMCUpO1xcclxcbiAgICAgICAgY29sb3I6ICNmZmY7XFxyXFxuICAgICAgfVxcclxcblxcclxcbiAgICAgICYucGFnaW5hdGlvbl9fbnVtX25leHR7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNkZDRjk3IDAlLCAjNjZEMkVBIDEwMCUpO1xcclxcbiAgICAgICAgY29sb3I6ICNmZmY7XFxyXFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuXFxyXFxuICAgICAgICAucGFnaW5hdGlvbl9fYXJyb3d7XFxyXFxuICAgICAgICAgIHdpZHRoOiAyMHB4O1xcclxcbiAgICAgICAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgICB0b3A6IDEycHg7XFxyXFxuICAgICAgICAgIHJpZ2h0OiA5cHg7XFxyXFxuICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuXFxyXFxuICAgICAgICAgICYucGFnaW5hdGlvbl9fYXJyb3dfd2hpdGV7XFx0XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdAQmxvY2tzL3BhZ2luYXRpb24vYXJyb3ctd2hpdGUuc3ZnJyk7XFxyXFxuICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5wYWdpbmF0aW9uX19sYWJlbHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgfVxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmFuZ2Utc2xpZGVye3dpZHRoOjEwMCV9LnJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX190b3BpYy1sYWJlbHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyfS5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2xpZGVye3dpZHRoOmNhbGMoMTAwJSAtIDExcHgpO2hlaWdodDo2cHg7bWFyZ2luOjE4cHggMCAxMHB4O3RyYW5zZm9ybTp0cmFuc2xhdGUoNXB4LCAwKTtwb3NpdGlvbjpyZWxhdGl2ZX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlcjpob3ZlcntjdXJzb3I6cG9pbnRlcn0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlcjpiZWZvcmV7Y29udGVudDonJztib3JkZXI6MXB4IHNvbGlkIHJnYmEoMzEsMzIsNjUsMC4yNSk7Ym9yZGVyLXJhZGl1czozcHg7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOmNhbGMoMTAwJSArIDExcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTVweCwgMCk7aGVpZ2h0OjZweH0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19zY2FsZXtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Oi0xfS5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NjYWxlIC5yYW5nZS1zbGlkZXJfX3NjYWxlLWxpbmV7d2lkdGg6MXB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQ6cmdiYSgzMSwzMiw2NSwwLjI1KX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19zY2FsZSAucmFuZ2Utc2xpZGVyX19zY2FsZS12YWx7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7Zm9udC1zaXplOjEwcHh9LnJhbmdlLXNsaWRlciAucmFuZ2Utc2xpZGVyX19zbGlkZXIgLnJhbmdlLXNsaWRlcl9fcmFuZ2V7aGVpZ2h0OmNhbGMoMTAwJSArIDBweCk7d2lkdGg6ODVweDtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsICM2RkNGOTcgMCUsICM2NkQyRUEgMTAwJSk7Ym9yZGVyLXJhZGl1czozcHg7Ym94LXNpemluZzpib3JkZXItYm94O3RyYW5zZm9ybTp0cmFuc2xhdGUoNzhweCwgMHB4KX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19sZWZ0LC5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3JpZ2h0e3dpZHRoOjEycHg7aGVpZ2h0OjEycHg7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNkZDRjk3IDAlLCAjNjZEMkVBIDEwMCUpO2JvcmRlcjoycHggc29saWQgI2ZmZjtib3JkZXItcmFkaXVzOjUwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7Y3Vyc29yOnBvaW50ZXI7dG9wOjdweH0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19sZWZ0e2xlZnQ6NzhweDt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC0xMnB4KX0ucmFuZ2Utc2xpZGVyIC5yYW5nZS1zbGlkZXJfX3NsaWRlciAucmFuZ2Utc2xpZGVyX19yaWdodHtsZWZ0OjE2M3B4O3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTEycHgpfS5yYW5nZS1zbGlkZXIgLnJhbmdlLXNsaWRlcl9fcG9zdFRleHR7bWFyZ2luLXRvcDo1cHh9Lm1vdmluZy1zbGlkZXJ7dXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGNBQ0UsVUFBVyxDQURiLHlDQUlJLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsa0JBQW1CLENBTnZCLG9DQVVJLHVCQUF3QixDQUN4QixVQUFXLENBQ1gsa0JBQW1CLENBQ25CLDJCQUE0QixDQUM1QixpQkFBa0IsQ0FkdEIsMENBaUJNLGNBQWUsQ0FqQnJCLDJDQXFCTSxVQUFXLENBQ1gsb0NBQXdDLENBQ3hDLGlCQUFrQixDQUNsQixxQkFBc0IsQ0FDdEIsaUJBQWtCLENBQ2xCLHVCQUF3QixDQUN4Qiw0QkFBNkIsQ0FDN0IsVUFBVyxDQTVCakIseURBZ0NNLGlCQUFrQixDQUNsQixVQUFXLENBakNqQixtRkFvQ1EsU0FBVSxDQUNWLFdBQVksQ0FDWiw4QkFBa0MsQ0F0QzFDLGtGQTBDUSwwQkFBMkIsQ0FDM0IsY0FBZSxDQTNDdkIseURBZ0RNLHVCQUF3QixDQUN4QixVQUFXLENBQ1gsNERBQTZELENBQzdELGlCQUFrQixDQUNsQixxQkFBc0IsQ0FDdEIsOEJBQStCLENBckRyQyxpSEEwRE0sVUFBVyxDQUNYLFdBQVksQ0FDWiw0REFBNkQsQ0FDN0QscUJBQXNCLENBQ3RCLGtCQUFtQixDQUNuQixvQkFBcUIsQ0FDckIsaUJBQWtCLENBQ2xCLGNBQWUsQ0FDZixPQUFRLENBbEVkLHdEQXNFTSxTQUFVLENBQ1YsZ0NBQWlDLENBdkV2Qyx5REEyRU0sVUFBVyxDQUNYLGdDQUFpQyxDQTVFdkMsc0NBaUZJLGNBQWUsQ0FDaEIsZUFJRCxnQkFBaUIsQ0FDakIscUJBQXNCLENBQ3RCLHdCQUF5QixDQUN6QixvQkFBcUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnJhbmdlLXNsaWRlcntcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcblxcclxcbiAgLnJhbmdlLXNsaWRlcl9fdG9waWMtbGFiZWx7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5yYW5nZS1zbGlkZXJfX3NsaWRlcntcXHJcXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDExcHgpO1xcclxcbiAgICBoZWlnaHQ6IDZweDtcXHJcXG4gICAgbWFyZ2luOiAxOHB4IDAgMTBweDtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNXB4LCAwKTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcbiAgICAmOmhvdmVye1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmOmJlZm9yZXtcXHJcXG4gICAgICBjb250ZW50OiAnJztcXHJcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDMxLCAzMiwgNjUsIDAuMjUpO1xcclxcbiAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICB3aWR0aDogY2FsYygxMDAlICsgMTFweCk7XFxyXFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTVweCwgMCk7XFxyXFxuICAgICAgaGVpZ2h0OiA2cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnJhbmdlLXNsaWRlcl9fc2NhbGV7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIHotaW5kZXg6IC0xO1xcclxcbiAgICAgIFxcclxcbiAgICAgIC5yYW5nZS1zbGlkZXJfX3NjYWxlLWxpbmV7XFxyXFxuICAgICAgICB3aWR0aDogMXB4O1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgzMSwgMzIsIDY1LCAwLjI1KTtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLnJhbmdlLXNsaWRlcl9fc2NhbGUtdmFse1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxMHB4O1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAucmFuZ2Utc2xpZGVyX19yYW5nZXtcXHJcXG4gICAgICBoZWlnaHQ6IGNhbGMoMTAwJSArIDBweCk7XFxyXFxuICAgICAgd2lkdGg6IDg1cHg7XFxyXFxuICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgIzZGQ0Y5NyAwJSwgIzY2RDJFQSAxMDAlKTtcXHJcXG4gICAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg3OHB4LCAwcHgpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5yYW5nZS1zbGlkZXJfX2xlZnQsXFxyXFxuICAgIC5yYW5nZS1zbGlkZXJfX3JpZ2h0e1xcclxcbiAgICAgIHdpZHRoOiAxMnB4O1xcclxcbiAgICAgIGhlaWdodDogMTJweDtcXHJcXG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjNkZDRjk3IDAlLCAjNjZEMkVBIDEwMCUpO1xcclxcbiAgICAgIGJvcmRlcjogMnB4IHNvbGlkICNmZmY7XFxyXFxuICAgICAgYm9yZGVyLXJhZGl1czogNTBweDtcXHJcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICB0b3A6IDdweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAucmFuZ2Utc2xpZGVyX19sZWZ0e1xcclxcbiAgICAgIGxlZnQ6IDc4cHg7XFxyXFxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTEycHgpO1xcclxcbiAgICB9XFxyXFxuICAgIFxcclxcbiAgICAucmFuZ2Utc2xpZGVyX19yaWdodHtcXHJcXG4gICAgICBsZWZ0OiAxNjNweDtcXHJcXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtMTJweCk7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5yYW5nZS1zbGlkZXJfX3Bvc3RUZXh0e1xcclxcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5tb3Zpbmctc2xpZGVye1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9zdGFyX2JvcmRlci5zdmdcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyBmcm9tIFwiLi9zdGFyLnN2Z1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmF0ZS1idG57ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O21hcmdpbjoxNXB4IDIwcHggMCAwfS5yYXRlLWJ0biAucmF0ZS1idG5fX3N0YXJ7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDttYXJnaW46MCAycHg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbn0ucmF0ZS1idG4gLnJhdGUtYnRuX19zdGFyLnJhdGUtYnRuX19zdGFyX2FjdGl2ZXtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIil9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Jsb2Nrcy9yYXRlLWJ0bi9yYXRlLWJ0bi5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLFVBQ0UsWUFBYSxDQUNiLDBCQUEyQixDQUMzQixvQkFBcUIsQ0FIdkIsMEJBTUksVUFBVyxDQUNYLFdBQVksQ0FDWixZQUFhLENBQ2IsY0FBZSxDQUNmLHdEQUF3QyxDQUN4QywyQkFBNEIsQ0FDNUIsdUJBQXdCLENBQ3hCLHVCQUF3QixDQWI1QixnREFnQk0sd0RBQWlDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yYXRlLWJ0bntcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxyXFxuICBtYXJnaW46IDE1cHggMjBweCAwIDA7XFxyXFxuXFxyXFxuICAucmF0ZS1idG5fX3N0YXJ7XFxyXFxuICAgIHdpZHRoOiAyMHB4O1xcclxcbiAgICBoZWlnaHQ6IDIwcHg7XFxyXFxuICAgIG1hcmdpbjogMCAycHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdzdGFyX2JvcmRlci5zdmcnKTtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTAlO1xcclxcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XFxyXFxuXFxyXFxuICAgICYucmF0ZS1idG5fX3N0YXJfYWN0aXZle1xcclxcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnc3Rhci5zdmcnKTtcXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIudG9waWMtbGFiZWx7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS50b3BpYy1sYWJlbCBoMywudG9waWMtbGFiZWwgcHttYXJnaW46MH0udG9waWMtbGFiZWwgcHtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxMXB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjb2xvcjojMUYyMDQxfVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9ibG9ja3MvdG9waWMtbGFiZWwvdG9waWMtbGFiZWwuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUNFLFlBQWEsQ0FDYiw2QkFBOEIsQ0FGaEMsK0JBS0ksUUFBUyxDQUxiLGVBU0ksY0FBZSxDQUNmLGdCQUFpQixDQUNqQix3QkFBeUIsQ0FDekIsYUFBY1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudG9waWMtbGFiZWx7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcblxcclxcbiAgaDMscHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgfVxcclxcblxcclxcbiAgcHtcXHJcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMTFweDtcXHJcXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcXHJcXG4gICAgY29sb3I6ICMxRjIwNDE7XFxyXFxuICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zdGFydC1wYWdle3BhZGRpbmc6ODBweCA4LjQlfS5zdGFydC1wYWdlIC5zdGFydC1wYWdlX19saW5rc3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufWJvZHl7bWFyZ2luOjA7cGFkZGluZzowO2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQsIEFyaWFsLCBzYW5zLXNlcmlmO2ZvbnQtc3R5bGU6bm9ybWFsO2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MTMuN3B4O2xpbmUtaGVpZ2h0OjI0cHg7Y29sb3I6cmdiYSgzMSwzMiw2NSwwLjc1KTttaW4td2lkdGg6MzIwcHh9aDF7Zm9udC1mYW1pbHk6TW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7Zm9udC1zaXplOjI0cHg7bGluZS1oZWlnaHQ6MzBweH1oMntmb250LWZhbWlseTpNb250c2VycmF0LCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXNpemU6MTlweDtsaW5lLWhlaWdodDoyNHB4fWgze2ZvbnQtZmFtaWx5Ok1vbnRzZXJyYXQsIEFyaWFsLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxMnB4O2xpbmUtaGVpZ2h0OjE1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfWgxLGgyLGgze21hcmdpbjowfWJvZHkscHtmb250LWZhbWlseTpNb250c2VycmF0LCBBcmlhbCwgc2Fucy1zZXJpZjtmb250LXN0eWxlOm5vcm1hbDtmb250LXdlaWdodDpub3JtYWw7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjRweH1he2N1cnNvcjpwb2ludGVyfWEgOmhvdmVye3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9aW1ne3VzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxZQUNFLGlCQUFrQixDQURwQiwrQkFJSSxZQUFhLENBQ2IscUJBQXNCLENBQ3ZCLEtBSUQsUUFBUyxDQUNULFNBQVUsQ0FDVix5Q0FBMEMsQ0FDMUMsaUJBQWtCLENBQ2xCLGtCQUFtQixDQUNuQixnQkFBaUIsQ0FDakIsZ0JBQWlCLENBQ2pCLHlCQUE2QixDQUM3QixlQUFnQixDQUNqQixHQUdDLHlDQUEwQyxDQUMxQyxjQUFlLENBQ2YsZ0JBQWlCLENBQ2xCLEdBR0MseUNBQTBDLENBQzFDLGNBQWUsQ0FDZixnQkFBaUIsQ0FDbEIsR0FHQyx5Q0FBMEMsQ0FDMUMsY0FBZSxDQUNmLGdCQUFpQixDQUNqQix3QkFBeUIsQ0FDMUIsU0FHQyxRQUFTLENBQ1YsT0FHQyx5Q0FBMEMsQ0FDMUMsaUJBQWtCLENBQ2xCLGtCQUFtQixDQUNuQixjQUFlLENBQ2YsZ0JBQWlCLENBQ2xCLEVBR0MsY0FBZSxDQURqQixTQUdJLHlCQUEwQixDQUMzQixJQUlELGdCQUFpQixDQUNqQixxQkFBc0IsQ0FDdEIsd0JBQXlCLENBQ3pCLG9CQUFxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3RhcnQtcGFnZXtcXHJcXG4gIHBhZGRpbmc6IDgwcHggOC40JTtcXHJcXG5cXHJcXG4gIC5zdGFydC1wYWdlX19saW5rc3tcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuYm9keXtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgZm9udC1zaXplOiAxMy43cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjRweDtcXHJcXG4gIGNvbG9yOiByZ2JhKDMxLCAzMiwgNjUsIDAuNzUpO1xcclxcbiAgbWluLXdpZHRoOiAzMjBweDtcXHJcXG59XFxyXFxuXFxyXFxuaDF7XFxyXFxuICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXNpemU6IDI0cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuaDJ7XFxyXFxuICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXNpemU6IDE5cHg7XFxyXFxuICBsaW5lLWhlaWdodDogMjRweDtcXHJcXG59XFxyXFxuXFxyXFxuaDN7XFxyXFxuICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXNpemU6IDEycHg7XFxyXFxuICBsaW5lLWhlaWdodDogMTVweDtcXHJcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxufVxcclxcblxcclxcbmgxLGgyLGgze1xcclxcbiAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5LHB7XFxyXFxuICBmb250LWZhbWlseTogTW9udHNlcnJhdCwgQXJpYWwsIHNhbnMtc2VyaWY7XFxyXFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcclxcbiAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XFxyXFxufVxcclxcblxcclxcbmF7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICA6aG92ZXJ7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5pbWd7XFxyXFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc2VhcmNoLXJvb217bWFyZ2luLXRvcDozMHB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjttYXJnaW46MCA5LjYlIDAgOS43JX0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJze3dpZHRoOjI2NnB4O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1zaHJpbms6MDttYXJnaW4tcmlnaHQ6NC42JX0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIGgze2ZvbnQtc2l6ZToxMi40cHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuZHJvcGRvd24tYmxvY2t7d2lkdGg6MTAwJX0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5kcm9wZG93bi1ibG9jayAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3due3dpZHRoOjEwMCV9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuc2VhcmNoLXJvb21fX2ZpbHRlci1kYXRlLC5zZWFyY2gtcm9vbSAuc2VhcmNoLXJvb21fX2ZpbHRlcnMgLnNlYXJjaC1yb29tX19maWx0ZXJzX2FkZGl0aW9uYWwsLnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxle21hcmdpbi10b3A6MzBweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWd1ZXN0e21hcmdpbi10b3A6MjBweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWNvbWZvcnR7bWFyZ2luLXRvcDoyMHB4fS5zZWFyY2gtcm9vbSAuc2VhcmNoLXJvb21fX2ZpbHRlcnMgLnNlYXJjaC1yb29tX19maWx0ZXItY29tZm9ydCAuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1ze3BhZGRpbmctYm90dG9tOjVweDtib3gtc2hhZG93OjBweCAxMHB4IDIwcHggcmdiYSgzMSwzMiw2NSwwLjA1KX0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWNvbWZvcnQgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmV7aGVpZ2h0OjM4cHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuc2VhcmNoLXJvb21fX2ZpbHRlci1jb21mb3J0IC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5e21hcmdpbjo2cHggNnB4IDAgMH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWNvbWZvcnQgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgaDN7Zm9udC1zaXplOjEyLjJweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWNvbWZvcnQgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtcyAuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUgc3Bhbntmb250LXNpemU6MTIuMnB4O21hcmdpbi10b3A6LTNweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fc2xpZGVyLXByaWNle21hcmdpbi10b3A6MjZweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWZlYXR1cmVze21hcmdpbi10b3A6MjdweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWZlYXR1cmVzIC5jaGVja2JveC1saXN0e21hcmdpbi10b3A6MTZweH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJzIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWZlYXR1cmVzIC5jaGVja2JveC1saXN0IC5jaGVja2JveC1saXN0X19sYWJlbHtsaW5lLWhlaWdodDoyMC41cHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuc2VhcmNoLXJvb21fX2ZpbHRlci1hdmFpbGFiaWxpdHl7bWFyZ2luLXRvcDoxOHB4fS5zZWFyY2gtcm9vbSAuc2VhcmNoLXJvb21fX2ZpbHRlcnMgLnNlYXJjaC1yb29tX19zbGlkZXItcHJpY2UgcHtjb2xvcjpyZ2JhKDMxLDMyLDY1LDAuNSk7Zm9udC1zaXplOjEycHg7bWFyZ2luOjB9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIGgze2ZvbnQtc2l6ZToxMi4ycHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fZmlsdGVycyAuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlIGltZ3tyaWdodDoxN3B4fS5zZWFyY2gtcm9vbSAuc2VhcmNoLXJvb21fX2ZpbHRlcnMgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZSAuY2hlY2tib3gtbGlzdHttYXJnaW4tdG9wOjE4cHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fcm9vbXN7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3BhZGRpbmctYm90dG9tOjYwcHg7d2lkdGg6MTAwJX0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19yb29tcyBoMXt3aWR0aDoxMDAlO21hcmdpbjoyOXB4IDAgMTBweCA1cHg7Zm9udC1zaXplOjI1cHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fcm9vbXMgLnBhZ2luYXRpb257bWFyZ2luOjIycHggMCAxMHB4IDA7cGFkZGluZy1yaWdodDo5cHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fcm9vbXMgLnBhZ2luYXRpb24gLnBhZ2luYXRpb25fX251bS1ibG9ja3ttYXJnaW46MTBweCAwIDdweH1AbWVkaWEgKG1heC13aWR0aDogMTE3MHB4KXsuc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJze21hcmdpbi1sZWZ0OjIwcHh9LnNlYXJjaC1yb29tIC5zZWFyY2gtcm9vbV9fcm9vbXN7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZH0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19yb29tcyBoMXt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjAgMTVweH19QG1lZGlhIChtYXgtd2lkdGg6IDY4MHB4KXsuc2VhcmNoLXJvb217ZmxleC13cmFwOndyYXA7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc2VhcmNoLXJvb20gLnNlYXJjaC1yb29tX19maWx0ZXJze21hcmdpbjowfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcGFnZXMvc2VhcmNoLXJvb20vc2VhcmNoLXJvb20uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUNFLGVBQWdCLENBQ2hCLFlBQWEsQ0FDYiw2QkFBOEIsQ0FFOUIsb0JBQXFCLENBTHZCLG1DQVFJLFdBQVksQ0FDWixZQUFhLENBQ2IscUJBQXNCLENBQ3RCLGFBQWMsQ0FDZCxpQkFBa0IsQ0FadEIsc0NBZU0sZ0JBQWlCLENBZnZCLG1EQW1CTSxVQUFXLENBbkJqQiw2RUFzQlEsVUFBVyxDQXRCbkIsOExBNkJNLGVBQWdCLENBN0J0Qiw4REFpQ00sZUFBZ0IsQ0FqQ3RCLGdFQXFDTSxlQUFnQixDQXJDdEIsZ0dBd0NRLGtCQUFtQixDQUNuQiw0Q0FBZ0QsQ0F6Q3hELDRIQTRDVSxXQUFZLENBNUN0Qix1SkErQ1ksa0JBQW1CLENBL0MvQiwrSEFtRFksZ0JBQWlCLENBbkQ3QixpSUF1RFksZ0JBQWlCLENBQ2pCLGVBQWdCLENBeEQ1Qiw4REErRE0sZUFBZ0IsQ0EvRHRCLGlFQW1FTSxlQUFnQixDQW5FdEIsZ0ZBc0VRLGVBQWdCLENBdEV4QixzR0F5RVUsa0JBQW1CLENBekU3QixxRUErRU0sZUFBZ0IsQ0EvRXRCLGdFQXFGUSx3QkFBNEIsQ0FDNUIsY0FBZSxDQUNmLFFBQVMsQ0F2RmpCLGdFQThGUSxnQkFBaUIsQ0E5RnpCLGlFQWtHUSxVQUFXLENBbEduQiw0RUFzR1EsZUFBZ0IsQ0F0R3hCLGlDQTRHSSxZQUFhLENBQ2IsY0FBZSxDQUNmLDZCQUE4QixDQUM5QixtQkFBb0IsQ0FDcEIsVUFBVyxDQWhIZixvQ0FtSE0sVUFBVyxDQUNYLHNCQUF1QixDQUN2QixjQUFlLENBckhyQiw2Q0F5SE0sb0JBQXFCLENBQ3JCLGlCQUFrQixDQTFIeEIsb0VBNkhRLGlCQUFrQixDQUNuQiwyQkFNTCxtQ0FHSSxnQkFBaUIsQ0FIckIsaUNBT0ksNEJBQTZCLENBUGpDLG9DQVVNLGlCQUFrQixDQUNsQixjQUFlLENBQ2hCLENBS1AsMEJBQ0UsYUFFRSxjQUFlLENBQ2Ysc0JBQXVCLENBSHpCLG1DQU1JLFFBQVMsQ0FDVlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc2VhcmNoLXJvb217XFxyXFxuICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG5cXHJcXG4gIG1hcmdpbjogMCA5LjYlIDAgOS43JTtcXHJcXG5cXHJcXG4gIC5zZWFyY2gtcm9vbV9fZmlsdGVyc3tcXHJcXG4gICAgd2lkdGg6IDI2NnB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBmbGV4LXNocmluazogMDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiA0LjYlO1xcclxcblxcclxcbiAgICBoM3tcXHJcXG4gICAgICBmb250LXNpemU6IDEyLjRweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZHJvcGRvd24tYmxvY2t7XFxyXFxuICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuXFxyXFxuICAgICAgLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bntcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcdFxcclxcblxcclxcbiAgICAuc2VhcmNoLXJvb21fX2ZpbHRlci1kYXRlLFxcclxcbiAgICAuc2VhcmNoLXJvb21fX2ZpbHRlcnNfYWRkaXRpb25hbCxcXHJcXG4gICAgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZXtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAzMHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWd1ZXN0e1xcclxcbiAgICAgIG1hcmdpbi10b3A6IDIwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNlYXJjaC1yb29tX19maWx0ZXItY29tZm9ydHtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAyMHB4O1xcclxcblxcclxcbiAgICAgIC5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXN7XFxyXFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDEwcHggMjBweCByZ2JhKDMxLCAzMiwgNjUsIDAuMDUpO1xcclxcblxcclxcbiAgICAgICAgLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5le1xcclxcbiAgICAgICAgICBoZWlnaHQ6IDM4cHg7XFxyXFxuXFxyXFxuICAgICAgICAgIC5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5e1xcclxcbiAgICAgICAgICAgIG1hcmdpbjogNnB4IDZweCAwIDA7XFxyXFxuICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgaDN7XFxyXFxuICAgICAgICAgICAgZm9udC1zaXplOiAxMi4ycHg7XFxyXFxuICAgICAgICAgIH1cXHJcXG5cXHJcXG4gICAgICAgICAgc3BhbntcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDEyLjJweDtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAtM3B4O1xcclxcbiAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zZWFyY2gtcm9vbV9fc2xpZGVyLXByaWNle1xcclxcbiAgICAgIG1hcmdpbi10b3A6IDI2cHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNlYXJjaC1yb29tX19maWx0ZXItZmVhdHVyZXN7XFxyXFxuICAgICAgbWFyZ2luLXRvcDogMjdweDtcXHJcXG4gICAgICBcXHJcXG4gICAgICAuY2hlY2tib3gtbGlzdHtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDE2cHg7XFxyXFxuXFxyXFxuICAgICAgICAuY2hlY2tib3gtbGlzdF9fbGFiZWx7XFxyXFxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMC41cHg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zZWFyY2gtcm9vbV9fZmlsdGVyLWF2YWlsYWJpbGl0eXtcXHJcXG4gICAgICBtYXJnaW4tdG9wOiAxOHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zZWFyY2gtcm9vbV9fc2xpZGVyLXByaWNle1xcclxcblxcclxcbiAgICAgIHB7XFxyXFxuICAgICAgICBjb2xvcjogcmdiYSgzMSwgMzIsIDY1LCAwLjUpO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICAgICAgbWFyZ2luOiAwO1xcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICBcXHJcXG4gICAgLmNoZWNrYm94LWxpc3QtZXhwYW5kYWJsZXtcXHJcXG5cXHJcXG4gICAgICBoM3tcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMTIuMnB4O1xcclxcbiAgICAgIH1cXHJcXG5cXHJcXG4gICAgICBpbWd7XFxyXFxuICAgICAgICByaWdodDogMTdweDtcXHJcXG4gICAgICB9XFxyXFxuXFxyXFxuICAgICAgLmNoZWNrYm94LWxpc3Qge1xcclxcbiAgICAgICAgbWFyZ2luLXRvcDogMThweDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG5cXHJcXG4gIC5zZWFyY2gtcm9vbV9fcm9vbXN7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogNjBweDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuXFxyXFxuICAgIGgxe1xcclxcbiAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgIG1hcmdpbjogMjlweCAwIDEwcHggNXB4O1xcclxcbiAgICAgIGZvbnQtc2l6ZTogMjVweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAucGFnaW5hdGlvbntcXHJcXG4gICAgICBtYXJnaW46IDIycHggMCAxMHB4IDA7XFxyXFxuICAgICAgcGFkZGluZy1yaWdodDogOXB4O1xcclxcblxcclxcbiAgICAgIC5wYWdpbmF0aW9uX19udW0tYmxvY2t7XFxyXFxuICAgICAgICBtYXJnaW46IDEwcHggMCA3cHg7XFxyXFxuICAgICAgfVxcclxcbiAgICB9XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTcwcHgpe1xcclxcbiAgLnNlYXJjaC1yb29te1xcclxcblxcclxcbiAgICAuc2VhcmNoLXJvb21fX2ZpbHRlcnN7XFxyXFxuICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNlYXJjaC1yb29tX19yb29tc3tcXHJcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG5cXHJcXG4gICAgICBoMXtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDAgMTVweDtcXHJcXG4gICAgICB9XFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtYXgtd2lkdGg6IDY4MHB4KXtcXHJcXG4gIC5zZWFyY2gtcm9vbXtcXHJcXG5cXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgXFxyXFxuICAgIC5zZWFyY2gtcm9vbV9fZmlsdGVyc3tcXHJcXG4gICAgICBtYXJnaW46IDA7XFxyXFxuICAgIH1cXHJcXG4gIH1cXHRcXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi9tb250c2VycmF0LXJlZ3VsYXIvbW9udHNlcnJhdC1yZWd1bGFyLndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1yZWd1bGFyL21vbnRzZXJyYXQtcmVndWxhci53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gZnJvbSBcIi4vbW9udHNlcnJhdC1yZWd1bGFyL21vbnRzZXJyYXQtcmVndWxhci50dGZcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qTW9udHNlcnJhdCovXFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiBsb2NhbCgnTW9udHNlcnJhdCBSZWd1bGFyJyksIGxvY2FsKCdNb250c2VycmF0LVJlZ3VsYXInKSxcXHJcXG4gIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLCBcXHJcXG4gIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIikgZm9ybWF0KCd3b2ZmJyksIFxcclxcbiAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogMTAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1zaXplOiAxMy43cHg7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9mb250L2ZvbnRzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxhQUFhOztBQUViO0VBQ0UseUJBQXlCO0VBQ3pCOzs7NERBRzBFO0VBQzFFLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qTW9udHNlcnJhdCovXFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnO1xcclxcbiAgc3JjOiBsb2NhbCgnTW9udHNlcnJhdCBSZWd1bGFyJyksIGxvY2FsKCdNb250c2VycmF0LVJlZ3VsYXInKSxcXHJcXG4gIHVybCgnQC9mb250L21vbnRzZXJyYXQtcmVndWxhci9tb250c2VycmF0LXJlZ3VsYXIud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksIFxcclxcbiAgdXJsKCdAL2ZvbnQvbW9udHNlcnJhdC1yZWd1bGFyL21vbnRzZXJyYXQtcmVndWxhci53b2ZmJykgZm9ybWF0KCd3b2ZmJyksIFxcclxcbiAgdXJsKCdAL2ZvbnQvbW9udHNlcnJhdC1yZWd1bGFyL21vbnRzZXJyYXQtcmVndWxhci50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxyXFxuICBmb250LXdlaWdodDogMTAwO1xcclxcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcclxcbiAgZm9udC1zaXplOiAxMy43cHg7XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDAwZmRlNTM0YjlhNzYyODQ1NDM3NDY1ZTE1NDVhMjQuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhmMmZkZmRkNjJiYzg0MDMyZGQ2ZmEwNWRiZmFjNmU5LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0Nzg3OGYyMDM3MjBiMzY1ZGIyYTdiMzg4ZDA5ZWE3Yi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmQ2MDMyNjU4YzliOWEzM2M1MDllZWFkMDBhNTQ4MTIucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFjMWY1NTAxZTc0Mjg3ZmMxZDBlZmI5MDUwYTQyZjQ5LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzYTdhMjQxOTE1NDdkZTg4YTkwMjY5MmVjNWI1OGIxZS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmRmMzJiOTYxNzJlMjEwMjc5NjA2NGNhYWYwZTc0NWYucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImQ3ZWRiMTNhZjc1OWY0ZDc0ZDNlZWFhYzRiMGY5NTM2LnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIxNzQ5ZTVlMWIxMDQ0MWY1MTk5YmJiZjE1ZDE2ZWVmNS5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGU3MWZmNTg0YzE5OWRhMTBlOTcyMTQ5MjE3YWE1NjMucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImExNjA0NmMyYzlkMDJiMmNjY2Y0MWMyY2U3ZmY2YTgzLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI1MGY2YmVjMDE2YjYxMzc4NjI4Y2FkNGQ1ODAwY2IzZC5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTZjNGZkMThmNjU5ZTFmOTgyOTA0OTg3NTQyOTljMTUucG5nXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjRlMTE4M2ZiODFlMWEwMWQwYzYyNDUxMjA1ZDY3ZmNjLnBuZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhZmMyODRkM2M5MjA5Mjg3NmNkYTA0MjJmODZhZDM3Zi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYWZjMjg0ZDNjOTIwOTI4NzZjZGEwNDIyZjg2YWQzN2Yuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhmMmZkZmRkNjJiYzg0MDMyZGQ2ZmEwNWRiZmFjNmU5LnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkMDBmZGU1MzRiOWE3NjI4NDU0Mzc0NjVlMTU0NWEyNC5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmU3NGRhNzA1ZTU3ZDEwNDY5OTYzMTJkZDUyMDg1MDcuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImJhMjk1YWQ0NTk0MTdkNWYxNTdlYTZhZWI2ODlmNzRhLnN2Z1wiOyIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My42LjBcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMS0wMy0wMlQxNzowOFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcblx0XHQvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcblx0XHQvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuXHRcdC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cblx0XHQvLyBTdXBwb3J0OiBRdFdlYiA8PTMuOC41LCBXZWJLaXQgPD01MzQuMzQsIHdraHRtbHRvcGRmIHRvb2wgPD0wLjEyLjVcblx0XHQvLyBQbHVzIGZvciBvbGQgV2ViS2l0LCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgY29sbGVjdGlvbnNcblx0XHQvLyAoZS5nLiwgYHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKSA9PT0gXCJmdW5jdGlvblwiYCkuIChnaC00NzU2KVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0dHlwZW9mIG9iai5pdGVtICE9PSBcImZ1bmN0aW9uXCI7XG5cdH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjYuMFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy42XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIxLTAyLTE2XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gZWxlbSAmJiAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cblx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn1cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHRcdFx0Ly8gSW4gQ2hyb21lLCBpZiBhbiBlbGVtZW50IGhhdmluZyBhIGZvY3Vzb3V0IGhhbmRsZXIgaXMgYmx1cnJlZCBieVxuXHRcdFx0XHRcdFx0Ly8gY2xpY2tpbmcgb3V0c2lkZSBvZiBpdCwgaXQgaW52b2tlcyB0aGUgaGFuZGxlciBzeW5jaHJvbm91c2x5LiBJZlxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBoYW5kbGVyIGNhbGxzIGAucmVtb3ZlKClgIG9uIHRoZSBlbGVtZW50LCB0aGUgZGF0YSBpcyBjbGVhcmVkLFxuXHRcdFx0XHRcdFx0Ly8gbGVhdmluZyBgcmVzdWx0YCB1bmRlZmluZWQuIFdlIG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCB0aGlzLlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAmJiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGFzIGl0J3MgYWxyZWFkeSBiZWluZyBmaXJlZFxuXHRcdC8vIGluIGxldmVyYWdlTmF0aXZlLlxuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5vcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYnRuLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jYXJkLXJvb20uc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2hlY2tib3gtbGlzdC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZHJvcGRvd24uc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Zvb3Rlci5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaGVhZGVyLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dC10ZXh0LnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9saW5rLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wYWdpbmF0aW9uLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yYW5nZS1zbGlkZXIuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3JhdGUtYnRuLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90b3BpYy1sYWJlbC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NlYXJjaC1yb29tLnNjc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnRzLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiJChmdW5jdGlvbigpIHtcclxuICBsZXQga29sID0gJCgnLmNhcmQtcm9vbSAuY2FyZC1yb29tX19pbWFnZScpLmxlbmd0aDtcclxuICBmb3IobGV0IGkgPSAxOyBpIDw9IGtvbDsgaSsrKXtcclxuICAgICQoJy5jYXJkLXJvb20nKS5maW5kKCcjJytpKycuY2FyZC1yb29tX19pbWFnZScpLmFkZENsYXNzKCdpbWFnZXMnK2kpO1xyXG4gIH1cclxufSk7IiwiJChmdW5jdGlvbigpIHtcclxuICAkKCcuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX190b3BpY0Jsb2NrJykub24oJ2NsaWNrJywgaGFuZGxlQ2hlY2tib3hsaXN0Q2xpY2spO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVDaGVja2JveGxpc3RDbGljaygpe1xyXG4gICAgdmFyIGJsb2NrX2xpc3QgPSAkKHRoaXMpLmNsb3Nlc3QoJy5jaGVja2JveC1saXN0LWV4cGFuZGFibGUnKS5maW5kKCcuY2hlY2tib3gtbGlzdCcpLFxyXG4gICAgICBleHBlbmQgPSAkKHRoaXMpLmNsb3Nlc3QoJy5jaGVja2JveC1saXN0LWV4cGFuZGFibGUnKS5maW5kKCcuY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX19leHBhbmQnKTtcclxuICAgIFxyXG4gICAgaWYgKGJsb2NrX2xpc3QuaGFzQ2xhc3MoJ2NoZWNrYm94LWxpc3RfaGlkZScpKXtcclxuICAgICAgYmxvY2tfbGlzdC5yZW1vdmVDbGFzcygnY2hlY2tib3gtbGlzdF9oaWRlJyk7XHJcbiAgICAgIGV4cGVuZC5hZGRDbGFzcygnY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlX19leHBhbmRfb3BlbicpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgIGJsb2NrX2xpc3QuYWRkQ2xhc3MoJ2NoZWNrYm94LWxpc3RfaGlkZScpO1xyXG4gICAgICBleHBlbmQucmVtb3ZlQ2xhc3MoJ2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZV9fZXhwYW5kX29wZW4nKTtcclxuICAgIH1cclxuICB9XHJcbn0pOyIsImltcG9ydCAqIGFzICQgZnJvbSBcImpxdWVyeVwiXHJcblxyXG4kKGZ1bmN0aW9uKCkge1xyXG4gICQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKS5vbignY2xpY2snLCBoYW5kbGVEcm9wd293bkNsaWNrKTtcclxuXHJcbiAgJCgnLmRyb3Bkb3duLWJsb2NrX19pbmMtcXR5LW1pbnVzJykub24oJ2NsaWNrJywgaGFuZGxlRHJvcGRvd25NaW51c0NsaWNrKTtcclxuICAkKCcuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktcGx1cycpLm9uKCdjbGljaycsIGhhbmRsZURyb3Bkb3duUGx1c0NsaWNrKTtcclxuXHJcbiAgJCgnLmRyb3Bkb3duLWJsb2NrX19idG5zIC5saW5rX29rJykub24oJ2NsaWNrJywgaGFuZGxlRHJvcGRvd25Pa0NsaWNrKTtcclxuICAkKCcuZHJvcGRvd24tYmxvY2tfX2J0bnMgLmxpbmtfY2xlYW4nKS5vbignY2xpY2snLCBoYW5kbGVEcm9wZG93bkNsZWFuQ2xpY2spO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlRHJvcHdvd25DbGljaygpe1xyXG4gICAgdmFyIGJsb2NrX2xpc3QgPSAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9jaycpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24taXRlbXMnKTtcclxuXHJcbiAgICBpZiAoYmxvY2tfbGlzdC5oYXNDbGFzcygnZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zX2hpZGUnKSl7XHJcbiAgICAgIGJsb2NrX2xpc3QucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19kcm9wZG93bi1pdGVtc19oaWRlJyk7XHJcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19kcm9wZG93bl9pdGVtcy1zaG93Jyk7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgYmxvY2tfbGlzdC5hZGRDbGFzcygnZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zX2hpZGUnKTtcclxuICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duX2l0ZW1zLXNob3cnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVEcm9wZG93bk1pbnVzQ2xpY2soKXtcclxuICAgIGxldCBxdHlFbGVtIDogYW55LCBcclxuICAgICAgICBxdHkgOiBudW1iZXIgPSAwLFxyXG4gICAgICAgIG5ld1F0eSA6IG51bWJlciA9IDAsIFxyXG4gICAgICAgIG1pbiA6IG51bWJlciA9IDA7XHJcbiAgICBcclxuICAgIHF0eUVsZW0gPSAkKHRoaXMpLmNsb3Nlc3QoJy5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5JykuZmluZCgnc3BhbicpO1xyXG4gICAgcXR5ID0gcGFyc2VJbnQocXR5RWxlbS5odG1sKCkpO1xyXG5cclxuICAgIGlmIChxdHkgPiBtaW4pe1xyXG4gICAgICBuZXdRdHkgPSBxdHkgLSAxO1xyXG4gICAgICBxdHlFbGVtLmh0bWwobmV3UXR5KTsgIFxyXG4gICAgfVxyXG5cclxuICAgIGlmICggKHF0eSA9PSBtaW4rMSkgfHwgKHF0eSA9PSBtaW4pICl7XHJcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdkcm9wZG93bi1ibG9ja19faW5jLXF0eV9kaXNhYmxlJyk7XHJcbiAgICAgIGxldCBwbHVzID0gJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eScpLmZpbmQoJy5kcm9wZG93bi1ibG9ja19faW5jLXF0eS1wbHVzJyk7XHJcbiAgICAgIGlmIChwbHVzLmhhc0NsYXNzKCdkcm9wZG93bi1ibG9ja19faW5jLXF0eV9kaXNhYmxlJykpe1xyXG4gICAgICAgIHBsdXMucmVtb3ZlQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dEluRHJvcGRvd24oJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVEcm9wZG93blBsdXNDbGljaygpe1xyXG4gICAgbGV0IHF0eUVsZW0gOiBhbnksIFxyXG4gICAgICAgIHF0eSA6IG51bWJlciA9IDAsXHJcbiAgICAgICAgbmV3UXR5IDogbnVtYmVyID0gMCxcclxuICAgICAgICBtYXggOiBudW1iZXIgPSAxMDtcclxuICAgIFxyXG4gICAgcXR5RWxlbSA9ICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHknKS5maW5kKCdzcGFuJyk7XHJcbiAgICBxdHkgPSBwYXJzZUludChxdHlFbGVtLmh0bWwoKSk7XHJcblxyXG4gICAgaWYgKHF0eSA8IG1heCl7XHJcbiAgICAgIG5ld1F0eSA9IHF0eSArIDE7XHJcbiAgICAgIHF0eUVsZW0uaHRtbChuZXdRdHkpOyAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICggKHF0eSA9PSBtYXgtMSkgfHwgKHF0eSA9PSBtYXgpICl7XHJcbiAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2Ryb3Bkb3duLWJsb2NrX19pbmMtcXR5X2Rpc2FibGUnKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdkcm9wZG93bi1ibG9ja19faW5jLXF0eV9kaXNhYmxlJyk7XHJcbiAgICAgIGxldCBtaW51cyA9ICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrX19ibG9jay1xdHknKS5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMnKTtcclxuICAgICAgaWYgKG1pbnVzLmhhc0NsYXNzKCdkcm9wZG93bi1ibG9ja19faW5jLXF0eV9kaXNhYmxlJykpe1xyXG4gICAgICAgIG1pbnVzLnJlbW92ZUNsYXNzKCdkcm9wZG93bi1ibG9ja19faW5jLXF0eV9kaXNhYmxlJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdXRwdXRJbkRyb3Bkb3duKCQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrJykpO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURyb3Bkb3duT2tDbGljaygpe1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrJykuZmluZCgnLmRyb3Bkb3duLWJsb2NrX19kcm9wZG93bicpLmNsaWNrKCk7XHJcbiAgICBcclxuICAgIG91dHB1dEluRHJvcGRvd24oJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2snKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVEcm9wZG93bkNsZWFuQ2xpY2soKSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgbGV0IGl0ZW1zID0gJCh0aGlzKS5jbG9zZXN0KCcuZHJvcGRvd24tYmxvY2tfX2Ryb3Bkb3duLWl0ZW1zJyk7XHJcbiAgICBpdGVtcy5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2Jsb2NrLXF0eScpLmZpbmQoJ3NwYW4nKS5odG1sKCcwJyk7XHJcbiAgICBpdGVtcy5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2luYy1xdHktbWludXMnKS5hZGRDbGFzcygnZHJvcGRvd24tYmxvY2tfX2luYy1xdHlfZGlzYWJsZScpO1xyXG4gICAgXHJcbiAgICBvdXRwdXRJbkRyb3Bkb3duKCQodGhpcykuY2xvc2VzdCgnLmRyb3Bkb3duLWJsb2NrJykpO1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIG91dHB1dEluRHJvcGRvd24oZHJvcGRvd24gOiBhbnkpIHtcclxuICAgIGxldCBzdHIgOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBpZiAoZHJvcGRvd24uYXR0cignbmFtZScpID09ICdndWVzdHMnKXtcclxuICAgICAgc3RyID0gY291bnRRdHlHdWVzdHMoZHJvcGRvd24pO1xyXG4gICAgfVxyXG4gICAgaWYgKGRyb3Bkb3duLmF0dHIoJ25hbWUnKSA9PSAncm9vbScpe1xyXG4gICAgICBzdHIgPSBjb3VudFF0eUNvbWZvcnRSb29tKGRyb3Bkb3duKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RyLmxlbmd0aCA+IDE5KXtcclxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAyMCkgKyAnLi4uJztcclxuICAgIH1cclxuICAgIGRyb3Bkb3duLmZpbmQoJy5kcm9wZG93bi1ibG9ja19fZHJvcGRvd24nKS5odG1sKHN0cik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb3VudFF0eUd1ZXN0cyhkcm9wZG93biA6IGFueSkgOiBzdHJpbmcge1xyXG4gICAgbGV0IGxpbmVzID0gZHJvcGRvd24uZmluZCgnLmRyb3Bkb3duLWJsb2NrX19pdGVtcy1saW5lJyksXHJcbiAgICAgICAgc3RyIDogc3RyaW5nID0gJycsXHJcbiAgICAgICAgc3VtR3Vlc3RzIDogbnVtYmVyID0gMCxcclxuICAgICAgICBzdW1CYWJ5IDogbnVtYmVyID0gMCxcclxuICAgICAgICBxdHkgOiBIVE1MRWxlbWVudCxcclxuICAgICAgICBpdGVtIDogSFRNTEVsZW1lbnQ7XHJcbiAgICBcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgIHF0eSA9IGxpbmVzW2ldLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5IHNwYW4nKTtcclxuICAgICAgaXRlbSA9IGxpbmVzW2ldLnF1ZXJ5U2VsZWN0b3IoJ2gzJyk7XHJcbiAgICAgIGlmICgocGFyc2VJbnQocXR5LmlubmVySFRNTCkgPiAwKSAmJiAoaXRlbS5pbm5lckhUTUwgIT0gJ9C80LvQsNC00LXQvdGG0YsnKSl7XHJcbiAgICAgICAgc3VtR3Vlc3RzID0gc3VtR3Vlc3RzICsgcGFyc2VJbnQocXR5LmlubmVySFRNTCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKChwYXJzZUludChxdHkuaW5uZXJIVE1MKSA+IDApICYmIChpdGVtLmlubmVySFRNTCA9PSAn0LzQu9Cw0LTQtdC90YbRiycpKXtcclxuICAgICAgICBzdW1CYWJ5ID0gc3VtQmFieSArIHBhcnNlSW50KHF0eS5pbm5lckhUTUwpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHN1bUd1ZXN0cyA9PSAwKXtcclxuICAgICAgc3RyID0gJ9Ch0LrQvtC70YzQutC+INCz0L7RgdGC0LXQuSc7XHJcbiAgICB9XHJcbiAgICBpZiAoKHN1bUd1ZXN0cyAhPSAwKSAmJiAoc3VtQmFieSAhPSAwKSl7XHJcbiAgICAgIHN0ciA9IHN1bUd1ZXN0cyArICcg0LPQvtGB0YLRjywgJyArIHN1bUJhYnkgKyAnINC80LvQsNC00LXQvdC10YYnO1xyXG4gICAgfVxyXG4gICAgaWYgKChzdW1HdWVzdHMgIT0gMCkgJiYgKHN1bUJhYnkgPT0gMCkpe1xyXG4gICAgICBzdHIgPSBzdW1HdWVzdHMgKyAnINCz0L7RgdGC0Y8nO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb3VudFF0eUNvbWZvcnRSb29tKGRyb3Bkb3duIDogYW55KSA6IHN0cmluZyB7XHJcbiAgICBsZXQgbGluZXMgPSBkcm9wZG93bi5maW5kKCcuZHJvcGRvd24tYmxvY2tfX2l0ZW1zLWxpbmUnKSxcclxuICAgICAgICBzdHIgOiBzdHJpbmcgPSAnJyxcclxuICAgICAgICBxdHkgOiBIVE1MRWxlbWVudCxcclxuICAgICAgICBpdGVtIDogSFRNTEVsZW1lbnQ7XHJcbiAgICBcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgIHF0eSA9IGxpbmVzW2ldLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wZG93bi1ibG9ja19fYmxvY2stcXR5IHNwYW4nKTtcclxuICAgICAgaXRlbSA9IGxpbmVzW2ldLnF1ZXJ5U2VsZWN0b3IoJ2gzJyk7XHJcbiAgICAgIGlmIChwYXJzZUludChxdHkuaW5uZXJIVE1MKSA+IDApe1xyXG4gICAgICAgIHN0ciA9IHN0ciArIHF0eS5pbm5lckhUTUwgKyAnICcgKyBpdGVtLmlubmVySFRNTCArICcsICc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdHIgPSBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGgtMik7XHJcbiAgICBpZiAoc3RyID09ICcnKXtcclxuICAgICAgc3RyID0gJ9CS0YvQsdC10YDQuNGC0LUg0YPQtNC+0LHRgdGC0LLQsCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0cjtcclxuICB9XHJcbiAgXHJcbn0pOyIsIiQoZnVuY3Rpb24oKSB7XHJcbiAgJCgnLnJhdGUtYnRuX19zdGFyJykub24oJ2NsaWNrJywgaGFuZGxlUmF0ZWJ0bkNsaWNrKVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVSYXRlYnRuQ2xpY2soKXtcclxuICAgICQodGhpcykuY2xvc2VzdCgnLnJhdGUtYnRuJykuZmluZCgnLnJhdGUtYnRuX19zdGFyJykucmVtb3ZlQ2xhc3MoJ3JhdGUtYnRuX19zdGFyX2FjdGl2ZScpO1xyXG5cclxuICAgIHZhciBudW0gPSBwYXJzZUludCgkKHRoaXMpLmF0dHIoJ2lkJykpO1xyXG5cclxuICAgIGZvcihsZXQgaT0xO2k8PW51bTtpKyspe1xyXG4gICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5yYXRlLWJ0bicpLmZpbmQoJyMnK2kpLmFkZENsYXNzKCdyYXRlLWJ0bl9fc3Rhcl9hY3RpdmUnKTtcclxuICAgIH1cclxuICB9XHJcbn0pOyIsImltcG9ydCAkIGZyb20gXCJqcXVlcnlcIlxyXG5pbXBvcnQge09wdGlvbnN9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyJztcclxuXHJcbmludGVyZmFjZSBDb29yZHMge1xyXG4gIHRvcCA6IG51bWJlcixcclxuICBsZWZ0IDogbnVtYmVyXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIHtcclxuICBtb2RlbCA6IGFueTtcclxuICB2aWV3IDogYW55O1xyXG4gIHRoaXNTbGlkZXIgOiBhbnk7XHJcbiAgaWRFbGVtZW50IDogc3RyaW5nO1xyXG4gIG1pbjogbnVtYmVyO1xyXG4gIG1heCA6IG51bWJlcjtcclxuICBtaW5TdGFydDogbnVtYmVyO1xyXG4gIG1heFN0YXJ0IDogbnVtYmVyO1xyXG4gIHN0ZXAgOiBudW1iZXI7XHJcbiAgdHlwZSA6IHN0cmluZztcclxuICBvcmllbnRhdGlvbiA6IHN0cmluZztcclxuICBzY2FsZSA6IHN0cmluZztcclxuICBzY2FsZVN0ZXAgOiBudW1iZXI7XHJcbiAgdmFsdWUgOiBzdHJpbmc7XHJcbiAgc2V0dGluZ3MgOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbiA6IE9wdGlvbnMsIG1vZGVsIDogYW55LCB2aWV3IDogYW55KXtcclxuICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIgPSBvcHRpb24uZWxlbWVudDtcclxuICAgIHRoaXMuaWRFbGVtZW50ID0gb3B0aW9uLmlkRWxlbWVudDtcclxuICAgIHRoaXMubWluID0gb3B0aW9uLm1pbjtcclxuICAgIHRoaXMubWF4ID0gb3B0aW9uLm1heDtcclxuICAgIHRoaXMubWluU3RhcnQgPSBvcHRpb24ubWluU3RhcnQ7XHJcbiAgICB0aGlzLm1heFN0YXJ0ID0gb3B0aW9uLm1heFN0YXJ0O1xyXG4gICAgdGhpcy5zdGVwID0gb3B0aW9uLnN0ZXA7XHJcbiAgICB0aGlzLnR5cGUgPSBvcHRpb24udHlwZTtcclxuICAgIHRoaXMub3JpZW50YXRpb24gPSBvcHRpb24ub3JpZW50YXRpb247XHJcbiAgICB0aGlzLnNjYWxlID0gb3B0aW9uLnNjYWxlO1xyXG4gICAgdGhpcy5zY2FsZVN0ZXAgPSBvcHRpb24uc2NhbGVTdGVwO1xyXG4gICAgdGhpcy52YWx1ZSA9IG9wdGlvbi52YWx1ZTtcclxuICAgIHRoaXMuc2V0dGluZ3MgPSBvcHRpb24uc2V0dGluZ3M7XHJcbiAgfVxyXG5cclxuXHJcbiAgZGVmaW5lT3JpZW50YXRpb24oZGF0YVNsaWRlck9yaWVudGF0aW9uIDogc3RyaW5nKSA6IHN0cmluZ3tcclxuICAgIGlmIChkYXRhU2xpZGVyT3JpZW50YXRpb24gPT0gJ2hvcml6b250YWwnKSB7XHJcbiAgICAgIHJldHVybiAneCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJ3knO1xyXG4gIH1cclxuICBcclxuICBtb3ZlQXQocmFuZ2UgOiBhbnksIGUgOiBhbnksIHNpZGUgOiBzdHJpbmcpIDogdm9pZHtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnbW92aW5nLXNsaWRlcicpO1xyXG5cclxuICAgIGxldCBzdGFydFBvcyA6IG51bWJlciA9IHBhcnNlSW50KHJhbmdlLnN0eWxlLmxlZnQpLFxyXG4gICAgICB3aWR0aFJhbmdlIDogbnVtYmVyID0gdGhpcy5tb2RlbC5nZXRXaWR0aFJhbmdlKCk7XHJcbiAgICBzd2l0Y2goc2lkZSl7Ly/Rh9GC0L7QsdGLINGB0LLQtdGA0YXRgyDQsdGL0Lsg0L/QvtC70LfRg9C90L7Quiwg0LrQvtGC0L7RgNGL0Lkg0L/QtdGA0LXQvNC10YnQsNC70Lgg0L/QvtGB0LvQtdC00L3QuNC8ICjQtdGB0LvQuCDQtNGA0YPQsyDQvdCwINC00YDRg9Cz0LAg0L3QsNC10LTRg9GCKVxyXG4gICAgICBjYXNlICdsZWZ0JyA6IHtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS56aW5kZXggPSAxNTtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlUmlnaHQuc3R5bGUuemluZGV4ID0gMTA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAncmlnaHQnIDoge1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2VSaWdodC5zdHlsZS56aW5kZXggPSAxNTtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS56aW5kZXggPSAxMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCB0aGlzQ2xpY2sgOiBhbnkgPSB0aGlzLnRoaXNTbGlkZXIsIGNvbnRyID0gdGhpcztcclxuICAgIHRoaXNDbGljay5vbm1vdXNlbW92ZSA9IGZ1bmN0aW9uKGUgOiBhbnkpIHtcclxuICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBmdW5jdGlvbihlIDogYW55KSB7XHJcbiAgICAgICAgbGV0IHBvcyA6IG51bWJlcixcclxuICAgICAgICAgIHRlbXBQb3MgOiBudW1iZXIsXHJcbiAgICAgICAgICBtYXNTY2FsZSA6IG51bWJlcltdO1xyXG4gICAgICAgIHN3aXRjaChjb250ci5kZWZpbmVPcmllbnRhdGlvbihjb250ci5vcmllbnRhdGlvbikpIHtcclxuICAgICAgICAgIGNhc2UgJ3gnOiB7XHJcbiAgICAgICAgICAgIGlmIChjb250ci5zdGVwID09IDEpe1xyXG4gICAgICAgICAgICAgIHBvcyA9IGUucGFnZVggLSBwYXJzZUludChjb250ci5tb2RlbC5zbGlkZXIub2Zmc2V0TGVmdCk7XHJcbiAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2Uoc2lkZSwgc3RhcnRQb3MsIHBvcywgd2lkdGhSYW5nZSk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgIG1hc1NjYWxlID0gY29udHIubWFzU3RlcHNGb3JNb3ZpbmcoKTtcclxuICAgICAgICAgICAgICB0ZW1wUG9zID0gZS5wYWdlWCAtIHBhcnNlSW50KGNvbnRyLm1vZGVsLnNsaWRlci5vZmZzZXRMZWZ0KTtcclxuICAgICAgICAgICAgICBpZiAobWFzU2NhbGUuaW5kZXhPZih0ZW1wUG9zKSAhPSAtMSl7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSB0ZW1wUG9zO1xyXG4gICAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2Uoc2lkZSwgc3RhcnRQb3MsIHBvcywgd2lkdGhSYW5nZSk7XHJcbiAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSBzdGFydFBvcztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlICd5Jzoge1xyXG4gICAgICAgICAgICBsZXQgY29vcmRzIDogQ29vcmRzID0gY29udHIuZ2V0Q29vcmRzKGNvbnRyLm1vZGVsLnNsaWRlcik7XHJcbiAgICAgICAgICAgIGlmIChjb250ci5zdGVwID09IDEpe1xyXG4gICAgICAgICAgICAgIHBvcyA9IGUucGFnZVkgLSBjb29yZHMudG9wO1xyXG4gICAgICAgICAgICAgIGNvbnRyLm1vdmluZ1JhbmdlKHNpZGUsIHN0YXJ0UG9zLCBwb3MsIHdpZHRoUmFuZ2UpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICBtYXNTY2FsZSA9IGNvbnRyLm1hc1N0ZXBzRm9yTW92aW5nKCk7XHJcbiAgICAgICAgICAgICAgdGVtcFBvcyA9IGUucGFnZVkgLSBjb29yZHMudG9wO1xyXG4gICAgICAgICAgICAgIGlmIChtYXNTY2FsZS5pbmRleE9mKHRlbXBQb3MpICE9IC0xKXtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHRlbXBQb3M7XHJcbiAgICAgICAgICAgICAgICBjb250ci5tb3ZpbmdSYW5nZShzaWRlLCBzdGFydFBvcywgcG9zLCB3aWR0aFJhbmdlKTtcclxuICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIHBvcyA9IHN0YXJ0UG9zO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGRlZmF1bHQgOiBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZG9jdW1lbnQub25tb3VzZXVwID0gZnVuY3Rpb24oZSA6IGFueSkge1xyXG4gICAgICB0aGlzQ2xpY2sub25tb3VzZW1vdmUgPSBudWxsO1xyXG4gICAgICB0aGlzQ2xpY2sub25tb3VzZXVwID0gbnVsbDtcclxuICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBudWxsO1xyXG4gICAgICBkb2N1bWVudC5vbm1vdXNldXAgPSBudWxsO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ21vdmluZy1zbGlkZXInKTtcclxuICAgIH07XHJcbiAgfVxyXG4gIGdldENvb3JkcyhlbGVtIDogSFRNTEVsZW1lbnQpIDogQ29vcmRzIHsgLy8gaHR0cHM6Ly9sZWFybi5qYXZhc2NyaXB0LnJ1L2Nvb3JkaW5hdGVzLWRvY3VtZW50XHJcbiAgICBsZXQgYm94IDogQ29vcmRzID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvcDogYm94LnRvcCArIHBhZ2VZT2Zmc2V0LFxyXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHBhZ2VYT2Zmc2V0XHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuICBtb3ZpbmdSYW5nZShzaWRlIDogc3RyaW5nLCBzdGFydFBvcyA6IG51bWJlciwgcG9zIDogbnVtYmVyLCB3aWR0aFJhbmdlIDogbnVtYmVyKSA6IHZvaWR7XHJcbiAgICBsZXQgcHJpY2UgOiBudW1iZXIsXHJcbiAgICAgIHN0ZXA6IG51bWJlciA9IDA7XHJcbiAgICBpZiAocG9zIDwgMCl7XHJcbiAgICAgIHBvcyA9IDA7XHJcbiAgICB9XHJcbiAgICBpZiAocG9zID4gdGhpcy5tb2RlbC5nZXRXaWR0aCgpKXtcclxuICAgICAgcG9zID0gdGhpcy5tb2RlbC5nZXRXaWR0aCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKChwb3MgPj0gMCkgJiYgKHBvcyA8PSB0aGlzLm1vZGVsLmdldFdpZHRoKCkpKXtcclxuICAgICAgaWYgKHNpZGUgPT0gJ2xlZnQnKXtcdFxyXG4gICAgICAgIGlmICgodGhpcy5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCkgPj0gcG9zKSYmKHRoaXMudHlwZSAhPSAnZnJvbTB0bycpKXtcclxuICAgICAgICAgIHN0ZXAgPSBzdGFydFBvcyAtIHBvczsvL9C00LvQuNC90LAg0L/QtdGA0LXQvNC10YnQtdC90LjRjyDQu9C10LLQvtCz0L4g0YPQutCw0LfQsNGC0LXQu9GPXHRcclxuICAgICAgICAgIHByaWNlID0gY2FsY1ZhbHVlKHBvcywgdGhpcyk7XHJcbiAgICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS5sZWZ0ID0gcG9zKydweCc7Ly/Qv9C+0LfQuNGG0LjRjyDRg9C60LDQt9Cw0YLQtdC70LXQuVxyXG4gICAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcrcG9zKydweCwgMHB4KSc7XHJcbiAgICAgICAgICBzdGFydFBvcyA9IHBvcztcclxuICAgICAgICAgIHRoaXMuZHJhd1ZhbHVlTWluKHByaWNlKTtcclxuICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzID09ICdvbicpe1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUNvbmZpZ0lucHV0TWluKHByaWNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMud3JpdGVEYXRhU2xpZGVyTWluKHByaWNlKTtcclxuICAgICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUud2lkdGggPSB3aWR0aFJhbmdlICsgc3RlcCArJ3B4JztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzaWRlID09ICdyaWdodCcpe1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpIDw9IHBvcyl7XHJcbiAgICAgICAgICBzdGVwID0gcG9zIC0gc3RhcnRQb3M7Ly/QtNC70LjQvdCwINC/0LXRgNC10LzQtdGJ0LXQvdC40Y8g0L/RgNCw0LLQvtCz0L4g0YPQutCw0LfQsNGC0LXQu9GPXHJcbiAgICAgICAgICBwcmljZSA9IGNhbGNWYWx1ZShwb3MsIHRoaXMpO1xyXG4gICAgICAgICAgdGhpcy5tb2RlbC5yYW5nZVJpZ2h0LnN0eWxlLmxlZnQgPSBwb3MrJ3B4JzsvL9C/0L7Qt9C40YbQuNGPINGD0LrQsNC30LDRgtC10LvQtdC5XHJcbiAgICAgICAgICB0aGlzLmRyYXdWYWx1ZU1heChwcmljZSk7XHJcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncyA9PSAnb24nKXtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb25maWdJbnB1dE1heChwcmljZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLndyaXRlRGF0YVNsaWRlck1heChwcmljZSk7XHJcbiAgICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLndpZHRoID0gd2lkdGhSYW5nZSArIHN0ZXAgKydweCc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjYWxjVmFsdWUocG9zIDogbnVtYmVyLCBjb25ydFRoaXMgOiBhbnkpIDogbnVtYmVye1xyXG4gICAgICBsZXQgcGVyY2VudCA6IG51bWJlciA9IHBvcyAvIGNvbnJ0VGhpcy5tb2RlbC5nZXRXaWR0aCgpLFxyXG4gICAgICAgIHByaWNlIDogbnVtYmVyID0gKChjb25ydFRoaXMubWF4IC0gY29ucnRUaGlzLm1pbikgKiBwZXJjZW50ICsgY29ucnRUaGlzLm1pbikudG9GaXhlZCgpO1xyXG4gICAgICByZXR1cm4gcHJpY2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3VmFsdWVNaW4odmFsIDogbnVtYmVyKSA6IHZvaWR7XHJcbiAgICB0aGlzLm1vZGVsLmVsZW1WYWx1ZU1pbi5pbm5lckhUTUwgPSB2YWw7XHJcbiAgfVxyXG4gIGRyYXdWYWx1ZU1heCh2YWwgOiBudW1iZXIpIDogdm9pZHtcclxuICAgIHRoaXMubW9kZWwuZWxlbVZhbHVlTWF4LmlubmVySFRNTCA9IHZhbDtcclxuICB9XHJcblxyXG4gIHdyaXRlRGF0YVNsaWRlck1pbih2YWwgOiBudW1iZXIpIDogdm9pZHtcclxuICAgIHRoaXMubWluU3RhcnQgPSB2YWw7XHJcbiAgICB0aGlzLnZpZXcubWluU3RhcnQgPSB2YWw7XHJcbiAgfVxyXG4gIHdyaXRlRGF0YVNsaWRlck1heCh2YWwgOiBudW1iZXIpIDogdm9pZHtcclxuICAgIHRoaXMubWF4U3RhcnQgPSB2YWw7XHJcbiAgICB0aGlzLnZpZXcubWF4U3RhcnQgPSB2YWw7XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VDb25maWdJbnB1dE1pbih2YWwgOiBudW1iZXIpIDogdm9pZHtcclxuICAgIGlmICh2YWwgPCB0aGlzLm1pbil7dmFsID0gdGhpcy5taW47fVxyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoYC5zbGlkZXItY29uZmlnIC5zbGlkZXItY29uZmlnX19ibG9jayAuaW5wdXQtdGV4dCAjaW5wdXRUZXh0bWluU3RhcnRgK3RoaXMuaWRFbGVtZW50LnN1YnN0cigtMSkpLnZhbHVlID0gdmFsO1xyXG4gIH1cclxuICBjaGFuZ2VDb25maWdJbnB1dE1heCh2YWwgOiBudW1iZXIpIDogdm9pZHtcclxuICAgIGlmICh2YWwgPiB0aGlzLm1heCl7dmFsID0gdGhpcy5tYXg7fVxyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoYC5zbGlkZXItY29uZmlnIC5zbGlkZXItY29uZmlnX19ibG9jayAuaW5wdXQtdGV4dCAjaW5wdXRUZXh0bWF4U3RhcnRgK3RoaXMuaWRFbGVtZW50LnN1YnN0cigtMSkpLnZhbHVlID0gdmFsO1xyXG4gIH1cclxuXHJcbiAgbW92ZVJhbmdlT25jbGlja1NsaWRlcigpIDogdm9pZHtcclxuICAgIGxldCB0aGlzQ2xpY2sgOiBhbnkgPSB0aGlzLm1vZGVsLnNsaWRlcixcclxuICAgICAgY29udHIgOiBhbnkgPSB0aGlzO1xyXG4gICAgXHJcbiAgICB0aGlzQ2xpY2sub25tb3VzZWRvd24gPSBmdW5jdGlvbihlIDogYW55KSB7XHRcclxuICAgICAgdGhpc0NsaWNrLm9ubW91c2V1cCA9IGZ1bmN0aW9uKGUgOiBhbnkpIHtcclxuICAgICAgICBsZXQgcG9zOiBudW1iZXIsXHJcbiAgICAgICAgICBzdGFydFBvcyA6IG51bWJlcjtcclxuXHJcbiAgICAgICAgc3dpdGNoKGNvbnRyLmRlZmluZU9yaWVudGF0aW9uKGNvbnRyLm9yaWVudGF0aW9uKSkge1xyXG4gICAgICAgICAgY2FzZSAneCc6IHtcclxuICAgICAgICAgICAgcG9zID0gZS5wYWdlWCAtIHBhcnNlSW50KGNvbnRyLm1vZGVsLnNsaWRlci5vZmZzZXRMZWZ0KTtcclxuICAgICAgICAgICAgaWYgKGNvbnRyLnN0ZXAgIT0gMSl7XHJcbiAgICAgICAgICAgICAgcG9zID0gY29udHIuZGVmaW5lUG9zU3RlcENsb3Nlc3RDbGljayhwb3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2FzZSAneSc6IHtcclxuICAgICAgICAgICAgcG9zID0gZS5wYWdlWSAtIGNvbnRyLmdldENvb3Jkcyhjb250ci5tb2RlbC5zbGlkZXIpLnRvcDtcclxuICAgICAgICAgICAgaWYgKGNvbnRyLnN0ZXAgIT0gMSl7XHJcbiAgICAgICAgICAgICAgcG9zID0gY29udHIuZGVmaW5lUG9zU3RlcENsb3Nlc3RDbGljayhwb3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2goY29udHIudHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnaW50ZXJ2YWwnIDoge1xyXG4gICAgICAgICAgICBsZXQgcG9zTCA6IG51bWJlciA9IGNvbnRyLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpLFxyXG4gICAgICAgICAgICAgIHBvc1IgOiBudW1iZXIgPSBjb250ci5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCk7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhwb3NMIC0gcG9zKSA8IE1hdGguYWJzKHBvc1IgLSBwb3MpKSB7XHJcbiAgICAgICAgICAgICAgc3RhcnRQb3MgPSBjb250ci5tb2RlbC5nZXRQb3NSYW5nZUxlZnQoKTtcclxuICAgICAgICAgICAgICBjb250ci5tb3ZpbmdSYW5nZSgnbGVmdCcsIGNvbnRyLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpLCBcclxuICAgICAgICAgICAgICAgIHBvcywgY29udHIubW9kZWwuZ2V0V2lkdGhSYW5nZSgpKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgc3RhcnRQb3MgPSBjb250ci5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgY29udHIubW92aW5nUmFuZ2UoJ3JpZ2h0JywgY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpLFxyXG4gICAgICAgICAgICAgICAgcG9zLCBjb250ci5tb2RlbC5nZXRXaWR0aFJhbmdlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2FzZSAnZnJvbTB0bycgOiB7XHJcbiAgICAgICAgICAgIHN0YXJ0UG9zID0gY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpO1xyXG4gICAgICAgICAgICBjb250ci5tb3ZpbmdSYW5nZSgncmlnaHQnLCBjb250ci5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCksXHJcbiAgICAgICAgICAgICAgcG9zLCBjb250ci5tb2RlbC5nZXRXaWR0aFJhbmdlKCkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhc2UgJ29uZScgOiB7XHJcbiAgICAgICAgICAgIHN0YXJ0UG9zID0gY29udHIubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpO1xyXG4gICAgICAgICAgICBjb250ci5tb3ZpbmdSYW5nZSgncmlnaHQnLCBjb250ci5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCksXHJcbiAgICAgICAgICAgICAgcG9zLCBjb250ci5tb2RlbC5nZXRXaWR0aFJhbmdlKCkpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgZGVmaW5lUG9zU3RlcENsb3Nlc3RDbGljayhwb3MgOiBudW1iZXIpIDogbnVtYmVye1xyXG4gICAgbGV0IGZpbmFsUG9zIDogbnVtYmVyID0gMCwgXHJcbiAgICAgIG1hc1NjYWxlIDogbnVtYmVyW10sXHJcbiAgICAgIGxlbiA6IG51bWJlciA9IHRoaXMubW9kZWwuZ2V0V2lkdGgoKSxcclxuICAgICAgbGVuTCA6IG51bWJlcixcclxuICAgICAgbGVuUiA6IG51bWJlcjtcclxuXHJcbiAgICBtYXNTY2FsZSA9IHRoaXMubWFzU3RlcHNGb3JNb3ZpbmcoKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc1NjYWxlLmxlbmd0aDsgaSsrKXtcclxuICAgICAgbGVuTCA9IE1hdGguYWJzKG1hc1NjYWxlW2ldIC0gcG9zKTtcclxuICAgICAgbGVuUiA9IE1hdGguYWJzKG1hc1NjYWxlW2krMV0gLSBwb3MpO1xyXG4gICAgICBcclxuICAgICAgaWYgKGxlbkwgPCBsZW4pIHtcclxuICAgICAgICBmaW5hbFBvcyA9IG1hc1NjYWxlW2ldO1xyXG4gICAgICAgIGxlbiA9IGxlbkw7XHJcbiAgICAgIH1lbHNlIGlmIChsZW5SIDwgbGVuKXtcclxuICAgICAgICBmaW5hbFBvcyA9IG1hc1NjYWxlW2krMV07XHJcbiAgICAgICAgbGVuID0gbGVuUjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmaW5hbFBvcztcclxuICB9XHJcbiAgbWFzU3RlcHNGb3JNb3ZpbmcoKSA6IG51bWJlcltde1xyXG4gICAgbGV0IHF0eURpdmlzaW9uIDogbnVtYmVyID0gKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5zdGVwLFxyXG4gICAgICB3aWR0aE9uZURpdmlzaW9uIDogbnVtYmVyID0gdGhpcy5tb2RlbC5nZXRXaWR0aCgpIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pLC8v0L7QtNC90L4g0LTQtdC70LXQvdC40LVcclxuICAgICAgd2lkdGhTdGVwIDogbnVtYmVyID0gd2lkdGhPbmVEaXZpc2lvbiAqIHRoaXMuc3RlcCwgLy/QtNC70LjQvdCwINGI0LDQs9CwXHJcbiAgICAgIG1hc1NjYWxlIDogbnVtYmVyW10gPSBbXTtcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcXR5RGl2aXNpb247IGkrKykge1xyXG4gICAgICBtYXNTY2FsZVtpXSA9IHdpZHRoU3RlcCAqIGk7Ly9wYXJzZUludCh3KmkpOyAvL9Cx0LXQtyBwYXJzZUludCwg0YfRgtC+0LHRiyDRgtC+0YfQvdC+0YHRgtGMINGB0YLQvtC40LzQvtGB0YLQuCDQsdGL0LvQsCDQstGL0YjQtVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtYXNTY2FsZTtcclxuICB9XHJcbiAgXHJcbiAgYXBwbHlDb25maWcoKSA6IHZvaWR7XHJcbiAgICBsZXQgdGhpc0NsaWNrIDogYW55ID0gdGhpcy5tb2RlbC5jaGVja2JveFNldHRpbmdzLFxyXG4gICAgICBjb250ciA6IGFueSA9IHRoaXM7XHJcblxyXG4gICAgdGhpc0NsaWNrLm9uY2xpY2sgPSBmdW5jdGlvbihlIDogYW55KSB7XHJcbiAgICAgIGlmICh0aGlzQ2xpY2suY2hlY2tlZCA9PSB0cnVlKXtcclxuICAgICAgICBjb250ci5tb2RlbC5zZXR0aW5nc0Jsb2NrLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBjb250ci5tb2RlbC5zZXR0aW5nc0Jsb2NrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBpbnB1dFMgOiBhbnkgPSBjb250ci50aGlzU2xpZGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2lucHV0LXRleHRfX2lucHV0Jyk7XHJcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpbnB1dFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpbnB1dFNbaV0ub25ibHVyID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICBsZXQgaWRJbnB1dCA9IHRoaXMuaWQsXHJcbiAgICAgICAgICAgIGlkICA6IG51bWJlciA9IGNvbnRyLmlkRWxlbWVudC5zdWJzdHIoLTEpLFxyXG4gICAgICAgICAgICBtaW4gOiBudW1iZXIsXHJcbiAgICAgICAgICAgIG1heCA6IG51bWJlcixcclxuICAgICAgICAgICAgbWluU3RhcnQgOiBudW1iZXIsXHJcbiAgICAgICAgICAgIG1heFN0YXJ0IDogbnVtYmVyLFxyXG4gICAgICAgICAgICBzdGVwIDogbnVtYmVyLFxyXG4gICAgICAgICAgICBzY2FsZVN0ZXAgOiBudW1iZXI7XHJcblxyXG4gICAgICAgICAgaWYgKCAoaWRJbnB1dC5pbmRleE9mKCdtaW4nLDApICE9IC0xKSAmJiAoaWRJbnB1dC5pbmRleE9mKCdtaW5TdGFydCcsMCkgPT0gLTEpKXtcclxuICAgICAgICAgICAgbWluID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGNvbnRyLm1pbiA9IG1pbjtcclxuICAgICAgICAgICAgY29udHIudmlldy5taW4gPSBtaW47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoIChpZElucHV0LmluZGV4T2YoJ21heCcsMCkgIT0gLTEpICYmIChpZElucHV0LmluZGV4T2YoJ21heFN0YXJ0JywwKSA9PSAtMSkpe1xyXG4gICAgICAgICAgICBtYXggPSBOdW1iZXIucGFyc2VJbnQodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNsZWFyKGNvbnRyLnRoaXNTbGlkZXIsIGlkKTtcclxuICAgICAgICAgICAgY29udHIubWF4ID0gbWF4O1xyXG4gICAgICAgICAgICBjb250ci52aWV3Lm1heCA9IG1heDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpZElucHV0LmluZGV4T2YoJ21pblN0YXJ0JywwKSAhPSAtMSl7XHJcbiAgICAgICAgICAgIG1pblN0YXJ0ID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChtaW5TdGFydCA8PSBjb250ci5tYXhTdGFydCl7XHJcbiAgICAgICAgICAgICAgY29udHIubWluU3RhcnQgPSBtaW5TdGFydDtcclxuICAgICAgICAgICAgICBjb250ci52aWV3Lm1pblN0YXJ0ID0gbWluU3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpZElucHV0LmluZGV4T2YoJ21heFN0YXJ0JywwKSAhPSAtMSl7XHJcbiAgICAgICAgICAgIG1heFN0YXJ0ID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChtYXhTdGFydCA+PSBjb250ci5taW5TdGFydCl7XHJcbiAgICAgICAgICAgICAgY29udHIubWF4U3RhcnQgPSBtYXhTdGFydDtcclxuICAgICAgICAgICAgICBjb250ci52aWV3Lm1heFN0YXJ0ID0gbWF4U3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpZElucHV0LmluZGV4T2YoJ3NjYWxlU3RlcCcsMCkgIT0gLTEpe1xyXG4gICAgICAgICAgICBzY2FsZVN0ZXAgPSBOdW1iZXIucGFyc2VJbnQodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNsZWFyKGNvbnRyLnRoaXNTbGlkZXIsIGlkKTtcclxuICAgICAgICAgICAgY29udHIuc2NhbGVTdGVwID0gc2NhbGVTdGVwO1xyXG4gICAgICAgICAgICBjb250ci52aWV3LnNjYWxlU3RlcCA9IHNjYWxlU3RlcDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpZElucHV0LmluZGV4T2YoJ3N0ZXAnLDApICE9IC0xKXtcclxuICAgICAgICAgICAgc3RlcCA9IE51bWJlci5wYXJzZUludCh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgY2xlYXIoY29udHIudGhpc1NsaWRlciwgaWQpO1xyXG4gICAgICAgICAgICBjb250ci5zdGVwID0gc3RlcDtcclxuICAgICAgICAgICAgY29udHIudmlldy5zdGVwID0gc3RlcDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29udHIuY2hlY2tNaW5NYXhTdGFydCgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3VHlwZSgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3U2NhbGUoKTtcclxuICAgICAgICAgIGNvbnRyLnZpZXcuZHJhd1JhbmdlKCk7XHJcbiAgICAgICAgICBjb250ci52aWV3LmRyYXdWYWx1ZSgpO1xyXG4gICAgICAgICAgaWYgKGNvbnRyLnNldHRpbmdzID09ICdvbicpe1xyXG4gICAgICAgICAgICBjb250ci53cml0ZURhdGFJbkNvbmZpZygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJhZGlvUyA6IGFueSA9IGNvbnRyLnRoaXNTbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncmFkaW9ncm91cF9faW5wdXQnKTtcclxuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHJhZGlvUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHJhZGlvU1tpXS5vbmNsaWNrID0gZnVuY3Rpb24gKCl7XHJcbiAgICAgICAgICBsZXQgaWQgOiBudW1iZXIgPSBjb250ci5pZEVsZW1lbnQuc3Vic3RyKC0xKSxcclxuICAgICAgICAgICAgaWRTdHIgOiBzdHJpbmcgPSB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgIHR5cGUgOiBzdHJpbmcsIFxyXG4gICAgICAgICAgICBvcmllbnRhdGlvbiA6IHN0cmluZywgXHJcbiAgICAgICAgICAgIHZhbHVlIDogc3RyaW5nLCBcclxuICAgICAgICAgICAgc2NhbGUgOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIHR5cGVJZCA6IHN0cmluZywgXHJcbiAgICAgICAgICAgIG9yaWVudGF0aW9uSUQgOnN0cmluZywgXHJcbiAgICAgICAgICAgIHZhbHVlSUQgOiBzdHJpbmcsIFxyXG4gICAgICAgICAgICBzY2FsZUlEIDogc3RyaW5nO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoaWRTdHIuaW5kZXhPZignVHlwZScsMCkgIT0gLTEpe1xyXG4gICAgICAgICAgICB0eXBlSWQgPSB0aGlzLmlkLnN1YnN0cigtMSk7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0eXBlSWQpIHtcclxuICAgICAgICAgICAgICBjYXNlICcxJzogdHlwZSA9ICdpbnRlcnZhbCc7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMic6IHtcclxuICAgICAgICAgICAgICAgICAgdHlwZSA9ICdmcm9tMHRvJztcclxuICAgICAgICAgICAgICAgICAgY29udHIubWluU3RhcnQgPSBjb250ci5taW47XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnMyc6IHR5cGUgPSAnb25lJzsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDogdHlwZSA9ICdpbnRlcnZhbCc7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGNvbnRyLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICBjb250ci52aWV3LnR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGlkU3RyLmluZGV4T2YoJ09yaWVudGF0aW9uJywwKSAhPSAtMSl7XHJcbiAgICAgICAgICAgIG9yaWVudGF0aW9uSUQgPSB0aGlzLmlkLnN1YnN0cigtMSk7XHJcbiAgICAgICAgICAgIHN3aXRjaChvcmllbnRhdGlvbklEKSB7XHJcbiAgICAgICAgICAgICAgY2FzZSAnMSc6IG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzInOiBvcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCc7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6IG9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2xlYXIoY29udHIudGhpc1NsaWRlciwgaWQpO1xyXG4gICAgICAgICAgICBjb250ci5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xyXG4gICAgICAgICAgICBjb250ci52aWV3Lm9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaWRTdHIuaW5kZXhPZignVmFsdWUnLDApICE9IC0xKXtcclxuICAgICAgICAgICAgdmFsdWVJRCA9IHRoaXMuaWQuc3Vic3RyKC0xKTtcclxuICAgICAgICAgICAgc3dpdGNoKHZhbHVlSUQpIHtcclxuICAgICAgICAgICAgICBjYXNlICcxJzogdmFsdWUgPSAnb24nOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJzInOiB2YWx1ZSA9ICdvZmYnOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgOiB2YWx1ZSA9ICdvbic7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjbGVhcihjb250ci50aGlzU2xpZGVyLCBpZCk7XHJcbiAgICAgICAgICAgIGNvbnRyLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnRyLnZpZXcudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpZFN0ci5pbmRleE9mKCdTY2FsZScsMCkgIT0gLTEpe1xyXG4gICAgICAgICAgICBzY2FsZUlEID0gdGhpcy5pZC5zdWJzdHIoLTEpO1xyXG4gICAgICAgICAgICBzd2l0Y2goc2NhbGVJRCkge1xyXG4gICAgICAgICAgICAgIGNhc2UgJzEnOiBzY2FsZSA9ICdvbic7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnMic6IHNjYWxlID0gJ29mZic7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6IHNjYWxlID0gJ29uJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsZWFyKGNvbnRyLnRoaXNTbGlkZXIsIGlkKTtcclxuICAgICAgICAgICAgY29udHIuc2NhbGUgPSBzY2FsZTtcclxuICAgICAgICAgICAgY29udHIudmlldy5zY2FsZSA9IHNjYWxlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjb250ci5jaGVja01pbk1heFN0YXJ0KCk7XHJcbiAgICAgICAgICBjb250ci52aWV3LmRyYXdUeXBlKCk7XHJcbiAgICAgICAgICBjb250ci52aWV3LmRyYXdTY2FsZSgpO1xyXG4gICAgICAgICAgY29udHIudmlldy5kcmF3T3JpZW50YXRpb24oKTtcclxuICAgICAgICAgIGNvbnRyLnZpZXcuZHJhd1ZhbHVlKCk7XHJcbiAgICAgICAgICBjb250ci52aWV3LmRyYXdSYW5nZSgpO1xyXG4gICAgICAgICAgaWYgKGNvbnRyLnNldHRpbmdzID09ICdvbicpe1xyXG4gICAgICAgICAgICBjb250ci53cml0ZURhdGFJbkNvbmZpZygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH07XHRcclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhcih0aGlzU2xpZGVyIDogYW55LCBpZCA6IG51bWJlcil7XHJcbiAgICAgIGxldCBibG9ja3NTY2FsZSA6IGFueSA9IHRoaXNTbGlkZXIucXVlcnlTZWxlY3RvckFsbCgnLnJhbmdlLXNsaWRlciNpZFNsaWRlcicraWQrJyAucmFuZ2Utc2xpZGVyX19zbGlkZXIgLnJhbmdlLXNsaWRlcl9fc2NhbGUnKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja3NTY2FsZS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgYmxvY2tzU2NhbGVbaV0ucmVtb3ZlKCk7XHJcbiAgICAgIH1cdFxyXG5cclxuICAgICAgdGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyI2lkU2xpZGVyJytpZCsnIC5yYW5nZS1zbGlkZXJfX2xlZnQnKS5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XHJcbiAgICAgIHRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlciNpZFNsaWRlcicraWQrJyAucmFuZ2Utc2xpZGVyX19yYW5nZScpLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgY2hlY2tNaW5NYXhTdGFydCgpIDogdm9pZHtcclxuICAgIGlmICh0aGlzLm1pblN0YXJ0IDwgdGhpcy5taW4pe3RoaXMubWluU3RhcnQgPSB0aGlzLm1pbjsgdGhpcy52aWV3Lm1pblN0YXJ0ID0gdGhpcy5taW47fVxyXG4gICAgaWYgKHRoaXMubWF4U3RhcnQgPiB0aGlzLm1heCl7dGhpcy5tYXhTdGFydCA9IHRoaXMubWF4OyB0aGlzLnZpZXcubWF4U3RhcnQgPSB0aGlzLm1heDt9XHJcbiAgICBpZiAodGhpcy5taW5TdGFydCA+IHRoaXMubWF4KXt0aGlzLm1pblN0YXJ0ID0gdGhpcy5tYXg7IHRoaXMudmlldy5taW5TdGFydCA9IHRoaXMubWF4O31cclxuICB9XHJcblxyXG4gIHdyaXRlRGF0YUluQ29uZmlnKCkgOiB2b2lke1xyXG4gICAgdGhpcy5tb2RlbC5lbGVtVmFsdWVNaW4uaW5uZXJIVE1MID0gdGhpcy5taW5TdGFydDtcclxuICAgIHRoaXMubW9kZWwuZWxlbVZhbHVlTWF4LmlubmVySFRNTCA9IHRoaXMubWF4U3RhcnQ7XHJcbiAgICBcclxuICAgIGxldCB0eXBlSUQgOiBzdHJpbmcsIFxyXG4gICAgICBvcmllbnRhdGlvbklEIDogc3RyaW5nLCBcclxuICAgICAgdmFsdWVJRCA6IHN0cmluZywgXHJcbiAgICAgIHNjYWxlSUQgOiBzdHJpbmcsXHJcbiAgICAgIGlkIDogc3RyaW5nID0gdGhpcy5pZEVsZW1lbnQuc3Vic3RyKC0xKTtcclxuXHJcbiAgICBzd2l0Y2godGhpcy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2ludGVydmFsJ1x0OiB0eXBlSUQgPSAnMSc7IGJyZWFrO1xyXG4gICAgICBjYXNlICdmcm9tMHRvJ1x0OiB7XHJcbiAgICAgICAgdHlwZUlEID0gJzInOyBcclxuICAgICAgICB0aGlzLndyaXRlRGF0YVNsaWRlck1pbih0aGlzLm1pbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnb25lJ1x0XHQ6IHR5cGVJRCA9ICczJzsgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQgXHRcdDogdHlwZUlEID0gJzEnO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoKHRoaXMub3JpZW50YXRpb24pIHtcclxuICAgICAgY2FzZSAnaG9yaXpvbnRhbCc6IG9yaWVudGF0aW9uSUQgPSAnMSc7IGJyZWFrO1xyXG4gICAgICBjYXNlICd2ZXJ0aWNhbCc6IG9yaWVudGF0aW9uSUQgPSAnMic7IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0IDogb3JpZW50YXRpb25JRCA9ICcxJztcclxuICAgIH1cclxuICAgIHN3aXRjaCh0aGlzLnZhbHVlKSB7XHJcbiAgICAgIGNhc2UgJ29uJzogdmFsdWVJRCA9ICcxJzsgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ29mZic6IHZhbHVlSUQgPSAnMic7IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0IDogdmFsdWVJRCA9ICcxJztcclxuICAgIH1cclxuICAgIHN3aXRjaCh0aGlzLnNjYWxlKSB7XHJcbiAgICAgIGNhc2UgJ29uJzogc2NhbGVJRCA9ICcxJzsgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ29mZic6IHNjYWxlSUQgPSAnMic7IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0IDogc2NhbGVJRCA9ICcxJztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY29uZmlnSXRlbU1pbiA6IHN0cmluZyA9IGAuc2xpZGVyLWNvbmZpZyAuc2xpZGVyLWNvbmZpZ19fYmxvY2sgLmlucHV0LXRleHQgI2lucHV0VGV4dG1pbmAsXHJcbiAgICBjb25maWdJdGVtTWF4IDogc3RyaW5nID0gYC5zbGlkZXItY29uZmlnIC5zbGlkZXItY29uZmlnX19ibG9jayAuaW5wdXQtdGV4dCAjaW5wdXRUZXh0bWF4YCxcclxuICAgIGNvbmZpZ0l0ZW1NaW5TdGFydCA6IHN0cmluZyA9IGAuc2xpZGVyLWNvbmZpZyAuc2xpZGVyLWNvbmZpZ19fYmxvY2sgLmlucHV0LXRleHQgI2lucHV0VGV4dG1pblN0YXJ0YCxcclxuICAgIGNvbmZpZ0l0ZW1NYXhTdGFydCA6IHN0cmluZyA9IGAuc2xpZGVyLWNvbmZpZyAuc2xpZGVyLWNvbmZpZ19fYmxvY2sgLmlucHV0LXRleHQgI2lucHV0VGV4dG1heFN0YXJ0YCxcclxuICAgIGNvbmZpZ0l0ZW1TdGVwIDogc3RyaW5nID0gYC5zbGlkZXItY29uZmlnIC5zbGlkZXItY29uZmlnX19ibG9jayAuaW5wdXQtdGV4dCAjaW5wdXRUZXh0c3RlcGAsXHJcbiAgICBjb25maWdJdGVtU2NhbGVTdGVwIDogc3RyaW5nID0gYC5zbGlkZXItY29uZmlnIC5zbGlkZXItY29uZmlnX19ibG9jayAuaW5wdXQtdGV4dCAjaW5wdXRUZXh0c2NhbGVTdGVwYDtcclxuXHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3Rvcihjb25maWdJdGVtTWluK2lkKS52YWx1ZSA9IHRoaXMubWluO1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoY29uZmlnSXRlbU1heCtpZCkudmFsdWUgPSB0aGlzLm1heDtcclxuICAgIHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKGNvbmZpZ0l0ZW1NaW5TdGFydCtpZCkudmFsdWUgPSB0aGlzLm1pblN0YXJ0O1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoY29uZmlnSXRlbU1heFN0YXJ0K2lkKS52YWx1ZSA9IHRoaXMubWF4U3RhcnQ7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3Rvcihjb25maWdJdGVtU3RlcCAraWQpLnZhbHVlID0gdGhpcy5zdGVwO1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoY29uZmlnSXRlbVNjYWxlU3RlcCAraWQpLnZhbHVlID0gdGhpcy5zY2FsZVN0ZXA7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcihgLnJhZGlvZ3JvdXBfX2lucHV0W25hbWU9cmJHcm9vcFR5cGUke2lkfV0jcmJyYkdyb29wVHlwZSR7aWR9JHtpZH0ke3R5cGVJRH1gKS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKGAucmFkaW9ncm91cF9faW5wdXRbbmFtZT1yYkdyb29wT3JpZW50YXRpb24ke2lkfV0jcmJyYkdyb29wT3JpZW50YXRpb24ke2lkfSR7aWR9JHtvcmllbnRhdGlvbklEfWApLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgdGhpcy50aGlzU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoYC5yYWRpb2dyb3VwX19pbnB1dFtuYW1lPXJiR3Jvb3BWYWx1ZSR7aWR9XSNyYnJiR3Jvb3BWYWx1ZSR7aWR9JHtpZH0ke3ZhbHVlSUR9YCkuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcihgLnJhZGlvZ3JvdXBfX2lucHV0W25hbWU9cmJHcm9vcFNjYWxlJHtpZH1dI3JicmJHcm9vcFNjYWxlJHtpZH0ke2lkfSR7c2NhbGVJRH1gKS5jaGVja2VkID0gdHJ1ZTtcclxuICB9XHJcbn0iLCJpbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCJcclxuaW1wb3J0IHtPcHRpb25zfSBmcm9tICcuLi8uLi9tb2R1bGVzL3BsdWdpbi5zbGlkZXIvcGx1Z2luLnNsaWRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9kZWwge1xyXG4gIHRoaXNTbGlkZXIgOiBIVE1MRWxlbWVudDtcclxuICBpZEVsZW1lbnQgOiBzdHJpbmc7XHJcbiAgcmFuZ2VTbGlkZXIgOiBIVE1MRWxlbWVudDtcclxuICBzbGlkZXIgOiBIVE1MRWxlbWVudDtcclxuICByYW5nZSA6IEhUTUxFbGVtZW50O1xyXG4gIHJhbmdlTGVmdCA6IEhUTUxFbGVtZW50O1xyXG4gIHJhbmdlUmlnaHQgOiBIVE1MRWxlbWVudDtcclxuICBlbGVtVmFsdWVNaW4gOiBvYmplY3Q7XHJcbiAgZWxlbVZhbHVlTWF4IDogb2JqZWN0O1xyXG4gIGNoZWNrYm94U2V0dGluZ3MgOiBvYmplY3Q7XHJcbiAgc2V0dGluZ3NCbG9jayA6IG9iamVjdDtcclxuICBsYWJlbEJsb2NrIDogb2JqZWN0O1xyXG4gIGxhYmVsTWluIDogb2JqZWN0O1xyXG4gIGxhYmVsRGFzaCA6IG9iamVjdDtcclxuICBsYWJlbE1heCA6IG9iamVjdDtcclxuICBibG9ja1NjYWxlVmFscyA6IG9iamVjdDtcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0aW9uIDogT3B0aW9ucyl7XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIgPSBvcHRpb24uZWxlbWVudDtcclxuICAgIHRoaXMuaWRFbGVtZW50ID0gb3B0aW9uLmlkRWxlbWVudDtcclxuICAgIHRoaXMucmFuZ2VTbGlkZXIgPSB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlciMnK3RoaXMuaWRFbGVtZW50KTtcclxuICAgIHRoaXMuc2xpZGVyID0gdGhpcy5yYW5nZVNsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyX19zbGlkZXInKTtcclxuICAgIHRoaXMucmFuZ2UgPSB0aGlzLnNsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyX19yYW5nZScpO1xyXG4gICAgdGhpcy5yYW5nZUxlZnQgPSB0aGlzLnNsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyX19sZWZ0Jyk7XHJcbiAgICB0aGlzLnJhbmdlUmlnaHQgPSB0aGlzLnNsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyX19yaWdodCcpO1xyXG4gICAgdGhpcy5lbGVtVmFsdWVNaW4gPSB0aGlzLnRoaXNTbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fbGFiZWwtbWluJyk7XHJcbiAgICB0aGlzLmVsZW1WYWx1ZU1heCA9IHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKCcucmFuZ2Utc2xpZGVyX19sYWJlbC1tYXgnKTtcclxuICAgIHRoaXMuY2hlY2tib3hTZXR0aW5ncyA9IHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWNvbmZpZyAuY2hlY2tib3gtbGlzdF9faW5wdXQnKTtcclxuICAgIHRoaXMuc2V0dGluZ3NCbG9jayA9IHRoaXMudGhpc1NsaWRlci5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLWNvbmZpZyAuc2xpZGVyLWNvbmZpZ19fYmxvY2snKTtcclxuICAgIHRoaXMubGFiZWxCbG9jayA9IHRoaXMucmFuZ2VTbGlkZXIucXVlcnlTZWxlY3RvcignLnJhbmdlLXNsaWRlcl9fbGFiZWwtYmxvY2snKTtcclxuICAgIHRoaXMubGFiZWxNaW4gPSB0aGlzLnJhbmdlU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJ3NwYW4ucmFuZ2Utc2xpZGVyX19sYWJlbC1taW4nKTtcclxuICAgIHRoaXMubGFiZWxEYXNoID0gdGhpcy5yYW5nZVNsaWRlci5xdWVyeVNlbGVjdG9yKCdzcGFuLnJhbmdlLXNsaWRlcl9fbGFiZWwtbWluJyk7XHJcbiAgICB0aGlzLmxhYmVsTWF4ID0gdGhpcy5yYW5nZVNsaWRlci5xdWVyeVNlbGVjdG9yKCdzcGFuLnJhbmdlLXNsaWRlcl9fbGFiZWwtbWF4Jyk7XHJcbiAgICB0aGlzLmJsb2NrU2NhbGVWYWxzID0gdGhpcy5zbGlkZXIucXVlcnlTZWxlY3RvckFsbCgnLnJhbmdlLXNsaWRlcl9fc2NhbGUtdmFsJyk7XHJcbiAgfVxyXG5cclxuICBnZXRXaWR0aCgpIDogbnVtYmVye1xyXG4gICAgcmV0dXJuIHRoaXMuc2xpZGVyLmNsaWVudFdpZHRoO1xyXG4gIH1cclxuICBnZXRXaWR0aFJhbmdlKCkgOiBudW1iZXJ7XHJcbiAgICByZXR1cm4gdGhpcy5yYW5nZS5jbGllbnRXaWR0aDtcclxuICB9XHJcbiAgZ2V0UG9zUmFuZ2VMZWZ0KCkgOiBudW1iZXJ7XHJcbiAgICByZXR1cm4gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnJhbmdlTGVmdCkubGVmdCk7XHJcbiAgfVxyXG4gIGdldFBvc1JhbmdlUmlnaHQoKSA6IG51bWJlcntcclxuICAgIHJldHVybiBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKHRoaXMucmFuZ2VSaWdodCkubGVmdCk7XHJcbiAgfVxyXG59IiwiaW1wb3J0ICogYXMgJCBmcm9tIFwianF1ZXJ5XCJcclxuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vLi4vbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIubW9kZWwnO1xyXG5pbXBvcnQge1ZpZXd9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyLnZpZXcnO1xyXG5pbXBvcnQge0NvbnRyb2xsZXJ9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyLmNvbnRyb2xsZXInO1xyXG5kZWNsYXJlIGxldCBqUXVlcnk6IGFueTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XHJcbiAgZWxlbWVudCA6IEhUTUxFbGVtZW50O1xyXG4gIGlkRWxlbWVudCA6IHN0cmluZztcclxuICB3aWR0aCA6IG51bWJlcjtcclxuICB0eXBlIDogc3RyaW5nO1xyXG4gIG1pbiA6IG51bWJlcjtcclxuICBtYXggOiBudW1iZXI7XHJcbiAgbWluU3RhcnQgOiBudW1iZXI7XHJcbiAgbWF4U3RhcnQgOiBudW1iZXI7XHJcbiAgc3RlcCA6IG51bWJlcjtcclxuICBvcmllbnRhdGlvbiA6IHN0cmluZztcclxuICB2YWx1ZSA6IHN0cmluZztcclxuICBzY2FsZSA6IHN0cmluZztcclxuICBzY2FsZVN0ZXAgOiBudW1iZXI7XHJcbiAgc2V0dGluZ3MgOiBzdHJpbmc7XHJcbn1cclxuXHJcbihmdW5jdGlvbiggJCApIHtcclxuICBcclxuXHQkLmZuLnNsaWRlciA9IGZ1bmN0aW9uKG9wdGlvbnMgOiBPcHRpb25zKSB7XHJcblxyXG4gICAgY2xhc3MgU2xpZGVyIHtcclxuICAgICAgcHVibGljIGVsZW1lbnQgOiBIVE1MRWxlbWVudDtcclxuICAgICAgcHVibGljIGlkRWxlbWVudCA6IHN0cmluZztcclxuICAgICAgcHVibGljIHdpZHRoIDogbnVtYmVyO1xyXG4gICAgICBwdWJsaWMgdHlwZSA6IHN0cmluZyA9ICdpbnRlcnZhbCc7XHJcbiAgICAgIHB1YmxpYyBtaW4gOiBudW1iZXI7XHJcbiAgICAgIHB1YmxpYyBtYXggOiBudW1iZXI7XHJcbiAgICAgIHB1YmxpYyBtaW5TdGFydCA6IG51bWJlcjtcclxuICAgICAgcHVibGljIG1heFN0YXJ0IDogbnVtYmVyO1xyXG4gICAgICBwdWJsaWMgc3RlcCA6IG51bWJlcjtcclxuICAgICAgcHVibGljIG9yaWVudGF0aW9uIDogc3RyaW5nID0gJ2hvcml6b250YWwnO1xyXG4gICAgICBwdWJsaWMgdmFsdWUgOiBzdHJpbmcgPSAnb24nO1xyXG4gICAgICBwdWJsaWMgc2NhbGUgOiBzdHJpbmcgPSAnb24nO1xyXG4gICAgICBwdWJsaWMgc2NhbGVTdGVwIDogbnVtYmVyO1xyXG4gICAgICBwdWJsaWMgc2V0dGluZ3MgOiBzdHJpbmcgPSAnb24nO1xyXG4gICAgICBwdWJsaWMgZGF0YVNsaWRlciA6IE9wdGlvbnM7XHJcblxyXG4gICAgICBjb25zdHJ1Y3RvcihvcHRpb24gOiBPcHRpb25zKXtcclxuICAgICAgICB0aGlzLmRhdGFTbGlkZXIgPSB7XHJcbiAgICAgICAgICBlbGVtZW50IDogb3B0aW9uLmVsZW1lbnQsXHJcbiAgICAgICAgICBpZEVsZW1lbnQgOiBvcHRpb24uaWRFbGVtZW50LFxyXG4gICAgICAgICAgd2lkdGggOiBvcHRpb24ud2lkdGggfHwgNDAwLFxyXG4gICAgICAgICAgdHlwZSA6IG9wdGlvbi50eXBlIHx8ICdpbnRlcnZhbCcsXHJcbiAgICAgICAgICBtaW4gOiBvcHRpb24ubWluIHx8IDAsXHJcbiAgICAgICAgICBtYXggOiBvcHRpb24ubWF4IHx8IDEwMDAsXHJcbiAgICAgICAgICBtaW5TdGFydCA6IG9wdGlvbi5taW5TdGFydCB8fCAwLFxyXG4gICAgICAgICAgbWF4U3RhcnQgOiBvcHRpb24ubWF4U3RhcnQgfHwgNTAwLFxyXG4gICAgICAgICAgc3RlcCA6IG9wdGlvbi5zdGVwIHx8IDEsXHJcbiAgICAgICAgICBvcmllbnRhdGlvbiA6IG9wdGlvbi5vcmllbnRhdGlvbiB8fCAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICB2YWx1ZSA6IG9wdGlvbi52YWx1ZSB8fCAnb24nLFxyXG4gICAgICAgICAgc2NhbGUgOiBvcHRpb24uc2NhbGUgfHwgJ29uJyxcclxuICAgICAgICAgIHNjYWxlU3RlcCA6IG9wdGlvbi5zY2FsZVN0ZXAgfHwxMCxcclxuICAgICAgICAgIHNldHRpbmdzIDogb3B0aW9uLnNldHRpbmdzIHx8ICdvbicsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gXHJcbiAgICAgIHJ1blNsaWRlcigpe1xyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IE1vZGVsKHRoaXMuZGF0YVNsaWRlcik7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBWaWV3KHRoaXMuZGF0YVNsaWRlciwgbW9kZWwpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcih0aGlzLmRhdGFTbGlkZXIsIG1vZGVsLCB2aWV3KTtcclxuICAgIFxyXG4gICAgICAgIG1vZGVsLnJhbmdlU2xpZGVyLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aCArJ3B4JztcclxuICAgICAgICBcclxuICAgICAgICBjb250cm9sbGVyLmNoZWNrTWluTWF4U3RhcnQoKTtcclxuICAgICAgICBpZiAodGhpcy5kYXRhU2xpZGVyLnNldHRpbmdzID09ICdvbicpe1xyXG4gICAgICAgICAgY29udHJvbGxlci53cml0ZURhdGFJbkNvbmZpZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWV3LmRyYXdSYW5nZSgpO1xyXG4gICAgXHJcbiAgICAgICAgY29udHJvbGxlci5tb3ZlUmFuZ2VPbmNsaWNrU2xpZGVyKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNsaWRlci5zZXR0aW5ncyA9PSAnb24nKXtcclxuICAgICAgICAgIGNvbnRyb2xsZXIuYXBwbHlDb25maWcoKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBtb2RlbC5yYW5nZUxlZnQub25tb3VzZWRvd24gPSBmdW5jdGlvbihlIDogYW55KSB7XHJcbiAgICAgICAgICBjb250cm9sbGVyLm1vdmVBdChtb2RlbC5yYW5nZUxlZnQsIGUsICdsZWZ0Jyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBtb2RlbC5yYW5nZVJpZ2h0Lm9ubW91c2Vkb3duID0gZnVuY3Rpb24oZSA6IGFueSkge1xyXG4gICAgICAgICAgY29udHJvbGxlci5tb3ZlQXQobW9kZWwucmFuZ2VSaWdodCwgZSwgJ3JpZ2h0Jyk7XHJcbiAgICAgICAgfTtcclxuICAgIFxyXG4gICAgICAgIHZpZXcuZHJhd1R5cGUoKTtcclxuICAgICAgICB2aWV3LmRyYXdTY2FsZSgpO1xyXG4gICAgICAgIHZpZXcuZHJhd09yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgdmlldy5kcmF3VmFsdWUoKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzbGlkZXIgPSBuZXcgU2xpZGVyKG9wdGlvbnMpO1xyXG4gICAgc2xpZGVyLnJ1blNsaWRlcigpO1xyXG4gIH1cclxufSkoalF1ZXJ5KSIsImltcG9ydCAkIGZyb20gXCJqcXVlcnlcIlxyXG5pbXBvcnQge09wdGlvbnN9IGZyb20gJy4uLy4uL21vZHVsZXMvcGx1Z2luLnNsaWRlci9wbHVnaW4uc2xpZGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3IHtcclxuICBtb2RlbCA6IGFueTtcclxuICBkYXRhU2xpZGVyIDogb2JqZWN0O1xyXG4gIHRoaXNTbGlkZXIgOiBhbnk7XHJcbiAgaWRFbGVtZW50IDogc3RyaW5nO1xyXG4gIG1pbjogbnVtYmVyO1xyXG4gIG1heCA6IG51bWJlcjtcclxuICBtaW5TdGFydDogbnVtYmVyO1xyXG4gIG1heFN0YXJ0IDogbnVtYmVyO1xyXG4gIHR5cGUgOiBzdHJpbmc7XHJcbiAgb3JpZW50YXRpb24gOiBzdHJpbmc7XHJcbiAgc2NhbGUgOiBzdHJpbmc7XHJcbiAgc2NhbGVTdGVwIDogbnVtYmVyO1xyXG4gIHZhbHVlIDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb24gOiBPcHRpb25zLCBtb2RlbCA6IGFueSl7XHJcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcbiAgICB0aGlzLmRhdGFTbGlkZXIgPSBvcHRpb247XHJcbiAgICB0aGlzLnRoaXNTbGlkZXIgPSBvcHRpb24uZWxlbWVudDtcclxuICAgIHRoaXMuaWRFbGVtZW50ID0gb3B0aW9uLmlkRWxlbWVudDtcclxuICAgIHRoaXMubWluID0gb3B0aW9uLm1pbjtcclxuICAgIHRoaXMubWF4ID0gb3B0aW9uLm1heDtcclxuICAgIHRoaXMubWluU3RhcnQgPSBvcHRpb24ubWluU3RhcnQ7XHJcbiAgICB0aGlzLm1heFN0YXJ0ID0gb3B0aW9uLm1heFN0YXJ0O1xyXG4gICAgdGhpcy50eXBlID0gb3B0aW9uLnR5cGU7XHJcbiAgICB0aGlzLm9yaWVudGF0aW9uID0gb3B0aW9uLm9yaWVudGF0aW9uO1xyXG4gICAgdGhpcy5zY2FsZSA9IG9wdGlvbi5zY2FsZTtcclxuICAgIHRoaXMuc2NhbGVTdGVwID0gb3B0aW9uLnNjYWxlU3RlcDtcclxuICAgIHRoaXMudmFsdWUgPSBvcHRpb24udmFsdWU7XHJcbiAgfVxyXG5cclxuICBkcmF3UmFuZ2UoKSA6IHZvaWR7XHJcbiAgICBsZXQgcG9zTGVmdCA6IG51bWJlciwgXHJcbiAgICAgIHBvc1JpZ2h0IDogbnVtYmVyO1xyXG4gIFxyXG4gICAgcG9zUmlnaHQgPSAoIHRoaXMubW9kZWwuZ2V0V2lkdGgoKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSApICogKHRoaXMubWF4U3RhcnQgLSB0aGlzLm1pbik7XHJcbiAgICB0aGlzLm1vZGVsLnJhbmdlUmlnaHQuc3R5bGUubGVmdCA9IHBvc1JpZ2h0ICsncHgnO1xyXG5cclxuICAgIHN3aXRjaCh0aGlzLnR5cGUpIHtcclxuICAgICAgY2FzZSAnaW50ZXJ2YWwnIDoge1xyXG4gICAgICAgIHBvc0xlZnQgPSAoIHRoaXMubW9kZWwuZ2V0V2lkdGgoKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSApICogKHRoaXMubWluU3RhcnQgLSB0aGlzLm1pbik7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUubGVmdCA9IHBvc0xlZnQrJ3B4JztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKCcrcG9zTGVmdCsncHgpJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLmxlZnQgPSBwb3NMZWZ0KydweCc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS53aWR0aCA9IChwb3NSaWdodCAtIHBvc0xlZnQpKydweCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnZnJvbTB0bycgOiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoLTVweCknO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUud2lkdGggPSBwb3NSaWdodCsncHgnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ29uZScgOiB7XHJcbiAgICAgICAgcG9zTGVmdCA9ICggdGhpcy5tb2RlbC5nZXRXaWR0aCgpIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pICkgKiAodGhpcy5taW5TdGFydCAtIHRoaXMubWluKTtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS5sZWZ0ID0gcG9zTGVmdCsncHgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoJytwb3NMZWZ0KydweCknO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUubGVmdCA9IHBvc0xlZnQrJ3B4JztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLndpZHRoID0gKHBvc1JpZ2h0IC0gcG9zTGVmdCkrJ3B4JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0IDoge1xyXG4gICAgICAgIHBvc0xlZnQgPSAoIHRoaXMubW9kZWwuZ2V0V2lkdGgoKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSApICogKHRoaXMubWluU3RhcnQgLSB0aGlzLm1pbik7Ly/QtdGB0LvQuCDQvNC40L0g0L3QtSAwXHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZUxlZnQuc3R5bGUubGVmdCA9IHBvc0xlZnQrJ3B4JztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVYKCcrcG9zTGVmdCsncHgpJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLmxlZnQgPSBwb3NMZWZ0KydweCc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS53aWR0aCA9IChwb3NSaWdodCAtIHBvc0xlZnQpKydweCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgICAgICAgXHJcbiAgZHJhd1R5cGUoKSA6IHZvaWR7XHJcbiAgICBzd2l0Y2godGhpcy50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2ludGVydmFsJyA6IGJyZWFrO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2VMZWZ0LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2VMZWZ0LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyt0aGlzLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpKydweCwgMHB4KSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoJyt0aGlzLm1vZGVsLmdldFBvc1JhbmdlTGVmdCgpKydweCwgMHB4KSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZS5zdHlsZS53aWR0aCA9IHRoaXMubW9kZWwuZ2V0UG9zUmFuZ2VSaWdodCgpIC0gdGhpcy5tb2RlbC5nZXRQb3NSYW5nZUxlZnQoKTtcclxuICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIHRoaXMubW9kZWwubGFiZWxEYXNoLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmcm9tMHRvJyA6IHtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnKygtNSkrJ3B4LCAwcHgpJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlLnN0eWxlLndpZHRoID0gdGhpcy5tb2RlbC5nZXRQb3NSYW5nZVJpZ2h0KCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnb25lJyA6IHtcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlTGVmdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2Uuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5sYWJlbERhc2guc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0IDogYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGRyYXdTY2FsZSgpIDogdm9pZHtcclxuICAgIHN3aXRjaCh0aGlzLnNjYWxlKSB7XHJcbiAgICAgIGNhc2UgJ29uJyA6IHtcclxuICAgICAgICBsZXQgcXR5RGl2aXNpb24gOiBudW1iZXIsXHJcbiAgICAgICAgdmFsRGl2aXNpb24gOiBudW1iZXIgPSB0aGlzLm1pbixcclxuICAgICAgICBwb3NEaXZpc2lvbiA6IG51bWJlcixcclxuICAgICAgICBzdGVwV2lkdGggOiBudW1iZXIsIFxyXG4gICAgICAgIGVsZW1EaXZpc2lvbiA6IGFueSxcclxuICAgICAgICBibG9ja1NjYWxlIDogYW55O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zY2FsZVN0ZXAgPiAwKXtcclxuICAgICAgICAgIHF0eURpdmlzaW9uID0gdGhpcy5zY2FsZVN0ZXA7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBxdHlEaXZpc2lvbiA9IE1hdGguZmxvb3IodGhpcy5tb2RlbC5nZXRXaWR0aCgpLzQ1KTtcclxuICAgICAgICAgIHRoaXMuc2NhbGVTdGVwID0gcXR5RGl2aXNpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGVwV2lkdGggPSB0aGlzLm1vZGVsLmdldFdpZHRoKCkvcXR5RGl2aXNpb247XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8PSB0aGlzLm1vZGVsLmdldFdpZHRoKCk7KXtcclxuICAgICAgICAgIHBvc0RpdmlzaW9uID0gTWF0aC5mbG9vcihpKTtcclxuICAgICAgICAgIGJsb2NrU2NhbGUgPSBgPGRpdiBjbGFzcz1cInJhbmdlLXNsaWRlcl9fc2NhbGVcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhbmdlLXNsaWRlcl9fc2NhbGUtbGluZVwiIGlkPVwic2NhbGUke3Bvc0RpdmlzaW9ufVwiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgICAgdGhpcy5tb2RlbC5zbGlkZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBibG9ja1NjYWxlKTtcclxuICAgICAgICAgIGVsZW1EaXZpc2lvbiA9IHRoaXMubW9kZWwuc2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJy5yYW5nZS1zbGlkZXJfX3NjYWxlLWxpbmUjc2NhbGUnK3Bvc0RpdmlzaW9uKS5jbG9zZXN0KCcucmFuZ2Utc2xpZGVyX19zY2FsZScpO1xyXG4gICAgICAgICAgZWxlbURpdmlzaW9uLnN0eWxlLmxlZnQgPXBvc0RpdmlzaW9uKydweCc7XHJcbiAgICAgICAgICB0aGlzLm1vZGVsLnJhbmdlU2xpZGVyLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICczNXB4JztcclxuICAgICAgICAgIGkgPSBpICsgc3RlcFdpZHRoO1xyXG4gICAgICAgICAgZWxlbURpdmlzaW9uLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInJhbmdlLXNsaWRlcl9fc2NhbGUtdmFsXCI+JytNYXRoLmZsb29yKHZhbERpdmlzaW9uKSsnPC9kaXY+Jyk7XHJcbiAgICAgICAgICB2YWxEaXZpc2lvbiA9IHZhbERpdmlzaW9uICsgKHRoaXMubWF4LXRoaXMubWluKS9xdHlEaXZpc2lvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnb2ZmJyA6IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0IDogYnJlYWs7XHJcbiAgICB9XHRcdFxyXG4gIH1cclxuICBcclxuICBkcmF3T3JpZW50YXRpb24oKSA6IHZvaWR7XHJcbiAgICBsZXQgYmxvY2tWYWxzIDogYW55LFxyXG4gICAgICBoZWlnaHRCbG9ja1NsaWRlciA6IHN0cmluZyA9ICc4MHB4J1xyXG4gICAgc3dpdGNoKHRoaXMub3JpZW50YXRpb24pIHtcclxuICAgICAgY2FzZSAnaG9yaXpvbnRhbCc6IHtcclxuICAgICAgICB0aGlzLm1vZGVsLnNsaWRlci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDVweCwgMCkgcm90YXRlKDBkZWcpJztcclxuICAgICAgICB0aGlzLm1vZGVsLnJhbmdlU2xpZGVyLnN0eWxlLmhlaWdodCA9IGhlaWdodEJsb2NrU2xpZGVyO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3ZlcnRpY2FsJzoge1xyXG4gICAgICAgIHRoaXMubW9kZWwuc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoNXB4LCAwKSByb3RhdGUoOTBkZWcpIHRyYW5zbGF0ZVgoNTAlKSc7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5yYW5nZVNsaWRlci5zdHlsZS5oZWlnaHQgPSB0aGlzLm1vZGVsLmdldFdpZHRoKCkrNzUrJ3B4JztcclxuICAgICAgICBcclxuICAgICAgICBibG9ja1ZhbHMgPSB0aGlzLm1vZGVsLmJsb2NrU2NhbGVWYWxzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tWYWxzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgIGJsb2NrVmFsc1tpXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDVweCwgMCkgcm90YXRlKC05MGRlZyknO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBkZWZhdWx0IDoge1xyXG4gICAgICAgIHRoaXMubW9kZWwuc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoNXB4LCAwKSByb3RhdGUoMGRlZyknO1xyXG4gICAgICAgIHRoaXMubW9kZWwucmFuZ2VTbGlkZXIuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0QmxvY2tTbGlkZXI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgZHJhd1ZhbHVlKCkgOiB2b2lke1xyXG4gICAgc3dpdGNoKHRoaXMudmFsdWUpIHtcclxuICAgICAgY2FzZSAnb24nIDoge1xyXG4gICAgICAgIHRoaXMubW9kZWwubGFiZWxCbG9jay5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIHRoaXMubW9kZWwubGFiZWxNYXguaW5uZXJIVE1MID0gdGhpcy5tYXhTdGFydDtcclxuXHJcbiAgICAgICAgc3dpdGNoKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgY2FzZSAnaW50ZXJ2YWwnIDoge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLmlubmVySFRNTCA9IHRoaXMubWluU3RhcnQ7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwubGFiZWxNaW4uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwubGFiZWxEYXNoLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhc2UgJ2Zyb20wdG8nIDoge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLmlubmVySFRNTCA9IHRoaXMubWluO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsRGFzaC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlICdvbmUnIDoge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLmlubmVySFRNTCA9IHRoaXMubWluU3RhcnQ7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwubGFiZWxNaW4uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbERhc2guc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkZWZhdWx0IDogey8vaW50ZXJ2YWxcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5sYWJlbE1pbi5pbm5lckhUTUwgPSB0aGlzLm1pblN0YXJ0O1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsTWluLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLmxhYmVsRGFzaC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ29mZicgOiB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5sYWJlbEJsb2NrLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdCA6IGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxufSIsImltcG9ydCAnLi4vLi4vbW9kdWxlcy9wbHVnaW4uc2xpZGVyL3BsdWdpbi5zbGlkZXIudHMnO1xyXG5cclxuJChmdW5jdGlvbigpIHtcclxuXHJcbiAgJCgnLnNlYXJjaC1yb29tJykuc2xpZGVyKHtcclxuICAgIGVsZW1lbnQgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLXJvb21fX3NsaWRlci1wcmljZScpLFxyXG4gICAgaWRFbGVtZW50IDogJ2lkU2xpZGVyMScsXHJcbiAgICB3aWR0aCA6IDI2NixcclxuICAgIHR5cGUgOiAnaW50ZXJ2YWwnLFxyXG4gICAgbWluIDogMCxcclxuICAgIG1heCA6IDE1OTQ4LFxyXG4gICAgbWluU3RhcnQgOiA1MDAwLFxyXG4gICAgbWF4U3RhcnQgOiAxMDAwMCxcclxuICAgIHN0ZXAgOiAxLFxyXG4gICAgb3JpZW50YXRpb24gOiAnaG9yaXpvbnRhbCcsXHJcbiAgICB2YWx1ZSA6ICdvbicsXHJcbiAgICBzY2FsZSA6ICdvZmYnLFxyXG4gICAgc2NhbGVTdGVwIDogMTAsXHJcbiAgICBzZXR0aW5ncyA6ICdvZmYnXHJcbiAgfSk7XHJcblxyXG59KTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImltcG9ydCAnLi4vLi4vZm9udC9mb250cy5jc3MnXHJcbmltcG9ydCAnLi4vLi4vaW5kZXguc2NzcydcclxuXHJcblxyXG4vKmZvcm1fZWxlbWVudHMqL1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9idG4vYnRuLnNjc3MnXHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2NoZWNrYm94LWxpc3QvY2hlY2tib3gtbGlzdC5zY3NzJ1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9jaGVja2JveC1saXN0LWV4cGFuZGFibGUvY2hlY2tib3gtbGlzdC1leHBhbmRhYmxlLnNjc3MnXHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2NoZWNrYm94LWxpc3QtZXhwYW5kYWJsZS9jaGVja2JveC1saXN0LWV4cGFuZGFibGUuanMnXHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3MnXHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2Ryb3Bkb3duL2Ryb3Bkb3duLnRzJ1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9mb290ZXIvZm9vdGVyLnNjc3MnXHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2hlYWRlci9oZWFkZXIuc2NzcydcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvaW5wdXQtdGV4dC9pbnB1dC10ZXh0LnNjc3MnXHJcbmltcG9ydCAnLi4vLi4vYmxvY2tzL2xpbmsvbGluay5zY3NzJ1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uc2NzcydcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvcmFuZ2Utc2xpZGVyL3JhbmdlLXNsaWRlci5zY3NzJ1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9yYXRlLWJ0bi9yYXRlLWJ0bi5zY3NzJ1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9yYXRlLWJ0bi9yYXRlLWJ0bi5qcydcclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvdG9waWMtbGFiZWwvdG9waWMtbGFiZWwuc2NzcydcclxuXHJcblxyXG4vKmNhcmRzKi9cclxuaW1wb3J0ICcuLi8uLi9ibG9ja3MvY2FyZC1yb29tL2NhcmQtcm9vbS5zY3NzJ1xyXG5pbXBvcnQgJy4uLy4uL2Jsb2Nrcy9jYXJkLXJvb20vY2FyZC1yb29tLmpzJ1xyXG5cclxuXHJcbi8qcGFnZXMqL1xyXG5pbXBvcnQgJy4uLy4uL3BhZ2VzL3NlYXJjaC1yb29tL3NlYXJjaC1yb29tLnNjc3MnXHJcbmltcG9ydCAnLi4vLi4vcGFnZXMvc2VhcmNoLXJvb20vcmFuZ2Utc2xpZGVyLmpzJyJdLCJzb3VyY2VSb290IjoiIn0=