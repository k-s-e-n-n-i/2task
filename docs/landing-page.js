/*! For license information please see landing-page.js.LICENSE.txt */
(()=>{var e={7828:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s),i=n(1667),d=n.n(i),l=n(8176),u=o()(a()),_=d()(l.Z);u.push([e.id,".calendar-block{position:absolute;z-index:100;margin-top:5px}.calendar-block.calendar-block_hide{display:none}.calendar-block .calendar{width:320px;height:337px;z-index:5;border:1px solid rgba(31,32,65,0.25);border-width:1px 1px 0 1px;box-sizing:border-box;box-shadow:0px -20px 20px rgba(31,32,65,0.05);border-radius:4px;background:#fff;left:-1px;margin-left:-1px;width:322px;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.calendar-block .calendar .pignose-calendar{width:100%;border:none;box-shadow:none;background:#fff}.calendar-block .calendar .pignose-calendar .pignose-calendar-top{border:none;box-shadow:none;background:#fff;padding:0px 0 54px 0;height:20px;display:flex;justify-content:space-between}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav{width:24px;height:24px;margin:20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon{width:24px;height:24px}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-left,.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-right{display:block;background:url("+_+") no-repeat center;width:24px;height:24px;font-size:1}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-nav .pignose-calendar-top-icon.icon-arrow-left{transform:rotate(180deg)}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date{padding:20px 0 30px 0;display:flex;justify-content:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date .pignose-calendar-top-month{font-size:20px;line-height:21px;padding-right:5px;margin:0 2px;text-transform:none;color:#1F2041;font-weight:700}.calendar-block .calendar .pignose-calendar .pignose-calendar-top .pignose-calendar-top-date .pignose-calendar-top-year{font-size:20px;line-height:21px;font-weight:700;color:#1F2041}.calendar-block .calendar .pignose-calendar .pignose-calendar-header{display:flex;justify-content:space-between;margin:0 20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-header .pignose-calendar-week{font-size:10px;width:38px;height:40px;color:#BC9CFF;text-transform:none;display:flex;justify-content:center;align-items:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-body{padding-top:0;margin:0 20px 20px 20px}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row{display:flex;justify-content:space-between}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row a{text-decoration:none}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit{height:40px;width:40px}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-date a{font-size:12px;height:40px;color:rgba(31,32,65,0.5);display:flex;justify-content:center;align-items:center}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active a{background:linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);color:#fff}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-first-active{border-radius:50% 0 0 50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-first-active a{border-radius:50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-second-active{border-radius:0 50% 50% 0}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-active.pignose-calendar-unit-second-active a{border-radius:50%}.calendar-block .calendar .pignose-calendar .pignose-calendar-body .pignose-calendar-row .pignose-calendar-unit.pignose-calendar-unit-range a{background:linear-gradient(180deg, #EEE6FF 0%, #E6EAFE 100%);color:rgba(31,32,65,0.5);border-radius:0}.calendar-block .calendar-block__btns{z-index:100;width:299px;height:27px;box-shadow:0px 10px 20px 0px rgba(31,32,65,0.05);margin:-24px 0 0 0;border:1px solid rgba(31,32,65,0.25);border-width:0 1px 1px 1px;background:#fff;display:flex;justify-content:space-between;padding:7px 13px 21px 6px;border-radius:0 0 4px 4px}.calendar-block .calendar-block__btns .link{margin:15px 7px 15px 13px}\n","",{version:3,sources:["webpack://./src/blocks/cards/calendar/calendar.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,WAAY,CACZ,cAAe,CAHjB,oCAMI,YAAa,CANjB,0BAUI,WAAY,CACZ,YAAa,CACb,SAAU,CACV,oCAAwC,CACxC,0BAA2B,CAC3B,qBAAsB,CACtB,6CAAiD,CACjD,iBAAkB,CAClB,eAAgB,CAChB,SAAU,CAEV,gBAAiB,CACjB,WAAY,CACZ,4CAAgD,CAvBpD,4CA0BM,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,eAAgB,CA7BtB,kEAgCQ,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,oBAAqB,CACrB,WAAY,CACZ,YAAa,CACb,6BAA8B,CAtCtC,4FAyCU,UAAW,CACX,WAAY,CACZ,WAAY,CA3CtB,uHA8CY,UAAW,CACX,WAAY,CA/CxB,+QAmDc,aAAc,CACd,mEAAiE,CACjE,UAAW,CACX,WAAY,CACZ,WAAY,CAvD1B,uIA2Dc,wBAAyB,CA3DvC,6FAiEU,qBAAsB,CACtB,YAAa,CACb,sBAAuB,CAnEjC,yHAsEY,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,YAAa,CACb,mBAAoB,CACpB,aAAc,CACd,eAAgB,CA5E5B,wHAgFY,cAAe,CACf,gBAAiB,CACjB,eAAgB,CAChB,aAAc,CAnF1B,qEAyFQ,YAAa,CACb,6BAA8B,CAC9B,aAAc,CA3FtB,4FA8FU,cAAe,CACf,UAAW,CACX,WAAY,CACZ,aAAc,CACd,mBAAoB,CACpB,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CArG7B,mEA0GQ,aAAc,CACd,uBAAwB,CA3GhC,yFA8GU,YAAa,CACb,6BAA8B,CA/GxC,2FAkHY,oBAAqB,CAlHjC,gHAsHY,WAAY,CACZ,UAAW,CAvHvB,6IA4HgB,cAAe,CACf,WAAY,CACZ,wBAA4B,CAC5B,YAAa,CACb,sBAAuB,CACvB,kBAAmB,CAjInC,+IAwIgB,4DAA6D,CAC7D,UAAW,CAzI3B,gLA6IgB,yBAA0B,CA7I1C,kLAgJkB,iBAAkB,CAhJpC,iLAqJgB,yBAA0B,CArJ1C,mLAwJkB,iBAAkB,CAxJpC,8IAgKgB,4DAA6D,CAC7D,wBAA4B,CAC5B,eAAgB,CAlKhC,sCA4KI,WAAY,CACZ,WAAY,CACZ,WAAY,CACZ,gDAAoD,CACpD,kBAAmB,CACnB,oCAAwC,CACxC,0BAA2B,CAC3B,eAAgB,CAChB,YAAa,CACb,6BAA8B,CAC9B,yBAA0B,CAC1B,yBAA0B,CAvL9B,4CA0LM,yBAA0B",sourcesContent:[".calendar-block{\r\n  position: absolute;\r\n  z-index: 100;\r\n  margin-top: 5px;\r\n    \r\n  &.calendar-block_hide{\r\n    display: none;\r\n  }\r\n\r\n  .calendar{\r\n    width: 320px;\r\n    height: 337px;\r\n    z-index: 5;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    border-width: 1px 1px 0 1px;\r\n    box-sizing: border-box;\r\n    box-shadow: 0px -20px 20px rgba(31, 32, 65, 0.05);\r\n    border-radius: 4px;\r\n    background: #fff;\r\n    left: -1px;\r\n\r\n    margin-left: -1px;\r\n    width: 322px;\r\n    box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n    .pignose-calendar{\r\n      width: 100%;\r\n      border: none;\r\n      box-shadow: none;\r\n      background: #fff;\r\n\r\n      .pignose-calendar-top{\r\n        border: none;\r\n        box-shadow: none;\r\n        background: #fff;\r\n        padding: 0px 0 54px 0;\r\n        height: 20px;\r\n        display: flex;\r\n        justify-content:space-between ;\r\n\r\n        .pignose-calendar-top-nav{\r\n          width: 24px;\r\n          height: 24px;\r\n          margin: 20px;\r\n\r\n          .pignose-calendar-top-icon{\r\n            width: 24px;\r\n            height: 24px;\r\n\r\n            &.icon-arrow-left,\r\n            &.icon-arrow-right{\r\n              display: block;\r\n              background: url('../calendar/arrow_forward.svg') no-repeat center;\r\n              width: 24px;\r\n              height: 24px;\r\n              font-size: 1;\r\n            }\r\n\r\n            &.icon-arrow-left{\r\n              transform: rotate(180deg);\r\n            }\r\n          }\r\n        }\r\n\r\n        .pignose-calendar-top-date{\r\n          padding: 20px 0 30px 0;\r\n          display: flex;\r\n          justify-content: center;\r\n\r\n          .pignose-calendar-top-month{\r\n            font-size: 20px;\r\n            line-height: 21px;\r\n            padding-right: 5px;\r\n            margin: 0 2px;\r\n            text-transform: none;\r\n            color: #1F2041;\r\n            font-weight: 700;\r\n          }\r\n\r\n          .pignose-calendar-top-year{\r\n            font-size: 20px;\r\n            line-height: 21px;\r\n            font-weight: 700;\r\n            color: #1F2041;\r\n          }\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-header{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin: 0 20px;\r\n\r\n        .pignose-calendar-week{\r\n          font-size: 10px;\r\n          width: 38px;\r\n          height: 40px;\r\n          color: #BC9CFF;\r\n          text-transform: none;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n        }\r\n      }\r\n\r\n      .pignose-calendar-body{\r\n        padding-top: 0;\r\n        margin: 0 20px 20px 20px;\r\n\r\n        .pignose-calendar-row {\r\n          display: flex;\r\n          justify-content: space-between;\r\n\r\n          a{\r\n            text-decoration: none;\r\n          }\r\n\r\n          .pignose-calendar-unit{\r\n            height: 40px;\r\n            width: 40px;\r\n            \r\n            &.pignose-calendar-unit-date{\r\n\r\n              a {\r\n                font-size: 12px;\r\n                height: 40px;\r\n                color: rgba(31, 32, 65, 0.5);\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n              }\r\n            }\r\n\r\n            &.pignose-calendar-unit-active {\r\n\r\n              a{\r\n                background: linear-gradient(180deg, #6FCF97 0%, #66D2EA 100%);\r\n                color: #fff;\r\n              }\r\n\r\n              &.pignose-calendar-unit-first-active{\r\n                border-radius: 50% 0 0 50%;\r\n\r\n                a{\r\n                  border-radius: 50%;\r\n                }\r\n              }\r\n              \r\n              &.pignose-calendar-unit-second-active{\r\n                border-radius: 0 50% 50% 0;\r\n\r\n                a{\r\n                  border-radius: 50%;\r\n                }\r\n              }\r\n            }\r\n\r\n            &.pignose-calendar-unit-range{\r\n\r\n              a{\r\n                background: linear-gradient(180deg, #EEE6FF 0%, #E6EAFE 100%); \r\n                color: rgba(31, 32, 65, 0.5);\r\n                border-radius: 0;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .calendar-block__btns{\r\n    z-index: 100;\r\n    width: 299px;\r\n    height: 27px;\r\n    box-shadow: 0px 10px 20px 0px rgba(31, 32, 65, 0.05);\r\n    margin: -24px 0 0 0;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    border-width: 0 1px 1px 1px;\r\n    background: #fff;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 7px 13px 21px 6px;\r\n    border-radius: 0 0 4px 4px;\r\n\r\n    .link{\r\n      margin: 15px 7px 15px 13px;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const c=u},1304:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s)()(a());o.push([e.id,".form-search-num{width:380px;height:374px;background:#fff;margin-top:70px;position:absolute;border:1px solid rgba(0,0,0,0.12);box-sizing:border-box;box-shadow:0px 0px 25px rgba(0,0,0,0.2);border-radius:4px;padding:40px 29px 30px 29px;display:flex;justify-content:space-between;flex-wrap:wrap;z-index:1}.form-search-num>.dropdown-block h3{margin-top:20px}.form-search-num h1{font-size:24.6px;line-height:28px}.form-search-num h3{margin-top:23px}.form-search-num .btn{width:100%;margin:30px 0 0 0;height:35px;line-height:36px;font-size:11px;letter-spacing:0.9px}.form-search-num .btn .btn__link{padding-right:5px;font-size:11px}.form-search-num .dropdown-dates .calendar-block .calendar-block__btns{width:301px;transform:translateX(-1.2px)}.form-search-num .dropdown-block .dropdown-block__dropdown-items h3{margin-top:0px}.form-search-num .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line{height:38px}.form-search-num .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty{margin:8px 6px 0 0}.form-search-num .dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span{font-size:10px}.form-search-num .dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link{margin:auto 14px 12px}.form-search-num .dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_ok{margin:auto 6px 12px}\n","",{version:3,sources:["webpack://./src/blocks/cards/form-search-num/form-search-num.scss"],names:[],mappings:"AAAA,iBACE,WAAY,CACZ,YAAa,CACb,eAAgB,CAChB,eAAgB,CAChB,iBAAkB,CAClB,iCAAqC,CACrC,qBAAsB,CACtB,uCAA2C,CAC3C,iBAAkB,CAClB,2BAA4B,CAC5B,YAAa,CACb,6BAA8B,CAC9B,cAAe,CACf,SAAU,CAdZ,oCAkBM,eAAgB,CAlBtB,oBAuBI,gBAAiB,CACjB,gBAAiB,CAxBrB,oBA4BI,eAAgB,CA5BpB,sBAgCI,UAAW,CACX,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,oBAAqB,CArCzB,iCAwCM,iBAAkB,CAClB,cAAe,CAzCrB,uEAkDQ,WAAY,CACZ,4BAA6B,CAnDrC,oEA6DQ,cAAe,CA7DvB,6FAiEQ,WAAY,CAjEpB,wHAoEU,kBAAmB,CApE7B,6HAuEY,cAAe,CAvE3B,6FA+EU,qBAAsB,CA/EhC,qGAkFY,oBAAqB",sourcesContent:[".form-search-num{\r\n  width: 380px;\r\n  height: 374px;\r\n  background: #fff;\r\n  margin-top: 70px;\r\n  position: absolute;\r\n  border: 1px solid rgba(0, 0, 0, 0.12);\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 0px 25px rgba(0, 0, 0, 0.2);\r\n  border-radius: 4px;\r\n  padding: 40px 29px 30px 29px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  z-index: 1;\r\n\r\n  > .dropdown-block{\r\n    h3{\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n\r\n  h1{\r\n    font-size: 24.6px;\r\n    line-height: 28px;\r\n  }\r\n\r\n  h3{\r\n    margin-top: 23px;\r\n  }\r\n\r\n  .btn{\r\n    width: 100%;\r\n    margin: 30px 0 0 0;\r\n    height: 35px;\r\n    line-height: 36px;\r\n    font-size: 11px;\r\n    letter-spacing: 0.9px;\r\n\r\n    .btn__link{\r\n      padding-right: 5px;\r\n      font-size: 11px;\r\n    }\r\n  }\r\n\r\n  .dropdown-dates{\r\n\r\n    .calendar-block{\r\n\r\n      .calendar-block__btns{\r\n        width: 301px;\r\n        transform: translateX(-1.2px);\r\n      }\r\n    }\r\n  }\r\n\r\n  .dropdown-block{\r\n    \r\n    .dropdown-block__dropdown-items{\r\n      \r\n      h3{\r\n        margin-top: 0px;\r\n      }\r\n      \r\n      .dropdown-block__items-line{\r\n        height: 38px;\r\n\r\n        .dropdown-block__block-qty{\r\n          margin: 8px 6px 0 0;\r\n\r\n          span{\r\n            font-size: 10px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .dropdown-block__btns{\r\n\r\n        .link{\r\n          margin: auto 14px 12px;\r\n\r\n          &.link_ok{\r\n            margin: auto 6px 12px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const i=o},8365:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s),i=n(1667),d=n.n(i),l=n(2478),u=n(773),_=o()(a()),c=d()(l.Z),m=d()(u.Z);_.push([e.id,".btn{border-radius:22px;height:26px;padding:4px 0;cursor:pointer;margin:15px 20px 15px 0;position:relative;text-align:center}.btn.btn_border{background-color:#fff;border:1px #BC9CFF solid;height:22px;border-width:2px}.btn.btn_border .btn__link{color:#BC9CFF}.btn.btn_gradient{background:linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);color:#ffffff}.btn.btn_gradient.btn_gradient_pay{width:320px}.btn:hover,.btn:focus,.btn.btn_hover{opacity:0.5}.btn .btn__link{color:#ffffff;font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;text-align:center;text-transform:uppercase;text-decoration:none;-webkit-user-select:none}.btn .btn__arrow{position:absolute;bottom:12px;right:15px;content:'';width:20px;height:20px;cursor:pointer;position:absolute;top:13px;right:11px;background-repeat:no-repeat;background-image:url("+c+")}.btn .btn__arrow.btn__arrow_white{background-image:url("+m+")}\n","",{version:3,sources:["webpack://./src/blocks/elements/btn/btn.scss"],names:[],mappings:"AAAA,KACE,kBAAmB,CACnB,WAAY,CACZ,aAAc,CACd,cAAe,CACf,uBAAwB,CACxB,iBAAkB,CAClB,iBAAkB,CAPpB,gBAUI,qBAAsB,CACtB,wBAAyB,CAEzB,WAAY,CACZ,gBAAiB,CAdrB,2BAiBM,aAAc,CAjBpB,kBAsBI,4DAA6D,CAC7D,aAAc,CAvBlB,mCA0BM,WAAY,CA1BlB,qCAiCI,WAAY,CAjChB,gBAqCI,aAAc,CACd,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,iBAAkB,CAClB,wBAAyB,CACzB,oBAAqB,CACrB,wBAAyB,CA7C7B,iBAiDI,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,QAAS,CACT,UAAW,CACX,2BAA4B,CAC5B,wDAA+C,CA5DnD,kCA+DM,wDAAqD",sourcesContent:[".btn{\r\n  border-radius: 22px;\r\n  height: 26px;\r\n  padding: 4px 0;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  position: relative;\r\n  text-align: center;\r\n\r\n  &.btn_border{\r\n    background-color: #fff;\r\n    border: 1px #BC9CFF solid;\t\r\n\r\n    height: 22px;\r\n    border-width: 2px;\r\n\r\n    .btn__link{\r\n      color: #BC9CFF;\r\n    }\r\n  }\r\n\r\n  &.btn_gradient{\r\n    background: linear-gradient(180deg, #BC9CFF 0%, #8BA4F9 100%);\r\n    color: #ffffff;\t\r\n\r\n    &.btn_gradient_pay{\r\n      width: 320px;\r\n    }\r\n  }\r\n\r\n  &:hover,\r\n  &:focus,\r\n  &.btn_hover{\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .btn__link{\r\n    color: #ffffff;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-style: normal;\r\n    font-weight: bold;\r\n    font-size: 12px;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    -webkit-user-select: none;\r\n  }\r\n\r\n  .btn__arrow{\r\n    position: absolute;\r\n    bottom: 12px;\r\n    right: 15px;\r\n    content: '';\r\n    width: 20px;\r\n    height: 20px;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 13px;\r\n    right: 11px;\r\n    background-repeat: no-repeat;\r\n    background-image: url('../../../img/arrow.svg');\r\n    \r\n    &.btn__arrow_white{\t\r\n      background-image: url('../../../img/arrow-white.svg');\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const h=_},3680:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s)()(a());o.push([e.id,".dropdown-block{position:relative;width:100%}.dropdown-block .dropdown-block__dropdown{position:relative;color:rgba(31,32,65,0.75);border-radius:4px;width:100%;cursor:pointer;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;height:44px;padding:8px 14px;margin-top:5px;font-family:Montserrat, Arial, sans-serif;font-weight:normal;font-style:normal}.dropdown-block .dropdown-block__dropdown:hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_date{width:150px;-webkit-appearance:none;font-size:14px}.dropdown-block .dropdown-block__dropdown.dropdown-block__dropdown_items-show{border:1px solid rgba(31,32,65,0.5);border-radius:4px 4px 0 0}.dropdown-block .dropdown-block__dropdown .dropdown-block__expand{width:11px;height:11px;position:absolute;bottom:15px;right:16px;cursor:pointer;-webkit-user-select:none}.dropdown-block .dropdown-block__dropdown-items{display:flex;flex-wrap:wrap;background:#fff;border-radius:0 0 4px 4px;border:1px solid rgba(31,32,65,0.5);margin-top:-1px;z-index:1;position:absolute}.dropdown-block .dropdown-block__dropdown-items.dropdown-block__dropdown-items_hide{display:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{display:flex;justify-content:space-between;color:rgba(31,32,65,0.5);margin-top:-1px;width:100%;height:40px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3{padding:13px 15px;margin:0}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns h3,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns span{color:#1f2041}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty{display:flex;justify-content:space-between;align-items:center;width:92px;margin-right:7px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus{border:1px solid rgba(31,32,65,0.25);border-radius:50%;width:30px;height:30px;font-size:20px;display:flex;justify-content:center;box-sizing:border-box;padding-top:2px;cursor:pointer;user-select:none}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-minus.dropdown-block__inc-qty_disable,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty .dropdown-block__inc-qty-plus.dropdown-block__inc-qty_disable{cursor:default;border-color:rgba(31,32,65,0.15);color:rgba(31,32,65,0.15)}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .dropdown-block__block-qty span,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .dropdown-block__block-qty span{font-weight:bold}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_clean,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_clean{margin:auto 15px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__items-line .link.link_ok,.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link.link_ok{margin:auto 7px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns{height:48px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns.dropdown-block__btns_flex-end{justify-content:flex-end}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_clean{margin:21px 0 0 14px}.dropdown-block .dropdown-block__dropdown-items .dropdown-block__btns .link_ok{margin:21px 7px 0 0}.dropdown-dates{width:100%}.dropdown-dates .dropdown-dates__dates{display:flex;justify-content:space-between}.dropdown-dates .dropdown-dates__dates .dropdown-block{width:auto}\n","",{version:3,sources:["webpack://./src/blocks/elements/dropdown/dropdown.scss"],names:[],mappings:"AAAA,gBACE,iBAAkB,CAClB,UAAW,CAFb,0CAKI,iBAAkB,CAClB,yBAA6B,CAC7B,iBAAkB,CAClB,UAAW,CACX,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,yCAA0C,CAC1C,kBAAmB,CACnB,iBAAkB,CAjBtB,gDAoBM,yBAA6B,CAC7B,mCAAuC,CArB7C,wEAyBM,WAAY,CACZ,uBAAwB,CACxB,cAAe,CA3BrB,8EA+BM,mCAAuC,CACvC,yBAA0B,CAhChC,kEAoCM,UAAW,CACX,WAAY,CACZ,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,cAAe,CACf,wBAAyB,CA1C/B,gDA+CI,YAAa,CACb,cAAe,CACf,eAAgB,CAChB,yBAA0B,CAC1B,mCAAuC,CACvC,eAAgB,CAChB,SAAU,CACV,iBAAkB,CAtDtB,oFAyDM,YAAa,CAzDnB,kJA8DM,YAAa,CACb,6BAA8B,CAC9B,wBAA4B,CAC5B,eAAgB,CAChB,UAAW,CACX,WAAY,CAnElB,wJAsEQ,iBAAkB,CAClB,QAAS,CAvEjB,oTA4EQ,aAA0B,CA5ElC,wMAgFQ,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,UAAW,CACX,gBAAiB,CApFzB,0gBAwFU,oCAAwC,CACxC,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,cAAe,CACf,YAAa,CACb,sBAAuB,CACvB,qBAAsB,CACtB,eAAgB,CAChB,cAAe,CACf,gBAAiB,CAlG3B,0oBAqGY,cAAe,CACf,gCAAoC,CACpC,yBAA6B,CAvGzC,kNA4GU,gBAAiB,CA5G3B,oLAmHU,gBAAiB,CAnH3B,8KAuHU,eAAgB,CAvH1B,sEA6HM,WAAY,CA7HlB,oGAgIQ,wBAAyB,CAhIjC,kFAoIQ,oBAAqB,CApI7B,+EAwIQ,mBAAoB,CACrB,gBAML,UAAW,CADb,uCAII,YAAa,CACb,6BAA8B,CALlC,uDAQM,UAAW",sourcesContent:[".dropdown-block{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  .dropdown-block__dropdown{\r\n    position: relative;\r\n    color: rgba(31, 32, 65, 0.75);\r\n    border-radius: 4px;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;\r\n\r\n    &:hover{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n\r\n    &.dropdown-block__dropdown_date{\r\n      width: 150px;\r\n      -webkit-appearance: none;\r\n      font-size: 14px;\r\n    }\r\n\r\n    &.dropdown-block__dropdown_items-show{\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      border-radius: 4px 4px 0 0;\r\n    }\r\n\r\n    .dropdown-block__expand{\r\n      width: 11px;\r\n      height: 11px;\r\n      position: absolute;\r\n      bottom: 15px;\r\n      right: 16px;\r\n      cursor: pointer;\r\n      -webkit-user-select: none;\r\n    }\r\n  }\r\n\r\n  .dropdown-block__dropdown-items{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    background: #fff;\r\n    border-radius: 0 0 4px 4px;\r\n    border: 1px solid rgba(31, 32, 65, 0.5);\r\n    margin-top: -1px;\r\n    z-index: 1;\r\n    position: absolute;\r\n\r\n    &.dropdown-block__dropdown-items_hide{\r\n      display: none;\r\n    }\r\n\r\n    .dropdown-block__items-line,\r\n    .dropdown-block__btns{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      margin-top: -1px;\r\n      width: 100%;\r\n      height: 40px;\r\n\r\n      h3{\r\n        padding: 13px 15px;\r\n        margin: 0;\r\n      }\r\n\r\n      h3,\r\n      span{\r\n        color: rgba(31, 32, 65, 1);\r\n      }\r\n\r\n      .dropdown-block__block-qty{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 92px;\r\n        margin-right: 7px;\r\n\r\n        .dropdown-block__inc-qty-minus,\r\n        .dropdown-block__inc-qty-plus{\r\n          border: 1px solid rgba(31, 32, 65, 0.25);\r\n          border-radius: 50%;\r\n          width: 30px;\r\n          height: 30px;\r\n          font-size: 20px;\r\n          display: flex;\r\n          justify-content: center;\r\n          box-sizing: border-box;\r\n          padding-top: 2px;\r\n          cursor: pointer;\r\n          user-select: none;\r\n\r\n          &.dropdown-block__inc-qty_disable{\r\n            cursor: default;\r\n            border-color: rgba(31, 32, 65, 0.15);\r\n            color: rgba(31, 32, 65, 0.15);\r\n          }\r\n        }\r\n        \r\n        span{\r\n          font-weight: bold;\r\n        }\r\n      }\r\n\r\n      .link{\r\n\r\n        &.link_clean{\r\n          margin: auto 15px;\r\n        }\r\n\r\n        &.link_ok{\r\n          margin: auto 7px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .dropdown-block__btns{\r\n      height: 48px;\r\n\r\n      &.dropdown-block__btns_flex-end{\r\n        justify-content: flex-end;\r\n      }\r\n\r\n      .link_clean{\r\n        margin: 21px 0 0 14px;\r\n      }\r\n      \r\n      .link_ok{\r\n        margin: 21px 7px 0 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.dropdown-dates{\r\n  width: 100%;\r\n\r\n  .dropdown-dates__dates{\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .dropdown-block{\r\n      width: auto;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const i=o},4753:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s)()(a());o.push([e.id,".footer .footer__block-menu{border-top:1px solid rgba(31,32,65,0.1);border-bottom:1px solid rgba(31,32,65,0.1);display:flex;justify-content:center;z-index:-2;width:100%;position:relative;background:#fff}.footer .footer__block-menu .footer__content-container{flex-grow:1;max-width:80.5%;min-width:400px;margin:0 auto;background:#fff}.footer .footer__block-menu .footer__content-container .footer__bottom-menu{display:flex;justify-content:space-between;flex-wrap:wrap;margin:0;padding:91px 0 89px 0;font-size:14px;color:rgba(31,32,65,0.5)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__logo{margin:10px 0 3px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block{display:block;max-width:min-content}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list{padding:0}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li{position:relative;font-size:14px;line-height:17px;padding:7px 0;line-height:24px;cursor:pointer;display:block;color:rgba(31,32,65,0.5)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li.menu_li__active,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li.menu_li__active{font-weight:bold;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .footer__menu-li:first-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .footer__menu-li:first-child{font-weight:bold;color:#1F2041;font-size:12px;text-transform:uppercase;cursor:inherit;white-space:nowrap;padding:10px 0 7px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .input-text_subscription,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .input-text_subscription{margin-top:10px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column .footer__menu-list .input-text_subscription .input-text__input,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block .footer__menu-list .input-text_subscription .input-text__input{padding:10px 14px;font-size:14px;width:260px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:last-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:first-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:last-child,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:first-child{min-width:200px;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:last-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:first-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:last-child .footer__menu-li,.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:first-child .footer__menu-li{cursor:inherit;color:rgba(31,32,65,0.75)}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(3),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(3){min-width:155px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(2),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__menu-column:nth-child(4),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(2),.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block:nth-child(4){min-width:155px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block{max-width:255px}.footer .footer__block-menu .footer__content-container .footer__bottom-menu .footer__bottom-menu-logo-block p{padding:0}.footer .footer__copyright-block{background:#fff;box-shadow:0px 10px 20px rgba(31,32,65,0.05)}.footer .footer__copyright-block .footer__copyright-content{display:flex;justify-content:space-between;align-items:center;font-size:14px;color:rgba(31,32,65,0.5);min-width:400px;max-width:80.5%;margin:0 auto}.footer .footer__copyright-block .footer__copyright-content p{margin:23px 0}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block{display:flex}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network{height:24px;width:24px;padding-left:20px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_twitter{margin-top:-1px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_facebook{width:22px;height:22px;margin-top:1px}.footer .footer__copyright-block .footer__copyright-content .footer__soc-block .footer__soc-network.footer__soc-network_instagram{width:22px;height:22px;margin-top:1px}@media (max-width: 1170px){.footer .footer__bottom-menu{text-align:center;justify-content:space-around}.footer .footer__bottom-menu .footer__menu-column{margin:10px 20px}.footer .footer__bottom-menu .footer__menu-column .footer__menu-list{width:270px}.footer .footer__bottom-menu .footer__logo{margin:10px 20px;max-width:none}.footer .footer__copyright-content{margin:23px 20px}}@media (max-width: 790px){.footer .footer__bottom-menu{display:flex;flex-direction:column;align-items:center}}@media (max-width: 620px){.footer .footer__bottom-menu{padding:90px 0 0 0}.footer .footer__bottom-menu .footer__menu-column{display:none}.footer .footer__bottom-menu .footer__logo{margin:0}.footer .footer__bottom-menu .footer__logo p{display:none}}\n","",{version:3,sources:["webpack://./src/blocks/elements/footer/footer.scss"],names:[],mappings:"AAAA,4BAGI,uCAA2C,CAC3C,0CAA8C,CAC9C,YAAa,CACb,sBAAuB,CACvB,UAAW,CACX,UAAW,CACX,iBAAkB,CAClB,eAAgB,CAVpB,uDAaM,WAAY,CACZ,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACd,eAAgB,CAjBtB,4EAoBQ,YAAa,CACb,6BAA8B,CAC9B,cAAe,CACf,QAAS,CACT,qBAAsB,CACtB,cAAe,CACf,wBAA4B,CA1BpC,0HA+BY,iBAAkB,CA/B9B,6MAqCU,aAAc,CACd,qBAAsB,CAtChC,mPAyCY,SAAU,CAzCtB,qRA4Cc,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,aAAc,CACd,gBAAiB,CACjB,cAAe,CACf,aAAc,CACd,wBAA4B,CAnD1C,qTAsDgB,gBAAiB,CACjB,yBAA6B,CAvD7C,6SA2DgB,gBAAiB,CACjB,aAAc,CACd,cAAe,CACf,wBAAyB,CACzB,cAAe,CACf,kBAAmB,CACnB,kBAAmB,CAjEnC,qSAsEc,eAAgB,CAtE9B,2UAyEgB,iBAAkB,CAClB,cAAe,CACf,WAAY,CA3E5B,wcAiFY,eAAgB,CAChB,yBAA6B,CAlFzC,4gBAqFc,cAAe,CACf,yBAA6B,CAtF3C,uOA2FY,eAAgB,CA3F5B,8cA+FY,eAAgB,CA/F5B,4GAoGU,eAAgB,CApG1B,8GAuGY,SAAU,CAvGtB,iCA+GI,eAAgB,CAChB,4CAAgD,CAhHpD,4DAmHM,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACnB,cAAe,CACf,wBAA4B,CAC5B,eAAgB,CAChB,eAAgB,CAChB,aAAc,CA1HpB,8DA6HQ,aAAc,CA7HtB,+EAiIQ,YAAa,CAjIrB,oGAoIU,WAAY,CACZ,UAAW,CACX,iBAAkB,CAtI5B,gIAyIY,eAAgB,CAzI5B,iIA6IY,UAAW,CACX,WAAY,CACZ,cAAe,CA/I3B,kIAmJY,UAAW,CACX,WAAY,CACZ,cAAe,CAChB,2BAQT,6BAGI,iBAAkB,CAClB,4BAA6B,CAJjC,kDAOM,gBAAiB,CAPvB,qEAUQ,WAAY,CAVpB,2CAeM,gBAAiB,CACjB,cAAe,CAhBrB,mCAqBI,gBAAiB,CAClB,CAIL,0BACE,6BAGI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACpB,CAIL,0BACE,6BAGI,kBAAmB,CAHvB,kDAMM,YAAa,CANnB,2CAUM,QAAS,CAVf,6CAaQ,YAAa,CACd",sourcesContent:[".footer{\r\n\r\n  .footer__block-menu{\r\n    border-top: 1px solid rgba(31, 32, 65, 0.1);\r\n    border-bottom: 1px solid rgba(31, 32, 65, 0.1);\r\n    display: flex;\r\n    justify-content: center;\r\n    z-index: -2;\r\n    width: 100%;\r\n    position: relative;\r\n    background: #fff;\r\n\r\n    .footer__content-container{\r\n      flex-grow: 1;\r\n      max-width: 80.5%;\r\n      min-width: 400px;\r\n      margin: 0 auto;\r\n      background: #fff;\r\n\r\n      .footer__bottom-menu{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        flex-wrap: wrap;\r\n        margin: 0;\r\n        padding: 91px 0 89px 0;\r\n        font-size: 14px;\r\n        color: rgba(31, 32, 65, 0.5);\r\n      \r\n        .footer__bottom-menu-logo-block{\r\n\r\n          .footer__logo{\r\n            margin: 10px 0 3px;\r\n          }\r\n        }\r\n\r\n        .footer__menu-column,\r\n        .footer__bottom-menu-logo-block{\r\n          display: block;\r\n          max-width: min-content;\r\n      \r\n          .footer__menu-list{\r\n            padding: 0;\r\n      \r\n            .footer__menu-li{\r\n              position: relative;\r\n              font-size: 14px;\r\n              line-height: 17px;\r\n              padding: 7px 0;\r\n              line-height: 24px;\r\n              cursor: pointer;              \r\n              display: block;\r\n              color: rgba(31, 32, 65, 0.5);\r\n              \r\n              &.menu_li__active{\r\n                font-weight: bold;\r\n                color: rgba(31, 32, 65, 0.75);\r\n              }\r\n      \r\n              &:first-child{\r\n                font-weight: bold;\r\n                color: #1F2041;\r\n                font-size: 12px;\r\n                text-transform: uppercase;\r\n                cursor: inherit;\r\n                white-space: nowrap;\r\n                padding: 10px 0 7px;\r\n              }\r\n            }\r\n      \r\n            .input-text_subscription{\r\n              margin-top: 10px;\r\n      \r\n              .input-text__input{\r\n                padding: 10px 14px;\r\n                font-size: 14px;\r\n                width: 260px;\r\n              }\r\n            }\r\n          }\r\n      \r\n          &:last-child,&:first-child{\r\n            min-width: 200px;\r\n            color: rgba(31, 32, 65, 0.75);\r\n      \r\n            .footer__menu-li{\r\n              cursor: inherit;\r\n              color: rgba(31, 32, 65, 0.75);\r\n            }\r\n          }\r\n      \r\n          &:nth-child(3){\r\n            min-width: 155px;\r\n          }\r\n      \r\n          &:nth-child(2),&:nth-child(4){\r\n            min-width: 155px;\r\n          }\r\n        }\r\n      \r\n        .footer__bottom-menu-logo-block{\r\n          max-width: 255px;\r\n      \r\n          p{\r\n            padding: 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .footer__copyright-block{\r\n    background: #fff;\r\n    box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n\r\n    .footer__copyright-content{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      font-size: 14px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n      min-width: 400px;\r\n      max-width: 80.5%;\r\n      margin: 0 auto;\r\n\r\n      p{\r\n        margin: 23px 0;\r\n      }\r\n    \r\n      .footer__soc-block{\r\n        display: flex;\r\n      \r\n        .footer__soc-network{\r\n          height: 24px;\r\n          width: 24px;\r\n          padding-left: 20px;\r\n    \r\n          &.footer__soc-network_twitter{\r\n            margin-top: -1px;\r\n          }\r\n    \r\n          &.footer__soc-network_facebook{\r\n            width: 22px;\r\n            height: 22px;\r\n            margin-top: 1px;\r\n          }\r\n    \r\n          &.footer__soc-network_instagram{\r\n            width: 22px;\r\n            height: 22px;\r\n            margin-top: 1px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      text-align: center;\r\n      justify-content: space-around;\r\n\r\n      .footer__menu-column{\r\n        margin: 10px 20px;\r\n\r\n        .footer__menu-list{\r\n          width: 270px;\r\n        }\r\n      }\r\n\r\n      .footer__logo{\r\n        margin: 10px 20px;\r\n        max-width: none;\r\n      }\r\n    }\r\n\r\n    .footer__copyright-content{\r\n      margin: 23px 20px;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 790px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 620px){\r\n  .footer{\r\n\r\n    .footer__bottom-menu{\r\n      padding: 90px 0 0 0;\r\n      \r\n      .footer__menu-column{\r\n        display: none;\r\n      }\r\n\r\n      .footer__logo{\r\n        margin: 0;\r\n\r\n        p{\r\n          display: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const i=o},879:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s),i=n(1667),d=n.n(i),l=n(8966),u=o()(a()),_=d()(l.Z);u.push([e.id,".header{width:100%;box-shadow:0px 10px 20px rgba(31,32,65,0.05);position:relative;background:#fff}.header .header__content-container{flex-grow:1;max-width:100%;min-width:320px;margin:0 9.7%}.header .header__content-container .header__links{display:flex;justify-content:space-between;min-height:70px;color:rgba(31,32,65,0.5)}.header .header__content-container .header__links .header__logo{height:70px;width:106px}.header .header__content-container .header__links .header__block-menu{display:flex;flex-wrap:wrap;align-items:center;margin:0;padding:0}.header .header__content-container .header__links .header__block-menu .header__menu{display:flex;flex-wrap:wrap;align-items:center;margin:0;padding:0}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li{display:block;color:rgba(31,32,65,0.5);cursor:pointer;padding:10px 0;margin:5px 0 5px 20.5px;position:relative}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li:hover>.header__submenu{display:block}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li.header__menu-li_active{font-weight:bold;color:rgba(31,32,65,0.75)}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li.header__menu-li_expand:after{content:'';display:inline-block;width:25px;height:14px;background-image:url("+_+");background-repeat:no-repeat;background-position:50% 90%;cursor:pointer}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__menu-a{color:rgba(31,32,65,0.5);cursor:pointer;text-decoration:none}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__menu-a:hover{text-decoration:underline}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu{position:absolute;min-width:100px;background:#fff;border:1px solid rgba(31,32,65,0.05);box-shadow:0px 10px 20px rgba(31,32,65,0.05);padding:10px 20px;right:0;border-width:0 1px 1px 1px;z-index:1;display:none}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li{display:block}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li .header__submenu-a{color:rgba(31,32,65,0.5);cursor:pointer;text-decoration:none;white-space:nowrap}.header .header__content-container .header__links .header__block-menu .header__menu .header__menu-li .header__submenu .header__submenu-li .header__submenu-a:hover{text-decoration:underline}.header .header__content-container .header__links .header__block-menu .header__block-login{display:flex;align-items:center}.header .header__content-container .header__links .header__block-menu .header__block-login .btn{font-weight:bold}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_border{font-size:12px;line-height:22px;width:83px}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_gradient{line-height:26px;font-size:12.3px;width:196px}.header .header__content-container .header__links .header__block-menu .header__block-login .btn.btn_header{margin:15px 0 15px 20px}.header .header__content-container .header__links .header__block-menu .header__block-login .header__block-login-hr{width:1px;height:30px;background:rgba(31,32,65,0.1);margin:0 20px}@media (max-width: 1170px){.header .header__content-container{margin:0}.header__links{margin:0 20px}}@media (max-width: 960px){.header__links{display:flex;flex-direction:column;align-items:center}.header__links .header__block-menu{flex-direction:column;justify-content:center}.header__links .header__block-menu .header__menu-li:nth-child(1){margin-left:0}.header__links .header__block-menu .btn_border.btn_header{margin-left:0}.header__links .header__block-menu .header__block-login-hr{display:none}}@media (max-width: 620px){.header__links .btn_border.btn_header{margin-left:0}}@media (max-width: 530px){.header__menu{flex-direction:column}.header__menu .header__menu-li{margin:5px 0 !important}.header__block-login{flex-wrap:wrap;justify-content:center}.header__block-login .btn{margin:15px 10px !important}}\n","",{version:3,sources:["webpack://./src/blocks/elements/header/header.scss"],names:[],mappings:"AAAA,QACE,UAAW,CACX,4CAAgD,CAChD,iBAAkB,CAClB,eAAgB,CAJlB,mCAOI,WAAY,CACZ,cAAe,CACf,eAAgB,CAChB,aAAc,CAVlB,kDAaM,YAAa,CACb,6BAA8B,CAC9B,eAAgB,CAChB,wBAA4B,CAhBlC,gEAmBQ,WAAY,CACZ,WAAY,CApBpB,sEAwBQ,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,QAAS,CACT,SAAU,CA5BlB,oFA+BU,YAAa,CACb,cAAe,CACf,kBAAmB,CACnB,QAAS,CACT,SAAU,CAnCpB,qGAsCY,aAAc,CACd,wBAA4B,CAC5B,cAAe,CACf,cAAe,CACf,uBAAwB,CACxB,iBAAkB,CA3C9B,4HA+CgB,aAAc,CA/C9B,4HAoDc,gBAAiB,CACjB,yBAA6B,CArD3C,kIA2DgB,UAAW,CACX,oBAAqB,CACrB,UAAW,CACX,WAAY,CACZ,wDAAqD,CACrD,2BAA4B,CAC5B,2BAA4B,CAC5B,cAAe,CAlE/B,qHAuEc,wBAA4B,CAC5B,cAAe,CACf,oBAAqB,CAzEnC,2HA4EgB,yBAA0B,CA5E1C,sHAiFc,iBAAkB,CAClB,eAAgB,CAChB,eAAgB,CAChB,oCAAwC,CACxC,4CAAgD,CAChD,iBAAkB,CAClB,OAAQ,CACR,0BAA2B,CAC3B,SAAU,CACV,YAAa,CA1F3B,0IA6FgB,aAAc,CA7F9B,6JAgGkB,wBAA4B,CAC5B,cAAe,CACf,oBAAqB,CACrB,kBAAmB,CAnGrC,mKAsGoB,yBAA0B,CAtG9C,2FA+GU,YAAa,CACb,kBAAmB,CAhH7B,gGAmHY,gBAAiB,CAnH7B,2GAsHc,cAAe,CACf,gBAAiB,CACjB,UAAW,CAxHzB,6GA4Hc,gBAAiB,CACjB,gBAAiB,CACjB,WAAY,CA9H1B,2GAkIc,uBAAwB,CAlItC,mHAuIY,SAAU,CACV,WAAY,CACZ,6BAAiC,CACjC,aAAc,CACf,2BAQT,mCAGI,QAAS,CACV,eAID,aAAc,CACf,CAGH,0BACE,eACE,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAHrB,mCAMI,qBAAsB,CACtB,sBAAuB,CAP3B,iEAYQ,aAAc,CAZtB,0DAmBS,aAAc,CAnBvB,2DAwBM,YAAa,CACd,CAKP,0BACE,sCAKO,aAAc,CAChB,CAKP,0BACE,cACE,qBAAsB,CADxB,+BAII,uBAAuB,CACxB,qBAID,cAAe,CACf,sBAAuB,CAFzB,0BAKI,2BAA2B,CAC5B",sourcesContent:[".header{\r\n  width: 100%;\r\n  box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n  position: relative;\r\n  background: #fff;\r\n\r\n  .header__content-container{\r\n    flex-grow: 1;\r\n    max-width: 100%;\r\n    min-width: 320px;\r\n    margin: 0 9.7%;\r\n\r\n    .header__links{\r\n      display: flex;\r\n      justify-content: space-between;\r\n      min-height: 70px;\r\n      color: rgba(31, 32, 65, 0.5);\r\n    \r\n      .header__logo{\r\n        height: 70px;\r\n        width: 106px;\r\n      }\r\n      \r\n      .header__block-menu{\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-items: center;\r\n        margin: 0;\r\n        padding: 0;\r\n    \r\n        .header__menu{\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n          align-items: center;\r\n          margin: 0;\r\n          padding: 0;\r\n    \r\n          .header__menu-li{\r\n            display: block;\r\n            color: rgba(31, 32, 65, 0.5);\r\n            cursor: pointer;\r\n            padding: 10px 0;\r\n            margin: 5px 0 5px 20.5px;\r\n            position: relative;\r\n\r\n            &:hover{\r\n              > .header__submenu{\r\n                display: block;\r\n              }\r\n            }\r\n\r\n            &.header__menu-li_active{\r\n              font-weight: bold;\r\n              color: rgba(31, 32, 65, 0.75);\r\n            }\r\n    \r\n            &.header__menu-li_expand{\r\n    \r\n              &:after{\r\n                content: '';\r\n                display: inline-block;\r\n                width: 25px;\r\n                height: 14px;\r\n                background-image: url('../../../img/expand-more.svg');\r\n                background-repeat: no-repeat;\r\n                background-position: 50% 90%;\r\n                cursor: pointer;\r\n              }\r\n            }\r\n            \r\n            .header__menu-a{\r\n              color: rgba(31, 32, 65, 0.5);\r\n              cursor: pointer;\r\n              text-decoration: none;\r\n\r\n              &:hover{\r\n                text-decoration: underline;\r\n              }\r\n            }\r\n\r\n            .header__submenu{\r\n              position: absolute;\r\n              min-width: 100px;\r\n              background: #fff;\r\n              border: 1px solid rgba(31, 32, 65, 0.05);\r\n              box-shadow: 0px 10px 20px rgba(31, 32, 65, 0.05);\r\n              padding: 10px 20px;\r\n              right: 0;\r\n              border-width: 0 1px 1px 1px;\r\n              z-index: 1;\r\n              display: none;\r\n\r\n              .header__submenu-li{\r\n                display: block;\r\n\r\n                .header__submenu-a{\r\n                  color: rgba(31, 32, 65, 0.5);\r\n                  cursor: pointer;\r\n                  text-decoration: none;\r\n                  white-space: nowrap;\r\n\r\n                  &:hover{\r\n                    text-decoration: underline;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n    \r\n        .header__block-login{\r\n          display: flex;\r\n          align-items: center;\r\n\r\n          .btn{\r\n            font-weight: bold;\r\n        \r\n            &.btn_border {\r\n              font-size: 12px;\r\n              line-height: 22px;\r\n              width: 83px;\r\n            }\r\n        \r\n            &.btn_gradient{\r\n              line-height: 26px;\r\n              font-size: 12.3px;\r\n              width: 196px;\r\n            }\r\n\r\n            &.btn_header{\r\n              margin: 15px 0 15px 20px;\r\n            }\r\n          }\r\n    \r\n          .header__block-login-hr{\r\n            width: 1px;\r\n            height: 30px;\r\n            background: rgba(31, 32, 65, 0.1);\r\n            margin: 0 20px;\r\n          }\r\n        }\t\t\r\n      }   \r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .header{\r\n\r\n    .header__content-container{\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .header__links{ \r\n    margin: 0 20px; \r\n  }\r\n}\r\n\r\n@media (max-width: 960px){\r\n  .header__links{\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    .header__block-menu{\r\n      flex-direction: column;\r\n      justify-content: center;\r\n\r\n      .header__menu-li{\r\n\r\n        &:nth-child(1){\r\n          margin-left: 0;\r\n        }\r\n      }\r\n\r\n      .btn_border{\r\n\r\n        &.btn_header{\r\n           margin-left: 0;\r\n        }\r\n      }\r\n\r\n      .header__block-login-hr{\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 620px){\r\n  .header__links{\r\n\r\n    .btn_border{\r\n      \r\n      &.btn_header{\r\n         margin-left: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 530px){\r\n  .header__menu{\r\n    flex-direction: column;\r\n    \r\n    .header__menu-li{\r\n      margin: 5px 0!important;\r\n    }\r\n  }\r\n\r\n  .header__block-login{\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n\r\n    .btn{ \r\n      margin: 15px 10px!important;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const c=u},3841:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s),i=n(1667),d=n.n(i),l=n(2478),u=o()(a()),_=d()(l.Z);u.push([e.id,".input-text{position:relative;width:100%}.input-text.input-text_subscription{margin-top:10px}.input-text.input-text_subscription:after{content:'';width:20px;height:20px;cursor:pointer;position:absolute;bottom:11px;right:11px;background-repeat:no-repeat;background-image:url("+_+")}.input-text .input-text__input{width:100%;color:rgba(31,32,65,0.25);outline:none;font-size:14px;border:1px solid rgba(31,32,65,0.25);box-sizing:border-box;border-radius:4px;height:44px;padding:8px 14px;margin-top:5px;font-family:Montserrat, Arial, sans-serif;font-weight:normal;font-style:normal}.input-text .input-text__input:hover,.input-text .input-text__input.input-text__input_hover{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5);font-weight:bold}.input-text .input-text__input:focus{color:rgba(31,32,65,0.75);border:1px solid rgba(31,32,65,0.5)}.input-text ::-webkit-input-placeholder{color:rgba(31,32,65,0.25)}.input-text :-ms-input-placeholder{color:rgba(31,32,65,0.25)}.input-text ::-moz-placeholder{color:rgba(31,32,65,0.25)}.input-text :-moz-placeholder{color:rgba(31,32,65,0.25)}\n","",{version:3,sources:["webpack://./src/blocks/elements/input-text/input-text.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CAClB,UAAW,CAFb,oCAKI,eAAgB,CALpB,0CAQM,UAAW,CACX,UAAW,CACX,WAAY,CACZ,cAAe,CACf,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,2BAA4B,CAC5B,wDAA+C,CAhBrD,+BAqBI,UAAW,CACX,yBAA6B,CAC7B,YAAa,CACb,cAAe,CACf,oCAAwC,CACxC,qBAAsB,CACtB,iBAAkB,CAClB,WAAY,CACZ,gBAAiB,CACjB,cAAe,CACf,yCAA0C,CAC1C,kBAAmB,CACnB,iBAAkB,CAjCtB,4FAqCM,yBAA6B,CAC7B,mCAAuC,CACvC,gBAAiB,CAvCvB,qCA0CM,yBAA6B,CAC7B,mCAAuC,CA3C7C,wCAgDI,yBAA6B,CAhDjC,mCAmDI,yBAA6B,CAnDjC,+BAsDI,yBAA6B,CAtDjC,8BAyDI,yBAA6B",sourcesContent:[".input-text{\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  &.input-text_subscription{\r\n    margin-top: 10px;\r\n  \r\n    &:after{\r\n      content: '';\r\n      width: 20px;\r\n      height: 20px;\r\n      cursor: pointer;\r\n      position: absolute;\r\n      bottom: 11px;\r\n      right: 11px;\r\n      background-repeat: no-repeat;\r\n      background-image: url('../../../img/arrow.svg');\r\n    }\r\n  }\r\n\r\n  .input-text__input{\r\n    width: 100%;\r\n    color: rgba(31, 32, 65, 0.25);\r\n    outline: none;\r\n    font-size: 14px;\r\n    border: 1px solid rgba(31, 32, 65, 0.25);\r\n    box-sizing: border-box;\r\n    border-radius: 4px;\r\n    height: 44px;\r\n    padding: 8px 14px;\r\n    margin-top: 5px;\r\n    font-family: Montserrat, Arial, sans-serif;\r\n    font-weight: normal;\r\n    font-style: normal;    \r\n\r\n    &:hover,\r\n    &.input-text__input_hover{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n      font-weight: bold;\r\n    }\r\n    &:focus{\r\n      color: rgba(31, 32, 65, 0.75);\r\n      border: 1px solid rgba(31, 32, 65, 0.5);\r\n    }\r\n  }\r\n\r\n  ::-webkit-input-placeholder { /* Chrome */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-ms-input-placeholder { /* IE 10+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  ::-moz-placeholder { /* Firefox 19+ */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n  :-moz-placeholder { /* Firefox 4 - 18 */\r\n    color: rgba(31, 32, 65, 0.25);\r\n  }\r\n}"],sourceRoot:""}]);const c=u},4453:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s)()(a());o.push([e.id,".link{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:bold;font-size:12px;line-height:15px;height:15px;color:#BC9CFF;text-transform:uppercase;cursor:pointer;margin:15px 20px 15px 0;-webkit-user-select:none;text-decoration:none}.link.link_clean{color:rgba(31,32,65,0.5)}.link.link_lux{margin:0 0 0 3px}.link:hover{text-decoration:underline}\n","",{version:3,sources:["webpack://./src/blocks/elements/link/link.scss"],names:[],mappings:"AAAA,MACE,yCAA0C,CAC1C,iBAAkB,CAClB,gBAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,WAAY,CACZ,aAAc,CACd,wBAAyB,CACzB,cAAe,CACf,uBAAwB,CACxB,wBAAyB,CACzB,oBAAqB,CAZvB,iBAeI,wBAA4B,CAfhC,eAmBI,gBAAiB,CAnBrB,YAuBI,yBAA0B",sourcesContent:[".link{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  height: 15px;\r\n  color: #BC9CFF;\t\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  margin: 15px 20px 15px 0;\r\n  -webkit-user-select: none;\r\n  text-decoration: none;\r\n\r\n  &.link_clean{\r\n    color: rgba(31, 32, 65, 0.5);\r\n  }\r\n  \r\n  &.link_lux{\r\n    margin: 0 0 0 3px;\r\n  }\r\n\r\n  &:hover{\r\n    text-decoration: underline;\r\n  }\r\n}"],sourceRoot:""}]);const i=o},1986:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s)()(a());o.push([e.id,".topic-label{display:flex;justify-content:space-between}.topic-label h3,.topic-label p{margin:0}.topic-label p{font-size:12px;line-height:11px;text-transform:uppercase;color:#1F2041}\n","",{version:3,sources:["webpack://./src/blocks/elements/topic-label/topic-label.scss"],names:[],mappings:"AAAA,aACE,YAAa,CACb,6BAA8B,CAFhC,+BAKI,QAAS,CALb,eASI,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CACzB,aAAc",sourcesContent:[".topic-label{\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  h3,p{\r\n    margin: 0;\r\n  }\r\n\r\n  p{\r\n    font-size: 12px;\r\n    line-height: 11px;\r\n    text-transform: uppercase;\r\n    color: #1F2041;\r\n  }\r\n}"],sourceRoot:""}]);const i=o},4800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s)()(a());o.push([e.id,".start-page{padding:80px 8.4%}.start-page .start-page__links{display:flex;flex-direction:column}body{margin:0;padding:0;font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:normal;font-size:13.7px;line-height:24px;color:rgba(31,32,65,0.75);min-width:320px}h1{font-family:Montserrat, Arial, sans-serif;font-size:24px;line-height:30px}h2{font-family:Montserrat, Arial, sans-serif;font-size:19px;line-height:24px}h3{font-family:Montserrat, Arial, sans-serif;font-size:12px;line-height:15px;text-transform:uppercase}h1,h2,h3{margin:0}body,p{font-family:Montserrat, Arial, sans-serif;font-style:normal;font-weight:normal;font-size:14px;line-height:24px}\n","",{version:3,sources:["webpack://./src/index.scss"],names:[],mappings:"AAAA,YACE,iBAAkB,CADpB,+BAII,YAAa,CACb,qBAAsB,CACvB,KAID,QAAS,CACT,SAAU,CACV,yCAA0C,CAC1C,iBAAkB,CAClB,kBAAmB,CACnB,gBAAiB,CACjB,gBAAiB,CACjB,yBAA6B,CAC7B,eAAgB,CACjB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CAClB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CAClB,GAGC,yCAA0C,CAC1C,cAAe,CACf,gBAAiB,CACjB,wBAAyB,CAC1B,SAGC,QAAS,CACV,OAGC,yCAA0C,CAC1C,iBAAkB,CAClB,kBAAmB,CACnB,cAAe,CACf,gBAAiB",sourcesContent:[".start-page{\r\n  padding: 80px 8.4%;\r\n\r\n  .start-page__links{\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n\r\nbody{\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 13.7px;\r\n  line-height: 24px;\r\n  color: rgba(31, 32, 65, 0.75);\r\n  min-width: 320px;\r\n}\r\n\r\nh1{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 24px;\r\n  line-height: 30px;\r\n}\r\n\r\nh2{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 19px;\r\n  line-height: 24px;\r\n}\r\n\r\nh3{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-size: 12px;\r\n  line-height: 15px;\r\n  text-transform: uppercase;\r\n}\r\n\r\nh1,h2,h3{\r\n  margin: 0;\r\n}\r\n\r\nbody,p{\r\n  font-family: Montserrat, Arial, sans-serif;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n}\r\n"],sourceRoot:""}]);const i=o},3182:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s),i=n(1667),d=n.n(i),l=n(8250),u=o()(a()),_=d()(l.Z);u.push([e.id,".landing-page{background-image:url("+_+");height:57.5vw;background-size:cover;background-position:bottom;width:100%;position:relative}.landing-page .landing-page__content-container{min-width:320px;min-width:320px;margin:0 9.7%;display:flex}.landing-page .landing-page__content-container.landing-page__content-container_flex-end{justify-content:flex-end}.landing-page .landing-page__content-container .landing-page__label{margin-right:-0.4%;bottom:5px;width:297px;height:48px;text-align:right;color:rgba(31,32,65,0.75)}.landing-page .landing-page__label{position:absolute}@media (max-width: 1170px){.landing-page .landing-page__content-container{margin-left:20px}.landing-page .landing-page__label{padding-right:20px}}@media (max-width: 820px){.landing-page{background:none;height:auto;position:inherit}.landing-page .content_container__flexend{background-image:url("+_+");width:100%;height:61vw;background-size:cover;position:relative}.landing-page .landing-page__content-container{display:flex;justify-content:center;margin:0}.landing-page .landing-page__content-container .form-search-num{margin:20px 0;position:inherit}.landing-page .landing-page__label{display:none}}\n","",{version:3,sources:["webpack://./src/pages/landing-page/landing-page.scss"],names:[],mappings:"AAAA,cACE,wDAAmC,CACnC,aAAc,CACd,qBAAsB,CACtB,0BAA2B,CAC3B,UAAW,CACX,iBAAkB,CANpB,+CASI,eAAgB,CAChB,eAAgB,CAChB,aAAc,CACd,YAAa,CAZjB,wFAeM,wBAAyB,CAf/B,oEAmBM,kBAAmB,CACnB,UAAW,CACX,WAAY,CACZ,WAAY,CACZ,gBAAiB,CACjB,yBAA6B,CAxBnC,mCA6BI,iBAAiB,CAClB,2BAID,+CAGI,gBAAiB,CAHrB,mCAOI,kBAAmB,CACpB,CAIL,0BACE,cACE,eAAgB,CAChB,WAAY,CACZ,gBAAiB,CAHnB,0CAMI,wDAAmC,CACnC,UAAW,CACX,WAAY,CACZ,qBAAsB,CACtB,iBAAkB,CAVtB,+CAcI,YAAa,CACb,sBAAuB,CACvB,QAAS,CAhBb,gEAmBM,aAAc,CACd,gBAAiB,CApBvB,mCAyBI,YAAa,CACd",sourcesContent:[".landing-page{\r\n  background-image: url('image3.png');\r\n  height: 57.5vw;\r\n  background-size: cover;\r\n  background-position: bottom;\r\n  width: 100%;\r\n  position: relative;\r\n\r\n  .landing-page__content-container{\r\n    min-width: 320px;\r\n    min-width: 320px;\r\n    margin: 0 9.7%;\r\n    display: flex;\r\n\r\n    &.landing-page__content-container_flex-end{\r\n      justify-content: flex-end;\r\n    }\r\n\r\n    .landing-page__label{\r\n      margin-right: -0.4%;\r\n      bottom: 5px;\r\n      width: 297px;\r\n      height: 48px;\r\n      text-align: right;\r\n      color: rgba(31, 32, 65, 0.75);\r\n    }\r\n  }\r\n\r\n  .landing-page__label{\r\n    position:absolute;\r\n  }\r\n}\r\n\r\n@media (max-width: 1170px){\r\n  .landing-page{\r\n\r\n    .landing-page__content-container {\r\n      margin-left: 20px;\r\n    }\r\n\r\n    .landing-page__label{\r\n      padding-right: 20px;\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 820px){\r\n  .landing-page{\r\n    background: none;\r\n    height: auto;\r\n    position: inherit;\r\n\r\n    .content_container__flexend{\r\n      background-image: url('image3.png');\r\n      width: 100%;\r\n      height: 61vw;\r\n      background-size: cover;\t\r\n      position: relative;\r\n    }\r\n\r\n    .landing-page__content-container{\r\n      display: flex;\r\n      justify-content: center;\r\n      margin: 0;\r\n      \r\n      .form-search-num{\r\n        margin: 20px 0;\r\n        position: inherit;\r\n      }\r\n    }\r\n    \r\n    .landing-page__label{\r\n      display: none;\r\n    }\r\n  }\r\n}"],sourceRoot:""}]);const c=u},6647:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(4015),a=n.n(r),s=n(3645),o=n.n(s),i=n(1667),d=n.n(i),l=n(3988),u=n(7771),_=n(7869),c=o()(a()),m=d()(l),h=d()(u),p=d()(_);c.push([e.id,"/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n  url("+m+") format('woff2'), \r\n  url("+h+") format('woff'), \r\n  url("+p+") format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-size: 13.7px;\r\n}","",{version:3,sources:["webpack://./src/font/fonts.css"],names:[],mappings:"AAAA,aAAa;;AAEb;EACE,yBAAyB;EACzB;;;4DAGqE;EACrE,gBAAgB;EAChB,kBAAkB;EAClB,iBAAiB;AACnB",sourcesContent:["/*Montserrat*/\r\n\r\n@font-face {\r\n  font-family: 'Montserrat';\r\n  src: local('Montserrat Regular'), local('Montserrat-Regular'),\r\n  url('./montserrat-regular/montserrat-regular.woff2') format('woff2'), \r\n  url('./montserrat-regular/montserrat-regular.woff') format('woff'), \r\n  url('./montserrat-regular/montserrat-regular.ttf') format('truetype');\r\n  font-weight: 100;\r\n  font-style: normal;\r\n  font-size: 13.7px;\r\n}"],sourceRoot:""}]);const f=c},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var s=0;s<this.length;s++){var o=this[s][0];null!=o&&(a[o]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);r&&a[d[0]]||(n&&(d[2]?d[2]="".concat(n," and ").concat(d[2]):d[2]=n),t.push(d))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,s=void 0;try{for(var o,i=e[Symbol.iterator]();!(r=(o=i.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,s=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw s}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=a[1],o=a[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),l="/*# ".concat(d," */"),u=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[s].concat(u).concat([l]).join("\n")}return[s].join("\n")}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},8176:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},773:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"d00fde534b9a762845437465e1545a24.svg"},2478:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"8f2fdfdd62bc84032dd6fa05dbfac6e9.svg"},8966:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"afc284d3c92092876cda0422f86ad37f.svg"},8250:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"7b6bd7bea593a0d9bcf49ad0629ff11f.png"},9755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,a){"use strict";var s=[],o=Object.getPrototypeOf,i=s.slice,d=s.flat?function(e){return s.flat.call(e)}:function(e){return s.concat.apply([],e)},l=s.push,u=s.indexOf,_={},c=_.toString,m=_.hasOwnProperty,h=m.toString,p=h.call(Object),f={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},M=r.document,L={type:!0,src:!0,nonce:!0,noModule:!0};function Y(e,t,n){var r,a,s=(n=n||M).createElement("script");if(s.text=e,t)for(r in L)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&s.setAttribute(r,a);n.head.appendChild(s).parentNode.removeChild(s)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?_[c.call(e)]||"object":typeof e}var b="3.6.0",A=function(e,t){return new A.fn.init(e,t)};function w(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}A.fn=A.prototype={jquery:b,constructor:A,length:0,toArray:function(){return i.call(this)},get:function(e){return null==e?i.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=A.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return A.each(this,e)},map:function(e){return this.pushStack(A.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(i.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(A.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(A.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:s.sort,splice:s.splice},A.extend=A.fn.extend=function(){var e,t,n,r,a,s,o=arguments[0]||{},i=1,d=arguments.length,l=!1;for("boolean"==typeof o&&(l=o,o=arguments[i]||{},i++),"object"==typeof o||g(o)||(o={}),i===d&&(o=this,i--);i<d;i++)if(null!=(e=arguments[i]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(l&&r&&(A.isPlainObject(r)||(a=Array.isArray(r)))?(n=o[t],s=a&&!Array.isArray(n)?[]:a||A.isPlainObject(n)?n:{},a=!1,o[t]=A.extend(l,s,r)):void 0!==r&&(o[t]=r));return o},A.extend({expando:"jQuery"+(b+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e)||(t=o(e))&&("function"!=typeof(n=m.call(t,"constructor")&&t.constructor)||h.call(n)!==p))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){Y(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(w(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?A.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,s=e.length,o=!n;a<s;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,s=0,o=[];if(w(e))for(r=e.length;s<r;s++)null!=(a=t(e[s],s,n))&&o.push(a);else for(s in e)null!=(a=t(e[s],s,n))&&o.push(a);return d(o)},guid:1,support:f}),"function"==typeof Symbol&&(A.fn[Symbol.iterator]=s[Symbol.iterator]),A.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){_["[object "+t+"]"]=t.toLowerCase()}));var v=function(e){var t,n,r,a,s,o,i,d,l,u,_,c,m,h,p,f,g,y,M,L="sizzle"+1*new Date,Y=e.document,k=0,b=0,A=de(),w=de(),v=de(),D=de(),x=function(e,t){return e===t&&(_=!0),0},T={}.hasOwnProperty,C=[],S=C.pop,j=C.push,H=C.push,B=C.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},W="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",E="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\[[\\x20\\t\\r\\n\\f]*("+P+")(?:"+E+"*([*^$|!~]?=)"+E+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+E+"*\\]",z=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",N=new RegExp(E+"+","g"),I=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),R=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),q=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),J=new RegExp(E+"|>"),U=new RegExp(z),G=new RegExp("^"+P+"$"),Z={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+W+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},V=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=function(){c()},oe=Le((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{H.apply(C=B.call(Y.childNodes),Y.childNodes),C[Y.childNodes.length].nodeType}catch(e){H={apply:C.length?function(e,t){j.apply(e,B.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,a){var s,i,l,u,_,h,g,y=t&&t.ownerDocument,Y=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==Y&&9!==Y&&11!==Y)return r;if(!a&&(c(t),t=t||m,p)){if(11!==Y&&(_=X.exec(e)))if(s=_[1]){if(9===Y){if(!(l=t.getElementById(s)))return r;if(l.id===s)return r.push(l),r}else if(y&&(l=y.getElementById(s))&&M(t,l)&&l.id===s)return r.push(l),r}else{if(_[2])return H.apply(r,t.getElementsByTagName(e)),r;if((s=_[3])&&n.getElementsByClassName&&t.getElementsByClassName)return H.apply(r,t.getElementsByClassName(s)),r}if(n.qsa&&!D[e+" "]&&(!f||!f.test(e))&&(1!==Y||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===Y&&(J.test(e)||q.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(re,ae):t.setAttribute("id",u=L)),i=(h=o(e)).length;i--;)h[i]=(u?"#"+u:":scope")+" "+Me(h[i]);g=h.join(",")}try{return H.apply(r,y.querySelectorAll(g)),r}catch(t){D(e,!0)}finally{u===L&&t.removeAttribute("id")}}}return d(e.replace(I,"$1"),t,r,a)}function de(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function le(e){return e[L]=!0,e}function ue(e){var t=m.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function _e(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function me(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return le((function(t){return t=+t,le((function(n,r){for(var a,s=e([],n.length,t),o=s.length;o--;)n[a=s[o]]&&(n[a]=!(r[a]=n[a]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},s=ie.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!V.test(t||n&&n.nodeName||"HTML")},c=ie.setDocument=function(e){var t,a,o=e?e.ownerDocument||e:Y;return o!=m&&9===o.nodeType&&o.documentElement?(h=(m=o).documentElement,p=!s(m),Y!=m&&(a=m.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",se,!1):a.attachEvent&&a.attachEvent("onunload",se)),n.scope=ue((function(e){return h.appendChild(e).appendChild(m.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(m.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(m.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=L,!m.getElementsByName||!m.getElementsByName(L).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n,r,a,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(a=t.getElementsByName(e),r=0;s=a[r++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[a++];)1===n.nodeType&&r.push(n);return r}return s},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&p)return t.getElementsByClassName(e)},g=[],f=[],(n.qsa=K.test(m.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+L+"'></a><select id='"+L+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&f.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||f.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+W+")"),e.querySelectorAll("[id~="+L+"-]").length||f.push("~="),(t=m.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||f.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||f.push(":checked"),e.querySelectorAll("a#"+L+"+*").length||f.push(".#.+[+~]"),e.querySelectorAll("\\\f"),f.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=m.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&f.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&f.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),f.push(",.*:")}))),(n.matchesSelector=K.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",z)})),f=f.length&&new RegExp(f.join("|")),g=g.length&&new RegExp(g.join("|")),t=K.test(h.compareDocumentPosition),M=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},x=t?function(e,t){if(e===t)return _=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==m||e.ownerDocument==Y&&M(Y,e)?-1:t==m||t.ownerDocument==Y&&M(Y,t)?1:u?O(u,e)-O(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return _=!0,0;var n,r=0,a=e.parentNode,s=t.parentNode,o=[e],i=[t];if(!a||!s)return e==m?-1:t==m?1:a?-1:s?1:u?O(u,e)-O(u,t):0;if(a===s)return ce(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)i.unshift(n);for(;o[r]===i[r];)r++;return r?ce(o[r],i[r]):o[r]==Y?-1:i[r]==Y?1:0},m):m},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if(c(e),n.matchesSelector&&p&&!D[t+" "]&&(!g||!g.test(t))&&(!f||!f.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){D(t,!0)}return ie(t,m,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!=m&&c(e),M(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!=m&&c(e);var a=r.attrHandle[t.toLowerCase()],s=a&&T.call(r.attrHandle,t.toLowerCase())?a(e,t,!p):void 0;return void 0!==s?s:n.attributes||!p?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},ie.escape=function(e){return(e+"").replace(re,ae)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],a=0,s=0;if(_=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(x),_){for(;t=e[s++];)t===e[s]&&(a=r.push(s));for(;a--;)e.splice(r[a],1)}return u=null,e},a=ie.getText=function(e){var t,n="",r=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:le,match:Z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+E+"|$)"))&&A(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var a=ie.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(N," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),i="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,d){var l,u,_,c,m,h,p=s!==o?"nextSibling":"previousSibling",f=t.parentNode,g=i&&t.nodeName.toLowerCase(),y=!d&&!i,M=!1;if(f){if(s){for(;p;){for(c=t;c=c[p];)if(i?c.nodeName.toLowerCase()===g:1===c.nodeType)return!1;h=p="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?f.firstChild:f.lastChild],o&&y){for(M=(m=(l=(u=(_=(c=f)[L]||(c[L]={}))[c.uniqueID]||(_[c.uniqueID]={}))[e]||[])[0]===k&&l[1])&&l[2],c=m&&f.childNodes[m];c=++m&&c&&c[p]||(M=m=0)||h.pop();)if(1===c.nodeType&&++M&&c===t){u[e]=[k,m,M];break}}else if(y&&(M=m=(l=(u=(_=(c=t)[L]||(c[L]={}))[c.uniqueID]||(_[c.uniqueID]={}))[e]||[])[0]===k&&l[1]),!1===M)for(;(c=++m&&c&&c[p]||(M=m=0)||h.pop())&&((i?c.nodeName.toLowerCase()!==g:1!==c.nodeType)||!++M||(y&&((u=(_=c[L]||(c[L]={}))[c.uniqueID]||(_[c.uniqueID]={}))[e]=[k,M]),c!==t)););return(M-=a)===r||M%r==0&&M/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return a[L]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var r,s=a(e,t),o=s.length;o--;)e[r=O(e,s[o])]=!(n[r]=s[o])})):function(e){return a(e,0,n)}):a}},pseudos:{not:le((function(e){var t=[],n=[],r=i(e.replace(I,"$1"));return r[L]?le((function(e,t,n,a){for(var s,o=r(e,null,a,[]),i=e.length;i--;)(s=o[i])&&(e[i]=!(t[i]=s))})):function(e,a,s){return t[0]=e,r(t,null,s,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return ie(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||a(t)).indexOf(e)>-1}})),lang:le((function(e){return G.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=p?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===m.activeElement&&(!m.hasFocus||m.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe((function(){return[0]})),last:fe((function(e,t){return[t-1]})),eq:fe((function(e,t,n){return[n<0?n+t:n]})),even:fe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:fe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:fe((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:fe((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=me(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function Me(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function Le(e,t,n){var r=t.dir,a=t.next,s=a||r,o=n&&"parentNode"===s,i=b++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,a);return!1}:function(t,n,d){var l,u,_,c=[k,i];if(d){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,d))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(u=(_=t[L]||(t[L]={}))[t.uniqueID]||(_[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=u[s])&&l[0]===k&&l[1]===i)return c[2]=l[2];if(u[s]=c,c[2]=e(t,n,d))return!0}return!1}}function Ye(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function ke(e,t,n,r,a){for(var s,o=[],i=0,d=e.length,l=null!=t;i<d;i++)(s=e[i])&&(n&&!n(s,r,a)||(o.push(s),l&&t.push(i)));return o}function be(e,t,n,r,a,s){return r&&!r[L]&&(r=be(r)),a&&!a[L]&&(a=be(a,s)),le((function(s,o,i,d){var l,u,_,c=[],m=[],h=o.length,p=s||function(e,t,n){for(var r=0,a=t.length;r<a;r++)ie(e,t[r],n);return n}(t||"*",i.nodeType?[i]:i,[]),f=!e||!s&&t?p:ke(p,c,e,i,d),g=n?a||(s?e:h||r)?[]:o:f;if(n&&n(f,g,i,d),r)for(l=ke(g,m),r(l,[],i,d),u=l.length;u--;)(_=l[u])&&(g[m[u]]=!(f[m[u]]=_));if(s){if(a||e){if(a){for(l=[],u=g.length;u--;)(_=g[u])&&l.push(f[u]=_);a(null,g=[],l,d)}for(u=g.length;u--;)(_=g[u])&&(l=a?O(s,_):c[u])>-1&&(s[l]=!(o[l]=_))}}else g=ke(g===o?g.splice(h,g.length):g),a?a(null,o,g,d):H.apply(o,g)}))}function Ae(e){for(var t,n,a,s=e.length,o=r.relative[e[0].type],i=o||r.relative[" "],d=o?1:0,u=Le((function(e){return e===t}),i,!0),_=Le((function(e){return O(t,e)>-1}),i,!0),c=[function(e,n,r){var a=!o&&(r||n!==l)||((t=n).nodeType?u(e,n,r):_(e,n,r));return t=null,a}];d<s;d++)if(n=r.relative[e[d].type])c=[Le(Ye(c),n)];else{if((n=r.filter[e[d].type].apply(null,e[d].matches))[L]){for(a=++d;a<s&&!r.relative[e[a].type];a++);return be(d>1&&Ye(c),d>1&&Me(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(I,"$1"),n,d<a&&Ae(e.slice(d,a)),a<s&&Ae(e=e.slice(a)),a<s&&Me(e))}c.push(n)}return Ye(c)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,o=ie.tokenize=function(e,t){var n,a,s,o,i,d,l,u=w[e+" "];if(u)return t?0:u.slice(0);for(i=e,d=[],l=r.preFilter;i;){for(o in n&&!(a=R.exec(i))||(a&&(i=i.slice(a[0].length)||i),d.push(s=[])),n=!1,(a=q.exec(i))&&(n=a.shift(),s.push({value:n,type:a[0].replace(I," ")}),i=i.slice(n.length)),r.filter)!(a=Z[o].exec(i))||l[o]&&!(a=l[o](a))||(n=a.shift(),s.push({value:n,type:o,matches:a}),i=i.slice(n.length));if(!n)break}return t?i.length:i?ie.error(e):w(e,d).slice(0)},i=ie.compile=function(e,t){var n,a=[],s=[],i=v[e+" "];if(!i){for(t||(t=o(e)),n=t.length;n--;)(i=Ae(t[n]))[L]?a.push(i):s.push(i);(i=v(e,function(e,t){var n=t.length>0,a=e.length>0,s=function(s,o,i,d,u){var _,h,f,g=0,y="0",M=s&&[],L=[],Y=l,b=s||a&&r.find.TAG("*",u),A=k+=null==Y?1:Math.random()||.1,w=b.length;for(u&&(l=o==m||o||u);y!==w&&null!=(_=b[y]);y++){if(a&&_){for(h=0,o||_.ownerDocument==m||(c(_),i=!p);f=e[h++];)if(f(_,o||m,i)){d.push(_);break}u&&(k=A)}n&&((_=!f&&_)&&g--,s&&M.push(_))}if(g+=y,n&&y!==g){for(h=0;f=t[h++];)f(M,L,o,i);if(s){if(g>0)for(;y--;)M[y]||L[y]||(L[y]=S.call(d));L=ke(L)}H.apply(d,L),u&&!s&&L.length>0&&g+t.length>1&&ie.uniqueSort(d)}return u&&(k=A,l=Y),M};return n?le(s):s}(s,a))).selector=e}return i},d=ie.select=function(e,t,n,a){var s,d,l,u,_,c="function"==typeof e&&e,m=!a&&o(e=c.selector||e);if(n=n||[],1===m.length){if((d=m[0]=m[0].slice(0)).length>2&&"ID"===(l=d[0]).type&&9===t.nodeType&&p&&r.relative[d[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(s=Z.needsContext.test(e)?0:d.length;s--&&(l=d[s],!r.relative[u=l.type]);)if((_=r.find[u])&&(a=_(l.matches[0].replace(te,ne),ee.test(d[0].type)&&ge(t.parentNode)||t))){if(d.splice(s,1),!(e=a.length&&Me(d)))return H.apply(n,a),n;break}}return(c||i(e,m))(a,t,!p,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=L.split("").sort(x).join("")===L,n.detectDuplicates=!!_,c(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(m.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||_e("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||_e("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||_e(W,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),ie}(r);A.find=v,A.expr=v.selectors,A.expr[":"]=A.expr.pseudos,A.uniqueSort=A.unique=v.uniqueSort,A.text=v.getText,A.isXMLDoc=v.isXML,A.contains=v.contains,A.escapeSelector=v.escape;var D=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&A(e).is(n))break;r.push(e)}return r},x=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},T=A.expr.match.needsContext;function C(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var S=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return g(t)?A.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?A.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?A.grep(e,(function(e){return u.call(t,e)>-1!==n})):A.filter(t,e,n)}A.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?A.find.matchesSelector(r,e)?[r]:[]:A.find.matches(e,A.grep(t,(function(e){return 1===e.nodeType})))},A.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(A(e).filter((function(){for(t=0;t<r;t++)if(A.contains(a[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)A.find(e,a[t],n);return r>1?A.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&T.test(e)?A(e):e||[],!1).length}});var H,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(A.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||H,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:B.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof A?t[0]:t,A.merge(this,A.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:M,!0)),S.test(r[1])&&A.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=M.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(A):A.makeArray(e,this)}).prototype=A.fn,H=A(M);var O=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function E(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}A.fn.extend({has:function(e){var t=A(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(A.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,a=this.length,s=[],o="string"!=typeof e&&A(e);if(!T.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&A.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?A.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?u.call(A(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(A.uniqueSort(A.merge(this.get(),A(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),A.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return D(e,"parentNode")},parentsUntil:function(e,t,n){return D(e,"parentNode",n)},next:function(e){return E(e,"nextSibling")},prev:function(e){return E(e,"previousSibling")},nextAll:function(e){return D(e,"nextSibling")},prevAll:function(e){return D(e,"previousSibling")},nextUntil:function(e,t,n){return D(e,"nextSibling",n)},prevUntil:function(e,t,n){return D(e,"previousSibling",n)},siblings:function(e){return x((e.parentNode||{}).firstChild,e)},children:function(e){return x(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(C(e,"template")&&(e=e.content||e),A.merge([],e.childNodes))}},(function(e,t){A.fn[e]=function(n,r){var a=A.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=A.filter(r,a)),this.length>1&&(W[e]||A.uniqueSort(a),O.test(e)&&a.reverse()),this.pushStack(a)}}));var P=/[^\x20\t\r\n\f]+/g;function F(e){return e}function z(e){throw e}function N(e,t,n,r){var a;try{e&&g(a=e.promise)?a.call(e).done(t).fail(n):e&&g(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}A.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return A.each(e.match(P)||[],(function(e,n){t[n]=!0})),t}(e):A.extend({},e);var t,n,r,a,s=[],o=[],i=-1,d=function(){for(a=a||e.once,r=t=!0;o.length;i=-1)for(n=o.shift();++i<s.length;)!1===s[i].apply(n[0],n[1])&&e.stopOnFalse&&(i=s.length,n=!1);e.memory||(n=!1),t=!1,a&&(s=n?[]:"")},l={add:function(){return s&&(n&&!t&&(i=s.length-1,o.push(n)),function t(n){A.each(n,(function(n,r){g(r)?e.unique&&l.has(r)||s.push(r):r&&r.length&&"string"!==k(r)&&t(r)}))}(arguments),n&&!t&&d()),this},remove:function(){return A.each(arguments,(function(e,t){for(var n;(n=A.inArray(t,s,n))>-1;)s.splice(n,1),n<=i&&i--})),this},has:function(e){return e?A.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return a=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return a=o=[],n||t||(s=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||d()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},A.extend({Deferred:function(e){var t=[["notify","progress",A.Callbacks("memory"),A.Callbacks("memory"),2],["resolve","done",A.Callbacks("once memory"),A.Callbacks("once memory"),0,"resolved"],["reject","fail",A.Callbacks("once memory"),A.Callbacks("once memory"),1,"rejected"]],n="pending",a={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return A.Deferred((function(n){A.each(t,(function(t,r){var a=g(e[r[4]])&&e[r[4]];s[r[1]]((function(){var e=a&&a.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,a){var s=0;function o(e,t,n,a){return function(){var i=this,d=arguments,l=function(){var r,l;if(!(e<s)){if((r=n.apply(i,d))===t.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,g(l)?a?l.call(r,o(s,t,F,a),o(s,t,z,a)):(s++,l.call(r,o(s,t,F,a),o(s,t,z,a),o(s,t,F,t.notifyWith))):(n!==F&&(i=void 0,d=[r]),(a||t.resolveWith)(i,d))}},u=a?l:function(){try{l()}catch(r){A.Deferred.exceptionHook&&A.Deferred.exceptionHook(r,u.stackTrace),e+1>=s&&(n!==z&&(i=void 0,d=[r]),t.rejectWith(i,d))}};e?u():(A.Deferred.getStackHook&&(u.stackTrace=A.Deferred.getStackHook()),r.setTimeout(u))}}return A.Deferred((function(r){t[0][3].add(o(0,r,g(a)?a:F,r.notifyWith)),t[1][3].add(o(0,r,g(e)?e:F)),t[2][3].add(o(0,r,g(n)?n:z))})).promise()},promise:function(e){return null!=e?A.extend(e,a):a}},s={};return A.each(t,(function(e,r){var o=r[2],i=r[5];a[r[1]]=o.add,i&&o.add((function(){n=i}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(r[3].fire),s[r[0]]=function(){return s[r[0]+"With"](this===s?void 0:this,arguments),this},s[r[0]+"With"]=o.fireWith})),a.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,r=Array(n),a=i.call(arguments),s=A.Deferred(),o=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?i.call(arguments):n,--t||s.resolveWith(r,a)}};if(t<=1&&(N(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||g(a[n]&&a[n].then)))return s.then();for(;n--;)N(a[n],o(n),s.reject);return s.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;A.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&I.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},A.readyException=function(e){r.setTimeout((function(){throw e}))};var R=A.Deferred();function q(){M.removeEventListener("DOMContentLoaded",q),r.removeEventListener("load",q),A.ready()}A.fn.ready=function(e){return R.then(e).catch((function(e){A.readyException(e)})),this},A.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--A.readyWait:A.isReady)||(A.isReady=!0,!0!==e&&--A.readyWait>0||R.resolveWith(M,[A]))}}),A.ready.then=R.then,"complete"===M.readyState||"loading"!==M.readyState&&!M.documentElement.doScroll?r.setTimeout(A.ready):(M.addEventListener("DOMContentLoaded",q),r.addEventListener("load",q));var J=function(e,t,n,r,a,s,o){var i=0,d=e.length,l=null==n;if("object"===k(n))for(i in a=!0,n)J(e,t,i,n[i],!0,s,o);else if(void 0!==r&&(a=!0,g(r)||(o=!0),l&&(o?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(A(e),n)})),t))for(;i<d;i++)t(e[i],n,o?r:r.call(e[i],i,t(e[i],n)));return a?e:l?t.call(e):d?t(e[0],n):s},U=/^-ms-/,G=/-([a-z])/g;function Z(e,t){return t.toUpperCase()}function V(e){return e.replace(U,"ms-").replace(G,Z)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=A.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[V(t)]=n;else for(r in t)a[V(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(P)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||A.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!A.isEmptyObject(t)}};var K=new Q,X=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}X.set(e,t,n)}else n=void 0;return n}A.extend({hasData:function(e){return X.hasData(e)||K.hasData(e)},data:function(e,t,n){return X.access(e,t,n)},removeData:function(e,t){X.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),A.fn.extend({data:function(e,t){var n,r,a,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(a=X.get(s),1===s.nodeType&&!K.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=V(r.slice(5)),ne(s,r,a[r]));K.set(s,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each((function(){X.set(this,e)})):J(this,(function(t){var n;if(s&&void 0===t)return void 0!==(n=X.get(s,e))||void 0!==(n=ne(s,e))?n:void 0;this.each((function(){X.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){X.remove(this,e)}))}}),A.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,A.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=A.queue(e,t),r=n.length,a=n.shift(),s=A._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete s.stop,a.call(e,(function(){A.dequeue(e,t)}),s)),!r&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:A.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),A.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?A.queue(this[0],e):void 0===t?this:this.each((function(){var n=A.queue(this,e,t);A._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&A.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){A.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=A.Deferred(),s=this,o=this.length,i=function(){--r||a.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=K.get(s[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(i));return i(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),se=["Top","Right","Bottom","Left"],oe=M.documentElement,ie=function(e){return A.contains(e.ownerDocument,e)},de={composed:!0};oe.getRootNode&&(ie=function(e){return A.contains(e.ownerDocument,e)||e.getRootNode(de)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===A.css(e,"display")};function ue(e,t,n,r){var a,s,o=20,i=r?function(){return r.cur()}:function(){return A.css(e,t,"")},d=i(),l=n&&n[3]||(A.cssNumber[t]?"":"px"),u=e.nodeType&&(A.cssNumber[t]||"px"!==l&&+d)&&ae.exec(A.css(e,t));if(u&&u[3]!==l){for(d/=2,l=l||u[3],u=+d||1;o--;)A.style(e,t,u+l),(1-s)*(1-(s=i()/d||.5))<=0&&(o=0),u/=s;u*=2,A.style(e,t,u+l),n=n||[]}return n&&(u=+u||+d||0,a=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=u,r.end=a)),a}var _e={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,a=_e[r];return a||(t=n.body.appendChild(n.createElement(r)),a=A.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),_e[r]=a,a)}function me(e,t){for(var n,r,a=[],s=0,o=e.length;s<o;s++)(r=e[s]).style&&(n=r.style.display,t?("none"===n&&(a[s]=K.get(r,"display")||null,a[s]||(r.style.display="")),""===r.style.display&&le(r)&&(a[s]=ce(r))):"none"!==n&&(a[s]="none",K.set(r,"display",n)));for(s=0;s<o;s++)null!=a[s]&&(e[s].style.display=a[s]);return e}A.fn.extend({show:function(){return me(this,!0)},hide:function(){return me(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?A(this).show():A(this).hide()}))}});var he,pe,fe=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=M.createDocumentFragment().appendChild(M.createElement("div")),(pe=M.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),he.appendChild(pe),f.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",f.option=!!he.lastChild;var Me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Le(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&C(e,t)?A.merge([e],n):n}function Ye(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}Me.tbody=Me.tfoot=Me.colgroup=Me.caption=Me.thead,Me.th=Me.td,f.option||(Me.optgroup=Me.option=[1,"<select multiple='multiple'>","</select>"]);var ke=/<|&#?\w+;/;function be(e,t,n,r,a){for(var s,o,i,d,l,u,_=t.createDocumentFragment(),c=[],m=0,h=e.length;m<h;m++)if((s=e[m])||0===s)if("object"===k(s))A.merge(c,s.nodeType?[s]:s);else if(ke.test(s)){for(o=o||_.appendChild(t.createElement("div")),i=(ge.exec(s)||["",""])[1].toLowerCase(),d=Me[i]||Me._default,o.innerHTML=d[1]+A.htmlPrefilter(s)+d[2],u=d[0];u--;)o=o.lastChild;A.merge(c,o.childNodes),(o=_.firstChild).textContent=""}else c.push(t.createTextNode(s));for(_.textContent="",m=0;s=c[m++];)if(r&&A.inArray(s,r)>-1)a&&a.push(s);else if(l=ie(s),o=Le(_.appendChild(s),"script"),l&&Ye(o),n)for(u=0;s=o[u++];)ye.test(s.type||"")&&n.push(s);return _}var Ae=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function ve(){return!1}function De(e,t){return e===function(){try{return M.activeElement}catch(e){}}()==("focus"===t)}function xe(e,t,n,r,a,s){var o,i;if("object"==typeof t){for(i in"string"!=typeof n&&(r=r||n,n=void 0),t)xe(e,i,n,r,t[i],s);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=ve;else if(!a)return e;return 1===s&&(o=a,(a=function(e){return A().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=A.guid++)),e.each((function(){A.event.add(this,t,a,r,n)}))}function Te(e,t,n){n?(K.set(e,t,!1),A.event.add(e,t,{namespace:!1,handler:function(e){var r,a,s=K.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(A.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=i.call(arguments),K.set(this,t,s),r=n(this,t),this[t](),s!==(a=K.get(this,t))||r?K.set(this,t,!1):a={},s!==a)return e.stopImmediatePropagation(),e.preventDefault(),a&&a.value}else s.length&&(K.set(this,t,{value:A.event.trigger(A.extend(s[0],A.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&A.event.add(e,t,we)}A.event={global:{},add:function(e,t,n,r,a){var s,o,i,d,l,u,_,c,m,h,p,f=K.get(e);if($(e))for(n.handler&&(n=(s=n).handler,a=s.selector),a&&A.find.matchesSelector(oe,a),n.guid||(n.guid=A.guid++),(d=f.events)||(d=f.events=Object.create(null)),(o=f.handle)||(o=f.handle=function(t){return void 0!==A&&A.event.triggered!==t.type?A.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(P)||[""]).length;l--;)m=p=(i=Ae.exec(t[l])||[])[1],h=(i[2]||"").split(".").sort(),m&&(_=A.event.special[m]||{},m=(a?_.delegateType:_.bindType)||m,_=A.event.special[m]||{},u=A.extend({type:m,origType:p,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&A.expr.match.needsContext.test(a),namespace:h.join(".")},s),(c=d[m])||((c=d[m]=[]).delegateCount=0,_.setup&&!1!==_.setup.call(e,r,h,o)||e.addEventListener&&e.addEventListener(m,o)),_.add&&(_.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),a?c.splice(c.delegateCount++,0,u):c.push(u),A.event.global[m]=!0)},remove:function(e,t,n,r,a){var s,o,i,d,l,u,_,c,m,h,p,f=K.hasData(e)&&K.get(e);if(f&&(d=f.events)){for(l=(t=(t||"").match(P)||[""]).length;l--;)if(m=p=(i=Ae.exec(t[l])||[])[1],h=(i[2]||"").split(".").sort(),m){for(_=A.event.special[m]||{},c=d[m=(r?_.delegateType:_.bindType)||m]||[],i=i[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=c.length;s--;)u=c[s],!a&&p!==u.origType||n&&n.guid!==u.guid||i&&!i.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(c.splice(s,1),u.selector&&c.delegateCount--,_.remove&&_.remove.call(e,u));o&&!c.length&&(_.teardown&&!1!==_.teardown.call(e,h,f.handle)||A.removeEvent(e,m,f.handle),delete d[m])}else for(m in d)A.event.remove(e,m+t[l],n,r,!0);A.isEmptyObject(d)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,s,o,i=new Array(arguments.length),d=A.event.fix(e),l=(K.get(this,"events")||Object.create(null))[d.type]||[],u=A.event.special[d.type]||{};for(i[0]=d,t=1;t<arguments.length;t++)i[t]=arguments[t];if(d.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,d)){for(o=A.event.handlers.call(this,d,l),t=0;(a=o[t++])&&!d.isPropagationStopped();)for(d.currentTarget=a.elem,n=0;(s=a.handlers[n++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==s.namespace&&!d.rnamespace.test(s.namespace)||(d.handleObj=s,d.data=s.data,void 0!==(r=((A.event.special[s.origType]||{}).handle||s.handler).apply(a.elem,i))&&!1===(d.result=r)&&(d.preventDefault(),d.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,d),d.result}},handlers:function(e,t){var n,r,a,s,o,i=[],d=t.delegateCount,l=e.target;if(d&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(s=[],o={},n=0;n<d;n++)void 0===o[a=(r=t[n]).selector+" "]&&(o[a]=r.needsContext?A(a,this).index(l)>-1:A.find(a,this,null,[l]).length),o[a]&&s.push(r);s.length&&i.push({elem:l,handlers:s})}return l=this,d<t.length&&i.push({elem:l,handlers:t.slice(d)}),i},addProp:function(e,t){Object.defineProperty(A.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[A.expando]?e:new A.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&C(t,"input")&&Te(t,"click",we),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&C(t,"input")&&Te(t,"click"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&C(t,"input")&&K.get(t,"click")||C(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},A.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},A.Event=function(e,t){if(!(this instanceof A.Event))return new A.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:ve,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&A.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[A.expando]=!0},A.Event.prototype={constructor:A.Event,isDefaultPrevented:ve,isPropagationStopped:ve,isImmediatePropagationStopped:ve,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},A.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},A.event.addProp),A.each({focus:"focusin",blur:"focusout"},(function(e,t){A.event.special[e]={setup:function(){return Te(this,e,De),!1},trigger:function(){return Te(this,e),!0},_default:function(){return!0},delegateType:t}})),A.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){A.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,a=e.relatedTarget,s=e.handleObj;return a&&(a===r||A.contains(r,a))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}})),A.fn.extend({on:function(e,t,n,r){return xe(this,e,t,n,r)},one:function(e,t,n,r){return xe(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,A(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ve),this.each((function(){A.event.remove(this,e,n,t)}))}});var Ce=/<script|<style|<link/i,Se=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function He(e,t){return C(e,"table")&&C(11!==t.nodeType?t:t.firstChild,"tr")&&A(e).children("tbody")[0]||e}function Be(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function We(e,t){var n,r,a,s,o,i;if(1===t.nodeType){if(K.hasData(e)&&(i=K.get(e).events))for(a in K.remove(t,"handle events"),i)for(n=0,r=i[a].length;n<r;n++)A.event.add(t,a,i[a][n]);X.hasData(e)&&(s=X.access(e),o=A.extend({},s),X.set(t,o))}}function Ee(e,t){var n=t.nodeName.toLowerCase();"input"===n&&fe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Pe(e,t,n,r){t=d(t);var a,s,o,i,l,u,_=0,c=e.length,m=c-1,h=t[0],p=g(h);if(p||c>1&&"string"==typeof h&&!f.checkClone&&Se.test(h))return e.each((function(a){var s=e.eq(a);p&&(t[0]=h.call(this,a,s.html())),Pe(s,t,n,r)}));if(c&&(s=(a=be(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=s),s||r)){for(i=(o=A.map(Le(a,"script"),Be)).length;_<c;_++)l=a,_!==m&&(l=A.clone(l,!0,!0),i&&A.merge(o,Le(l,"script"))),n.call(e[_],l,_);if(i)for(u=o[o.length-1].ownerDocument,A.map(o,Oe),_=0;_<i;_++)l=o[_],ye.test(l.type||"")&&!K.access(l,"globalEval")&&A.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?A._evalUrl&&!l.noModule&&A._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):Y(l.textContent.replace(je,""),l,u))}return e}function Fe(e,t,n){for(var r,a=t?A.filter(t,e):e,s=0;null!=(r=a[s]);s++)n||1!==r.nodeType||A.cleanData(Le(r)),r.parentNode&&(n&&ie(r)&&Ye(Le(r,"script")),r.parentNode.removeChild(r));return e}A.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,a,s,o,i=e.cloneNode(!0),d=ie(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||A.isXMLDoc(e)))for(o=Le(i),r=0,a=(s=Le(e)).length;r<a;r++)Ee(s[r],o[r]);if(t)if(n)for(s=s||Le(e),o=o||Le(i),r=0,a=s.length;r<a;r++)We(s[r],o[r]);else We(e,i);return(o=Le(i,"script")).length>0&&Ye(o,!d&&Le(e,"script")),i},cleanData:function(e){for(var t,n,r,a=A.event.special,s=0;void 0!==(n=e[s]);s++)if($(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)a[r]?A.event.remove(n,r):A.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[X.expando]&&(n[X.expando]=void 0)}}}),A.fn.extend({detach:function(e){return Fe(this,e,!0)},remove:function(e){return Fe(this,e)},text:function(e){return J(this,(function(e){return void 0===e?A.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Pe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||He(this,e).appendChild(e)}))},prepend:function(){return Pe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=He(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Pe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(A.cleanData(Le(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return A.clone(this,e,t)}))},html:function(e){return J(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ce.test(e)&&!Me[(ge.exec(e)||["",""])[1].toLowerCase()]){e=A.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(A.cleanData(Le(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Pe(this,arguments,(function(t){var n=this.parentNode;A.inArray(this,e)<0&&(A.cleanData(Le(this)),n&&n.replaceChild(t,this))}),e)}}),A.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){A.fn[e]=function(e){for(var n,r=[],a=A(e),s=a.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),A(a[o])[t](n),l.apply(r,n.get());return this.pushStack(r)}}));var ze=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ne=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Ie=function(e,t,n){var r,a,s={};for(a in t)s[a]=e.style[a],e.style[a]=t[a];for(a in r=n.call(e),t)e.style[a]=s[a];return r},Re=new RegExp(se.join("|"),"i");function qe(e,t,n){var r,a,s,o,i=e.style;return(n=n||Ne(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||ie(e)||(o=A.style(e,t)),!f.pixelBoxStyles()&&ze.test(o)&&Re.test(t)&&(r=i.width,a=i.minWidth,s=i.maxWidth,i.minWidth=i.maxWidth=i.width=o,o=n.width,i.width=r,i.minWidth=a,i.maxWidth=s)),void 0!==o?o+"":o}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(l).appendChild(u);var e=r.getComputedStyle(u);n="1%"!==e.top,d=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),a=36===t(e.width),u.style.position="absolute",s=12===t(u.offsetWidth/3),oe.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var n,a,s,o,i,d,l=M.createElement("div"),u=M.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===u.style.backgroundClip,A.extend(f,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),d},scrollboxSize:function(){return e(),s},reliableTrDimensions:function(){var e,t,n,a;return null==i&&(e=M.createElement("table"),t=M.createElement("tr"),n=M.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",oe.appendChild(e).appendChild(t).appendChild(n),a=r.getComputedStyle(t),i=parseInt(a.height,10)+parseInt(a.borderTopWidth,10)+parseInt(a.borderBottomWidth,10)===t.offsetHeight,oe.removeChild(e)),i}}))}();var Ue=["Webkit","Moz","ms"],Ge=M.createElement("div").style,Ze={};function Ve(e){return A.cssProps[e]||Ze[e]||(e in Ge?e:Ze[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Ge)return e}(e)||e)}var $e=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Xe={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,a,s){var o="width"===t?1:0,i=0,d=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(d+=A.css(e,n+se[o],!0,a)),r?("content"===n&&(d-=A.css(e,"padding"+se[o],!0,a)),"margin"!==n&&(d-=A.css(e,"border"+se[o]+"Width",!0,a))):(d+=A.css(e,"padding"+se[o],!0,a),"padding"!==n?d+=A.css(e,"border"+se[o]+"Width",!0,a):i+=A.css(e,"border"+se[o]+"Width",!0,a));return!r&&s>=0&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-d-i-.5))||0),d}function nt(e,t,n){var r=Ne(e),a=(!f.boxSizingReliable()||n)&&"border-box"===A.css(e,"boxSizing",!1,r),s=a,o=qe(e,t,r),i="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(o)){if(!n)return o;o="auto"}return(!f.boxSizingReliable()&&a||!f.reliableTrDimensions()&&C(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===A.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===A.css(e,"boxSizing",!1,r),(s=i in e)&&(o=e[i])),(o=parseFloat(o)||0)+tt(e,t,n||(a?"border":"content"),s,r,o)+"px"}function rt(e,t,n,r,a){return new rt.prototype.init(e,t,n,r,a)}A.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,s,o,i=V(t),d=Qe.test(t),l=e.style;if(d||(t=Ve(i)),o=A.cssHooks[t]||A.cssHooks[i],void 0===n)return o&&"get"in o&&void 0!==(a=o.get(e,!1,r))?a:l[t];"string"==(s=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=ue(e,t,a),s="number"),null!=n&&n==n&&("number"!==s||d||(n+=a&&a[3]||(A.cssNumber[i]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(d?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var a,s,o,i=V(t);return Qe.test(t)||(t=Ve(i)),(o=A.cssHooks[t]||A.cssHooks[i])&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=qe(e,t,r)),"normal"===a&&t in Xe&&(a=Xe[t]),""===n||n?(s=parseFloat(a),!0===n||isFinite(s)?s||0:a):a}}),A.each(["height","width"],(function(e,t){A.cssHooks[t]={get:function(e,n,r){if(n)return!$e.test(A.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):Ie(e,Ke,(function(){return nt(e,t,r)}))},set:function(e,n,r){var a,s=Ne(e),o=!f.scrollboxSize()&&"absolute"===s.position,i=(o||r)&&"border-box"===A.css(e,"boxSizing",!1,s),d=r?tt(e,t,r,i,s):0;return i&&o&&(d-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-tt(e,t,"border",!1,s)-.5)),d&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=A.css(e,t)),et(0,n,d)}}})),A.cssHooks.marginLeft=Je(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),A.each({margin:"",padding:"",border:"Width"},(function(e,t){A.cssHooks[e+t]={expand:function(n){for(var r=0,a={},s="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+se[r]+t]=s[r]||s[r-2]||s[0];return a}},"margin"!==e&&(A.cssHooks[e+t].set=et)})),A.fn.extend({css:function(e,t){return J(this,(function(e,t,n){var r,a,s={},o=0;if(Array.isArray(t)){for(r=Ne(e),a=t.length;o<a;o++)s[t[o]]=A.css(e,t[o],!1,r);return s}return void 0!==n?A.style(e,t,n):A.css(e,t)}),e,t,arguments.length>1)}}),A.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,a,s){this.elem=e,this.prop=n,this.easing=a||A.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=s||(A.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=A.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=A.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){A.fx.step[e.prop]?A.fx.step[e.prop](e):1!==e.elem.nodeType||!A.cssHooks[e.prop]&&null==e.elem.style[Ve(e.prop)]?e.elem[e.prop]=e.now:A.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},A.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},A.fx=rt.prototype.init,A.fx.step={};var at,st,ot=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function dt(){st&&(!1===M.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(dt):r.setTimeout(dt,A.fx.interval),A.fx.tick())}function lt(){return r.setTimeout((function(){at=void 0})),at=Date.now()}function ut(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=se[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function _t(e,t,n){for(var r,a=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),s=0,o=a.length;s<o;s++)if(r=a[s].call(n,t,e))return r}function ct(e,t,n){var r,a,s=0,o=ct.prefilters.length,i=A.Deferred().always((function(){delete d.elem})),d=function(){if(a)return!1;for(var t=at||lt(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n/l.duration||0),s=0,o=l.tweens.length;s<o;s++)l.tweens[s].run(r);return i.notifyWith(e,[l,r,n]),r<1&&o?n:(o||i.notifyWith(e,[l,1,0]),i.resolveWith(e,[l]),!1)},l=i.promise({elem:e,props:A.extend({},t),opts:A.extend(!0,{specialEasing:{},easing:A.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=A.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)l.tweens[n].run(1);return t?(i.notifyWith(e,[l,1,0]),i.resolveWith(e,[l,t])):i.rejectWith(e,[l,t]),this}}),u=l.props;for(function(e,t){var n,r,a,s,o;for(n in e)if(a=t[r=V(n)],s=e[n],Array.isArray(s)&&(a=s[1],s=e[n]=s[0]),n!==r&&(e[r]=s,delete e[n]),(o=A.cssHooks[r])&&"expand"in o)for(n in s=o.expand(s),delete e[r],s)n in e||(e[n]=s[n],t[n]=a);else t[r]=a}(u,l.opts.specialEasing);s<o;s++)if(r=ct.prefilters[s].call(l,e,u,l.opts))return g(r.stop)&&(A._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return A.map(u,_t,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),A.fx.timer(A.extend(d,{elem:e,anim:l,queue:l.opts.queue})),l}A.Animation=A.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(P);for(var n,r=0,a=e.length;r<a;r++)n=e[r],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,s,o,i,d,l,u,_="width"in t||"height"in t,c=this,m={},h=e.style,p=e.nodeType&&le(e),f=K.get(e,"fxshow");for(r in n.queue||(null==(o=A._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,i=o.empty.fire,o.empty.fire=function(){o.unqueued||i()}),o.unqueued++,c.always((function(){c.always((function(){o.unqueued--,A.queue(e,"fx").length||o.empty.fire()}))}))),t)if(a=t[r],ot.test(a)){if(delete t[r],s=s||"toggle"===a,a===(p?"hide":"show")){if("show"!==a||!f||void 0===f[r])continue;p=!0}m[r]=f&&f[r]||A.style(e,r)}if((d=!A.isEmptyObject(t))||!A.isEmptyObject(m))for(r in _&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=f&&f.display)&&(l=K.get(e,"display")),"none"===(u=A.css(e,"display"))&&(l?u=l:(me([e],!0),l=e.style.display||l,u=A.css(e,"display"),me([e]))),("inline"===u||"inline-block"===u&&null!=l)&&"none"===A.css(e,"float")&&(d||(c.done((function(){h.display=l})),null==l&&(u=h.display,l="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",c.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),d=!1,m)d||(f?"hidden"in f&&(p=f.hidden):f=K.access(e,"fxshow",{display:l}),s&&(f.hidden=!p),p&&me([e],!0),c.done((function(){for(r in p||me([e]),K.remove(e,"fxshow"),m)A.style(e,r,m[r])}))),d=_t(p?f[r]:0,r,c),r in f||(f[r]=d.start,p&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),A.speed=function(e,t,n){var r=e&&"object"==typeof e?A.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return A.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in A.fx.speeds?r.duration=A.fx.speeds[r.duration]:r.duration=A.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&A.dequeue(this,r.queue)},r},A.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=A.isEmptyObject(e),s=A.speed(t,n,r),o=function(){var t=ct(this,A.extend({},e),s);(a||K.get(this,"finish"))&&t.stop(!0)};return o.finish=o,a||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,a=null!=e&&e+"queueHooks",s=A.timers,o=K.get(this);if(a)o[a]&&o[a].stop&&r(o[a]);else for(a in o)o[a]&&o[a].stop&&it.test(a)&&r(o[a]);for(a=s.length;a--;)s[a].elem!==this||null!=e&&s[a].queue!==e||(s[a].anim.stop(n),t=!1,s.splice(a,1));!t&&n||A.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],s=A.timers,o=r?r.length:0;for(n.finish=!0,A.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),A.each(["toggle","show","hide"],(function(e,t){var n=A.fn[t];A.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,a)}})),A.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){A.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),A.timers=[],A.fx.tick=function(){var e,t=0,n=A.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||A.fx.stop(),at=void 0},A.fx.timer=function(e){A.timers.push(e),A.fx.start()},A.fx.interval=13,A.fx.start=function(){st||(st=!0,dt())},A.fx.stop=function(){st=null},A.fx.speeds={slow:600,fast:200,_default:400},A.fn.delay=function(e,t){return e=A.fx&&A.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var a=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(a)}}))},function(){var e=M.createElement("input"),t=M.createElement("select").appendChild(M.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=t.selected,(e=M.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var mt,ht=A.expr.attrHandle;A.fn.extend({attr:function(e,t){return J(this,A.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){A.removeAttr(this,e)}))}}),A.extend({attr:function(e,t,n){var r,a,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?A.prop(e,t,n):(1===s&&A.isXMLDoc(e)||(a=A.attrHooks[t.toLowerCase()]||(A.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void A.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=A.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&C(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(P);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?A.removeAttr(e,n):e.setAttribute(n,n),n}},A.each(A.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||A.find.attr;ht[t]=function(e,t,r){var a,s,o=t.toLowerCase();return r||(s=ht[o],ht[o]=a,a=null!=n(e,t,r)?o:null,ht[o]=s),a}}));var pt=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function gt(e){return(e.match(P)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function Mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(P)||[]}A.fn.extend({prop:function(e,t){return J(this,A.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[A.propFix[e]||e]}))}}),A.extend({prop:function(e,t,n){var r,a,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&A.isXMLDoc(e)||(t=A.propFix[t]||t,a=A.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=A.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(A.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),A.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){A.propFix[this.toLowerCase()]=this})),A.fn.extend({addClass:function(e){var t,n,r,a,s,o,i,d=0;if(g(e))return this.each((function(t){A(this).addClass(e.call(this,t,yt(this)))}));if((t=Mt(e)).length)for(;n=this[d++];)if(a=yt(n),r=1===n.nodeType&&" "+gt(a)+" "){for(o=0;s=t[o++];)r.indexOf(" "+s+" ")<0&&(r+=s+" ");a!==(i=gt(r))&&n.setAttribute("class",i)}return this},removeClass:function(e){var t,n,r,a,s,o,i,d=0;if(g(e))return this.each((function(t){A(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=Mt(e)).length)for(;n=this[d++];)if(a=yt(n),r=1===n.nodeType&&" "+gt(a)+" "){for(o=0;s=t[o++];)for(;r.indexOf(" "+s+" ")>-1;)r=r.replace(" "+s+" "," ");a!==(i=gt(r))&&n.setAttribute("class",i)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){A(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,a,s,o;if(r)for(a=0,s=A(this),o=Mt(e);t=o[a++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+gt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Lt=/\r/g;A.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=g(e),this.each((function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,A(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=A.map(a,(function(e){return null==e?"":e+""}))),(t=A.valHooks[this.type]||A.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))}))):a?(t=A.valHooks[a.type]||A.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(Lt,""):null==n?"":n:void 0}}),A.extend({valHooks:{option:{get:function(e){var t=A.find.attr(e,"value");return null!=t?t:gt(A.text(e))}},select:{get:function(e){var t,n,r,a=e.options,s=e.selectedIndex,o="select-one"===e.type,i=o?null:[],d=o?s+1:a.length;for(r=s<0?d:o?s:0;r<d;r++)if(((n=a[r]).selected||r===s)&&!n.disabled&&(!n.parentNode.disabled||!C(n.parentNode,"optgroup"))){if(t=A(n).val(),o)return t;i.push(t)}return i},set:function(e,t){for(var n,r,a=e.options,s=A.makeArray(t),o=a.length;o--;)((r=a[o]).selected=A.inArray(A.valHooks.option.get(r),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),A.each(["radio","checkbox"],(function(){A.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=A.inArray(A(e).val(),t)>-1}},f.checkOn||(A.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in r;var Yt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};A.extend(A.event,{trigger:function(e,t,n,a){var s,o,i,d,l,u,_,c,h=[n||M],p=m.call(e,"type")?e.type:e,f=m.call(e,"namespace")?e.namespace.split("."):[];if(o=c=i=n=n||M,3!==n.nodeType&&8!==n.nodeType&&!Yt.test(p+A.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(e=e[A.expando]?e:new A.Event(p,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:A.makeArray(t,[e]),_=A.event.special[p]||{},a||!_.trigger||!1!==_.trigger.apply(n,t))){if(!a&&!_.noBubble&&!y(n)){for(d=_.delegateType||p,Yt.test(d+p)||(o=o.parentNode);o;o=o.parentNode)h.push(o),i=o;i===(n.ownerDocument||M)&&h.push(i.defaultView||i.parentWindow||r)}for(s=0;(o=h[s++])&&!e.isPropagationStopped();)c=o,e.type=s>1?d:_.bindType||p,(u=(K.get(o,"events")||Object.create(null))[e.type]&&K.get(o,"handle"))&&u.apply(o,t),(u=l&&o[l])&&u.apply&&$(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,a||e.isDefaultPrevented()||_._default&&!1!==_._default.apply(h.pop(),t)||!$(n)||l&&g(n[p])&&!y(n)&&((i=n[l])&&(n[l]=null),A.event.triggered=p,e.isPropagationStopped()&&c.addEventListener(p,kt),n[p](),e.isPropagationStopped()&&c.removeEventListener(p,kt),A.event.triggered=void 0,i&&(n[l]=i)),e.result}},simulate:function(e,t,n){var r=A.extend(new A.Event,n,{type:e,isSimulated:!0});A.event.trigger(r,null,t)}}),A.fn.extend({trigger:function(e,t){return this.each((function(){A.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return A.event.trigger(e,t,n,!0)}}),f.focusin||A.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){A.event.simulate(t,e.target,A.event.fix(e))};A.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,a=K.access(r,t);a||r.addEventListener(e,n,!0),K.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,a=K.access(r,t)-1;a?K.access(r,t,a):(r.removeEventListener(e,n,!0),K.remove(r,t))}}}));var bt=r.location,At={guid:Date.now()},wt=/\?/;A.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||A.error("Invalid XML: "+(n?A.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var vt=/\[\]$/,Dt=/\r?\n/g,xt=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function Ct(e,t,n,r){var a;if(Array.isArray(t))A.each(t,(function(t,a){n||vt.test(e)?r(e,a):Ct(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)}));else if(n||"object"!==k(t))r(e,t);else for(a in t)Ct(e+"["+a+"]",t[a],n,r)}A.param=function(e,t){var n,r=[],a=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!A.isPlainObject(e))A.each(e,(function(){a(this.name,this.value)}));else for(n in e)Ct(n,e[n],t,a);return r.join("&")},A.fn.extend({serialize:function(){return A.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=A.prop(this,"elements");return e?A.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!A(this).is(":disabled")&&Tt.test(this.nodeName)&&!xt.test(e)&&(this.checked||!fe.test(e))})).map((function(e,t){var n=A(this).val();return null==n?null:Array.isArray(n)?A.map(n,(function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}})):{name:t.name,value:n.replace(Dt,"\r\n")}})).get()}});var St=/%20/g,jt=/#.*$/,Ht=/([?&])_=[^&]*/,Bt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Wt=/^\/\//,Et={},Pt={},Ft="*/".concat("*"),zt=M.createElement("a");function Nt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,s=t.toLowerCase().match(P)||[];if(g(n))for(;r=s[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function It(e,t,n,r){var a={},s=e===Pt;function o(i){var d;return a[i]=!0,A.each(e[i]||[],(function(e,i){var l=i(t,n,r);return"string"!=typeof l||s||a[l]?s?!(d=l):void 0:(t.dataTypes.unshift(l),o(l),!1)})),d}return o(t.dataTypes[0])||!a["*"]&&o("*")}function Rt(e,t){var n,r,a=A.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&A.extend(!0,e,r),e}zt.href=bt.href,A.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:bt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(bt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ft,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":A.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Rt(Rt(e,A.ajaxSettings),t):Rt(A.ajaxSettings,e)},ajaxPrefilter:Nt(Et),ajaxTransport:Nt(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,a,s,o,i,d,l,u,_,c,m=A.ajaxSetup({},t),h=m.context||m,p=m.context&&(h.nodeType||h.jquery)?A(h):A.event,f=A.Deferred(),g=A.Callbacks("once memory"),y=m.statusCode||{},L={},Y={},k="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(l){if(!o)for(o={};t=Bt.exec(s);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?s:null},setRequestHeader:function(e,t){return null==l&&(e=Y[e.toLowerCase()]=Y[e.toLowerCase()]||e,L[e]=t),this},overrideMimeType:function(e){return null==l&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)b.always(e[b.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||k;return n&&n.abort(t),w(0,t),this}};if(f.promise(b),m.url=((e||m.url||bt.href)+"").replace(Wt,bt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(P)||[""],null==m.crossDomain){d=M.createElement("a");try{d.href=m.url,d.href=d.href,m.crossDomain=zt.protocol+"//"+zt.host!=d.protocol+"//"+d.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=A.param(m.data,m.traditional)),It(Et,m,t,b),l)return b;for(_ in(u=A.event&&m.global)&&0==A.active++&&A.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Ot.test(m.type),a=m.url.replace(jt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(St,"+")):(c=m.url.slice(a.length),m.data&&(m.processData||"string"==typeof m.data)&&(a+=(wt.test(a)?"&":"?")+m.data,delete m.data),!1===m.cache&&(a=a.replace(Ht,"$1"),c=(wt.test(a)?"&":"?")+"_="+At.guid+++c),m.url=a+c),m.ifModified&&(A.lastModified[a]&&b.setRequestHeader("If-Modified-Since",A.lastModified[a]),A.etag[a]&&b.setRequestHeader("If-None-Match",A.etag[a])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&b.setRequestHeader("Content-Type",m.contentType),b.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Ft+"; q=0.01":""):m.accepts["*"]),m.headers)b.setRequestHeader(_,m.headers[_]);if(m.beforeSend&&(!1===m.beforeSend.call(h,b,m)||l))return b.abort();if(k="abort",g.add(m.complete),b.done(m.success),b.fail(m.error),n=It(Pt,m,t,b)){if(b.readyState=1,u&&p.trigger("ajaxSend",[b,m]),l)return b;m.async&&m.timeout>0&&(i=r.setTimeout((function(){b.abort("timeout")}),m.timeout));try{l=!1,n.send(L,w)}catch(e){if(l)throw e;w(-1,e)}}else w(-1,"No Transport");function w(e,t,o,d){var _,c,M,L,Y,k=t;l||(l=!0,i&&r.clearTimeout(i),n=void 0,s=d||"",b.readyState=e>0?4:0,_=e>=200&&e<300||304===e,o&&(L=function(e,t,n){for(var r,a,s,o,i=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in i)if(i[a]&&i[a].test(r)){d.unshift(a);break}if(d[0]in n)s=d[0];else{for(a in n){if(!d[0]||e.converters[a+" "+d[0]]){s=a;break}o||(o=a)}s=s||o}if(s)return s!==d[0]&&d.unshift(s),n[s]}(m,b,o)),!_&&A.inArray("script",m.dataTypes)>-1&&A.inArray("json",m.dataTypes)<0&&(m.converters["text script"]=function(){}),L=function(e,t,n,r){var a,s,o,i,d,l={},u=e.dataTypes.slice();if(u[1])for(o in e.converters)l[o.toLowerCase()]=e.converters[o];for(s=u.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!d&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=s,s=u.shift())if("*"===s)s=d;else if("*"!==d&&d!==s){if(!(o=l[d+" "+s]||l["* "+s]))for(a in l)if((i=a.split(" "))[1]===s&&(o=l[d+" "+i[0]]||l["* "+i[0]])){!0===o?o=l[a]:!0!==l[a]&&(s=i[0],u.unshift(i[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+d+" to "+s}}}return{state:"success",data:t}}(m,L,b,_),_?(m.ifModified&&((Y=b.getResponseHeader("Last-Modified"))&&(A.lastModified[a]=Y),(Y=b.getResponseHeader("etag"))&&(A.etag[a]=Y)),204===e||"HEAD"===m.type?k="nocontent":304===e?k="notmodified":(k=L.state,c=L.data,_=!(M=L.error))):(M=k,!e&&k||(k="error",e<0&&(e=0))),b.status=e,b.statusText=(t||k)+"",_?f.resolveWith(h,[c,k,b]):f.rejectWith(h,[b,k,M]),b.statusCode(y),y=void 0,u&&p.trigger(_?"ajaxSuccess":"ajaxError",[b,m,_?c:M]),g.fireWith(h,[b,k]),u&&(p.trigger("ajaxComplete",[b,m]),--A.active||A.event.trigger("ajaxStop")))}return b},getJSON:function(e,t,n){return A.get(e,t,n,"json")},getScript:function(e,t){return A.get(e,void 0,t,"script")}}),A.each(["get","post"],(function(e,t){A[t]=function(e,n,r,a){return g(n)&&(a=a||r,r=n,n=void 0),A.ajax(A.extend({url:e,type:t,dataType:a,data:n,success:r},A.isPlainObject(e)&&e))}})),A.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),A._evalUrl=function(e,t,n){return A.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){A.globalEval(e,t,n)}})},A.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=A(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){A(this).wrapInner(e.call(this,t))})):this.each((function(){var t=A(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){A(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){A(this).replaceWith(this.childNodes)})),this}}),A.expr.pseudos.hidden=function(e){return!A.expr.pseudos.visible(e)},A.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},A.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var qt={0:200,1223:204},Jt=A.ajaxSettings.xhr();f.cors=!!Jt&&"withCredentials"in Jt,f.ajax=Jt=!!Jt,A.ajaxTransport((function(e){var t,n;if(f.cors||Jt&&!e.crossDomain)return{send:function(a,s){var o,i=e.xhr();if(i.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)i[o]=e.xhrFields[o];for(o in e.mimeType&&i.overrideMimeType&&i.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)i.setRequestHeader(o,a[o]);t=function(e){return function(){t&&(t=n=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?s(0,"error"):s(i.status,i.statusText):s(qt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=t(),n=i.onerror=i.ontimeout=t("error"),void 0!==i.onabort?i.onabort=n:i.onreadystatechange=function(){4===i.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{i.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),A.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),A.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return A.globalEval(e),e}}}),A.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),A.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=A("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),M.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Ut,Gt=[],Zt=/(=)\?(?=&|$)|\?\?/;A.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||A.expando+"_"+At.guid++;return this[e]=!0,e}}),A.ajaxPrefilter("json jsonp",(function(e,t,n){var a,s,o,i=!1!==e.jsonp&&(Zt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(e.data)&&"data");if(i||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,i?e[i]=e[i].replace(Zt,"$1"+a):!1!==e.jsonp&&(e.url+=(wt.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return o||A.error(a+" was not called"),o[0]},e.dataTypes[0]="json",s=r[a],r[a]=function(){o=arguments},n.always((function(){void 0===s?A(r).removeProp(a):r[a]=s,e[a]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(a)),o&&g(s)&&s(o[0]),o=s=void 0})),"script"})),f.createHTMLDocument=((Ut=M.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),A.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(f.createHTMLDocument?((r=(t=M.implementation.createHTMLDocument("")).createElement("base")).href=M.location.href,t.head.appendChild(r)):t=M),s=!n&&[],(a=S.exec(e))?[t.createElement(a[1])]:(a=be([e],t,s),s&&s.length&&A(s).remove(),A.merge([],a.childNodes)));var r,a,s},A.fn.load=function(e,t,n){var r,a,s,o=this,i=e.indexOf(" ");return i>-1&&(r=gt(e.slice(i)),e=e.slice(0,i)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),o.length>0&&A.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done((function(e){s=arguments,o.html(r?A("<div>").append(A.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,s||[e.responseText,t,e])}))}),this},A.expr.pseudos.animated=function(e){return A.grep(A.timers,(function(t){return e===t.elem})).length},A.offset={setOffset:function(e,t,n){var r,a,s,o,i,d,l=A.css(e,"position"),u=A(e),_={};"static"===l&&(e.style.position="relative"),i=u.offset(),s=A.css(e,"top"),d=A.css(e,"left"),("absolute"===l||"fixed"===l)&&(s+d).indexOf("auto")>-1?(o=(r=u.position()).top,a=r.left):(o=parseFloat(s)||0,a=parseFloat(d)||0),g(t)&&(t=t.call(e,n,A.extend({},i))),null!=t.top&&(_.top=t.top-i.top+o),null!=t.left&&(_.left=t.left-i.left+a),"using"in t?t.using.call(e,_):u.css(_)}},A.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){A.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===A.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===A.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=A(e).offset()).top+=A.css(e,"borderTopWidth",!0),a.left+=A.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-A.css(r,"marginTop",!0),left:t.left-a.left-A.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===A.css(e,"position");)e=e.offsetParent;return e||oe}))}}),A.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;A.fn[e]=function(r){return J(this,(function(e,r,a){var s;if(y(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===a)return s?s[t]:e[r];s?s.scrollTo(n?s.pageXOffset:a,n?a:s.pageYOffset):e[r]=a}),e,r,arguments.length)}})),A.each(["top","left"],(function(e,t){A.cssHooks[t]=Je(f.pixelPosition,(function(e,n){if(n)return n=qe(e,t),ze.test(n)?A(e).position()[t]+"px":n}))})),A.each({Height:"height",Width:"width"},(function(e,t){A.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){A.fn[r]=function(a,s){var o=arguments.length&&(n||"boolean"!=typeof a),i=n||(!0===a||!0===s?"margin":"border");return J(this,(function(t,n,a){var s;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===a?A.css(t,n,i):A.style(t,n,a,i)}),t,o?a:void 0,o)}}))})),A.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){A.fn[t]=function(e){return this.on(t,e)}})),A.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),A.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){A.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Vt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;A.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=i.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(i.call(arguments)))}).guid=e.guid=e.guid||A.guid++,a},A.holdReady=function(e){e?A.readyWait++:A.ready(!0)},A.isArray=Array.isArray,A.parseJSON=JSON.parse,A.nodeName=C,A.isFunction=g,A.isWindow=y,A.camelCase=V,A.type=k,A.now=Date.now,A.isNumeric=function(e){var t=A.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},A.trim=function(e){return null==e?"":(e+"").replace(Vt,"")},void 0===(n=function(){return A}.apply(t,[]))||(e.exports=n);var $t=r.jQuery,Qt=r.$;return A.noConflict=function(e){return r.$===A&&(r.$=Qt),e&&r.jQuery===A&&(r.jQuery=$t),A},void 0===a&&(r.jQuery=r.$=A),A}))},2786:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},4130:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,s,o){var i=t(r),d=n[e][t(r)];return 2===i&&(d=d[a?0:1]),d.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(381))},6135:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(381))},6440:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,s,o){var i=n(t),d=r[e][n(t)];return 2===i&&(d=d[a?0:1]),d.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},7702:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},6040:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(381))},7100:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(381))},867:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},s=function(e){return function(t,n,s,o){var i=r(t),d=a[e][r(t)];return 2===i&&(d=d[n?0:1]),d.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:s("s"),ss:s("s"),m:s("m"),mm:s("m"),h:s("h"),hh:s("h"),d:s("d"),dd:s("d"),M:s("M"),MM:s("M"),y:s("y"),yy:s("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},1083:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9808:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(381))},8338:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7438:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(381))},6225:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(381))},8905:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(381))},1560:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(381))},1278:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var r=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,s=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:s,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:s,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(381))},622:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2468:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5822:function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function s(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(s(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(s(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(s(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(s(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(s(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(s(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},877:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(381))},7373:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(381))},4780:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},217:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},894:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9740:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5300:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(381))},837:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(381))},8348:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(381))},7925:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},2243:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},6436:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7207:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(381))},4175:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(381))},6319:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},1662:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},2915:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(381))},5251:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6112:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(381))},1146:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(381))},5655:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(381))},5603:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7763:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},6959:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(381))},1897:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,s){var o="";switch(a){case"s":return s?"muutaman sekunnin":"muutama sekunti";case"ss":o=s?"sekunnin":"sekuntia";break;case"m":return s?"minuutin":"minuutti";case"mm":o=s?"minuutin":"minuuttia";break;case"h":return s?"tunnin":"tunti";case"hh":o=s?"tunnin":"tuntia";break;case"d":return s?"päivän":"päivä";case"dd":o=s?"päivän":"päivää";break;case"M":return s?"kuukauden":"kuukausi";case"MM":o=s?"kuukauden":"kuukautta";break;case"y":return s?"vuoden":"vuosi";case"yy":o=s?"vuoden":"vuotta"}return function(e,r){return e<10?r?n[e]:t[e]:e}(e,s)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2549:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4694:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},3049:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(381))},2330:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},4470:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(381))},5044:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},9295:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},2101:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(381))},8794:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},7884:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){switch(t){case"D":return e+"वेर";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(381))},3168:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(381))},5349:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(381))},4206:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(381))},94:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(381))},316:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},2138:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},1423:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(381))},9218:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(381))},135:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var s=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?s+(n||a?"sekúndur":"sekúndum"):s+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?s+(n||a?"mínútur":"mínútum"):n?s+"mínúta":s+"mínútu";case"hh":return t(e)?s+(n||a?"klukkustundir":"klukkustundum"):s+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?s+"dagar":s+(a?"daga":"dögum"):n?s+"dagur":s+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?s+"mánuðir":s+(a?"mánuði":"mánuðum"):n?s+"mánuður":s+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?s+(n||a?"ár":"árum"):s+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},150:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},626:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){switch(this.day()){case 0:return"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT";default:return"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"}},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},9183:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(381))},4286:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(381))},2105:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(381))},7772:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},8758:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},9282:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(381))},3730:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(381))},1408:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(381))},3291:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},6841:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},5466:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(381))},7010:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function s(e,t,s,o){var i=e+" ";return 1===e?i+n(0,t,s[0],o):t?i+(r(e)?a(s)[1]:a(s)[0]):o?i+a(s)[1]:i+(r(e)?a(s)[1]:a(s)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:s,m:n,mm:s,h:n,hh:s,d:n,dd:s,M:n,MM:s,y:n,yy:s},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(381))},7595:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9861:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5493:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},5966:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(381))},7341:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(381))},5115:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(381))},370:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(381))},1237:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},9847:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(381))},2126:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6165:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(381))},4924:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},6744:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(381))},9814:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3901:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(381))},3877:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2135:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(381))},5858:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(381))},4495:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function s(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:s,m:s,mm:s,h:s,hh:s,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:s,M:"miesiąc",MM:s,y:"rok",yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},7971:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(381))},9520:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(381))},6459:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(381))},1793:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(381))},950:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},490:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},124:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(381))},4249:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var s=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?s+(r(e)?"sekundy":"sekúnd"):s+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?s+(r(e)?"minúty":"minút"):s+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?s+(r(e)?"hodiny":"hodín"):s+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?s+(r(e)?"dni":"dní"):s+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?s+(r(e)?"mesiace":"mesiacov"):s+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?s+(r(e)?"roky":"rokov"):s+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},4985:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return a+(1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return a+(1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami");case"d":return t||r?"en dan":"enim dnem";case"dd":return a+(1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi");case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+(1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci");case"y":return t||r?"eno leto":"enim letom";case"yy":return a+(1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},1104:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},9915:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},9131:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(381))},5893:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(381))},8760:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(381))},1172:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(381))},7333:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(381))},3110:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(381))},2095:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},7321:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(381))},9041:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(381))},9005:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},5768:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},9444:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var s=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,s="";return n>0&&(s+=t[n]+"vatlh"),r>0&&(s+=(""!==s?" ":"")+t[r]+"maH"),a>0&&(s+=(""!==s?" ":"")+t[a]),""===s?"pagh":s}(e);switch(r){case"ss":return s+" lup";case"mm":return s+" tup";case"hh":return s+" rep";case"dd":return s+" jaj";case"MM":return s+" jar";case"yy":return s+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},2397:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(381))},8254:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(381))},699:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(381))},1106:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(381))},9288:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(381))},7691:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(381))},3795:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(381))},588:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(381))},6791:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(381))},5666:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(381))},4378:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(381))},5805:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(381))},3839:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(381))},5726:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},9807:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},4152:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(381))},6700:(e,t,n)=>{var r={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=6700},381:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function s(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(i(e,t))return!1;return!0}function l(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function _(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function m(e,t){for(var n in t)i(t,n)&&(e[n]=t[n]);return i(t,"toString")&&(e.toString=t.toString),i(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return wt(e,t,n,r,!0).utc()}function p(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=p(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function g(e){var t=h(NaN);return null!=e?m(p(t),e):p(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var y=a.momentProperties=[],M=!1;function L(e,t){var n,r,a;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=p(t)),l(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)l(a=t[r=y[n]])||(e[r]=a);return e}function Y(e){L(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,a.updateOffset(this),M=!1)}function k(e){return e instanceof Y||null!=e&&null!=e._isAMomentObject}function b(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function A(e,t){var n=!0;return m((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,s,o,d=[];for(s=0;s<arguments.length;s++){if(r="","object"==typeof arguments[s]){for(o in r+="\n["+s+"] ",arguments[0])i(arguments[0],o)&&(r+=o+": "+arguments[0][o]+", ");r=r.slice(0,-2)}else r=arguments[s];d.push(r)}b(e+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var w,v={};function D(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),v[e]||(b(t),v[e]=!0)}function x(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function T(e,t){var n,r=m({},e);for(n in t)i(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},m(r[n],e[n]),m(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)i(e,n)&&!i(t,n)&&o(e[n])&&(r[n]=m({},r[n]));return r}function C(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)i(e,t)&&n.push(t);return n};function S(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,H=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,B={},O={};function W(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(O[e]=a),t&&(O[t[0]]=function(){return S(a.apply(this,arguments),t[1],t[2])}),n&&(O[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function E(e,t){return e.isValid()?(t=P(t,e.localeData()),B[t]=B[t]||function(e){var t,n,r,a=e.match(j);for(t=0,n=a.length;t<n;t++)O[a[t]]?a[t]=O[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,s="";for(r=0;r<n;r++)s+=x(a[r])?a[r].call(t,e):a[r];return s}}(t),B[t](e)):e.localeData().invalidDate()}function P(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(H.lastIndex=0;n>=0&&H.test(e);)e=e.replace(H,r),H.lastIndex=0,n-=1;return e}var F={};function z(e,t){var n=e.toLowerCase();F[n]=F[n+"s"]=F[t]=e}function N(e){return"string"==typeof e?F[e]||F[e.toLowerCase()]:void 0}function I(e){var t,n,r={};for(n in e)i(e,n)&&(t=N(n))&&(r[t]=e[n]);return r}var R={};function q(e,t){R[e]=t}function J(e){return e%4==0&&e%100!=0||e%400==0}function U(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function G(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=U(t)),n}function Z(e,t){return function(n){return null!=n?($(this,e,n),a.updateOffset(this,t),this):V(this,e)}}function V(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function $(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&J(e.year())&&1===e.month()&&29===e.date()?(n=G(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),ke(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Q,K=/\d/,X=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,re=/\d\d?/,ae=/\d\d\d\d?/,se=/\d\d\d\d\d\d?/,oe=/\d{1,3}/,ie=/\d{1,4}/,de=/[+-]?\d{1,6}/,le=/\d+/,ue=/[+-]?\d+/,_e=/Z|[+-]\d\d:?\d\d/gi,ce=/Z|[+-]\d\d(?::?\d\d)?/gi,me=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function he(e,t,n){Q[e]=x(t)?t:function(e,r){return e&&n?n:t}}function pe(e,t){return i(Q,e)?Q[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Q={};var ge={};function ye(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=G(e)}),n=0;n<e.length;n++)ge[e[n]]=r}function Me(e,t){ye(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function Le(e,t,n){null!=t&&i(ge,e)&&ge[e](t,n._a,n,e)}var Ye;function ke(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?J(e)?29:28:31-r%7%2}Ye=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},W("M",["MM",2],"Mo",(function(){return this.month()+1})),W("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),W("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),z("month","M"),q("month",8),he("M",re),he("MM",re,X),he("MMM",(function(e,t){return t.monthsShortRegex(e)})),he("MMMM",(function(e,t){return t.monthsRegex(e)})),ye(["M","MM"],(function(e,t){t[1]=G(e)-1})),ye(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:p(n).invalidMonth=e}));var be="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ae="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),we=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ve=me,De=me;function xe(e,t,n){var r,a,s,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)s=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(s,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(s,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Ye.call(this._shortMonthsParse,o))?a:null:-1!==(a=Ye.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Ye.call(this._shortMonthsParse,o))||-1!==(a=Ye.call(this._longMonthsParse,o))?a:null:-1!==(a=Ye.call(this._longMonthsParse,o))||-1!==(a=Ye.call(this._shortMonthsParse,o))?a:null}function Te(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=G(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),ke(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Ce(e){return null!=e?(Te(this,e),a.updateOffset(this,!0),this):V(this,"Month")}function Se(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],s=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),s.push(this.months(n,"")),s.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),s.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),a[t]=fe(a[t]);for(t=0;t<24;t++)s[t]=fe(s[t]);this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function je(e){return J(e)?366:365}W("Y",0,0,(function(){var e=this.year();return e<=9999?S(e,4):"+"+e})),W(0,["YY",2],0,(function(){return this.year()%100})),W(0,["YYYY",4],0,"year"),W(0,["YYYYY",5],0,"year"),W(0,["YYYYYY",6,!0],0,"year"),z("year","y"),q("year",1),he("Y",ue),he("YY",re,X),he("YYYY",ie,te),he("YYYYY",de,ne),he("YYYYYY",de,ne),ye(["YYYYY","YYYYYY"],0),ye("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):G(e)})),ye("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),ye("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return G(e)+(G(e)>68?1900:2e3)};var He=Z("FullYear",!0);function Be(e,t,n,r,a,s,o){var i;return e<100&&e>=0?(i=new Date(e+400,t,n,r,a,s,o),isFinite(i.getFullYear())&&i.setFullYear(e)):i=new Date(e,t,n,r,a,s,o),i}function Oe(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function We(e,t,n){var r=7+t-n;return-(7+Oe(e,0,r).getUTCDay()-t)%7+r-1}function Ee(e,t,n,r,a){var s,o,i=1+7*(t-1)+(7+n-r)%7+We(e,r,a);return i<=0?o=je(s=e-1)+i:i>je(e)?(s=e+1,o=i-je(e)):(s=e,o=i),{year:s,dayOfYear:o}}function Pe(e,t,n){var r,a,s=We(e.year(),t,n),o=Math.floor((e.dayOfYear()-s-1)/7)+1;return o<1?r=o+Fe(a=e.year()-1,t,n):o>Fe(e.year(),t,n)?(r=o-Fe(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function Fe(e,t,n){var r=We(e,t,n),a=We(e+1,t,n);return(je(e)-r+a)/7}W("w",["ww",2],"wo","week"),W("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),q("week",5),q("isoWeek",5),he("w",re),he("ww",re,X),he("W",re),he("WW",re,X),Me(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=G(e)}));function ze(e,t){return e.slice(t,7).concat(e.slice(0,t))}W("d",0,"do","day"),W("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),W("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),W("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),W("e",0,0,"weekday"),W("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),q("day",11),q("weekday",11),q("isoWeekday",11),he("d",re),he("e",re),he("E",re),he("dd",(function(e,t){return t.weekdaysMinRegex(e)})),he("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),he("dddd",(function(e,t){return t.weekdaysRegex(e)})),Me(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:p(n).invalidWeekday=e})),Me(["d","e","E"],(function(e,t,n,r){t[r]=G(e)}));var Ne="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ie="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Re="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),qe=me,Je=me,Ue=me;function Ge(e,t,n){var r,a,s,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)s=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(s,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(s,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(s,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Ye.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Ye.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Ye.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Ye.call(this._weekdaysParse,o))||-1!==(a=Ye.call(this._shortWeekdaysParse,o))||-1!==(a=Ye.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Ye.call(this._shortWeekdaysParse,o))||-1!==(a=Ye.call(this._weekdaysParse,o))||-1!==(a=Ye.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Ye.call(this._minWeekdaysParse,o))||-1!==(a=Ye.call(this._weekdaysParse,o))||-1!==(a=Ye.call(this._shortWeekdaysParse,o))?a:null}function Ze(){function e(e,t){return t.length-e.length}var t,n,r,a,s,o=[],i=[],d=[],l=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=fe(this.weekdaysMin(n,"")),a=fe(this.weekdaysShort(n,"")),s=fe(this.weekdays(n,"")),o.push(r),i.push(a),d.push(s),l.push(r),l.push(a),l.push(s);o.sort(e),i.sort(e),d.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function Ve(){return this.hours()%12||12}function $e(e,t){W(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}W("H",["HH",2],0,"hour"),W("h",["hh",2],0,Ve),W("k",["kk",2],0,(function(){return this.hours()||24})),W("hmm",0,0,(function(){return""+Ve.apply(this)+S(this.minutes(),2)})),W("hmmss",0,0,(function(){return""+Ve.apply(this)+S(this.minutes(),2)+S(this.seconds(),2)})),W("Hmm",0,0,(function(){return""+this.hours()+S(this.minutes(),2)})),W("Hmmss",0,0,(function(){return""+this.hours()+S(this.minutes(),2)+S(this.seconds(),2)})),$e("a",!0),$e("A",!1),z("hour","h"),q("hour",13),he("a",Qe),he("A",Qe),he("H",re),he("h",re),he("k",re),he("HH",re,X),he("hh",re,X),he("kk",re,X),he("hmm",ae),he("hmmss",se),he("Hmm",ae),he("Hmmss",se),ye(["H","HH"],3),ye(["k","kk"],(function(e,t,n){var r=G(e);t[3]=24===r?0:r})),ye(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ye(["h","hh"],(function(e,t,n){t[3]=G(e),p(n).bigHour=!0})),ye("hmm",(function(e,t,n){var r=e.length-2;t[3]=G(e.substr(0,r)),t[4]=G(e.substr(r)),p(n).bigHour=!0})),ye("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=G(e.substr(0,r)),t[4]=G(e.substr(r,2)),t[5]=G(e.substr(a)),p(n).bigHour=!0})),ye("Hmm",(function(e,t,n){var r=e.length-2;t[3]=G(e.substr(0,r)),t[4]=G(e.substr(r))})),ye("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=G(e.substr(0,r)),t[4]=G(e.substr(r,2)),t[5]=G(e.substr(a))}));var Ke=Z("Hours",!0);var Xe,et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:be,monthsShort:Ae,week:{dow:0,doy:6},weekdays:Ne,weekdaysMin:Re,weekdaysShort:Ie,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function at(e){return e?e.toLowerCase().replace("_","-"):e}function st(t){var r=null;if(void 0===tt[t]&&e&&e.exports)try{r=Xe._abbr,n(6700)("./"+t),ot(r)}catch(e){tt[t]=null}return tt[t]}function ot(e,t){var n;return e&&((n=l(t)?dt(e):it(e,t))?Xe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Xe._abbr}function it(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=st(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new C(T(r,t)),nt[e]&&nt[e].forEach((function(e){it(e.name,e.config)})),ot(e),tt[e]}return delete tt[e],null}function dt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Xe;if(!s(e)){if(t=st(e))return t;e=[e]}return function(e){for(var t,n,r,a,s=0;s<e.length;){for(t=(a=at(e[s]).split("-")).length,n=(n=at(e[s+1]))?n.split("-"):null;t>0;){if(r=st(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&rt(a,n)>=t-1)break;t--}s++}return Xe}(e)}function lt(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>ke(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,p(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),p(e)._overflowWeeks&&-1===t&&(t=7),p(e)._overflowWeekday&&-1===t&&(t=8),p(e).overflow=t),e}var ut=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,_t=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ct=/Z|[+-]\d\d(?::?\d\d)?/,mt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],ht=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((-?\d+)/i,ft=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,gt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,r,a,s,o,i=e._i,d=ut.exec(i)||_t.exec(i);if(d){for(p(e).iso=!0,t=0,n=mt.length;t<n;t++)if(mt[t][1].exec(d[1])){a=mt[t][0],r=!1!==mt[t][2];break}if(null==a)return void(e._isValid=!1);if(d[3]){for(t=0,n=ht.length;t<n;t++)if(ht[t][1].exec(d[3])){s=(d[2]||" ")+ht[t][0];break}if(null==s)return void(e._isValid=!1)}if(!r&&null!=s)return void(e._isValid=!1);if(d[4]){if(!ct.exec(d[4]))return void(e._isValid=!1);o="Z"}e._f=a+(s||"")+(o||""),bt(e)}else e._isValid=!1}function Mt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function Lt(e){var t,n,r,a,s,o,i,d,l=ft.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],s=l[5],o=l[6],i=l[7],d=[Mt(n),Ae.indexOf(r),parseInt(a,10),parseInt(s,10),parseInt(o,10)],i&&d.push(parseInt(i,10)),t=d,!function(e,t,n){return!e||Ie.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(p(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return gt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Oe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),p(e).rfc2822=!0}else e._isValid=!1}function Yt(e,t,n){return null!=e?e:null!=t?t:n}function kt(e){var t,n,r,s,o,i=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,s,o,i,d,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(s=1,o=4,n=Yt(t.GG,e._a[0],Pe(vt(),1,4).year),r=Yt(t.W,1),((a=Yt(t.E,1))<1||a>7)&&(d=!0)):(s=e._locale._week.dow,o=e._locale._week.doy,l=Pe(vt(),s,o),n=Yt(t.gg,e._a[0],l.year),r=Yt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(d=!0):null!=t.e?(a=t.e+s,(t.e<0||t.e>6)&&(d=!0)):a=s),r<1||r>Fe(n,s,o)?p(e)._overflowWeeks=!0:null!=d?p(e)._overflowWeekday=!0:(i=Ee(n,r,a,s,o),e._a[0]=i.year,e._dayOfYear=i.dayOfYear)}(e),null!=e._dayOfYear&&(o=Yt(e._a[0],r[0]),(e._dayOfYear>je(o)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=Oe(o,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=i[t]=r[t];for(;t<7;t++)e._a[t]=i[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?Oe:Be).apply(null,i),s=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==s&&(p(e).weekdayMismatch=!0)}}function bt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],p(e).empty=!0;var t,n,r,s,o,i,d=""+e._i,l=d.length,u=0;for(r=P(e._f,e._locale).match(j)||[],t=0;t<r.length;t++)s=r[t],(n=(d.match(pe(s,e))||[])[0])&&((o=d.substr(0,d.indexOf(n))).length>0&&p(e).unusedInput.push(o),d=d.slice(d.indexOf(n)+n.length),u+=n.length),O[s]?(n?p(e).empty=!1:p(e).unusedTokens.push(s),Le(s,n,e)):e._strict&&!n&&p(e).unusedTokens.push(s);p(e).charsLeftOver=l-u,d.length>0&&p(e).unusedInput.push(d),e._a[3]<=12&&!0===p(e).bigHour&&e._a[3]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),null!==(i=p(e).era)&&(e._a[0]=e._locale.erasConvertYear(i,e._a[0])),kt(e),lt(e)}else Lt(e);else yt(e)}function At(e){var t=e._i,n=e._f;return e._locale=e._locale||dt(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),k(t)?new Y(lt(t)):(_(t)?e._d=t:s(n)?function(e){var t,n,r,a,s,o,i=!1;if(0===e._f.length)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)s=0,o=!1,t=L({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],bt(t),f(t)&&(o=!0),s+=p(t).charsLeftOver,s+=10*p(t).unusedTokens.length,p(t).score=s,i?s<r&&(r=s,n=t):(null==r||s<r||o)&&(r=s,n=t,o&&(i=!0));m(e,n||t)}(e):n?bt(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):_(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,Lt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):s(t)?(e._a=c(t.slice(0),(function(e){return parseInt(e,10)})),kt(e)):o(t)?function(e){if(!e._d){var t=I(e._i),n=void 0===t.day?t.date:t.day;e._a=c([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),kt(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),f(e)||(e._d=null),e))}function wt(e,t,n,r,a){var i,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&d(e)||s(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(i=new Y(lt(At(l))))._nextDay&&(i.add(1,"d"),i._nextDay=void 0),i}function vt(e,t,n,r){return wt(e,t,n,r,!1)}a.createFromInputFallback=A("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Dt=A("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=vt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()})),xt=A("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=vt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()}));function Tt(e,t){var n,r;if(1===t.length&&s(t[0])&&(t=t[0]),!t.length)return vt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Ct=["year","quarter","month","week","day","hour","minute","second","millisecond"];function St(e){var t=I(e),n=t.year||0,r=t.quarter||0,a=t.month||0,s=t.week||t.isoWeek||0,o=t.day||0,d=t.hour||0,l=t.minute||0,u=t.second||0,_=t.millisecond||0;this._isValid=function(e){var t,n,r=!1;for(t in e)if(i(e,t)&&(-1===Ye.call(Ct,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Ct.length;++n)if(e[Ct[n]]){if(r)return!1;parseFloat(e[Ct[n]])!==G(e[Ct[n]])&&(r=!0)}return!0}(t),this._milliseconds=+_+1e3*u+6e4*l+1e3*d*60*60,this._days=+o+7*s,this._months=+a+3*r+12*n,this._data={},this._locale=dt(),this._bubble()}function jt(e){return e instanceof St}function Ht(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Bt(e,t){W(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+S(~~(e/60),2)+t+S(~~e%60,2)}))}Bt("Z",":"),Bt("ZZ",""),he("Z",ce),he("ZZ",ce),ye(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Wt(ce,e)}));var Ot=/([\+\-]|\d\d)/gi;function Wt(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(Ot)||["-",0,0])[1]+G(n[2]))?0:"+"===n[0]?r:-r}function Et(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(k(e)||_(e)?e.valueOf():vt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):vt(e).local()}function Pt(e){return-Math.round(e._d.getTimezoneOffset())}function Ft(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var zt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Nt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function It(e,t){var n,r,a,s,o,d,l=e,_=null;return jt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(_=zt.exec(e))?(n="-"===_[1]?-1:1,l={y:0,d:G(_[2])*n,h:G(_[3])*n,m:G(_[4])*n,s:G(_[5])*n,ms:G(Ht(1e3*_[6]))*n}):(_=Nt.exec(e))?(n="-"===_[1]?-1:1,l={y:Rt(_[2],n),M:Rt(_[3],n),w:Rt(_[4],n),d:Rt(_[5],n),h:Rt(_[6],n),m:Rt(_[7],n),s:Rt(_[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(s=vt(l.from),o=vt(l.to),a=s.isValid()&&o.isValid()?(o=Et(o,s),s.isBefore(o)?d=qt(s,o):((d=qt(o,s)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new St(l),jt(e)&&i(e,"_locale")&&(r._locale=e._locale),jt(e)&&i(e,"_isValid")&&(r._isValid=e._isValid),r}function Rt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function qt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Jt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(D(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Ut(this,It(n,r),e),this}}function Ut(e,t,n,r){var s=t._milliseconds,o=Ht(t._days),i=Ht(t._months);e.isValid()&&(r=null==r||r,i&&Te(e,V(e,"Month")+i*n),o&&$(e,"Date",V(e,"Date")+o*n),s&&e._d.setTime(e._d.valueOf()+s*n),r&&a.updateOffset(e,o||i))}It.fn=St.prototype,It.invalid=function(){return It(NaN)};var Gt=Jt(1,"add"),Zt=Jt(-1,"subtract");function Vt(e){return"string"==typeof e||e instanceof String}function $t(e){return k(e)||_(e)||Vt(e)||u(e)||function(e){var t=s(e),n=!1;return t&&(n=0===e.filter((function(t){return!u(t)&&Vt(e)})).length),t&&n}(e)||function(e){var t,n,r=o(e)&&!d(e),a=!1,s=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<s.length;t+=1)n=s[t],a=a||i(e,n);return r&&a}(e)||null==e}function Qt(e){var t,n=o(e)&&!d(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||i(e,a[t]);return n&&r}function Kt(e,t){if(e.date()<t.date())return-Kt(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=dt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var en=A("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function tn(){return this._locale}var nn=1e3,rn=6e4,an=36e5,sn=126227808e5;function on(e,t){return(e%t+t)%t}function dn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function un(e,t){return t.erasAbbrRegex(e)}function _n(){var e,t,n=[],r=[],a=[],s=[],o=this.eras();for(e=0,t=o.length;e<t;++e)r.push(fe(o[e].name)),n.push(fe(o[e].abbr)),a.push(fe(o[e].narrow)),s.push(fe(o[e].name)),s.push(fe(o[e].abbr)),s.push(fe(o[e].narrow));this._erasRegex=new RegExp("^("+s.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+r.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+a.join("|")+")","i")}function cn(e,t){W(0,[e,e.length],0,t)}function mn(e,t,n,r,a){var s;return null==e?Pe(this,r,a).year:(t>(s=Fe(e,r,a))&&(t=s),hn.call(this,e,t,n,r,a))}function hn(e,t,n,r,a){var s=Ee(e,t,n,r,a),o=Oe(s.year,0,s.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}W("N",0,0,"eraAbbr"),W("NN",0,0,"eraAbbr"),W("NNN",0,0,"eraAbbr"),W("NNNN",0,0,"eraName"),W("NNNNN",0,0,"eraNarrow"),W("y",["y",1],"yo","eraYear"),W("y",["yy",2],0,"eraYear"),W("y",["yyy",3],0,"eraYear"),W("y",["yyyy",4],0,"eraYear"),he("N",un),he("NN",un),he("NNN",un),he("NNNN",(function(e,t){return t.erasNameRegex(e)})),he("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ye(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?p(n).era=a:p(n).invalidEra=e})),he("y",le),he("yy",le),he("yyy",le),he("yyyy",le),he("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ye(["y","yy","yyy","yyyy"],0),ye(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[0]=n._locale.eraYearOrdinalParse(e,a):t[0]=parseInt(e,10)})),W(0,["gg",2],0,(function(){return this.weekYear()%100})),W(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),cn("gggg","weekYear"),cn("ggggg","weekYear"),cn("GGGG","isoWeekYear"),cn("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),q("weekYear",1),q("isoWeekYear",1),he("G",ue),he("g",ue),he("GG",re,X),he("gg",re,X),he("GGGG",ie,te),he("gggg",ie,te),he("GGGGG",de,ne),he("ggggg",de,ne),Me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=G(e)})),Me(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),W("Q",0,"Qo","quarter"),z("quarter","Q"),q("quarter",7),he("Q",K),ye("Q",(function(e,t){t[1]=3*(G(e)-1)})),W("D",["DD",2],"Do","date"),z("date","D"),q("date",9),he("D",re),he("DD",re,X),he("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ye(["D","DD"],2),ye("Do",(function(e,t){t[2]=G(e.match(re)[0])}));var pn=Z("Date",!0);W("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),q("dayOfYear",4),he("DDD",oe),he("DDDD",ee),ye(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=G(e)})),W("m",["mm",2],0,"minute"),z("minute","m"),q("minute",14),he("m",re),he("mm",re,X),ye(["m","mm"],4);var fn=Z("Minutes",!1);W("s",["ss",2],0,"second"),z("second","s"),q("second",15),he("s",re),he("ss",re,X),ye(["s","ss"],5);var gn,yn,Mn=Z("Seconds",!1);for(W("S",0,0,(function(){return~~(this.millisecond()/100)})),W(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),W(0,["SSS",3],0,"millisecond"),W(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),W(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),W(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),W(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),W(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),W(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),z("millisecond","ms"),q("millisecond",16),he("S",oe,K),he("SS",oe,X),he("SSS",oe,ee),gn="SSSS";gn.length<=9;gn+="S")he(gn,le);function Ln(e,t){t[6]=G(1e3*("0."+e))}for(gn="S";gn.length<=9;gn+="S")ye(gn,Ln);yn=Z("Milliseconds",!1),W("z",0,0,"zoneAbbr"),W("zz",0,0,"zoneName");var Yn=Y.prototype;function kn(e){return e}Yn.add=Gt,Yn.calendar=function(e,t){1===arguments.length&&(arguments[0]?$t(arguments[0])?(e=arguments[0],t=void 0):Qt(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||vt(),r=Et(n,this).startOf("day"),s=a.calendarFormat(this,r)||"sameElse",o=t&&(x(t[s])?t[s].call(this,n):t[s]);return this.format(o||this.localeData().calendar(s,this,vt(n)))},Yn.clone=function(){return new Y(this)},Yn.diff=function(e,t,n){var r,a,s;if(!this.isValid())return NaN;if(!(r=Et(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=N(t)){case"year":s=Kt(this,r)/12;break;case"month":s=Kt(this,r);break;case"quarter":s=Kt(this,r)/3;break;case"second":s=(this-r)/1e3;break;case"minute":s=(this-r)/6e4;break;case"hour":s=(this-r)/36e5;break;case"day":s=(this-r-a)/864e5;break;case"week":s=(this-r-a)/6048e5;break;default:s=this-r}return n?s:U(s)},Yn.endOf=function(e){var t,n;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=an-on(t+(this._isUTC?0:this.utcOffset()*rn),an)-1;break;case"minute":t=this._d.valueOf(),t+=rn-on(t,rn)-1;break;case"second":t=this._d.valueOf(),t+=nn-on(t,nn)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},Yn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=E(this,e);return this.localeData().postformat(t)},Yn.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||vt(e).isValid())?It({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Yn.fromNow=function(e){return this.from(vt(),e)},Yn.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||vt(e).isValid())?It({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Yn.toNow=function(e){return this.to(vt(),e)},Yn.get=function(e){return x(this[e=N(e)])?this[e]():this},Yn.invalidAt=function(){return p(this).overflow},Yn.isAfter=function(e,t){var n=k(e)?e:vt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Yn.isBefore=function(e,t){var n=k(e)?e:vt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Yn.isBetween=function(e,t,n,r){var a=k(e)?e:vt(e),s=k(t)?t:vt(t);return!!(this.isValid()&&a.isValid()&&s.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(s,n):!this.isAfter(s,n))},Yn.isSame=function(e,t){var n,r=k(e)?e:vt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=N(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Yn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Yn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Yn.isValid=function(){return f(this)},Yn.lang=en,Yn.locale=Xt,Yn.localeData=tn,Yn.max=xt,Yn.min=Dt,Yn.parsingFlags=function(){return m({},p(this))},Yn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)i(e,t)&&n.push({unit:t,priority:R[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=I(e));for(n=0;n<r.length;n++)this[r[n].unit](e[r[n].unit])}else if(x(this[e=N(e)]))return this[e](t);return this},Yn.startOf=function(e){var t,n;if(void 0===(e=N(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:dn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=on(t+(this._isUTC?0:this.utcOffset()*rn),an);break;case"minute":t=this._d.valueOf(),t-=on(t,rn);break;case"second":t=this._d.valueOf(),t-=on(t,nn)}return this._d.setTime(t),a.updateOffset(this,!0),this},Yn.subtract=Zt,Yn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},Yn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},Yn.toDate=function(){return new Date(this.valueOf())},Yn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?E(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):x(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",E(n,"Z")):E(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Yn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Yn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Yn.toJSON=function(){return this.isValid()?this.toISOString():null},Yn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Yn.unix=function(){return Math.floor(this.valueOf()/1e3)},Yn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Yn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Yn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},Yn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},Yn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},Yn.eraYear=function(){var e,t,n,r,s=this.localeData().eras();for(e=0,t=s.length;e<t;++e)if(n=s[e].since<=s[e].until?1:-1,r=this.clone().startOf("day").valueOf(),s[e].since<=r&&r<=s[e].until||s[e].until<=r&&r<=s[e].since)return(this.year()-a(s[e].since).year())*n+s[e].offset;return this.year()},Yn.year=He,Yn.isLeapYear=function(){return J(this.year())},Yn.weekYear=function(e){return mn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Yn.isoWeekYear=function(e){return mn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Yn.quarter=Yn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Yn.month=Ce,Yn.daysInMonth=function(){return ke(this.year(),this.month())},Yn.week=Yn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Yn.isoWeek=Yn.isoWeeks=function(e){var t=Pe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Yn.weeksInYear=function(){var e=this.localeData()._week;return Fe(this.year(),e.dow,e.doy)},Yn.weeksInWeekYear=function(){var e=this.localeData()._week;return Fe(this.weekYear(),e.dow,e.doy)},Yn.isoWeeksInYear=function(){return Fe(this.year(),1,4)},Yn.isoWeeksInISOWeekYear=function(){return Fe(this.isoWeekYear(),1,4)},Yn.date=pn,Yn.day=Yn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Yn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Yn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Yn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Yn.hour=Yn.hours=Ke,Yn.minute=Yn.minutes=fn,Yn.second=Yn.seconds=Mn,Yn.millisecond=Yn.milliseconds=yn,Yn.utcOffset=function(e,t,n){var r,s=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Wt(ce,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Pt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),s!==e&&(!t||this._changeInProgress?Ut(this,It(e-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?s:Pt(this)},Yn.utc=function(e){return this.utcOffset(0,e)},Yn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Pt(this),"m")),this},Yn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Wt(_e,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Yn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?vt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Yn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Yn.isLocal=function(){return!!this.isValid()&&!this._isUTC},Yn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Yn.isUtc=Ft,Yn.isUTC=Ft,Yn.zoneAbbr=function(){return this._isUTC?"UTC":""},Yn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Yn.dates=A("dates accessor is deprecated. Use date instead.",pn),Yn.months=A("months accessor is deprecated. Use month instead",Ce),Yn.years=A("years accessor is deprecated. Use year instead",He),Yn.zone=A("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),Yn.isDSTShifted=A("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return L(t,this),(t=At(t))._a?(e=t._isUTC?h(t._a):vt(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),s=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&G(e[r])!==G(t[r]))&&o++;return o+s}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var bn=C.prototype;function An(e,t,n,r){var a=dt(),s=h().set(r,t);return a[n](s,e)}function wn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return An(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=An(e,r,n,"month");return a}function vn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,s=dt(),o=e?s._week.dow:0,i=[];if(null!=n)return An(t,(n+o)%7,r,"day");for(a=0;a<7;a++)i[a]=An(t,(a+o)%7,r,"day");return i}bn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return x(r)?r.call(t,n):r},bn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(j).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},bn.invalidDate=function(){return this._invalidDate},bn.ordinal=function(e){return this._ordinal.replace("%d",e)},bn.preparse=kn,bn.postformat=kn,bn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return x(a)?a(e,t,n,r):a.replace(/%d/i,e)},bn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return x(n)?n(t):n.replace(/%s/i,t)},bn.set=function(e){var t,n;for(n in e)i(e,n)&&(x(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},bn.eras=function(e,t){var n,r,s,o=this._eras||dt("en")._eras;for(n=0,r=o.length;n<r;++n){switch(typeof o[n].since){case"string":s=a(o[n].since).startOf("day"),o[n].since=s.valueOf()}switch(typeof o[n].until){case"undefined":o[n].until=1/0;break;case"string":s=a(o[n].until).startOf("day").valueOf(),o[n].until=s.valueOf()}}return o},bn.erasParse=function(e,t,n){var r,a,s,o,i,d=this.eras();for(e=e.toUpperCase(),r=0,a=d.length;r<a;++r)if(s=d[r].name.toUpperCase(),o=d[r].abbr.toUpperCase(),i=d[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(o===e)return d[r];break;case"NNNN":if(s===e)return d[r];break;case"NNNNN":if(i===e)return d[r]}else if([s,o,i].indexOf(e)>=0)return d[r]},bn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},bn.erasAbbrRegex=function(e){return i(this,"_erasAbbrRegex")||_n.call(this),e?this._erasAbbrRegex:this._erasRegex},bn.erasNameRegex=function(e){return i(this,"_erasNameRegex")||_n.call(this),e?this._erasNameRegex:this._erasRegex},bn.erasNarrowRegex=function(e){return i(this,"_erasNarrowRegex")||_n.call(this),e?this._erasNarrowRegex:this._erasRegex},bn.months=function(e,t){return e?s(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||we).test(t)?"format":"standalone"][e.month()]:s(this._months)?this._months:this._months.standalone},bn.monthsShort=function(e,t){return e?s(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[we.test(t)?"format":"standalone"][e.month()]:s(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},bn.monthsParse=function(e,t,n){var r,a,s;if(this._monthsParseExact)return xe.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(s="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(s.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},bn.monthsRegex=function(e){return this._monthsParseExact?(i(this,"_monthsRegex")||Se.call(this),e?this._monthsStrictRegex:this._monthsRegex):(i(this,"_monthsRegex")||(this._monthsRegex=De),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},bn.monthsShortRegex=function(e){return this._monthsParseExact?(i(this,"_monthsRegex")||Se.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(i(this,"_monthsShortRegex")||(this._monthsShortRegex=ve),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},bn.week=function(e){return Pe(e,this._week.dow,this._week.doy).week},bn.firstDayOfYear=function(){return this._week.doy},bn.firstDayOfWeek=function(){return this._week.dow},bn.weekdays=function(e,t){var n=s(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?ze(n,this._week.dow):e?n[e.day()]:n},bn.weekdaysMin=function(e){return!0===e?ze(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},bn.weekdaysShort=function(e){return!0===e?ze(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},bn.weekdaysParse=function(e,t,n){var r,a,s;if(this._weekdaysParseExact)return Ge.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(s="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(s.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},bn.weekdaysRegex=function(e){return this._weekdaysParseExact?(i(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(i(this,"_weekdaysRegex")||(this._weekdaysRegex=qe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},bn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(i(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(i(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},bn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(i(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(i(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ue),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},bn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},bn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ot("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===G(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=A("moment.lang is deprecated. Use moment.locale instead.",ot),a.langData=A("moment.langData is deprecated. Use moment.localeData instead.",dt);var Dn=Math.abs;function xn(e,t,n,r){var a=It(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Tn(e){return e<0?Math.floor(e):Math.ceil(e)}function Cn(e){return 4800*e/146097}function Sn(e){return 146097*e/4800}function jn(e){return function(){return this.as(e)}}var Hn=jn("ms"),Bn=jn("s"),On=jn("m"),Wn=jn("h"),En=jn("d"),Pn=jn("w"),Fn=jn("M"),zn=jn("Q"),Nn=jn("y");function In(e){return function(){return this.isValid()?this._data[e]:NaN}}var Rn=In("milliseconds"),qn=In("seconds"),Jn=In("minutes"),Un=In("hours"),Gn=In("days"),Zn=In("months"),Vn=In("years");var $n=Math.round,Qn={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Kn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Xn=Math.abs;function er(e){return(e>0)-(e<0)||+e}function tr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,s,o,i,d=Xn(this._milliseconds)/1e3,l=Xn(this._days),u=Xn(this._months),_=this.asSeconds();return _?(e=U(d/60),t=U(e/60),d%=60,e%=60,n=U(u/12),u%=12,r=d?d.toFixed(3).replace(/\.?0+$/,""):"",a=_<0?"-":"",s=er(this._months)!==er(_)?"-":"",o=er(this._days)!==er(_)?"-":"",i=er(this._milliseconds)!==er(_)?"-":"",a+"P"+(n?s+n+"Y":"")+(u?s+u+"M":"")+(l?o+l+"D":"")+(t||e||d?"T":"")+(t?i+t+"H":"")+(e?i+e+"M":"")+(d?i+r+"S":"")):"P0D"}var nr=St.prototype;return nr.isValid=function(){return this._isValid},nr.abs=function(){var e=this._data;return this._milliseconds=Dn(this._milliseconds),this._days=Dn(this._days),this._months=Dn(this._months),e.milliseconds=Dn(e.milliseconds),e.seconds=Dn(e.seconds),e.minutes=Dn(e.minutes),e.hours=Dn(e.hours),e.months=Dn(e.months),e.years=Dn(e.years),this},nr.add=function(e,t){return xn(this,e,t,1)},nr.subtract=function(e,t){return xn(this,e,t,-1)},nr.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=N(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Cn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Sn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},nr.asMilliseconds=Hn,nr.asSeconds=Bn,nr.asMinutes=On,nr.asHours=Wn,nr.asDays=En,nr.asWeeks=Pn,nr.asMonths=Fn,nr.asQuarters=zn,nr.asYears=Nn,nr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*G(this._months/12):NaN},nr._bubble=function(){var e,t,n,r,a,s=this._milliseconds,o=this._days,i=this._months,d=this._data;return s>=0&&o>=0&&i>=0||s<=0&&o<=0&&i<=0||(s+=864e5*Tn(Sn(i)+o),o=0,i=0),d.milliseconds=s%1e3,e=U(s/1e3),d.seconds=e%60,t=U(e/60),d.minutes=t%60,n=U(t/60),d.hours=n%24,o+=U(n/24),i+=a=U(Cn(o)),o-=Tn(Sn(a)),r=U(i/12),i%=12,d.days=o,d.months=i,d.years=r,this},nr.clone=function(){return It(this)},nr.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},nr.milliseconds=Rn,nr.seconds=qn,nr.minutes=Jn,nr.hours=Un,nr.days=Gn,nr.weeks=function(){return U(this.days()/7)},nr.months=Zn,nr.years=Vn,nr.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,s=Qn;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(s=Object.assign({},Qn,t),null!=t.s&&null==t.ss&&(s.ss=t.s-1)),r=function(e,t,n,r){var a=It(e).abs(),s=$n(a.as("s")),o=$n(a.as("m")),i=$n(a.as("h")),d=$n(a.as("d")),l=$n(a.as("M")),u=$n(a.as("w")),_=$n(a.as("y")),c=s<=n.ss&&["s",s]||s<n.s&&["ss",s]||o<=1&&["m"]||o<n.m&&["mm",o]||i<=1&&["h"]||i<n.h&&["hh",i]||d<=1&&["d"]||d<n.d&&["dd",d];return null!=n.w&&(c=c||u<=1&&["w"]||u<n.w&&["ww",u]),(c=c||l<=1&&["M"]||l<n.M&&["MM",l]||_<=1&&["y"]||["yy",_])[2]=t,c[3]=+e>0,c[4]=r,Kn.apply(null,c)}(this,!a,s,n=this.localeData()),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},nr.toISOString=tr,nr.toString=tr,nr.toJSON=tr,nr.locale=Xt,nr.localeData=tn,nr.toIsoString=A("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",tr),nr.lang=en,W("X",0,0,"unix"),W("x",0,0,"valueOf"),he("x",ue),he("X",/[+-]?\d+(\.\d{1,3})?/),ye("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ye("x",(function(e,t,n){n._d=new Date(G(e))})),a.version="2.29.1",t=vt,a.fn=Yn,a.min=function(){return Tt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Tt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return vt(1e3*e)},a.months=function(e,t){return wn(e,t,"months")},a.isDate=_,a.locale=ot,a.invalid=g,a.duration=It,a.isMoment=k,a.weekdays=function(e,t,n){return vn(e,t,n,"weekdays")},a.parseZone=function(){return vt.apply(null,arguments).parseZone()},a.localeData=dt,a.isDuration=jt,a.monthsShort=function(e,t){return wn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return vn(e,t,n,"weekdaysMin")},a.defineLocale=it,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=tt[e]&&null!=tt[e].parentLocale?tt[e].set(T(tt[e]._config,t)):(null!=(r=st(e))&&(a=r._config),t=T(a,t),null==r&&(t.abbr=e),(n=new C(t)).parentLocale=tt[e],tt[e]=n),ot(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?(tt[e]=tt[e].parentLocale,e===ot()&&ot(e)):null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return w(tt)},a.weekdaysShort=function(e,t,n){return vn(e,t,n,"weekdaysShort")},a.normalizeUnits=N,a.relativeTimeRounding=function(e){return void 0===e?$n:"function"==typeof e&&($n=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==Qn[e]&&(void 0===t?Qn[e]:(Qn[e]=t,"s"===e&&(Qn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=Yn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},2769:function(e,t,n){var r,a,s=n(9755);void 0===this&&void 0!==window&&window,r=[n(9755),n(381)],void 0===(a=function(e,t){return function(e,t){var n,r,a;function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}(function(e){var t,s,o,i,d={},l={},u={},_={},c=Object.prototype.hasOwnProperty,m=[].slice,h=/\.js$/;function p(e,t){return c.call(e,t)}function f(e,t){var n,r,a,s,o,i,d,l,_,c,m,p=t&&t.split("/"),f=u.map,g=f&&f["*"]||{};if(e){for(o=(e=e.split("/")).length-1,u.nodeIdCompat&&h.test(e[o])&&(e[o]=e[o].replace(h,"")),"."===e[0].charAt(0)&&p&&(e=p.slice(0,p.length-1).concat(e)),_=0;_<e.length;_++)if("."===(m=e[_]))e.splice(_,1),_-=1;else if(".."===m){if(0===_||1===_&&".."===e[2]||".."===e[_-1])continue;_>0&&(e.splice(_-1,2),_-=2)}e=e.join("/")}if((p||g)&&f){for(_=(n=e.split("/")).length;_>0;_-=1){if(r=n.slice(0,_).join("/"),p)for(c=p.length;c>0;c-=1)if((a=f[p.slice(0,c).join("/")])&&(a=a[r])){s=a,i=_;break}if(s)break;!d&&g&&g[r]&&(d=g[r],l=_)}!s&&d&&(s=d,i=l),s&&(n.splice(0,i,s),e=n.join("/"))}return e}function g(t,n){return function(){var r=m.call(arguments,0);return"string"!=typeof r[0]&&1===r.length&&r.push(null),s.apply(e,r.concat([t,n]))}}function y(e){return function(t){d[e]=t}}function M(n){if(p(l,n)){var r=l[n];delete l[n],_[n]=!0,t.apply(e,r)}if(!p(d,n)&&!p(_,n))throw new Error("No "+n);return d[n]}function L(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function Y(e){return e?L(e):[]}function k(e){return function(){return u&&u.config&&u.config[e]||{}}}o=function(e,t){var n,r,a=L(e),s=a[0],o=t[1];return e=a[1],s&&(n=M(s=f(s,o))),s?e=n&&n.normalize?n.normalize(e,(r=o,function(e){return f(e,r)})):f(e,o):(s=(a=L(e=f(e,o)))[0],e=a[1],s&&(n=M(s))),{f:s?s+"!"+e:e,n:e,pr:s,p:n}},i={require:function(e){return g(e)},exports:function(e){var t=d[e];return void 0!==t?t:d[e]={}},module:function(e){return{id:e,uri:"",exports:d[e],config:k(e)}}},t=function(t,n,r,a){var s,u,c,m,h,f,L,k=[],b=typeof r;if(f=Y(a=a||t),"undefined"===b||"function"===b){for(n=!n.length&&r.length?["require","exports","module"]:n,h=0;h<n.length;h+=1)if("require"===(u=(m=o(n[h],f)).f))k[h]=i.require(t);else if("exports"===u)k[h]=i.exports(t),L=!0;else if("module"===u)s=k[h]=i.module(t);else if(p(d,u)||p(l,u)||p(_,u))k[h]=M(u);else{if(!m.p)throw new Error(t+" missing "+u);m.p.load(m.n,g(a,!0),y(u),{}),k[h]=d[u]}c=r?r.apply(d[t],k):void 0,t&&(s&&s.exports!==e&&s.exports!==d[t]?d[t]=s.exports:c===e&&L||(d[t]=c))}else t&&(d[t]=r)},n=r=s=function(n,r,a,d,l){if("string"==typeof n)return i[n]?i[n](r):M(o(n,Y(r)).f);if(!n.splice){if((u=n).deps&&s(u.deps,u.callback),!r)return;r.splice?(n=r,r=a,a=null):n=e}return r=r||function(){},"function"==typeof a&&(a=d,d=l),d?t(e,n,r,a):setTimeout((function(){t(e,n,r,a)}),4),s},s.config=function(e){return s(e)},n._defined=d,(a=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),p(d,e)||p(l,e)||(l[e]=[e,t,n])}).amd={jQuery:!0}})(),a("almond",(function(){})),a("component/models",[],(function(){return{name:"pignoseCalendar",version:"1.4.31",preference:{supports:{themes:["light","dark","blue"]}}}})),a("component/helper",["./models"],(function(e){var t={},n={},r={},a=/[A-Z]/,s=function(){};return s.format=function(e){if(e){var n=Array.prototype.slice.call(arguments,1),r=e+n.join(".");if(t[r])return t[r];for(var a=n.length,s=0;s<a;s++){var o=n[s];e=e.replace(new RegExp("((?!\\\\)?\\{"+s+"(?!\\\\)?\\})","g"),o)}return e=e.replace(new RegExp("\\\\{([0-9]+)\\\\}","g"),"{$1}"),t[r]=e,e}return""},s.getClass=function(t){var r=[e.name,t].join(".");if(n[r])return n[r];for(var s=t.split(""),o=[],i=s.length,d=0,l=0;d<i;d++){var u=s[d];!0===a.test(u)&&(o[l++]="-",u=u.toString().toLowerCase()),o[l++]=u}var _=o.join("");return n[r]=_,_},s.getSubClass=function(t){if(t&&t.length){var n=t.split("");n[0]=n[0].toUpperCase(),t=n.join("")}return r[t]||(r[t]=s.getClass(s.format("{0}{1}",e.name,t))),r[t]},s})),a("shim/utils",[],(function(){return{register:function(e,t,n){if(!n){var r="PIGNOSE Calendar needs ".concat(e," library.\nIf you want to use built-in plugin, Import dist/pignose.calendar.full.js.\nType below code in your command line to install the library.");console&&"function"==typeof console.error&&(console.warn(r),console.warn("$ ".concat(t)))}return n}}})),a("moment",["./shim/utils"],(function(e){var n;try{n=t}catch(e){}return e.register("moment","npm install moment --save",n)})),a("manager/index",["../component/helper","moment"],(function(e,t){var n={},r=function(e){if(!e)throw new Error("first parameter `date` must be gave");if(e instanceof t==0){if("string"!=typeof e&&"number"!=typeof e)throw new Error("`date` option is invalid type. (date: "+e+").");e=t(e)}this.year=parseInt(e.format("YYYY"),10),this.month=parseInt(e.format("MM"),10),this.prevMonth=parseInt(e.clone().add(-1,"months").format("MM"),10),this.nextMonth=parseInt(e.clone().add(1,"months").format("MM"),10),this.day=parseInt(e.format("DD"),10),this.firstDay=1,this.lastDay=parseInt(e.clone().endOf("month").format("DD"),10),this.weekDay=e.weekday(),this.date=e};return r.prototype.toString=function(){return this.date.format("YYYY-MM-DD")},r.Convert=function(r,a,s){var o=e.format("{0}-{1}-{2}",r,a,s);return n[o]||(n[o]=t(o,"YYYY-MM-DD")),n[o]},r})),a("component/classNames",["../component/helper"],(function(e){return{top:e.getSubClass("top"),header:e.getSubClass("header"),body:e.getSubClass("body"),button:e.getSubClass("button")}})),a("configures/i18n",[],(function(){return{defaultLanguage:"en",supports:["ar","en","ko","fr","ch","de","nl","jp","pt","da","pl","es","cs","uk","ru","ka","ca"],weeks:{ar:["أحد","إثنين","ثلاثاء","أربعاء","خميس","جمعة","سبت"],en:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ko:["일","월","화","수","목","금","토"],fa:["شنبه","آدینه","پنج","چهار","سه","دو","یک"],fr:["Dim","Lun","Mar","Mer","Jeu","Ven","Sam"],ch:["日","一","二","三","四","五","六"],de:["SO","MO","DI","MI","DO","FR","SA"],nl:["Zo","Ma","Di","Wo","Do","Vr","Za"],jp:["日","月","火","水","木","金","土"],pt:["Dom","Seg","Ter","Qua","Qui","Sex","Sab"],da:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],pl:["Nie","Pon","Wto","Śro","Czw","Pią","Sob"],es:["Dom","Lun","Mar","Mié","Jue","Vie","Sáb"],it:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],cs:["Ne","Po","Út","St","Čt","Pá","So"],uk:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],ru:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],ka:["კვ","ორ","სმ","ოთ","ხთ","პრ","შბ"],ca:["Dg","Dl","Dm","Dc","Dj","Dv","Ds"]},monthsLong:{ar:["يناير","فبراير","مارس","إبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],en:["January","February","March","April","May","Jun","July","August","September","October","November","December"],ko:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],fa:["آذر","آبان","مهر","شهریور","مرداد","تیر","خرداد","اردیبهشت","فروردین","اسفند","بهمن","دی"],fr:["Janvier","Février","Mars","Avril","Mai","Juin","Juillet","Août","Septembre","Octobre","Novembre","Décembre"],ch:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],de:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],nl:["Januari","Februari","Maart","April","Mei","Juni","Juli","Augustus","September","Oktober","November","December"],jp:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],pt:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],da:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],pl:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],es:["Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"],it:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],cs:["Leden","Únor","Březen","Duben","Květen","Červen","Cervenec","Srpen","Září","Říjen","Listopad","Prosinec"],uk:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],ru:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],ka:["იანვარი","თებერვალი","მარტი","აპრილი","მაისი","ივნისი","ივლისი","აგვისტო","სექტემბერი","ოქტომბერი","ნოემბერი","დეკემბერი"],ca:["Gener","Febrer","Març","Abril","Maig","Juny","Juliol","Agost","Setembre","Octubre","Novembre","Desembre"]},months:{ar:["يناير","فبراير","مارس","إبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"],en:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ko:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],fa:["آذر","آبان","مهر","شهریور","مرداد","تیر","خرداد","اردیبهشت","فروردین","اسفند","بهمن","دی"],fr:["Jan","Fév","Mar","Avr","Mai","Juin","Juil","Aoû","Sep","Oct","Nov","Déc"],ch:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],de:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],nl:["Jan","Feb","Mrt","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],jp:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],pt:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],da:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],pl:["Sty","Lut","Mar","Kwi","Maj","Cze","Lip","Sie","Wrz","Paź","Lis","Gru"],es:["Ene","Feb","Mar","Abr","May","Jun","Jul","Ago","Sep","Oct","Nov","Dec"],it:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],cs:["Led","Úno","Bře","Dub","Kvě","Čvn","Čvc","Srp","Zář","Říj","Lis","Pro"],uk:["Січ","Лют","Бер","Квіт","Трав","Черв","Лип","Серп","Вер","Жовт","Лист","Груд"],ru:["Янв","Февр","Март","Апр","Май","Июнь","Июль","Авг","Сент","Окт","Нояб","Дек"],ka:["იან","თებ","მარ","აპრ","მაი","ივნ","ივლ","აგვ","სექ","ოქტ","ნოე","დეკ"],ca:["Gen","Feb","Mar","Abr","Mai","Jun","Jul","Ago","Set","Oct","Nov","Des"]},controls:{ar:{ok:"حسناً",cancel:"إلغاء"},en:{ok:"OK",cancel:"Cancel"},ko:{ok:"확인",cancel:"취소"},fa:{ok:"چک کنید",cancel:"لغو"},fr:{ok:"Vérifier",cancel:"Annuler"},ch:{ok:"确认",cancel:"取消"},de:{ok:"Okay",cancel:"Abbrechen"},nl:{ok:"Oké",cancel:"Annuleren"},jp:{ok:"確認",cancel:"キャンセル"},pt:{ok:"Verifique",cancel:"Cancelar"},da:{ok:"Bekræftelse",cancel:"aflyst"},pl:{ok:"Sprawdź",cancel:"Anuluj"},es:{ok:"Cheque",cancel:"Cancelar"},it:{ok:"conferma",cancel:"annullato"},cs:{ok:"Zkontrolujte",cancel:"Zrušit"},uk:{ok:"Вибрати",cancel:"Скасувати"},ru:{ok:"Выбрать",cancel:"Отмена"},ka:{ok:"არჩევა",cancel:"გაუქმება"},ca:{ok:"Confirmar",cancel:"Cancel·lar"}}}})),a("component/global",["../configures/i18n"],(function(e){return{language:e.defaultLanguage,languages:e,week:0,format:"YYYY-MM-DD"}})),a("component/options",["moment","./global"],(function(e,t){return{lang:null,languages:t.languages,theme:"light",date:e(),format:t.format,enabledDates:[],disabledDates:[],disabledWeekdays:[],disabledRanges:[],schedules:[],scheduleOptions:{colors:{}},week:t.week,weeks:t.languages.weeks.en,monthsLong:t.languages.monthsLong.en,months:t.languages.months.en,controls:t.languages.controls.en,pickWeeks:!1,initialize:!0,multiple:!1,toggle:!1,reverse:!1,buttons:!1,modal:!1,selectOver:!1,minDate:null,maxDate:null,init:null,select:null,apply:null,click:null,page:null,prev:null,next:null}})),a("jquery",["./shim/utils"],(function(e){var t;try{t=s||l}catch(e){}return e.register("jquery","npm install jquery --save",t)})),a("methods/configure",["../component/global","../component/models","../component/options","../configures/i18n","jquery"],(function(e,t,n,r,a){return function(s){var o=this;o.settings=a.extend(!0,{},n,s),o.settings.lang||(o.settings.lang=e.language),o.settings.lang!==r.defaultLanguage&&-1!==a.inArray(o.settings.lang,e.languages.supports)&&(o.settings.weeks=e.languages.weeks[o.settings.lang]||e.languages.weeks[r.defaultLanguage],o.settings.monthsLong=e.languages.monthsLong[o.settings.lang]||e.languages.monthsLong[r.defaultLanguage],o.settings.months=e.languages.months[o.settings.lang]||e.languages.months[r.defaultLanguage],o.settings.controls=e.languages.controls[o.settings.lang]||e.languages.controls[r.defaultLanguage]),"light"!==o.settings.theme&&-1===a.inArray(o.settings.theme,t.preference.supports.themes)&&(o.settings.theme="light"),!0===o.settings.pickWeeks&&(!1===o.settings.multiple?console.error("You must give true at settings.multiple options on PIGNOSE-Calendar for using in pickWeeks option."):!0===o.settings.toggle&&console.error("You must give false at settings.toggle options on PIGNOSE-Calendar for using in pickWeeks option.")),o.settings.week%=o.settings.weeks.length}})),a("methods/init",["../manager/index","../component/classNames","../component/helper","../component/models","../component/global","./configure","jquery","moment"],(function(e,t,n,r,a,s,i,d){var l=i(window);return i(document),function(u){var _=this;_.settings={},s.call(_,u),_.global={calendarHtml:n.format('<div class="{0} {0}-{4}">                                    <div class="{1}">                                      <a href="#" class="{1}-nav {1}-prev">                                          <span class="icon-arrow-left {1}-icon"></span>                                      </a>                                      <div class="{1}-date">                                          <span class="{1}-month"></span>                                          <span class="{1}-year"></span>                                      </div>                                      <a href="#" class="{1}-nav {1}-next">                                          <span class="icon-arrow-right {1}-icon"></span>                                      </a>                                    </div>                                    <div class="{2}"></div>                                    <div class="{3}"></div>                                  </div>',n.getClass(r.name),t.top,t.header,t.body,_.settings.theme),calendarButtonsHtml:n.format('<div class="{0}-group">                                            <a href="#" class="{0} {0}-cancel">{1}</a>                                            <a href="#" class="{0} {0}-apply">{2}</a>                                          </div>',t.button,_.settings.controls.cancel,_.settings.controls.ok),calendarScheduleContainerHtml:n.format('<div class="{0}-schedule-container"></div>',t.button),calendarSchedulePinHtml:n.format('<span class="{0}-schedule-pin {0}-schedule-pin-\\{0\\}" style="background-color: \\{1\\};"></span>',t.button)};var c=n.getSubClass("unitRange"),m=n.getSubClass("unitRangeFirst"),h=n.getSubClass("unitRangeLast"),p=n.getSubClass("unitActive"),f=[n.getSubClass("unitFirstActive"),n.getSubClass("unitSecondActive")],g=n.getSubClass("unitToggleActive"),y=n.getSubClass("unitToggleInactive"),M=null;return _.each((function(){var s=i(this),u={initialize:null,element:s,calendar:i(_.global.calendarHtml),input:s.is("input"),renderer:null,current:[null,null],date:{all:[],enabled:[],disabled:[]},storage:{activeDates:[],schedules:[]},dateManager:new e(_.settings.date),calendarWrapperHtml:n.format('<div class="{0}"></div>',n.getSubClass("wrapper")),calendarWrapperOverlayHtml:n.format('<div class="{0}"></div>',n.getSubClass("wrapperOverlay")),context:_},L=s;!0===_.settings.initialize&&(u.initialize=u.current[0]=u.dateManager.date.clone()),this.local=u,!0===_.settings.reverse?u.calendar.addClass(n.getSubClass("reverse")):u.calendar.addClass(n.getSubClass("default"));for(var Y=_.settings.week;Y<_.settings.weeks.length+_.settings.week;Y++){Y<0&&(Y=a.languages.weeks.en.length-Y);var k=_.settings.weeks[Y%_.settings.weeks.length];"string"==typeof k&&(k=k.toUpperCase(),i(n.format('<div class="{0} {0}-{2}">{1}</div>',n.getSubClass("week"),k,a.languages.weeks.en[Y%a.languages.weeks.en.length].toLowerCase())).appendTo(u.calendar.find("."+t.header)))}if(!0===_.settings.buttons&&(M=i(_.global.calendarButtonsHtml)).appendTo(u.calendar),!0===u.input||!0===_.settings.modal){var b,A=n.getSubClass("wrapperActive"),w=n.getSubClass("wrapperOverlayActive");(L=i(u.calendarWrapperHtml)).bind("click",(function(e){e.stopPropagation()})),s.bind("click",(function(e){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),(b=i("."+n.getSubClass("wrapperOverlay"))).length<1&&(b=i(u.calendarWrapperOverlayHtml)).appendTo("body"),b.unbind("click."+n.getClass(r.name)).bind("click."+n.getClass(r.name),(function(e){e.stopPropagation(),L.trigger("cancel."+n.getClass(r.name))})),!1===L.parent().is("body")&&L.appendTo("body"),L.show(),b.show(),l.unbind("resize."+n.getClass(r.name)).bind("resize."+n.getClass(r.name),(function(){L.css({marginLeft:-L.outerWidth()/2,marginTop:-L.outerHeight()/2})})).triggerHandler("resize."+n.getClass(r.name)),s[r.name]("set",s.val()),setTimeout((function(){b.addClass(w),L.addClass(A)}),25)})).bind("focus",(function(e){i(this).blur()})),L.unbind("cancel."+n.getClass(r.name)+" apply."+n.getClass(r.name)).bind("cancel."+n.getClass(r.name)+" apply."+n.getClass(r.name),(function(){b.removeClass(w).hide(),L.removeClass(A).hide()}))}var v=function(){if(!u.current[0]||!u.current[1])return!1;var e=u.current[0].format("YYYY-MM-DD"),t=u.current[1].format("YYYY-MM-DD"),r=d(Math.max(u.current[0].valueOf(),u.dateManager.date.clone().startOf("month").valueOf())),a=d(Math.min(u.current[1].valueOf(),u.dateManager.date.clone().endOf("month").valueOf())),s=r.format("YYYY-MM-DD")!==e,o=a.format("YYYY-MM-DD")!==t;!1===s&&r.add(1,"days"),!1===o&&a.add(-1,"days");for(var i=r.format("YYYY-MM-DD"),l=a.format("YYYY-MM-DD");r.format("YYYY-MM-DD")<=a.format("YYYY-MM-DD");r.add(1,"days")){var _=r.format("YYYY-MM-DD"),p=u.calendar.find(n.format('.{0}[data-date="{1}"]',n.getSubClass("unit"),_)).addClass(c);_===i&&p.addClass(m),_===l&&p.addClass(h)}},D=function(e,t,n){return!!n&&e.diff(n)<0&&t.diff(n)>0};u.renderer=function(){if(u.calendar.appendTo(L.empty()),u.calendar.find("."+t.top+"-year").text(u.dateManager.year),u.calendar.find("."+t.top+"-month").text(_.settings.monthsLong[u.dateManager.month-1]),u.calendar.find(n.format(".{0}-prev .{0}-value",t.top)).text(_.settings.months[u.dateManager.prevMonth-1].toUpperCase()),u.calendar.find(n.format(".{0}-next .{0}-value",t.top)).text(_.settings.months[u.dateManager.nextMonth-1].toUpperCase()),!0===_.settings.buttons&&M){var l=s;M.find("."+t.button).bind("click",(function(e){e.preventDefault(),e.stopPropagation();var a=i(this);if(a.hasClass(t.button+"-apply")){a.trigger("apply."+r.name,u);var s="";if(!0===_.settings.toggle)s=u.storage.activeDates.join(", ");else if(!0===_.settings.multiple){var o=[];null!==u.current[0]&&o.push(u.current[0].format(_.settings.format)),null!==u.current[1]&&o.push(u.current[1].format(_.settings.format)),s=o.join(" ~ ")}else s=null===u.current[0]?"":d(u.current[0]).format(_.settings.format);!0===u.input&&l.val(s).triggerHandler("change"),"function"==typeof _.settings.apply&&_.settings.apply.call(u.calendar,u.current,u),L.triggerHandler("apply."+n.getClass(r.name))}else L.triggerHandler("cancel."+n.getClass(r.name))}))}var Y=u.calendar.find("."+t.body).empty(),k=e.Convert(u.dateManager.year,u.dateManager.month,u.dateManager.firstDay),b=e.Convert(u.dateManager.year,u.dateManager.month,u.dateManager.lastDay),A=k.weekday()-_.settings.week,w=b.weekday()-_.settings.week;A<0&&(A+=_.settings.weeks.length);for(var x=[],T=[null===u.current[0]?null:u.current[0].format("YYYY-MM-DD"),null===u.current[1]?null:u.current[1].format("YYYY-MM-DD")],C=null===_.settings.minDate?null:d(_.settings.minDate),S=null===_.settings.maxDate?null:d(_.settings.maxDate),j=0;j<A;j++){var H=i(n.format('<div class="{0} {0}-{1}"></div>',n.getSubClass("unit"),a.languages.weeks.en[j].toLowerCase()));x.push(H)}for(var B=function(t){var l=e.Convert(u.dateManager.year,u.dateManager.month,t),M=l.format("YYYY-MM-DD"),Y=i(n.format('<div class="{0} {0}-date {0}-{3}" data-date="{1}"><a href="#">{2}</a></div>',n.getSubClass("unit"),l.format("YYYY-MM-DD"),t,a.languages.weeks.en[l.weekday()].toLowerCase()));if(_.settings.enabledDates.length>0)-1===i.inArray(M,_.settings.enabledDates)&&Y.addClass(n.getSubClass("unitDisabled"));else if(_.settings.disabledWeekdays.length>0&&-1!==i.inArray(l.weekday(),_.settings.disabledWeekdays))Y.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledWeekdays"));else if(null!==C&&C.diff(l)>0||null!==S&&S.diff(l)<0)Y.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledRange"));else if(-1!==i.inArray(M,_.settings.disabledDates))Y.addClass(n.getSubClass("unitDisabled"));else if(_.settings.disabledRanges.length>0)for(var k=_.settings.disabledRanges.length,b=0;b<k;b++){var A=_.settings.disabledRanges[b];if(A.length,l.diff(d(A[0]))>=0&&l.diff(d(A[1]))<=0){Y.addClass(n.getSubClass("unitDisabled")).addClass(n.getSubClass("unitDisabledRange")).addClass(n.getSubClass("unitDisabledMultipleRange"));break}}if(_.settings.schedules.length>0&&"object"===o(_.settings.scheduleOptions)&&"object"===o(_.settings.scheduleOptions.colors)){var w=_.settings.schedules.filter((function(e){return e.date===M})),j=i.unique(w.map((function(e,t){return e.name})).sort());if(j.length>0){var H=i(_.global.calendarScheduleContainerHtml);H.appendTo(Y),j.map((function(e,t){if(_.settings.scheduleOptions.colors[e]){var r=_.settings.scheduleOptions.colors[e];i(n.format(_.global.calendarSchedulePinHtml,e,r)).appendTo(H)}}))}}!0===_.settings.toggle?-1!==i.inArray(M,u.storage.activeDates)&&u.storage.activeDates.length>0?Y.addClass(g):Y.addClass(y):!1===Y.hasClass(n.getSubClass("unitDisabled"))&&(!0===_.settings.multiple?(T[0]&&M===T[0]&&Y.addClass(p).addClass(f[0]),T[1]&&M===T[1]&&Y.addClass(p).addClass(f[1])):T[0]&&M===T[0]&&-1===i.inArray(T[0],_.settings.disabledDates)&&(_.settings.enabledDates.length<1||-1!==i.inArray(T[0],_.settings.enabledDates))&&Y.addClass(p).addClass(f[0])),x.push(Y);var B=s;Y.bind("click",(function(e){e.preventDefault(),e.stopPropagation();var t=i(this),a=t.data("date"),s=0,o=!1;if(t.hasClass(n.getSubClass("unitDisabled")))o=!0;else if(!0===u.input&&!1===_.settings.multiple&&!1===_.settings.buttons)B.val(d(a).format(_.settings.format)),L.triggerHandler("apply."+n.getClass(r.name));else if(null!==u.initialize&&u.initialize.format("YYYY-MM-DD")===a&&!1===_.settings.toggle);else{if(!0===_.settings.toggle){var l=u.storage.activeDates.filter((function(e,t){return e===a}));if(u.current[s]=d(a),l.length<1)u.storage.activeDates.push(a),t.addClass(g).removeClass(y);else{for(var M=0,Y=0;Y<u.storage.activeDates.length;Y++){var k=u.storage.activeDates[Y];if(a===k){M=Y;break}}u.storage.activeDates.splice(M,1),t.removeClass(g).addClass(y)}}else if(!0===t.hasClass(p)&&!1===_.settings.pickWeeks)!0===_.settings.multiple&&(t.hasClass(f[0])?s=0:f[1]&&(s=1)),t.removeClass(p).removeClass(f[s]),u.current[s]=null;else{if(!0===_.settings.pickWeeks)if(!0===t.hasClass(p)||!0===t.hasClass(c)){for(var b=0;b<2;b++)u.calendar.find("."+p+"."+f[b]).removeClass(p).removeClass(f[b]);u.current[0]=null,u.current[1]=null}else{u.current[0]=d(a).startOf("week").add(_.settings.week,"days"),u.current[1]=d(a).endOf("week").add(_.settings.week,"days");for(var A=0;A<2;A++)u.calendar.find("."+p+"."+f[A]).removeClass(p).removeClass(f[A]),u.calendar.find(n.format('.{0}[data-date="{1}"]',n.getSubClass("unit"),u.current[A].format("YYYY-MM-DD"))).addClass(p).addClass(f[A])}else!0===_.settings.multiple&&(null===u.current[0]?s=0:null===u.current[1]?s=1:(s=0,u.current[1]=null,u.calendar.find("."+p+"."+f[1]).removeClass(p).removeClass(f[1]))),u.calendar.find("."+p+"."+f[s]).removeClass(p).removeClass(f[s]),t.addClass(p).addClass(f[s]),u.current[s]=d(a);if(u.current[0]&&u.current[1]){if(u.current[0].diff(u.current[1])>0){var w=u.current[0];u.current[0]=u.current[1],u.current[1]=w,w=null,u.calendar.find("."+p).each((function(){var e=i(this);for(var t in f){var n=f[t];e.toggleClass(n)}}))}if(!1===function(e,t){var n;for(var r in _.settings.disabledDates)if(n=d(_.settings.disabledDates[r]),D(e,t,n))return!1;if(D(e,t,_.settings.maxDate))return!1;if(D(e,t,_.settings.minDate))return!1;for(var a in _.settings.disabledRanges){var s=_.settings.disabledRanges[a],o=d(s[0]),i=d(s[1]);if(D(e,t,o)||D(e,t,i))return!1}var l,u=e.weekday(),c=t.weekday();u>c&&(l=u,u=c,c=l);for(var m=0,h=0;m<_.settings.disabledWeekdays.length&&h<7;m++){h++;var p=_.settings.disabledWeekdays[m];if(p>=u&&p<=c)return!1}return!0}(u.current[0],u.current[1])&&!1===_.settings.selectOver&&(u.current[0]=null,u.current[1]=null,u.calendar.find("."+p).removeClass(p).removeClass(f[0]).removeClass(f[1])),!0===u.input&&!1===_.settings.buttons){var x=[];null!==u.current[0]&&x.push(u.current[0].format(_.settings.format)),null!==u.current[1]&&x.push(u.current[1].format(_.settings.format)),t.val(x.join(", ")),L.trigger("apply."+n.getClass(r.name))}}}!0===_.settings.multiple&&(u.calendar.find("."+c).removeClass(c).removeClass(m).removeClass(h),v.call()),_.settings.schedules.length>0&&(u.storage.schedules=_.settings.schedules.filter((function(e){return e.date===a})))}var T=function(e){u.date.all.push(e),function(e){if(-1!==_.settings.disabledDates.indexOf(e))return!1;if(e.diff(_.settings.maxDate)>=0)return!1;if(e.diff(_.settings.minDate)<=0)return!1;for(var t in _.settings.disabledRanges){var n=_.settings.disabledRanges[t],r=d(n[0]),a=d(n[1]);if(D(r,a,e))return!1}var s=e.weekday();return-1===_.settings.disabledWeekdays.indexOf(s)}(d(e))?u.date.enabled.push(e):u.date.disabled.push(e)};if(u.current[0])if(u.current[1])for(var C=u.current[0].clone();C.format("YYYY-MM-DD")<=u.current[1].format("YYYY-MM-DD");C.add("1","days"))T(C.clone());else T(u.current[0].clone());!1===o&&(u.initialize=null,"function"==typeof _.settings.select&&_.settings.select.call(t,u.current,u)),"function"==typeof _.settings.click&&_.settings.click.call(t,e,u)}))},O=u.dateManager.firstDay;O<=u.dateManager.lastDay;O++)B(O);for(var W=w+1;x.length<5*_.settings.weeks.length;W++){W<0&&(W=a.languages.weeks.en.length-W);var E=i(n.format('<div class="{0} {0}-{1}"></div>',n.getSubClass("unit"),a.languages.weeks.en[W%a.languages.weeks.en.length].toLowerCase()));x.push(E)}for(var P=null,F=0;F<x.length;F++){var z=x[F];(F%_.settings.weeks.length==0||F+1>=x.length)&&(null!==P&&P.appendTo(Y),F+1<x.length&&(P=i(n.format('<div class="{0}"></div>',n.getSubClass("row"))))),P.append(z)}u.calendar.find("."+t.top+"-nav").bind("click",(function(n){n.preventDefault(),n.stopPropagation();var r=i(this),a="unkown";r.hasClass(t.top+"-prev")?(a="prev",u.dateManager=new e(u.dateManager.date.clone().add(-1,"months"))):r.hasClass(t.top+"-next")&&(a="next",u.dateManager=new e(u.dateManager.date.clone().add(1,"months"))),"function"==typeof _.settings.page&&_.settings.page.call(r,{type:a,year:u.dateManager.year,month:u.dateManager.month,day:u.dateManager.day},u),"function"==typeof _.settings[a]&&_.settings[a].call(r,{type:a,year:u.dateManager.year,month:u.dateManager.month,day:u.dateManager.day},u),u.renderer.call()})),!0===_.settings.multiple&&(u.calendar.find("."+c).removeClass(c).removeClass(m).removeClass(h),v.call())},u.renderer.call(),s[0][r.name]=u,"function"==typeof _.settings.init&&_.settings.init.call(s,u)}))}})),a("methods/setting",["../component/global","../configures/i18n","jquery"],(function(e,t,n){return function(t){var r=n.extend({language:e.language,languages:{},week:null,format:null},t),a=12;if(e.language=r.language,Object.keys(r.languages).length>0){var s=function(t){var n=r.languages[t];if("string"!=typeof t&&console.error("global configuration is failed.\nMessage: language key is not a string type.",t),!n.weeks)return console.warn("Warning: `weeks` option of `"+t+"` language is missing."),"break";if(!n.monthsLong)return console.warn("Warning: `monthsLong` option of `"+t+"` language is missing."),"break";if(!n.months)return console.warn("Warning: `months` option of `"+t+"` language is missing."),"break";if(!n.controls)return console.warn("Warning: `controls` option of `"+t+"` language is missing."),"break";if(n.weeks){if(n.weeks.length<7)return console.error("`weeks` must have least 7 items."),"break";7!==n.weeks.length&&console.warn("`weeks` option over 7 items. We recommend to give 7 items.")}if(n.monthsLong){if(n.monthsLong.length<a)return console.error("`monthsLong` must have least 12 items."),"break";n.monthsLong.length!==a&&console.warn("`monthsLong` option over 12 items. We recommend to give 12 items.")}if(n.months){if(n.months.length<a)return console.error("`months` must have least 12 items."),"break";n.months.length!==a&&console.warn("`months` option over 12 items. We recommend to give 12 items.")}if(n.controls){if(!n.controls.ok)return console.error("`controls.ok` value is missing in your language setting"),"break";if(!n.controls.cancel)return console.error("`controls.cancel` value is missing in your language setting"),"break"}-1===e.languages.supports.indexOf(t)&&e.languages.supports.push(t),["weeks","monthsLong","months","controls"].map((function(r){e.languages[r][t]&&console.warn("`"+t+"` language is already given however it will be overwriten."),e.languages[r][t]=n[r]||e.languages[r][t.defaultLanguage]}))};for(var o in r.languages)if("break"===s(o))break}r.week&&("number"==typeof r.week?e.week=r.week:console.error("global configuration is failed.\nMessage: You must give `week` option as number type.")),r.format&&("string"==typeof r.format?e.format=r.format:console.error("global configuration is failed.\nMessage: You must give `format` option as string type."))}})),a("methods/select",["../component/helper","jquery"],(function(e,t){return function(n){this.each((function(){var r=this.local.dateManager,a=e.format("{0}-{1}-{2}",r.year,r.month,n);t(this).find(e.format('.{0}[data-date="{1}"]',e.getSubClass("unit"),a)).triggerHandler("click")}))}})),a("methods/set",["jquery","moment","../manager/index","../component/models"],(function(e,t,n,r){return function(a){if(a){var s=a.split("~").map((function(t){return e.trim(t)||null}));this.each((function(){var a=e(this)[0][r.name],o=a.context,i=[s[0]?t(s[0],o.settings.format):null,s[1]?t(s[1],o.settings.format):null];if(a.dateManager=new n(i[0]),!0===o.settings.pickWeeks&&i[0]){var d=i[0];i[0]=d.clone().startOf("week"),i[1]=d.clone().endOf("week")}!0===o.settings.toggle?a.storage.activeDates=s:a.current=i,a.renderer.call()}))}}})),a("methods/index",["./init","./configure","./setting","./select","./set"],(function(e,t,n,r,a){return{init:e,configure:t,setting:n,select:r,set:a}})),a("component/polyfills",[],(function(){Array.prototype.filter||(Array.prototype.filter=function(e){"use strict";if(null===this)throw new TypeError;var t=Object(this),n=t.length>>>0;if("function"!=typeof e)return[];for(var r=[],a=arguments[1],s=0;s<n;s++)if(s in t){var o=t[s];e.call(a,o,s,t)&&r.push(o)}return r})})),a("core",["./methods/index","./component/models","./component/polyfills"],(function(e,t){"use strict";return window[t.name]={version:t.version},e})),a("main",["core","component/models"],(function(e,t){"use strict";var n=function(t,n){return void 0!==e[n]?e[n].apply(t,Array.prototype.slice.call(arguments,2)):"object"!==o(n)&&n?void console.error("Argument error are occured."):e.init.apply(t,Array.prototype.slice.call(arguments,1))};for(var r in n.component={},t)n.component[r]=t[r];return n}));var i=r("main"),d=r("component/models"),l=r("jquery"),u=window||{};for(var _ in u.moment=r("moment"),l.fn[d.name]=function(e){return i.apply(i,[this,e].concat(Array.prototype.splice.call(arguments,1)))},d)l.fn[d.name][_]=d[_];a("plugins/jquery.js",(function(){}))}(0,t)}.apply(t,r))||(e.exports=a)},1643:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(7828);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},5526:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(1304);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},5714:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(8365);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},5775:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(3680);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},9658:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(4753);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},7764:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(879);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},1138:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(3841);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},4936:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(4453);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},6213:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(1986);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},9620:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(4800);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},1732:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(3182);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},3071:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(3379),a=n.n(r),s=n(6647);a()(s.Z,{insert:"head",singleton:!1});const o=s.Z.locals||{}},3379:(e,t,n)=>{"use strict";var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function o(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function i(e,t){for(var n={},r=[],a=0;a<e.length;a++){var i=e[a],d=t.base?i[0]+t.base:i[0],l=n[d]||0,u="".concat(d," ").concat(l);n[d]=l+1;var _=o(u),c={css:i[1],media:i[2],sourceMap:i[3]};-1!==_?(s[_].references++,s[_].updater(c)):s.push({identifier:u,updater:p(c,t),references:1}),r.push(u)}return r}function d(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var s=n.nc;s&&(r.nonce=s)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function _(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,a);else{var s=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(s,o[t]):e.appendChild(s)}}function c(e,t,n){var r=n.css,a=n.media,s=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function p(e,t){var n,r,a;if(t.singleton){var s=h++;n=m||(m=d(t)),r=_.bind(null,n,s,!1),a=_.bind(null,n,s,!0)}else n=d(t),r=c.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=i(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=o(n[r]);s[a].references--}for(var d=i(e,t),l=0;l<n.length;l++){var u=o(n[l]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=d}}}},9240:(e,t,n)=>{"use strict";var r=n(9755);Object.defineProperty(t,"__esModule",{value:!0}),n(2769),r(document).ready((function(){r(".calendar").pignoseCalendar({week:1,lang:"ru",multiple:!0})})),r((function(){r(".dropdown-block__dropdown").on("click",(function(){var e=r(this).closest(".dropdown-dates").find(".calendar-block");e.hasClass("calendar-block_hide")?(e.removeClass("calendar-block_hide"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("calendar-block_hide"),r(this).removeClass("dropdown-block__dropdown_items-show"))}))}))},9599:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9755);r((function(){r(".dropdown-block__dropdown").on("click",(function(){var e=r(this).closest(".dropdown-block").find(".dropdown-block__dropdown-items");e.hasClass("dropdown-block__dropdown-items_hide")?(e.removeClass("dropdown-block__dropdown-items_hide"),r(this).addClass("dropdown-block__dropdown_items-show")):(e.addClass("dropdown-block__dropdown-items_hide"),r(this).removeClass("dropdown-block__dropdown_items-show"))})),r(".dropdown-block__inc-qty-minus").on("click",(function(){var e,t,n=0;if(e=r(this).closest(".dropdown-block__block-qty").find("span"),(t=parseInt(e.html()))>0&&(n=t-1,e.html(n)),1==t||0==t)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var a=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-plus");a.hasClass("dropdown-block__inc-qty_disable")&&a.removeClass("dropdown-block__inc-qty_disable")}})),r(".dropdown-block__inc-qty-plus").on("click",(function(){var e,t,n=0;if(e=r(this).closest(".dropdown-block__block-qty").find("span"),(t=parseInt(e.html()))<10&&(n=t+1,e.html(n)),9==t||10==t)r(this).addClass("dropdown-block__inc-qty_disable");else{r(this).removeClass("dropdown-block__inc-qty_disable");var a=r(this).closest(".dropdown-block__block-qty").find(".dropdown-block__inc-qty-minus");a.hasClass("dropdown-block__inc-qty_disable")&&a.removeClass("dropdown-block__inc-qty_disable")}}))}))},7869:(e,t,n)=>{"use strict";e.exports=n.p+"317b418ed317e258b173.ttf"},7771:(e,t,n)=>{"use strict";e.exports=n.p+"3db65dc4b858f0fed4fb.woff"},3988:(e,t,n)=>{"use strict";e.exports=n.p+"8b56391ed36ea95337c6.woff2"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";n(3071),n(9620),n(5714),n(5775),n(9599),n(9658),n(7764),n(1138),n(4936),n(6213),n(5526),n(1643),n(9240),n(1732)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,